
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 81 02 00       	call   c00281d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2c 8e 02 c0       	mov    ebx,0xc0028e2c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 38 8e 02 c0    	cmp    ebx,0xc0028e38
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 cb 02 c0       	mov    eax,0xc002cb38
c0000049:	3d 38 cb 02 c0       	cmp    eax,0xc002cb38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 cb 02 c0       	push   0xc002cb38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 cb 02 c0       	mov    eax,0xc002cb38
c0000075:	2d 38 cb 02 c0       	sub    eax,0xc002cb38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 cb 02 c0       	push   0xc002cb38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d168,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 40 8e 02 c0       	mov    ebx,0xc0028e40
c00000bb:	81 eb 3c 8e 02 c0    	sub    ebx,0xc0028e3c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 3c 8e 02 c0       	mov    esi,0xc0028e3c
c00000ca:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d1 02 c0       	mov    ds:0xc002d16c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 cb 02 c0       	push   0xc002cb38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d168,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d1 02 c0       	push   0xc002d170
c000012c:	68 38 cb 02 c0       	push   0xc002cb38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 11 cd 01 00       	call   c001d0b4 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 50 1f 01 00       	call   c001230b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 ef cc 01 00       	call   c001d0b4 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 97 d1 01 00       	call   c001d57b <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 ad d7 01 00       	call   c001db9a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 d5 02 c0 	lgdtd  ds:0xc002d5b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 49 3c 01 00       	call   c001422b <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 88 d1 02 c0       	mov    ds:0xc002d188,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 88 d1 02 c0    	mov    DWORD PTR ds:0xc002d188,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 88 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d188
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd71a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd71a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd71a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d a0 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1a0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 a4 d1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2e5c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 a4 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e5c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d dc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1dc
c0000e38:	c7 42 0c d4 d1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d1d4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 a0 d1 02 c0 02 	test   BYTE PTR ds:0xc002d1a0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d a0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1a0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 a4 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e5c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 a4 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2e5c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 d4 d1 02 c0 	lea    edx,[eax*8-0x3ffd2e2c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d e0 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1e0
c00011ba:	81 fb d4 d1 02 c0    	cmp    ebx,0xc002d1d4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d d4 d1 02 c0       	cmp    eax,0xc002d1d4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d d0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1d0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 dc d1 02 c0       	mov    ds:0xc002d1dc,eax
c00011f6:	a3 e0 d1 02 c0       	mov    ds:0xc002d1e0,eax
c00011fb:	a3 d0 d1 02 c0       	mov    ds:0xc002d1d0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 d4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1d4
c0001209:	c7 40 0c d4 d1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d1d4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 e0 d1 02 c0       	mov    ds:0xc002d1e0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 d4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1d4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 98 d1 02 c0 	lea    ebp,[edx*4-0x3ffd2e68]
c000125a:	8b 14 95 a0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e60]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 a0 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2e60]
c0001275:	8b 14 95 a0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e60]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd d4 d4 02 c0 	or     DWORD PTR [edi*4-0x3ffd2b2c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 d4 d1 02 c0 	lea    eax,[eax*8-0x3ffd2e2c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,ecx
c000132f:	89 0d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,ecx
c0001335:	c7 41 08 d4 d1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d1d4
c000133c:	c7 41 0c d4 d1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d1d4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd cc d1 02 c0 	lea    edx,[ecx*8-0x3ffd2e34]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d d4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b2c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d d4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b2c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 cc d1 02 c0 	lea    edx,[eax*4-0x3ffd2e34]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d d4 d4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2b2c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,edi
c0001402:	89 3d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,edi
c0001408:	c7 47 08 d4 d1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d1d4
c000140f:	c7 47 0c d4 d1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d1d4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d d0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1d0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba a0 d1 02 c0       	mov    edx,0xc002d1a0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d f4 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4f4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 f4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4f4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d f4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4f4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 fc d4 02 c0    	push   DWORD PTR ds:0xc002d4fc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 fc d4 02 c0       	mov    eax,ds:0xc002d4fc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d cc d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1cc,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 a4 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e5c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 d4 d1 02 c0       	mov    eax,0xc002d1d4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d cc d4 02 c0       	cmp    eax,0xc002d4cc
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 08 d5 02 c0       	mov    eax,ds:0xc002d508
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 f0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4f0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 04 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d504
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 14 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d514
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd709c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 a0 d1 02 c0       	mov    ds:0xc002d1a0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d e4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d e8 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ec d4 02 c0    	mov    DWORD PTR ds:0xc002d4ec,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 f4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4f4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 d8 e9 01 00       	jmp    c00205ca <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 09 ea 01 00       	jmp    c0020611 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 31 ea 01 00       	jmp    c0020658 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 2a 46 02 00       	call   c0026534 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 6c ba 02 c0       	mov    edx,0xc002ba6c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 90 02 c0       	mov    edx,0xc00290ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 90 02 c0       	mov    edx,0xc0029090
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 40 d5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2ac0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 20 d5 02 c0    	mov    ax,ds:0xc002d520
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 20 d5 02 c0    	mov    ds:0xc002d520,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 27 34 02 00       	call   c0026534 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 90 02 c0       	mov    eax,0xc00290b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7000]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 90 02 c0       	mov    eax,0xc00290bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 f2 1d 02 00       	call   c0026534 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 90 02 c0       	mov    edx,0xc0029090
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 40 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ac0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 40 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2ac0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 b9 07 02 00       	call   c0026534 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 9f 07 02 00       	call   c0026534 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 8f 02 c0       	mov    eax,0xc0028fd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 8f 02 c0       	mov    eax,0xc0028fd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 40 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ac0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 8f 02 c0       	mov    esi,0xc0028fc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 e2 ee 01 00       	call   c0026534 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 8f 02 c0       	mov    edx,0xc0028fb0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 90 02 c0       	mov    edx,0xc00290c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 90 02 c0       	mov    edx,0xc00290ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 90 02 c0       	mov    edx,0xc00290e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029400
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029400
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 92 02 c0       	mov    eax,0xc0029200
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 91 02 c0       	mov    eax,0xc0029140
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 36 f8 01 00       	call   c0028007 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 f9 f7 01 00       	call   c0027fe9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 cd f7 01 00       	call   c0028007 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 80 ee 01 00       	call   c002770c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 02 f9 01 00       	call   c00281a0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 47 f7 01 00       	call   c0028007 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 89 f6 01 00       	call   c0028007 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 56 f6 01 00       	call   c0027fe9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 43 f5 01 00       	call   c0028007 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 0b f5 01 00       	call   c0027fe9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 95 02 c0       	mov    eax,0xc0029500
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 17 f3 01 00       	call   c0028007 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 dc f2 01 00       	call   c0027fe9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ec ef 01 00       	call   c0027d9b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 6a e9 01 00       	call   c0027738 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 26 f2 01 00       	call   c002800b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 14 f3 01 00       	call   c002812f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 fe e8 01 00       	call   c0027738 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 a9 f1 01 00       	call   c0028005 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 8a f1 01 00       	call   c0028009 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 20 f3 01 00       	call   c00281c0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 ca ee 01 00       	call   c0027d9b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 48 e8 01 00       	call   c0027738 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 04 f1 01 00       	call   c002800b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 f2 f1 01 00       	call   c002812f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 dc e7 01 00       	call   c0027738 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 87 f0 01 00       	call   c0028005 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 67 f0 01 00       	call   c0028009 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 fc f1 01 00       	call   c00281c0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 a2 ef 01 00       	call   c0028007 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 60 ef 01 00       	call   c0027fe9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 48 ef 01 00       	call   c0028007 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ba ec 01 00       	call   c0027d9b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 bc df 01 00       	call   c00270bb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 1f e6 01 00       	call   c0027738 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 71 ec 01 00       	call   c0027d9b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 77 df 01 00       	call   c00270bb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 46 ec 01 00       	call   c0027d9b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 96 ee 01 00       	call   c0028005 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 73 e5 01 00       	call   c002770c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 f5 ef 01 00       	call   c00281a0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 1c ee 01 00       	call   c0027fe9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 17 e5 01 00       	call   c002770c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 95 eb 01 00       	call   c0027d9b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 18 e5 01 00       	call   c0027738 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 6a eb 01 00       	call   c0027d9b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 d1 e7 01 00       	call   c0027a1c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 50 de 01 00       	call   c00270bb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 b0 d7 01 00       	call   c0026a50 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 87 ee 01 00       	call   c002812f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 70 e4 01 00       	call   c0027738 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 57 ee 01 00       	call   c002812f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 c9 dd 01 00       	call   c00270bb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 02 ed 01 00       	call   c002800b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ea e6 01 00       	call   c0027a1c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 70 dd 01 00       	call   c00270bb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 5e ee 01 00       	call   c00281c0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 30 ea 01 00       	call   c0027d9b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 87 e3 01 00       	call   c002770c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 66 ec 01 00       	call   c0028007 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 ff dc 01 00       	call   c00270bb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 2b e3 01 00       	call   c002770c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 cd ed 01 00       	call   c00281c0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 7e e9 01 00       	call   c0027d9b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 fb e2 01 00       	call   c0027738 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 4e e9 01 00       	call   c0027d9b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 54 dc 01 00       	call   c00270bb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 24 e9 01 00       	call   c0027d9b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 76 eb 01 00       	call   c0028007 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 4d e2 01 00       	call   c002770c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 cf ec 01 00       	call   c00281a0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 f6 ea 01 00       	call   c0027fe9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 f0 e1 01 00       	call   c002770c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 6e e8 01 00       	call   c0027d9b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 f1 e1 01 00       	call   c0027738 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 43 e8 01 00       	call   c0027d9b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 aa e4 01 00       	call   c0027a1c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 29 db 01 00       	call   c00270bb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 79 d4 01 00       	call   c0026a50 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 50 eb 01 00       	call   c002812f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 39 e1 01 00       	call   c0027738 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 20 eb 01 00       	call   c002812f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 92 da 01 00       	call   c00270bb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 cb e9 01 00       	call   c002800b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 b2 e3 01 00       	call   c0027a1c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 31 da 01 00       	call   c00270bb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 1f eb 01 00       	call   c00281c0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 f1 e6 01 00       	call   c0027d9b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 48 e0 01 00       	call   c002770c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 27 e9 01 00       	call   c0028007 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 c0 d9 01 00       	call   c00270bb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ec df 01 00       	call   c002770c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 61 e6 01 00       	call   c0027d9b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 67 d9 01 00       	call   c00270bb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 99 02 c0       	mov    eax,0xc00299d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 dc e4 01 00       	call   c0027d9b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 5a de 01 00       	call   c0027738 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ec d0 01 00       	call   c0026a50 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 c3 e7 01 00       	call   c002812f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 ac dd 01 00       	call   c0027738 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 8f e7 01 00       	call   c002812f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 01 d7 01 00       	call   c00270bb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 61 e7 01 00       	call   c002812f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 50 dd 01 00       	call   c0027738 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 b9 d6 01 00       	call   c00270bb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 da cf 01 00       	call   c0026a50 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 b1 e6 01 00       	call   c002812f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 9a dc 01 00       	call   c0027738 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 7d e6 01 00       	call   c002812f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ef d5 01 00       	call   c00270bb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 4f e6 01 00       	call   c002812f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 3e dc 01 00       	call   c0027738 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 a7 d5 01 00       	call   c00270bb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 85 d5 01 00       	call   c00270bb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 61 ce 01 00       	call   c0026a50 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 38 e5 01 00       	call   c002812f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 21 db 01 00       	call   c0027738 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 04 e5 01 00       	call   c002812f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 76 d4 01 00       	call   c00270bb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 d6 e4 01 00       	call   c002812f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 bf da 01 00       	call   c0027738 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 28 d4 01 00       	call   c00270bb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 88 e4 01 00       	call   c002812f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 71 da 01 00       	call   c0027738 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 da d3 01 00       	call   c00270bb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ef cc 01 00       	call   c0026a50 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 c6 e3 01 00       	call   c002812f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 af d9 01 00       	call   c0027738 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 96 e3 01 00       	call   c002812f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 08 d3 01 00       	call   c00270bb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 68 e3 01 00       	call   c002812f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 51 d9 01 00       	call   c0027738 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ba d2 01 00       	call   c00270bb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 1a e3 01 00       	call   c002812f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 03 d9 01 00       	call   c0027738 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 6c d2 01 00       	call   c00270bb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 40 d2 01 00       	call   c00270bb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 9d d8 01 00       	call   c0027738 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 59 e1 01 00       	call   c002800b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 e8 d1 01 00       	call   c00270bb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 45 d8 01 00       	call   c0027738 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 01 e1 01 00       	call   c002800b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 7b ca 01 00       	call   c0026a50 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 52 e1 01 00       	call   c002812f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 3b d7 01 00       	call   c0027738 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 1e e1 01 00       	call   c002812f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 90 d0 01 00       	call   c00270bb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 f0 e0 01 00       	call   c002812f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 d9 d6 01 00       	call   c0027738 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 42 d0 01 00       	call   c00270bb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 a2 e0 01 00       	call   c002812f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 8b d6 01 00       	call   c0027738 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 f4 cf 01 00       	call   c00270bb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 54 e0 01 00       	call   c002812f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 3d d6 01 00       	call   c0027738 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 a6 cf 01 00       	call   c00270bb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 06 e0 01 00       	call   c002812f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ef d5 01 00       	call   c0027738 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 58 cf 01 00       	call   c00270bb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 5a c8 01 00       	call   c0026a50 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 31 df 01 00       	call   c002812f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 1a d5 01 00       	call   c0027738 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 01 df 01 00       	call   c002812f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 73 ce 01 00       	call   c00270bb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 d3 de 01 00       	call   c002812f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 bc d4 01 00       	call   c0027738 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 25 ce 01 00       	call   c00270bb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 85 de 01 00       	call   c002812f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 6e d4 01 00       	call   c0027738 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 d7 cd 01 00       	call   c00270bb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 37 de 01 00       	call   c002812f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 20 d4 01 00       	call   c0027738 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 89 cd 01 00       	call   c00270bb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 e9 dd 01 00       	call   c002812f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 d2 d3 01 00       	call   c0027738 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 3b cd 01 00       	call   c00270bb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 0f cd 01 00       	call   c00270bb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 6c d3 01 00       	call   c0027738 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 28 dc 01 00       	call   c002800b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 b7 cc 01 00       	call   c00270bb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 14 d3 01 00       	call   c0027738 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 d0 db 01 00       	call   c002800b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 5e cc 01 00       	call   c00270bb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 bb d2 01 00       	call   c0027738 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 77 db 01 00       	call   c002800b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 05 cc 01 00       	call   c00270bb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 62 d2 01 00       	call   c0027738 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 1e db 01 00       	call   c002800b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 7c c4 01 00       	call   c0026a50 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 53 db 01 00       	call   c002812f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 3c d1 01 00       	call   c0027738 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 1f db 01 00       	call   c002812f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 91 ca 01 00       	call   c00270bb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 f1 da 01 00       	call   c002812f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 da d0 01 00       	call   c0027738 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 43 ca 01 00       	call   c00270bb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 a3 da 01 00       	call   c002812f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 8c d0 01 00       	call   c0027738 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 f5 c9 01 00       	call   c00270bb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 55 da 01 00       	call   c002812f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 3e d0 01 00       	call   c0027738 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 a7 c9 01 00       	call   c00270bb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 07 da 01 00       	call   c002812f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 f0 cf 01 00       	call   c0027738 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 59 c9 01 00       	call   c00270bb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 b9 d9 01 00       	call   c002812f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 a2 cf 01 00       	call   c0027738 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 08 c9 01 00       	call   c00270bb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 68 d9 01 00       	call   c002812f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 51 cf 01 00       	call   c0027738 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ba c8 01 00       	call   c00270bb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 b4 c1 01 00       	call   c0026a50 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 8b d8 01 00       	call   c002812f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 74 ce 01 00       	call   c0027738 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 54 d8 01 00       	call   c002812f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 c6 c7 01 00       	call   c00270bb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 26 d8 01 00       	call   c002812f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 0f ce 01 00       	call   c0027738 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 78 c7 01 00       	call   c00270bb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 d8 d7 01 00       	call   c002812f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 c1 cd 01 00       	call   c0027738 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 2a c7 01 00       	call   c00270bb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 8a d7 01 00       	call   c002812f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 73 cd 01 00       	call   c0027738 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 dc c6 01 00       	call   c00270bb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 3c d7 01 00       	call   c002812f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 25 cd 01 00       	call   c0027738 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 8e c6 01 00       	call   c00270bb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ee d6 01 00       	call   c002812f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 d7 cc 01 00       	call   c0027738 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 3d c6 01 00       	call   c00270bb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 9d d6 01 00       	call   c002812f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 86 cc 01 00       	call   c0027738 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 f5 c5 01 00       	call   c00270bb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ce c5 01 00       	call   c00270bb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 2c cc 01 00       	call   c0027738 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 e8 d4 01 00       	call   c002800b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 77 c5 01 00       	call   c00270bb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 d5 cb 01 00       	call   c0027738 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 91 d4 01 00       	call   c002800b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 1f c5 01 00       	call   c00270bb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 7d cb 01 00       	call   c0027738 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 39 d4 01 00       	call   c002800b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 c7 c4 01 00       	call   c00270bb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 25 cb 01 00       	call   c0027738 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 e1 d3 01 00       	call   c002800b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 6f c4 01 00       	call   c00270bb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 cd ca 01 00       	call   c0027738 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 89 d3 01 00       	call   c002800b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 1d c4 01 00       	call   c00270bb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 7b ca 01 00       	call   c0027738 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 37 d3 01 00       	call   c002800b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 4b bc 01 00       	call   c0026a50 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 22 d3 01 00       	call   c002812f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 0b c9 01 00       	call   c0027738 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 f2 d2 01 00       	call   c002812f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 64 c2 01 00       	call   c00270bb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 98 d2 01 00       	call   c002812f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 81 c8 01 00       	call   c0027738 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ec c1 01 00       	call   c00270bb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 39 d2 01 00       	call   c002812f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 22 c8 01 00       	call   c0027738 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 8d c1 01 00       	call   c00270bb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 da d1 01 00       	call   c002812f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 c3 c7 01 00       	call   c0027738 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 2e c1 01 00       	call   c00270bb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 7b d1 01 00       	call   c002812f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 64 c7 01 00       	call   c0027738 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 cf c0 01 00       	call   c00270bb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 1c d1 01 00       	call   c002812f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 05 c7 01 00       	call   c0027738 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 70 c0 01 00       	call   c00270bb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 bd d0 01 00       	call   c002812f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 a6 c6 01 00       	call   c0027738 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 11 c0 01 00       	call   c00270bb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 5e d0 01 00       	call   c002812f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 47 c6 01 00       	call   c0027738 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 b2 bf 01 00       	call   c00270bb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 ff cf 01 00       	call   c002812f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 e8 c5 01 00       	call   c0027738 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 53 bf 01 00       	call   c00270bb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 5d b8 01 00       	call   c0026a50 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 34 cf 01 00       	call   c002812f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 1d c5 01 00       	call   c0027738 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 04 cf 01 00       	call   c002812f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 76 be 01 00       	call   c00270bb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 a9 ce 01 00       	call   c002812f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 92 c4 01 00       	call   c0027738 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 fd bd 01 00       	call   c00270bb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 49 ce 01 00       	call   c002812f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 32 c4 01 00       	call   c0027738 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 9d bd 01 00       	call   c00270bb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 e9 cd 01 00       	call   c002812f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 d2 c3 01 00       	call   c0027738 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 3d bd 01 00       	call   c00270bb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 89 cd 01 00       	call   c002812f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 72 c3 01 00       	call   c0027738 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 dd bc 01 00       	call   c00270bb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 29 cd 01 00       	call   c002812f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 12 c3 01 00       	call   c0027738 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 7d bc 01 00       	call   c00270bb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 c9 cc 01 00       	call   c002812f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 b2 c2 01 00       	call   c0027738 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 1d bc 01 00       	call   c00270bb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 69 cc 01 00       	call   c002812f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 52 c2 01 00       	call   c0027738 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 bd bb 01 00       	call   c00270bb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 09 cc 01 00       	call   c002812f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 f2 c1 01 00       	call   c0027738 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 5d bb 01 00       	call   c00270bb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 02 bb 01 00       	call   c00270bb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 5f c1 01 00       	call   c0027738 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 1b ca 01 00       	call   c002800b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 a5 ba 01 00       	call   c00270bb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 02 c1 01 00       	call   c0027738 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 be c9 01 00       	call   c002800b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 48 ba 01 00       	call   c00270bb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 a5 c0 01 00       	call   c0027738 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 61 c9 01 00       	call   c002800b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 eb b9 01 00       	call   c00270bb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 48 c0 01 00       	call   c0027738 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 04 c9 01 00       	call   c002800b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 8e b9 01 00       	call   c00270bb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 eb bf 01 00       	call   c0027738 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 a7 c8 01 00       	call   c002800b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 31 b9 01 00       	call   c00270bb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 8e bf 01 00       	call   c0027738 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 4a c8 01 00       	call   c002800b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 d4 b8 01 00       	call   c00270bb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 31 bf 01 00       	call   c0027738 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ed c7 01 00       	call   c002800b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 77 b8 01 00       	call   c00270bb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 d4 be 01 00       	call   c0027738 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 90 c7 01 00       	call   c002800b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 8c be 01 00       	call   c0027738 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 04 c9 01 00       	jmp    c00281c0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 6e c5 01 00       	call   c0028007 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 2c c5 01 00       	call   c0027fe9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 c3 c2 01 00       	call   c0027d9b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 c4 b5 01 00       	call   c00270bb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 93 c2 01 00       	call   c0027d9b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 fa be 01 00       	call   c0027a1c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 99 c4 01 00       	call   c0027fe9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 9c c4 01 00       	call   c0028007 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 6f c4 01 00       	call   c0028007 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 68 be 01 00       	call   c0027a1c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 f2 c5 01 00       	call   c00281c0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 cd c5 01 00       	call   c00281c0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 9f c1 01 00       	call   c0027d9b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 f6 ba 01 00       	call   c002770c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 d5 c3 01 00       	call   c0028007 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 6e b4 01 00       	call   c00270bb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 92 ba 01 00       	call   c002770c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 34 c5 01 00       	call   c00281c0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 6c bd 01 00       	call   c0027a1c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 e9 b3 01 00       	call   c00270bb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 15 c0 01 00       	call   c0027d9b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 15 b3 01 00       	call   c00270bb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 f5 b2 01 00       	call   c00270bb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 c5 bf 01 00       	call   c0027d9b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 15 c2 01 00       	call   c0028005 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 f4 b8 01 00       	call   c002770c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 76 c3 01 00       	call   c00281a0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 9d c1 01 00       	call   c0027fe9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 9b b8 01 00       	call   c002770c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 19 bf 01 00       	call   c0027d9b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 9c b8 01 00       	call   c0027738 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ee be 01 00       	call   c0027d9b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 55 bb 01 00       	call   c0027a1c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 d4 b1 01 00       	call   c00270bb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 9e be 01 00       	call   c0027d9b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ea c0 01 00       	call   c0028007 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 df b7 01 00       	call   c0027738 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 b1 b7 01 00       	call   c0027738 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ea bd 01 00       	call   c0027d9b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 4e ba 01 00       	call   c0027a1c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 16 ba 01 00       	call   c0027a1c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 95 b0 01 00       	call   c00270bb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 82 c1 01 00       	call   c00281c0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 54 bd 01 00       	call   c0027d9b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 ab b6 01 00       	call   c002770c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 8a bf 01 00       	call   c0028007 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 22 b0 01 00       	call   c00270bb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 46 b6 01 00       	call   c002770c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 e8 c0 01 00       	call   c00281c0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 a9 be 01 00       	call   c0028007 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 67 be 01 00       	call   c0027fe9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 fe bb 01 00       	call   c0027d9b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 ff ae 01 00       	call   c00270bb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ce bb 01 00       	call   c0027d9b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 35 b8 01 00       	call   c0027a1c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 d4 bd 01 00       	call   c0027fe9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 d7 bd 01 00       	call   c0028007 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 aa bd 01 00       	call   c0028007 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 a3 b7 01 00       	call   c0027a1c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 2d bf 01 00       	call   c00281c0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 08 bf 01 00       	call   c00281c0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 da ba 01 00       	call   c0027d9b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 31 b4 01 00       	call   c002770c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 10 bd 01 00       	call   c0028007 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 a9 ad 01 00       	call   c00270bb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 cd b3 01 00       	call   c002770c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 6f be 01 00       	call   c00281c0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 a7 b6 01 00       	call   c0027a1c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 24 ad 01 00       	call   c00270bb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 4f b9 01 00       	call   c0027d9b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 4f ac 01 00       	call   c00270bb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 2f ac 01 00       	call   c00270bb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 ff b8 01 00       	call   c0027d9b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 4f bb 01 00       	call   c0028005 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 2d b2 01 00       	call   c002770c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 af bc 01 00       	call   c00281a0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 d6 ba 01 00       	call   c0027fe9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 d3 b1 01 00       	call   c002770c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 51 b8 01 00       	call   c0027d9b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 d4 b1 01 00       	call   c0027738 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 26 b8 01 00       	call   c0027d9b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 8d b4 01 00       	call   c0027a1c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 0c ab 01 00       	call   c00270bb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 d6 b7 01 00       	call   c0027d9b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 22 ba 01 00       	call   c0028007 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 17 b1 01 00       	call   c0027738 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 e9 b0 01 00       	call   c0027738 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 20 b7 01 00       	call   c0027d9b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 84 b3 01 00       	call   c0027a1c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 51 b3 01 00       	call   c0027a1c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 d0 a9 01 00       	call   c00270bb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 bd ba 01 00       	call   c00281c0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 8f b6 01 00       	call   c0027d9b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 e6 af 01 00       	call   c002770c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 c5 b8 01 00       	call   c0028007 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 5d a9 01 00       	call   c00270bb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 81 af 01 00       	call   c002770c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 23 ba 01 00       	call   c00281c0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 e4 b7 01 00       	call   c0028007 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 a2 b7 01 00       	call   c0027fe9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 39 b5 01 00       	call   c0027d9b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 3a a8 01 00       	call   c00270bb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 09 b5 01 00       	call   c0027d9b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 70 b1 01 00       	call   c0027a1c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 0f b7 01 00       	call   c0027fe9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 12 b7 01 00       	call   c0028007 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 e5 b6 01 00       	call   c0028007 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 de b0 01 00       	call   c0027a1c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 68 b8 01 00       	call   c00281c0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 43 b8 01 00       	call   c00281c0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 15 b4 01 00       	call   c0027d9b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 6c ad 01 00       	call   c002770c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 4b b6 01 00       	call   c0028007 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 e4 a6 01 00       	call   c00270bb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 08 ad 01 00       	call   c002770c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 aa b7 01 00       	call   c00281c0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 e2 af 01 00       	call   c0027a1c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 5f a6 01 00       	call   c00270bb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 8a b2 01 00       	call   c0027d9b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 8a a5 01 00       	call   c00270bb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 6a a5 01 00       	call   c00270bb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 3a b2 01 00       	call   c0027d9b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 8a b4 01 00       	call   c0028005 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 68 ab 01 00       	call   c002770c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ea b5 01 00       	call   c00281a0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 11 b4 01 00       	call   c0027fe9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 0e ab 01 00       	call   c002770c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 8c b1 01 00       	call   c0027d9b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 0f ab 01 00       	call   c0027738 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 61 b1 01 00       	call   c0027d9b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 c8 ad 01 00       	call   c0027a1c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 47 a4 01 00       	call   c00270bb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 11 b1 01 00       	call   c0027d9b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 5d b3 01 00       	call   c0028007 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 52 aa 01 00       	call   c0027738 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 24 aa 01 00       	call   c0027738 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 5b b0 01 00       	call   c0027d9b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 bf ac 01 00       	call   c0027a1c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 8c ac 01 00       	call   c0027a1c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 0b a3 01 00       	call   c00270bb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 f8 b3 01 00       	call   c00281c0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 ca af 01 00       	call   c0027d9b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 21 a9 01 00       	call   c002770c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 00 b2 01 00       	call   c0028007 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 98 a2 01 00       	call   c00270bb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 bc a8 01 00       	call   c002770c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 5e b3 01 00       	call   c00281c0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 1f b1 01 00       	call   c0028007 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 dd b0 01 00       	call   c0027fe9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 74 ae 01 00       	call   c0027d9b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 75 a1 01 00       	call   c00270bb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 44 ae 01 00       	call   c0027d9b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 ab aa 01 00       	call   c0027a1c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 4a b0 01 00       	call   c0027fe9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 4d b0 01 00       	call   c0028007 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 20 b0 01 00       	call   c0028007 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 19 aa 01 00       	call   c0027a1c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 a3 b1 01 00       	call   c00281c0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 7e b1 01 00       	call   c00281c0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 50 ad 01 00       	call   c0027d9b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 a7 a6 01 00       	call   c002770c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 86 af 01 00       	call   c0028007 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 1f a0 01 00       	call   c00270bb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 43 a6 01 00       	call   c002770c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 e5 b0 01 00       	call   c00281c0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 1d a9 01 00       	call   c0027a1c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 9a 9f 01 00       	call   c00270bb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 c5 ab 01 00       	call   c0027d9b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 c5 9e 01 00       	call   c00270bb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 a5 9e 01 00       	call   c00270bb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 75 ab 01 00       	call   c0027d9b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 c5 ad 01 00       	call   c0028005 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 a3 a4 01 00       	call   c002770c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 25 af 01 00       	call   c00281a0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 4c ad 01 00       	call   c0027fe9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 49 a4 01 00       	call   c002770c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 c7 aa 01 00       	call   c0027d9b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 4a a4 01 00       	call   c0027738 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 9c aa 01 00       	call   c0027d9b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 03 a7 01 00       	call   c0027a1c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 82 9d 01 00       	call   c00270bb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 4c aa 01 00       	call   c0027d9b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 98 ac 01 00       	call   c0028007 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 8d a3 01 00       	call   c0027738 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 5f a3 01 00       	call   c0027738 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 96 a9 01 00       	call   c0027d9b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 fa a5 01 00       	call   c0027a1c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 c7 a5 01 00       	call   c0027a1c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 46 9c 01 00       	call   c00270bb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 33 ad 01 00       	call   c00281c0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 05 a9 01 00       	call   c0027d9b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 5c a2 01 00       	call   c002770c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 3b ab 01 00       	call   c0028007 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 d3 9b 01 00       	call   c00270bb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 f7 a1 01 00       	call   c002770c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 99 ac 01 00       	call   c00281c0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 57 aa 01 00       	call   c0028007 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 15 aa 01 00       	call   c0027fe9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 ac a7 01 00       	call   c0027d9b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 ad 9a 01 00       	call   c00270bb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 7c a7 01 00       	call   c0027d9b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 e3 a3 01 00       	call   c0027a1c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 82 a9 01 00       	call   c0027fe9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 85 a9 01 00       	call   c0028007 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 58 a9 01 00       	call   c0028007 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 51 a3 01 00       	call   c0027a1c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 db aa 01 00       	call   c00281c0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 b2 aa 01 00       	call   c00281c0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 84 a6 01 00       	call   c0027d9b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 db 9f 01 00       	call   c002770c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ba a8 01 00       	call   c0028007 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 53 99 01 00       	call   c00270bb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 7b 9f 01 00       	call   c002770c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 1d aa 01 00       	call   c00281c0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 56 a2 01 00       	call   c0027a1c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 d3 98 01 00       	call   c00270bb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 ff a4 01 00       	call   c0027d9b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 ff 97 01 00       	call   c00270bb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 df 97 01 00       	call   c00270bb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 af a4 01 00       	call   c0027d9b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 e3 a6 01 00       	call   c0027fe9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 da 9d 01 00       	call   c002770c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 5c a8 01 00       	call   c00281a0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 83 a6 01 00       	call   c0027fe9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 7d 9d 01 00       	call   c002770c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 fb a3 01 00       	call   c0027d9b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 7e 9d 01 00       	call   c0027738 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 d0 a3 01 00       	call   c0027d9b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 37 a0 01 00       	call   c0027a1c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 b6 96 01 00       	call   c00270bb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 80 a3 01 00       	call   c0027d9b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 cc a5 01 00       	call   c0028007 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 c1 9c 01 00       	call   c0027738 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 93 9c 01 00       	call   c0027738 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 d7 a2 01 00       	call   c0027d9b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 3e 9f 01 00       	call   c0027a1c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 27 9c 01 00       	call   c0027738 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 e3 a4 01 00       	call   c002800b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 d6 9e 01 00       	call   c0027a1c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 55 95 01 00       	call   c00270bb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 42 a6 01 00       	call   c00281c0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 14 a2 01 00       	call   c0027d9b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 6b 9b 01 00       	call   c002770c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 4a a4 01 00       	call   c0028007 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 e2 94 01 00       	call   c00270bb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 0a 9b 01 00       	call   c002770c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 ac a5 01 00       	call   c00281c0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd659c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 5f a2 01 00       	call   c0028007 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 1d a2 01 00       	call   c0027fe9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 09 a2 01 00       	call   c0028007 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 7b 9f 01 00       	call   c0027d9b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 f9 98 01 00       	call   c0027738 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 4b 9f 01 00       	call   c0027d9b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 51 92 01 00       	call   c00270bb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 20 9f 01 00       	call   c0027d9b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 70 a1 01 00       	call   c0028005 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 51 98 01 00       	call   c002770c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 d3 a2 01 00       	call   c00281a0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 fa a0 01 00       	call   c0027fe9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 f9 97 01 00       	call   c002770c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 77 9e 01 00       	call   c0027d9b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 fa 97 01 00       	call   c0027738 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 4c 9e 01 00       	call   c0027d9b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 b3 9a 01 00       	call   c0027a1c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 32 91 01 00       	call   c00270bb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 5a 9a 01 00       	call   c0027a1c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 e0 90 01 00       	call   c00270bb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ce a1 01 00       	call   c00281c0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 a0 9d 01 00       	call   c0027d9b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 f7 96 01 00       	call   c002770c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 d6 9f 01 00       	call   c0028007 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 6f 90 01 00       	call   c00270bb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 9b 96 01 00       	call   c002770c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 3d a1 01 00       	call   c00281c0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ea 9c 01 00       	call   c0027d9b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 67 96 01 00       	call   c0027738 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 b8 9c 01 00       	call   c0027d9b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 be 8f 01 00       	call   c00270bb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 8e 9c 01 00       	call   c0027d9b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 e2 9e 01 00       	call   c0028009 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 bb 95 01 00       	call   c002770c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 3d a0 01 00       	call   c00281a0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 64 9e 01 00       	call   c0027fe9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 62 95 01 00       	call   c002770c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 e0 9b 01 00       	call   c0027d9b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 63 95 01 00       	call   c0027738 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 b5 9b 01 00       	call   c0027d9b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 1c 98 01 00       	call   c0027a1c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 9b 8e 01 00       	call   c00270bb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 b7 97 01 00       	call   c0027a1c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 36 8e 01 00       	call   c00270bb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 24 9f 01 00       	call   c00281c0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 f6 9a 01 00       	call   c0027d9b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 4d 94 01 00       	call   c002770c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 2c 9d 01 00       	call   c0028007 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 c5 8d 01 00       	call   c00270bb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 f1 93 01 00       	call   c002770c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 62 9a 01 00       	call   c0027d9b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 68 8d 01 00       	call   c00270bb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9b 02 c0       	mov    eax,0xc0029b7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9b 02 c0       	mov    eax,0xc0029b8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4e3:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c000e50d:	e8 d7 f2 00 00       	call   c001d7e9 <schedule()>
c000e512:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9b 02 c0       	push   0xc0029bc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 a8 d5 02 c0       	mov    eax,0xc002d5a8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9b 02 c0       	push   0xc0029bcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 34 65 02 c0       	mov    eax,0xc0026534
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9b 02 c0       	push   0xc0029bd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 68 62 02 c0       	mov    eax,0xc0026268
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9b 02 c0       	push   0xc0029be2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 34 66 02 c0       	mov    eax,0xc0026634
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9b 02 c0       	push   0xc0029bec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 b4 63 02 c0       	mov    eax,0xc00263b4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9b 02 c0       	push   0xc0029bf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ac d5 02 c0       	mov    eax,0xc002d5ac
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 9c 02 c0       	push   0xc0029c02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ad d5 02 c0       	mov    eax,0xc002d5ad
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 7b 54 00 00       	call   c0013ae8 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f 9c 02 c0       	push   0xc0029c0f
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c000e6be:	68 28 9c 02 c0       	push   0xc0029c28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 01 ed 00 00       	call   c001d3cc <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 e4 ee 00 00       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 a8 df 01 c0       	push   0xc001dfa8
c000e6e9:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c000e6ef:	e8 d0 ee 00 00       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000e6fc:	68 0c 9d 02 c0       	push   0xc0029d0c
c000e701:	c6 05 ad d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5ad,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 41 fc 00 00       	call   c001e353 <Vm::initialise8086()>
c000e712:	e8 99 41 00 00       	call   c00128b0 <Fs::initVFS()>
c000e717:	c7 04 24 35 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c35
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c 9d 02 c0       	push   0xc0029d0c
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 0d d5 00 00       	call   c001bc59 <Sys::loadSyscalls()>
c000e74c:	e8 05 b4 00 00       	call   c0019b56 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f 9c 02 c0       	push   0xc0029c4f
c000e75b:	68 58 9c 02 c0       	push   0xc0029c58
c000e760:	e8 b6 c2 00 00       	call   c001aa1b <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 33 4c 00 00       	call   c00133a0 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d30
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 1e 53 00 00       	call   c0013aa8 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c60
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 23 af 00 00       	call   c00196be <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c7a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b 9c 02 c0       	push   0xc0029c8b
c000e7b6:	e8 6e e6 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 90 e8 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 ee f1 00 00       	call   c001d9bf <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 9c 02 c0       	push   0xc0029ca7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 77 53 00 00       	call   c0013b62 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 c1 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5c1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 77 78 01 00       	call   c00261f6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 96 9c 00 00       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 6f 9c 00 00       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 4d 9c 00 00       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 2b 9c 00 00       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 c0 d5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d5c0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 39 9b 00 00       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 14 9b 00 00       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 e1 76 01 00       	call   c00261b0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 9e 76 01 00       	call   c0026190 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 30 9b 00 00       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 9c 02 c0       	push   0xc0029cb0
c000eb62:	e8 f8 b0 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 9c 02 c0       	push   0xc0029cb6
c000eb9a:	e8 c0 b0 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 9d 02 c0       	push   0xc0029d50
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 c0 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5c0,0x4
c000ec03:	0f 94 05 e0 c4 02 c0 	sete   BYTE PTR ds:0xc002c4e0
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 ab 8c 00 00       	call   c00178c4 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 36 4d 00 00       	call   c001395e <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c60
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 ac 9a 00 00       	call   c0018708 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 f3 4c 00 00       	call   c001395e <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 6f 52 00 00       	call   c0013ef6 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 c3 4c 00 00       	call   c001395e <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc 9c 02 c0       	push   0xc0029cbc
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 1d ea 00 00       	call   c001d6e6 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 9c 02 c0       	push   0xc0029cd7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 0e 38 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 9c 02 c0       	push   0xc0029ce8
c000ed34:	e8 26 af 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 9c 02 c0       	push   0xc0029cf5
c000ed49:	e8 11 af 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029cff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 fa ae 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 b2 d5 02 c0       	mov    ds:0xc002d5b2,eax
c000ee21:	66 89 15 b0 d5 02 c0 	mov    WORD PTR ds:0xc002d5b0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000ef38:	48                   	dec    eax
c000ef39:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 b1 92 01 00       	call   c0028240 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 a8 92 01 00       	call   c0028240 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 b8 d5 02 c0 ff 07 	mov    WORD PTR ds:0xc002d5b8,0x7ff
c000f085:	a3 ba d5 02 c0       	mov    ds:0xc002d5ba,eax
c000f08a:	0f 01 1d b8 d5 02 c0 	lidtd  ds:0xc002d5b8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f37c:	e8 df 26 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 49 17 00 00       	call   c0010ae8 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 7a 17 00 00       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 74 c3 02 c0    	mov    ecx,DWORD PTR ds:0xc002c374
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 74 c3 02 c0       	mov    eax,ds:0xc002c374
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 9d 02 c0       	push   0xc0029da0
c000f455:	e8 cb 30 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 74 c3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c374,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c000f481:	8b 2d 74 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c374
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 c5 24 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 74 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c374
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 9d 02 c0       	push   0xc0029dd0
c000f50d:	e8 4d a7 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 9d 02 c0       	push   0xc0029dd5
c000f523:	e8 37 a7 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000f543:	48                   	dec    eax
c000f544:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f564:	e8 f7 24 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f57a:	e8 8b 21 00 00       	call   c001170a <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 dc 9d 02 c0       	push   0xc0029ddc
c000f6a7:	e8 79 2e 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 39 09 00 00       	call   c000ffea <installVgaTextImplementation()>
c000f6b1:	0f b6 05 80 c3 02 c0 	movzx  eax,BYTE PTR ds:0xc002c380
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 80 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c80]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 b6 c3 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3c4a],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 b5 c3 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3c4b]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 80 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c80]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 f4 9d 02 c0       	push   0xc0029df4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 c0 d5 02 c0       	mov    ds:0xc002d5c0,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 24 03 00 00       	call   c000fa7d <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 02 1c 00 00       	call   c0011360 <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 c9 1d 00 00       	call   c0011532 <VAS::VAS()>
c000f769:	89 1d 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 a8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a8,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 3d 20 00 00       	call   c00117e2 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba 00 d6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2a00],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be 00 d6 02 c0       	mov    esi,0xc002d600
c000f816:	8d 90 00 d6 02 c0    	lea    edx,[eax-0x3ffd2a00]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 00 d6 02 c0    	lea    eax,[edx-0x3ffd2a00]
c000f87c:	8d 94 11 00 d6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2a00]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 c4 c4 02 c0    	mov    esi,DWORD PTR ds:0xc002c4c4
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 c4 c4 02 c0    	add    eax,DWORD PTR ds:0xc002c4c4
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 c4 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c4c4
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d f0 d5 02 c0    	dec    DWORD PTR ds:0xc002d5f0
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 13 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e13
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 31 a3 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 e4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5e4
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 6b                	je     c000f9cd <Phys::allocatePage()+0x8d>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 e4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5e4,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f983:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f986:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f98c:	e8 c9 28 00 00       	call   c001225a <VAS::scanForEviction()>
c000f991:	83 c4 10             	add    esp,0x10
c000f994:	85 c0                	test   eax,eax
c000f996:	75 4d                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f998:	83 ec 0c             	sub    esp,0xc
c000f99b:	68 00 10 00 00       	push   0x1000
c000f9a0:	e8 07 fe ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	85 c0                	test   eax,eax
c000f9aa:	75 39                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 29 9e 02 c0       	push   0xc0029e29
c000f9b4:	e8 a6 a2 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 1d e4 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e4
c000f9c2:	53                   	push   ebx
c000f9c3:	e8 01 ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9c8:	5a                   	pop    edx
c000f9c9:	84 c0                	test   al,al
c000f9cb:	75 95                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9cd:	6a 01                	push   0x1
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 c2 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9d5:	a1 e4 d5 02 c0       	mov    eax,ds:0xc002d5e4
c000f9da:	59                   	pop    ecx
c000f9db:	ff 05 f0 d5 02 c0    	inc    DWORD PTR ds:0xc002d5f0
c000f9e1:	c1 e0 0c             	shl    eax,0xc
c000f9e4:	5b                   	pop    ebx
c000f9e5:	5a                   	pop    edx
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	c3                   	ret    

c000f9e9 <Phys::allocateContiguousPages(int)>:
c000f9e9:	57                   	push   edi
c000f9ea:	56                   	push   esi
c000f9eb:	53                   	push   ebx
c000f9ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9f0:	fa                   	cli    
c000f9f1:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000f9f7:	31 db                	xor    ebx,ebx
c000f9f9:	85 db                	test   ebx,ebx
c000f9fb:	75 11                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000f9fd:	e8 3e ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa02:	83 fe 01             	cmp    esi,0x1
c000fa05:	89 c7                	mov    edi,eax
c000fa07:	74 21                	je     c000fa2a <Phys::allocateContiguousPages(int)+0x41>
c000fa09:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0e:	e8 2d ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	c1 e2 0c             	shl    edx,0xc
c000fa18:	01 fa                	add    edx,edi
c000fa1a:	39 c2                	cmp    edx,eax
c000fa1c:	74 20                	je     c000fa3e <Phys::allocateContiguousPages(int)+0x55>
c000fa1e:	bb 01 00 00 00       	mov    ebx,0x1
c000fa23:	89 c7                	mov    edi,eax
c000fa25:	83 fe 01             	cmp    esi,0x1
c000fa28:	75 e4                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000fa2a:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000fa2f:	48                   	dec    eax
c000fa30:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000fa35:	75 01                	jne    c000fa38 <Phys::allocateContiguousPages(int)+0x4f>
c000fa37:	fb                   	sti    
c000fa38:	89 f8                	mov    eax,edi
c000fa3a:	5b                   	pop    ebx
c000fa3b:	5e                   	pop    esi
c000fa3c:	5f                   	pop    edi
c000fa3d:	c3                   	ret    
c000fa3e:	43                   	inc    ebx
c000fa3f:	39 f3                	cmp    ebx,esi
c000fa41:	75 b6                	jne    c000f9f9 <Phys::allocateContiguousPages(int)+0x10>
c000fa43:	eb e5                	jmp    c000fa2a <Phys::allocateContiguousPages(int)+0x41>

c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa45:	56                   	push   esi
c000fa46:	53                   	push   ebx
c000fa47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa4b:	39 1d e8 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5e8,ebx
c000fa51:	73 06                	jae    c000fa59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa53:	89 1d e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,ebx
c000fa59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5d:	c1 eb 0c             	shr    ebx,0xc
c000fa60:	c1 e8 0c             	shr    eax,0xc
c000fa63:	39 d8                	cmp    eax,ebx
c000fa65:	73 13                	jae    c000fa7a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa67:	6a 00                	push   0x0
c000fa69:	8d 70 01             	lea    esi,[eax+0x1]
c000fa6c:	50                   	push   eax
c000fa6d:	e8 25 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fa72:	5a                   	pop    edx
c000fa73:	89 f0                	mov    eax,esi
c000fa75:	59                   	pop    ecx
c000fa76:	39 f3                	cmp    ebx,esi
c000fa78:	75 ed                	jne    c000fa67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa7a:	5b                   	pop    ebx
c000fa7b:	5e                   	pop    esi
c000fa7c:	c3                   	ret    

c000fa7d <Phys::physicalMemorySetup(unsigned int)>:
c000fa7d:	55                   	push   ebp
c000fa7e:	57                   	push   edi
c000fa7f:	56                   	push   esi
c000fa80:	53                   	push   ebx
c000fa81:	31 db                	xor    ebx,ebx
c000fa83:	83 ec 40             	sub    esp,0x40
c000fa86:	6a 30                	push   0x30
c000fa88:	6a 00                	push   0x0
c000fa8a:	68 00 d6 02 c0       	push   0xc002d600
c000fa8f:	e8 bc 0c ff ff       	call   c0000750 <memset>
c000fa94:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa9d:	05 00 10 00 00       	add    eax,0x1000
c000faa2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000faa6:	5a                   	pop    edx
c000faa7:	59                   	pop    ecx
c000faa8:	50                   	push   eax
c000faa9:	68 37 9e 02 c0       	push   0xc0029e37
c000faae:	e8 72 2a 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	83 ec 08             	sub    esp,0x8
c000fab9:	6a 01                	push   0x1
c000fabb:	53                   	push   ebx
c000fabc:	43                   	inc    ebx
c000fabd:	e8 d5 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000facb:	75 e9                	jne    c000fab6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000facd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fad4:	66 85 c0             	test   ax,ax
c000fad7:	0f 84 b5 01 00 00    	je     c000fc92 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fadd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fae1:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fae7:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000faec:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000faf2:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000faf8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fafc:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb00:	01 c1                	add    ecx,eax
c000fb02:	11 d3                	adc    ebx,edx
c000fb04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb0c:	31 ff                	xor    edi,edi
c000fb0e:	89 d3                	mov    ebx,edx
c000fb10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb14:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb1a:	09 cb                	or     ebx,ecx
c000fb1c:	0f 85 80 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb2e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb37:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb3f:	eb 49                	jmp    c000fb8a <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb41:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb45:	83 c3 18             	add    ebx,0x18
c000fb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb50:	39 d0                	cmp    eax,edx
c000fb52:	0f 84 4a 01 00 00    	je     c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb58:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb5e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb61:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb63:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb67:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb6b:	01 c6                	add    esi,eax
c000fb6d:	89 d5                	mov    ebp,edx
c000fb6f:	11 d7                	adc    edi,edx
c000fb71:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb75:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb79:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb7c:	31 ff                	xor    edi,edi
c000fb7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb82:	09 cd                	or     ebp,ecx
c000fb84:	0f 85 18 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb8a:	89 f1                	mov    ecx,esi
c000fb8c:	83 f1 01             	xor    ecx,0x1
c000fb8f:	09 f9                	or     ecx,edi
c000fb91:	75 ae                	jne    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fb93:	be 00 00 08 00       	mov    esi,0x80000
c000fb98:	89 cf                	mov    edi,ecx
c000fb9a:	39 c6                	cmp    esi,eax
c000fb9c:	19 d7                	sbb    edi,edx
c000fb9e:	0f 82 98 00 00 00    	jb     c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fba4:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fba8:	89 cd                	mov    ebp,ecx
c000fbaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbb2:	19 fd                	sbb    ebp,edi
c000fbb4:	0f 83 82 00 00 00    	jae    c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbba:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbbf:	39 f0                	cmp    eax,esi
c000fbc1:	19 f9                	sbb    ecx,edi
c000fbc3:	0f 82 03 01 00 00    	jb     c000fccc <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbc9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd6:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbdc:	83 d7 ff             	adc    edi,0xffffffff
c000fbdf:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe3:	31 c0                	xor    eax,eax
c000fbe5:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe9:	39 f2                	cmp    edx,esi
c000fbeb:	89 c2                	mov    edx,eax
c000fbed:	19 fa                	sbb    edx,edi
c000fbef:	0f 83 4c ff ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf5:	b8 00 00 08 00       	mov    eax,0x80000
c000fbfa:	83 ec 08             	sub    esp,0x8
c000fbfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc01:	50                   	push   eax
c000fc02:	e8 3e fe ff ff       	call   c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc0f:	83 c4 0c             	add    esp,0xc
c000fc12:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc16:	03 05 f4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5f4
c000fc1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc23:	a3 f4 d5 02 c0       	mov    ds:0xc002d5f4,eax
c000fc28:	52                   	push   edx
c000fc29:	50                   	push   eax
c000fc2a:	68 5d 9e 02 c0       	push   0xc0029e5d
c000fc2f:	e8 f1 28 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	e9 05 ff ff ff       	jmp    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc3c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc44:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc48:	39 ee                	cmp    esi,ebp
c000fc4a:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc4e:	0f 82 ed fe ff ff    	jb     c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc54:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc59:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc5d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc61:	0f 83 da fe ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc67:	39 e8                	cmp    eax,ebp
c000fc69:	89 d1                	mov    ecx,edx
c000fc6b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc6f:	73 89                	jae    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc79:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc7d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8d:	e9 68 ff ff ff       	jmp    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	68 4f 9e 02 c0       	push   0xc0029e4f
c000fc9a:	e8 c0 9f 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000fc9f:	83 c4 10             	add    esp,0x10
c000fca2:	bb 40 01 00 00       	mov    ebx,0x140
c000fca7:	83 ec 08             	sub    esp,0x8
c000fcaa:	6a 00                	push   0x0
c000fcac:	53                   	push   ebx
c000fcad:	43                   	inc    ebx
c000fcae:	e8 e4 fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fcb3:	ff 05 f4 d5 02 c0    	inc    DWORD PTR ds:0xc002d5f4
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcc2:	75 e3                	jne    c000fca7 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcc4:	83 c4 3c             	add    esp,0x3c
c000fcc7:	5b                   	pop    ebx
c000fcc8:	5e                   	pop    esi
c000fcc9:	5f                   	pop    edi
c000fcca:	5d                   	pop    ebp
c000fccb:	c3                   	ret    
c000fccc:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcd4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcdc:	e9 e8 fe ff ff       	jmp    c000fbc9 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fce1:	90                   	nop

c000fce2 <Pipe::isAtty()>:
c000fce2:	31 c0                	xor    eax,eax
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <Pipe::~Pipe()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c000fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf2:	89 10                	mov    DWORD PTR [eax],edx
c000fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf8:	83 ec 0c             	sub    esp,0xc
c000fcfb:	50                   	push   eax
c000fcfc:	e8 3f 12 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	90                   	nop
c000fd05:	83 c4 0c             	add    esp,0xc
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Pipe::~Pipe()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd14:	e8 cd ff ff ff       	call   c000fce6 <Pipe::~Pipe()>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	83 ec 08             	sub    esp,0x8
c000fd1f:	6a 20                	push   0x20
c000fd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd25:	e8 23 27 00 00       	call   c001244d <operator delete(void*, unsigned long)>
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop

c000fd32 <Pipe::read(unsigned long long, void*, int*)>:
c000fd32:	55                   	push   ebp
c000fd33:	57                   	push   edi
c000fd34:	56                   	push   esi
c000fd35:	53                   	push   ebx
c000fd36:	83 ec 1c             	sub    esp,0x1c
c000fd39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd41:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd45:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd48:	89 c8                	mov    eax,ecx
c000fd4a:	99                   	cdq    
c000fd4b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd4f:	74 24                	je     c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd51:	39 f9                	cmp    ecx,edi
c000fd53:	89 d1                	mov    ecx,edx
c000fd55:	19 f1                	sbb    ecx,esi
c000fd57:	73 1c                	jae    c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd59:	fa                   	cli    
c000fd5a:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000fd60:	e8 84 da 00 00       	call   c001d7e9 <schedule()>
c000fd65:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000fd6a:	48                   	dec    eax
c000fd6b:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000fd70:	75 d3                	jne    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd72:	fb                   	sti    
c000fd73:	eb d0                	jmp    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd75:	39 f8                	cmp    eax,edi
c000fd77:	89 d1                	mov    ecx,edx
c000fd79:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd7c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd80:	19 f1                	sbb    ecx,esi
c000fd82:	73 07                	jae    c000fd8b <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd84:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd8b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd8e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd91:	29 f7                	sub    edi,esi
c000fd93:	89 f8                	mov    eax,edi
c000fd95:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd99:	99                   	cdq    
c000fd9a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda1:	19 d0                	sbb    eax,edx
c000fda3:	73 07                	jae    c000fdac <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fda5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fda8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdac:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdba:	74 0d                	je     c000fdc9 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdbc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdbf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc9:	85 d2                	test   edx,edx
c000fdcb:	74 11                	je     c000fdde <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdd4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdd8:	89 d1                	mov    ecx,edx
c000fdda:	89 c7                	mov    edi,eax
c000fddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fde1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fde4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fde7:	99                   	cdq    
c000fde8:	89 f7                	mov    edi,esi
c000fdea:	03 04 24             	add    eax,DWORD PTR [esp]
c000fded:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fdf1:	c1 ff 1f             	sar    edi,0x1f
c000fdf4:	57                   	push   edi
c000fdf5:	56                   	push   esi
c000fdf6:	52                   	push   edx
c000fdf7:	50                   	push   eax
c000fdf8:	e8 37 68 01 00       	call   c0026634 <__umoddi3>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe08:	75 10                	jne    c000fe1a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	68 79 9e 02 c0       	push   0xc0029e79
c000fe12:	e8 48 9e 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe1e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe21:	89 10                	mov    DWORD PTR [eax],edx
c000fe23:	83 c4 1c             	add    esp,0x1c
c000fe26:	31 c0                	xor    eax,eax
c000fe28:	5b                   	pop    ebx
c000fe29:	5e                   	pop    esi
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop

c000fe2e <Pipe::write(unsigned long long, void*, int*)>:
c000fe2e:	55                   	push   ebp
c000fe2f:	57                   	push   edi
c000fe30:	56                   	push   esi
c000fe31:	53                   	push   ebx
c000fe32:	83 ec 1c             	sub    esp,0x1c
c000fe35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe3d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe4b:	89 d8                	mov    eax,ebx
c000fe4d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe54:	89 d6                	mov    esi,edx
c000fe56:	89 d7                	mov    edi,edx
c000fe58:	c1 ff 1f             	sar    edi,0x1f
c000fe5b:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe5e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe62:	c1 f8 1f             	sar    eax,0x1f
c000fe65:	39 f3                	cmp    ebx,esi
c000fe67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6f:	19 f8                	sbb    eax,edi
c000fe71:	b8 01 00 00 00       	mov    eax,0x1
c000fe76:	72 6e                	jb     c000fee6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe7b:	01 d0                	add    eax,edx
c000fe7d:	99                   	cdq    
c000fe7e:	f7 fb                	idiv   ebx
c000fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe84:	29 d3                	sub    ebx,edx
c000fe86:	89 d7                	mov    edi,edx
c000fe88:	89 de                	mov    esi,ebx
c000fe8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe8d:	c1 fb 1f             	sar    ebx,0x1f
c000fe90:	39 f2                	cmp    edx,esi
c000fe92:	19 d8                	sbb    eax,ebx
c000fe94:	b8 00 00 00 00       	mov    eax,0x0
c000fe99:	72 04                	jb     c000fe9f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe9b:	89 d0                	mov    eax,edx
c000fe9d:	29 f0                	sub    eax,esi
c000fe9f:	89 d3                	mov    ebx,edx
c000fea1:	29 c3                	sub    ebx,eax
c000fea3:	74 0b                	je     c000feb0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fea5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fea8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000feac:	89 d9                	mov    ecx,ebx
c000feae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb0:	85 c0                	test   eax,eax
c000feb2:	74 0d                	je     c000fec1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000feb4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feb8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000febb:	89 de                	mov    esi,ebx
c000febd:	89 c1                	mov    ecx,eax
c000febf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fec1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fec4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec9:	75 10                	jne    c000fedb <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	68 95 9e 02 c0       	push   0xc0029e95
c000fed3:	e8 87 9d 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c000fed8:	83 c4 10             	add    esp,0x10
c000fedb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fedf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fee2:	89 08                	mov    DWORD PTR [eax],ecx
c000fee4:	31 c0                	xor    eax,eax
c000fee6:	83 c4 1c             	add    esp,0x1c
c000fee9:	5b                   	pop    ebx
c000feea:	5e                   	pop    esi
c000feeb:	5f                   	pop    edi
c000feec:	5d                   	pop    ebp
c000feed:	c3                   	ret    

c000feee <Pipe::Pipe(int)>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef5:	83 ec 08             	sub    esp,0x8
c000fef8:	6a 00                	push   0x0
c000fefa:	50                   	push   eax
c000fefb:	e8 5e 0e 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c000ff00:	83 c4 10             	add    esp,0x10
c000ff03:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c000ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0c:	89 10                	mov    DWORD PTR [eax],edx
c000ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff28:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	50                   	push   eax
c000ff37:	e8 60 f6 ff ff       	call   c000f59c <malloc>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	89 c2                	mov    edx,eax
c000ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff50:	90                   	nop
c000ff51:	83 c4 0c             	add    esp,0xc
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <VgaText::isAtty()>:
c000ff56:	b0 01                	mov    al,0x1
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <VgaText::~VgaText()>:
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	ba 44 9f 02 c0       	mov    edx,0xc0029f44
c000ff62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff66:	89 10                	mov    DWORD PTR [eax],edx
c000ff68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	50                   	push   eax
c000ff70:	e8 cb 0f 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	90                   	nop
c000ff79:	83 c4 0c             	add    esp,0xc
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::~VgaText()>:
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff88:	e8 cd ff ff ff       	call   c000ff5a <VgaText::~VgaText()>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	83 ec 08             	sub    esp,0x8
c000ff93:	68 c4 02 00 00       	push   0x2c4
c000ff98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9c:	e8 ac 24 00 00       	call   c001244d <operator delete(void*, unsigned long)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	83 c4 0c             	add    esp,0xc
c000ffa7:	c3                   	ret    

c000ffa8 <VgaText::read(unsigned long long, void*, int*)>:
c000ffa8:	83 ec 10             	sub    esp,0x10
c000ffab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb7:	e8 fe 59 00 00       	call   c00159ba <readKeyboard(VgaText*, char*, unsigned long)>
c000ffbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffc0:	89 02                	mov    DWORD PTR [edx],eax
c000ffc2:	31 c0                	xor    eax,eax
c000ffc4:	83 c4 1c             	add    esp,0x1c
c000ffc7:	c3                   	ret    

c000ffc8 <setTerminalScrollLock(bool)>:
c000ffc8:	c3                   	ret    

c000ffc9 <addToTerminalCycle(VgaText*)>:
c000ffc9:	8b 15 60 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d660
c000ffcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd3:	85 d2                	test   edx,edx
c000ffd5:	75 09                	jne    c000ffe0 <addToTerminalCycle(VgaText*)+0x17>
c000ffd7:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffda:	a3 60 d6 02 c0       	mov    ds:0xc002d660,eax
c000ffdf:	c3                   	ret    
c000ffe0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffe3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffe6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffe9:	c3                   	ret    

c000ffea <installVgaTextImplementation()>:
c000ffea:	83 ec 10             	sub    esp,0x10
c000ffed:	6a 20                	push   0x20
c000ffef:	6a 00                	push   0x0
c000fff1:	68 40 d6 02 c0       	push   0xc002d640
c000fff6:	e8 55 07 ff ff       	call   c0000750 <memset>
c000fffb:	83 c4 1c             	add    esp,0x1c
c000fffe:	c3                   	ret    

c000ffff <scrollTerminalScrollLock(int)>:
c000ffff:	c3                   	ret    

c0010000 <VgaText::updateTitle()>:
c0010000:	53                   	push   ebx
c0010001:	31 c0                	xor    eax,eax
c0010003:	83 ec 58             	sub    esp,0x58
c0010006:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001000a:	89 e1                	mov    ecx,esp
c001000c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010010:	40                   	inc    eax
c0010011:	83 f8 50             	cmp    eax,0x50
c0010014:	75 f6                	jne    c001000c <VgaText::updateTitle()+0xc>
c0010016:	31 c0                	xor    eax,eax
c0010018:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001001f:	84 db                	test   bl,bl
c0010021:	74 06                	je     c0010029 <VgaText::updateTitle()+0x29>
c0010023:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010026:	40                   	inc    eax
c0010027:	eb ef                	jmp    c0010018 <VgaText::updateTitle()+0x18>
c0010029:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001002c:	85 c0                	test   eax,eax
c001002e:	74 09                	je     c0010039 <VgaText::updateTitle()+0x39>
c0010030:	53                   	push   ebx
c0010031:	53                   	push   ebx
c0010032:	51                   	push   ecx
c0010033:	52                   	push   edx
c0010034:	ff d0                	call   eax
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	83 c4 58             	add    esp,0x58
c001003c:	5b                   	pop    ebx
c001003d:	c3                   	ret    

c001003e <VgaText::load()>:
c001003e:	53                   	push   ebx
c001003f:	31 c0                	xor    eax,eax
c0010041:	83 ec 58             	sub    esp,0x58
c0010044:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010048:	89 e2                	mov    edx,esp
c001004a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001004e:	40                   	inc    eax
c001004f:	83 f8 50             	cmp    eax,0x50
c0010052:	75 f6                	jne    c001004a <VgaText::load()+0xc>
c0010054:	31 c0                	xor    eax,eax
c0010056:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001005d:	84 c9                	test   cl,cl
c001005f:	74 06                	je     c0010067 <VgaText::load()+0x29>
c0010061:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010064:	40                   	inc    eax
c0010065:	eb ef                	jmp    c0010056 <VgaText::load()+0x18>
c0010067:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001006a:	85 c0                	test   eax,eax
c001006c:	74 09                	je     c0010077 <VgaText::load()+0x39>
c001006e:	51                   	push   ecx
c001006f:	51                   	push   ecx
c0010070:	52                   	push   edx
c0010071:	53                   	push   ebx
c0010072:	ff d0                	call   eax
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001007a:	85 c0                	test   eax,eax
c001007c:	74 09                	je     c0010087 <VgaText::load()+0x49>
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	53                   	push   ebx
c0010082:	ff d0                	call   eax
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	83 c4 58             	add    esp,0x58
c001008a:	5b                   	pop    ebx
c001008b:	c3                   	ret    

c001008c <VgaText::updateCursor()>:
c001008c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010090:	39 05 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,eax
c0010096:	75 09                	jne    c00100a1 <VgaText::updateCursor()+0x15>
c0010098:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001009b:	85 c0                	test   eax,eax
c001009d:	74 02                	je     c00100a1 <VgaText::updateCursor()+0x15>
c001009f:	ff e0                	jmp    eax
c00100a1:	c3                   	ret    

c00100a2 <VgaText::doANSI_SGR(int)>:
c00100a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100aa:	85 d2                	test   edx,edx
c00100ac:	75 0b                	jne    c00100b9 <VgaText::doANSI_SGR(int)+0x17>
c00100ae:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100b4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100b7:	eb 59                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100b9:	83 fa 07             	cmp    edx,0x7
c00100bc:	75 0b                	jne    c00100c9 <VgaText::doANSI_SGR(int)+0x27>
c00100be:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100c1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100c4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100c7:	eb 49                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100c9:	83 fa 1b             	cmp    edx,0x1b
c00100cc:	74 e0                	je     c00100ae <VgaText::doANSI_SGR(int)+0xc>
c00100ce:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100d1:	83 f9 07             	cmp    ecx,0x7
c00100d4:	77 09                	ja     c00100df <VgaText::doANSI_SGR(int)+0x3d>
c00100d6:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c00100dd:	eb 20                	jmp    c00100ff <VgaText::doANSI_SGR(int)+0x5d>
c00100df:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100e2:	83 f9 07             	cmp    ecx,0x7
c00100e5:	77 09                	ja     c00100f0 <VgaText::doANSI_SGR(int)+0x4e>
c00100e7:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c00100ee:	eb 22                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100f0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100f3:	83 f9 07             	cmp    ecx,0x7
c00100f6:	77 0b                	ja     c0010103 <VgaText::doANSI_SGR(int)+0x61>
c00100f8:	8b 14 95 b8 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c48]
c00100ff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010102:	c3                   	ret    
c0010103:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010106:	83 f9 07             	cmp    ecx,0x7
c0010109:	77 0a                	ja     c0010115 <VgaText::doANSI_SGR(int)+0x73>
c001010b:	8b 14 95 90 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c70]
c0010112:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010115:	c3                   	ret    

c0010116 <VgaText::setDefaultBgColour(VgaColour)>:
c0010116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010121:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <VgaText::setDefaultFgColour(VgaColour)>:
c0010126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001012e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010131:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010134:	c3                   	ret    
c0010135:	90                   	nop

c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010136:	53                   	push   ebx
c0010137:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001013b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001013f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010143:	51                   	push   ecx
c0010144:	e8 cd ff ff ff       	call   c0010116 <VgaText::setDefaultBgColour(VgaColour)>
c0010149:	58                   	pop    eax
c001014a:	5a                   	pop    edx
c001014b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001014f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010153:	5b                   	pop    ebx
c0010154:	eb d0                	jmp    c0010126 <VgaText::setDefaultFgColour(VgaColour)>

c0010156 <VgaText::setTitleTextColour(VgaColour)>:
c0010156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001015a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010161:	e9 9a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010166 <VgaText::setTitleColour(VgaColour)>:
c0010166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010171:	e9 8a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010176 <VgaText::setTitle(char*)>:
c0010176:	53                   	push   ebx
c0010177:	83 ec 10             	sub    esp,0x10
c001017a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010182:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010188:	50                   	push   eax
c0010189:	e8 7e 06 ff ff       	call   c000080c <strcpy>
c001018e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010192:	83 c4 18             	add    esp,0x18
c0010195:	5b                   	pop    ebx
c0010196:	e9 65 fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>
c001019b:	90                   	nop

c001019c <VgaText::combineColours(unsigned char, unsigned char)>:
c001019c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101a5:	83 e0 0f             	and    eax,0xf
c00101a8:	c1 e2 04             	shl    edx,0x4
c00101ab:	09 d0                	or     eax,edx
c00101ad:	c3                   	ret    

c00101ae <VgaText::scrollScreen()>:
c00101ae:	55                   	push   ebp
c00101af:	b9 01 00 00 00       	mov    ecx,0x1
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101be:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101c4:	31 ff                	xor    edi,edi
c00101c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101c9:	83 f9 17             	cmp    ecx,0x17
c00101cc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101cf:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101d6:	75 27                	jne    c00101ff <VgaText::scrollScreen()+0x51>
c00101d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101db:	01 f5                	add    ebp,esi
c00101dd:	f7 c7 01 00 00 00    	test   edi,0x1
c00101e3:	74 16                	je     c00101fb <VgaText::scrollScreen()+0x4d>
c00101e5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101e9:	50                   	push   eax
c00101ea:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101ee:	50                   	push   eax
c00101ef:	e8 a8 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c00101f4:	5a                   	pop    edx
c00101f5:	5a                   	pop    edx
c00101f6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101f9:	eb 04                	jmp    c00101ff <VgaText::scrollScreen()+0x51>
c00101fb:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101ff:	47                   	inc    edi
c0010200:	46                   	inc    esi
c0010201:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010207:	75 bd                	jne    c00101c6 <VgaText::scrollScreen()+0x18>
c0010209:	41                   	inc    ecx
c001020a:	83 f9 18             	cmp    ecx,0x18
c001020d:	75 af                	jne    c00101be <VgaText::scrollScreen()+0x10>
c001020f:	39 1d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ebx
c0010215:	75 1b                	jne    c0010232 <VgaText::scrollScreen()+0x84>
c0010217:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001021b:	74 05                	je     c0010222 <VgaText::scrollScreen()+0x74>
c001021d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010220:	eb 10                	jmp    c0010232 <VgaText::scrollScreen()+0x84>
c0010222:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010225:	85 c0                	test   eax,eax
c0010227:	74 09                	je     c0010232 <VgaText::scrollScreen()+0x84>
c0010229:	83 ec 0c             	sub    esp,0xc
c001022c:	53                   	push   ebx
c001022d:	ff d0                	call   eax
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010236:	83 c4 0c             	add    esp,0xc
c0010239:	5b                   	pop    ebx
c001023a:	5e                   	pop    esi
c001023b:	5f                   	pop    edi
c001023c:	5d                   	pop    ebp
c001023d:	e9 4a fe ff ff       	jmp    c001008c <VgaText::updateCursor()>

c0010242 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010247:	c1 e0 08             	shl    eax,0x8
c001024a:	89 c2                	mov    edx,eax
c001024c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010251:	09 d0                	or     eax,edx
c0010253:	c3                   	ret    

c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010254:	56                   	push   esi
c0010255:	53                   	push   ebx
c0010256:	51                   	push   ecx
c0010257:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001025b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010260:	50                   	push   eax
c0010261:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010266:	50                   	push   eax
c0010267:	e8 30 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c001026c:	5b                   	pop    ebx
c001026d:	0f b6 c0             	movzx  eax,al
c0010270:	5e                   	pop    esi
c0010271:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010276:	50                   	push   eax
c0010277:	53                   	push   ebx
c0010278:	e8 c5 ff ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c001027d:	5a                   	pop    edx
c001027e:	5e                   	pop    esi
c001027f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010282:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010288:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001028c:	0f b7 d2             	movzx  edx,dx
c001028f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010293:	39 0d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ecx
c0010299:	75 10                	jne    c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001029b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001029e:	85 c0                	test   eax,eax
c00102a0:	74 09                	je     c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102a6:	5a                   	pop    edx
c00102a7:	5b                   	pop    ebx
c00102a8:	5e                   	pop    esi
c00102a9:	ff e0                	jmp    eax
c00102ab:	58                   	pop    eax
c00102ac:	5b                   	pop    ebx
c00102ad:	5e                   	pop    esi
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VgaText::getCursorX()>:
c00102b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102b7:	c3                   	ret    

c00102b8 <VgaText::getCursorY()>:
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102bf:	c3                   	ret    

c00102c0 <VgaText::setCursor(int, int)>:
c00102c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102d2:	e9 b5 fd ff ff       	jmp    c001008c <VgaText::updateCursor()>

c00102d7 <setActiveTerminal(VgaText*)>:
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 08             	sub    esp,0x8
c00102db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102df:	85 db                	test   ebx,ebx
c00102e1:	75 11                	jne    c00102f4 <setActiveTerminal(VgaText*)+0x1d>
c00102e3:	c7 44 24 10 d0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ed0
c00102eb:	83 c4 08             	add    esp,0x8
c00102ee:	5b                   	pop    ebx
c00102ef:	e9 6b 99 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c00102f4:	a1 64 d6 02 c0       	mov    eax,ds:0xc002d664
c00102f9:	85 c0                	test   eax,eax
c00102fb:	74 0c                	je     c0010309 <setActiveTerminal(VgaText*)+0x32>
c00102fd:	83 ec 0c             	sub    esp,0xc
c0010300:	50                   	push   eax
c0010301:	e8 86 fd ff ff       	call   c001008c <VgaText::updateCursor()>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	89 1d 64 d6 02 c0    	mov    DWORD PTR ds:0xc002d664,ebx
c001030f:	51                   	push   ecx
c0010310:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010313:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010316:	53                   	push   ebx
c0010317:	e8 a4 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010323:	75 07                	jne    c001032c <setActiveTerminal(VgaText*)+0x55>
c0010325:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001032c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010330:	83 c4 08             	add    esp,0x8
c0010333:	5b                   	pop    ebx
c0010334:	e9 05 fd ff ff       	jmp    c001003e <VgaText::load()>

c0010339 <doTerminalCycle()>:
c0010339:	83 ec 18             	sub    esp,0x18
c001033c:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c0010341:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010344:	50                   	push   eax
c0010345:	a3 60 d6 02 c0       	mov    ds:0xc002d660,eax
c001034a:	e8 88 ff ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001034f:	83 c4 1c             	add    esp,0x1c
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <VgaText::setCursorX(int)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001035e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010362:	50                   	push   eax
c0010363:	e8 58 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010368:	83 c4 1c             	add    esp,0x1c
c001036b:	c3                   	ret    

c001036c <VgaText::setCursorY(int)>:
c001036c:	83 ec 10             	sub    esp,0x10
c001036f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010377:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001037a:	50                   	push   eax
c001037b:	e8 40 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010380:	83 c4 1c             	add    esp,0x1c
c0010383:	c3                   	ret    

c0010384 <VgaText::incrementCursor(bool)>:
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	51                   	push   ecx
c0010387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001038b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001038f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010392:	40                   	inc    eax
c0010393:	83 f8 50             	cmp    eax,0x50
c0010396:	74 05                	je     c001039d <VgaText::incrementCursor(bool)+0x19>
c0010398:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001039b:	eb 24                	jmp    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c001039d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103a7:	8d 50 01             	lea    edx,[eax+0x1]
c00103aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103b0:	75 0f                	jne    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c00103b2:	83 ec 0c             	sub    esp,0xc
c00103b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103b8:	53                   	push   ebx
c00103b9:	e8 f0 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	84 c0                	test   al,al
c00103c5:	74 0c                	je     c00103d3 <VgaText::incrementCursor(bool)+0x4f>
c00103c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103cb:	5a                   	pop    edx
c00103cc:	5b                   	pop    ebx
c00103cd:	5e                   	pop    esi
c00103ce:	e9 b9 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103d3:	58                   	pop    eax
c00103d4:	5b                   	pop    ebx
c00103d5:	5e                   	pop    esi
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <VgaText::decrementCursor(bool)>:
c00103d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103e3:	85 c0                	test   eax,eax
c00103e5:	74 04                	je     c00103eb <VgaText::decrementCursor(bool)+0x13>
c00103e7:	48                   	dec    eax
c00103e8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103eb:	84 c9                	test   cl,cl
c00103ed:	74 09                	je     c00103f8 <VgaText::decrementCursor(bool)+0x20>
c00103ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f3:	e9 94 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103fa:	53                   	push   ebx
c00103fb:	83 ec 08             	sub    esp,0x8
c00103fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010402:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010406:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001040a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001040e:	3c 07                	cmp    al,0x7
c0010410:	75 2a                	jne    c001043c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010412:	a1 18 d7 02 c0       	mov    eax,ds:0xc002d718
c0010417:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001041f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010427:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001042f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010433:	83 c4 08             	add    esp,0x8
c0010436:	5b                   	pop    ebx
c0010437:	e9 f6 2e 00 00       	jmp    c0013332 <Buzzer::beep(int, int, bool)>
c001043c:	3c 0d                	cmp    al,0xd
c001043e:	75 09                	jne    c0010449 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010440:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010447:	eb 2c                	jmp    c0010475 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010449:	3c 0a                	cmp    al,0xa
c001044b:	75 31                	jne    c001047e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001044d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010450:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010457:	8d 50 01             	lea    edx,[eax+0x1]
c001045a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001045d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010460:	75 0f                	jne    c0010471 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010468:	53                   	push   ebx
c0010469:	e8 40 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010475:	83 c4 08             	add    esp,0x8
c0010478:	5b                   	pop    ebx
c0010479:	e9 0e fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c001047e:	3c 08                	cmp    al,0x8
c0010480:	75 25                	jne    c00104a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010482:	50                   	push   eax
c0010483:	50                   	push   eax
c0010484:	6a 01                	push   0x1
c0010486:	53                   	push   ebx
c0010487:	e8 4c ff ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c001048c:	5a                   	pop    edx
c001048d:	59                   	pop    ecx
c001048e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010491:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010494:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010497:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001049a:	6a 20                	push   0x20
c001049c:	53                   	push   ebx
c001049d:	e8 b2 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104a2:	83 c4 28             	add    esp,0x28
c00104a5:	5b                   	pop    ebx
c00104a6:	c3                   	ret    
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	0f be c0             	movsx  eax,al
c00104ad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b3:	51                   	push   ecx
c00104b4:	52                   	push   edx
c00104b5:	50                   	push   eax
c00104b6:	53                   	push   ebx
c00104b7:	e8 98 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104bc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104c0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104c8:	83 c4 28             	add    esp,0x28
c00104cb:	5b                   	pop    ebx
c00104cc:	e9 b3 fe ff ff       	jmp    c0010384 <VgaText::incrementCursor(bool)>
c00104d1:	90                   	nop

c00104d2 <VgaText::doUpdate()>:
c00104d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d6:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104d9:	85 c0                	test   eax,eax
c00104db:	74 02                	je     c00104df <VgaText::doUpdate()+0xd>
c00104dd:	ff e0                	jmp    eax
c00104df:	c3                   	ret    

c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104e0:	55                   	push   ebp
c00104e1:	31 ed                	xor    ebp,ebp
c00104e3:	57                   	push   edi
c00104e4:	56                   	push   esi
c00104e5:	53                   	push   ebx
c00104e6:	83 ec 1c             	sub    esp,0x1c
c00104e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104ed:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104f2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104f9:	50                   	push   eax
c00104fa:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ff:	50                   	push   eax
c0010500:	e8 97 fc ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c0010505:	59                   	pop    ecx
c0010506:	0f b6 c0             	movzx  eax,al
c0010509:	5e                   	pop    esi
c001050a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001050f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010513:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001051a:	0f b7 f6             	movzx  esi,si
c001051d:	01 f6                	add    esi,esi
c001051f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010522:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010525:	84 c0                	test   al,al
c0010527:	0f 84 fd 00 00 00    	je     c001062a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001052d:	3c 0d                	cmp    al,0xd
c001052f:	75 0c                	jne    c001053d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010531:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010538:	e9 e7 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001053d:	3c 0a                	cmp    al,0xa
c001053f:	75 47                	jne    c0010588 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010541:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010544:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001054b:	8d 48 01             	lea    ecx,[eax+0x1]
c001054e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010551:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010554:	75 0f                	jne    c0010565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001055c:	53                   	push   ebx
c001055d:	e8 4c fc ff ff       	call   c00101ae <VgaText::scrollScreen()>
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	31 ed                	xor    ebp,ebp
c001056a:	53                   	push   ebx
c001056b:	e8 1c fb ff ff       	call   c001008c <VgaText::updateCursor()>
c0010570:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001057b:	0f b7 f6             	movzx  esi,si
c001057e:	01 f6                	add    esi,esi
c0010580:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010583:	e9 9c 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010588:	3c 08                	cmp    al,0x8
c001058a:	75 35                	jne    c00105c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001058c:	56                   	push   esi
c001058d:	56                   	push   esi
c001058e:	6a 01                	push   0x1
c0010590:	53                   	push   ebx
c0010591:	e8 42 fe ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c0010596:	58                   	pop    eax
c0010597:	5a                   	pop    edx
c0010598:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001059b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001059e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105a1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105a4:	6a 20                	push   0x20
c00105a6:	53                   	push   ebx
c00105a7:	e8 a8 fc ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ac:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105b1:	83 c4 20             	add    esp,0x20
c00105b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105b7:	0f b7 f6             	movzx  esi,si
c00105ba:	01 f6                	add    esi,esi
c00105bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105bf:	eb 63                	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105c1:	51                   	push   ecx
c00105c2:	51                   	push   ecx
c00105c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105c7:	50                   	push   eax
c00105c8:	e8 75 fc ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	66 89 06             	mov    WORD PTR [esi],ax
c00105d3:	39 1d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ebx
c00105d9:	75 21                	jne    c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105db:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105de:	85 c0                	test   eax,eax
c00105e0:	74 1a                	je     c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105e2:	52                   	push   edx
c00105e3:	52                   	push   edx
c00105e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105f2:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105f5:	51                   	push   ecx
c00105f6:	53                   	push   ebx
c00105f7:	ff d0                	call   eax
c00105f9:	83 c4 20             	add    esp,0x20
c00105fc:	83 c6 02             	add    esi,0x2
c00105ff:	50                   	push   eax
c0010600:	50                   	push   eax
c0010601:	6a 00                	push   0x0
c0010603:	53                   	push   ebx
c0010604:	e8 7b fd ff ff       	call   c0010384 <VgaText::incrementCursor(bool)>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010610:	75 0d                	jne    c001061f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010612:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010617:	0f b7 f6             	movzx  esi,si
c001061a:	01 f6                	add    esi,esi
c001061c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061f:	bd 01 00 00 00       	mov    ebp,0x1
c0010624:	47                   	inc    edi
c0010625:	e9 f8 fe ff ff       	jmp    c0010522 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	53                   	push   ebx
c001062e:	e8 59 fa ff ff       	call   c001008c <VgaText::updateCursor()>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	89 e8                	mov    eax,ebp
c0010638:	84 c0                	test   al,al
c001063a:	74 0c                	je     c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	53                   	push   ebx
c0010640:	e8 8d fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010645:	83 c4 10             	add    esp,0x10
c0010648:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001064f:	83 c4 1c             	add    esp,0x1c
c0010652:	5b                   	pop    ebx
c0010653:	5e                   	pop    esi
c0010654:	5f                   	pop    edi
c0010655:	5d                   	pop    ebp
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::clearScreen()>:
c0010658:	57                   	push   edi
c0010659:	56                   	push   esi
c001065a:	31 f6                	xor    esi,esi
c001065c:	53                   	push   ebx
c001065d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010661:	52                   	push   edx
c0010662:	6a 00                	push   0x0
c0010664:	6a 00                	push   0x0
c0010666:	53                   	push   ebx
c0010667:	e8 54 fc ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001066c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010679:	7e 20                	jle    c001069b <VgaText::clearScreen()+0x43>
c001067b:	31 ff                	xor    edi,edi
c001067d:	50                   	push   eax
c001067e:	50                   	push   eax
c001067f:	56                   	push   esi
c0010680:	57                   	push   edi
c0010681:	47                   	inc    edi
c0010682:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010685:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010688:	6a 20                	push   0x20
c001068a:	53                   	push   ebx
c001068b:	e8 c4 fb ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010690:	83 c4 20             	add    esp,0x20
c0010693:	83 ff 50             	cmp    edi,0x50
c0010696:	75 e5                	jne    c001067d <VgaText::clearScreen()+0x25>
c0010698:	46                   	inc    esi
c0010699:	eb db                	jmp    c0010676 <VgaText::clearScreen()+0x1e>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	53                   	push   ebx
c001069f:	e8 2e fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c00106a4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	5b                   	pop    ebx
c00106af:	5e                   	pop    esi
c00106b0:	5f                   	pop    edi
c00106b1:	c3                   	ret    

c00106b2 <VgaText::putchar(char)>:
c00106b2:	56                   	push   esi
c00106b3:	53                   	push   ebx
c00106b4:	83 ec 14             	sub    esp,0x14
c00106b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106bf:	3c 5b                	cmp    al,0x5b
c00106c1:	75 18                	jne    c00106db <VgaText::putchar(char)+0x29>
c00106c3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106c7:	74 1f                	je     c00106e8 <VgaText::putchar(char)+0x36>
c00106c9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106cf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106d6:	e9 bd 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106db:	3c 1b                	cmp    al,0x1b
c00106dd:	75 09                	jne    c00106e8 <VgaText::putchar(char)+0x36>
c00106df:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106e3:	e9 b0 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106e8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106eb:	84 c9                	test   cl,cl
c00106ed:	0f 84 92 00 00 00    	je     c0010785 <VgaText::putchar(char)+0xd3>
c00106f3:	8d 50 c0             	lea    edx,[eax-0x40]
c00106f6:	80 fa 3e             	cmp    dl,0x3e
c00106f9:	77 76                	ja     c0010771 <VgaText::putchar(char)+0xbf>
c00106fb:	3c 6d                	cmp    al,0x6d
c00106fd:	75 47                	jne    c0010746 <VgaText::putchar(char)+0x94>
c00106ff:	31 f6                	xor    esi,esi
c0010701:	31 d2                	xor    edx,edx
c0010703:	31 c0                	xor    eax,eax
c0010705:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010708:	7e 2d                	jle    c0010737 <VgaText::putchar(char)+0x85>
c001070a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001070f:	80 fa 3b             	cmp    dl,0x3b
c0010712:	75 17                	jne    c001072b <VgaText::putchar(char)+0x79>
c0010714:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010718:	50                   	push   eax
c0010719:	53                   	push   ebx
c001071a:	e8 83 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c001071f:	59                   	pop    ecx
c0010720:	31 d2                	xor    edx,edx
c0010722:	58                   	pop    eax
c0010723:	31 c0                	xor    eax,eax
c0010725:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010729:	eb 09                	jmp    c0010734 <VgaText::putchar(char)+0x82>
c001072b:	6b c0 0a             	imul   eax,eax,0xa
c001072e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010732:	88 ca                	mov    dl,cl
c0010734:	46                   	inc    esi
c0010735:	eb ce                	jmp    c0010705 <VgaText::putchar(char)+0x53>
c0010737:	84 d2                	test   dl,dl
c0010739:	74 2e                	je     c0010769 <VgaText::putchar(char)+0xb7>
c001073b:	50                   	push   eax
c001073c:	53                   	push   ebx
c001073d:	e8 60 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c0010742:	58                   	pop    eax
c0010743:	5a                   	pop    edx
c0010744:	eb 23                	jmp    c0010769 <VgaText::putchar(char)+0xb7>
c0010746:	3c 4a                	cmp    al,0x4a
c0010748:	75 1f                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c001074a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001074e:	75 19                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	53                   	push   ebx
c0010754:	e8 ff fe ff ff       	call   c0010658 <VgaText::clearScreen()>
c0010759:	83 c4 0c             	add    esp,0xc
c001075c:	6a 00                	push   0x0
c001075e:	6a 00                	push   0x0
c0010760:	53                   	push   ebx
c0010761:	e8 5a fb ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001076f:	eb 27                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010771:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010774:	83 fa 0e             	cmp    edx,0xe
c0010777:	7f 1f                	jg     c0010798 <VgaText::putchar(char)+0xe6>
c0010779:	8d 4a 01             	lea    ecx,[edx+0x1]
c001077c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001077f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010783:	eb 13                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010785:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010788:	0f be c0             	movsx  eax,al
c001078b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001078e:	50                   	push   eax
c001078f:	53                   	push   ebx
c0010790:	e8 65 fc ff ff       	call   c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	83 c4 14             	add    esp,0x14
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	c3                   	ret    

c001079e <VgaText::putx(unsigned int)>:
c001079e:	57                   	push   edi
c001079f:	b9 11 00 00 00       	mov    ecx,0x11
c00107a4:	56                   	push   esi
c00107a5:	be de 9e 02 c0       	mov    esi,0xc0029ede
c00107aa:	53                   	push   ebx
c00107ab:	83 ec 20             	sub    esp,0x20
c00107ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b6:	fc                   	cld    
c00107b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b9:	be 08 00 00 00       	mov    esi,0x8
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	89 d8                	mov    eax,ebx
c00107c2:	c1 e3 04             	shl    ebx,0x4
c00107c5:	c1 e8 1c             	shr    eax,0x1c
c00107c8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107cd:	50                   	push   eax
c00107ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107d2:	e8 db fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00107d7:	83 c4 10             	add    esp,0x10
c00107da:	4e                   	dec    esi
c00107db:	75 e1                	jne    c00107be <VgaText::putx(unsigned int)+0x20>
c00107dd:	83 c4 20             	add    esp,0x20
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	5f                   	pop    edi
c00107e3:	c3                   	ret    

c00107e4 <VgaText::puts(char const*)>:
c00107e4:	53                   	push   ebx
c00107e5:	83 ec 08             	sub    esp,0x8
c00107e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107ef:	84 c0                	test   al,al
c00107f1:	74 12                	je     c0010805 <VgaText::puts(char const*)+0x21>
c00107f3:	43                   	inc    ebx
c00107f4:	51                   	push   ecx
c00107f5:	51                   	push   ecx
c00107f6:	50                   	push   eax
c00107f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fb:	e8 b2 fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	eb e7                	jmp    c00107ec <VgaText::puts(char const*)+0x8>
c0010805:	83 c4 08             	add    esp,0x8
c0010808:	5b                   	pop    ebx
c0010809:	c3                   	ret    

c001080a <VgaText::VgaText(char const*)>:
c001080a:	57                   	push   edi
c001080b:	56                   	push   esi
c001080c:	53                   	push   ebx
c001080d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010811:	83 ec 08             	sub    esp,0x8
c0010814:	6a 00                	push   0x0
c0010816:	50                   	push   eax
c0010817:	e8 42 05 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	ba 44 9f 02 c0       	mov    edx,0xc0029f44
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	89 10                	mov    DWORD PTR [eax],edx
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010839:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010844:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001085b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010875:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	8d 50 60             	lea    edx,[eax+0x60]
c0010883:	bb 40 d6 02 c0       	mov    ebx,0xc002d640
c0010888:	b8 08 00 00 00       	mov    eax,0x8
c001088d:	fc                   	cld    
c001088e:	89 d7                	mov    edi,edx
c0010890:	89 de                	mov    esi,ebx
c0010892:	89 c1                	mov    ecx,eax
c0010894:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089a:	05 82 00 00 00       	add    eax,0x82
c001089f:	83 ec 08             	sub    esp,0x8
c00108a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a6:	50                   	push   eax
c00108a7:	e8 60 ff fe ff       	call   c000080c <strcpy>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	6a 01                	push   0x1
c00108bf:	e8 dd 08 00 00       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00108c4:	83 c4 10             	add    esp,0x10
c00108c7:	89 c2                	mov    edx,eax
c00108c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108d0:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108dd:	89 c6                	mov    esi,eax
c00108df:	e8 5c f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c00108e4:	6a 05                	push   0x5
c00108e6:	56                   	push   esi
c00108e7:	50                   	push   eax
c00108e8:	53                   	push   ebx
c00108e9:	e8 70 10 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108f8:	83 ec 04             	sub    esp,0x4
c00108fb:	68 00 0f 00 00       	push   0xf00
c0010900:	6a 00                	push   0x0
c0010902:	50                   	push   eax
c0010903:	e8 48 fe fe ff       	call   c0000750 <memset>
c0010908:	83 c4 10             	add    esp,0x10
c001090b:	83 ec 04             	sub    esp,0x4
c001090e:	6a 00                	push   0x0
c0010910:	6a 07                	push   0x7
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	e8 1b f8 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	83 ec 04             	sub    esp,0x4
c0010921:	6a 00                	push   0x0
c0010923:	6a 00                	push   0x0
c0010925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010929:	e8 92 f9 ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001092e:	83 c4 10             	add    esp,0x10
c0010931:	83 ec 0c             	sub    esp,0xc
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	e8 1b fd ff ff       	call   c0010658 <VgaText::clearScreen()>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	05 02 01 00 00       	add    eax,0x102
c0010951:	83 ec 04             	sub    esp,0x4
c0010954:	68 96 00 00 00       	push   0x96
c0010959:	6a 00                	push   0x0
c001095b:	50                   	push   eax
c001095c:	e8 ef fd fe ff       	call   c0000750 <memset>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	05 98 01 00 00       	add    eax,0x198
c001096d:	83 ec 04             	sub    esp,0x4
c0010970:	68 2c 01 00 00       	push   0x12c
c0010975:	6a 00                	push   0x0
c0010977:	50                   	push   eax
c0010978:	e8 d3 fd fe ff       	call   c0000750 <memset>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	90                   	nop
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	5f                   	pop    edi
c0010984:	c3                   	ret    
c0010985:	90                   	nop

c0010986 <VgaText::receiveKey(unsigned char)>:
c0010986:	55                   	push   ebp
c0010987:	57                   	push   edi
c0010988:	56                   	push   esi
c0010989:	53                   	push   ebx
c001098a:	83 ec 1c             	sub    esp,0x1c
c001098d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010991:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010995:	84 db                	test   bl,bl
c0010997:	0f 84 c9 00 00 00    	je     c0010a66 <VgaText::receiveKey(unsigned char)+0xe0>
c001099d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109a3:	80 fb 08             	cmp    bl,0x8
c00109a6:	75 2c                	jne    c00109d4 <VgaText::receiveKey(unsigned char)+0x4e>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	57                   	push   edi
c00109ac:	e8 bb fd fe ff       	call   c000076c <strlen>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	74 41                	je     c00109f9 <VgaText::receiveKey(unsigned char)+0x73>
c00109b8:	50                   	push   eax
c00109b9:	50                   	push   eax
c00109ba:	6a 08                	push   0x8
c00109bc:	56                   	push   esi
c00109bd:	e8 f0 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c5:	e8 a2 fd fe ff       	call   c000076c <strlen>
c00109ca:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109d2:	eb 22                	jmp    c00109f6 <VgaText::receiveKey(unsigned char)+0x70>
c00109d4:	0f be c3             	movsx  eax,bl
c00109d7:	52                   	push   edx
c00109d8:	52                   	push   edx
c00109d9:	50                   	push   eax
c00109da:	56                   	push   esi
c00109db:	e8 d2 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109e0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109e9:	59                   	pop    ecx
c00109ea:	5d                   	pop    ebp
c00109eb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109ef:	50                   	push   eax
c00109f0:	57                   	push   edi
c00109f1:	e8 56 ff fe ff       	call   c000094c <strcat>
c00109f6:	83 c4 10             	add    esp,0x10
c00109f9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a00:	75 05                	jne    c0010a07 <VgaText::receiveKey(unsigned char)+0x81>
c0010a02:	80 fb 0a             	cmp    bl,0xa
c0010a05:	75 53                	jne    c0010a5a <VgaText::receiveKey(unsigned char)+0xd4>
c0010a07:	83 ec 0c             	sub    esp,0xc
c0010a0a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a10:	53                   	push   ebx
c0010a11:	e8 56 fd fe ff       	call   c000076c <strlen>
c0010a16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a19:	89 c5                	mov    ebp,eax
c0010a1b:	e8 4c fd fe ff       	call   c000076c <strlen>
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a27:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a2c:	76 10                	jbe    c0010a3e <VgaText::receiveKey(unsigned char)+0xb8>
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	68 ef 9e 02 c0       	push   0xc0029eef
c0010a36:	e8 24 92 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	50                   	push   eax
c0010a3f:	50                   	push   eax
c0010a40:	57                   	push   edi
c0010a41:	53                   	push   ebx
c0010a42:	e8 05 ff fe ff       	call   c000094c <strcat>
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	68 96 00 00 00       	push   0x96
c0010a4f:	6a 00                	push   0x0
c0010a51:	57                   	push   edi
c0010a52:	e8 f9 fc fe ff       	call   c0000750 <memset>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	83 ec 0c             	sub    esp,0xc
c0010a5d:	56                   	push   esi
c0010a5e:	e8 6f fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	83 c4 1c             	add    esp,0x1c
c0010a69:	5b                   	pop    ebx
c0010a6a:	5e                   	pop    esi
c0010a6b:	5f                   	pop    edi
c0010a6c:	5d                   	pop    ebp
c0010a6d:	c3                   	ret    

c0010a6e <VgaText::write(unsigned long long, void*, int*)>:
c0010a6e:	55                   	push   ebp
c0010a6f:	57                   	push   edi
c0010a70:	56                   	push   esi
c0010a71:	53                   	push   ebx
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a79:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a81:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a88:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a8b:	39 eb                	cmp    ebx,ebp
c0010a8d:	74 13                	je     c0010aa2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a8f:	43                   	inc    ebx
c0010a90:	50                   	push   eax
c0010a91:	50                   	push   eax
c0010a92:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a96:	50                   	push   eax
c0010a97:	56                   	push   esi
c0010a98:	e8 15 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	eb e9                	jmp    c0010a8b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010aa2:	83 ec 0c             	sub    esp,0xc
c0010aa5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010aac:	56                   	push   esi
c0010aad:	e8 20 fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010ab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ab6:	89 38                	mov    DWORD PTR [eax],edi
c0010ab8:	83 c4 1c             	add    esp,0x1c
c0010abb:	31 c0                	xor    eax,eax
c0010abd:	5b                   	pop    ebx
c0010abe:	5e                   	pop    esi
c0010abf:	5f                   	pop    edi
c0010ac0:	5d                   	pop    ebp
c0010ac1:	c3                   	ret    

c0010ac2 <newTerminal(char*)>:
c0010ac2:	83 ec 28             	sub    esp,0x28
c0010ac5:	68 c4 02 00 00       	push   0x2c4
c0010aca:	e8 cd ea ff ff       	call   c000f59c <malloc>
c0010acf:	5a                   	pop    edx
c0010ad0:	59                   	pop    ecx
c0010ad1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ad5:	50                   	push   eax
c0010ad6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ada:	e8 2b fd ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c0010adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ae3:	83 c4 2c             	add    esp,0x2c
c0010ae6:	c3                   	ret    
c0010ae7:	90                   	nop

c0010ae8 <TSS::TSS()>:
c0010ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010af3:	90                   	nop
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <TSS::setESP(unsigned long)>:
c0010af6:	55                   	push   ebp
c0010af7:	89 e5                	mov    ebp,esp
c0010af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b05:	90                   	nop
c0010b06:	5d                   	pop    ebp
c0010b07:	c3                   	ret    

c0010b08 <TSS::flush()>:
c0010b08:	55                   	push   ebp
c0010b09:	89 e5                	mov    ebp,esp
c0010b0b:	83 ec 10             	sub    esp,0x10
c0010b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b13:	83 c8 03             	or     eax,0x3
c0010b16:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b1a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b1e:	66 89 d0             	mov    ax,dx
c0010b21:	0f 00 d8             	ltr    ax
c0010b24:	90                   	nop
c0010b25:	c9                   	leave  
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <TSS::setup(unsigned long, unsigned long)>:
c0010b28:	55                   	push   ebp
c0010b29:	89 e5                	mov    ebp,esp
c0010b2b:	83 ec 18             	sub    esp,0x18
c0010b2e:	83 ec 0c             	sub    esp,0xc
c0010b31:	6a 68                	push   0x68
c0010b33:	e8 64 ea ff ff       	call   c000f59c <malloc>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	89 c2                	mov    edx,eax
c0010b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b49:	83 ec 04             	sub    esp,0x4
c0010b4c:	6a 68                	push   0x68
c0010b4e:	6a 00                	push   0x0
c0010b50:	50                   	push   eax
c0010b51:	e8 fa fb fe ff       	call   c0000750 <memset>
c0010b56:	83 c4 10             	add    esp,0x10
c0010b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b83:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bda:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf0:	0f 20 da             	mov    edx,cr3
c0010bf3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010bf6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010bf9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c02:	83 ec 08             	sub    esp,0x8
c0010c05:	50                   	push   eax
c0010c06:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c09:	50                   	push   eax
c0010c0a:	e8 83 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	83 ec 08             	sub    esp,0x8
c0010c15:	6a 68                	push   0x68
c0010c17:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c1a:	50                   	push   eax
c0010c1b:	e8 8e e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c2a:	83 e0 0f             	and    eax,0xf
c0010c2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c33:	83 c8 40             	or     eax,0x40
c0010c36:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c39:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0010c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c44:	05 78 01 00 00       	add    eax,0x178
c0010c49:	83 ec 04             	sub    esp,0x4
c0010c4c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c4f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c52:	50                   	push   eax
c0010c53:	e8 8a e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	89 c2                	mov    edx,eax
c0010c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c60:	89 10                	mov    DWORD PTR [eax],edx
c0010c62:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0010c67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c6d:	05 78 01 00 00       	add    eax,0x178
c0010c72:	83 ec 0c             	sub    esp,0xc
c0010c75:	50                   	push   eax
c0010c76:	e8 91 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c83:	c9                   	leave  
c0010c84:	c3                   	ret    
c0010c85:	90                   	nop

c0010c86 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c91:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c96:	75 08                	jne    c0010ca0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010c98:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010c9e:	eb 38                	jmp    c0010cd8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ca0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ca5:	75 17                	jne    c0010cbe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010caf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cbb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cbe:	89 c1                	mov    ecx,eax
c0010cc0:	83 e1 fd             	and    ecx,0xfffffffd
c0010cc3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cc9:	74 cd                	je     c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ccb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cd0:	83 e0 ef             	and    eax,0xffffffef
c0010cd3:	83 f8 08             	cmp    eax,0x8
c0010cd6:	76 c0                	jbe    c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd8:	31 c0                	xor    eax,eax
c0010cda:	c3                   	ret    
c0010cdb:	90                   	nop

c0010cdc <ReservedFilename::isAtty()>:
c0010cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ce3:	31 c0                	xor    eax,eax
c0010ce5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ceb:	74 09                	je     c0010cf6 <ReservedFilename::isAtty()+0x1a>
c0010ced:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cf3:	0f 94 c0             	sete   al
c0010cf6:	c3                   	ret    
c0010cf7:	90                   	nop

c0010cf8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d07:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d0c:	75 08                	jne    c0010d16 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d0e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d14:	eb 3d                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d1b:	75 17                	jne    c0010d34 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d31:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d39:	75 04                	jne    c0010d3f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d3b:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d3d:	eb 14                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d44:	74 c8                	je     c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d46:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4b:	83 e0 ef             	and    eax,0xffffffef
c0010d4e:	83 f8 08             	cmp    eax,0x8
c0010d51:	76 bb                	jbe    c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d53:	31 c0                	xor    eax,eax
c0010d55:	c3                   	ret    

c0010d56 <UnixFile::getFileDescriptor()>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d5d:	c3                   	ret    

c0010d5e <UnixFile::UnixFile(int)>:
c0010d5e:	53                   	push   ebx
c0010d5f:	83 ec 28             	sub    esp,0x28
c0010d62:	ba 0c a0 02 c0       	mov    edx,0xc002a00c
c0010d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d75:	0f 8f 8c 01 00 00    	jg     c0010f07 <UnixFile::UnixFile(int)+0x1a9>
c0010d7b:	a1 40 c5 02 c0       	mov    eax,ds:0xc002c540
c0010d80:	8d 50 01             	lea    edx,[eax+0x1]
c0010d83:	89 15 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,edx
c0010d89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d90:	83 ec 08             	sub    esp,0x8
c0010d93:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d97:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010d9c:	e8 05 75 01 00       	call   c00282a6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	a0 f4 d6 02 c0       	mov    al,ds:0xc002d6f4
c0010da9:	83 f0 01             	xor    eax,0x1
c0010dac:	84 c0                	test   al,al
c0010dae:	0f 84 54 01 00 00    	je     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010db4:	c6 05 f4 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6f4,0x1
c0010dbb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dc3:	83 ec 0c             	sub    esp,0xc
c0010dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dca:	e8 cd e7 ff ff       	call   c000f59c <malloc>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	89 c3                	mov    ebx,eax
c0010dd4:	83 ec 08             	sub    esp,0x8
c0010dd7:	68 03 ff ff 0f       	push   0xfffff03
c0010ddc:	53                   	push   ebx
c0010ddd:	e8 2c 01 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	89 1d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ebx
c0010deb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010df3:	83 ec 0c             	sub    esp,0xc
c0010df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfa:	e8 9d e7 ff ff       	call   c000f59c <malloc>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	89 c3                	mov    ebx,eax
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	68 01 ff ff 0f       	push   0xfffff01
c0010e0c:	53                   	push   ebx
c0010e0d:	e8 fc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	89 1d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,ebx
c0010e1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e23:	83 ec 0c             	sub    esp,0xc
c0010e26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e2a:	e8 6d e7 ff ff       	call   c000f59c <malloc>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	89 c3                	mov    ebx,eax
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	68 00 ff ff 0f       	push   0xfffff00
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 cc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	89 1d e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,ebx
c0010e4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e5a:	e8 3d e7 ff ff       	call   c000f59c <malloc>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	89 c3                	mov    ebx,eax
c0010e64:	83 ec 08             	sub    esp,0x8
c0010e67:	68 02 ff ff 0f       	push   0xfffff02
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 9c 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	89 1d e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,ebx
c0010e7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e88:	7f 7e                	jg     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010e8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e92:	83 ec 0c             	sub    esp,0xc
c0010e95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e99:	e8 fe e6 ff ff       	call   c000f59c <malloc>
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	89 c3                	mov    ebx,eax
c0010ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea7:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010eac:	83 ec 08             	sub    esp,0x8
c0010eaf:	50                   	push   eax
c0010eb0:	53                   	push   ebx
c0010eb1:	e8 58 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ebd:	89 1c 85 c0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2940],ebx
c0010ec4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ed3:	e8 c4 e6 ff ff       	call   c000f59c <malloc>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	89 c3                	mov    ebx,eax
c0010edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee1:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	50                   	push   eax
c0010eea:	53                   	push   ebx
c0010eeb:	e8 1e 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef7:	89 1c 85 80 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2980],ebx
c0010efe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f02:	e9 7c ff ff ff       	jmp    c0010e83 <UnixFile::UnixFile(int)+0x125>
c0010f07:	90                   	nop
c0010f08:	83 c4 28             	add    esp,0x28
c0010f0b:	5b                   	pop    ebx
c0010f0c:	c3                   	ret    
c0010f0d:	90                   	nop

c0010f0e <ReservedFilename::ReservedFilename(int)>:
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f15:	83 ec 08             	sub    esp,0x8
c0010f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1c:	50                   	push   eax
c0010f1d:	e8 3c fe ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c0010f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2e:	89 10                	mov    DWORD PTR [eax],edx
c0010f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f3b:	90                   	nop
c0010f3c:	83 c4 0c             	add    esp,0xc
c0010f3f:	c3                   	ret    

c0010f40 <UnixFile::~UnixFile()>:
c0010f40:	83 ec 1c             	sub    esp,0x1c
c0010f43:	ba 0c a0 02 c0       	mov    edx,0xc002a00c
c0010f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4c:	89 10                	mov    DWORD PTR [eax],edx
c0010f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f5a:	7f 73                	jg     c0010fcf <UnixFile::~UnixFile()+0x8f>
c0010f5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f6c:	e8 09 74 01 00       	call   c002837a <LinkedList<UnixFile>::getFirstElement()>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f80:	e8 fd 73 01 00       	call   c0028382 <LinkedList<UnixFile>::removeFirst()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f90:	74 40                	je     c0010fd2 <UnixFile::~UnixFile()+0x92>
c0010f92:	83 ec 08             	sub    esp,0x8
c0010f95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f99:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f9e:	e8 03 73 01 00       	call   c00282a6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010faa:	8d 50 01             	lea    edx,[eax+0x1]
c0010fad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fb1:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fb6:	0f 94 c0             	sete   al
c0010fb9:	84 c0                	test   al,al
c0010fbb:	74 a7                	je     c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fbd:	83 ec 0c             	sub    esp,0xc
c0010fc0:	68 e4 9f 02 c0       	push   0xc0029fe4
c0010fc5:	e8 95 8c 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	eb 95                	jmp    c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fcf:	90                   	nop
c0010fd0:	eb 01                	jmp    c0010fd3 <UnixFile::~UnixFile()+0x93>
c0010fd2:	90                   	nop
c0010fd3:	90                   	nop
c0010fd4:	83 c4 1c             	add    esp,0x1c
c0010fd7:	c3                   	ret    

c0010fd8 <UnixFile::~UnixFile()>:
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	83 ec 0c             	sub    esp,0xc
c0010fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe2:	e8 59 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	6a 0c                	push   0xc
c0010fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff3:	e8 55 14 00 00       	call   c001244d <operator delete(void*, unsigned long)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	83 c4 0c             	add    esp,0xc
c0010ffe:	c3                   	ret    
c0010fff:	90                   	nop

c0011000 <ReservedFilename::~ReservedFilename()>:
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	50                   	push   eax
c0011016:	e8 25 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c001101b:	83 c4 10             	add    esp,0x10
c001101e:	90                   	nop
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::~ReservedFilename()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	83 ec 0c             	sub    esp,0xc
c001102a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102e:	e8 cd ff ff ff       	call   c0011000 <ReservedFilename::~ReservedFilename()>
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	83 ec 08             	sub    esp,0x8
c0011039:	6a 0c                	push   0xc
c001103b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103f:	e8 09 14 00 00       	call   c001244d <operator delete(void*, unsigned long)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	83 c4 0c             	add    esp,0xc
c001104a:	c3                   	ret    

c001104b <getFromFileDescriptor(int)>:
c001104b:	53                   	push   ebx
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011053:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011059:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001105f:	7f 2c                	jg     c001108d <getFromFileDescriptor(int)+0x42>
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011069:	e8 0c 73 01 00       	call   c002837a <LinkedList<UnixFile>::getFirstElement()>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	85 c0                	test   eax,eax
c0011073:	75 04                	jne    c0011079 <getFromFileDescriptor(int)+0x2e>
c0011075:	31 c0                	xor    eax,eax
c0011077:	eb 6e                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c0011079:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001107c:	74 69                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001107e:	52                   	push   edx
c001107f:	52                   	push   edx
c0011080:	50                   	push   eax
c0011081:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011086:	e8 99 73 01 00       	call   c0028424 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001108b:	eb e1                	jmp    c001106e <getFromFileDescriptor(int)+0x23>
c001108d:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c0011092:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011098:	74 4d                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001109a:	a1 f0 d6 02 c0       	mov    eax,ds:0xc002d6f0
c001109f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110a5:	74 40                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110a7:	a1 e8 d6 02 c0       	mov    eax,ds:0xc002d6e8
c00110ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110b2:	74 33                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110b4:	a1 e4 d6 02 c0       	mov    eax,ds:0xc002d6e4
c00110b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110bf:	74 26                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110c7:	83 f8 08             	cmp    eax,0x8
c00110ca:	77 09                	ja     c00110d5 <getFromFileDescriptor(int)+0x8a>
c00110cc:	8b 04 85 c0 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2940]
c00110d3:	eb 12                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110db:	83 fb 08             	cmp    ebx,0x8
c00110de:	77 95                	ja     c0011075 <getFromFileDescriptor(int)+0x2a>
c00110e0:	8b 04 9d 80 d6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2980]
c00110e7:	83 c4 08             	add    esp,0x8
c00110ea:	5b                   	pop    ebx
c00110eb:	c3                   	ret    

c00110ec <__static_initialization_and_destruction_0(int, int)>:
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110f4:	75 34                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00110fe:	75 2a                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011108:	e8 57 71 01 00       	call   c0028264 <LinkedList<UnixFile>::LinkedList()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	68 70 c3 02 c0       	push   0xc002c370
c0011118:	68 f8 d6 02 c0       	push   0xc002d6f8
c001111d:	68 62 82 02 c0       	push   0xc0028262
c0011122:	e8 a0 12 00 00       	call   c00123c7 <__cxa_atexit>
c0011127:	83 c4 10             	add    esp,0x10
c001112a:	90                   	nop
c001112b:	83 c4 0c             	add    esp,0xc
c001112e:	c3                   	ret    

c001112f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	83 ec 08             	sub    esp,0x8
c0011135:	68 ff ff 00 00       	push   0xffff
c001113a:	6a 01                	push   0x1
c001113c:	e8 ab ff ff ff       	call   c00110ec <__static_initialization_and_destruction_0(int, int)>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	83 c4 0c             	add    esp,0xc
c0011147:	c3                   	ret    

c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011148:	53                   	push   ebx
c0011149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001114d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011151:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011157:	89 c8                	mov    eax,ecx
c0011159:	d1 e8                	shr    eax,1
c001115b:	03 05 48 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c548
c0011161:	83 e1 01             	and    ecx,0x1
c0011164:	8a 10                	mov    dl,BYTE PTR [eax]
c0011166:	75 09                	jne    c0011171 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011168:	83 e2 f0             	and    edx,0xfffffff0
c001116b:	09 da                	or     edx,ebx
c001116d:	88 10                	mov    BYTE PTR [eax],dl
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    
c0011171:	c1 e3 04             	shl    ebx,0x4
c0011174:	83 e2 0f             	and    edx,0xf
c0011177:	09 da                	or     edx,ebx
c0011179:	88 10                	mov    BYTE PTR [eax],dl
c001117b:	5b                   	pop    ebx
c001117c:	c3                   	ret    

c001117d <Virt::getPageState(unsigned long)>:
c001117d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011181:	8b 0d 48 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c548
c0011187:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001118d:	89 d0                	mov    eax,edx
c001118f:	d1 e8                	shr    eax,1
c0011191:	83 e2 01             	and    edx,0x1
c0011194:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011197:	75 04                	jne    c001119d <Virt::getPageState(unsigned long)+0x20>
c0011199:	83 e0 0f             	and    eax,0xf
c001119c:	c3                   	ret    
c001119d:	c0 e8 04             	shr    al,0x4
c00111a0:	c3                   	ret    

c00111a1 <Virt::allocateKernelVirtualPages(int)>:
c00111a1:	55                   	push   ebp
c00111a2:	31 ed                	xor    ebp,ebp
c00111a4:	57                   	push   edi
c00111a5:	56                   	push   esi
c00111a6:	53                   	push   ebx
c00111a7:	31 db                	xor    ebx,ebx
c00111a9:	83 ec 1c             	sub    esp,0x1c
c00111ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b0:	8b 3d 44 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c544
c00111b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111bb:	57                   	push   edi
c00111bc:	e8 bc ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111c1:	5a                   	pop    edx
c00111c2:	84 c0                	test   al,al
c00111c4:	75 3a                	jne    c0011200 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111c6:	85 db                	test   ebx,ebx
c00111c8:	75 02                	jne    c00111cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ca:	89 fd                	mov    ebp,edi
c00111cc:	43                   	inc    ebx
c00111cd:	39 f3                	cmp    ebx,esi
c00111cf:	74 5a                	je     c001122b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111d1:	47                   	inc    edi
c00111d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111d8:	76 31                	jbe    c001120b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111da:	c7 05 44 c5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c544,0xc8000
c00111e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111e9:	75 28                	jne    c0011213 <Virt::allocateKernelVirtualPages(int)+0x72>
c00111eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111f5:	57                   	push   edi
c00111f6:	e8 82 ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111fb:	5a                   	pop    edx
c00111fc:	84 c0                	test   al,al
c00111fe:	74 c6                	je     c00111c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011200:	31 db                	xor    ebx,ebx
c0011202:	47                   	inc    edi
c0011203:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011209:	77 cf                	ja     c00111da <Virt::allocateKernelVirtualPages(int)+0x39>
c001120b:	89 3d 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,edi
c0011211:	eb a8                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	68 3c a0 02 c0       	push   0xc002a03c
c001121b:	e8 3f 8a 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0011220:	8b 3d 44 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c544
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	eb 90                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001122b:	89 2d 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,ebp
c0011231:	4b                   	dec    ebx
c0011232:	74 5f                	je     c0011293 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011234:	85 f6                	test   esi,esi
c0011236:	74 3d                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011238:	89 e8                	mov    eax,ebp
c001123a:	31 db                	xor    ebx,ebx
c001123c:	8d 7e ff             	lea    edi,[esi-0x1]
c001123f:	eb 14                	jmp    c0011255 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011241:	6a 01                	push   0x1
c0011243:	43                   	inc    ebx
c0011244:	50                   	push   eax
c0011245:	e8 fe fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001124a:	58                   	pop    eax
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	5a                   	pop    edx
c001124e:	74 25                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011250:	a1 44 c5 02 c0       	mov    eax,ds:0xc002c544
c0011255:	8d 50 01             	lea    edx,[eax+0x1]
c0011258:	85 db                	test   ebx,ebx
c001125a:	89 15 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,edx
c0011260:	74 20                	je     c0011282 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011262:	39 df                	cmp    edi,ebx
c0011264:	75 db                	jne    c0011241 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011266:	6a 03                	push   0x3
c0011268:	43                   	inc    ebx
c0011269:	50                   	push   eax
c001126a:	e8 d9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126f:	59                   	pop    ecx
c0011270:	39 f3                	cmp    ebx,esi
c0011272:	58                   	pop    eax
c0011273:	75 db                	jne    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011275:	83 c4 1c             	add    esp,0x1c
c0011278:	89 e8                	mov    eax,ebp
c001127a:	5b                   	pop    ebx
c001127b:	c1 e0 0c             	shl    eax,0xc
c001127e:	5e                   	pop    esi
c001127f:	5f                   	pop    edi
c0011280:	5d                   	pop    ebp
c0011281:	c3                   	ret    
c0011282:	6a 02                	push   0x2
c0011284:	bb 01 00 00 00       	mov    ebx,0x1
c0011289:	50                   	push   eax
c001128a:	e8 b9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001128f:	58                   	pop    eax
c0011290:	5a                   	pop    edx
c0011291:	eb bd                	jmp    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011293:	6a 04                	push   0x4
c0011295:	8d 45 01             	lea    eax,[ebp+0x1]
c0011298:	55                   	push   ebp
c0011299:	a3 44 c5 02 c0       	mov    ds:0xc002c544,eax
c001129e:	e8 a5 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112a3:	59                   	pop    ecx
c00112a4:	89 e8                	mov    eax,ebp
c00112a6:	5b                   	pop    ebx
c00112a7:	c1 e0 0c             	shl    eax,0xc
c00112aa:	83 c4 1c             	add    esp,0x1c
c00112ad:	5b                   	pop    ebx
c00112ae:	5e                   	pop    esi
c00112af:	5f                   	pop    edi
c00112b0:	5d                   	pop    ebp
c00112b1:	c3                   	ret    

c00112b2 <Virt::freeSwapfilePage(unsigned long)>:
c00112b2:	53                   	push   ebx
c00112b3:	8b 15 0c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d70c
c00112b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112bd:	b8 01 00 00 00       	mov    eax,0x1
c00112c2:	89 cb                	mov    ebx,ecx
c00112c4:	d3 e0                	shl    eax,cl
c00112c6:	c1 eb 05             	shr    ebx,0x5
c00112c9:	f7 d0                	not    eax
c00112cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112ce:	5b                   	pop    ebx
c00112cf:	c3                   	ret    

c00112d0 <Virt::swapIDToSector(unsigned long)>:
c00112d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d4:	0f af 05 4c c5 02 c0 	imul   eax,DWORD PTR ds:0xc002c54c
c00112db:	03 05 54 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c554
c00112e1:	c3                   	ret    

c00112e2 <Virt::allocateSwapfilePage()>:
c00112e2:	55                   	push   ebp
c00112e3:	31 d2                	xor    edx,edx
c00112e5:	57                   	push   edi
c00112e6:	56                   	push   esi
c00112e7:	53                   	push   ebx
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	8b 0d 4c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c54c
c00112f1:	a1 50 c5 02 c0       	mov    eax,ds:0xc002c550
c00112f6:	f7 f1                	div    ecx
c00112f8:	39 0d 50 c5 02 c0    	cmp    DWORD PTR ds:0xc002c550,ecx
c00112fe:	72 2d                	jb     c001132d <Virt::allocateSwapfilePage()+0x4b>
c0011300:	8b 35 0c d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d70c
c0011306:	8b 16                	mov    edx,DWORD PTR [esi]
c0011308:	f6 c2 01             	test   dl,0x1
c001130b:	74 3c                	je     c0011349 <Virt::allocateSwapfilePage()+0x67>
c001130d:	31 c9                	xor    ecx,ecx
c001130f:	bf 01 00 00 00       	mov    edi,0x1
c0011314:	eb 12                	jmp    c0011328 <Virt::allocateSwapfilePage()+0x46>
c0011316:	89 fd                	mov    ebp,edi
c0011318:	89 ca                	mov    edx,ecx
c001131a:	d3 e5                	shl    ebp,cl
c001131c:	c1 ea 05             	shr    edx,0x5
c001131f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011322:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011324:	85 ea                	test   edx,ebp
c0011326:	74 2a                	je     c0011352 <Virt::allocateSwapfilePage()+0x70>
c0011328:	41                   	inc    ecx
c0011329:	39 c8                	cmp    eax,ecx
c001132b:	77 e9                	ja     c0011316 <Virt::allocateSwapfilePage()+0x34>
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	68 c3 a1 02 c0       	push   0xc002a1c3
c0011335:	e8 25 89 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	31 c9                	xor    ecx,ecx
c001133f:	83 c4 0c             	add    esp,0xc
c0011342:	89 c8                	mov    eax,ecx
c0011344:	5b                   	pop    ebx
c0011345:	5e                   	pop    esi
c0011346:	5f                   	pop    edi
c0011347:	5d                   	pop    ebp
c0011348:	c3                   	ret    
c0011349:	89 f3                	mov    ebx,esi
c001134b:	bd 01 00 00 00       	mov    ebp,0x1
c0011350:	31 c9                	xor    ecx,ecx
c0011352:	09 ea                	or     edx,ebp
c0011354:	89 c8                	mov    eax,ecx
c0011356:	89 13                	mov    DWORD PTR [ebx],edx
c0011358:	83 c4 0c             	add    esp,0xc
c001135b:	5b                   	pop    ebx
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    

c0011360 <Virt::virtualMemorySetup()>:
c0011360:	53                   	push   ebx
c0011361:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011366:	6a 0f                	push   0xf
c0011368:	53                   	push   ebx
c0011369:	43                   	inc    ebx
c001136a:	e8 d9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136f:	58                   	pop    eax
c0011370:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011376:	5a                   	pop    edx
c0011377:	75 ed                	jne    c0011366 <Virt::virtualMemorySetup()+0x6>
c0011379:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001137e:	6a 00                	push   0x0
c0011380:	53                   	push   ebx
c0011381:	43                   	inc    ebx
c0011382:	e8 c1 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011387:	59                   	pop    ecx
c0011388:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138e:	58                   	pop    eax
c001138f:	75 ed                	jne    c001137e <Virt::virtualMemorySetup()+0x1e>
c0011391:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011396:	6a 0f                	push   0xf
c0011398:	53                   	push   ebx
c0011399:	43                   	inc    ebx
c001139a:	e8 a9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139f:	58                   	pop    eax
c00113a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113a6:	5a                   	pop    edx
c00113a7:	75 ed                	jne    c0011396 <Virt::virtualMemorySetup()+0x36>
c00113a9:	5b                   	pop    ebx
c00113aa:	c3                   	ret    

c00113ab <Virt::setupPageSwapping(int)>:
c00113ab:	57                   	push   edi
c00113ac:	56                   	push   esi
c00113ad:	53                   	push   ebx
c00113ae:	83 ec 1c             	sub    esp,0x1c
c00113b1:	68 14 01 00 00       	push   0x114
c00113b6:	e8 e1 e1 ff ff       	call   c000f59c <malloc>
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c6                	mov    esi,eax
c00113c0:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c00113c6:	68 da a1 02 c0       	push   0xc002a1da
c00113cb:	50                   	push   eax
c00113cc:	e8 b3 16 00 00       	call   c0012a84 <File::File(char const*, Process*)>
c00113d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d4:	e8 87 18 00 00       	call   c0012c60 <File::unlink()>
c00113d9:	58                   	pop    eax
c00113da:	5a                   	pop    edx
c00113db:	6a 12                	push   0x12
c00113dd:	56                   	push   esi
c00113de:	e8 05 17 00 00       	call   c0012ae8 <File::open(FileOpenMode)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	85 c0                	test   eax,eax
c00113e8:	0f 85 2f 01 00 00    	jne    c001151d <Virt::setupPageSwapping(int)+0x172>
c00113ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113fa:	c1 e3 08             	shl    ebx,0x8
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	68 00 00 01 00       	push   0x10000
c0011405:	e8 92 e1 ff ff       	call   c000f59c <malloc>
c001140a:	83 c4 0c             	add    esp,0xc
c001140d:	89 c7                	mov    edi,eax
c001140f:	68 00 00 01 00       	push   0x10000
c0011414:	68 ee 00 00 00       	push   0xee
c0011419:	50                   	push   eax
c001141a:	e8 31 f3 fe ff       	call   c0000750 <memset>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 db                	test   ebx,ebx
c0011424:	79 03                	jns    c0011429 <Virt::setupPageSwapping(int)+0x7e>
c0011426:	83 c3 0f             	add    ebx,0xf
c0011429:	c1 fb 04             	sar    ebx,0x4
c001142c:	4b                   	dec    ebx
c001142d:	83 fb ff             	cmp    ebx,0xffffffff
c0011430:	74 41                	je     c0011473 <Virt::setupPageSwapping(int)+0xc8>
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	8b 06                	mov    eax,DWORD PTR [esi]
c0011437:	8d 54 24 18          	lea    edx,[esp+0x18]
c001143b:	52                   	push   edx
c001143c:	57                   	push   edi
c001143d:	6a 00                	push   0x0
c001143f:	68 00 00 01 00       	push   0x10000
c0011444:	56                   	push   esi
c0011445:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011448:	83 c4 20             	add    esp,0x20
c001144b:	85 c0                	test   eax,eax
c001144d:	0f 85 b5 00 00 00    	jne    c0011508 <Virt::setupPageSwapping(int)+0x15d>
c0011453:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001145b:	74 cf                	je     c001142c <Virt::setupPageSwapping(int)+0x81>
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	4b                   	dec    ebx
c0011461:	68 0c a2 02 c0       	push   0xc002a20c
c0011466:	e8 f4 87 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	83 fb ff             	cmp    ebx,0xffffffff
c0011471:	75 bf                	jne    c0011432 <Virt::setupPageSwapping(int)+0x87>
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	56                   	push   esi
c0011477:	e8 ca 16 00 00       	call   c0012b46 <File::close()>
c001147c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147f:	e8 38 e1 ff ff       	call   c000f5bc <rfree>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	85 f6                	test   esi,esi
c0011489:	74 0c                	je     c0011497 <Virt::setupPageSwapping(int)+0xec>
c001148b:	83 ec 0c             	sub    esp,0xc
c001148e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011490:	56                   	push   esi
c0011491:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	83 ec 08             	sub    esp,0x8
c001149a:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c001149f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a7:	68 da a1 02 c0       	push   0xc002a1da
c00114ac:	50                   	push   eax
c00114ad:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114b4:	c6 05 58 c5 02 c0 43 	mov    BYTE PTR ds:0xc002c558,0x43
c00114bb:	c1 e2 0b             	shl    edx,0xb
c00114be:	a3 54 c5 02 c0       	mov    ds:0xc002c554,eax
c00114c3:	89 15 50 c5 02 c0    	mov    DWORD PTR ds:0xc002c550,edx
c00114c9:	c7 05 4c c5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c54c,0x8
c00114d3:	c1 ea 08             	shr    edx,0x8
c00114d6:	89 14 24             	mov    DWORD PTR [esp],edx
c00114d9:	e8 be e0 ff ff       	call   c000f59c <malloc>
c00114de:	83 c4 0c             	add    esp,0xc
c00114e1:	89 c1                	mov    ecx,eax
c00114e3:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00114e8:	31 d2                	xor    edx,edx
c00114ea:	a1 50 c5 02 c0       	mov    eax,ds:0xc002c550
c00114ef:	f7 35 4c c5 02 c0    	div    DWORD PTR ds:0xc002c54c
c00114f5:	c1 e8 05             	shr    eax,0x5
c00114f8:	50                   	push   eax
c00114f9:	6a 00                	push   0x0
c00114fb:	51                   	push   ecx
c00114fc:	e8 4f f2 fe ff       	call   c0000750 <memset>
c0011501:	83 c4 20             	add    esp,0x20
c0011504:	5b                   	pop    ebx
c0011505:	5e                   	pop    esi
c0011506:	5f                   	pop    edi
c0011507:	c3                   	ret    
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	68 0c a2 02 c0       	push   0xc002a20c
c0011510:	e8 4a 87 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	e9 36 ff ff ff       	jmp    c0011453 <Virt::setupPageSwapping(int)+0xa8>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	68 f1 a1 02 c0       	push   0xc002a1f1
c0011525:	e8 35 87 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	e9 bc fe ff ff       	jmp    c00113ee <Virt::setupPageSwapping(int)+0x43>

c0011532 <VAS::VAS()>:
c0011532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001153d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154c:	a3 10 d7 02 c0       	mov    ds:0xc002d710,eax
c0011551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011555:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001156b:	90                   	nop
c001156c:	c3                   	ret    
c001156d:	90                   	nop

c001156e <VAS::VAS(VAS*)>:
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011575:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011580:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	68 5c a0 02 c0       	push   0xc002a05c
c001158f:	e8 cb 86 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0011594:	83 c4 10             	add    esp,0x10
c0011597:	90                   	nop
c0011598:	83 c4 0c             	add    esp,0xc
c001159b:	c3                   	ret    

c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001159c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115a0:	89 c2                	mov    edx,eax
c00115a2:	c1 e8 0a             	shr    eax,0xa
c00115a5:	c1 ea 16             	shr    edx,0x16
c00115a8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115ad:	19 c9                	sbb    ecx,ecx
c00115af:	c1 e2 0c             	shl    edx,0xc
c00115b2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b8:	25 fc 0f 00 00       	and    eax,0xffc
c00115bd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c4:	01 d0                	add    eax,edx
c00115c6:	c3                   	ret    
c00115c7:	90                   	nop

c00115c8 <VAS::getPageTableEntry(unsigned long)>:
c00115c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115cc:	89 ca                	mov    edx,ecx
c00115ce:	c1 e9 0a             	shr    ecx,0xa
c00115d1:	c1 ea 16             	shr    edx,0x16
c00115d4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115da:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115e0:	c1 e0 0c             	shl    eax,0xc
c00115e3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e6:	c3                   	ret    

c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e7:	57                   	push   edi
c00115e8:	56                   	push   esi
c00115e9:	be 01 00 00 00       	mov    esi,0x1
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 10             	sub    esp,0x10
c00115f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f6:	c1 eb 0c             	shr    ebx,0xc
c00115f9:	eb 3f                	jmp    c001163a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115fb:	83 ec 08             	sub    esp,0x8
c00115fe:	57                   	push   edi
c00115ff:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0011605:	e8 be ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011613:	f6 c4 04             	test   ah,0x4
c0011616:	75 5f                	jne    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011618:	80 fa 04             	cmp    dl,0x4
c001161b:	74 78                	je     c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001161d:	80 fa 02             	cmp    dl,0x2
c0011620:	0f 84 88 00 00 00    	je     c00116ae <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011626:	80 fa 03             	cmp    dl,0x3
c0011629:	0f 84 ad 00 00 00    	je     c00116dc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001162f:	fe ca                	dec    dl
c0011631:	0f 84 92 00 00 00    	je     c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011637:	43                   	inc    ebx
c0011638:	31 f6                	xor    esi,esi
c001163a:	53                   	push   ebx
c001163b:	89 df                	mov    edi,ebx
c001163d:	e8 3b fb ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c0011642:	c1 e7 0c             	shl    edi,0xc
c0011645:	59                   	pop    ecx
c0011646:	84 c0                	test   al,al
c0011648:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001164c:	75 ad                	jne    c00115fb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001164e:	83 ec 0c             	sub    esp,0xc
c0011651:	68 12 a2 02 c0       	push   0xc002a212
c0011656:	e8 04 86 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001165b:	58                   	pop    eax
c001165c:	5a                   	pop    edx
c001165d:	57                   	push   edi
c001165e:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0011664:	e8 5f ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 00                	mov    eax,DWORD PTR [eax]
c001166e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011672:	f6 c4 04             	test   ah,0x4
c0011675:	74 c0                	je     c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011677:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001167b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	50                   	push   eax
c0011684:	e8 5c e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011690:	80 fa 04             	cmp    dl,0x4
c0011693:	75 88                	jne    c001161d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011695:	89 f0                	mov    eax,esi
c0011697:	84 c0                	test   al,al
c0011699:	75 47                	jne    c00116e2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001169b:	c7 44 24 20 80 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a080
c00116a3:	83 c4 10             	add    esp,0x10
c00116a6:	5b                   	pop    ebx
c00116a7:	5e                   	pop    esi
c00116a8:	5f                   	pop    edi
c00116a9:	e9 b1 85 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c00116ae:	89 f0                	mov    eax,esi
c00116b0:	84 c0                	test   al,al
c00116b2:	75 15                	jne    c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	68 2e a2 02 c0       	push   0xc002a22e
c00116bc:	e8 9e 85 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	e9 6e ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	6a 00                	push   0x0
c00116ce:	53                   	push   ebx
c00116cf:	e8 74 fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	e9 5b ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116dc:	89 f0                	mov    eax,esi
c00116de:	84 c0                	test   al,al
c00116e0:	75 15                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	6a 00                	push   0x0
c00116e7:	53                   	push   ebx
c00116e8:	e8 5b fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	5b                   	pop    ebx
c00116f4:	5e                   	pop    esi
c00116f5:	5f                   	pop    edi
c00116f6:	c3                   	ret    
c00116f7:	c7 44 24 20 4a a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a24a
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	5b                   	pop    ebx
c0011703:	5e                   	pop    esi
c0011704:	5f                   	pop    edi
c0011705:	e9 55 85 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>

c001170a <VAS::freeAllocatedPages(unsigned long)>:
c001170a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011712:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011716:	74 09                	je     c0011721 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001171c:	e9 c6 fe ff ff       	jmp    c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011721:	c7 44 24 04 a4 a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a0a4
c0011729:	e9 f7 0d 00 00       	jmp    c0012525 <Dbg::kprintf(char const*, ...)>

c001172e <VAS::virtualToPhysical(unsigned long)>:
c001172e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011732:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011736:	e8 8d fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001173b:	5a                   	pop    edx
c001173c:	8b 00                	mov    eax,DWORD PTR [eax]
c001173e:	59                   	pop    ecx
c001173f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011744:	c3                   	ret    
c0011745:	90                   	nop

c0011746 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011746:	55                   	push   ebp
c0011747:	57                   	push   edi
c0011748:	56                   	push   esi
c0011749:	53                   	push   ebx
c001174a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001174e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011752:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011756:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001175a:	85 db                	test   ebx,ebx
c001175c:	7e 22                	jle    c0011780 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001175e:	c1 e3 0c             	shl    ebx,0xc
c0011761:	01 f3                	add    ebx,esi
c0011763:	56                   	push   esi
c0011764:	81 c6 00 10 00 00    	add    esi,0x1000
c001176a:	55                   	push   ebp
c001176b:	e8 58 fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011770:	5a                   	pop    edx
c0011771:	59                   	pop    ecx
c0011772:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011774:	21 f9                	and    ecx,edi
c0011776:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001177a:	39 f3                	cmp    ebx,esi
c001177c:	89 08                	mov    DWORD PTR [eax],ecx
c001177e:	75 e3                	jne    c0011763 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	5d                   	pop    ebp
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VAS::setToWriteCombining(unsigned long, int)>:
c0011786:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001178b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011791:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011798:	75 01                	jne    c001179b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001179a:	c3                   	ret    
c001179b:	68 80 00 00 00       	push   0x80
c00117a0:	6a ff                	push   0xffffffff
c00117a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ae:	e8 93 ff ff ff       	call   c0011746 <VAS::reflagRange(unsigned long, int, int, int)>
c00117b3:	83 c4 14             	add    esp,0x14
c00117b6:	c3                   	ret    
c00117b7:	90                   	nop

c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117cb:	19 c0                	sbb    eax,eax
c00117cd:	83 ca 03             	or     edx,0x3
c00117d0:	83 e0 fc             	and    eax,0xfffffffc
c00117d3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117da:	0f 20 d8             	mov    eax,cr3
c00117dd:	0f 22 d8             	mov    cr3,eax
c00117e0:	c3                   	ret    
c00117e1:	90                   	nop

c00117e2 <VAS::~VAS()>:
c00117e2:	83 ec 2c             	sub    esp,0x2c
c00117e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117ed:	fa                   	cli    
c00117ee:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00117f3:	40                   	inc    eax
c00117f4:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00117f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011800:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011803:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011809:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 a3 ff ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 0c             	add    esp,0xc
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d4 00 00 00    	jg     c0011902 <VAS::~VAS()+0x120>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 a8 00 00 00    	je     c00118f9 <VAS::~VAS()+0x117>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 72                	jg     c00118d5 <VAS::~VAS()+0xf3>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001188d:	6a 01                	push   0x1
c001188f:	50                   	push   eax
c0011890:	e8 07 fd ff ff       	call   c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118aa:	25 01 04 00 00       	and    eax,0x401
c00118af:	3d 01 04 00 00       	cmp    eax,0x401
c00118b4:	75 19                	jne    c00118cf <VAS::~VAS()+0xed>
c00118b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 1d e0 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d3:	eb 84                	jmp    c0011859 <VAS::~VAS()+0x77>
c00118d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d9:	25 00 04 00 00       	and    eax,0x400
c00118de:	74 19                	je     c00118f9 <VAS::~VAS()+0x117>
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e9:	83 ec 0c             	sub    esp,0xc
c00118ec:	50                   	push   eax
c00118ed:	e8 f3 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118fd:	e9 1e ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3e>
c0011902:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011906:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	50                   	push   eax
c001190d:	e8 d5 fc ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011919:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	50                   	push   eax
c0011920:	e8 c0 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011930:	c1 e0 02             	shl    eax,0x2
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	50                   	push   eax
c0011937:	68 c8 a0 02 c0       	push   0xc002a0c8
c001193c:	e8 e4 0b 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0011949:	48                   	dec    eax
c001194a:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001194f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0011954:	85 c0                	test   eax,eax
c0011956:	75 01                	jne    c0011959 <VAS::~VAS()+0x177>
c0011958:	fb                   	sti    
c0011959:	90                   	nop
c001195a:	83 c4 2c             	add    esp,0x2c
c001195d:	c3                   	ret    

c001195e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001195e:	55                   	push   ebp
c001195f:	57                   	push   edi
c0011960:	56                   	push   esi
c0011961:	53                   	push   ebx
c0011962:	83 ec 1c             	sub    esp,0x1c
c0011965:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011969:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001196d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011973:	77 08                	ja     c001197d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011975:	0f 20 d8             	mov    eax,cr3
c0011978:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001197b:	75 47                	jne    c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001197d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011981:	09 d8                	or     eax,ebx
c0011983:	a9 ff 0f 00 00       	test   eax,0xfff
c0011988:	75 57                	jne    c00119e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001198a:	89 de                	mov    esi,ebx
c001198c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001198f:	c1 ee 16             	shr    esi,0x16
c0011992:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011999:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001199d:	74 54                	je     c00119f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001199f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119a3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119ad:	c1 e6 0c             	shl    esi,0xc
c00119b0:	c1 eb 0a             	shr    ebx,0xa
c00119b3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119bc:	83 c4 1c             	add    esp,0x1c
c00119bf:	5b                   	pop    ebx
c00119c0:	5e                   	pop    esi
c00119c1:	5f                   	pop    edi
c00119c2:	5d                   	pop    ebp
c00119c3:	c3                   	ret    
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 e8 a0 02 c0       	push   0xc002a0e8
c00119cc:	e8 54 0b 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d8:	09 d8                	or     eax,ebx
c00119da:	a9 ff 0f 00 00       	test   eax,0xfff
c00119df:	74 a9                	je     c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 50 a1 02 c0       	push   0xc002a150
c00119e9:	e8 71 82 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	eb 97                	jmp    c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f7:	e8 44 df ff ff       	call   c000f940 <Phys::allocatePage()>
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	89 c5                	mov    ebp,eax
c0011a01:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0011a07:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a0b:	6a 01                	push   0x1
c0011a0d:	e8 8f f7 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011a12:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a19:	6a 01                	push   0x1
c0011a1b:	50                   	push   eax
c0011a1c:	55                   	push   ebp
c0011a1d:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a23:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a27:	51                   	push   ecx
c0011a28:	e8 27 02 00 00       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a2d:	83 c4 1c             	add    esp,0x1c
c0011a30:	68 00 10 00 00       	push   0x1000
c0011a35:	6a 00                	push   0x0
c0011a37:	50                   	push   eax
c0011a38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a3c:	e8 0f ed fe ff       	call   c0000750 <memset>
c0011a41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a45:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a48:	e8 9a fb ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a51:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a5a:	e9 40 ff ff ff       	jmp    c001199f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a5f:	90                   	nop

c0011a60 <VAS::allocatePages(int, int)>:
c0011a60:	55                   	push   ebp
c0011a61:	57                   	push   edi
c0011a62:	56                   	push   esi
c0011a63:	53                   	push   ebx
c0011a64:	83 ec 1c             	sub    esp,0x1c
c0011a67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a6b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011a70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a76:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a7c:	83 e0 01             	and    eax,0x1
c0011a7f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a87:	0f 85 cc 00 00 00    	jne    c0011b59 <VAS::allocatePages(int, int)+0xf9>
c0011a8d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a94:	85 c0                	test   eax,eax
c0011a96:	0f 84 a1 00 00 00    	je     c0011b3d <VAS::allocatePages(int, int)+0xdd>
c0011a9c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011aa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa4:	c1 e6 0c             	shl    esi,0xc
c0011aa7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aab:	85 c0                	test   eax,eax
c0011aad:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ab0:	7e 33                	jle    c0011ae5 <VAS::allocatePages(int, int)+0x85>
c0011ab2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aba:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ac0:	e8 7b de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011ac5:	55                   	push   ebp
c0011ac6:	53                   	push   ebx
c0011ac7:	50                   	push   eax
c0011ac8:	57                   	push   edi
c0011ac9:	e8 90 fe ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 03                	je     c0011adb <VAS::allocatePages(int, int)+0x7b>
c0011ad8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011adb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ae1:	39 de                	cmp    esi,ebx
c0011ae3:	75 db                	jne    c0011ac0 <VAS::allocatePages(int, int)+0x60>
c0011ae5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aea:	75 12                	jne    c0011afe <VAS::allocatePages(int, int)+0x9e>
c0011aec:	0f 20 d8             	mov    eax,cr3
c0011aef:	0f 22 d8             	mov    cr3,eax
c0011af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af6:	83 c4 1c             	add    esp,0x1c
c0011af9:	5b                   	pop    ebx
c0011afa:	5e                   	pop    esi
c0011afb:	5f                   	pop    edi
c0011afc:	5d                   	pop    ebp
c0011afd:	c3                   	ret    
c0011afe:	c1 ee 0a             	shr    esi,0xa
c0011b01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b0b:	c1 eb 0a             	shr    ebx,0xa
c0011b0e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b20:	39 c3                	cmp    ebx,eax
c0011b22:	77 ce                	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011b24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b2d:	39 d8                	cmp    eax,ebx
c0011b2f:	73 f3                	jae    c0011b24 <VAS::allocatePages(int, int)+0xc4>
c0011b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b35:	83 c4 1c             	add    esp,0x1c
c0011b38:	5b                   	pop    ebx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	5d                   	pop    ebp
c0011b3c:	c3                   	ret    
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	68 74 a1 02 c0       	push   0xc002a174
c0011b45:	e8 15 81 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0011b4a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b51:	83 c4 10             	add    esp,0x10
c0011b54:	e9 43 ff ff ff       	jmp    c0011a9c <VAS::allocatePages(int, int)+0x3c>
c0011b59:	83 ec 0c             	sub    esp,0xc
c0011b5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b60:	e8 3c f6 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b71:	0f 87 9b 00 00 00    	ja     c0011c12 <VAS::allocatePages(int, int)+0x1b2>
c0011b77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b7b:	85 d2                	test   edx,edx
c0011b7d:	7e 3c                	jle    c0011bbb <VAS::allocatePages(int, int)+0x15b>
c0011b7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b8b:	c1 e5 0c             	shl    ebp,0xc
c0011b8e:	81 ce 00 04 00 00    	or     esi,0x400
c0011b94:	01 dd                	add    ebp,ebx
c0011b96:	e8 a5 dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011b9b:	56                   	push   esi
c0011b9c:	53                   	push   ebx
c0011b9d:	50                   	push   eax
c0011b9e:	57                   	push   edi
c0011b9f:	e8 ba fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bac:	74 03                	je     c0011bb1 <VAS::allocatePages(int, int)+0x151>
c0011bae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb7:	39 dd                	cmp    ebp,ebx
c0011bb9:	75 db                	jne    c0011b96 <VAS::allocatePages(int, int)+0x136>
c0011bbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc0:	0f 84 26 ff ff ff    	je     c0011aec <VAS::allocatePages(int, int)+0x8c>
c0011bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bce:	89 d3                	mov    ebx,edx
c0011bd0:	c1 e0 0c             	shl    eax,0xc
c0011bd3:	c1 eb 0a             	shr    ebx,0xa
c0011bd6:	01 d0                	add    eax,edx
c0011bd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bde:	c1 e8 0a             	shr    eax,0xa
c0011be1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bec:	2d 00 00 40 00       	sub    eax,0x400000
c0011bf1:	39 c3                	cmp    ebx,eax
c0011bf3:	0f 87 f9 fe ff ff    	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011bf9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bfc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c02:	39 d8                	cmp    eax,ebx
c0011c04:	73 f3                	jae    c0011bf9 <VAS::allocatePages(int, int)+0x199>
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011c17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c1d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c24:	0f 84 4d ff ff ff    	je     c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c2a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c32:	e9 40 ff ff ff       	jmp    c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c37:	90                   	nop

c0011c38 <VAS::setCPUSpecific(unsigned long)>:
c0011c38:	83 ec 0c             	sub    esp,0xc
c0011c3b:	6a 05                	push   0x5
c0011c3d:	68 00 00 40 c2       	push   0xc2400000
c0011c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c4a:	e8 0f fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	c3                   	ret    
c0011c53:	90                   	nop

c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c54:	55                   	push   ebp
c0011c55:	57                   	push   edi
c0011c56:	56                   	push   esi
c0011c57:	53                   	push   ebx
c0011c58:	83 ec 1c             	sub    esp,0x1c
c0011c5b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011c60:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c6a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c6e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c74:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c78:	83 e0 01             	and    eax,0x1
c0011c7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c83:	85 c0                	test   eax,eax
c0011c85:	7e 39                	jle    c0011cc0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8b:	89 f3                	mov    ebx,esi
c0011c8d:	c1 e0 0c             	shl    eax,0xc
c0011c90:	01 f0                	add    eax,esi
c0011c92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c96:	55                   	push   ebp
c0011c97:	53                   	push   ebx
c0011c98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c9c:	29 f0                	sub    eax,esi
c0011c9e:	01 d8                	add    eax,ebx
c0011ca0:	50                   	push   eax
c0011ca1:	57                   	push   edi
c0011ca2:	e8 b7 fc ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 03                	je     c0011cb4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cb1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cbe:	75 d6                	jne    c0011c96 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cc0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc5:	75 10                	jne    c0011cd7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cc7:	0f 20 d8             	mov    eax,cr3
c0011cca:	0f 22 d8             	mov    cr3,eax
c0011ccd:	83 c4 1c             	add    esp,0x1c
c0011cd0:	89 f0                	mov    eax,esi
c0011cd2:	5b                   	pop    ebx
c0011cd3:	5e                   	pop    esi
c0011cd4:	5f                   	pop    edi
c0011cd5:	5d                   	pop    ebp
c0011cd6:	c3                   	ret    
c0011cd7:	89 f3                	mov    ebx,esi
c0011cd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cdd:	c1 eb 0a             	shr    ebx,0xa
c0011ce0:	c1 e0 0c             	shl    eax,0xc
c0011ce3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce9:	01 f0                	add    eax,esi
c0011ceb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cf1:	c1 e8 0a             	shr    eax,0xa
c0011cf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf9:	2d 00 00 40 00       	sub    eax,0x400000
c0011cfe:	39 c3                	cmp    ebx,eax
c0011d00:	77 cb                	ja     c0011ccd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d05:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d0b:	39 d8                	cmp    eax,ebx
c0011d0d:	73 f3                	jae    c0011d02 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d0f:	83 c4 1c             	add    esp,0x1c
c0011d12:	89 f0                	mov    eax,esi
c0011d14:	5b                   	pop    ebx
c0011d15:	5e                   	pop    esi
c0011d16:	5f                   	pop    edi
c0011d17:	5d                   	pop    ebp
c0011d18:	c3                   	ret    
c0011d19:	90                   	nop

c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d1a:	55                   	push   ebp
c0011d1b:	57                   	push   edi
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 1c             	sub    esp,0x1c
c0011d21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d29:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d2d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d31:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d36:	75 4a                	jne    c0011d82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d38:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d3f:	c1 eb 16             	shr    ebx,0x16
c0011d42:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d49:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d4d:	74 4d                	je     c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d53:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d57:	c1 e8 0a             	shr    eax,0xa
c0011d5a:	80 fa 01             	cmp    dl,0x1
c0011d5d:	19 d2                	sbb    edx,edx
c0011d5f:	c1 e3 0c             	shl    ebx,0xc
c0011d62:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d66:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d6c:	25 fc 0f 00 00       	and    eax,0xffc
c0011d71:	01 d8                	add    eax,ebx
c0011d73:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d7a:	83 c4 1c             	add    esp,0x1c
c0011d7d:	5b                   	pop    ebx
c0011d7e:	5e                   	pop    esi
c0011d7f:	5f                   	pop    edi
c0011d80:	5d                   	pop    ebp
c0011d81:	c3                   	ret    
c0011d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	68 a0 a1 02 c0       	push   0xc002a1a0
c0011d8e:	e8 cc 7e 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d9a:	eb 9c                	jmp    c0011d38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da0:	e8 9b db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011da5:	83 ec 0c             	sub    esp,0xc
c0011da8:	89 c5                	mov    ebp,eax
c0011daa:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0011db0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db4:	6a 01                	push   0x1
c0011db6:	e8 e6 f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011dbb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dc2:	6a 01                	push   0x1
c0011dc4:	50                   	push   eax
c0011dc5:	55                   	push   ebp
c0011dc6:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dcc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd0:	51                   	push   ecx
c0011dd1:	e8 7e fe ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd6:	83 c4 1c             	add    esp,0x1c
c0011dd9:	68 00 10 00 00       	push   0x1000
c0011dde:	6a 00                	push   0x0
c0011de0:	50                   	push   eax
c0011de1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de5:	e8 66 e9 fe ff       	call   c0000750 <memset>
c0011dea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011df1:	e8 f1 f7 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e03:	e9 47 ff ff ff       	jmp    c0011d4f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e08 <VAS::VAS(bool)>:
c0011e08:	53                   	push   ebx
c0011e09:	83 ec 28             	sub    esp,0x28
c0011e0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e32:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e35:	e8 06 db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e43:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	6a 01                	push   0x1
c0011e4e:	e8 4e f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	89 c2                	mov    edx,eax
c0011e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e5f:	83 ec 0c             	sub    esp,0xc
c0011e62:	6a 03                	push   0x3
c0011e64:	6a 01                	push   0x1
c0011e66:	52                   	push   edx
c0011e67:	50                   	push   eax
c0011e68:	53                   	push   ebx
c0011e69:	e8 e6 fd ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6e:	83 c4 20             	add    esp,0x20
c0011e71:	89 c2                	mov    edx,eax
c0011e73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e7a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e82:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e8a:	7f 1c                	jg     c0011ea8 <VAS::VAS(bool)+0xa0>
c0011e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e97:	c1 e2 02             	shl    edx,0x2
c0011e9a:	01 d0                	add    eax,edx
c0011e9c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ea2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea6:	eb da                	jmp    c0011e82 <VAS::VAS(bool)+0x7a>
c0011ea8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eb0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eb8:	7f 7a                	jg     c0011f34 <VAS::VAS(bool)+0x12c>
c0011eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ebe:	2d 00 02 00 00       	sub    eax,0x200
c0011ec3:	c1 e0 0c             	shl    eax,0xc
c0011ec6:	83 c8 03             	or     eax,0x3
c0011ec9:	89 c2                	mov    edx,eax
c0011ecb:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ed6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011edc:	83 e0 10             	and    eax,0x10
c0011edf:	84 c0                	test   al,al
c0011ee1:	74 07                	je     c0011eea <VAS::VAS(bool)+0xe2>
c0011ee3:	b8 00 01 00 00       	mov    eax,0x100
c0011ee8:	eb 05                	jmp    c0011eef <VAS::VAS(bool)+0xe7>
c0011eea:	b8 00 00 00 00       	mov    eax,0x0
c0011eef:	09 d0                	or     eax,edx
c0011ef1:	89 c1                	mov    ecx,eax
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	89 ca                	mov    edx,ecx
c0011f05:	89 10                	mov    DWORD PTR [eax],edx
c0011f07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f0b:	2d 40 03 00 00       	sub    eax,0x340
c0011f10:	83 f8 7f             	cmp    eax,0x7f
c0011f13:	77 16                	ja     c0011f2b <VAS::VAS(bool)+0x123>
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f20:	c1 e2 02             	shl    edx,0x2
c0011f23:	01 d0                	add    eax,edx
c0011f25:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f2b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2f:	e9 7c ff ff ff       	jmp    c0011eb0 <VAS::VAS(bool)+0xa8>
c0011f34:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f45:	83 e0 10             	and    eax,0x10
c0011f48:	84 c0                	test   al,al
c0011f4a:	74 07                	je     c0011f53 <VAS::VAS(bool)+0x14b>
c0011f4c:	b8 03 41 00 00       	mov    eax,0x4103
c0011f51:	eb 05                	jmp    c0011f58 <VAS::VAS(bool)+0x150>
c0011f53:	b8 03 40 00 00       	mov    eax,0x4003
c0011f58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f5c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f5f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f65:	89 02                	mov    DWORD PTR [edx],eax
c0011f67:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f78:	83 ec 08             	sub    esp,0x8
c0011f7b:	50                   	push   eax
c0011f7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f80:	e8 b3 fc ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011f8f:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa0:	83 e0 10             	and    eax,0x10
c0011fa3:	84 c0                	test   al,al
c0011fa5:	74 07                	je     c0011fae <VAS::VAS(bool)+0x1a6>
c0011fa7:	b8 00 01 00 00       	mov    eax,0x100
c0011fac:	eb 05                	jmp    c0011fb3 <VAS::VAS(bool)+0x1ab>
c0011fae:	b8 00 00 00 00       	mov    eax,0x0
c0011fb3:	09 c2                	or     edx,eax
c0011fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fbc:	05 fc 0f 00 00       	add    eax,0xffc
c0011fc1:	83 ca 03             	or     edx,0x3
c0011fc4:	89 10                	mov    DWORD PTR [eax],edx
c0011fc6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011fcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 84 1c 00 00       	call   c0013c5e <Device::getName()>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	83 ec 08             	sub    esp,0x8
c0011fe0:	68 64 a2 02 c0       	push   0xc002a264
c0011fe5:	50                   	push   eax
c0011fe6:	e8 ad e8 fe ff       	call   c0000898 <strcmp>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	85 c0                	test   eax,eax
c0011ff0:	0f 94 c0             	sete   al
c0011ff3:	84 c0                	test   al,al
c0011ff5:	0f 84 87 00 00 00    	je     c0012082 <VAS::VAS(bool)+0x27a>
c0011ffb:	fa                   	cli    
c0011ffc:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012001:	40                   	inc    eax
c0012002:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0012007:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001200c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012012:	05 7c 09 00 00       	add    eax,0x97c
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	50                   	push   eax
c001201b:	e8 fe cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012020:	83 c4 10             	add    esp,0x10
c0012023:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012028:	89 c3                	mov    ebx,eax
c001202a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001202f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012035:	05 7c 09 00 00       	add    eax,0x97c
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	50                   	push   eax
c001203e:	e8 db cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	50                   	push   eax
c001204a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001204e:	e8 75 f5 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205d:	6a 11                	push   0x11
c001205f:	53                   	push   ebx
c0012060:	50                   	push   eax
c0012061:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012065:	e8 f4 f8 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012072:	48                   	dec    eax
c0012073:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0012078:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001207d:	85 c0                	test   eax,eax
c001207f:	75 01                	jne    c0012082 <VAS::VAS(bool)+0x27a>
c0012081:	fb                   	sti    
c0012082:	90                   	nop
c0012083:	83 c4 28             	add    esp,0x28
c0012086:	5b                   	pop    ebx
c0012087:	c3                   	ret    

c0012088 <VAS::evict(unsigned long)>:
c0012088:	55                   	push   ebp
c0012089:	57                   	push   edi
c001208a:	56                   	push   esi
c001208b:	53                   	push   ebx
c001208c:	83 ec 1c             	sub    esp,0x1c
c001208f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209b:	e8 42 f2 ff ff       	call   c00112e2 <Virt::allocateSwapfilePage()>
c00120a0:	89 c7                	mov    edi,eax
c00120a2:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c00120a7:	85 c0                	test   eax,eax
c00120a9:	7e 3d                	jle    c00120e8 <VAS::evict(unsigned long)+0x60>
c00120ab:	89 ee                	mov    esi,ebp
c00120ad:	31 db                	xor    ebx,ebx
c00120af:	83 ec 0c             	sub    esp,0xc
c00120b2:	57                   	push   edi
c00120b3:	e8 18 f2 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00120b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00120bb:	01 d8                	add    eax,ebx
c00120bd:	6a 01                	push   0x1
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	43                   	inc    ebx
c00120c2:	52                   	push   edx
c00120c3:	81 c6 00 02 00 00    	add    esi,0x200
c00120c9:	50                   	push   eax
c00120ca:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c00120d1:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c00120d8:	e8 d7 3d 00 00       	call   c0015eb4 <LogicalDisk::write(unsigned long long, int, void*)>
c00120dd:	83 c4 20             	add    esp,0x20
c00120e0:	39 1d 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,ebx
c00120e6:	7f c7                	jg     c00120af <VAS::evict(unsigned long)+0x27>
c00120e8:	83 ec 08             	sub    esp,0x8
c00120eb:	c1 e7 0b             	shl    edi,0xb
c00120ee:	55                   	push   ebp
c00120ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120f3:	e8 d0 f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c00120f8:	83 c4 0c             	add    esp,0xc
c00120fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012103:	09 d7                	or     edi,edx
c0012105:	89 38                	mov    DWORD PTR [eax],edi
c0012107:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001210c:	40                   	inc    eax
c001210d:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c0012112:	0f 20 da             	mov    edx,cr3
c0012115:	0f 22 da             	mov    cr3,edx
c0012118:	50                   	push   eax
c0012119:	55                   	push   ebp
c001211a:	68 72 a2 02 c0       	push   0xc002a272
c001211f:	e8 01 04 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0012124:	a1 04 d7 02 c0       	mov    eax,ds:0xc002d704
c0012129:	c7 44 24 40 87 a2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a287
c0012131:	8d 50 01             	lea    edx,[eax+0x1]
c0012134:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012138:	89 15 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edx
c001213e:	83 c4 2c             	add    esp,0x2c
c0012141:	5b                   	pop    ebx
c0012142:	5e                   	pop    esi
c0012143:	5f                   	pop    edi
c0012144:	5d                   	pop    ebp
c0012145:	e9 db 03 00 00       	jmp    c0012525 <Dbg::kprintf(char const*, ...)>

c001214a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001214a:	55                   	push   ebp
c001214b:	57                   	push   edi
c001214c:	56                   	push   esi
c001214d:	53                   	push   ebx
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012155:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001215b:	0f 84 dc 00 00 00    	je     c001223d <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012161:	56                   	push   esi
c0012162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012166:	e8 5d f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001216b:	5b                   	pop    ebx
c001216c:	85 c0                	test   eax,eax
c001216e:	5f                   	pop    edi
c001216f:	89 c3                	mov    ebx,eax
c0012171:	0f 84 c6 00 00 00    	je     c001223d <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012177:	8b 38                	mov    edi,DWORD PTR [eax]
c0012179:	31 c0                	xor    eax,eax
c001217b:	89 fa                	mov    edx,edi
c001217d:	81 e2 01 04 00 00    	and    edx,0x401
c0012183:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012189:	0f 85 b0 00 00 00    	jne    c001223f <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001218f:	e8 ac d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012194:	c1 ef 0b             	shr    edi,0xb
c0012197:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012199:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001219f:	09 c2                	or     edx,eax
c00121a1:	81 ca 01 08 00 00    	or     edx,0x801
c00121a7:	89 13                	mov    DWORD PTR [ebx],edx
c00121a9:	8b 0d 4c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c54c
c00121af:	85 c9                	test   ecx,ecx
c00121b1:	7e 3d                	jle    c00121f0 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c00121b3:	89 f5                	mov    ebp,esi
c00121b5:	31 db                	xor    ebx,ebx
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	57                   	push   edi
c00121bb:	e8 10 f1 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00121c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00121c3:	01 d8                	add    eax,ebx
c00121c5:	6a 01                	push   0x1
c00121c7:	31 d2                	xor    edx,edx
c00121c9:	43                   	inc    ebx
c00121ca:	52                   	push   edx
c00121cb:	81 c5 00 02 00 00    	add    ebp,0x200
c00121d1:	50                   	push   eax
c00121d2:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c00121d9:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c00121e0:	e8 63 3c 00 00       	call   c0015e48 <LogicalDisk::read(unsigned long long, int, void*)>
c00121e5:	83 c4 20             	add    esp,0x20
c00121e8:	39 1d 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,ebx
c00121ee:	7f c7                	jg     c00121b7 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00121f0:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00121f5:	48                   	dec    eax
c00121f6:	52                   	push   edx
c00121f7:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c00121fc:	50                   	push   eax
c00121fd:	56                   	push   esi
c00121fe:	68 98 a2 02 c0       	push   0xc002a298
c0012203:	e8 1d 03 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0012208:	89 3c 24             	mov    DWORD PTR [esp],edi
c001220b:	e8 a2 f0 ff ff       	call   c00112b2 <Virt::freeSwapfilePage(unsigned long)>
c0012210:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012215:	83 c4 10             	add    esp,0x10
c0012218:	48                   	dec    eax
c0012219:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001221e:	85 c0                	test   eax,eax
c0012220:	75 01                	jne    c0012223 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012222:	fb                   	sti    
c0012223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012227:	25 ff 0f 00 00       	and    eax,0xfff
c001222c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012231:	77 14                	ja     c0012247 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012233:	0f 20 d8             	mov    eax,cr3
c0012236:	0f 22 d8             	mov    cr3,eax
c0012239:	b0 01                	mov    al,0x1
c001223b:	eb 02                	jmp    c001223f <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001223d:	31 c0                	xor    eax,eax
c001223f:	83 c4 0c             	add    esp,0xc
c0012242:	5b                   	pop    ebx
c0012243:	5e                   	pop    esi
c0012244:	5f                   	pop    edi
c0012245:	5d                   	pop    ebp
c0012246:	c3                   	ret    
c0012247:	83 ec 0c             	sub    esp,0xc
c001224a:	68 ad a2 02 c0       	push   0xc002a2ad
c001224f:	e8 d1 02 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	eb da                	jmp    c0012233 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012259:	90                   	nop

c001225a <VAS::scanForEviction()>:
c001225a:	57                   	push   edi
c001225b:	56                   	push   esi
c001225c:	53                   	push   ebx
c001225d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012261:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012264:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001226a:	75 0e                	jne    c001227a <VAS::scanForEviction()+0x20>
c001226c:	89 da                	mov    edx,ebx
c001226e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012271:	c1 ea 16             	shr    edx,0x16
c0012274:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012278:	74 48                	je     c00122c2 <VAS::scanForEviction()+0x68>
c001227a:	53                   	push   ebx
c001227b:	56                   	push   esi
c001227c:	e8 47 f3 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012281:	5a                   	pop    edx
c0012282:	8b 38                	mov    edi,DWORD PTR [eax]
c0012284:	59                   	pop    ecx
c0012285:	89 fa                	mov    edx,edi
c0012287:	81 e2 00 0c 00 00    	and    edx,0xc00
c001228d:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012293:	74 3d                	je     c00122d2 <VAS::scanForEviction()+0x78>
c0012295:	81 c3 00 10 00 00    	add    ebx,0x1000
c001229b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00122a1:	76 2a                	jbe    c00122cd <VAS::scanForEviction()+0x73>
c00122a3:	31 db                	xor    ebx,ebx
c00122a5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00122ac:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122b2:	75 c6                	jne    c001227a <VAS::scanForEviction()+0x20>
c00122b4:	89 da                	mov    edx,ebx
c00122b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122b9:	c1 ea 16             	shr    edx,0x16
c00122bc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122c0:	75 b8                	jne    c001227a <VAS::scanForEviction()+0x20>
c00122c2:	81 c3 00 00 40 00    	add    ebx,0x400000
c00122c8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122cb:	eb 97                	jmp    c0012264 <VAS::scanForEviction()+0xa>
c00122cd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122d0:	eb 92                	jmp    c0012264 <VAS::scanForEviction()+0xa>
c00122d2:	f7 c7 01 00 00 00    	test   edi,0x1
c00122d8:	74 bb                	je     c0012295 <VAS::scanForEviction()+0x3b>
c00122da:	f7 c7 20 00 00 00    	test   edi,0x20
c00122e0:	74 0a                	je     c00122ec <VAS::scanForEviction()+0x92>
c00122e2:	83 e7 df             	and    edi,0xffffffdf
c00122e5:	89 38                	mov    DWORD PTR [eax],edi
c00122e7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122ea:	eb a9                	jmp    c0012295 <VAS::scanForEviction()+0x3b>
c00122ec:	83 ec 08             	sub    esp,0x8
c00122ef:	53                   	push   ebx
c00122f0:	56                   	push   esi
c00122f1:	e8 92 fd ff ff       	call   c0012088 <VAS::evict(unsigned long)>
c00122f6:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	89 f8                	mov    eax,edi
c0012302:	5b                   	pop    ebx
c0012303:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012308:	5e                   	pop    esi
c0012309:	5f                   	pop    edi
c001230a:	c3                   	ret    

c001230b <mapVASFirstTime>:
c001230b:	55                   	push   ebp
c001230c:	57                   	push   edi
c001230d:	56                   	push   esi
c001230e:	53                   	push   ebx
c001230f:	83 ec 0c             	sub    esp,0xc
c0012312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012317:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001231a:	4a                   	dec    edx
c001231b:	0f 84 8e 00 00 00    	je     c00123af <mapVASFirstTime+0xa4>
c0012321:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012324:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012327:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001232c:	c1 e5 15             	shl    ebp,0x15
c001232f:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012334:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001233a:	29 eb                	sub    ebx,ebp
c001233c:	29 ee                	sub    esi,ebp
c001233e:	e8 fd d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	68 03 04 00 00       	push   0x403
c001234b:	6a 01                	push   0x1
c001234d:	53                   	push   ebx
c001234e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012354:	50                   	push   eax
c0012355:	57                   	push   edi
c0012356:	e8 f9 f8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001235b:	83 c4 20             	add    esp,0x20
c001235e:	39 f3                	cmp    ebx,esi
c0012360:	75 dc                	jne    c001233e <mapVASFirstTime+0x33>
c0012362:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012367:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001236c:	29 ee                	sub    esi,ebp
c001236e:	29 e8                	sub    eax,ebp
c0012370:	89 c5                	mov    ebp,eax
c0012372:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012376:	19 db                	sbb    ebx,ebx
c0012378:	e8 c3 d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c001237d:	83 e3 04             	and    ebx,0x4
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	81 c3 03 04 00 00    	add    ebx,0x403
c0012389:	53                   	push   ebx
c001238a:	6a 01                	push   0x1
c001238c:	56                   	push   esi
c001238d:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012393:	50                   	push   eax
c0012394:	57                   	push   edi
c0012395:	e8 ba f8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001239a:	83 c4 20             	add    esp,0x20
c001239d:	39 f5                	cmp    ebp,esi
c001239f:	75 d1                	jne    c0012372 <mapVASFirstTime+0x67>
c00123a1:	0f 20 d8             	mov    eax,cr3
c00123a4:	0f 22 d8             	mov    cr3,eax
c00123a7:	83 c4 0c             	add    esp,0xc
c00123aa:	5b                   	pop    ebx
c00123ab:	5e                   	pop    esi
c00123ac:	5f                   	pop    edi
c00123ad:	5d                   	pop    ebp
c00123ae:	c3                   	ret    
c00123af:	83 ec 0c             	sub    esp,0xc
c00123b2:	68 bd a2 02 c0       	push   0xc002a2bd
c00123b7:	e8 69 01 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00123bc:	83 c4 10             	add    esp,0x10
c00123bf:	83 c4 0c             	add    esp,0xc
c00123c2:	5b                   	pop    ebx
c00123c3:	5e                   	pop    esi
c00123c4:	5f                   	pop    edi
c00123c5:	5d                   	pop    ebp
c00123c6:	c3                   	ret    

c00123c7 <__cxa_atexit>:
c00123c7:	31 c0                	xor    eax,eax
c00123c9:	c3                   	ret    

c00123ca <__cxa_finalize>:
c00123ca:	c3                   	ret    

c00123cb <__stack_chk_fail>:
c00123cb:	55                   	push   ebp
c00123cc:	89 e5                	mov    ebp,esp
c00123ce:	83 ec 14             	sub    esp,0x14
c00123d1:	68 d6 a2 02 c0       	push   0xc002a2d6
c00123d6:	e8 4a 01 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00123db:	58                   	pop    eax
c00123dc:	5a                   	pop    edx
c00123dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123e0:	68 26 a3 02 c0       	push   0xc002a326
c00123e5:	e8 3b 01 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00123ea:	59                   	pop    ecx
c00123eb:	58                   	pop    eax
c00123ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123f2:	68 26 a3 02 c0       	push   0xc002a326
c00123f7:	e8 29 01 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00123fc:	5a                   	pop    edx
c00123fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012400:	59                   	pop    ecx
c0012401:	8b 00                	mov    eax,DWORD PTR [eax]
c0012403:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012406:	68 26 a3 02 c0       	push   0xc002a326
c001240b:	e8 15 01 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0012410:	5a                   	pop    edx
c0012411:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012414:	59                   	pop    ecx
c0012415:	8b 00                	mov    eax,DWORD PTR [eax]
c0012417:	8b 00                	mov    eax,DWORD PTR [eax]
c0012419:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001241c:	68 26 a3 02 c0       	push   0xc002a326
c0012421:	e8 ff 00 00 00       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0012426:	c7 04 24 2e a3 02 c0 	mov    DWORD PTR [esp],0xc002a32e
c001242d:	e8 2d 78 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0012432:	83 c4 10             	add    esp,0x10
c0012435:	c9                   	leave  
c0012436:	c3                   	ret    

c0012437 <__cxa_pure_virtual>:
c0012437:	83 ec 18             	sub    esp,0x18
c001243a:	68 46 a3 02 c0       	push   0xc002a346
c001243f:	e8 1b 78 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0012444:	83 c4 1c             	add    esp,0x1c
c0012447:	c3                   	ret    

c0012448 <operator new[](unsigned long)>:
c0012448:	e9 4f d1 ff ff       	jmp    c000f59c <malloc>

c001244d <operator delete(void*, unsigned long)>:
c001244d:	e9 6a d1 ff ff       	jmp    c000f5bc <rfree>

c0012452 <operator delete[](void*)>:
c0012452:	e9 65 d1 ff ff       	jmp    c000f5bc <rfree>

c0012457 <operator delete[](void*, unsigned long)>:
c0012457:	e9 60 d1 ff ff       	jmp    c000f5bc <rfree>

c001245c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001245c:	55                   	push   ebp
c001245d:	b9 11 00 00 00       	mov    ecx,0x11
c0012462:	57                   	push   edi
c0012463:	56                   	push   esi
c0012464:	be de 9e 02 c0       	mov    esi,0xc0029ede
c0012469:	53                   	push   ebx
c001246a:	83 ec 20             	sub    esp,0x20
c001246d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012471:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012475:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012479:	fc                   	cld    
c001247a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001247c:	89 ee                	mov    esi,ebp
c001247e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012482:	eb 02                	jmp    c0012486 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012484:	89 c6                	mov    esi,eax
c0012486:	31 d2                	xor    edx,edx
c0012488:	41                   	inc    ecx
c0012489:	89 f0                	mov    eax,esi
c001248b:	f7 f3                	div    ebx
c001248d:	39 de                	cmp    esi,ebx
c001248f:	73 f3                	jae    c0012484 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012491:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012494:	eb 02                	jmp    c0012498 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012496:	89 c5                	mov    ebp,eax
c0012498:	31 d2                	xor    edx,edx
c001249a:	49                   	dec    ecx
c001249b:	89 e8                	mov    eax,ebp
c001249d:	f7 f3                	div    ebx
c001249f:	39 dd                	cmp    ebp,ebx
c00124a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00124a5:	88 11                	mov    BYTE PTR [ecx],dl
c00124a7:	73 ed                	jae    c0012496 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00124a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00124ad:	83 c4 20             	add    esp,0x20
c00124b0:	5b                   	pop    ebx
c00124b1:	5e                   	pop    esi
c00124b2:	5f                   	pop    edi
c00124b3:	5d                   	pop    ebp
c00124b4:	c3                   	ret    

c00124b5 <Dbg::logc(char)>:
c00124b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00124b9:	ba fd 03 00 00       	mov    edx,0x3fd
c00124be:	ec                   	in     al,dx
c00124bf:	a8 20                	test   al,0x20
c00124c1:	74 fb                	je     c00124be <Dbg::logc(char)+0x9>
c00124c3:	ba f8 03 00 00       	mov    edx,0x3f8
c00124c8:	88 c8                	mov    al,cl
c00124ca:	ee                   	out    dx,al
c00124cb:	c3                   	ret    

c00124cc <Dbg::logs(char*)>:
c00124cc:	53                   	push   ebx
c00124cd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00124d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124d4:	84 c0                	test   al,al
c00124d6:	74 0f                	je     c00124e7 <Dbg::logs(char*)+0x1b>
c00124d8:	50                   	push   eax
c00124d9:	43                   	inc    ebx
c00124da:	e8 d6 ff ff ff       	call   c00124b5 <Dbg::logc(char)>
c00124df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124e2:	5a                   	pop    edx
c00124e3:	84 c0                	test   al,al
c00124e5:	75 f1                	jne    c00124d8 <Dbg::logs(char*)+0xc>
c00124e7:	5b                   	pop    ebx
c00124e8:	c3                   	ret    

c00124e9 <Dbg::logWriteInt(unsigned int)>:
c00124e9:	83 ec 10             	sub    esp,0x10
c00124ec:	6a 0a                	push   0xa
c00124ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00124f2:	50                   	push   eax
c00124f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f7:	e8 60 ff ff ff       	call   c001245c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00124fc:	50                   	push   eax
c00124fd:	e8 ca ff ff ff       	call   c00124cc <Dbg::logs(char*)>
c0012502:	83 c4 20             	add    esp,0x20
c0012505:	c3                   	ret    

c0012506 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012506:	83 ec 10             	sub    esp,0x10
c0012509:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001250d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012511:	50                   	push   eax
c0012512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012516:	e8 41 ff ff ff       	call   c001245c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001251b:	50                   	push   eax
c001251c:	e8 ab ff ff ff       	call   c00124cc <Dbg::logs(char*)>
c0012521:	83 c4 20             	add    esp,0x20
c0012524:	c3                   	ret    

c0012525 <Dbg::kprintf(char const*, ...)>:
c0012525:	55                   	push   ebp
c0012526:	57                   	push   edi
c0012527:	56                   	push   esi
c0012528:	53                   	push   ebx
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012530:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012534:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012538:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001253b:	84 c0                	test   al,al
c001253d:	74 4a                	je     c0012589 <Dbg::kprintf(char const*, ...)+0x64>
c001253f:	31 db                	xor    ebx,ebx
c0012541:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012544:	3c 25                	cmp    al,0x25
c0012546:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012549:	0f 85 e4 00 00 00    	jne    c0012633 <Dbg::kprintf(char const*, ...)+0x10e>
c001254f:	83 c3 02             	add    ebx,0x2
c0012552:	8a 07                	mov    al,BYTE PTR [edi]
c0012554:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012557:	83 e8 25             	sub    eax,0x25
c001255a:	3c 53                	cmp    al,0x53
c001255c:	0f 87 ba 00 00 00    	ja     c001261c <Dbg::kprintf(char const*, ...)+0xf7>
c0012562:	0f b6 c0             	movzx  eax,al
c0012565:	ff 24 85 5c a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5ca4]
c001256c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012570:	89 c8                	mov    eax,ecx
c0012572:	83 c1 04             	add    ecx,0x4
c0012575:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012579:	ff 30                	push   DWORD PTR [eax]
c001257b:	e8 69 ff ff ff       	call   c00124e9 <Dbg::logWriteInt(unsigned int)>
c0012580:	5f                   	pop    edi
c0012581:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012585:	84 c0                	test   al,al
c0012587:	75 b8                	jne    c0012541 <Dbg::kprintf(char const*, ...)+0x1c>
c0012589:	83 c4 0c             	add    esp,0xc
c001258c:	5b                   	pop    ebx
c001258d:	5e                   	pop    esi
c001258e:	5f                   	pop    edi
c001258f:	5d                   	pop    ebp
c0012590:	c3                   	ret    
c0012591:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012595:	89 c8                	mov    eax,ecx
c0012597:	83 c1 04             	add    ecx,0x4
c001259a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001259e:	ff 30                	push   DWORD PTR [eax]
c00125a0:	e8 27 ff ff ff       	call   c00124cc <Dbg::logs(char*)>
c00125a5:	58                   	pop    eax
c00125a6:	eb d9                	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c00125a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125ac:	89 d0                	mov    eax,edx
c00125ae:	83 c2 04             	add    edx,0x4
c00125b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125b5:	ff 30                	push   DWORD PTR [eax]
c00125b7:	e8 2d ff ff ff       	call   c00124e9 <Dbg::logWriteInt(unsigned int)>
c00125bc:	58                   	pop    eax
c00125bd:	eb c2                	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c00125bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125c3:	89 d0                	mov    eax,edx
c00125c5:	83 c2 04             	add    edx,0x4
c00125c8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00125cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125cf:	50                   	push   eax
c00125d0:	e8 e0 fe ff ff       	call   c00124b5 <Dbg::logc(char)>
c00125d5:	58                   	pop    eax
c00125d6:	eb a9                	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c00125d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125dc:	89 c8                	mov    eax,ecx
c00125de:	83 c1 04             	add    ecx,0x4
c00125e1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125e5:	6a 10                	push   0x10
c00125e7:	ff 30                	push   DWORD PTR [eax]
c00125e9:	e8 18 ff ff ff       	call   c0012506 <Dbg::logWriteIntBase(unsigned int, int)>
c00125ee:	59                   	pop    ecx
c00125ef:	5f                   	pop    edi
c00125f0:	eb 8f                	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c00125f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125f6:	89 d0                	mov    eax,edx
c00125f8:	83 c2 08             	add    edx,0x8
c00125fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125ff:	6a 10                	push   0x10
c0012601:	ff 30                	push   DWORD PTR [eax]
c0012603:	e8 fe fe ff ff       	call   c0012506 <Dbg::logWriteIntBase(unsigned int, int)>
c0012608:	58                   	pop    eax
c0012609:	5a                   	pop    edx
c001260a:	e9 72 ff ff ff       	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c001260f:	6a 25                	push   0x25
c0012611:	e8 9f fe ff ff       	call   c00124b5 <Dbg::logc(char)>
c0012616:	58                   	pop    eax
c0012617:	e9 65 ff ff ff       	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c001261c:	6a 25                	push   0x25
c001261e:	e8 92 fe ff ff       	call   c00124b5 <Dbg::logc(char)>
c0012623:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012626:	50                   	push   eax
c0012627:	e8 89 fe ff ff       	call   c00124b5 <Dbg::logc(char)>
c001262c:	5a                   	pop    edx
c001262d:	59                   	pop    ecx
c001262e:	e9 4e ff ff ff       	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c0012633:	50                   	push   eax
c0012634:	89 eb                	mov    ebx,ebp
c0012636:	e8 7a fe ff ff       	call   c00124b5 <Dbg::logc(char)>
c001263b:	89 fd                	mov    ebp,edi
c001263d:	58                   	pop    eax
c001263e:	e9 3e ff ff ff       	jmp    c0012581 <Dbg::kprintf(char const*, ...)+0x5c>
c0012643:	90                   	nop

c0012644 <File::read(unsigned long long, void*, int*)>:
c0012644:	53                   	push   ebx
c0012645:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001264d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012654:	3c 19                	cmp    al,0x19
c0012656:	77 35                	ja     c001268d <File::read(unsigned long long, void*, int*)+0x49>
c0012658:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c001265f:	85 c0                	test   eax,eax
c0012661:	74 2a                	je     c001268d <File::read(unsigned long long, void*, int*)+0x49>
c0012663:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012669:	85 c0                	test   eax,eax
c001266b:	74 20                	je     c001268d <File::read(unsigned long long, void*, int*)+0x49>
c001266d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012671:	74 21                	je     c0012694 <File::read(unsigned long long, void*, int*)+0x50>
c0012673:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012675:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012679:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001267f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012683:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012687:	5b                   	pop    ebx
c0012688:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001268b:	ff e0                	jmp    eax
c001268d:	b8 0b 00 00 00       	mov    eax,0xb
c0012692:	eb 05                	jmp    c0012699 <File::read(unsigned long long, void*, int*)+0x55>
c0012694:	b8 05 00 00 00       	mov    eax,0x5
c0012699:	5b                   	pop    ebx
c001269a:	c3                   	ret    
c001269b:	90                   	nop

c001269c <File::write(unsigned long long, void*, int*)>:
c001269c:	53                   	push   ebx
c001269d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126ac:	3c 19                	cmp    al,0x19
c00126ae:	77 35                	ja     c00126e5 <File::write(unsigned long long, void*, int*)+0x49>
c00126b0:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00126b7:	85 c0                	test   eax,eax
c00126b9:	74 2a                	je     c00126e5 <File::write(unsigned long long, void*, int*)+0x49>
c00126bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126c1:	85 c0                	test   eax,eax
c00126c3:	74 20                	je     c00126e5 <File::write(unsigned long long, void*, int*)+0x49>
c00126c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126c9:	74 21                	je     c00126ec <File::write(unsigned long long, void*, int*)+0x50>
c00126cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00126d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126df:	5b                   	pop    ebx
c00126e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00126e3:	ff e0                	jmp    eax
c00126e5:	b8 0b 00 00 00       	mov    eax,0xb
c00126ea:	eb 05                	jmp    c00126f1 <File::write(unsigned long long, void*, int*)+0x55>
c00126ec:	b8 05 00 00 00       	mov    eax,0x5
c00126f1:	5b                   	pop    ebx
c00126f2:	c3                   	ret    
c00126f3:	90                   	nop

c00126f4 <Directory::read(unsigned long long, void*, int*)>:
c00126f4:	53                   	push   ebx
c00126f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012704:	3c 19                	cmp    al,0x19
c0012706:	77 35                	ja     c001273d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012708:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c001270f:	85 c0                	test   eax,eax
c0012711:	74 2a                	je     c001273d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012713:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012719:	85 c0                	test   eax,eax
c001271b:	74 20                	je     c001273d <Directory::read(unsigned long long, void*, int*)+0x49>
c001271d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012721:	74 21                	je     c0012744 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012723:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012725:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012729:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001272f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012733:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012737:	5b                   	pop    ebx
c0012738:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001273b:	ff e0                	jmp    eax
c001273d:	b8 0b 00 00 00       	mov    eax,0xb
c0012742:	eb 05                	jmp    c0012749 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012744:	b8 05 00 00 00       	mov    eax,0x5
c0012749:	5b                   	pop    ebx
c001274a:	c3                   	ret    
c001274b:	90                   	nop

c001274c <Directory::write(unsigned long long, void*, int*)>:
c001274c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012750:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012757:	b8 0b 00 00 00       	mov    eax,0xb
c001275c:	80 fa 19             	cmp    dl,0x19
c001275f:	77 18                	ja     c0012779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012761:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012768:	85 d2                	test   edx,edx
c001276a:	74 0d                	je     c0012779 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001276c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012773:	19 c0                	sbb    eax,eax
c0012775:	83 e0 0a             	and    eax,0xa
c0012778:	40                   	inc    eax
c0012779:	c3                   	ret    

c001277a <File::isAtty()>:
c001277a:	31 c0                	xor    eax,eax
c001277c:	c3                   	ret    
c001277d:	90                   	nop

c001277e <Directory::isAtty()>:
c001277e:	31 c0                	xor    eax,eax
c0012780:	c3                   	ret    
c0012781:	90                   	nop

c0012782 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012782:	b8 0a 00 00 00       	mov    eax,0xa
c0012787:	c3                   	ret    

c0012788 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012788:	b8 0a 00 00 00       	mov    eax,0xa
c001278d:	c3                   	ret    

c001278e <Filesystem::getFileFirstSector(char const*)>:
c001278e:	31 c0                	xor    eax,eax
c0012790:	31 d2                	xor    edx,edx
c0012792:	c3                   	ret    
c0012793:	90                   	nop

c0012794 <File::~File()>:
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c001279c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a0:	89 10                	mov    DWORD PTR [eax],edx
c00127a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	50                   	push   eax
c00127aa:	e8 91 e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	90                   	nop
c00127b3:	83 c4 0c             	add    esp,0xc
c00127b6:	c3                   	ret    
c00127b7:	90                   	nop

c00127b8 <File::~File()>:
c00127b8:	83 ec 0c             	sub    esp,0xc
c00127bb:	83 ec 0c             	sub    esp,0xc
c00127be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127c2:	e8 cd ff ff ff       	call   c0012794 <File::~File()>
c00127c7:	83 c4 10             	add    esp,0x10
c00127ca:	83 ec 08             	sub    esp,0x8
c00127cd:	68 14 01 00 00       	push   0x114
c00127d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127d6:	e8 72 fc ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c00127db:	83 c4 10             	add    esp,0x10
c00127de:	83 c4 0c             	add    esp,0xc
c00127e1:	c3                   	ret    

c00127e2 <Directory::~Directory()>:
c00127e2:	83 ec 0c             	sub    esp,0xc
c00127e5:	ba 38 a5 02 c0       	mov    edx,0xc002a538
c00127ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ee:	89 10                	mov    DWORD PTR [eax],edx
c00127f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f4:	83 ec 0c             	sub    esp,0xc
c00127f7:	50                   	push   eax
c00127f8:	e8 43 e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c00127fd:	83 c4 10             	add    esp,0x10
c0012800:	90                   	nop
c0012801:	83 c4 0c             	add    esp,0xc
c0012804:	c3                   	ret    
c0012805:	90                   	nop

c0012806 <Directory::~Directory()>:
c0012806:	83 ec 0c             	sub    esp,0xc
c0012809:	83 ec 0c             	sub    esp,0xc
c001280c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012810:	e8 cd ff ff ff       	call   c00127e2 <Directory::~Directory()>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	83 ec 08             	sub    esp,0x8
c001281b:	68 14 01 00 00       	push   0x114
c0012820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012824:	e8 24 fc ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0012829:	83 c4 10             	add    esp,0x10
c001282c:	83 c4 0c             	add    esp,0xc
c001282f:	c3                   	ret    

c0012830 <Filesystem::Filesystem()>:
c0012830:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c0012835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012839:	89 10                	mov    DWORD PTR [eax],edx
c001283b:	8b 15 14 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d714
c0012841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012845:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001284c:	a3 14 d7 02 c0       	mov    ds:0xc002d714,eax
c0012851:	90                   	nop
c0012852:	c3                   	ret    
c0012853:	90                   	nop

c0012854 <Filesystem::~Filesystem()>:
c0012854:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c0012859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285d:	89 10                	mov    DWORD PTR [eax],edx
c001285f:	90                   	nop
c0012860:	c3                   	ret    
c0012861:	90                   	nop

c0012862 <Filesystem::~Filesystem()>:
c0012862:	83 ec 0c             	sub    esp,0xc
c0012865:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012869:	e8 e6 ff ff ff       	call   c0012854 <Filesystem::~Filesystem()>
c001286e:	83 c4 04             	add    esp,0x4
c0012871:	83 ec 08             	sub    esp,0x8
c0012874:	6a 08                	push   0x8
c0012876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001287a:	e8 ce fb ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	83 c4 0c             	add    esp,0xc
c0012885:	c3                   	ret    

c0012886 <Fs::getcwd(Process*, char*, int)>:
c0012886:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001288a:	31 c0                	xor    eax,eax
c001288c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001288f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012893:	7d 15                	jge    c00128aa <Fs::getcwd(Process*, char*, int)+0x24>
c0012895:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012899:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00128a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00128a3:	84 c9                	test   cl,cl
c00128a5:	74 06                	je     c00128ad <Fs::getcwd(Process*, char*, int)+0x27>
c00128a7:	40                   	inc    eax
c00128a8:	eb e2                	jmp    c001288c <Fs::getcwd(Process*, char*, int)+0x6>
c00128aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00128ad:	31 c0                	xor    eax,eax
c00128af:	c3                   	ret    

c00128b0 <Fs::initVFS()>:
c00128b0:	83 ec 18             	sub    esp,0x18
c00128b3:	6a 08                	push   0x8
c00128b5:	e8 e2 cc ff ff       	call   c000f59c <malloc>
c00128ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00128bd:	e8 9a de 00 00       	call   c002075c <FAT::FAT()>
c00128c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00128c9:	e8 ce cc ff ff       	call   c000f59c <malloc>
c00128ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00128d1:	e8 92 f0 00 00       	call   c0021968 <ISO9660::ISO9660()>
c00128d6:	83 c4 1c             	add    esp,0x1c
c00128d9:	c3                   	ret    

c00128da <Fs::standardiseFiles(char*, char const*, char const*)>:
c00128da:	55                   	push   ebp
c00128db:	57                   	push   edi
c00128dc:	56                   	push   esi
c00128dd:	53                   	push   ebx
c00128de:	81 ec 10 04 00 00    	sub    esp,0x410
c00128e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00128eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00128f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00128f9:	68 00 04 00 00       	push   0x400
c00128fe:	6a 00                	push   0x0
c0012900:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012904:	56                   	push   esi
c0012905:	e8 46 de fe ff       	call   c0000750 <memset>
c001290a:	83 c4 10             	add    esp,0x10
c001290d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012911:	75 0b                	jne    c001291e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012913:	50                   	push   eax
c0012914:	50                   	push   eax
c0012915:	57                   	push   edi
c0012916:	56                   	push   esi
c0012917:	e8 f0 de fe ff       	call   c000080c <strcpy>
c001291c:	eb 41                	jmp    c001295f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001291e:	8a 07                	mov    al,BYTE PTR [edi]
c0012920:	3c 5c                	cmp    al,0x5c
c0012922:	74 04                	je     c0012928 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012924:	3c 2f                	cmp    al,0x2f
c0012926:	75 18                	jne    c0012940 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012928:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001292b:	3c 60                	cmp    al,0x60
c001292d:	7e 03                	jle    c0012932 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001292f:	83 e8 20             	sub    eax,0x20
c0012932:	88 04 24             	mov    BYTE PTR [esp],al
c0012935:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001293c:	50                   	push   eax
c001293d:	50                   	push   eax
c001293e:	eb 18                	jmp    c0012958 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012940:	50                   	push   eax
c0012941:	50                   	push   eax
c0012942:	55                   	push   ebp
c0012943:	56                   	push   esi
c0012944:	e8 c3 de fe ff       	call   c000080c <strcpy>
c0012949:	5a                   	pop    edx
c001294a:	59                   	pop    ecx
c001294b:	68 a2 b7 02 c0       	push   0xc002b7a2
c0012950:	56                   	push   esi
c0012951:	e8 f6 df fe ff       	call   c000094c <strcat>
c0012956:	5d                   	pop    ebp
c0012957:	58                   	pop    eax
c0012958:	57                   	push   edi
c0012959:	56                   	push   esi
c001295a:	e8 ed df fe ff       	call   c000094c <strcat>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012965:	3c 60                	cmp    al,0x60
c0012967:	7e 03                	jle    c001296c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012969:	83 e8 20             	sub    eax,0x20
c001296c:	88 04 24             	mov    BYTE PTR [esp],al
c001296f:	88 03                	mov    BYTE PTR [ebx],al
c0012971:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012978:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001297e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012982:	bf 03 00 00 00       	mov    edi,0x3
c0012987:	b8 03 00 00 00       	mov    eax,0x3
c001298c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001298f:	84 d2                	test   dl,dl
c0012991:	0f 84 91 00 00 00    	je     c0012a28 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012997:	8d 4f 01             	lea    ecx,[edi+0x1]
c001299a:	80 fa 5c             	cmp    dl,0x5c
c001299d:	74 05                	je     c00129a4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001299f:	80 fa 2f             	cmp    dl,0x2f
c00129a2:	75 12                	jne    c00129b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129a4:	89 c5                	mov    ebp,eax
c00129a6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00129ab:	74 09                	je     c00129b6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129ad:	40                   	inc    eax
c00129ae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00129b2:	89 cf                	mov    edi,ecx
c00129b4:	eb d6                	jmp    c001298c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00129b6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00129bb:	75 5b                	jne    c0012a18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129bd:	80 fa 2e             	cmp    dl,0x2e
c00129c0:	75 56                	jne    c0012a18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129c2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00129c6:	74 19                	je     c00129e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00129c8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129cd:	74 53                	je     c0012a22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129cf:	89 f9                	mov    ecx,edi
c00129d1:	41                   	inc    ecx
c00129d2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129d5:	80 fa 2f             	cmp    dl,0x2f
c00129d8:	74 f7                	je     c00129d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129da:	80 fa 5c             	cmp    dl,0x5c
c00129dd:	74 f2                	je     c00129d1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129df:	eb d1                	jmp    c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129e1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129e6:	74 3a                	je     c0012a22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129e8:	83 f8 03             	cmp    eax,0x3
c00129eb:	74 c5                	je     c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129ed:	41                   	inc    ecx
c00129ee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129f1:	80 fa 2f             	cmp    dl,0x2f
c00129f4:	74 f7                	je     c00129ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129f6:	80 fa 5c             	cmp    dl,0x5c
c00129f9:	74 f2                	je     c00129ed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129fb:	48                   	dec    eax
c00129fc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a00:	75 06                	jne    c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a06:	eb f3                	jmp    c00129fb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012a08:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a0c:	74 07                	je     c0012a15 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012a0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a12:	48                   	dec    eax
c0012a13:	eb f3                	jmp    c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a15:	40                   	inc    eax
c0012a16:	eb 9a                	jmp    c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a18:	80 fa 2f             	cmp    dl,0x2f
c0012a1b:	74 95                	je     c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a1d:	80 fa 5c             	cmp    dl,0x5c
c0012a20:	74 90                	je     c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a22:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012a25:	40                   	inc    eax
c0012a26:	eb 8a                	jmp    c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	53                   	push   ebx
c0012a30:	e8 37 dd fe ff       	call   c000076c <strlen>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012a3d:	75 26                	jne    c0012a65 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012a3f:	83 ec 0c             	sub    esp,0xc
c0012a42:	53                   	push   ebx
c0012a43:	e8 24 dd fe ff       	call   c000076c <strlen>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012a50:	74 26                	je     c0012a78 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	53                   	push   ebx
c0012a56:	e8 11 dd fe ff       	call   c000076c <strlen>
c0012a5b:	83 c4 10             	add    esp,0x10
c0012a5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012a63:	eb c7                	jmp    c0012a2c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012a65:	83 ec 0c             	sub    esp,0xc
c0012a68:	53                   	push   ebx
c0012a69:	e8 fe dc fe ff       	call   c000076c <strlen>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a76:	74 c7                	je     c0012a3f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012a78:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012a7e:	5b                   	pop    ebx
c0012a7f:	5e                   	pop    esi
c0012a80:	5f                   	pop    edi
c0012a81:	5d                   	pop    ebp
c0012a82:	c3                   	ret    
c0012a83:	90                   	nop

c0012a84 <File::File(char const*, Process*)>:
c0012a84:	83 ec 0c             	sub    esp,0xc
c0012a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8b:	83 ec 08             	sub    esp,0x8
c0012a8e:	6a 00                	push   0x0
c0012a90:	50                   	push   eax
c0012a91:	e8 c8 e2 ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012a96:	83 c4 10             	add    esp,0x10
c0012a99:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c0012a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aa2:	89 10                	mov    DWORD PTR [eax],edx
c0012aa4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012aa8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab2:	83 c0 0d             	add    eax,0xd
c0012ab5:	83 ec 04             	sub    esp,0x4
c0012ab8:	52                   	push   edx
c0012ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012abd:	50                   	push   eax
c0012abe:	e8 17 fe ff ff       	call   c00128da <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ac3:	83 c4 10             	add    esp,0x10
c0012ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012acd:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ade:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ae2:	90                   	nop
c0012ae3:	83 c4 0c             	add    esp,0xc
c0012ae6:	c3                   	ret    
c0012ae7:	90                   	nop

c0012ae8 <File::open(FileOpenMode)>:
c0012ae8:	53                   	push   ebx
c0012ae9:	b8 0b 00 00 00       	mov    eax,0xb
c0012aee:	83 ec 08             	sub    esp,0x8
c0012af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012af5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012afc:	80 fa 19             	cmp    dl,0x19
c0012aff:	77 40                	ja     c0012b41 <File::open(FileOpenMode)+0x59>
c0012b01:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012b08:	85 d2                	test   edx,edx
c0012b0a:	74 35                	je     c0012b41 <File::open(FileOpenMode)+0x59>
c0012b0c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012b12:	85 d2                	test   edx,edx
c0012b14:	74 2b                	je     c0012b41 <File::open(FileOpenMode)+0x59>
c0012b16:	b8 06 00 00 00       	mov    eax,0x6
c0012b1b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b1f:	75 20                	jne    c0012b41 <File::open(FileOpenMode)+0x59>
c0012b21:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b23:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b2d:	51                   	push   ecx
c0012b2e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b31:	51                   	push   ecx
c0012b32:	52                   	push   edx
c0012b33:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	85 c0                	test   eax,eax
c0012b3b:	75 04                	jne    c0012b41 <File::open(FileOpenMode)+0x59>
c0012b3d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b41:	83 c4 08             	add    esp,0x8
c0012b44:	5b                   	pop    ebx
c0012b45:	c3                   	ret    

c0012b46 <File::close()>:
c0012b46:	53                   	push   ebx
c0012b47:	b8 0b 00 00 00       	mov    eax,0xb
c0012b4c:	83 ec 08             	sub    esp,0x8
c0012b4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b53:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b5a:	80 fa 19             	cmp    dl,0x19
c0012b5d:	77 41                	ja     c0012ba0 <File::close()+0x5a>
c0012b5f:	8b 1c 95 a0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2460]
c0012b66:	85 db                	test   ebx,ebx
c0012b68:	74 36                	je     c0012ba0 <File::close()+0x5a>
c0012b6a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b71:	74 2d                	je     c0012ba0 <File::close()+0x5a>
c0012b73:	b8 05 00 00 00       	mov    eax,0x5
c0012b78:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b7c:	74 22                	je     c0012ba0 <File::close()+0x5a>
c0012b7e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b82:	8b 04 95 a0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2460]
c0012b89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b8f:	53                   	push   ebx
c0012b90:	53                   	push   ebx
c0012b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b93:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012b99:	50                   	push   eax
c0012b9a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012b9d:	83 c4 10             	add    esp,0x10
c0012ba0:	83 c4 08             	add    esp,0x8
c0012ba3:	5b                   	pop    ebx
c0012ba4:	c3                   	ret    
c0012ba5:	90                   	nop

c0012ba6 <File::seek(unsigned long long)>:
c0012ba6:	56                   	push   esi
c0012ba7:	53                   	push   ebx
c0012ba8:	b8 0b 00 00 00       	mov    eax,0xb
c0012bad:	51                   	push   ecx
c0012bae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bb2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012bb6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012bbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bc1:	80 fa 19             	cmp    dl,0x19
c0012bc4:	77 31                	ja     c0012bf7 <File::seek(unsigned long long)+0x51>
c0012bc6:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012bcd:	85 d2                	test   edx,edx
c0012bcf:	74 26                	je     c0012bf7 <File::seek(unsigned long long)+0x51>
c0012bd1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bd7:	85 d2                	test   edx,edx
c0012bd9:	74 1c                	je     c0012bf7 <File::seek(unsigned long long)+0x51>
c0012bdb:	b8 05 00 00 00       	mov    eax,0x5
c0012be0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012be4:	74 11                	je     c0012bf7 <File::seek(unsigned long long)+0x51>
c0012be6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012be8:	53                   	push   ebx
c0012be9:	51                   	push   ecx
c0012bea:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012bf0:	52                   	push   edx
c0012bf1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	5a                   	pop    edx
c0012bf8:	5b                   	pop    ebx
c0012bf9:	5e                   	pop    esi
c0012bfa:	c3                   	ret    
c0012bfb:	90                   	nop

c0012bfc <File::tell(unsigned long long*)>:
c0012bfc:	83 ec 0c             	sub    esp,0xc
c0012bff:	b8 0b 00 00 00       	mov    eax,0xb
c0012c04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c08:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c0f:	80 fa 19             	cmp    dl,0x19
c0012c12:	77 34                	ja     c0012c48 <File::tell(unsigned long long*)+0x4c>
c0012c14:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012c1b:	85 d2                	test   edx,edx
c0012c1d:	74 29                	je     c0012c48 <File::tell(unsigned long long*)+0x4c>
c0012c1f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c25:	85 d2                	test   edx,edx
c0012c27:	74 1f                	je     c0012c48 <File::tell(unsigned long long*)+0x4c>
c0012c29:	b8 05 00 00 00       	mov    eax,0x5
c0012c2e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c32:	74 14                	je     c0012c48 <File::tell(unsigned long long*)+0x4c>
c0012c34:	50                   	push   eax
c0012c35:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c3b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c41:	52                   	push   edx
c0012c42:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	83 c4 0c             	add    esp,0xc
c0012c4b:	c3                   	ret    

c0012c4c <File::rewind()>:
c0012c4c:	83 ec 10             	sub    esp,0x10
c0012c4f:	6a 00                	push   0x0
c0012c51:	6a 00                	push   0x0
c0012c53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c57:	e8 4a ff ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c0012c5c:	83 c4 1c             	add    esp,0x1c
c0012c5f:	c3                   	ret    

c0012c60 <File::unlink()>:
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	b8 0b 00 00 00       	mov    eax,0xb
c0012c68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c73:	80 f9 19             	cmp    cl,0x19
c0012c76:	77 2f                	ja     c0012ca7 <File::unlink()+0x47>
c0012c78:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012c7f:	85 c9                	test   ecx,ecx
c0012c81:	74 24                	je     c0012ca7 <File::unlink()+0x47>
c0012c83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c89:	85 c9                	test   ecx,ecx
c0012c8b:	74 1a                	je     c0012ca7 <File::unlink()+0x47>
c0012c8d:	b8 06 00 00 00       	mov    eax,0x6
c0012c92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c96:	75 0f                	jne    c0012ca7 <File::unlink()+0x47>
c0012c98:	83 c2 0d             	add    edx,0xd
c0012c9b:	50                   	push   eax
c0012c9c:	50                   	push   eax
c0012c9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c9f:	52                   	push   edx
c0012ca0:	51                   	push   ecx
c0012ca1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ca4:	83 c4 10             	add    esp,0x10
c0012ca7:	83 c4 0c             	add    esp,0xc
c0012caa:	c3                   	ret    
c0012cab:	90                   	nop

c0012cac <File::rename(char const*)>:
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cbf:	80 f9 19             	cmp    cl,0x19
c0012cc2:	77 32                	ja     c0012cf6 <File::rename(char const*)+0x4a>
c0012cc4:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012ccb:	85 c9                	test   ecx,ecx
c0012ccd:	74 27                	je     c0012cf6 <File::rename(char const*)+0x4a>
c0012ccf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cd5:	85 c9                	test   ecx,ecx
c0012cd7:	74 1d                	je     c0012cf6 <File::rename(char const*)+0x4a>
c0012cd9:	b8 06 00 00 00       	mov    eax,0x6
c0012cde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ce2:	75 12                	jne    c0012cf6 <File::rename(char const*)+0x4a>
c0012ce4:	83 c2 0d             	add    edx,0xd
c0012ce7:	50                   	push   eax
c0012ce8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cee:	52                   	push   edx
c0012cef:	51                   	push   ecx
c0012cf0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	83 c4 0c             	add    esp,0xc
c0012cf9:	c3                   	ret    

c0012cfa <File::chfatattr(unsigned char, unsigned char)>:
c0012cfa:	57                   	push   edi
c0012cfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012d00:	56                   	push   esi
c0012d01:	53                   	push   ebx
c0012d02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d15:	80 f9 19             	cmp    cl,0x19
c0012d18:	77 37                	ja     c0012d51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d1a:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012d21:	85 c9                	test   ecx,ecx
c0012d23:	74 2c                	je     c0012d51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d2b:	85 c9                	test   ecx,ecx
c0012d2d:	74 22                	je     c0012d51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d2f:	b8 06 00 00 00       	mov    eax,0x6
c0012d34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d38:	75 17                	jne    c0012d51 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d3a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012d3c:	89 f0                	mov    eax,esi
c0012d3e:	83 c2 0d             	add    edx,0xd
c0012d41:	0f b6 f0             	movzx  esi,al
c0012d44:	0f b6 db             	movzx  ebx,bl
c0012d47:	56                   	push   esi
c0012d48:	53                   	push   ebx
c0012d49:	52                   	push   edx
c0012d4a:	51                   	push   ecx
c0012d4b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	5b                   	pop    ebx
c0012d52:	5e                   	pop    esi
c0012d53:	5f                   	pop    edi
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop

c0012d56 <File::exists()>:
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	31 c0                	xor    eax,eax
c0012d5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d5f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d66:	80 f9 19             	cmp    cl,0x19
c0012d69:	77 24                	ja     c0012d8f <File::exists()+0x39>
c0012d6b:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012d72:	85 c9                	test   ecx,ecx
c0012d74:	74 19                	je     c0012d8f <File::exists()+0x39>
c0012d76:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d7c:	85 c9                	test   ecx,ecx
c0012d7e:	74 0f                	je     c0012d8f <File::exists()+0x39>
c0012d80:	83 c2 0d             	add    edx,0xd
c0012d83:	50                   	push   eax
c0012d84:	50                   	push   eax
c0012d85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d87:	52                   	push   edx
c0012d88:	51                   	push   ecx
c0012d89:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012d8c:	83 c4 10             	add    esp,0x10
c0012d8f:	83 c4 0c             	add    esp,0xc
c0012d92:	c3                   	ret    
c0012d93:	90                   	nop

c0012d94 <File::stat(unsigned long long*, bool*)>:
c0012d94:	56                   	push   esi
c0012d95:	53                   	push   ebx
c0012d96:	50                   	push   eax
c0012d97:	b8 0b 00 00 00       	mov    eax,0xb
c0012d9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012da4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012daf:	80 f9 19             	cmp    cl,0x19
c0012db2:	77 3d                	ja     c0012df1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012db4:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012dbb:	85 c9                	test   ecx,ecx
c0012dbd:	74 32                	je     c0012df1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012dbf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc5:	85 c9                	test   ecx,ecx
c0012dc7:	74 28                	je     c0012df1 <File::stat(unsigned long long*, bool*)+0x5d>
c0012dc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dcf:	74 13                	je     c0012de4 <File::stat(unsigned long long*, bool*)+0x50>
c0012dd1:	83 ec 04             	sub    esp,0x4
c0012dd4:	56                   	push   esi
c0012dd5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ddb:	51                   	push   ecx
c0012ddc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ddf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012de2:	eb 0a                	jmp    c0012dee <File::stat(unsigned long long*, bool*)+0x5a>
c0012de4:	53                   	push   ebx
c0012de5:	83 c2 0d             	add    edx,0xd
c0012de8:	56                   	push   esi
c0012de9:	52                   	push   edx
c0012dea:	51                   	push   ecx
c0012deb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	5a                   	pop    edx
c0012df2:	5b                   	pop    ebx
c0012df3:	5e                   	pop    esi
c0012df4:	c3                   	ret    

c0012df5 <Fs::setcwd(Process*, char*)>:
c0012df5:	55                   	push   ebp
c0012df6:	57                   	push   edi
c0012df7:	56                   	push   esi
c0012df8:	53                   	push   ebx
c0012df9:	81 ec 20 02 00 00    	sub    esp,0x220
c0012dff:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012e06:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012e0c:	57                   	push   edi
c0012e0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012e14:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012e18:	56                   	push   esi
c0012e19:	e8 bc fa ff ff       	call   c00128da <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e1e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e21:	e8 46 d9 fe ff       	call   c000076c <strlen>
c0012e26:	83 c4 10             	add    esp,0x10
c0012e29:	83 f8 02             	cmp    eax,0x2
c0012e2c:	77 17                	ja     c0012e45 <Fs::setcwd(Process*, char*)+0x50>
c0012e2e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012e33:	83 e8 41             	sub    eax,0x41
c0012e36:	83 f8 19             	cmp    eax,0x19
c0012e39:	76 24                	jbe    c0012e5f <Fs::setcwd(Process*, char*)+0x6a>
c0012e3b:	b8 03 00 00 00       	mov    eax,0x3
c0012e40:	e9 e0 00 00 00       	jmp    c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	56                   	push   esi
c0012e49:	e8 1e d9 fe ff       	call   c000076c <strlen>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	83 f8 03             	cmp    eax,0x3
c0012e54:	75 34                	jne    c0012e8a <Fs::setcwd(Process*, char*)+0x95>
c0012e56:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012e5b:	75 2d                	jne    c0012e8a <Fs::setcwd(Process*, char*)+0x95>
c0012e5d:	eb cf                	jmp    c0012e2e <Fs::setcwd(Process*, char*)+0x39>
c0012e5f:	8b 14 85 a0 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2460]
c0012e66:	b8 05 00 00 00       	mov    eax,0x5
c0012e6b:	85 d2                	test   edx,edx
c0012e6d:	0f 84 b2 00 00 00    	je     c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012e73:	b8 06 00 00 00       	mov    eax,0x6
c0012e78:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e7f:	0f 85 92 00 00 00    	jne    c0012f17 <Fs::setcwd(Process*, char*)+0x122>
c0012e85:	e9 9b 00 00 00       	jmp    c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012e8a:	83 ec 0c             	sub    esp,0xc
c0012e8d:	68 14 01 00 00       	push   0x114
c0012e92:	e8 05 c7 ff ff       	call   c000f59c <malloc>
c0012e97:	83 c4 0c             	add    esp,0xc
c0012e9a:	89 c3                	mov    ebx,eax
c0012e9c:	55                   	push   ebp
c0012e9d:	56                   	push   esi
c0012e9e:	50                   	push   eax
c0012e9f:	e8 e0 fb ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c0012ea4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012ea9:	83 c4 0c             	add    esp,0xc
c0012eac:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012eb0:	50                   	push   eax
c0012eb1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012eb5:	50                   	push   eax
c0012eb6:	53                   	push   ebx
c0012eb7:	e8 d8 fe ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	83 f8 02             	cmp    eax,0x2
c0012ec2:	74 04                	je     c0012ec8 <Fs::setcwd(Process*, char*)+0xd3>
c0012ec4:	85 c0                	test   eax,eax
c0012ec6:	74 1c                	je     c0012ee4 <Fs::setcwd(Process*, char*)+0xef>
c0012ec8:	b8 01 00 00 00       	mov    eax,0x1
c0012ecd:	85 db                	test   ebx,ebx
c0012ecf:	74 54                	je     c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012ed1:	83 ec 0c             	sub    esp,0xc
c0012ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed6:	53                   	push   ebx
c0012ed7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	b8 01 00 00 00       	mov    eax,0x1
c0012ee2:	eb 41                	jmp    c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012ee4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ee9:	75 1c                	jne    c0012f07 <Fs::setcwd(Process*, char*)+0x112>
c0012eeb:	b8 02 00 00 00       	mov    eax,0x2
c0012ef0:	85 db                	test   ebx,ebx
c0012ef2:	74 31                	je     c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012ef4:	83 ec 0c             	sub    esp,0xc
c0012ef7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ef9:	53                   	push   ebx
c0012efa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	b8 02 00 00 00       	mov    eax,0x2
c0012f05:	eb 1e                	jmp    c0012f25 <Fs::setcwd(Process*, char*)+0x130>
c0012f07:	85 db                	test   ebx,ebx
c0012f09:	74 0c                	je     c0012f17 <Fs::setcwd(Process*, char*)+0x122>
c0012f0b:	83 ec 0c             	sub    esp,0xc
c0012f0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f10:	53                   	push   ebx
c0012f11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	50                   	push   eax
c0012f18:	50                   	push   eax
c0012f19:	56                   	push   esi
c0012f1a:	57                   	push   edi
c0012f1b:	e8 ec d8 fe ff       	call   c000080c <strcpy>
c0012f20:	83 c4 10             	add    esp,0x10
c0012f23:	31 c0                	xor    eax,eax
c0012f25:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012f2b:	5b                   	pop    ebx
c0012f2c:	5e                   	pop    esi
c0012f2d:	5f                   	pop    edi
c0012f2e:	5d                   	pop    ebp
c0012f2f:	c3                   	ret    

c0012f30 <Directory::Directory(char const*, Process*)>:
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f37:	83 ec 08             	sub    esp,0x8
c0012f3a:	6a 00                	push   0x0
c0012f3c:	50                   	push   eax
c0012f3d:	e8 1c de ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012f42:	83 c4 10             	add    esp,0x10
c0012f45:	ba 38 a5 02 c0       	mov    edx,0xc002a538
c0012f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f4e:	89 10                	mov    DWORD PTR [eax],edx
c0012f50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f54:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5e:	83 c0 0d             	add    eax,0xd
c0012f61:	83 ec 04             	sub    esp,0x4
c0012f64:	52                   	push   edx
c0012f65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f69:	50                   	push   eax
c0012f6a:	e8 6b f9 ff ff       	call   c00128da <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f76:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f79:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f80:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f8e:	90                   	nop
c0012f8f:	83 c4 0c             	add    esp,0xc
c0012f92:	c3                   	ret    
c0012f93:	90                   	nop

c0012f94 <Directory::open()>:
c0012f94:	53                   	push   ebx
c0012f95:	b8 0b 00 00 00       	mov    eax,0xb
c0012f9a:	83 ec 08             	sub    esp,0x8
c0012f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fa1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012fa8:	80 fa 19             	cmp    dl,0x19
c0012fab:	77 3d                	ja     c0012fea <Directory::open()+0x56>
c0012fad:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012fb4:	85 d2                	test   edx,edx
c0012fb6:	74 32                	je     c0012fea <Directory::open()+0x56>
c0012fb8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fbe:	85 d2                	test   edx,edx
c0012fc0:	74 28                	je     c0012fea <Directory::open()+0x56>
c0012fc2:	b8 06 00 00 00       	mov    eax,0x6
c0012fc7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fcb:	75 1d                	jne    c0012fea <Directory::open()+0x56>
c0012fcd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fd3:	50                   	push   eax
c0012fd4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fd6:	51                   	push   ecx
c0012fd7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fda:	51                   	push   ecx
c0012fdb:	52                   	push   edx
c0012fdc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	85 c0                	test   eax,eax
c0012fe4:	75 04                	jne    c0012fea <Directory::open()+0x56>
c0012fe6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012fea:	83 c4 08             	add    esp,0x8
c0012fed:	5b                   	pop    ebx
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Directory::close()>:
c0012ff0:	53                   	push   ebx
c0012ff1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff6:	83 ec 08             	sub    esp,0x8
c0012ff9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ffd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013004:	80 fa 19             	cmp    dl,0x19
c0013007:	77 41                	ja     c001304a <Directory::close()+0x5a>
c0013009:	8b 1c 95 a0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2460]
c0013010:	85 db                	test   ebx,ebx
c0013012:	74 36                	je     c001304a <Directory::close()+0x5a>
c0013014:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001301b:	74 2d                	je     c001304a <Directory::close()+0x5a>
c001301d:	b8 05 00 00 00       	mov    eax,0x5
c0013022:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013026:	74 22                	je     c001304a <Directory::close()+0x5a>
c0013028:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001302c:	8b 04 95 a0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2460]
c0013033:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013039:	53                   	push   ebx
c001303a:	53                   	push   ebx
c001303b:	8b 10                	mov    edx,DWORD PTR [eax]
c001303d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013043:	50                   	push   eax
c0013044:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	83 c4 08             	add    esp,0x8
c001304d:	5b                   	pop    ebx
c001304e:	c3                   	ret    
c001304f:	90                   	nop

c0013050 <Directory::unlink()>:
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	b8 0b 00 00 00       	mov    eax,0xb
c0013058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001305c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013063:	80 f9 19             	cmp    cl,0x19
c0013066:	77 2f                	ja     c0013097 <Directory::unlink()+0x47>
c0013068:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c001306f:	85 c9                	test   ecx,ecx
c0013071:	74 24                	je     c0013097 <Directory::unlink()+0x47>
c0013073:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013079:	85 c9                	test   ecx,ecx
c001307b:	74 1a                	je     c0013097 <Directory::unlink()+0x47>
c001307d:	b8 06 00 00 00       	mov    eax,0x6
c0013082:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013086:	75 0f                	jne    c0013097 <Directory::unlink()+0x47>
c0013088:	83 c2 0d             	add    edx,0xd
c001308b:	50                   	push   eax
c001308c:	50                   	push   eax
c001308d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001308f:	52                   	push   edx
c0013090:	51                   	push   ecx
c0013091:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	83 c4 0c             	add    esp,0xc
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <Directory::rename(char const*)>:
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	b8 0b 00 00 00       	mov    eax,0xb
c00130a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130af:	80 f9 19             	cmp    cl,0x19
c00130b2:	77 32                	ja     c00130e6 <Directory::rename(char const*)+0x4a>
c00130b4:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c00130bb:	85 c9                	test   ecx,ecx
c00130bd:	74 27                	je     c00130e6 <Directory::rename(char const*)+0x4a>
c00130bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130c5:	85 c9                	test   ecx,ecx
c00130c7:	74 1d                	je     c00130e6 <Directory::rename(char const*)+0x4a>
c00130c9:	b8 06 00 00 00       	mov    eax,0x6
c00130ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130d2:	75 12                	jne    c00130e6 <Directory::rename(char const*)+0x4a>
c00130d4:	83 c2 0d             	add    edx,0xd
c00130d7:	50                   	push   eax
c00130d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130de:	52                   	push   edx
c00130df:	51                   	push   ecx
c00130e0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	83 c4 0c             	add    esp,0xc
c00130e9:	c3                   	ret    

c00130ea <Directory::exists()>:
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	31 c0                	xor    eax,eax
c00130ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130f3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130fa:	80 f9 19             	cmp    cl,0x19
c00130fd:	77 24                	ja     c0013123 <Directory::exists()+0x39>
c00130ff:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0013106:	85 c9                	test   ecx,ecx
c0013108:	74 19                	je     c0013123 <Directory::exists()+0x39>
c001310a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013110:	85 c9                	test   ecx,ecx
c0013112:	74 0f                	je     c0013123 <Directory::exists()+0x39>
c0013114:	83 c2 0d             	add    edx,0xd
c0013117:	50                   	push   eax
c0013118:	50                   	push   eax
c0013119:	8b 01                	mov    eax,DWORD PTR [ecx]
c001311b:	52                   	push   edx
c001311c:	51                   	push   ecx
c001311d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	83 c4 0c             	add    esp,0xc
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Directory::read(dirent*)>:
c0013128:	83 ec 1c             	sub    esp,0x1c
c001312b:	b8 0b 00 00 00       	mov    eax,0xb
c0013130:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013134:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001313b:	80 fa 19             	cmp    dl,0x19
c001313e:	77 30                	ja     c0013170 <Directory::read(dirent*)+0x48>
c0013140:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0013147:	85 d2                	test   edx,edx
c0013149:	74 25                	je     c0013170 <Directory::read(dirent*)+0x48>
c001314b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013152:	74 1c                	je     c0013170 <Directory::read(dirent*)+0x48>
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013159:	8d 54 24 18          	lea    edx,[esp+0x18]
c001315d:	52                   	push   edx
c001315e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013162:	6a 00                	push   0x0
c0013164:	68 10 01 00 00       	push   0x110
c0013169:	51                   	push   ecx
c001316a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001316d:	83 c4 20             	add    esp,0x20
c0013170:	83 c4 1c             	add    esp,0x1c
c0013173:	c3                   	ret    

c0013174 <Directory::create()>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013180:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013187:	80 f9 19             	cmp    cl,0x19
c001318a:	77 2f                	ja     c00131bb <Directory::create()+0x47>
c001318c:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0013193:	85 c9                	test   ecx,ecx
c0013195:	74 24                	je     c00131bb <Directory::create()+0x47>
c0013197:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001319d:	85 c9                	test   ecx,ecx
c001319f:	74 1a                	je     c00131bb <Directory::create()+0x47>
c00131a1:	b8 06 00 00 00       	mov    eax,0x6
c00131a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131aa:	75 0f                	jne    c00131bb <Directory::create()+0x47>
c00131ac:	83 c2 0d             	add    edx,0xd
c00131af:	50                   	push   eax
c00131b0:	50                   	push   eax
c00131b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131b3:	52                   	push   edx
c00131b4:	51                   	push   ecx
c00131b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	83 c4 0c             	add    esp,0xc
c00131be:	c3                   	ret    
c00131bf:	90                   	nop

c00131c0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00131c0:	b8 0a 00 00 00       	mov    eax,0xa
c00131c5:	c3                   	ret    

c00131c6 <Bus::Bus(char const*)>:
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cd:	83 ec 08             	sub    esp,0x8
c00131d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d4:	50                   	push   eax
c00131d5:	e8 88 09 00 00       	call   c0013b62 <Device::Device(char const*)>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c00131e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e6:	89 10                	mov    DWORD PTR [eax],edx
c00131e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ec:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00131f6:	90                   	nop
c00131f7:	83 c4 0c             	add    esp,0xc
c00131fa:	c3                   	ret    
c00131fb:	90                   	nop

c00131fc <Bus::~Bus()>:
c00131fc:	83 ec 0c             	sub    esp,0xc
c00131ff:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c0013204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013208:	89 10                	mov    DWORD PTR [eax],edx
c001320a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320e:	83 ec 0c             	sub    esp,0xc
c0013211:	50                   	push   eax
c0013212:	e8 15 06 00 00       	call   c001382c <Device::~Device()>
c0013217:	83 c4 10             	add    esp,0x10
c001321a:	90                   	nop
c001321b:	83 c4 0c             	add    esp,0xc
c001321e:	c3                   	ret    
c001321f:	90                   	nop

c0013220 <Bus::~Bus()>:
c0013220:	83 ec 0c             	sub    esp,0xc
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322a:	e8 cd ff ff ff       	call   c00131fc <Bus::~Bus()>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	83 ec 08             	sub    esp,0x8
c0013235:	68 58 01 00 00       	push   0x158
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	e8 0a f2 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	83 c4 0c             	add    esp,0xc
c0013249:	c3                   	ret    

c001324a <Buzzer::Buzzer(char const*)>:
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013251:	83 ec 08             	sub    esp,0x8
c0013254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013258:	50                   	push   eax
c0013259:	e8 04 09 00 00       	call   c0013b62 <Device::Device(char const*)>
c001325e:	83 c4 10             	add    esp,0x10
c0013261:	ba 80 a5 02 c0       	mov    edx,0xc002a580
c0013266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326a:	89 10                	mov    DWORD PTR [eax],edx
c001326c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013270:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001327a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013288:	90                   	nop
c0013289:	83 c4 0c             	add    esp,0xc
c001328c:	c3                   	ret    
c001328d:	90                   	nop

c001328e <Buzzer::~Buzzer()>:
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	ba 80 a5 02 c0       	mov    edx,0xc002a580
c0013296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329a:	89 10                	mov    DWORD PTR [eax],edx
c001329c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	50                   	push   eax
c00132a4:	e8 83 05 00 00       	call   c001382c <Device::~Device()>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	90                   	nop
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	c3                   	ret    
c00132b1:	90                   	nop

c00132b2 <Buzzer::~Buzzer()>:
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132bc:	e8 cd ff ff ff       	call   c001328e <Buzzer::~Buzzer()>
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	83 ec 08             	sub    esp,0x8
c00132c7:	68 5c 01 00 00       	push   0x15c
c00132cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132d0:	e8 78 f1 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	83 c4 0c             	add    esp,0xc
c00132db:	c3                   	ret    

c00132dc <Buzzer::stop()>:
c00132dc:	83 ec 14             	sub    esp,0x14
c00132df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00132e5:	6a 00                	push   0x0
c00132e7:	50                   	push   eax
c00132e8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132eb:	83 c4 1c             	add    esp,0x1c
c00132ee:	c3                   	ret    

c00132ef <beepThread(void*)>:
c00132ef:	53                   	push   ebx
c00132f0:	83 ec 08             	sub    esp,0x8
c00132f3:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00132f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132fc:	48                   	dec    eax
c00132fd:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0013302:	75 01                	jne    c0013305 <beepThread(void*)+0x16>
c0013304:	fb                   	sti    
c0013305:	50                   	push   eax
c0013306:	50                   	push   eax
c0013307:	b8 40 42 0f 00       	mov    eax,0xf4240
c001330c:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013312:	52                   	push   edx
c0013313:	50                   	push   eax
c0013314:	e8 aa a7 00 00       	call   c001dac3 <nanoSleep(unsigned long long)>
c0013319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001331c:	e8 bb ff ff ff       	call   c00132dc <Buzzer::stop()>
c0013321:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013329:	83 c4 18             	add    esp,0x18
c001332c:	5b                   	pop    ebx
c001332d:	e9 8d a6 00 00       	jmp    c001d9bf <blockTask(TaskState)>

c0013332 <Buzzer::beep(int, int, bool)>:
c0013332:	57                   	push   edi
c0013333:	56                   	push   esi
c0013334:	53                   	push   ebx
c0013335:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013339:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001333d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013341:	52                   	push   edx
c0013342:	52                   	push   edx
c0013343:	8b 06                	mov    eax,DWORD PTR [esi]
c0013345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013349:	56                   	push   esi
c001334a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	89 f8                	mov    eax,edi
c0013352:	84 c0                	test   al,al
c0013354:	74 1f                	je     c0013375 <Buzzer::beep(int, int, bool)+0x43>
c0013356:	50                   	push   eax
c0013357:	50                   	push   eax
c0013358:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001335e:	99                   	cdq    
c001335f:	52                   	push   edx
c0013360:	50                   	push   eax
c0013361:	e8 5d a7 00 00       	call   c001dac3 <nanoSleep(unsigned long long)>
c0013366:	83 c4 10             	add    esp,0x10
c0013369:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001336d:	5b                   	pop    ebx
c001336e:	5e                   	pop    esi
c001336f:	5f                   	pop    edi
c0013370:	e9 67 ff ff ff       	jmp    c00132dc <Buzzer::stop()>
c0013375:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001337b:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0013380:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013388:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001338c:	c7 44 24 14 ef 32 01 c0 	mov    DWORD PTR [esp+0x14],0xc00132ef
c0013394:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013398:	5b                   	pop    ebx
c0013399:	5e                   	pop    esi
c001339a:	5f                   	pop    edi
c001339b:	e9 24 a2 00 00       	jmp    c001d5c4 <Process::createThread(void (*)(void*), void*, int)>

c00133a0 <User::loadClockSettings(int)>:
c00133a0:	53                   	push   ebx
c00133a1:	83 ec 14             	sub    esp,0x14
c00133a4:	68 14 01 00 00       	push   0x114
c00133a9:	e8 ee c1 ff ff       	call   c000f59c <malloc>
c00133ae:	83 c4 0c             	add    esp,0xc
c00133b1:	89 c3                	mov    ebx,eax
c00133b3:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c00133b9:	68 a8 a5 02 c0       	push   0xc002a5a8
c00133be:	50                   	push   eax
c00133bf:	e8 c0 f6 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c00133c4:	58                   	pop    eax
c00133c5:	5a                   	pop    edx
c00133c6:	6a 01                	push   0x1
c00133c8:	53                   	push   ebx
c00133c9:	e8 1a f7 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c00133ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133d1:	e8 70 f7 ff ff       	call   c0012b46 <File::close()>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	85 db                	test   ebx,ebx
c00133db:	74 0f                	je     c00133ec <User::loadClockSettings(int)+0x4c>
c00133dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00133e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00133e6:	83 c4 08             	add    esp,0x8
c00133e9:	5b                   	pop    ebx
c00133ea:	ff e0                	jmp    eax
c00133ec:	83 c4 08             	add    esp,0x8
c00133ef:	5b                   	pop    ebx
c00133f0:	c3                   	ret    
c00133f1:	90                   	nop

c00133f2 <Clock::Clock(char const*)>:
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f9:	83 ec 08             	sub    esp,0x8
c00133fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013400:	50                   	push   eax
c0013401:	e8 5c 07 00 00       	call   c0013b62 <Device::Device(char const*)>
c0013406:	83 c4 10             	add    esp,0x10
c0013409:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	89 10                	mov    DWORD PTR [eax],edx
c0013414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013418:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013422:	90                   	nop
c0013423:	83 c4 0c             	add    esp,0xc
c0013426:	c3                   	ret    
c0013427:	90                   	nop

c0013428 <Clock::~Clock()>:
c0013428:	83 ec 0c             	sub    esp,0xc
c001342b:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c0013430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013434:	89 10                	mov    DWORD PTR [eax],edx
c0013436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343a:	83 ec 0c             	sub    esp,0xc
c001343d:	50                   	push   eax
c001343e:	e8 e9 03 00 00       	call   c001382c <Device::~Device()>
c0013443:	83 c4 10             	add    esp,0x10
c0013446:	90                   	nop
c0013447:	83 c4 0c             	add    esp,0xc
c001344a:	c3                   	ret    
c001344b:	90                   	nop

c001344c <Clock::~Clock()>:
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	83 ec 0c             	sub    esp,0xc
c0013452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013456:	e8 cd ff ff ff       	call   c0013428 <Clock::~Clock()>
c001345b:	83 c4 10             	add    esp,0x10
c001345e:	83 ec 08             	sub    esp,0x8
c0013461:	68 58 01 00 00       	push   0x158
c0013466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001346a:	e8 de ef ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	83 c4 0c             	add    esp,0xc
c0013475:	c3                   	ret    

c0013476 <Clock::timeInSecondsLocal()>:
c0013476:	53                   	push   ebx
c0013477:	83 ec 14             	sub    esp,0x14
c001347a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001347e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013480:	50                   	push   eax
c0013481:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013484:	0f b6 0d 1c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d71c
c001348b:	03 0d 20 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d720
c0013491:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013497:	89 cb                	mov    ebx,ecx
c0013499:	c1 fb 1f             	sar    ebx,0x1f
c001349c:	01 c8                	add    eax,ecx
c001349e:	11 da                	adc    edx,ebx
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	31 c9                	xor    ecx,ecx
c00134a5:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c00134ac:	74 05                	je     c00134b3 <Clock::timeInSecondsLocal()+0x3d>
c00134ae:	b9 08 07 00 00       	mov    ecx,0x708
c00134b3:	31 db                	xor    ebx,ebx
c00134b5:	01 c8                	add    eax,ecx
c00134b7:	11 da                	adc    edx,ebx
c00134b9:	83 c4 08             	add    esp,0x8
c00134bc:	5b                   	pop    ebx
c00134bd:	c3                   	ret    

c00134be <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00134be:	57                   	push   edi
c00134bf:	56                   	push   esi
c00134c0:	53                   	push   ebx
c00134c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00134c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00134cf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00134d2:	0f b6 05 1c d7 02 c0 	movzx  eax,BYTE PTR ds:0xc002d71c
c00134d9:	03 05 20 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d720
c00134df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00134e5:	99                   	cdq    
c00134e6:	29 c6                	sub    esi,eax
c00134e8:	19 d7                	sbb    edi,edx
c00134ea:	89 f0                	mov    eax,esi
c00134ec:	89 fa                	mov    edx,edi
c00134ee:	31 f6                	xor    esi,esi
c00134f0:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c00134f7:	74 05                	je     c00134fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00134f9:	be 08 07 00 00       	mov    esi,0x708
c00134fe:	31 ff                	xor    edi,edi
c0013500:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013504:	29 f0                	sub    eax,esi
c0013506:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001350a:	19 fa                	sbb    edx,edi
c001350c:	89 d8                	mov    eax,ebx
c001350e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013512:	5b                   	pop    ebx
c0013513:	5e                   	pop    esi
c0013514:	5f                   	pop    edi
c0013515:	ff e0                	jmp    eax

c0013517 <datetimeToSeconds(datetime_t)>:
c0013517:	55                   	push   ebp
c0013518:	57                   	push   edi
c0013519:	56                   	push   esi
c001351a:	53                   	push   ebx
c001351b:	83 ec 14             	sub    esp,0x14
c001351e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013522:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013526:	89 d3                	mov    ebx,edx
c0013528:	0f b6 c6             	movzx  eax,dh
c001352b:	c1 eb 10             	shr    ebx,0x10
c001352e:	48                   	dec    eax
c001352f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013534:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013538:	0f b6 f5             	movzx  esi,ch
c001353b:	89 cf                	mov    edi,ecx
c001353d:	6b f6 3c             	imul   esi,esi,0x3c
c0013540:	c1 ef 10             	shr    edi,0x10
c0013543:	0f b6 c9             	movzx  ecx,cl
c0013546:	89 f8                	mov    eax,edi
c0013548:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001354e:	0f b6 f8             	movzx  edi,al
c0013551:	0f b6 d2             	movzx  edx,dl
c0013554:	01 fe                	add    esi,edi
c0013556:	01 f1                	add    ecx,esi
c0013558:	0f b7 f3             	movzx  esi,bx
c001355b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001355f:	c1 f9 1f             	sar    ecx,0x1f
c0013562:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013567:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001356b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013570:	8b 0c 8d 20 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd59e0]
c0013577:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001357b:	76 29                	jbe    c00135a6 <datetimeToSeconds(datetime_t)+0x8f>
c001357d:	f6 c3 03             	test   bl,0x3
c0013580:	75 24                	jne    c00135a6 <datetimeToSeconds(datetime_t)+0x8f>
c0013582:	31 d2                	xor    edx,edx
c0013584:	bf 64 00 00 00       	mov    edi,0x64
c0013589:	89 d8                	mov    eax,ebx
c001358b:	66 f7 f7             	div    di
c001358e:	66 85 d2             	test   dx,dx
c0013591:	75 12                	jne    c00135a5 <datetimeToSeconds(datetime_t)+0x8e>
c0013593:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013599:	bf 90 01 00 00       	mov    edi,0x190
c001359e:	99                   	cdq    
c001359f:	f7 ff                	idiv   edi
c00135a1:	85 d2                	test   edx,edx
c00135a3:	75 01                	jne    c00135a6 <datetimeToSeconds(datetime_t)+0x8f>
c00135a5:	41                   	inc    ecx
c00135a6:	66 83 fb 46          	cmp    bx,0x46
c00135aa:	76 45                	jbe    c00135f1 <datetimeToSeconds(datetime_t)+0xda>
c00135ac:	bb 46 00 00 00       	mov    ebx,0x46
c00135b1:	bf 64 00 00 00       	mov    edi,0x64
c00135b6:	bd 90 01 00 00       	mov    ebp,0x190
c00135bb:	b8 6d 01 00 00       	mov    eax,0x16d
c00135c0:	f6 c3 03             	test   bl,0x3
c00135c3:	75 23                	jne    c00135e8 <datetimeToSeconds(datetime_t)+0xd1>
c00135c5:	89 d8                	mov    eax,ebx
c00135c7:	99                   	cdq    
c00135c8:	f7 ff                	idiv   edi
c00135ca:	b8 6e 01 00 00       	mov    eax,0x16e
c00135cf:	85 d2                	test   edx,edx
c00135d1:	75 15                	jne    c00135e8 <datetimeToSeconds(datetime_t)+0xd1>
c00135d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00135d9:	99                   	cdq    
c00135da:	f7 fd                	idiv   ebp
c00135dc:	83 fa 01             	cmp    edx,0x1
c00135df:	19 c0                	sbb    eax,eax
c00135e1:	f7 d0                	not    eax
c00135e3:	05 6e 01 00 00       	add    eax,0x16e
c00135e8:	01 c1                	add    ecx,eax
c00135ea:	43                   	inc    ebx
c00135eb:	39 f3                	cmp    ebx,esi
c00135ed:	7c cc                	jl     c00135bb <datetimeToSeconds(datetime_t)+0xa4>
c00135ef:	eb 35                	jmp    c0013626 <datetimeToSeconds(datetime_t)+0x10f>
c00135f1:	74 33                	je     c0013626 <datetimeToSeconds(datetime_t)+0x10f>
c00135f3:	b8 45 00 00 00       	mov    eax,0x45
c00135f8:	89 c2                	mov    edx,eax
c00135fa:	83 e2 03             	and    edx,0x3
c00135fd:	39 f0                	cmp    eax,esi
c00135ff:	7e 0f                	jle    c0013610 <datetimeToSeconds(datetime_t)+0xf9>
c0013601:	83 fa 01             	cmp    edx,0x1
c0013604:	19 d2                	sbb    edx,edx
c0013606:	48                   	dec    eax
c0013607:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001360e:	eb e8                	jmp    c00135f8 <datetimeToSeconds(datetime_t)+0xe1>
c0013610:	b8 6d 01 00 00       	mov    eax,0x16d
c0013615:	85 d2                	test   edx,edx
c0013617:	75 0b                	jne    c0013624 <datetimeToSeconds(datetime_t)+0x10d>
c0013619:	66 83 fb 01          	cmp    bx,0x1
c001361d:	19 c0                	sbb    eax,eax
c001361f:	05 6e 01 00 00       	add    eax,0x16e
c0013624:	29 c1                	sub    ecx,eax
c0013626:	b8 80 51 01 00       	mov    eax,0x15180
c001362b:	f7 e9                	imul   ecx
c001362d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013631:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013635:	83 c4 14             	add    esp,0x14
c0013638:	5b                   	pop    ebx
c0013639:	5e                   	pop    esi
c001363a:	5f                   	pop    edi
c001363b:	5d                   	pop    ebp
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001363e:	57                   	push   edi
c001363f:	56                   	push   esi
c0013640:	53                   	push   ebx
c0013641:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013645:	8b 06                	mov    eax,DWORD PTR [esi]
c0013647:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001364a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001364e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013652:	e8 c0 fe ff ff       	call   c0013517 <datetimeToSeconds(datetime_t)>
c0013657:	59                   	pop    ecx
c0013658:	0f b6 0d 1c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d71c
c001365f:	5b                   	pop    ebx
c0013660:	03 0d 20 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d720
c0013666:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001366c:	89 cb                	mov    ebx,ecx
c001366e:	c1 fb 1f             	sar    ebx,0x1f
c0013671:	29 c8                	sub    eax,ecx
c0013673:	19 da                	sbb    edx,ebx
c0013675:	31 c9                	xor    ecx,ecx
c0013677:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c001367e:	74 05                	je     c0013685 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013680:	b9 08 07 00 00       	mov    ecx,0x708
c0013685:	31 db                	xor    ebx,ebx
c0013687:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001368b:	29 c8                	sub    eax,ecx
c001368d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013691:	19 da                	sbb    edx,ebx
c0013693:	89 f8                	mov    eax,edi
c0013695:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013699:	5b                   	pop    ebx
c001369a:	5e                   	pop    esi
c001369b:	5f                   	pop    edi
c001369c:	ff e0                	jmp    eax

c001369e <secondsToDatetime(unsigned long long)>:
c001369e:	55                   	push   ebp
c001369f:	57                   	push   edi
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	83 ec 1c             	sub    esp,0x1c
c00136a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00136a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00136ad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00136b1:	6a 00                	push   0x0
c00136b3:	68 80 51 01 00       	push   0x15180
c00136b8:	55                   	push   ebp
c00136b9:	57                   	push   edi
c00136ba:	e8 75 2e 01 00       	call   c0026534 <__udivdi3>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00136c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136cc:	6a 00                	push   0x0
c00136ce:	68 80 51 01 00       	push   0x15180
c00136d3:	55                   	push   ebp
c00136d4:	57                   	push   edi
c00136d5:	bf 10 0e 00 00       	mov    edi,0xe10
c00136da:	e8 55 2f 01 00       	call   c0026634 <__umoddi3>
c00136df:	83 c4 10             	add    esp,0x10
c00136e2:	99                   	cdq    
c00136e3:	f7 ff                	idiv   edi
c00136e5:	bf 3c 00 00 00       	mov    edi,0x3c
c00136ea:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00136ed:	89 d0                	mov    eax,edx
c00136ef:	99                   	cdq    
c00136f0:	f7 ff                	idiv   edi
c00136f2:	85 db                	test   ebx,ebx
c00136f4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00136f7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00136fa:	79 11                	jns    c001370d <secondsToDatetime(unsigned long long)+0x6f>
c00136fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013700:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013706:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001370b:	eb 07                	jmp    c0013714 <secondsToDatetime(unsigned long long)+0x76>
c001370d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013712:	89 d8                	mov    eax,ebx
c0013714:	bf b4 05 00 00       	mov    edi,0x5b4
c0013719:	99                   	cdq    
c001371a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001371f:	f7 f9                	idiv   ecx
c0013721:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001372a:	31 d2                	xor    edx,edx
c001372c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013734:	01 c3                	add    ebx,eax
c0013736:	89 d8                	mov    eax,ebx
c0013738:	f7 f1                	div    ecx
c001373a:	31 d2                	xor    edx,edx
c001373c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001373f:	89 d8                	mov    eax,ebx
c0013741:	f7 f7                	div    edi
c0013743:	31 d2                	xor    edx,edx
c0013745:	29 c1                	sub    ecx,eax
c0013747:	89 d8                	mov    eax,ebx
c0013749:	f7 f5                	div    ebp
c001374b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013750:	29 c1                	sub    ecx,eax
c0013752:	31 d2                	xor    edx,edx
c0013754:	89 c8                	mov    eax,ecx
c0013756:	f7 f5                	div    ebp
c0013758:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001375d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013761:	31 d2                	xor    edx,edx
c0013763:	89 c8                	mov    eax,ecx
c0013765:	f7 f5                	div    ebp
c0013767:	31 d2                	xor    edx,edx
c0013769:	01 c3                	add    ebx,eax
c001376b:	89 c8                	mov    eax,ecx
c001376d:	f7 f7                	div    edi
c001376f:	bf 99 00 00 00       	mov    edi,0x99
c0013774:	29 c3                	sub    ebx,eax
c0013776:	31 d2                	xor    edx,edx
c0013778:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013780:	29 c3                	sub    ebx,eax
c0013782:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013785:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013788:	bb 05 00 00 00       	mov    ebx,0x5
c001378d:	83 c1 02             	add    ecx,0x2
c0013790:	89 c8                	mov    eax,ecx
c0013792:	f7 f7                	div    edi
c0013794:	31 d2                	xor    edx,edx
c0013796:	89 c7                	mov    edi,eax
c0013798:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001379e:	83 c0 02             	add    eax,0x2
c00137a1:	f7 f3                	div    ebx
c00137a3:	89 eb                	mov    ebx,ebp
c00137a5:	29 c3                	sub    ebx,eax
c00137a7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00137ad:	88 1e                	mov    BYTE PTR [esi],bl
c00137af:	19 c0                	sbb    eax,eax
c00137b1:	31 d2                	xor    edx,edx
c00137b3:	83 e0 0c             	and    eax,0xc
c00137b6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00137ba:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00137c2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00137c6:	83 f9 01             	cmp    ecx,0x1
c00137c9:	0f 96 c2             	setbe  dl
c00137cc:	41                   	inc    ecx
c00137cd:	01 d0                	add    eax,edx
c00137cf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00137d2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00137d6:	83 c4 1c             	add    esp,0x1c
c00137d9:	89 f0                	mov    eax,esi
c00137db:	5b                   	pop    ebx
c00137dc:	5e                   	pop    esi
c00137dd:	5f                   	pop    edi
c00137de:	5d                   	pop    ebp
c00137df:	c2 04 00             	ret    0x4

c00137e2 <Clock::timeInDatetimeLocal()>:
c00137e2:	53                   	push   ebx
c00137e3:	83 ec 14             	sub    esp,0x14
c00137e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137ee:	e8 83 fc ff ff       	call   c0013476 <Clock::timeInSecondsLocal()>
c00137f3:	83 c4 0c             	add    esp,0xc
c00137f6:	52                   	push   edx
c00137f7:	50                   	push   eax
c00137f8:	53                   	push   ebx
c00137f9:	e8 a0 fe ff ff       	call   c001369e <secondsToDatetime(unsigned long long)>
c00137fe:	89 d8                	mov    eax,ebx
c0013800:	83 c4 14             	add    esp,0x14
c0013803:	5b                   	pop    ebx
c0013804:	c2 04 00             	ret    0x4
c0013807:	90                   	nop

c0013808 <Device::hibernate()>:
c0013808:	c3                   	ret    
c0013809:	90                   	nop

c001380a <Device::wake()>:
c001380a:	c3                   	ret    
c001380b:	90                   	nop

c001380c <Device::detect()>:
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <Device::disableLegacy()>:
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <Device::powerSaving(PowerSavingLevel)>:
c0013810:	c3                   	ret    
c0013811:	90                   	nop

c0013812 <DriverlessDevice::close(int, int, void*)>:
c0013812:	31 c0                	xor    eax,eax
c0013814:	c3                   	ret    
c0013815:	90                   	nop

c0013816 <DriverlessDevice::detect()>:
c0013816:	c3                   	ret    
c0013817:	90                   	nop

c0013818 <DriverlessDevice::open(int, int, void*)>:
c0013818:	83 ec 18             	sub    esp,0x18
c001381b:	68 50 a6 02 c0       	push   0xc002a650
c0013820:	e8 3a 64 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0013825:	83 c8 ff             	or     eax,0xffffffff
c0013828:	83 c4 1c             	add    esp,0x1c
c001382b:	c3                   	ret    

c001382c <Device::~Device()>:
c001382c:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0013831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013835:	89 10                	mov    DWORD PTR [eax],edx
c0013837:	90                   	nop
c0013838:	c3                   	ret    
c0013839:	90                   	nop

c001383a <Device::~Device()>:
c001383a:	83 ec 0c             	sub    esp,0xc
c001383d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013841:	e8 e6 ff ff ff       	call   c001382c <Device::~Device()>
c0013846:	83 c4 04             	add    esp,0x4
c0013849:	83 ec 08             	sub    esp,0x8
c001384c:	68 58 01 00 00       	push   0x158
c0013851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013855:	e8 f3 eb ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	83 c4 0c             	add    esp,0xc
c0013860:	c3                   	ret    
c0013861:	90                   	nop

c0013862 <Device::findAndLoadDriver()>:
c0013862:	c7 44 24 04 6e a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a66e
c001386a:	e9 b6 ec ff ff       	jmp    c0012525 <Dbg::kprintf(char const*, ...)>
c001386f:	90                   	nop

c0013870 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013870:	57                   	push   edi
c0013871:	b9 09 00 00 00       	mov    ecx,0x9
c0013876:	56                   	push   esi
c0013877:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001387b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001387f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013889:	81 c7 18 01 00 00    	add    edi,0x118
c001388f:	fc                   	cld    
c0013890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013892:	5e                   	pop    esi
c0013893:	5f                   	pop    edi
c0013894:	c3                   	ret    
c0013895:	90                   	nop

c0013896 <Device::preOpenACPI(void*, char*, char*)>:
c0013896:	57                   	push   edi
c0013897:	b9 1e 00 00 00       	mov    ecx,0x1e
c001389c:	56                   	push   esi
c001389d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138a5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00138af:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00138b5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00138bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138c1:	b9 0e 00 00 00       	mov    ecx,0xe
c00138c6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00138cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00138d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138d2:	5e                   	pop    esi
c00138d3:	5f                   	pop    edi
c00138d4:	c3                   	ret    
c00138d5:	90                   	nop

c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00138d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138da:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00138df:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00138e6:	75 0b                	jne    c00138f3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00138e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138ee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00138f1:	eb 1e                	jmp    c0013911 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00138f3:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00138f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00138fe:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013904:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013906:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001390a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001390e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013911:	ff e0                	jmp    eax
c0013913:	90                   	nop

c0013914 <Device::getParent()>:
c0013914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013918:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001391e:	c3                   	ret    
c001391f:	90                   	nop

c0013920 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013924:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013929:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013930:	75 0b                	jne    c001393d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013932:	8b 00                	mov    eax,DWORD PTR [eax]
c0013934:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013938:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001393b:	eb 1e                	jmp    c001395b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001393d:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0013942:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013948:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001394e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013950:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013954:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013958:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001395b:	ff e0                	jmp    eax
c001395d:	90                   	nop

c001395e <Device::addChild(Device*)>:
c001395e:	53                   	push   ebx
c001395f:	83 ec 08             	sub    esp,0x8
c0013962:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013966:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001396a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013970:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013976:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013978:	85 d2                	test   edx,edx
c001397a:	74 04                	je     c0013980 <Device::addChild(Device*)+0x22>
c001397c:	89 d3                	mov    ebx,edx
c001397e:	eb f6                	jmp    c0013976 <Device::addChild(Device*)+0x18>
c0013980:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013983:	83 ec 0c             	sub    esp,0xc
c0013986:	6a 08                	push   0x8
c0013988:	e8 0f bc ff ff       	call   c000f59c <malloc>
c001398d:	89 03                	mov    DWORD PTR [ebx],eax
c001398f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013995:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001399c:	83 c4 18             	add    esp,0x18
c001399f:	5b                   	pop    ebx
c00139a0:	c3                   	ret    
c00139a1:	90                   	nop

c00139a2 <Device::removeAllChildren()>:
c00139a2:	56                   	push   esi
c00139a3:	53                   	push   ebx
c00139a4:	52                   	push   edx
c00139a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139a9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00139af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139b2:	74 17                	je     c00139cb <Device::removeAllChildren()+0x29>
c00139b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00139b7:	85 c0                	test   eax,eax
c00139b9:	74 0c                	je     c00139c7 <Device::removeAllChildren()+0x25>
c00139bb:	83 ec 0c             	sub    esp,0xc
c00139be:	8b 10                	mov    edx,DWORD PTR [eax]
c00139c0:	50                   	push   eax
c00139c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139c9:	eb e4                	jmp    c00139af <Device::removeAllChildren()+0xd>
c00139cb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139d7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139e4:	58                   	pop    eax
c00139e5:	5b                   	pop    ebx
c00139e6:	5e                   	pop    esi
c00139e7:	c3                   	ret    

c00139e8 <Device::hibernateAll()>:
c00139e8:	53                   	push   ebx
c00139e9:	83 ec 14             	sub    esp,0x14
c00139ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139f2:	53                   	push   ebx
c00139f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00139f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a02:	74 0f                	je     c0013a13 <Device::hibernateAll()+0x2b>
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a0a:	e8 d9 ff ff ff       	call   c00139e8 <Device::hibernateAll()>
c0013a0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a11:	eb e9                	jmp    c00139fc <Device::hibernateAll()+0x14>
c0013a13:	83 c4 08             	add    esp,0x8
c0013a16:	5b                   	pop    ebx
c0013a17:	c3                   	ret    

c0013a18 <Device::wakeAll()>:
c0013a18:	53                   	push   ebx
c0013a19:	83 ec 14             	sub    esp,0x14
c0013a1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a22:	53                   	push   ebx
c0013a23:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013a26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a2c:	83 c4 10             	add    esp,0x10
c0013a2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a32:	74 0f                	je     c0013a43 <Device::wakeAll()+0x2b>
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a3a:	e8 d9 ff ff ff       	call   c0013a18 <Device::wakeAll()>
c0013a3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a41:	eb e9                	jmp    c0013a2c <Device::wakeAll()+0x14>
c0013a43:	83 c4 08             	add    esp,0x8
c0013a46:	5b                   	pop    ebx
c0013a47:	c3                   	ret    

c0013a48 <Device::detectAll()>:
c0013a48:	53                   	push   ebx
c0013a49:	83 ec 14             	sub    esp,0x14
c0013a4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a52:	53                   	push   ebx
c0013a53:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013a56:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a5c:	83 c4 10             	add    esp,0x10
c0013a5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a62:	74 0f                	je     c0013a73 <Device::detectAll()+0x2b>
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a6a:	e8 d9 ff ff ff       	call   c0013a48 <Device::detectAll()>
c0013a6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a71:	eb e9                	jmp    c0013a5c <Device::detectAll()+0x14>
c0013a73:	83 c4 08             	add    esp,0x8
c0013a76:	5b                   	pop    ebx
c0013a77:	c3                   	ret    

c0013a78 <Device::disableLegacyAll()>:
c0013a78:	53                   	push   ebx
c0013a79:	83 ec 14             	sub    esp,0x14
c0013a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a82:	53                   	push   ebx
c0013a83:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013a86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a92:	74 0f                	je     c0013aa3 <Device::disableLegacyAll()+0x2b>
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a9a:	e8 d9 ff ff ff       	call   c0013a78 <Device::disableLegacyAll()>
c0013a9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aa1:	eb e9                	jmp    c0013a8c <Device::disableLegacyAll()+0x14>
c0013aa3:	83 c4 08             	add    esp,0x8
c0013aa6:	5b                   	pop    ebx
c0013aa7:	c3                   	ret    

c0013aa8 <Device::loadDriversForAll()>:
c0013aa8:	53                   	push   ebx
c0013aa9:	83 ec 08             	sub    esp,0x8
c0013aac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ab0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013ab7:	75 0c                	jne    c0013ac5 <Device::loadDriversForAll()+0x1d>
c0013ab9:	83 ec 0c             	sub    esp,0xc
c0013abc:	53                   	push   ebx
c0013abd:	e8 a0 fd ff ff       	call   c0013862 <Device::findAndLoadDriver()>
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013acb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ace:	74 12                	je     c0013ae2 <Device::loadDriversForAll()+0x3a>
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ad6:	e8 cd ff ff ff       	call   c0013aa8 <Device::loadDriversForAll()>
c0013adb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	eb e9                	jmp    c0013acb <Device::loadDriversForAll()+0x23>
c0013ae2:	83 c4 08             	add    esp,0x8
c0013ae5:	5b                   	pop    ebx
c0013ae6:	c3                   	ret    
c0013ae7:	90                   	nop

c0013ae8 <Device::closeAll()>:
c0013ae8:	53                   	push   ebx
c0013ae9:	83 ec 08             	sub    esp,0x8
c0013aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013af0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013af2:	6a 00                	push   0x0
c0013af4:	6a 00                	push   0x0
c0013af6:	6a 00                	push   0x0
c0013af8:	53                   	push   ebx
c0013af9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013afc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b08:	74 0f                	je     c0013b19 <Device::closeAll()+0x31>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b10:	e8 d3 ff ff ff       	call   c0013ae8 <Device::closeAll()>
c0013b15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b17:	eb e9                	jmp    c0013b02 <Device::closeAll()+0x1a>
c0013b19:	83 c4 08             	add    esp,0x8
c0013b1c:	5b                   	pop    ebx
c0013b1d:	c3                   	ret    

c0013b1e <Device::powerSavingAll(PowerSavingLevel)>:
c0013b1e:	56                   	push   esi
c0013b1f:	53                   	push   ebx
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2d:	56                   	push   esi
c0013b2e:	53                   	push   ebx
c0013b2f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013b32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b38:	83 c4 10             	add    esp,0x10
c0013b3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b3e:	74 0f                	je     c0013b4f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013b40:	52                   	push   edx
c0013b41:	52                   	push   edx
c0013b42:	56                   	push   esi
c0013b43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b46:	e8 d3 ff ff ff       	call   c0013b1e <Device::powerSavingAll(PowerSavingLevel)>
c0013b4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b4d:	eb e9                	jmp    c0013b38 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013b4f:	58                   	pop    eax
c0013b50:	5b                   	pop    ebx
c0013b51:	5e                   	pop    esi
c0013b52:	c3                   	ret    
c0013b53:	90                   	nop

c0013b54 <Device::setName(char const*)>:
c0013b54:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013b5c:	e9 ab cc fe ff       	jmp    c000080c <strcpy>
c0013b61:	90                   	nop

c0013b62 <Device::Device(char const*)>:
c0013b62:	83 ec 1c             	sub    esp,0x1c
c0013b65:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0013b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b6e:	89 10                	mov    DWORD PTR [eax],edx
c0013b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b74:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b82:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b90:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013b9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b9e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ba8:	83 ec 08             	sub    esp,0x8
c0013bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	e8 9c ff ff ff       	call   c0013b54 <Device::setName(char const*)>
c0013bb8:	83 c4 10             	add    esp,0x10
c0013bbb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013bc3:	83 ec 0c             	sub    esp,0xc
c0013bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bca:	e8 cd b9 ff ff       	call   c000f59c <malloc>
c0013bcf:	83 c4 10             	add    esp,0x10
c0013bd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013be3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bed:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bf3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bfd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013c15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c19:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c24:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c32:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c40:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c4e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013c58:	90                   	nop
c0013c59:	83 c4 1c             	add    esp,0x1c
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <Device::getName()>:
c0013c5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c62:	05 d0 00 00 00       	add    eax,0xd0
c0013c67:	c3                   	ret    

c0013c68 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6f:	83 ec 08             	sub    esp,0x8
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	50                   	push   eax
c0013c77:	e8 e6 fe ff ff       	call   c0013b62 <Device::Device(char const*)>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	ba dc a6 02 c0       	mov    edx,0xc002a6dc
c0013c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c88:	89 10                	mov    DWORD PTR [eax],edx
c0013c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013c98:	90                   	nop
c0013c99:	83 c4 0c             	add    esp,0xc
c0013c9c:	c3                   	ret    
c0013c9d:	90                   	nop

c0013c9e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013c9e:	57                   	push   edi
c0013c9f:	56                   	push   esi
c0013ca0:	53                   	push   ebx
c0013ca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ca5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ca9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cad:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013cb3:	75 0c                	jne    c0013cc1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013cb5:	52                   	push   edx
c0013cb6:	52                   	push   edx
c0013cb7:	53                   	push   ebx
c0013cb8:	56                   	push   esi
c0013cb9:	e8 b2 47 01 00       	call   c0028470 <LinkedList<Device>::addElement(Device*)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cca:	74 12                	je     c0013cde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ccc:	50                   	push   eax
c0013ccd:	57                   	push   edi
c0013cce:	56                   	push   esi
c0013ccf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd2:	e8 c7 ff ff ff       	call   c0013c9e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013cd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	eb e9                	jmp    c0013cc7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013cde:	5b                   	pop    ebx
c0013cdf:	5e                   	pop    esi
c0013ce0:	5f                   	pop    edi
c0013ce1:	c3                   	ret    

c0013ce2 <getDevicesOfType(DeviceType)>:
c0013ce2:	53                   	push   ebx
c0013ce3:	83 ec 14             	sub    esp,0x14
c0013ce6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cea:	53                   	push   ebx
c0013ceb:	e8 5c 48 01 00       	call   c002854c <LinkedList<Device>::LinkedList()>
c0013cf0:	83 c4 0c             	add    esp,0xc
c0013cf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cf7:	53                   	push   ebx
c0013cf8:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c0013cfe:	e8 9b ff ff ff       	call   c0013c9e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d03:	89 d8                	mov    eax,ebx
c0013d05:	83 c4 18             	add    esp,0x18
c0013d08:	5b                   	pop    ebx
c0013d09:	c2 04 00             	ret    0x4

c0013d0c <HardDiskController::HardDiskController(char const*)>:
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d13:	83 ec 08             	sub    esp,0x8
c0013d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1a:	50                   	push   eax
c0013d1b:	e8 42 fe ff ff       	call   c0013b62 <Device::Device(char const*)>
c0013d20:	83 c4 10             	add    esp,0x10
c0013d23:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0013d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2c:	89 10                	mov    DWORD PTR [eax],edx
c0013d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d32:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013d3c:	90                   	nop
c0013d3d:	83 c4 0c             	add    esp,0xc
c0013d40:	c3                   	ret    
c0013d41:	90                   	nop

c0013d42 <HardDiskController::~HardDiskController()>:
c0013d42:	83 ec 0c             	sub    esp,0xc
c0013d45:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0013d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4e:	89 10                	mov    DWORD PTR [eax],edx
c0013d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	50                   	push   eax
c0013d58:	e8 cf fa ff ff       	call   c001382c <Device::~Device()>
c0013d5d:	83 c4 10             	add    esp,0x10
c0013d60:	90                   	nop
c0013d61:	83 c4 0c             	add    esp,0xc
c0013d64:	c3                   	ret    
c0013d65:	90                   	nop

c0013d66 <HardDiskController::~HardDiskController()>:
c0013d66:	83 ec 0c             	sub    esp,0xc
c0013d69:	83 ec 0c             	sub    esp,0xc
c0013d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d70:	e8 cd ff ff ff       	call   c0013d42 <HardDiskController::~HardDiskController()>
c0013d75:	83 c4 10             	add    esp,0x10
c0013d78:	83 ec 08             	sub    esp,0x8
c0013d7b:	68 58 01 00 00       	push   0x158
c0013d80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d84:	e8 c4 e6 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	83 c4 0c             	add    esp,0xc
c0013d8f:	c3                   	ret    

c0013d90 <PhysicalDisk::eject()>:
c0013d90:	83 c8 ff             	or     eax,0xffffffff
c0013d93:	c3                   	ret    

c0013d94 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013d94:	83 ec 0c             	sub    esp,0xc
c0013d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9b:	83 ec 08             	sub    esp,0x8
c0013d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da2:	50                   	push   eax
c0013da3:	e8 ba fd ff ff       	call   c0013b62 <Device::Device(char const*)>
c0013da8:	83 c4 10             	add    esp,0x10
c0013dab:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c0013db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db4:	89 10                	mov    DWORD PTR [eax],edx
c0013db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dba:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dde:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013de2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013df6:	90                   	nop
c0013df7:	83 c4 0c             	add    esp,0xc
c0013dfa:	c3                   	ret    
c0013dfb:	90                   	nop

c0013dfc <PhysicalDisk::startCache()>:
c0013dfc:	56                   	push   esi
c0013dfd:	53                   	push   ebx
c0013dfe:	83 ec 10             	sub    esp,0x10
c0013e01:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e05:	6a 44                	push   0x44
c0013e07:	e8 90 b7 ff ff       	call   c000f59c <malloc>
c0013e0c:	89 c6                	mov    esi,eax
c0013e0e:	58                   	pop    eax
c0013e0f:	5a                   	pop    edx
c0013e10:	53                   	push   ebx
c0013e11:	56                   	push   esi
c0013e12:	e8 3f 28 00 00       	call   c0016656 <VCache::VCache(PhysicalDisk*)>
c0013e17:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013e1d:	83 c4 14             	add    esp,0x14
c0013e20:	5b                   	pop    ebx
c0013e21:	5e                   	pop    esi
c0013e22:	c3                   	ret    
c0013e23:	90                   	nop

c0013e24 <PhysicalDisk::~PhysicalDisk()>:
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c0013e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e30:	89 10                	mov    DWORD PTR [eax],edx
c0013e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e36:	83 ec 0c             	sub    esp,0xc
c0013e39:	50                   	push   eax
c0013e3a:	e8 ed f9 ff ff       	call   c001382c <Device::~Device()>
c0013e3f:	83 c4 10             	add    esp,0x10
c0013e42:	90                   	nop
c0013e43:	83 c4 0c             	add    esp,0xc
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <PhysicalDisk::~PhysicalDisk()>:
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	83 ec 0c             	sub    esp,0xc
c0013e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e52:	e8 cd ff ff ff       	call   c0013e24 <PhysicalDisk::~PhysicalDisk()>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	83 ec 08             	sub    esp,0x8
c0013e5d:	68 6c 01 00 00       	push   0x16c
c0013e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e66:	e8 e2 e5 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	83 c4 0c             	add    esp,0xc
c0013e71:	c3                   	ret    

c0013e72 <FPU::FPU(char const*)>:
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e79:	83 ec 08             	sub    esp,0x8
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	50                   	push   eax
c0013e81:	e8 dc fc ff ff       	call   c0013b62 <Device::Device(char const*)>
c0013e86:	83 c4 10             	add    esp,0x10
c0013e89:	ba 78 a7 02 c0       	mov    edx,0xc002a778
c0013e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e92:	89 10                	mov    DWORD PTR [eax],edx
c0013e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e98:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013ea2:	90                   	nop
c0013ea3:	83 c4 0c             	add    esp,0xc
c0013ea6:	c3                   	ret    
c0013ea7:	90                   	nop

c0013ea8 <FPU::~FPU()>:
c0013ea8:	83 ec 0c             	sub    esp,0xc
c0013eab:	ba 78 a7 02 c0       	mov    edx,0xc002a778
c0013eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb4:	89 10                	mov    DWORD PTR [eax],edx
c0013eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eba:	83 ec 0c             	sub    esp,0xc
c0013ebd:	50                   	push   eax
c0013ebe:	e8 69 f9 ff ff       	call   c001382c <Device::~Device()>
c0013ec3:	83 c4 10             	add    esp,0x10
c0013ec6:	90                   	nop
c0013ec7:	83 c4 0c             	add    esp,0xc
c0013eca:	c3                   	ret    
c0013ecb:	90                   	nop

c0013ecc <FPU::~FPU()>:
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	83 ec 0c             	sub    esp,0xc
c0013ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ed6:	e8 cd ff ff ff       	call   c0013ea8 <FPU::~FPU()>
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	83 ec 08             	sub    esp,0x8
c0013ee1:	68 58 01 00 00       	push   0x158
c0013ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eea:	e8 5e e5 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	83 c4 0c             	add    esp,0xc
c0013ef5:	c3                   	ret    

c0013ef6 <setupFPU()>:
c0013ef6:	53                   	push   ebx
c0013ef7:	83 ec 08             	sub    esp,0x8
c0013efa:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0013f00:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013f07:	74 19                	je     c0013f22 <setupFPU()+0x2c>
c0013f09:	83 ec 0c             	sub    esp,0xc
c0013f0c:	68 58 01 00 00       	push   0x158
c0013f11:	e8 86 b6 ff ff       	call   c000f59c <malloc>
c0013f16:	89 c3                	mov    ebx,eax
c0013f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f1b:	e8 94 11 01 00       	call   c00250b4 <AVX::AVX()>
c0013f20:	eb 5b                	jmp    c0013f7d <setupFPU()+0x87>
c0013f22:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013f28:	84 c0                	test   al,al
c0013f2a:	79 19                	jns    c0013f45 <setupFPU()+0x4f>
c0013f2c:	83 ec 0c             	sub    esp,0xc
c0013f2f:	68 58 01 00 00       	push   0x158
c0013f34:	e8 63 b6 ff ff       	call   c000f59c <malloc>
c0013f39:	89 c3                	mov    ebx,eax
c0013f3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f3e:	e8 97 12 01 00       	call   c00251da <SSE::SSE()>
c0013f43:	eb 38                	jmp    c0013f7d <setupFPU()+0x87>
c0013f45:	a8 20                	test   al,0x20
c0013f47:	74 19                	je     c0013f62 <setupFPU()+0x6c>
c0013f49:	83 ec 0c             	sub    esp,0xc
c0013f4c:	68 58 01 00 00       	push   0x158
c0013f51:	e8 46 b6 ff ff       	call   c000f59c <malloc>
c0013f56:	89 c3                	mov    ebx,eax
c0013f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f5b:	e8 e4 11 01 00       	call   c0025144 <MMX::MMX()>
c0013f60:	eb 1b                	jmp    c0013f7d <setupFPU()+0x87>
c0013f62:	a8 10                	test   al,0x10
c0013f64:	74 1c                	je     c0013f82 <setupFPU()+0x8c>
c0013f66:	83 ec 0c             	sub    esp,0xc
c0013f69:	68 58 01 00 00       	push   0x158
c0013f6e:	e8 29 b6 ff ff       	call   c000f59c <malloc>
c0013f73:	89 c3                	mov    ebx,eax
c0013f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f78:	e8 eb 12 01 00       	call   c0025268 <x87::x87()>
c0013f7d:	83 c4 10             	add    esp,0x10
c0013f80:	eb 24                	jmp    c0013fa6 <setupFPU()+0xb0>
c0013f82:	83 e0 ef             	and    eax,0xffffffef
c0013f85:	83 ec 0c             	sub    esp,0xc
c0013f88:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013f8e:	68 64 a7 02 c0       	push   0xc002a764
c0013f93:	e8 8d e5 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0013f98:	0f 20 c0             	mov    eax,cr0
c0013f9b:	83 c8 04             	or     eax,0x4
c0013f9e:	0f 22 c0             	mov    cr0,eax
c0013fa1:	31 db                	xor    ebx,ebx
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	89 d8                	mov    eax,ebx
c0013fa8:	83 c4 08             	add    esp,0x8
c0013fab:	5b                   	pop    ebx
c0013fac:	c3                   	ret    
c0013fad:	90                   	nop

c0013fae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fb6:	c1 e0 04             	shl    eax,0x4
c0013fb9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013fbd:	8d 50 10             	lea    edx,[eax+0x10]
c0013fc0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013fc6:	74 08                	je     c0013fd0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013fc8:	83 c0 04             	add    eax,0x4
c0013fcb:	39 d0                	cmp    eax,edx
c0013fcd:	75 f1                	jne    c0013fc0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013fcf:	c3                   	ret    
c0013fd0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fda:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fe4:	eb e2                	jmp    c0013fc8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013fe6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013fe6:	57                   	push   edi
c0013fe7:	31 c0                	xor    eax,eax
c0013fe9:	56                   	push   esi
c0013fea:	53                   	push   ebx
c0013feb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013ff3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ff7:	89 da                	mov    edx,ebx
c0013ff9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ffd:	c1 e2 04             	shl    edx,0x4
c0014000:	01 ca                	add    edx,ecx
c0014002:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001400a:	74 16                	je     c0014022 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001400c:	40                   	inc    eax
c001400d:	83 f8 04             	cmp    eax,0x4
c0014010:	75 f0                	jne    c0014002 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014012:	c7 44 24 10 a8 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a7a8
c001401a:	5b                   	pop    ebx
c001401b:	5e                   	pop    esi
c001401c:	5f                   	pop    edi
c001401d:	e9 3d 5c 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c0014022:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014025:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014028:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001402e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014034:	5b                   	pop    ebx
c0014035:	5e                   	pop    esi
c0014036:	5f                   	pop    edi
c0014037:	c3                   	ret    

c0014038 <doubleFault(regs*, void*)>:
c0014038:	55                   	push   ebp
c0014039:	89 e5                	mov    ebp,esp
c001403b:	83 ec 08             	sub    esp,0x8
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	68 b5 a7 02 c0       	push   0xc002a7b5
c0014046:	e8 14 5c 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	90                   	nop
c001404f:	c9                   	leave  
c0014050:	c3                   	ret    
c0014051:	90                   	nop

c0014052 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014052:	56                   	push   esi
c0014053:	53                   	push   ebx
c0014054:	50                   	push   eax
c0014055:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014059:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001405d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014062:	75 35                	jne    c0014099 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014064:	8d 43 20             	lea    eax,[ebx+0x20]
c0014067:	31 d2                	xor    edx,edx
c0014069:	89 c1                	mov    ecx,eax
c001406b:	c1 e1 04             	shl    ecx,0x4
c001406e:	01 f1                	add    ecx,esi
c0014070:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014078:	74 3e                	je     c00140b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001407a:	42                   	inc    edx
c001407b:	83 fa 04             	cmp    edx,0x4
c001407e:	75 f0                	jne    c0014070 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	68 cf a7 02 c0       	push   0xc002a7cf
c0014088:	e8 d2 5b 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014095:	5a                   	pop    edx
c0014096:	5b                   	pop    ebx
c0014097:	5e                   	pop    esi
c0014098:	c3                   	ret    
c0014099:	83 ec 0c             	sub    esp,0xc
c001409c:	56                   	push   esi
c001409d:	e8 bc fb ff ff       	call   c0013c5e <Device::getName()>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00140a8:	75 ba                	jne    c0014064 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140aa:	83 fb 0f             	cmp    ebx,0xf
c00140ad:	7f 29                	jg     c00140d8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00140af:	0f b6 9b 00 c8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3800]
c00140b6:	eb ac                	jmp    c0014064 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140b8:	8d 04 82             	lea    eax,[edx+eax*4]
c00140bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140bf:	8d 04 86             	lea    eax,[esi+eax*4]
c00140c2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00140c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140cc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00140d2:	89 d8                	mov    eax,ebx
c00140d4:	5a                   	pop    edx
c00140d5:	5b                   	pop    ebx
c00140d6:	5e                   	pop    esi
c00140d7:	c3                   	ret    
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	68 c2 a7 02 c0       	push   0xc002a7c2
c00140e0:	e8 7a 5b 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	e9 77 ff ff ff       	jmp    c0014064 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140ed:	90                   	nop

c00140ee <InterruptController::clearAllHandlers(int, bool)>:
c00140ee:	56                   	push   esi
c00140ef:	53                   	push   ebx
c00140f0:	52                   	push   edx
c00140f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140f9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00140fe:	75 61                	jne    c0014161 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014100:	8d 46 20             	lea    eax,[esi+0x20]
c0014103:	c1 e6 04             	shl    esi,0x4
c0014106:	c1 e0 04             	shl    eax,0x4
c0014109:	01 de                	add    esi,ebx
c001410b:	01 d8                	add    eax,ebx
c001410d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014117:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014121:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001412b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014135:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001413f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014149:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014153:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001415d:	58                   	pop    eax
c001415e:	5b                   	pop    ebx
c001415f:	5e                   	pop    esi
c0014160:	c3                   	ret    
c0014161:	83 ec 0c             	sub    esp,0xc
c0014164:	53                   	push   ebx
c0014165:	e8 f4 fa ff ff       	call   c0013c5e <Device::getName()>
c001416a:	83 c4 10             	add    esp,0x10
c001416d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014170:	75 8e                	jne    c0014100 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014172:	83 fe 0f             	cmp    esi,0xf
c0014175:	7f 09                	jg     c0014180 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014177:	0f b6 b6 00 c8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3800]
c001417e:	eb 80                	jmp    c0014100 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014180:	83 ec 0c             	sub    esp,0xc
c0014183:	68 dc a7 02 c0       	push   0xc002a7dc
c0014188:	e8 d2 5a 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	e9 6b ff ff ff       	jmp    c0014100 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014195:	90                   	nop

c0014196 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014196:	56                   	push   esi
c0014197:	53                   	push   ebx
c0014198:	52                   	push   edx
c0014199:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001419d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141a1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141a6:	75 3a                	jne    c00141e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00141a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ac:	8d 50 20             	lea    edx,[eax+0x20]
c00141af:	c1 e2 04             	shl    edx,0x4
c00141b2:	8d 04 16             	lea    eax,[esi+edx*1]
c00141b5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00141b9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00141bf:	74 0b                	je     c00141cc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00141c1:	83 c0 04             	add    eax,0x4
c00141c4:	39 d0                	cmp    eax,edx
c00141c6:	75 f1                	jne    c00141b9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00141c8:	58                   	pop    eax
c00141c9:	5b                   	pop    ebx
c00141ca:	5e                   	pop    esi
c00141cb:	c3                   	ret    
c00141cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141d6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141e0:	eb df                	jmp    c00141c1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	56                   	push   esi
c00141e6:	e8 73 fa ff ff       	call   c0013c5e <Device::getName()>
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141f1:	75 b5                	jne    c00141a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00141f3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00141f8:	7f 11                	jg     c001420b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00141fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141fe:	0f b6 80 00 c8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3800]
c0014205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014209:	eb 9d                	jmp    c00141a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	68 e9 a7 02 c0       	push   0xc002a7e9
c0014213:	e8 47 5a 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	eb 8b                	jmp    c00141a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001421d <nmiHandler(regs*, void*)>:
c001421d:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014222:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014226:	e9 d5 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c001422b <int_handler>:
c001422b:	55                   	push   ebp
c001422c:	57                   	push   edi
c001422d:	56                   	push   esi
c001422e:	53                   	push   ebx
c001422f:	83 ec 0c             	sub    esp,0xc
c0014232:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014236:	80 3d e4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300e4,0x0
c001423d:	74 0b                	je     c001424a <int_handler+0x1f>
c001423f:	fa                   	cli    
c0014240:	f4                   	hlt    
c0014241:	80 3d e4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300e4,0x0
c0014248:	75 f5                	jne    c001423f <int_handler+0x14>
c001424a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001424f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014258:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001425e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014261:	83 f8 17             	cmp    eax,0x17
c0014264:	77 13                	ja     c0014279 <int_handler+0x4e>
c0014266:	83 ec 08             	sub    esp,0x8
c0014269:	8b 17                	mov    edx,DWORD PTR [edi]
c001426b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001426e:	0f b6 c0             	movzx  eax,al
c0014271:	50                   	push   eax
c0014272:	57                   	push   edi
c0014273:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014276:	83 c4 10             	add    esp,0x10
c0014279:	83 c3 15             	add    ebx,0x15
c001427c:	c1 e3 04             	shl    ebx,0x4
c001427f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014283:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001428a:	31 db                	xor    ebx,ebx
c001428c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014290:	85 c0                	test   eax,eax
c0014292:	74 13                	je     c00142a7 <int_handler+0x7c>
c0014294:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014297:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001429b:	74 1c                	je     c00142b9 <int_handler+0x8e>
c001429d:	83 ec 08             	sub    esp,0x8
c00142a0:	52                   	push   edx
c00142a1:	56                   	push   esi
c00142a2:	ff d0                	call   eax
c00142a4:	83 c4 10             	add    esp,0x10
c00142a7:	43                   	inc    ebx
c00142a8:	83 fb 04             	cmp    ebx,0x4
c00142ab:	75 df                	jne    c001428c <int_handler+0x61>
c00142ad:	83 c4 0c             	add    esp,0xc
c00142b0:	31 c0                	xor    eax,eax
c00142b2:	5b                   	pop    ebx
c00142b3:	31 d2                	xor    edx,edx
c00142b5:	5e                   	pop    esi
c00142b6:	5f                   	pop    edi
c00142b7:	5d                   	pop    ebp
c00142b8:	c3                   	ret    
c00142b9:	83 ec 08             	sub    esp,0x8
c00142bc:	52                   	push   edx
c00142bd:	56                   	push   esi
c00142be:	ff d0                	call   eax
c00142c0:	83 c4 10             	add    esp,0x10
c00142c3:	83 c4 0c             	add    esp,0xc
c00142c6:	5b                   	pop    ebx
c00142c7:	5e                   	pop    esi
c00142c8:	5f                   	pop    edi
c00142c9:	5d                   	pop    ebp
c00142ca:	c3                   	ret    
c00142cb:	90                   	nop

c00142cc <InterruptController::InterruptController(char const*)>:
c00142cc:	83 ec 1c             	sub    esp,0x1c
c00142cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d3:	83 ec 08             	sub    esp,0x8
c00142d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142da:	50                   	push   eax
c00142db:	e8 82 f8 ff ff       	call   c0013b62 <Device::Device(char const*)>
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00142e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142ec:	89 10                	mov    DWORD PTR [eax],edx
c00142ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142f2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00142fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014304:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001430c:	7f 5e                	jg     c001436c <InterruptController::InterruptController(char const*)+0xa0>
c001430e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014316:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001431b:	7f 49                	jg     c0014366 <InterruptController::InterruptController(char const*)+0x9a>
c001431d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014321:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014325:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001432c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014330:	01 ca                	add    edx,ecx
c0014332:	83 c2 54             	add    edx,0x54
c0014335:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001433d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014341:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014345:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001434c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014350:	01 ca                	add    edx,ecx
c0014352:	81 c2 54 04 00 00    	add    edx,0x454
c0014358:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014360:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014364:	eb b0                	jmp    c0014316 <InterruptController::InterruptController(char const*)+0x4a>
c0014366:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001436a:	eb 98                	jmp    c0014304 <InterruptController::InterruptController(char const*)+0x38>
c001436c:	90                   	nop
c001436d:	83 c4 1c             	add    esp,0x1c
c0014370:	c3                   	ret    
c0014371:	90                   	nop

c0014372 <InterruptController::~InterruptController()>:
c0014372:	83 ec 0c             	sub    esp,0xc
c0014375:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c001437a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437e:	89 10                	mov    DWORD PTR [eax],edx
c0014380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	50                   	push   eax
c0014388:	e8 9f f4 ff ff       	call   c001382c <Device::~Device()>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	90                   	nop
c0014391:	83 c4 0c             	add    esp,0xc
c0014394:	c3                   	ret    
c0014395:	90                   	nop

c0014396 <InterruptController::~InterruptController()>:
c0014396:	83 ec 0c             	sub    esp,0xc
c0014399:	83 ec 0c             	sub    esp,0xc
c001439c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143a0:	e8 cd ff ff ff       	call   c0014372 <InterruptController::~InterruptController()>
c00143a5:	83 c4 10             	add    esp,0x10
c00143a8:	83 ec 08             	sub    esp,0x8
c00143ab:	68 58 21 00 00       	push   0x2158
c00143b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143b4:	e8 94 e0 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	83 c4 0c             	add    esp,0xc
c00143bf:	c3                   	ret    

c00143c0 <displayDebugInfo(regs*)>:
c00143c0:	55                   	push   ebp
c00143c1:	57                   	push   edi
c00143c2:	56                   	push   esi
c00143c3:	53                   	push   ebx
c00143c4:	83 ec 24             	sub    esp,0x24
c00143c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00143cb:	0f 20 c2             	mov    edx,cr0
c00143ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00143d2:	0f 20 d7             	mov    edi,cr2
c00143d5:	0f 20 de             	mov    esi,cr3
c00143d8:	0f 20 e5             	mov    ebp,cr4
c00143db:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00143de:	68 f6 a7 02 c0       	push   0xc002a7f6
c00143e3:	e8 3d e1 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00143e8:	59                   	pop    ecx
c00143e9:	58                   	pop    eax
c00143ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143ed:	68 01 a8 02 c0       	push   0xc002a801
c00143f2:	e8 2e e1 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00143f7:	58                   	pop    eax
c00143f8:	5a                   	pop    edx
c00143f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143fc:	68 0c a8 02 c0       	push   0xc002a80c
c0014401:	e8 1f e1 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014406:	59                   	pop    ecx
c0014407:	58                   	pop    eax
c0014408:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001440b:	68 17 a8 02 c0       	push   0xc002a817
c0014410:	e8 10 e1 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014415:	58                   	pop    eax
c0014416:	5a                   	pop    edx
c0014417:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001441a:	68 22 a8 02 c0       	push   0xc002a822
c001441f:	e8 01 e1 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014424:	59                   	pop    ecx
c0014425:	58                   	pop    eax
c0014426:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014429:	68 2d a8 02 c0       	push   0xc002a82d
c001442e:	e8 f2 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014433:	58                   	pop    eax
c0014434:	5a                   	pop    edx
c0014435:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014438:	68 38 a8 02 c0       	push   0xc002a838
c001443d:	e8 e3 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014442:	59                   	pop    ecx
c0014443:	58                   	pop    eax
c0014444:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014447:	68 43 a8 02 c0       	push   0xc002a843
c001444c:	e8 d4 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014451:	58                   	pop    eax
c0014452:	5a                   	pop    edx
c0014453:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014456:	68 4e a8 02 c0       	push   0xc002a84e
c001445b:	e8 c5 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014460:	59                   	pop    ecx
c0014461:	58                   	pop    eax
c0014462:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014465:	68 5d a8 02 c0       	push   0xc002a85d
c001446a:	e8 b6 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001446f:	58                   	pop    eax
c0014470:	5a                   	pop    edx
c0014471:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014474:	68 68 a8 02 c0       	push   0xc002a868
c0014479:	e8 a7 e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001447e:	59                   	pop    ecx
c001447f:	58                   	pop    eax
c0014480:	57                   	push   edi
c0014481:	68 73 a8 02 c0       	push   0xc002a873
c0014486:	e8 9a e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001448b:	58                   	pop    eax
c001448c:	5a                   	pop    edx
c001448d:	56                   	push   esi
c001448e:	68 7e a8 02 c0       	push   0xc002a87e
c0014493:	e8 8d e0 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014498:	59                   	pop    ecx
c0014499:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001449e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144a4:	e8 2e be ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c00144a9:	58                   	pop    eax
c00144aa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144ad:	5a                   	pop    edx
c00144ae:	c1 e0 05             	shl    eax,0x5
c00144b1:	05 60 c5 02 c0       	add    eax,0xc002c560
c00144b6:	50                   	push   eax
c00144b7:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144c2:	e8 1d c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144c7:	59                   	pop    ecx
c00144c8:	58                   	pop    eax
c00144c9:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144ce:	68 89 a8 02 c0       	push   0xc002a889
c00144d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144d9:	e8 06 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144de:	58                   	pop    eax
c00144df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144e4:	5a                   	pop    edx
c00144e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00144e8:	83 c0 0c             	add    eax,0xc
c00144eb:	50                   	push   eax
c00144ec:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f7:	e8 e8 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144fc:	59                   	pop    ecx
c00144fd:	58                   	pop    eax
c00144fe:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014503:	68 92 a8 02 c0       	push   0xc002a892
c0014508:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001450e:	e8 d1 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014513:	58                   	pop    eax
c0014514:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014519:	5a                   	pop    edx
c001451a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001451d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014523:	e8 76 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014528:	59                   	pop    ecx
c0014529:	58                   	pop    eax
c001452a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001452f:	68 9a a8 02 c0       	push   0xc002a89a
c0014534:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001453a:	e8 a5 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001453f:	58                   	pop    eax
c0014540:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014545:	5a                   	pop    edx
c0014546:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014549:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454f:	e8 4a c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014554:	59                   	pop    ecx
c0014555:	58                   	pop    eax
c0014556:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001455b:	68 a2 a8 02 c0       	push   0xc002a8a2
c0014560:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014566:	e8 79 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001456b:	58                   	pop    eax
c001456c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014571:	5a                   	pop    edx
c0014572:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014575:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001457b:	e8 1e c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014580:	59                   	pop    ecx
c0014581:	58                   	pop    eax
c0014582:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014587:	68 aa a8 02 c0       	push   0xc002a8aa
c001458c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014592:	e8 4d c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014597:	58                   	pop    eax
c0014598:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001459d:	5a                   	pop    edx
c001459e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00145a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a7:	e8 f2 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145ac:	59                   	pop    ecx
c00145ad:	58                   	pop    eax
c00145ae:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145b3:	68 b2 a8 02 c0       	push   0xc002a8b2
c00145b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145be:	e8 21 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145c3:	58                   	pop    eax
c00145c4:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145c9:	5a                   	pop    edx
c00145ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d3:	e8 c6 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145d8:	59                   	pop    ecx
c00145d9:	58                   	pop    eax
c00145da:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145df:	68 ba a8 02 c0       	push   0xc002a8ba
c00145e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ea:	e8 f5 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145ef:	58                   	pop    eax
c00145f0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145f5:	5a                   	pop    edx
c00145f6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00145f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ff:	e8 9a c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014604:	59                   	pop    ecx
c0014605:	58                   	pop    eax
c0014606:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001460b:	68 c2 a8 02 c0       	push   0xc002a8c2
c0014610:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014616:	e8 c9 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001461b:	58                   	pop    eax
c001461c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014621:	5a                   	pop    edx
c0014622:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014626:	52                   	push   edx
c0014627:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462d:	e8 6c c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014632:	59                   	pop    ecx
c0014633:	58                   	pop    eax
c0014634:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014639:	68 cb a8 02 c0       	push   0xc002a8cb
c001463e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014644:	e8 9b c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014649:	58                   	pop    eax
c001464a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001464f:	5a                   	pop    edx
c0014650:	57                   	push   edi
c0014651:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014657:	e8 42 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001465c:	59                   	pop    ecx
c001465d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014662:	5f                   	pop    edi
c0014663:	68 d3 a8 02 c0       	push   0xc002a8d3
c0014668:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466e:	e8 71 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014673:	58                   	pop    eax
c0014674:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014679:	5a                   	pop    edx
c001467a:	56                   	push   esi
c001467b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014681:	e8 18 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014686:	59                   	pop    ecx
c0014687:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001468c:	5e                   	pop    esi
c001468d:	68 db a8 02 c0       	push   0xc002a8db
c0014692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014698:	e8 47 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001469d:	5f                   	pop    edi
c001469e:	58                   	pop    eax
c001469f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146a4:	55                   	push   ebp
c00146a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ab:	e8 ee c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146b0:	58                   	pop    eax
c00146b1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146b6:	5a                   	pop    edx
c00146b7:	68 e3 a8 02 c0       	push   0xc002a8e3
c00146bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c2:	e8 1d c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146c7:	0f 21 c0             	mov    eax,db0
c00146ca:	59                   	pop    ecx
c00146cb:	5e                   	pop    esi
c00146cc:	50                   	push   eax
c00146cd:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d8:	e8 c1 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146dd:	5f                   	pop    edi
c00146de:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146e3:	5d                   	pop    ebp
c00146e4:	68 ec a8 02 c0       	push   0xc002a8ec
c00146e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ef:	e8 f0 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146f4:	0f 21 c8             	mov    eax,db1
c00146f7:	5a                   	pop    edx
c00146f8:	59                   	pop    ecx
c00146f9:	50                   	push   eax
c00146fa:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014705:	e8 94 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001470a:	5e                   	pop    esi
c001470b:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014710:	5f                   	pop    edi
c0014711:	68 f4 a8 02 c0       	push   0xc002a8f4
c0014716:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471c:	e8 c3 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014721:	0f 21 d0             	mov    eax,db2
c0014724:	5d                   	pop    ebp
c0014725:	5a                   	pop    edx
c0014726:	50                   	push   eax
c0014727:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001472c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014732:	e8 67 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014737:	59                   	pop    ecx
c0014738:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001473d:	5e                   	pop    esi
c001473e:	68 fc a8 02 c0       	push   0xc002a8fc
c0014743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014749:	e8 96 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001474e:	0f 21 d8             	mov    eax,db3
c0014751:	5f                   	pop    edi
c0014752:	5d                   	pop    ebp
c0014753:	50                   	push   eax
c0014754:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014759:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475f:	e8 3a c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014764:	58                   	pop    eax
c0014765:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001476a:	5a                   	pop    edx
c001476b:	68 04 a9 02 c0       	push   0xc002a904
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 69 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001477b:	0f 21 f0             	mov    eax,db6
c001477e:	59                   	pop    ecx
c001477f:	5e                   	pop    esi
c0014780:	50                   	push   eax
c0014781:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014786:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478c:	e8 0d c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014791:	5f                   	pop    edi
c0014792:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014797:	5d                   	pop    ebp
c0014798:	68 0c a9 02 c0       	push   0xc002a90c
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 3c c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147a8:	0f 21 f8             	mov    eax,db7
c00147ab:	5a                   	pop    edx
c00147ac:	59                   	pop    ecx
c00147ad:	50                   	push   eax
c00147ae:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b9:	e8 e0 bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00147be:	5e                   	pop    esi
c00147bf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147c2:	e8 11 86 00 00       	call   c001cdd8 <Thr::getDriverNameFromAddress(unsigned long)>
c00147c7:	83 c4 10             	add    esp,0x10
c00147ca:	85 c0                	test   eax,eax
c00147cc:	74 7d                	je     c001484b <displayDebugInfo(regs*)+0x48b>
c00147ce:	89 c6                	mov    esi,eax
c00147d0:	50                   	push   eax
c00147d1:	50                   	push   eax
c00147d2:	56                   	push   esi
c00147d3:	68 14 a9 02 c0       	push   0xc002a914
c00147d8:	e8 48 dd ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00147dd:	5a                   	pop    edx
c00147de:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147e3:	59                   	pop    ecx
c00147e4:	68 22 a9 02 c0       	push   0xc002a922
c00147e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ef:	e8 f0 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147f4:	5f                   	pop    edi
c00147f5:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147fa:	5d                   	pop    ebp
c00147fb:	56                   	push   esi
c00147fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014802:	e8 dd bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014807:	58                   	pop    eax
c0014808:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001480d:	5a                   	pop    edx
c001480e:	68 2e a9 02 c0       	push   0xc002a92e
c0014813:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014819:	e8 c6 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001481e:	59                   	pop    ecx
c001481f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014824:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001482a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001482d:	e8 dd 85 00 00       	call   c001ce0f <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014832:	5b                   	pop    ebx
c0014833:	5d                   	pop    ebp
c0014834:	50                   	push   eax
c0014835:	57                   	push   edi
c0014836:	e8 63 bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001483b:	58                   	pop    eax
c001483c:	5a                   	pop    edx
c001483d:	56                   	push   esi
c001483e:	68 3a a9 02 c0       	push   0xc002a93a
c0014843:	e8 dd dc ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	fa                   	cli    
c001484c:	f4                   	hlt    
c001484d:	eb fe                	jmp    c001484d <displayDebugInfo(regs*)+0x48d>

c001484f <x87EmulHandler(regs*, void*)>:
c001484f:	83 ec 0c             	sub    esp,0xc
c0014852:	0f 20 c2             	mov    edx,cr0
c0014855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485a:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001485e:	75 4b                	jne    c00148ab <x87EmulHandler(regs*, void*)+0x5c>
c0014860:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014865:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001486b:	85 c0                	test   eax,eax
c001486d:	74 05                	je     c0014874 <x87EmulHandler(regs*, void*)+0x25>
c001486f:	83 e2 08             	and    edx,0x8
c0014872:	75 17                	jne    c001488b <x87EmulHandler(regs*, void*)+0x3c>
c0014874:	83 ec 0c             	sub    esp,0xc
c0014877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487b:	e8 29 a9 00 00       	call   c001f1a9 <Vm::x87Handler(regs*)>
c0014880:	83 c4 10             	add    esp,0x10
c0014883:	84 c0                	test   al,al
c0014885:	74 24                	je     c00148ab <x87EmulHandler(regs*, void*)+0x5c>
c0014887:	83 c4 0c             	add    esp,0xc
c001488a:	c3                   	ret    
c001488b:	83 ec 0c             	sub    esp,0xc
c001488e:	68 60 a9 02 c0       	push   0xc002a960
c0014893:	e8 8d dc ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014898:	0f 06                	clts   
c001489a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	a3 28 d7 02 c0       	mov    ds:0xc002d728,eax
c00148a7:	83 c4 0c             	add    esp,0xc
c00148aa:	c3                   	ret    
c00148ab:	83 ec 0c             	sub    esp,0xc
c00148ae:	68 4a a9 02 c0       	push   0xc002a94a
c00148b3:	e8 6d dc ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00148b8:	5a                   	pop    edx
c00148b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148bd:	e8 fe fa ff ff       	call   c00143c0 <displayDebugInfo(regs*)>

c00148c2 <gpFault(regs*, void*)>:
c00148c2:	53                   	push   ebx
c00148c3:	83 ec 14             	sub    esp,0x14
c00148c6:	c7 05 24 d7 02 c0 82 e6 01 c0 	mov    DWORD PTR ds:0xc002d724,0xc001e682
c00148d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148d4:	53                   	push   ebx
c00148d5:	e8 a8 9d 00 00       	call   c001e682 <Vm::faultHandler(regs*)>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	84 c0                	test   al,al
c00148df:	74 05                	je     c00148e6 <gpFault(regs*, void*)+0x24>
c00148e1:	83 c4 08             	add    esp,0x8
c00148e4:	5b                   	pop    ebx
c00148e5:	c3                   	ret    
c00148e6:	83 ec 0c             	sub    esp,0xc
c00148e9:	68 6d a9 02 c0       	push   0xc002a96d
c00148ee:	e8 32 dc ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00148f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148f6:	e8 c5 fa ff ff       	call   c00143c0 <displayDebugInfo(regs*)>

c00148fb <pgFault(regs*, void*)>:
c00148fb:	83 ec 18             	sub    esp,0x18
c00148fe:	68 88 a9 02 c0       	push   0xc002a988
c0014903:	e8 1d dc ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014908:	58                   	pop    eax
c0014909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001490d:	e8 ae fa ff ff       	call   c00143c0 <displayDebugInfo(regs*)>

c0014912 <otherISRHandler(regs*, void*)>:
c0014912:	53                   	push   ebx
c0014913:	83 ec 0c             	sub    esp,0xc
c0014916:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001491a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001491d:	50                   	push   eax
c001491e:	50                   	push   eax
c001491f:	68 95 a9 02 c0       	push   0xc002a995
c0014924:	e8 fc db ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014929:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001492c:	e8 8f fa ff ff       	call   c00143c0 <displayDebugInfo(regs*)>

c0014931 <opcodeFault(regs*, void*)>:
c0014931:	55                   	push   ebp
c0014932:	89 e5                	mov    ebp,esp
c0014934:	56                   	push   esi
c0014935:	53                   	push   ebx
c0014936:	83 ec 40             	sub    esp,0x40
c0014939:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001493e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014944:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001494a:	84 c0                	test   al,al
c001494c:	74 24                	je     c0014972 <opcodeFault(regs*, void*)+0x41>
c001494e:	83 ec 0c             	sub    esp,0xc
c0014951:	68 b4 a9 02 c0       	push   0xc002a9b4
c0014956:	e8 ca db ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001495b:	83 c4 10             	add    esp,0x10
c001495e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014961:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014964:	8d 50 19             	lea    edx,[eax+0x19]
c0014967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001496a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001496d:	e9 d5 05 00 00       	jmp    c0014f47 <opcodeFault(regs*, void*)+0x616>
c0014972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014975:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014978:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001497b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001497f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014986:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014989:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001498c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001498f:	8a 00                	mov    al,BYTE PTR [eax]
c0014991:	3c f0                	cmp    al,0xf0
c0014993:	75 17                	jne    c00149ac <opcodeFault(regs*, void*)+0x7b>
c0014995:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001499e:	8d 50 01             	lea    edx,[eax+0x1]
c00149a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149a7:	e9 da 00 00 00       	jmp    c0014a86 <opcodeFault(regs*, void*)+0x155>
c00149ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149af:	8a 00                	mov    al,BYTE PTR [eax]
c00149b1:	3c f2                	cmp    al,0xf2
c00149b3:	74 09                	je     c00149be <opcodeFault(regs*, void*)+0x8d>
c00149b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b8:	8a 00                	mov    al,BYTE PTR [eax]
c00149ba:	3c f3                	cmp    al,0xf3
c00149bc:	75 1b                	jne    c00149d9 <opcodeFault(regs*, void*)+0xa8>
c00149be:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149cb:	8d 50 01             	lea    edx,[eax+0x1]
c00149ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149d4:	e9 ad 00 00 00       	jmp    c0014a86 <opcodeFault(regs*, void*)+0x155>
c00149d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149dc:	8a 00                	mov    al,BYTE PTR [eax]
c00149de:	3c 66                	cmp    al,0x66
c00149e0:	75 1f                	jne    c0014a01 <opcodeFault(regs*, void*)+0xd0>
c00149e2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149e6:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149ea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f3:	8d 50 01             	lea    edx,[eax+0x1]
c00149f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149fc:	e9 85 00 00 00       	jmp    c0014a86 <opcodeFault(regs*, void*)+0x155>
c0014a01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a04:	8a 00                	mov    al,BYTE PTR [eax]
c0014a06:	3c 67                	cmp    al,0x67
c0014a08:	75 18                	jne    c0014a22 <opcodeFault(regs*, void*)+0xf1>
c0014a0a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a0e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a17:	8d 50 01             	lea    edx,[eax+0x1]
c0014a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a20:	eb 64                	jmp    c0014a86 <opcodeFault(regs*, void*)+0x155>
c0014a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a25:	8a 00                	mov    al,BYTE PTR [eax]
c0014a27:	3c 2e                	cmp    al,0x2e
c0014a29:	74 09                	je     c0014a34 <opcodeFault(regs*, void*)+0x103>
c0014a2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a30:	3c 3e                	cmp    al,0x3e
c0014a32:	75 18                	jne    c0014a4c <opcodeFault(regs*, void*)+0x11b>
c0014a34:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a41:	8d 50 01             	lea    edx,[eax+0x1]
c0014a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a4a:	eb 3a                	jmp    c0014a86 <opcodeFault(regs*, void*)+0x155>
c0014a4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a51:	3c 36                	cmp    al,0x36
c0014a53:	74 1b                	je     c0014a70 <opcodeFault(regs*, void*)+0x13f>
c0014a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a58:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5a:	3c 26                	cmp    al,0x26
c0014a5c:	74 12                	je     c0014a70 <opcodeFault(regs*, void*)+0x13f>
c0014a5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a61:	8a 00                	mov    al,BYTE PTR [eax]
c0014a63:	3c 64                	cmp    al,0x64
c0014a65:	74 09                	je     c0014a70 <opcodeFault(regs*, void*)+0x13f>
c0014a67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6c:	3c 65                	cmp    al,0x65
c0014a6e:	75 16                	jne    c0014a86 <opcodeFault(regs*, void*)+0x155>
c0014a70:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a7d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a89:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8b:	3c 0f                	cmp    al,0xf
c0014a8d:	0f 85 ad 00 00 00    	jne    c0014b40 <opcodeFault(regs*, void*)+0x20f>
c0014a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a96:	40                   	inc    eax
c0014a97:	8a 00                	mov    al,BYTE PTR [eax]
c0014a99:	3c c2                	cmp    al,0xc2
c0014a9b:	74 0e                	je     c0014aab <opcodeFault(regs*, void*)+0x17a>
c0014a9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa0:	40                   	inc    eax
c0014aa1:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa3:	3c c3                	cmp    al,0xc3
c0014aa5:	0f 85 95 00 00 00    	jne    c0014b40 <opcodeFault(regs*, void*)+0x20f>
c0014aab:	83 ec 0c             	sub    esp,0xc
c0014aae:	68 d7 a9 02 c0       	push   0xc002a9d7
c0014ab3:	e8 6d da ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014ab8:	83 c4 10             	add    esp,0x10
c0014abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad2:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ad5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad8:	88 10                	mov    BYTE PTR [eax],dl
c0014ada:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014add:	50                   	push   eax
c0014ade:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ae1:	50                   	push   eax
c0014ae2:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ae5:	50                   	push   eax
c0014ae6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ae9:	e8 8a 48 00 00       	call   c0019378 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014af7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014afa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014afd:	01 d0                	add    eax,edx
c0014aff:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b08:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b0b:	48                   	dec    eax
c0014b0c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b12:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1b:	83 ec 04             	sub    esp,0x4
c0014b1e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b21:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b24:	50                   	push   eax
c0014b25:	e8 8a b6 fe ff       	call   c00001b4 <voodooXADD>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b30:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b33:	01 c2                	add    edx,eax
c0014b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b38:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b3b:	e9 07 04 00 00       	jmp    c0014f47 <opcodeFault(regs*, void*)+0x616>
c0014b40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b43:	8a 00                	mov    al,BYTE PTR [eax]
c0014b45:	3c 0f                	cmp    al,0xf
c0014b47:	0f 85 8b 01 00 00    	jne    c0014cd8 <opcodeFault(regs*, void*)+0x3a7>
c0014b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b50:	40                   	inc    eax
c0014b51:	8a 00                	mov    al,BYTE PTR [eax]
c0014b53:	3c c7                	cmp    al,0xc7
c0014b55:	0f 86 7d 01 00 00    	jbe    c0014cd8 <opcodeFault(regs*, void*)+0x3a7>
c0014b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b5e:	40                   	inc    eax
c0014b5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b61:	3c cf                	cmp    al,0xcf
c0014b63:	0f 87 6f 01 00 00    	ja     c0014cd8 <opcodeFault(regs*, void*)+0x3a7>
c0014b69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6c:	40                   	inc    eax
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	83 c0 38             	add    eax,0x38
c0014b72:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b75:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b79:	75 0b                	jne    c0014b86 <opcodeFault(regs*, void*)+0x255>
c0014b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b84:	eb 75                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014b86:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b8a:	75 0b                	jne    c0014b97 <opcodeFault(regs*, void*)+0x266>
c0014b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b95:	eb 64                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014b97:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014b9b:	75 0b                	jne    c0014ba8 <opcodeFault(regs*, void*)+0x277>
c0014b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ba3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba6:	eb 53                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014ba8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bac:	75 0b                	jne    c0014bb9 <opcodeFault(regs*, void*)+0x288>
c0014bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bb4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb7:	eb 42                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014bb9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bbd:	75 0b                	jne    c0014bca <opcodeFault(regs*, void*)+0x299>
c0014bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bc5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bc8:	eb 31                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014bca:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bce:	75 0b                	jne    c0014bdb <opcodeFault(regs*, void*)+0x2aa>
c0014bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014bd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd9:	eb 20                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014bdb:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bdf:	75 0b                	jne    c0014bec <opcodeFault(regs*, void*)+0x2bb>
c0014be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014be7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bea:	eb 0f                	jmp    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014bec:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bf0:	75 09                	jne    c0014bfb <opcodeFault(regs*, void*)+0x2ca>
c0014bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014bf8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bfb:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014bff:	74 10                	je     c0014c11 <opcodeFault(regs*, void*)+0x2e0>
c0014c01:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c08:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c0f:	eb 2d                	jmp    c0014c3e <opcodeFault(regs*, void*)+0x30d>
c0014c11:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c14:	c1 e0 18             	shl    eax,0x18
c0014c17:	89 c2                	mov    edx,eax
c0014c19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c1c:	c1 e0 08             	shl    eax,0x8
c0014c1f:	25 00 00 ff 00       	and    eax,0xff0000
c0014c24:	09 c2                	or     edx,eax
c0014c26:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c29:	c1 e8 08             	shr    eax,0x8
c0014c2c:	25 00 ff 00 00       	and    eax,0xff00
c0014c31:	09 c2                	or     edx,eax
c0014c33:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c36:	c1 e8 18             	shr    eax,0x18
c0014c39:	09 d0                	or     eax,edx
c0014c3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c3e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c42:	75 0b                	jne    c0014c4f <opcodeFault(regs*, void*)+0x31e>
c0014c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c47:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c4a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c4d:	eb 75                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014c4f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c53:	75 0b                	jne    c0014c60 <opcodeFault(regs*, void*)+0x32f>
c0014c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c58:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c5b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c5e:	eb 64                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014c60:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c64:	75 0b                	jne    c0014c71 <opcodeFault(regs*, void*)+0x340>
c0014c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c69:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c6c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c6f:	eb 53                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014c71:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c75:	75 0b                	jne    c0014c82 <opcodeFault(regs*, void*)+0x351>
c0014c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c7d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c80:	eb 42                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014c82:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c86:	75 0b                	jne    c0014c93 <opcodeFault(regs*, void*)+0x362>
c0014c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c8e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c91:	eb 31                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014c93:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c97:	75 0b                	jne    c0014ca4 <opcodeFault(regs*, void*)+0x373>
c0014c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c9f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ca2:	eb 20                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014ca4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ca8:	75 0b                	jne    c0014cb5 <opcodeFault(regs*, void*)+0x384>
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cb3:	eb 0f                	jmp    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014cb5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cb9:	75 09                	jne    c0014cc4 <opcodeFault(regs*, void*)+0x393>
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cca:	8d 50 02             	lea    edx,[eax+0x2]
c0014ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd3:	e9 6f 02 00 00       	jmp    c0014f47 <opcodeFault(regs*, void*)+0x616>
c0014cd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0014cdd:	3c 0f                	cmp    al,0xf
c0014cdf:	0f 85 8d 01 00 00    	jne    c0014e72 <opcodeFault(regs*, void*)+0x541>
c0014ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce8:	40                   	inc    eax
c0014ce9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ceb:	3c c7                	cmp    al,0xc7
c0014ced:	0f 85 7f 01 00 00    	jne    c0014e72 <opcodeFault(regs*, void*)+0x541>
c0014cf3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cfc:	8d 50 01             	lea    edx,[eax+0x1]
c0014cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d05:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d08:	50                   	push   eax
c0014d09:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d0c:	50                   	push   eax
c0014d0d:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d10:	50                   	push   eax
c0014d11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d14:	e8 5f 46 00 00       	call   c0019378 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d19:	83 c4 10             	add    esp,0x10
c0014d1c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d1f:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d22:	83 f0 01             	xor    eax,0x1
c0014d25:	84 c0                	test   al,al
c0014d27:	0f 84 45 01 00 00    	je     c0014e72 <opcodeFault(regs*, void*)+0x541>
c0014d2d:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d30:	3c 01                	cmp    al,0x1
c0014d32:	0f 85 3a 01 00 00    	jne    c0014e72 <opcodeFault(regs*, void*)+0x541>
c0014d38:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d3b:	83 f0 01             	xor    eax,0x1
c0014d3e:	84 c0                	test   al,al
c0014d40:	0f 84 2c 01 00 00    	je     c0014e72 <opcodeFault(regs*, void*)+0x541>
c0014d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d49:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d4c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d4f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d56:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d59:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d5c:	89 c2                	mov    edx,eax
c0014d5e:	b8 00 00 00 00       	mov    eax,0x0
c0014d63:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d66:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d6f:	ba 00 00 00 00       	mov    edx,0x0
c0014d74:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d77:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d80:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d83:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d8a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d8d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d90:	89 c2                	mov    edx,eax
c0014d92:	b8 00 00 00 00       	mov    eax,0x0
c0014d97:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d9a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014da3:	ba 00 00 00 00       	mov    edx,0x0
c0014da8:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014dab:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dae:	fa                   	cli    
c0014daf:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014db4:	40                   	inc    eax
c0014db5:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0014dba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dbd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc2:	89 c1                	mov    ecx,eax
c0014dc4:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dc7:	89 cb                	mov    ebx,ecx
c0014dc9:	89 d0                	mov    eax,edx
c0014dcb:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014dce:	89 c6                	mov    esi,eax
c0014dd0:	89 f0                	mov    eax,esi
c0014dd2:	09 d8                	or     eax,ebx
c0014dd4:	85 c0                	test   eax,eax
c0014dd6:	75 21                	jne    c0014df9 <opcodeFault(regs*, void*)+0x4c8>
c0014dd8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ddb:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dde:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014de1:	89 01                	mov    DWORD PTR [ecx],eax
c0014de3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014dec:	83 c8 40             	or     eax,0x40
c0014def:	89 c2                	mov    edx,eax
c0014df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014df7:	eb 3e                	jmp    c0014e37 <opcodeFault(regs*, void*)+0x506>
c0014df9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e01:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e04:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e07:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e10:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e13:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e16:	89 d0                	mov    eax,edx
c0014e18:	31 d2                	xor    edx,edx
c0014e1a:	89 c3                	mov    ebx,eax
c0014e1c:	89 d6                	mov    esi,edx
c0014e1e:	89 da                	mov    edx,ebx
c0014e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e23:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e2c:	83 e0 bf             	and    eax,0xffffffbf
c0014e2f:	89 c2                	mov    edx,eax
c0014e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e34:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e37:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014e3c:	48                   	dec    eax
c0014e3d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0014e42:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014e47:	85 c0                	test   eax,eax
c0014e49:	75 01                	jne    c0014e4c <opcodeFault(regs*, void*)+0x51b>
c0014e4b:	fb                   	sti    
c0014e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e52:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e55:	01 c2                	add    edx,eax
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e5d:	83 ec 0c             	sub    esp,0xc
c0014e60:	68 e6 a9 02 c0       	push   0xc002a9e6
c0014e65:	e8 bb d6 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014e6a:	83 c4 10             	add    esp,0x10
c0014e6d:	e9 d5 00 00 00       	jmp    c0014f47 <opcodeFault(regs*, void*)+0x616>
c0014e72:	83 ec 0c             	sub    esp,0xc
c0014e75:	68 f9 a9 02 c0       	push   0xc002a9f9
c0014e7a:	e8 a6 d6 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014e7f:	83 c4 10             	add    esp,0x10
c0014e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e85:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e8e:	c1 e0 04             	shl    eax,0x4
c0014e91:	01 d0                	add    eax,edx
c0014e93:	83 c0 03             	add    eax,0x3
c0014e96:	8a 00                	mov    al,BYTE PTR [eax]
c0014e98:	0f b6 d8             	movzx  ebx,al
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea7:	c1 e0 04             	shl    eax,0x4
c0014eaa:	01 d0                	add    eax,edx
c0014eac:	83 c0 02             	add    eax,0x2
c0014eaf:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb1:	0f b6 c8             	movzx  ecx,al
c0014eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ec0:	c1 e0 04             	shl    eax,0x4
c0014ec3:	01 d0                	add    eax,edx
c0014ec5:	40                   	inc    eax
c0014ec6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec8:	0f b6 d0             	movzx  edx,al
c0014ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ece:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ed7:	c1 e0 04             	shl    eax,0x4
c0014eda:	01 f0                	add    eax,esi
c0014edc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ede:	0f b6 c0             	movzx  eax,al
c0014ee1:	83 ec 0c             	sub    esp,0xc
c0014ee4:	53                   	push   ebx
c0014ee5:	51                   	push   ecx
c0014ee6:	52                   	push   edx
c0014ee7:	50                   	push   eax
c0014ee8:	68 0c aa 02 c0       	push   0xc002aa0c
c0014eed:	e8 33 d6 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014ef2:	83 c4 20             	add    esp,0x20
c0014ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014efb:	83 c0 03             	add    eax,0x3
c0014efe:	8a 00                	mov    al,BYTE PTR [eax]
c0014f00:	0f b6 d8             	movzx  ebx,al
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f09:	83 c0 02             	add    eax,0x2
c0014f0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0e:	0f b6 c8             	movzx  ecx,al
c0014f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f17:	40                   	inc    eax
c0014f18:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1a:	0f b6 d0             	movzx  edx,al
c0014f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f23:	8a 00                	mov    al,BYTE PTR [eax]
c0014f25:	0f b6 c0             	movzx  eax,al
c0014f28:	83 ec 0c             	sub    esp,0xc
c0014f2b:	53                   	push   ebx
c0014f2c:	51                   	push   ecx
c0014f2d:	52                   	push   edx
c0014f2e:	50                   	push   eax
c0014f2f:	68 34 aa 02 c0       	push   0xc002aa34
c0014f34:	e8 ec d5 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0014f39:	83 c4 20             	add    esp,0x20
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f42:	e8 79 f4 ff ff       	call   c00143c0 <displayDebugInfo(regs*)>
c0014f47:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f4a:	5b                   	pop    ebx
c0014f4b:	5e                   	pop    esi
c0014f4c:	5d                   	pop    ebp
c0014f4d:	c3                   	ret    

c0014f4e <displayProgramFault(char const*)>:
c0014f4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f56:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f5c:	85 c0                	test   eax,eax
c0014f5e:	74 15                	je     c0014f75 <displayProgramFault(char const*)+0x27>
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	6a 04                	push   0x4
c0014f65:	6a 0f                	push   0xf
c0014f67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f6b:	50                   	push   eax
c0014f6c:	e8 6f b5 ff ff       	call   c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f71:	83 c4 1c             	add    esp,0x1c
c0014f74:	c3                   	ret    
c0014f75:	c3                   	ret    

c0014f76 <setupInterruptController()>:
c0014f76:	55                   	push   ebp
c0014f77:	89 e5                	mov    ebp,esp
c0014f79:	53                   	push   ebx
c0014f7a:	83 ec 24             	sub    esp,0x24
c0014f7d:	b8 00 00 00 00       	mov    eax,0x0
c0014f82:	85 c0                	test   eax,eax
c0014f84:	0f 95 c0             	setne  al
c0014f87:	84 c0                	test   al,al
c0014f89:	74 5b                	je     c0014fe6 <setupInterruptController()+0x70>
c0014f8b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f92:	83 ec 0c             	sub    esp,0xc
c0014f95:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f98:	e8 ff a5 ff ff       	call   c000f59c <malloc>
c0014f9d:	83 c4 10             	add    esp,0x10
c0014fa0:	89 c3                	mov    ebx,eax
c0014fa2:	83 ec 0c             	sub    esp,0xc
c0014fa5:	53                   	push   ebx
c0014fa6:	e8 fb 04 01 00       	call   c00254a6 <APIC::APIC()>
c0014fab:	83 c4 10             	add    esp,0x10
c0014fae:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014fb1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014fb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb9:	83 c0 08             	add    eax,0x8
c0014fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fbe:	6a 00                	push   0x0
c0014fc0:	6a 00                	push   0x0
c0014fc2:	6a 00                	push   0x0
c0014fc4:	52                   	push   edx
c0014fc5:	ff d0                	call   eax
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014fcf:	83 ec 08             	sub    esp,0x8
c0014fd2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fd5:	50                   	push   eax
c0014fd6:	e8 83 e9 ff ff       	call   c001395e <Device::addChild(Device*)>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fe1:	e9 79 03 00 00       	jmp    c001535f <setupInterruptController()+0x3e9>
c0014fe6:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c0014feb:	84 c0                	test   al,al
c0014fed:	75 14                	jne    c0015003 <setupInterruptController()+0x8d>
c0014fef:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014ff4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0014ffa:	83 e2 fe             	and    edx,0xfffffffe
c0014ffd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015003:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0015008:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001500e:	83 e0 01             	and    eax,0x1
c0015011:	84 c0                	test   al,al
c0015013:	0f 95 c0             	setne  al
c0015016:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015019:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015020:	83 ec 0c             	sub    esp,0xc
c0015023:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015026:	e8 71 a5 ff ff       	call   c000f59c <malloc>
c001502b:	83 c4 10             	add    esp,0x10
c001502e:	89 c3                	mov    ebx,eax
c0015030:	83 ec 0c             	sub    esp,0xc
c0015033:	53                   	push   ebx
c0015034:	e8 c5 09 01 00       	call   c00259fe <PIC::PIC()>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001503f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015042:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015045:	8b 00                	mov    eax,DWORD PTR [eax]
c0015047:	83 c0 08             	add    eax,0x8
c001504a:	8b 00                	mov    eax,DWORD PTR [eax]
c001504c:	6a 00                	push   0x0
c001504e:	6a 00                	push   0x0
c0015050:	6a 00                	push   0x0
c0015052:	52                   	push   edx
c0015053:	ff d0                	call   eax
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001505c:	74 73                	je     c00150d1 <setupInterruptController()+0x15b>
c001505e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015061:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015064:	8b 00                	mov    eax,DWORD PTR [eax]
c0015066:	83 c0 0c             	add    eax,0xc
c0015069:	8b 00                	mov    eax,DWORD PTR [eax]
c001506b:	6a 00                	push   0x0
c001506d:	6a 00                	push   0x0
c001506f:	6a 00                	push   0x0
c0015071:	52                   	push   edx
c0015072:	ff d0                	call   eax
c0015074:	83 c4 10             	add    esp,0x10
c0015077:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001507b:	74 15                	je     c0015092 <setupInterruptController()+0x11c>
c001507d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015080:	8b 00                	mov    eax,DWORD PTR [eax]
c0015082:	83 c0 04             	add    eax,0x4
c0015085:	8b 00                	mov    eax,DWORD PTR [eax]
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001508d:	ff d0                	call   eax
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015099:	83 ec 0c             	sub    esp,0xc
c001509c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001509f:	e8 f8 a4 ff ff       	call   c000f59c <malloc>
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	89 c3                	mov    ebx,eax
c00150a9:	83 ec 0c             	sub    esp,0xc
c00150ac:	53                   	push   ebx
c00150ad:	e8 f4 03 01 00       	call   c00254a6 <APIC::APIC()>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150be:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c0:	83 c0 08             	add    eax,0x8
c00150c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c5:	6a 00                	push   0x0
c00150c7:	6a 00                	push   0x0
c00150c9:	6a 00                	push   0x0
c00150cb:	52                   	push   edx
c00150cc:	ff d0                	call   eax
c00150ce:	83 c4 10             	add    esp,0x10
c00150d1:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00150d6:	83 ec 08             	sub    esp,0x8
c00150d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150dc:	50                   	push   eax
c00150dd:	e8 7c e8 ff ff       	call   c001395e <Device::addChild(Device*)>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	c7 05 28 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d728,0x0
c00150ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f4:	83 c0 24             	add    eax,0x24
c00150f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f9:	6a 00                	push   0x0
c00150fb:	68 12 49 01 c0       	push   0xc0014912
c0015100:	6a 00                	push   0x0
c0015102:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015105:	ff d0                	call   eax
c0015107:	83 c4 10             	add    esp,0x10
c001510a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001510d:	8b 00                	mov    eax,DWORD PTR [eax]
c001510f:	83 c0 24             	add    eax,0x24
c0015112:	8b 00                	mov    eax,DWORD PTR [eax]
c0015114:	6a 00                	push   0x0
c0015116:	68 12 49 01 c0       	push   0xc0014912
c001511b:	6a 01                	push   0x1
c001511d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015120:	ff d0                	call   eax
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015128:	8b 00                	mov    eax,DWORD PTR [eax]
c001512a:	83 c0 24             	add    eax,0x24
c001512d:	8b 00                	mov    eax,DWORD PTR [eax]
c001512f:	6a 00                	push   0x0
c0015131:	68 1d 42 01 c0       	push   0xc001421d
c0015136:	6a 02                	push   0x2
c0015138:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001513b:	ff d0                	call   eax
c001513d:	83 c4 10             	add    esp,0x10
c0015140:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	83 c0 24             	add    eax,0x24
c0015148:	8b 00                	mov    eax,DWORD PTR [eax]
c001514a:	6a 00                	push   0x0
c001514c:	68 12 49 01 c0       	push   0xc0014912
c0015151:	6a 03                	push   0x3
c0015153:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015156:	ff d0                	call   eax
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015160:	83 c0 24             	add    eax,0x24
c0015163:	8b 00                	mov    eax,DWORD PTR [eax]
c0015165:	6a 00                	push   0x0
c0015167:	68 12 49 01 c0       	push   0xc0014912
c001516c:	6a 04                	push   0x4
c001516e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015171:	ff d0                	call   eax
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015179:	8b 00                	mov    eax,DWORD PTR [eax]
c001517b:	83 c0 24             	add    eax,0x24
c001517e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015180:	6a 00                	push   0x0
c0015182:	68 12 49 01 c0       	push   0xc0014912
c0015187:	6a 05                	push   0x5
c0015189:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001518c:	ff d0                	call   eax
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015194:	8b 00                	mov    eax,DWORD PTR [eax]
c0015196:	83 c0 24             	add    eax,0x24
c0015199:	8b 00                	mov    eax,DWORD PTR [eax]
c001519b:	6a 00                	push   0x0
c001519d:	68 31 49 01 c0       	push   0xc0014931
c00151a2:	6a 06                	push   0x6
c00151a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a7:	ff d0                	call   eax
c00151a9:	83 c4 10             	add    esp,0x10
c00151ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151af:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b1:	83 c0 24             	add    eax,0x24
c00151b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b6:	6a 00                	push   0x0
c00151b8:	68 4f 48 01 c0       	push   0xc001484f
c00151bd:	6a 07                	push   0x7
c00151bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c2:	ff d0                	call   eax
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cc:	83 c0 24             	add    eax,0x24
c00151cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d1:	6a 00                	push   0x0
c00151d3:	68 38 40 01 c0       	push   0xc0014038
c00151d8:	6a 08                	push   0x8
c00151da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dd:	ff d0                	call   eax
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e7:	83 c0 24             	add    eax,0x24
c00151ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ec:	6a 00                	push   0x0
c00151ee:	68 12 49 01 c0       	push   0xc0014912
c00151f3:	6a 09                	push   0x9
c00151f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f8:	ff d0                	call   eax
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015200:	8b 00                	mov    eax,DWORD PTR [eax]
c0015202:	83 c0 24             	add    eax,0x24
c0015205:	8b 00                	mov    eax,DWORD PTR [eax]
c0015207:	6a 00                	push   0x0
c0015209:	68 12 49 01 c0       	push   0xc0014912
c001520e:	6a 0a                	push   0xa
c0015210:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015213:	ff d0                	call   eax
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521b:	8b 00                	mov    eax,DWORD PTR [eax]
c001521d:	83 c0 24             	add    eax,0x24
c0015220:	8b 00                	mov    eax,DWORD PTR [eax]
c0015222:	6a 00                	push   0x0
c0015224:	68 12 49 01 c0       	push   0xc0014912
c0015229:	6a 0b                	push   0xb
c001522b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522e:	ff d0                	call   eax
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015236:	8b 00                	mov    eax,DWORD PTR [eax]
c0015238:	83 c0 24             	add    eax,0x24
c001523b:	8b 00                	mov    eax,DWORD PTR [eax]
c001523d:	6a 00                	push   0x0
c001523f:	68 12 49 01 c0       	push   0xc0014912
c0015244:	6a 0c                	push   0xc
c0015246:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015249:	ff d0                	call   eax
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015251:	8b 00                	mov    eax,DWORD PTR [eax]
c0015253:	83 c0 24             	add    eax,0x24
c0015256:	8b 00                	mov    eax,DWORD PTR [eax]
c0015258:	6a 00                	push   0x0
c001525a:	68 c2 48 01 c0       	push   0xc00148c2
c001525f:	6a 0d                	push   0xd
c0015261:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015264:	ff d0                	call   eax
c0015266:	83 c4 10             	add    esp,0x10
c0015269:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	83 c0 24             	add    eax,0x24
c0015271:	8b 00                	mov    eax,DWORD PTR [eax]
c0015273:	6a 00                	push   0x0
c0015275:	68 fb 48 01 c0       	push   0xc00148fb
c001527a:	6a 0e                	push   0xe
c001527c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527f:	ff d0                	call   eax
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015287:	8b 00                	mov    eax,DWORD PTR [eax]
c0015289:	83 c0 24             	add    eax,0x24
c001528c:	8b 00                	mov    eax,DWORD PTR [eax]
c001528e:	6a 00                	push   0x0
c0015290:	68 12 49 01 c0       	push   0xc0014912
c0015295:	6a 0f                	push   0xf
c0015297:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529a:	ff d0                	call   eax
c001529c:	83 c4 10             	add    esp,0x10
c001529f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a4:	83 c0 24             	add    eax,0x24
c00152a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a9:	6a 00                	push   0x0
c00152ab:	68 12 49 01 c0       	push   0xc0014912
c00152b0:	6a 10                	push   0x10
c00152b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b5:	ff d0                	call   eax
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bf:	83 c0 24             	add    eax,0x24
c00152c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c4:	6a 00                	push   0x0
c00152c6:	68 12 49 01 c0       	push   0xc0014912
c00152cb:	6a 11                	push   0x11
c00152cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d0:	ff d0                	call   eax
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152da:	83 c0 24             	add    eax,0x24
c00152dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152df:	6a 00                	push   0x0
c00152e1:	68 12 49 01 c0       	push   0xc0014912
c00152e6:	6a 12                	push   0x12
c00152e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152eb:	ff d0                	call   eax
c00152ed:	83 c4 10             	add    esp,0x10
c00152f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	83 c0 24             	add    eax,0x24
c00152f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fa:	6a 00                	push   0x0
c00152fc:	68 12 49 01 c0       	push   0xc0014912
c0015301:	6a 13                	push   0x13
c0015303:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015306:	ff d0                	call   eax
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	83 c0 24             	add    eax,0x24
c0015313:	8b 00                	mov    eax,DWORD PTR [eax]
c0015315:	6a 00                	push   0x0
c0015317:	68 12 49 01 c0       	push   0xc0014912
c001531c:	6a 14                	push   0x14
c001531e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015321:	ff d0                	call   eax
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	83 c0 24             	add    eax,0x24
c001532e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015330:	6a 00                	push   0x0
c0015332:	68 12 49 01 c0       	push   0xc0014912
c0015337:	6a 1e                	push   0x1e
c0015339:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533c:	ff d0                	call   eax
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015344:	8b 00                	mov    eax,DWORD PTR [eax]
c0015346:	83 c0 24             	add    eax,0x24
c0015349:	8b 00                	mov    eax,DWORD PTR [eax]
c001534b:	6a 00                	push   0x0
c001534d:	68 4e be 01 c0       	push   0xc001be4e
c0015352:	6a 60                	push   0x60
c0015354:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015357:	ff d0                	call   eax
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015362:	c9                   	leave  
c0015363:	c3                   	ret    

c0015364 <InterruptController::convertLegacyIRQNumber(int)>:
c0015364:	55                   	push   ebp
c0015365:	89 e5                	mov    ebp,esp
c0015367:	83 ec 08             	sub    esp,0x8
c001536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536d:	83 ec 0c             	sub    esp,0xc
c0015370:	50                   	push   eax
c0015371:	e8 e8 e8 ff ff       	call   c0013c5e <Device::getName()>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	8a 00                	mov    al,BYTE PTR [eax]
c001537b:	3c 41                	cmp    al,0x41
c001537d:	0f 94 c0             	sete   al
c0015380:	84 c0                	test   al,al
c0015382:	74 28                	je     c00153ac <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015384:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015388:	7f 12                	jg     c001539c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001538a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001538d:	05 00 c8 02 c0       	add    eax,0xc002c800
c0015392:	8a 00                	mov    al,BYTE PTR [eax]
c0015394:	0f b6 c0             	movzx  eax,al
c0015397:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001539a:	eb 10                	jmp    c00153ac <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001539c:	83 ec 0c             	sub    esp,0xc
c001539f:	68 5c aa 02 c0       	push   0xc002aa5c
c00153a4:	e8 b6 48 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153af:	c9                   	leave  
c00153b0:	c3                   	ret    
c00153b1:	90                   	nop

c00153b2 <startGUI(void*)>:
c00153b2:	55                   	push   ebp
c00153b3:	89 e5                	mov    ebp,esp
c00153b5:	53                   	push   ebx
c00153b6:	83 ec 04             	sub    esp,0x4
c00153b9:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00153be:	48                   	dec    eax
c00153bf:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00153c4:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00153c9:	85 c0                	test   eax,eax
c00153cb:	75 01                	jne    c00153ce <startGUI(void*)+0x1c>
c00153cd:	fb                   	sti    
c00153ce:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c00153d4:	83 ec 08             	sub    esp,0x8
c00153d7:	6a 01                	push   0x1
c00153d9:	68 dc aa 02 c0       	push   0xc002aadc
c00153de:	e8 46 7a 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c00153e3:	83 c4 10             	add    esp,0x10
c00153e6:	83 ec 08             	sub    esp,0x8
c00153e9:	53                   	push   ebx
c00153ea:	50                   	push   eax
c00153eb:	e8 64 7c 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	6a 01                	push   0x1
c00153fe:	68 f6 aa 02 c0       	push   0xc002aaf6
c0015403:	e8 21 7a 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	83 ec 08             	sub    esp,0x8
c001540e:	53                   	push   ebx
c001540f:	50                   	push   eax
c0015410:	e8 3f 7c 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	90                   	nop
c0015419:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001541c:	c9                   	leave  
c001541d:	c3                   	ret    

c001541e <startGUIVESA(void*)>:
c001541e:	55                   	push   ebp
c001541f:	89 e5                	mov    ebp,esp
c0015421:	53                   	push   ebx
c0015422:	83 ec 04             	sub    esp,0x4
c0015425:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001542a:	48                   	dec    eax
c001542b:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015430:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015435:	85 c0                	test   eax,eax
c0015437:	75 01                	jne    c001543a <startGUIVESA(void*)+0x1c>
c0015439:	fb                   	sti    
c001543a:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0015440:	83 ec 08             	sub    esp,0x8
c0015443:	6a 01                	push   0x1
c0015445:	68 10 ab 02 c0       	push   0xc002ab10
c001544a:	e8 da 79 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c001544f:	83 c4 10             	add    esp,0x10
c0015452:	83 ec 08             	sub    esp,0x8
c0015455:	53                   	push   ebx
c0015456:	50                   	push   eax
c0015457:	e8 f8 7b 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0015465:	83 ec 08             	sub    esp,0x8
c0015468:	6a 01                	push   0x1
c001546a:	68 f6 aa 02 c0       	push   0xc002aaf6
c001546f:	e8 b5 79 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0015474:	83 c4 10             	add    esp,0x10
c0015477:	83 ec 08             	sub    esp,0x8
c001547a:	53                   	push   ebx
c001547b:	50                   	push   eax
c001547c:	e8 d3 7b 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	90                   	nop
c0015485:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015488:	c9                   	leave  
c0015489:	c3                   	ret    

c001548a <sendKeyToTerminal(unsigned char)>:
c001548a:	55                   	push   ebp
c001548b:	89 e5                	mov    ebp,esp
c001548d:	83 ec 28             	sub    esp,0x28
c0015490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015493:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015496:	a1 64 d6 02 c0       	mov    eax,ds:0xc002d664
c001549b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001549f:	83 ec 08             	sub    esp,0x8
c00154a2:	52                   	push   edx
c00154a3:	50                   	push   eax
c00154a4:	e8 dd b4 ff ff       	call   c0010986 <VgaText::receiveKey(unsigned char)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00154b0:	0f 85 8f 00 00 00    	jne    c0015545 <sendKeyToTerminal(unsigned char)+0xbb>
c00154b6:	fa                   	cli    
c00154b7:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00154bc:	40                   	inc    eax
c00154bd:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00154c2:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c00154c7:	40                   	inc    eax
c00154c8:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c00154cd:	a1 40 d7 02 c0       	mov    eax,ds:0xc002d740
c00154d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154d5:	c7 05 40 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d740,0x0
c00154df:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00154e3:	74 1f                	je     c0015504 <sendKeyToTerminal(unsigned char)+0x7a>
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00154eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154fa:	e8 6d 87 00 00       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	eb db                	jmp    c00154df <sendKeyToTerminal(unsigned char)+0x55>
c0015504:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0015509:	48                   	dec    eax
c001550a:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001550f:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0015514:	85 c0                	test   eax,eax
c0015516:	75 18                	jne    c0015530 <sendKeyToTerminal(unsigned char)+0xa6>
c0015518:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001551d:	85 c0                	test   eax,eax
c001551f:	74 0f                	je     c0015530 <sendKeyToTerminal(unsigned char)+0xa6>
c0015521:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001552b:	e8 b9 82 00 00       	call   c001d7e9 <schedule()>
c0015530:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015535:	48                   	dec    eax
c0015536:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001553b:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015540:	85 c0                	test   eax,eax
c0015542:	75 01                	jne    c0015545 <sendKeyToTerminal(unsigned char)+0xbb>
c0015544:	fb                   	sti    
c0015545:	90                   	nop
c0015546:	c9                   	leave  
c0015547:	c3                   	ret    

c0015548 <sendKeyboardToken(KeyboardToken)>:
c0015548:	55                   	push   ebp
c0015549:	89 e5                	mov    ebp,esp
c001554b:	83 ec 18             	sub    esp,0x18
c001554e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015554:	0f b7 c0             	movzx  eax,ax
c0015557:	83 f2 01             	xor    edx,0x1
c001555a:	88 90 60 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28a0],dl
c0015560:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0015565:	85 c0                	test   eax,eax
c0015567:	74 24                	je     c001558d <sendKeyboardToken(KeyboardToken)+0x45>
c0015569:	8b 0d 48 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d748
c001556f:	83 ec 04             	sub    esp,0x4
c0015572:	68 60 d7 02 c0       	push   0xc002d760
c0015577:	83 ec 08             	sub    esp,0x8
c001557a:	89 e2                	mov    edx,esp
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	89 02                	mov    DWORD PTR [edx],eax
c0015581:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015584:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015588:	ff d1                	call   ecx
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	66 3d 03 02          	cmp    ax,0x203
c0015594:	75 07                	jne    c001559d <sendKeyboardToken(KeyboardToken)+0x55>
c0015596:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c001559b:	84 c0                	test   al,al
c001559d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155a1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155a4:	a0 68 db 02 c0       	mov    al,ds:0xc002db68
c00155a9:	38 c2                	cmp    dl,al
c00155ab:	74 1c                	je     c00155c9 <sendKeyboardToken(KeyboardToken)+0x81>
c00155ad:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155b0:	a2 68 db 02 c0       	mov    ds:0xc002db68,al
c00155b5:	a0 68 db 02 c0       	mov    al,ds:0xc002db68
c00155ba:	0f b6 c0             	movzx  eax,al
c00155bd:	83 ec 0c             	sub    esp,0xc
c00155c0:	50                   	push   eax
c00155c1:	e8 02 aa ff ff       	call   c000ffc8 <setTerminalScrollLock(bool)>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155cc:	84 c0                	test   al,al
c00155ce:	0f 84 ae 00 00 00    	je     c0015682 <sendKeyboardToken(KeyboardToken)+0x13a>
c00155d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d7:	66 3d 10 03          	cmp    ax,0x310
c00155db:	75 06                	jne    c00155e3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00155dd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e6:	66 3d 11 03          	cmp    ax,0x311
c00155ea:	75 06                	jne    c00155f2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00155ec:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f5:	66 3d 12 03          	cmp    ax,0x312
c00155f9:	75 06                	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0xb9>
c00155fb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015604:	66 3d 13 03          	cmp    ax,0x313
c0015608:	75 06                	jne    c0015610 <sendKeyboardToken(KeyboardToken)+0xc8>
c001560a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	66 3d 14 03          	cmp    ax,0x314
c0015617:	75 06                	jne    c001561f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015619:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	66 3d 15 03          	cmp    ax,0x315
c0015626:	75 06                	jne    c001562e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015628:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	66 3d 16 03          	cmp    ax,0x316
c0015635:	75 06                	jne    c001563d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015637:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001563d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015640:	66 3d 17 03          	cmp    ax,0x317
c0015644:	75 06                	jne    c001564c <sendKeyboardToken(KeyboardToken)+0x104>
c0015646:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001564c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564f:	66 3d 18 03          	cmp    ax,0x318
c0015653:	75 06                	jne    c001565b <sendKeyboardToken(KeyboardToken)+0x113>
c0015655:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	66 3d 19 03          	cmp    ax,0x319
c0015662:	75 06                	jne    c001566a <sendKeyboardToken(KeyboardToken)+0x122>
c0015664:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001566a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566d:	66 3d 1a 03          	cmp    ax,0x31a
c0015671:	0f 85 c9 00 00 00    	jne    c0015740 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015677:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001567d:	e9 be 00 00 00       	jmp    c0015740 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	66 3d 10 03          	cmp    ax,0x310
c0015689:	75 0a                	jne    c0015695 <sendKeyboardToken(KeyboardToken)+0x14d>
c001568b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015691:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015698:	66 3d 11 03          	cmp    ax,0x311
c001569c:	75 0a                	jne    c00156a8 <sendKeyboardToken(KeyboardToken)+0x160>
c001569e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ab:	66 3d 12 03          	cmp    ax,0x312
c00156af:	75 0a                	jne    c00156bb <sendKeyboardToken(KeyboardToken)+0x173>
c00156b1:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156be:	66 3d 13 03          	cmp    ax,0x313
c00156c2:	75 0a                	jne    c00156ce <sendKeyboardToken(KeyboardToken)+0x186>
c00156c4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d1:	66 3d 14 03          	cmp    ax,0x314
c00156d5:	75 0a                	jne    c00156e1 <sendKeyboardToken(KeyboardToken)+0x199>
c00156d7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e4:	66 3d 15 03          	cmp    ax,0x315
c00156e8:	75 0a                	jne    c00156f4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00156ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f7:	66 3d 16 03          	cmp    ax,0x316
c00156fb:	75 0a                	jne    c0015707 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00156fd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015703:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570a:	66 3d 17 03          	cmp    ax,0x317
c001570e:	75 0a                	jne    c001571a <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015710:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015716:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	66 3d 18 03          	cmp    ax,0x318
c0015721:	75 0a                	jne    c001572d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015723:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015729:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001572d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015730:	66 3d 19 03          	cmp    ax,0x319
c0015734:	75 0a                	jne    c0015740 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015736:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001573c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015743:	66 3d 00 02          	cmp    ax,0x200
c0015747:	75 2c                	jne    c0015775 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015749:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c001574e:	83 f0 01             	xor    eax,0x1
c0015751:	84 c0                	test   al,al
c0015753:	74 20                	je     c0015775 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015755:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001575a:	6a 01                	push   0x1
c001575c:	6a 00                	push   0x0
c001575e:	68 b2 53 01 c0       	push   0xc00153b2
c0015763:	50                   	push   eax
c0015764:	e8 5b 7e 00 00       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c0015773:	eb 33                	jmp    c00157a8 <sendKeyboardToken(KeyboardToken)+0x260>
c0015775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015778:	66 3d 01 02          	cmp    ax,0x201
c001577c:	75 2a                	jne    c00157a8 <sendKeyboardToken(KeyboardToken)+0x260>
c001577e:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c0015783:	83 f0 01             	xor    eax,0x1
c0015786:	84 c0                	test   al,al
c0015788:	74 1e                	je     c00157a8 <sendKeyboardToken(KeyboardToken)+0x260>
c001578a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001578f:	6a 01                	push   0x1
c0015791:	6a 00                	push   0x0
c0015793:	68 1e 54 01 c0       	push   0xc001541e
c0015798:	50                   	push   eax
c0015799:	e8 26 7e 00 00       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c001579e:	83 c4 10             	add    esp,0x10
c00157a1:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	66 3d 1d 03          	cmp    ax,0x31d
c00157af:	75 06                	jne    c00157b7 <sendKeyboardToken(KeyboardToken)+0x26f>
c00157b1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ba:	66 3d 1c 03          	cmp    ax,0x31c
c00157be:	75 06                	jne    c00157c6 <sendKeyboardToken(KeyboardToken)+0x27e>
c00157c0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	66 3d 1b 03          	cmp    ax,0x31b
c00157cd:	75 06                	jne    c00157d5 <sendKeyboardToken(KeyboardToken)+0x28d>
c00157cf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	66 3d 1e 03          	cmp    ax,0x31e
c00157dc:	75 06                	jne    c00157e4 <sendKeyboardToken(KeyboardToken)+0x29c>
c00157de:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	66 3d 1f 03          	cmp    ax,0x31f
c00157eb:	75 06                	jne    c00157f3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00157ed:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f6:	66 3d 1a 03          	cmp    ax,0x31a
c00157fa:	75 06                	jne    c0015802 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00157fc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015802:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015806:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015809:	83 f0 01             	xor    eax,0x1
c001580c:	84 c0                	test   al,al
c001580e:	74 77                	je     c0015887 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015810:	a0 61 d8 02 c0       	mov    al,ds:0xc002d861
c0015815:	84 c0                	test   al,al
c0015817:	74 41                	je     c001585a <sendKeyboardToken(KeyboardToken)+0x312>
c0015819:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001581d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015821:	74 2b                	je     c001584e <sendKeyboardToken(KeyboardToken)+0x306>
c0015823:	8b 15 64 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db64
c0015829:	89 d0                	mov    eax,edx
c001582b:	c1 e0 02             	shl    eax,0x2
c001582e:	01 d0                	add    eax,edx
c0015830:	01 c0                	add    eax,eax
c0015832:	a3 64 db 02 c0       	mov    ds:0xc002db64,eax
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	0f b7 c0             	movzx  eax,ax
c001583d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015840:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015845:	01 d0                	add    eax,edx
c0015847:	a3 64 db 02 c0       	mov    ds:0xc002db64,eax
c001584c:	eb 6d                	jmp    c00158bb <sendKeyboardToken(KeyboardToken)+0x373>
c001584e:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c0015858:	eb 61                	jmp    c00158bb <sendKeyboardToken(KeyboardToken)+0x373>
c001585a:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c001585f:	85 c0                	test   eax,eax
c0015861:	74 18                	je     c001587b <sendKeyboardToken(KeyboardToken)+0x333>
c0015863:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015868:	0f b6 c0             	movzx  eax,al
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	50                   	push   eax
c001586f:	e8 16 fc ff ff       	call   c001548a <sendKeyToTerminal(unsigned char)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001587b:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c0015885:	eb 34                	jmp    c00158bb <sendKeyboardToken(KeyboardToken)+0x373>
c0015887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588a:	66 3d 01 01          	cmp    ax,0x101
c001588e:	75 2b                	jne    c00158bb <sendKeyboardToken(KeyboardToken)+0x373>
c0015890:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015895:	85 c0                	test   eax,eax
c0015897:	74 18                	je     c00158b1 <sendKeyboardToken(KeyboardToken)+0x369>
c0015899:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c001589e:	0f b6 c0             	movzx  eax,al
c00158a1:	83 ec 0c             	sub    esp,0xc
c00158a4:	50                   	push   eax
c00158a5:	e8 e0 fb ff ff       	call   c001548a <sendKeyToTerminal(unsigned char)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158b1:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c00158bb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158be:	83 f0 01             	xor    eax,0x1
c00158c1:	84 c0                	test   al,al
c00158c3:	74 4c                	je     c0015911 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158c5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158c8:	83 f0 01             	xor    eax,0x1
c00158cb:	84 c0                	test   al,al
c00158cd:	74 42                	je     c0015911 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158cf:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c00158d4:	83 f0 01             	xor    eax,0x1
c00158d7:	84 c0                	test   al,al
c00158d9:	74 36                	je     c0015911 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158de:	66 83 f8 1f          	cmp    ax,0x1f
c00158e2:	76 09                	jbe    c00158ed <sendKeyboardToken(KeyboardToken)+0x3a5>
c00158e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e7:	66 83 f8 7e          	cmp    ax,0x7e
c00158eb:	76 12                	jbe    c00158ff <sendKeyboardToken(KeyboardToken)+0x3b7>
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	66 83 f8 0a          	cmp    ax,0xa
c00158f4:	74 09                	je     c00158ff <sendKeyboardToken(KeyboardToken)+0x3b7>
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	66 83 f8 08          	cmp    ax,0x8
c00158fd:	75 12                	jne    c0015911 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015902:	0f b6 c0             	movzx  eax,al
c0015905:	83 ec 0c             	sub    esp,0xc
c0015908:	50                   	push   eax
c0015909:	e8 7c fb ff ff       	call   c001548a <sendKeyToTerminal(unsigned char)>
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015914:	83 f0 01             	xor    eax,0x1
c0015917:	84 c0                	test   al,al
c0015919:	74 4f                	je     c001596a <sendKeyboardToken(KeyboardToken)+0x422>
c001591b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001591e:	83 f0 01             	xor    eax,0x1
c0015921:	84 c0                	test   al,al
c0015923:	74 45                	je     c001596a <sendKeyboardToken(KeyboardToken)+0x422>
c0015925:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c001592a:	84 c0                	test   al,al
c001592c:	74 3c                	je     c001596a <sendKeyboardToken(KeyboardToken)+0x422>
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	66 83 f8 3f          	cmp    ax,0x3f
c0015935:	76 33                	jbe    c001596a <sendKeyboardToken(KeyboardToken)+0x422>
c0015937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593a:	66 83 f8 7f          	cmp    ax,0x7f
c001593e:	77 2a                	ja     c001596a <sendKeyboardToken(KeyboardToken)+0x422>
c0015940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015943:	88 c2                	mov    dl,al
c0015945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015948:	66 83 f8 5f          	cmp    ax,0x5f
c001594c:	76 04                	jbe    c0015952 <sendKeyboardToken(KeyboardToken)+0x40a>
c001594e:	b0 20                	mov    al,0x20
c0015950:	eb 02                	jmp    c0015954 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015952:	b0 00                	mov    al,0x0
c0015954:	29 c2                	sub    edx,eax
c0015956:	88 d0                	mov    al,dl
c0015958:	83 e8 40             	sub    eax,0x40
c001595b:	0f b6 c0             	movzx  eax,al
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	50                   	push   eax
c0015962:	e8 23 fb ff ff       	call   c001548a <sendKeyToTerminal(unsigned char)>
c0015967:	83 c4 10             	add    esp,0x10
c001596a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596d:	66 3d 00 03          	cmp    ax,0x300
c0015971:	75 0f                	jne    c0015982 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015973:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015976:	83 f0 01             	xor    eax,0x1
c0015979:	84 c0                	test   al,al
c001597b:	74 05                	je     c0015982 <sendKeyboardToken(KeyboardToken)+0x43a>
c001597d:	e8 b7 a9 ff ff       	call   c0010339 <doTerminalCycle()>
c0015982:	90                   	nop
c0015983:	c9                   	leave  
c0015984:	c3                   	ret    

c0015985 <clearInternalKeybuffer(VgaText*)>:
c0015985:	55                   	push   ebp
c0015986:	89 e5                	mov    ebp,esp
c0015988:	83 ec 08             	sub    esp,0x8
c001598b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001598e:	05 98 01 00 00       	add    eax,0x198
c0015993:	83 ec 0c             	sub    esp,0xc
c0015996:	50                   	push   eax
c0015997:	e8 d0 ad fe ff       	call   c000076c <strlen>
c001599c:	83 c4 10             	add    esp,0x10
c001599f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159a2:	81 c2 98 01 00 00    	add    edx,0x198
c00159a8:	83 ec 04             	sub    esp,0x4
c00159ab:	50                   	push   eax
c00159ac:	6a 00                	push   0x0
c00159ae:	52                   	push   edx
c00159af:	e8 9c ad fe ff       	call   c0000750 <memset>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	90                   	nop
c00159b8:	c9                   	leave  
c00159b9:	c3                   	ret    

c00159ba <readKeyboard(VgaText*, char*, unsigned long)>:
c00159ba:	55                   	push   ebp
c00159bb:	89 e5                	mov    ebp,esp
c00159bd:	83 ec 18             	sub    esp,0x18
c00159c0:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00159c5:	85 c0                	test   eax,eax
c00159c7:	74 2a                	je     c00159f3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00159c9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00159cf:	8b 0d 48 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d748
c00159d5:	83 ec 04             	sub    esp,0x4
c00159d8:	68 60 d7 02 c0       	push   0xc002d760
c00159dd:	83 ec 08             	sub    esp,0x8
c00159e0:	89 e2                	mov    edx,esp
c00159e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00159e5:	89 02                	mov    DWORD PTR [edx],eax
c00159e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ea:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00159ee:	ff d1                	call   ecx
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	fb                   	sti    
c00159f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159fb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159ff:	0f 84 a1 00 00 00    	je     c0015aa6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a08:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a0e:	84 c0                	test   al,al
c0015a10:	75 28                	jne    c0015a3a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015a12:	fa                   	cli    
c0015a13:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a18:	40                   	inc    eax
c0015a19:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015a1e:	e8 c6 7d 00 00       	call   c001d7e9 <schedule()>
c0015a23:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a28:	48                   	dec    eax
c0015a29:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015a2e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a33:	85 c0                	test   eax,eax
c0015a35:	75 ce                	jne    c0015a05 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a37:	fb                   	sti    
c0015a38:	eb cb                	jmp    c0015a05 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0015a40:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a46:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015a4c:	88 10                	mov    BYTE PTR [eax],dl
c0015a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a51:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a57:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5d:	05 98 01 00 00       	add    eax,0x198
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	50                   	push   eax
c0015a66:	e8 01 ad fe ff       	call   c000076c <strlen>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a71:	81 c2 98 01 00 00    	add    edx,0x198
c0015a77:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a7d:	81 c2 98 01 00 00    	add    edx,0x198
c0015a83:	83 ec 04             	sub    esp,0x4
c0015a86:	50                   	push   eax
c0015a87:	51                   	push   ecx
c0015a88:	52                   	push   edx
c0015a89:	e8 fa ab fe ff       	call   c0000688 <memmove>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a94:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a97:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a9b:	0f 85 5a ff ff ff    	jne    c00159fb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa4:	eb 03                	jmp    c0015aa9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa9:	c9                   	leave  
c0015aaa:	c3                   	ret    
c0015aab:	90                   	nop

c0015aac <Keyboard::Keyboard(char const*)>:
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab3:	83 ec 08             	sub    esp,0x8
c0015ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aba:	50                   	push   eax
c0015abb:	e8 a2 e0 ff ff       	call   c0013b62 <Device::Device(char const*)>
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0015ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015acc:	89 10                	mov    DWORD PTR [eax],edx
c0015ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015adc:	c6 05 44 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d744,0x1
c0015ae3:	90                   	nop
c0015ae4:	83 c4 0c             	add    esp,0xc
c0015ae7:	c3                   	ret    

c0015ae8 <Keyboard::~Keyboard()>:
c0015ae8:	83 ec 0c             	sub    esp,0xc
c0015aeb:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0015af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af4:	89 10                	mov    DWORD PTR [eax],edx
c0015af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015afa:	83 ec 0c             	sub    esp,0xc
c0015afd:	50                   	push   eax
c0015afe:	e8 29 dd ff ff       	call   c001382c <Device::~Device()>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	90                   	nop
c0015b07:	83 c4 0c             	add    esp,0xc
c0015b0a:	c3                   	ret    
c0015b0b:	90                   	nop

c0015b0c <Keyboard::~Keyboard()>:
c0015b0c:	83 ec 0c             	sub    esp,0xc
c0015b0f:	83 ec 0c             	sub    esp,0xc
c0015b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b16:	e8 cd ff ff ff       	call   c0015ae8 <Keyboard::~Keyboard()>
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	83 ec 08             	sub    esp,0x8
c0015b21:	68 5c 01 00 00       	push   0x15c
c0015b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b2a:	e8 1e c9 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	83 c4 0c             	add    esp,0xc
c0015b35:	c3                   	ret    

c0015b36 <LogicalDisk::close(int, int, void*)>:
c0015b36:	83 c8 ff             	or     eax,0xffffffff
c0015b39:	c3                   	ret    

c0015b3a <LogicalDisk::~LogicalDisk()>:
c0015b3a:	83 ec 0c             	sub    esp,0xc
c0015b3d:	ba ac ab 02 c0       	mov    edx,0xc002abac
c0015b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b46:	89 10                	mov    DWORD PTR [eax],edx
c0015b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b4c:	83 ec 0c             	sub    esp,0xc
c0015b4f:	50                   	push   eax
c0015b50:	e8 d7 dc ff ff       	call   c001382c <Device::~Device()>
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	90                   	nop
c0015b59:	83 c4 0c             	add    esp,0xc
c0015b5c:	c3                   	ret    
c0015b5d:	90                   	nop

c0015b5e <LogicalDisk::~LogicalDisk()>:
c0015b5e:	83 ec 0c             	sub    esp,0xc
c0015b61:	83 ec 0c             	sub    esp,0xc
c0015b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b68:	e8 cd ff ff ff       	call   c0015b3a <LogicalDisk::~LogicalDisk()>
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	83 ec 08             	sub    esp,0x8
c0015b73:	68 74 01 00 00       	push   0x174
c0015b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b7c:	e8 cc c8 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0015b81:	83 c4 10             	add    esp,0x10
c0015b84:	83 c4 0c             	add    esp,0xc
c0015b87:	c3                   	ret    

c0015b88 <LogicalDisk::open(int, int, void*)>:
c0015b88:	83 ec 18             	sub    esp,0x18
c0015b8b:	68 60 ab 02 c0       	push   0xc002ab60
c0015b90:	e8 ca 40 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0015b95:	83 c8 ff             	or     eax,0xffffffff
c0015b98:	83 c4 1c             	add    esp,0x1c
c0015b9b:	c3                   	ret    

c0015b9c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b9c:	53                   	push   ebx
c0015b9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ba5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ba9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015baf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015bb5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015bbb:	77 10                	ja     c0015bcd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015bbd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015bc3:	89 d3                	mov    ebx,edx
c0015bc5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015bcb:	72 05                	jb     c0015bd2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015bcd:	83 c8 ff             	or     eax,0xffffffff
c0015bd0:	89 c2                	mov    edx,eax
c0015bd2:	5b                   	pop    ebx
c0015bd3:	c3                   	ret    

c0015bd4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015bd4:	56                   	push   esi
c0015bd5:	83 c8 ff             	or     eax,0xffffffff
c0015bd8:	53                   	push   ebx
c0015bd9:	89 c2                	mov    edx,eax
c0015bdb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015bdf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015be3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015be7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bed:	77 27                	ja     c0015c16 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bef:	89 d8                	mov    eax,ebx
c0015bf1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015bf7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015bfd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c02:	89 c2                	mov    edx,eax
c0015c04:	73 10                	jae    c0015c16 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c06:	89 c8                	mov    eax,ecx
c0015c08:	89 da                	mov    edx,ebx
c0015c0a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c10:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c16:	5b                   	pop    ebx
c0015c17:	5e                   	pop    esi
c0015c18:	c3                   	ret    
c0015c19:	90                   	nop

c0015c1a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c1a:	83 ec 1c             	sub    esp,0x1c
c0015c1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c40:	83 ec 08             	sub    esp,0x8
c0015c43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c47:	50                   	push   eax
c0015c48:	e8 15 df ff ff       	call   c0013b62 <Device::Device(char const*)>
c0015c4d:	83 c4 10             	add    esp,0x10
c0015c50:	ba ac ab 02 c0       	mov    edx,0xc002abac
c0015c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c59:	89 10                	mov    DWORD PTR [eax],edx
c0015c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c75:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c7f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c8b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c91:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c97:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ca2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ca8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015cb6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cca:	90                   	nop
c0015ccb:	83 c4 1c             	add    esp,0x1c
c0015cce:	c3                   	ret    
c0015ccf:	90                   	nop

c0015cd0 <LogicalDisk::assignDriveLetter()>:
c0015cd0:	55                   	push   ebp
c0015cd1:	57                   	push   edi
c0015cd2:	56                   	push   esi
c0015cd3:	53                   	push   ebx
c0015cd4:	83 ec 14             	sub    esp,0x14
c0015cd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015cdb:	8b 3d 80 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db80
c0015ce1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ce7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015ceb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015cf1:	8b 3d 84 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db84
c0015cf7:	3c 01                	cmp    al,0x1
c0015cf9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015cfd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015d01:	19 c0                	sbb    eax,eax
c0015d03:	83 e0 02             	and    eax,0x2
c0015d06:	83 c0 41             	add    eax,0x41
c0015d09:	0f be e8             	movsx  ebp,al
c0015d0c:	3c 43                	cmp    al,0x43
c0015d0e:	75 10                	jne    c0015d20 <LogicalDisk::assignDriveLetter()+0x50>
c0015d10:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d17:	75 5d                	jne    c0015d76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d19:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d1e:	75 56                	jne    c0015d76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d20:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d23:	ba 01 00 00 00       	mov    edx,0x1
c0015d28:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d2c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d30:	d3 e2                	shl    edx,cl
c0015d32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d36:	89 d7                	mov    edi,edx
c0015d38:	89 d6                	mov    esi,edx
c0015d3a:	c1 ff 1f             	sar    edi,0x1f
c0015d3d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d41:	21 f9                	and    ecx,edi
c0015d43:	09 d1                	or     ecx,edx
c0015d45:	75 2f                	jne    c0015d76 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d47:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d4f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d55:	09 f2                	or     edx,esi
c0015d57:	89 15 80 db 02 c0    	mov    DWORD PTR ds:0xc002db80,edx
c0015d5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d61:	09 fa                	or     edx,edi
c0015d63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d67:	89 15 84 db 02 c0    	mov    DWORD PTR ds:0xc002db84,edx
c0015d6d:	89 1c bd a0 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2460],ebx
c0015d74:	eb 08                	jmp    c0015d7e <LogicalDisk::assignDriveLetter()+0xae>
c0015d76:	45                   	inc    ebp
c0015d77:	40                   	inc    eax
c0015d78:	3c 5b                	cmp    al,0x5b
c0015d7a:	75 90                	jne    c0015d0c <LogicalDisk::assignDriveLetter()+0x3c>
c0015d7c:	31 c0                	xor    eax,eax
c0015d7e:	83 c4 14             	add    esp,0x14
c0015d81:	5b                   	pop    ebx
c0015d82:	5e                   	pop    esi
c0015d83:	5f                   	pop    edi
c0015d84:	5d                   	pop    ebp
c0015d85:	c3                   	ret    

c0015d86 <LogicalDisk::mount()>:
c0015d86:	56                   	push   esi
c0015d87:	53                   	push   ebx
c0015d88:	53                   	push   ebx
c0015d89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d8d:	8b 1d 14 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d714
c0015d93:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d9d:	85 db                	test   ebx,ebx
c0015d9f:	74 27                	je     c0015dc8 <LogicalDisk::mount()+0x42>
c0015da1:	51                   	push   ecx
c0015da2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015da9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015dab:	83 e8 41             	sub    eax,0x41
c0015dae:	50                   	push   eax
c0015daf:	56                   	push   esi
c0015db0:	53                   	push   ebx
c0015db1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	84 c0                	test   al,al
c0015db9:	74 08                	je     c0015dc3 <LogicalDisk::mount()+0x3d>
c0015dbb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015dc1:	eb 07                	jmp    c0015dca <LogicalDisk::mount()+0x44>
c0015dc3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015dc6:	eb d5                	jmp    c0015d9d <LogicalDisk::mount()+0x17>
c0015dc8:	31 c0                	xor    eax,eax
c0015dca:	5a                   	pop    edx
c0015dcb:	5b                   	pop    ebx
c0015dcc:	5e                   	pop    esi
c0015dcd:	c3                   	ret    

c0015dce <LogicalDisk::unmount()>:
c0015dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dd2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <LogicalDisk::eject()>:
c0015dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015de2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015de8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dee:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015df1:	90                   	nop

c0015df2 <LogicalDisk::unassignDriveLetter()>:
c0015df2:	57                   	push   edi
c0015df3:	56                   	push   esi
c0015df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015df8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dff:	84 c9                	test   cl,cl
c0015e01:	75 0f                	jne    c0015e12 <LogicalDisk::unassignDriveLetter()+0x20>
c0015e03:	c7 44 24 0c 84 ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ab84
c0015e0b:	5e                   	pop    esi
c0015e0c:	5f                   	pop    edi
c0015e0d:	e9 4d 3e 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c0015e12:	83 e9 41             	sub    ecx,0x41
c0015e15:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e1c:	b8 01 00 00 00       	mov    eax,0x1
c0015e21:	c7 04 8d a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2460],0x0
c0015e2c:	d3 e0                	shl    eax,cl
c0015e2e:	89 c7                	mov    edi,eax
c0015e30:	f7 d0                	not    eax
c0015e32:	c1 ff 1f             	sar    edi,0x1f
c0015e35:	21 05 80 db 02 c0    	and    DWORD PTR ds:0xc002db80,eax
c0015e3b:	89 fe                	mov    esi,edi
c0015e3d:	f7 d6                	not    esi
c0015e3f:	21 35 84 db 02 c0    	and    DWORD PTR ds:0xc002db84,esi
c0015e45:	5e                   	pop    esi
c0015e46:	5f                   	pop    edi
c0015e47:	c3                   	ret    

c0015e48 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e48:	57                   	push   edi
c0015e49:	56                   	push   esi
c0015e4a:	53                   	push   ebx
c0015e4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e61:	77 41                	ja     c0015ea4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e63:	99                   	cdq    
c0015e64:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e6a:	01 c8                	add    eax,ecx
c0015e6c:	11 da                	adc    edx,ebx
c0015e6e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e74:	19 d7                	sbb    edi,edx
c0015e76:	72 33                	jb     c0015eab <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e78:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e7e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e88:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e8c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e9c:	5b                   	pop    ebx
c0015e9d:	5e                   	pop    esi
c0015e9e:	5f                   	pop    edi
c0015e9f:	e9 cc 0a 00 00       	jmp    c0016970 <VCache::read(unsigned long long, int, void*)>
c0015ea4:	b8 05 00 00 00       	mov    eax,0x5
c0015ea9:	eb 05                	jmp    c0015eb0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015eab:	b8 07 00 00 00       	mov    eax,0x7
c0015eb0:	5b                   	pop    ebx
c0015eb1:	5e                   	pop    esi
c0015eb2:	5f                   	pop    edi
c0015eb3:	c3                   	ret    

c0015eb4 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015eb4:	57                   	push   edi
c0015eb5:	56                   	push   esi
c0015eb6:	53                   	push   ebx
c0015eb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ebb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ebf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ec3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ec7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ecd:	77 41                	ja     c0015f10 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ecf:	99                   	cdq    
c0015ed0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ed6:	01 c8                	add    eax,ecx
c0015ed8:	11 da                	adc    edx,ebx
c0015eda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ee0:	19 d7                	sbb    edi,edx
c0015ee2:	72 33                	jb     c0015f17 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ee4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015eea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ef0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ef4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ef8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015efe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f08:	5b                   	pop    ebx
c0015f09:	5e                   	pop    esi
c0015f0a:	5f                   	pop    edi
c0015f0b:	e9 76 09 00 00       	jmp    c0016886 <VCache::write(unsigned long long, int, void*)>
c0015f10:	b8 05 00 00 00       	mov    eax,0x5
c0015f15:	eb 05                	jmp    c0015f1c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f17:	b8 07 00 00 00       	mov    eax,0x7
c0015f1c:	5b                   	pop    ebx
c0015f1d:	5e                   	pop    esi
c0015f1e:	5f                   	pop    edi
c0015f1f:	c3                   	ret    

c0015f20 <Mouse::Mouse(char const*)>:
c0015f20:	83 ec 0c             	sub    esp,0xc
c0015f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f27:	83 ec 08             	sub    esp,0x8
c0015f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f2e:	50                   	push   eax
c0015f2f:	e8 2e dc ff ff       	call   c0013b62 <Device::Device(char const*)>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0015f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f40:	89 10                	mov    DWORD PTR [eax],edx
c0015f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f46:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f50:	90                   	nop
c0015f51:	83 c4 0c             	add    esp,0xc
c0015f54:	c3                   	ret    
c0015f55:	90                   	nop

c0015f56 <Mouse::~Mouse()>:
c0015f56:	83 ec 0c             	sub    esp,0xc
c0015f59:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0015f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f62:	89 10                	mov    DWORD PTR [eax],edx
c0015f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f68:	83 ec 0c             	sub    esp,0xc
c0015f6b:	50                   	push   eax
c0015f6c:	e8 bb d8 ff ff       	call   c001382c <Device::~Device()>
c0015f71:	83 c4 10             	add    esp,0x10
c0015f74:	90                   	nop
c0015f75:	83 c4 0c             	add    esp,0xc
c0015f78:	c3                   	ret    
c0015f79:	90                   	nop

c0015f7a <Mouse::~Mouse()>:
c0015f7a:	83 ec 0c             	sub    esp,0xc
c0015f7d:	83 ec 0c             	sub    esp,0xc
c0015f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f84:	e8 cd ff ff ff       	call   c0015f56 <Mouse::~Mouse()>
c0015f89:	83 c4 10             	add    esp,0x10
c0015f8c:	83 ec 08             	sub    esp,0x8
c0015f8f:	68 58 01 00 00       	push   0x158
c0015f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f98:	e8 b0 c4 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0015f9d:	83 c4 10             	add    esp,0x10
c0015fa0:	83 c4 0c             	add    esp,0xc
c0015fa3:	c3                   	ret    

c0015fa4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fa4:	55                   	push   ebp
c0015fa5:	57                   	push   edi
c0015fa6:	56                   	push   esi
c0015fa7:	53                   	push   ebx
c0015fa8:	81 ec 28 01 00 00    	sub    esp,0x128
c0015fae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015fb5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015fbc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015fc3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fd2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fd9:	e8 80 dc ff ff       	call   c0013c5e <Device::getName()>
c0015fde:	5a                   	pop    edx
c0015fdf:	59                   	pop    ecx
c0015fe0:	50                   	push   eax
c0015fe1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fe5:	55                   	push   ebp
c0015fe6:	e8 21 a8 fe ff       	call   c000080c <strcpy>
c0015feb:	5b                   	pop    ebx
c0015fec:	58                   	pop    eax
c0015fed:	68 fc ab 02 c0       	push   0xc002abfc
c0015ff2:	55                   	push   ebp
c0015ff3:	e8 54 a9 fe ff       	call   c000094c <strcat>
c0015ff8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fff:	e8 98 95 ff ff       	call   c000f59c <malloc>
c0016004:	83 c4 0c             	add    esp,0xc
c0016007:	89 c3                	mov    ebx,eax
c0016009:	57                   	push   edi
c001600a:	56                   	push   esi
c001600b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001600f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016013:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001601a:	55                   	push   ebp
c001601b:	50                   	push   eax
c001601c:	e8 f9 fb ff ff       	call   c0015c1a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016021:	83 c4 14             	add    esp,0x14
c0016024:	53                   	push   ebx
c0016025:	e8 a6 fc ff ff       	call   c0015cd0 <LogicalDisk::assignDriveLetter()>
c001602a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001602d:	e8 54 fd ff ff       	call   c0015d86 <LogicalDisk::mount()>
c0016032:	58                   	pop    eax
c0016033:	5a                   	pop    edx
c0016034:	53                   	push   ebx
c0016035:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001603c:	e8 1d d9 ff ff       	call   c001395e <Device::addChild(Device*)>
c0016041:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016047:	5b                   	pop    ebx
c0016048:	5e                   	pop    esi
c0016049:	5f                   	pop    edi
c001604a:	5d                   	pop    ebp
c001604b:	c3                   	ret    

c001604c <createPartitionsForDisk(PhysicalDisk*)>:
c001604c:	55                   	push   ebp
c001604d:	57                   	push   edi
c001604e:	56                   	push   esi
c001604f:	53                   	push   ebx
c0016050:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016056:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001605d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016063:	3d 00 02 00 00       	cmp    eax,0x200
c0016068:	74 27                	je     c0016091 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001606a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016070:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016076:	83 ec 10             	sub    esp,0x10
c0016079:	0f a4 f7 0a          	shld   edi,esi,0xa
c001607d:	99                   	cdq    
c001607e:	c1 e6 0a             	shl    esi,0xa
c0016081:	52                   	push   edx
c0016082:	89 fd                	mov    ebp,edi
c0016084:	50                   	push   eax
c0016085:	55                   	push   ebp
c0016086:	56                   	push   esi
c0016087:	e8 a8 04 01 00       	call   c0026534 <__udivdi3>
c001608c:	e9 b1 00 00 00       	jmp    c0016142 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016091:	83 ec 0c             	sub    esp,0xc
c0016094:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016096:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001609a:	56                   	push   esi
c001609b:	6a 01                	push   0x1
c001609d:	6a 00                	push   0x0
c001609f:	6a 00                	push   0x0
c00160a1:	53                   	push   ebx
c00160a2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00160a5:	83 c4 20             	add    esp,0x20
c00160a8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00160b0:	75 0a                	jne    c00160bc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00160b2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160ba:	74 2c                	je     c00160e8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160bc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160c2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160c8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160ce:	83 ec 10             	sub    esp,0x10
c00160d1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160d5:	89 f7                	mov    edi,esi
c00160d7:	c1 e0 0a             	shl    eax,0xa
c00160da:	c1 ff 1f             	sar    edi,0x1f
c00160dd:	57                   	push   edi
c00160de:	56                   	push   esi
c00160df:	52                   	push   edx
c00160e0:	50                   	push   eax
c00160e1:	e8 4e 04 01 00       	call   c0026534 <__udivdi3>
c00160e6:	eb 5a                	jmp    c0016142 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160e8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160ef:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160f6:	83 e1 7f             	and    ecx,0x7f
c00160f9:	83 e0 7f             	and    eax,0x7f
c00160fc:	01 c1                	add    ecx,eax
c00160fe:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016105:	83 e0 7f             	and    eax,0x7f
c0016108:	01 c1                	add    ecx,eax
c001610a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016111:	83 e0 7f             	and    eax,0x7f
c0016114:	00 c1                	add    cl,al
c0016116:	74 41                	je     c0016159 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016118:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001611e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016124:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001612a:	83 ec 10             	sub    esp,0x10
c001612d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016131:	89 f7                	mov    edi,esi
c0016133:	c1 e0 0a             	shl    eax,0xa
c0016136:	c1 ff 1f             	sar    edi,0x1f
c0016139:	57                   	push   edi
c001613a:	56                   	push   esi
c001613b:	52                   	push   edx
c001613c:	50                   	push   eax
c001613d:	e8 f2 03 01 00       	call   c0026534 <__udivdi3>
c0016142:	83 c4 14             	add    esp,0x14
c0016145:	52                   	push   edx
c0016146:	50                   	push   eax
c0016147:	6a 00                	push   0x0
c0016149:	6a 00                	push   0x0
c001614b:	53                   	push   ebx
c001614c:	e8 53 fe ff ff       	call   c0015fa4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016151:	83 c4 20             	add    esp,0x20
c0016154:	e9 79 01 00 00       	jmp    c00162d2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016159:	89 f0                	mov    eax,esi
c001615b:	31 f6                	xor    esi,esi
c001615d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016164:	75 02                	jne    c0016168 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016166:	89 f1                	mov    ecx,esi
c0016168:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001616f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016176:	c1 e2 08             	shl    edx,0x8
c0016179:	c1 e7 10             	shl    edi,0x10
c001617c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016184:	09 fa                	or     edx,edi
c0016186:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001618e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016195:	83 c0 10             	add    eax,0x10
c0016198:	09 fa                	or     edx,edi
c001619a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00161a1:	c1 e7 18             	shl    edi,0x18
c00161a4:	09 fa                	or     edx,edi
c00161a6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00161ad:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00161b1:	c1 e7 10             	shl    edi,0x10
c00161b4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161bb:	c1 e2 08             	shl    edx,0x8
c00161be:	09 fa                	or     edx,edi
c00161c0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161c7:	09 fa                	or     edx,edi
c00161c9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161d0:	c1 e7 18             	shl    edi,0x18
c00161d3:	09 fa                	or     edx,edi
c00161d5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161d9:	46                   	inc    esi
c00161da:	83 fe 04             	cmp    esi,0x4
c00161dd:	0f 85 7a ff ff ff    	jne    c001615d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e7:	83 f0 01             	xor    eax,0x1
c00161ea:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161ee:	75 57                	jne    c0016247 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161f4:	83 f0 01             	xor    eax,0x1
c00161f7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161fb:	75 4a                	jne    c0016247 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161fd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016201:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016209:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016211:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016217:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001621d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016223:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016227:	89 f7                	mov    edi,esi
c0016229:	c1 e0 0a             	shl    eax,0xa
c001622c:	c1 ff 1f             	sar    edi,0x1f
c001622f:	57                   	push   edi
c0016230:	56                   	push   esi
c0016231:	52                   	push   edx
c0016232:	50                   	push   eax
c0016233:	e8 fc 02 01 00       	call   c0026534 <__udivdi3>
c0016238:	83 c4 10             	add    esp,0x10
c001623b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001623f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016243:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016247:	84 c9                	test   cl,cl
c0016249:	74 53                	je     c001629e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001624b:	0f b6 c9             	movzx  ecx,cl
c001624e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016252:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016256:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001625a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001625e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016262:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016266:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001626a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001626e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001627a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016282:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016286:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001628a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001628e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016292:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016296:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001629a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001629e:	31 ed                	xor    ebp,ebp
c00162a0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00162a4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00162a8:	89 f8                	mov    eax,edi
c00162aa:	09 f0                	or     eax,esi
c00162ac:	74 1e                	je     c00162cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162ae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00162b2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00162b6:	89 d1                	mov    ecx,edx
c00162b8:	09 c1                	or     ecx,eax
c00162ba:	74 10                	je     c00162cc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	57                   	push   edi
c00162c0:	56                   	push   esi
c00162c1:	52                   	push   edx
c00162c2:	50                   	push   eax
c00162c3:	53                   	push   ebx
c00162c4:	e8 db fc ff ff       	call   c0015fa4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162c9:	83 c4 20             	add    esp,0x20
c00162cc:	45                   	inc    ebp
c00162cd:	83 fd 04             	cmp    ebp,0x4
c00162d0:	75 ce                	jne    c00162a0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162d2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162d8:	5b                   	pop    ebx
c00162d9:	5e                   	pop    esi
c00162da:	5f                   	pop    edi
c00162db:	5d                   	pop    ebp
c00162dc:	c3                   	ret    
c00162dd:	90                   	nop

c00162de <Serial::Serial(char const*)>:
c00162de:	83 ec 0c             	sub    esp,0xc
c00162e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e5:	83 ec 08             	sub    esp,0x8
c00162e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162ec:	50                   	push   eax
c00162ed:	e8 70 d8 ff ff       	call   c0013b62 <Device::Device(char const*)>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c00162fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162fe:	89 10                	mov    DWORD PTR [eax],edx
c0016300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016304:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001630e:	90                   	nop
c001630f:	83 c4 0c             	add    esp,0xc
c0016312:	c3                   	ret    
c0016313:	90                   	nop

c0016314 <Serial::~Serial()>:
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c001631c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016320:	89 10                	mov    DWORD PTR [eax],edx
c0016322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016326:	83 ec 0c             	sub    esp,0xc
c0016329:	50                   	push   eax
c001632a:	e8 fd d4 ff ff       	call   c001382c <Device::~Device()>
c001632f:	83 c4 10             	add    esp,0x10
c0016332:	90                   	nop
c0016333:	83 c4 0c             	add    esp,0xc
c0016336:	c3                   	ret    
c0016337:	90                   	nop

c0016338 <Serial::~Serial()>:
c0016338:	83 ec 0c             	sub    esp,0xc
c001633b:	83 ec 0c             	sub    esp,0xc
c001633e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016342:	e8 cd ff ff ff       	call   c0016314 <Serial::~Serial()>
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	83 ec 08             	sub    esp,0x8
c001634d:	68 58 01 00 00       	push   0x158
c0016352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016356:	e8 f2 c0 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	83 c4 0c             	add    esp,0xc
c0016361:	c3                   	ret    

c0016362 <Timer::Timer(char const*)>:
c0016362:	83 ec 0c             	sub    esp,0xc
c0016365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016369:	83 ec 08             	sub    esp,0x8
c001636c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016370:	50                   	push   eax
c0016371:	e8 ec d7 ff ff       	call   c0013b62 <Device::Device(char const*)>
c0016376:	83 c4 10             	add    esp,0x10
c0016379:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c001637e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016382:	89 10                	mov    DWORD PTR [eax],edx
c0016384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016388:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016392:	90                   	nop
c0016393:	83 c4 0c             	add    esp,0xc
c0016396:	c3                   	ret    
c0016397:	90                   	nop

c0016398 <Timer::~Timer()>:
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	89 10                	mov    DWORD PTR [eax],edx
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	50                   	push   eax
c00163ae:	e8 79 d4 ff ff       	call   c001382c <Device::~Device()>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	90                   	nop
c00163b7:	83 c4 0c             	add    esp,0xc
c00163ba:	c3                   	ret    
c00163bb:	90                   	nop

c00163bc <Timer::~Timer()>:
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c6:	e8 cd ff ff ff       	call   c0016398 <Timer::~Timer()>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	83 ec 08             	sub    esp,0x8
c00163d1:	68 5c 01 00 00       	push   0x15c
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	e8 6e c0 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	83 c4 0c             	add    esp,0xc
c00163e5:	c3                   	ret    

c00163e6 <Timer::read()>:
c00163e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163f0:	c3                   	ret    

c00163f1 <timerHandler(unsigned long long)>:
c00163f1:	55                   	push   ebp
c00163f2:	57                   	push   edi
c00163f3:	56                   	push   esi
c00163f4:	53                   	push   ebx
c00163f5:	83 ec 0c             	sub    esp,0xc
c00163f8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163fc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016400:	01 35 10 dc 02 c0    	add    DWORD PTR ds:0xc002dc10,esi
c0016406:	11 3d 14 dc 02 c0    	adc    DWORD PTR ds:0xc002dc14,edi
c001640c:	80 3d ad d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ad,0x0
c0016413:	0f 84 42 01 00 00    	je     c001655b <timerHandler(unsigned long long)+0x16a>
c0016419:	fa                   	cli    
c001641a:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c0016429:	68 d8 0a 03 c0       	push   0xc0030ad8
c001642e:	e8 5b 21 01 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016433:	83 c4 10             	add    esp,0x10
c0016436:	84 c0                	test   al,al
c0016438:	0f 85 a2 00 00 00    	jne    c00164e0 <timerHandler(unsigned long long)+0xef>
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	68 d8 0a 03 c0       	push   0xc0030ad8
c0016446:	e8 5f 21 01 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	89 c3                	mov    ebx,eax
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	68 d8 0a 03 c0       	push   0xc0030ad8
c0016458:	e8 4d 21 01 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001645d:	c7 04 24 d8 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ad8
c0016464:	89 c5                	mov    ebp,eax
c0016466:	e8 47 21 01 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001646b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001646e:	83 c4 10             	add    esp,0x10
c0016471:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016474:	39 15 10 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc10,edx
c001647a:	a1 14 dc 02 c0       	mov    eax,ds:0xc002dc14
c001647f:	19 c8                	sbb    eax,ecx
c0016481:	72 21                	jb     c00164a4 <timerHandler(unsigned long long)+0xb3>
c0016483:	83 ec 0c             	sub    esp,0xc
c0016486:	55                   	push   ebp
c0016487:	e8 e0 77 00 00       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001648c:	83 c4 10             	add    esp,0x10
c001648f:	39 eb                	cmp    ebx,ebp
c0016491:	75 21                	jne    c00164b4 <timerHandler(unsigned long long)+0xc3>
c0016493:	83 ec 0c             	sub    esp,0xc
c0016496:	68 d8 0a 03 c0       	push   0xc0030ad8
c001649b:	e8 0a 21 01 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164a0:	89 c3                	mov    ebx,eax
c00164a2:	eb 0d                	jmp    c00164b1 <timerHandler(unsigned long long)+0xc0>
c00164a4:	50                   	push   eax
c00164a5:	50                   	push   eax
c00164a6:	55                   	push   ebp
c00164a7:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164ac:	e8 af 21 01 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164bc:	e8 cd 20 01 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164c1:	83 c4 10             	add    esp,0x10
c00164c4:	84 c0                	test   al,al
c00164c6:	75 18                	jne    c00164e0 <timerHandler(unsigned long long)+0xef>
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164d0:	e8 d5 20 01 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	39 d8                	cmp    eax,ebx
c00164da:	0f 85 70 ff ff ff    	jne    c0016450 <timerHandler(unsigned long long)+0x5f>
c00164e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00164e9:	74 3d                	je     c0016528 <timerHandler(unsigned long long)+0x137>
c00164eb:	80 3d ac d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ac,0x0
c00164f2:	74 34                	je     c0016528 <timerHandler(unsigned long long)+0x137>
c00164f4:	fa                   	cli    
c00164f5:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c00164fb:	31 d2                	xor    edx,edx
c00164fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016502:	89 f9                	mov    ecx,edi
c0016504:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001650f:	39 c6                	cmp    esi,eax
c0016511:	19 d1                	sbb    ecx,edx
c0016513:	72 05                	jb     c001651a <timerHandler(unsigned long long)+0x129>
c0016515:	e8 cf 72 00 00       	call   c001d7e9 <schedule()>
c001651a:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001651f:	48                   	dec    eax
c0016520:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0016525:	75 01                	jne    c0016528 <timerHandler(unsigned long long)+0x137>
c0016527:	fb                   	sti    
c0016528:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001652d:	48                   	dec    eax
c001652e:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c0016533:	75 18                	jne    c001654d <timerHandler(unsigned long long)+0x15c>
c0016535:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c001653c:	74 0f                	je     c001654d <timerHandler(unsigned long long)+0x15c>
c001653e:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c0016548:	e8 9c 72 00 00       	call   c001d7e9 <schedule()>
c001654d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0016552:	48                   	dec    eax
c0016553:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0016558:	75 01                	jne    c001655b <timerHandler(unsigned long long)+0x16a>
c001655a:	fb                   	sti    
c001655b:	83 c4 0c             	add    esp,0xc
c001655e:	5b                   	pop    ebx
c001655f:	5e                   	pop    esi
c0016560:	5f                   	pop    edi
c0016561:	5d                   	pop    ebp
c0016562:	c3                   	ret    

c0016563 <setupTimer(int)>:
c0016563:	57                   	push   edi
c0016564:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016569:	56                   	push   esi
c001656a:	53                   	push   ebx
c001656b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001656f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016575:	83 ec 0c             	sub    esp,0xc
c0016578:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001657e:	e8 db d6 ff ff       	call   c0013c5e <Device::getName()>
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016589:	0f 85 8d 00 00 00    	jne    c001661c <setupTimer(int)+0xb9>
c001658f:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016594:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001659b:	74 7f                	je     c001661c <setupTimer(int)+0xb9>
c001659d:	83 ec 0c             	sub    esp,0xc
c00165a0:	68 5c 01 00 00       	push   0x15c
c00165a5:	e8 f2 8f ff ff       	call   c000f59c <malloc>
c00165aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00165ad:	89 c3                	mov    ebx,eax
c00165af:	e8 54 fb 00 00       	call   c0026108 <PIT::PIT()>
c00165b4:	59                   	pop    ecx
c00165b5:	5f                   	pop    edi
c00165b6:	53                   	push   ebx
c00165b7:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c00165bd:	e8 9c d3 ff ff       	call   c001395e <Device::addChild(Device*)>
c00165c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165c4:	6a 00                	push   0x0
c00165c6:	6a 00                	push   0x0
c00165c8:	56                   	push   esi
c00165c9:	53                   	push   ebx
c00165ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165cd:	83 c4 14             	add    esp,0x14
c00165d0:	68 60 01 00 00       	push   0x160
c00165d5:	e8 c2 8f ff ff       	call   c000f59c <malloc>
c00165da:	89 04 24             	mov    DWORD PTR [esp],eax
c00165dd:	89 c7                	mov    edi,eax
c00165df:	e8 d4 f9 00 00       	call   c0025fb8 <APICTimer::APICTimer()>
c00165e4:	6a 00                	push   0x0
c00165e6:	6a 00                	push   0x0
c00165e8:	56                   	push   esi
c00165e9:	57                   	push   edi
c00165ea:	e8 cb f8 00 00       	call   c0025eba <APICTimer::open(int, int, void*)>
c00165ef:	83 c4 20             	add    esp,0x20
c00165f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165f4:	6a 00                	push   0x0
c00165f6:	6a 00                	push   0x0
c00165f8:	6a 00                	push   0x0
c00165fa:	53                   	push   ebx
c00165fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00165fe:	58                   	pop    eax
c00165ff:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016604:	5a                   	pop    edx
c0016605:	57                   	push   edi
c0016606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001660c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016612:	e8 47 d3 ff ff       	call   c001395e <Device::addChild(Device*)>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	eb 33                	jmp    c001664f <setupTimer(int)+0xec>
c001661c:	83 ec 0c             	sub    esp,0xc
c001661f:	68 5c 01 00 00       	push   0x15c
c0016624:	e8 73 8f ff ff       	call   c000f59c <malloc>
c0016629:	89 04 24             	mov    DWORD PTR [esp],eax
c001662c:	89 c3                	mov    ebx,eax
c001662e:	e8 d5 fa 00 00       	call   c0026108 <PIT::PIT()>
c0016633:	58                   	pop    eax
c0016634:	5a                   	pop    edx
c0016635:	53                   	push   ebx
c0016636:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c001663c:	e8 1d d3 ff ff       	call   c001395e <Device::addChild(Device*)>
c0016641:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016643:	6a 00                	push   0x0
c0016645:	6a 00                	push   0x0
c0016647:	56                   	push   esi
c0016648:	53                   	push   ebx
c0016649:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001664c:	83 c4 20             	add    esp,0x20
c001664f:	89 d8                	mov    eax,ebx
c0016651:	5b                   	pop    ebx
c0016652:	5e                   	pop    esi
c0016653:	5f                   	pop    edi
c0016654:	c3                   	ret    
c0016655:	90                   	nop

c0016656 <VCache::VCache(PhysicalDisk*)>:
c0016656:	53                   	push   ebx
c0016657:	83 ec 18             	sub    esp,0x18
c001665a:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001665f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016663:	89 10                	mov    DWORD PTR [eax],edx
c0016665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016669:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016674:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001667b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016686:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001668d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016691:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016698:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001669f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00166aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ae:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00166bd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00166c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00166cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00166d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00166dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00166e7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166f6:	e8 a1 8e ff ff       	call   c000f59c <malloc>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	89 c3                	mov    ebx,eax
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	53                   	push   ebx
c0016704:	e8 a9 6e 00 00       	call   c001d5b2 <Mutex::Mutex()>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016710:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016717:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001671b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001671e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016722:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016729:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001672d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016737:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001673a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001673e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016744:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001674a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001674e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016751:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016758:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001675c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016760:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016766:	05 00 01 00 00       	add    eax,0x100
c001676b:	c1 e0 04             	shl    eax,0x4
c001676e:	83 ec 0c             	sub    esp,0xc
c0016771:	50                   	push   eax
c0016772:	e8 25 8e ff ff       	call   c000f59c <malloc>
c0016777:	83 c4 10             	add    esp,0x10
c001677a:	89 c2                	mov    edx,eax
c001677c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016780:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016787:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001678e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016792:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001679a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167a0:	c1 e0 07             	shl    eax,0x7
c00167a3:	83 ec 0c             	sub    esp,0xc
c00167a6:	50                   	push   eax
c00167a7:	e8 f0 8d ff ff       	call   c000f59c <malloc>
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	89 c2                	mov    edx,eax
c00167b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00167b8:	90                   	nop
c00167b9:	83 c4 18             	add    esp,0x18
c00167bc:	5b                   	pop    ebx
c00167bd:	c3                   	ret    

c00167be <VCache::invalidateReadBuffer()>:
c00167be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167c2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00167c8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167cc:	c3                   	ret    
c00167cd:	90                   	nop

c00167ce <VCache::writeWriteBuffer()>:
c00167ce:	53                   	push   ebx
c00167cf:	83 ec 14             	sub    esp,0x14
c00167d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00167d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00167db:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167e1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00167e4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00167e7:	50                   	push   eax
c00167e8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00167eb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00167f2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00167f9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00167fd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016804:	83 c4 28             	add    esp,0x28
c0016807:	5b                   	pop    ebx
c0016808:	c3                   	ret    
c0016809:	90                   	nop

c001680a <VCache::~VCache()>:
c001680a:	83 ec 0c             	sub    esp,0xc
c001680d:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c0016812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016816:	89 10                	mov    DWORD PTR [eax],edx
c0016818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001681f:	84 c0                	test   al,al
c0016821:	74 0f                	je     c0016832 <VCache::~VCache()+0x28>
c0016823:	83 ec 0c             	sub    esp,0xc
c0016826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001682a:	e8 9f ff ff ff       	call   c00167ce <VCache::writeWriteBuffer()>
c001682f:	83 c4 10             	add    esp,0x10
c0016832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016836:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016839:	83 ec 0c             	sub    esp,0xc
c001683c:	50                   	push   eax
c001683d:	e8 6a 8d ff ff       	call   c000f5ac <free>
c0016842:	83 c4 10             	add    esp,0x10
c0016845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016849:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	50                   	push   eax
c0016850:	e8 57 8d ff ff       	call   c000f5ac <free>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	90                   	nop
c0016859:	83 c4 0c             	add    esp,0xc
c001685c:	c3                   	ret    
c001685d:	90                   	nop

c001685e <VCache::~VCache()>:
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	83 ec 0c             	sub    esp,0xc
c0016864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016868:	e8 9d ff ff ff       	call   c001680a <VCache::~VCache()>
c001686d:	83 c4 10             	add    esp,0x10
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	6a 44                	push   0x44
c0016875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016879:	e8 cf bb ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	83 c4 0c             	add    esp,0xc
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <VCache::write(unsigned long long, int, void*)>:
c0016886:	55                   	push   ebp
c0016887:	57                   	push   edi
c0016888:	56                   	push   esi
c0016889:	53                   	push   ebx
c001688a:	83 ec 18             	sub    esp,0x18
c001688d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016891:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016895:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016899:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001689c:	e8 57 72 00 00       	call   c001daf8 <Semaphore::acquire()>
c00168a1:	83 c4 10             	add    esp,0x10
c00168a4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00168a8:	74 0c                	je     c00168b6 <VCache::write(unsigned long long, int, void*)+0x30>
c00168aa:	83 ec 0c             	sub    esp,0xc
c00168ad:	53                   	push   ebx
c00168ae:	e8 0b ff ff ff       	call   c00167be <VCache::invalidateReadBuffer()>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168ba:	74 5c                	je     c0016918 <VCache::write(unsigned long long, int, void*)+0x92>
c00168bc:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00168bf:	89 e8                	mov    eax,ebp
c00168c1:	99                   	cdq    
c00168c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00168c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00168c8:	89 c1                	mov    ecx,eax
c00168ca:	89 d0                	mov    eax,edx
c00168cc:	31 f1                	xor    ecx,esi
c00168ce:	31 f8                	xor    eax,edi
c00168d0:	09 c1                	or     ecx,eax
c00168d2:	75 38                	jne    c001690c <VCache::write(unsigned long long, int, void*)+0x86>
c00168d4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00168d9:	75 31                	jne    c001690c <VCache::write(unsigned long long, int, void*)+0x86>
c00168db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168de:	89 ef                	mov    edi,ebp
c00168e0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00168e6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168ea:	0f af f9             	imul   edi,ecx
c00168ed:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00168f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00168f5:	40                   	inc    eax
c00168f6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00168f9:	83 c0 80             	add    eax,0xffffff80
c00168fc:	75 5c                	jne    c001695a <VCache::write(unsigned long long, int, void*)+0xd4>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	53                   	push   ebx
c0016902:	e8 c7 fe ff ff       	call   c00167ce <VCache::writeWriteBuffer()>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	eb 4e                	jmp    c001695a <VCache::write(unsigned long long, int, void*)+0xd4>
c001690c:	83 ec 0c             	sub    esp,0xc
c001690f:	53                   	push   ebx
c0016910:	e8 b9 fe ff ff       	call   c00167ce <VCache::writeWriteBuffer()>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001691b:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016920:	7f 22                	jg     c0016944 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016922:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016925:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016928:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001692c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016930:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016933:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016936:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001693c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016942:	eb 16                	jmp    c001695a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	8b 10                	mov    edx,DWORD PTR [eax]
c0016949:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001694d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016951:	57                   	push   edi
c0016952:	56                   	push   esi
c0016953:	50                   	push   eax
c0016954:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016957:	83 c4 20             	add    esp,0x20
c001695a:	83 ec 0c             	sub    esp,0xc
c001695d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016960:	e8 ef 77 00 00       	call   c001e154 <Semaphore::release()>
c0016965:	83 c4 1c             	add    esp,0x1c
c0016968:	31 c0                	xor    eax,eax
c001696a:	5b                   	pop    ebx
c001696b:	5e                   	pop    esi
c001696c:	5f                   	pop    edi
c001696d:	5d                   	pop    ebp
c001696e:	c3                   	ret    
c001696f:	90                   	nop

c0016970 <VCache::read(unsigned long long, int, void*)>:
c0016970:	55                   	push   ebp
c0016971:	57                   	push   edi
c0016972:	56                   	push   esi
c0016973:	53                   	push   ebx
c0016974:	83 ec 28             	sub    esp,0x28
c0016977:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001697b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001697f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016983:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016987:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001698a:	e8 69 71 00 00       	call   c001daf8 <Semaphore::acquire()>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016996:	74 0c                	je     c00169a4 <VCache::read(unsigned long long, int, void*)+0x34>
c0016998:	83 ec 0c             	sub    esp,0xc
c001699b:	53                   	push   ebx
c001699c:	e8 2d fe ff ff       	call   c00167ce <VCache::writeWriteBuffer()>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	83 fd 01             	cmp    ebp,0x1
c00169a7:	0f 85 80 00 00 00    	jne    c0016a2d <VCache::read(unsigned long long, int, void*)+0xbd>
c00169ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169b4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00169bb:	75 70                	jne    c0016a2d <VCache::read(unsigned long long, int, void*)+0xbd>
c00169bd:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00169c0:	89 e9                	mov    ecx,ebp
c00169c2:	f7 d9                	neg    ecx
c00169c4:	89 c8                	mov    eax,ecx
c00169c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00169ca:	c1 f8 1f             	sar    eax,0x1f
c00169cd:	21 f1                	and    ecx,esi
c00169cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169d3:	89 c8                	mov    eax,ecx
c00169d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169d9:	21 f9                	and    ecx,edi
c00169db:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00169df:	89 ca                	mov    edx,ecx
c00169e1:	74 0a                	je     c00169ed <VCache::read(unsigned long long, int, void*)+0x7d>
c00169e3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00169e6:	75 05                	jne    c00169ed <VCache::read(unsigned long long, int, void*)+0x7d>
c00169e8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00169eb:	74 23                	je     c0016a10 <VCache::read(unsigned long long, int, void*)+0xa0>
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00169f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00169f8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00169fb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00169fe:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016a00:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016a03:	55                   	push   ebp
c0016a04:	52                   	push   edx
c0016a05:	50                   	push   eax
c0016a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a0a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016a0d:	83 c4 20             	add    esp,0x20
c0016a10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a17:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a1d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a20:	48                   	dec    eax
c0016a21:	21 c6                	and    esi,eax
c0016a23:	0f af f1             	imul   esi,ecx
c0016a26:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016a29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a2b:	eb 1d                	jmp    c0016a4a <VCache::read(unsigned long long, int, void*)+0xda>
c0016a2d:	83 ec 0c             	sub    esp,0xc
c0016a30:	53                   	push   ebx
c0016a31:	e8 88 fd ff ff       	call   c00167be <VCache::invalidateReadBuffer()>
c0016a36:	5a                   	pop    edx
c0016a37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a40:	55                   	push   ebp
c0016a41:	57                   	push   edi
c0016a42:	56                   	push   esi
c0016a43:	50                   	push   eax
c0016a44:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a47:	83 c4 20             	add    esp,0x20
c0016a4a:	83 ec 0c             	sub    esp,0xc
c0016a4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a50:	e8 ff 76 00 00       	call   c001e154 <Semaphore::release()>
c0016a55:	83 c4 2c             	add    esp,0x2c
c0016a58:	31 c0                	xor    eax,eax
c0016a5a:	5b                   	pop    ebx
c0016a5b:	5e                   	pop    esi
c0016a5c:	5f                   	pop    edi
c0016a5d:	5d                   	pop    ebp
c0016a5e:	c3                   	ret    
c0016a5f:	90                   	nop

c0016a60 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a60:	55                   	push   ebp
c0016a61:	57                   	push   edi
c0016a62:	56                   	push   esi
c0016a63:	53                   	push   ebx
c0016a64:	83 ec 1c             	sub    esp,0x1c
c0016a67:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a6f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a73:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a7f:	01 df                	add    edi,ebx
c0016a81:	39 fb                	cmp    ebx,edi
c0016a83:	7d 1f                	jge    c0016aa4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a85:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a89:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a8d:	7d 12                	jge    c0016aa1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a8f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a91:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a95:	53                   	push   ebx
c0016a96:	55                   	push   ebp
c0016a97:	45                   	inc    ebp
c0016a98:	56                   	push   esi
c0016a99:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	eb e8                	jmp    c0016a89 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016aa1:	43                   	inc    ebx
c0016aa2:	eb dd                	jmp    c0016a81 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016aa4:	83 c4 1c             	add    esp,0x1c
c0016aa7:	5b                   	pop    ebx
c0016aa8:	5e                   	pop    esi
c0016aa9:	5f                   	pop    edi
c0016aaa:	5d                   	pop    ebp
c0016aab:	c3                   	ret    

c0016aac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016aac:	55                   	push   ebp
c0016aad:	57                   	push   edi
c0016aae:	31 ff                	xor    edi,edi
c0016ab0:	56                   	push   esi
c0016ab1:	53                   	push   ebx
c0016ab2:	83 ec 1c             	sub    esp,0x1c
c0016ab5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ab9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016abd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ac4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ac9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016acd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ad1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ad5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ad8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016adc:	01 f9                	add    ecx,edi
c0016ade:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ae2:	7d 2f                	jge    c0016b13 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ae4:	31 f6                	xor    esi,esi
c0016ae6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016aea:	01 f2                	add    edx,esi
c0016aec:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016af0:	7d 1a                	jge    c0016b0c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016af2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016af5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016af8:	46                   	inc    esi
c0016af9:	51                   	push   ecx
c0016afa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016afe:	52                   	push   edx
c0016aff:	55                   	push   ebp
c0016b00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b03:	83 c4 10             	add    esp,0x10
c0016b06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b0a:	eb da                	jmp    c0016ae6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016b0c:	47                   	inc    edi
c0016b0d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016b11:	eb c5                	jmp    c0016ad8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b13:	83 c4 1c             	add    esp,0x1c
c0016b16:	5b                   	pop    ebx
c0016b17:	5e                   	pop    esi
c0016b18:	5f                   	pop    edi
c0016b19:	5d                   	pop    ebp
c0016b1a:	c3                   	ret    
c0016b1b:	90                   	nop

c0016b1c <Video::blit(unsigned int*, int, int, int, int)>:
c0016b1c:	55                   	push   ebp
c0016b1d:	57                   	push   edi
c0016b1e:	56                   	push   esi
c0016b1f:	53                   	push   ebx
c0016b20:	83 ec 1c             	sub    esp,0x1c
c0016b23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b2b:	85 c0                	test   eax,eax
c0016b2d:	79 02                	jns    c0016b31 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b2f:	31 c0                	xor    eax,eax
c0016b31:	c1 e0 02             	shl    eax,0x2
c0016b34:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b40:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b44:	39 d8                	cmp    eax,ebx
c0016b46:	7e 49                	jle    c0016b91 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b48:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b4e:	7c 41                	jl     c0016b91 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b50:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b54:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b58:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b5c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b60:	39 f9                	cmp    ecx,edi
c0016b62:	7e 22                	jle    c0016b86 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b64:	83 c5 04             	add    ebp,0x4
c0016b67:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b6d:	7c 14                	jl     c0016b83 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b6f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b71:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b7c:	56                   	push   esi
c0016b7d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	47                   	inc    edi
c0016b84:	eb d2                	jmp    c0016b58 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b8a:	43                   	inc    ebx
c0016b8b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b8f:	eb ab                	jmp    c0016b3c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b91:	83 c4 1c             	add    esp,0x1c
c0016b94:	5b                   	pop    ebx
c0016b95:	5e                   	pop    esi
c0016b96:	5f                   	pop    edi
c0016b97:	5d                   	pop    ebp
c0016b98:	c3                   	ret    
c0016b99:	90                   	nop

c0016b9a <Video::clearScreen(unsigned int)>:
c0016b9a:	57                   	push   edi
c0016b9b:	56                   	push   esi
c0016b9c:	53                   	push   ebx
c0016b9d:	31 db                	xor    ebx,ebx
c0016b9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ba3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ba9:	7e 1f                	jle    c0016bca <Video::clearScreen(unsigned int)+0x30>
c0016bab:	31 ff                	xor    edi,edi
c0016bad:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016bb3:	7e 12                	jle    c0016bc7 <Video::clearScreen(unsigned int)+0x2d>
c0016bb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bbb:	53                   	push   ebx
c0016bbc:	57                   	push   edi
c0016bbd:	47                   	inc    edi
c0016bbe:	56                   	push   esi
c0016bbf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	eb e6                	jmp    c0016bad <Video::clearScreen(unsigned int)+0x13>
c0016bc7:	43                   	inc    ebx
c0016bc8:	eb d9                	jmp    c0016ba3 <Video::clearScreen(unsigned int)+0x9>
c0016bca:	5b                   	pop    ebx
c0016bcb:	5e                   	pop    esi
c0016bcc:	5f                   	pop    edi
c0016bcd:	c3                   	ret    

c0016bce <Video::putpixel(int, int, unsigned int)>:
c0016bce:	c7 44 24 04 8c ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac8c
c0016bd6:	e9 84 30 00 00       	jmp    c0019c5f <Krnl::panic(char const*)>
c0016bdb:	90                   	nop

c0016bdc <Video::Video(char const*)>:
c0016bdc:	83 ec 0c             	sub    esp,0xc
c0016bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be3:	83 ec 08             	sub    esp,0x8
c0016be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bea:	50                   	push   eax
c0016beb:	e8 72 cf ff ff       	call   c0013b62 <Device::Device(char const*)>
c0016bf0:	83 c4 10             	add    esp,0x10
c0016bf3:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0016bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfc:	89 10                	mov    DWORD PTR [eax],edx
c0016bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c02:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016c0c:	90                   	nop
c0016c0d:	83 c4 0c             	add    esp,0xc
c0016c10:	c3                   	ret    
c0016c11:	90                   	nop

c0016c12 <Video::~Video()>:
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0016c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1e:	89 10                	mov    DWORD PTR [eax],edx
c0016c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c24:	83 ec 0c             	sub    esp,0xc
c0016c27:	50                   	push   eax
c0016c28:	e8 ff cb ff ff       	call   c001382c <Device::~Device()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	90                   	nop
c0016c31:	83 c4 0c             	add    esp,0xc
c0016c34:	c3                   	ret    
c0016c35:	90                   	nop

c0016c36 <Video::~Video()>:
c0016c36:	83 ec 0c             	sub    esp,0xc
c0016c39:	83 ec 0c             	sub    esp,0xc
c0016c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c40:	e8 cd ff ff ff       	call   c0016c12 <Video::~Video()>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	83 ec 08             	sub    esp,0x8
c0016c4b:	68 64 01 00 00       	push   0x164
c0016c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c54:	e8 f4 b7 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	83 c4 0c             	add    esp,0xc
c0016c5f:	c3                   	ret    

c0016c60 <Video::isMonochrome()>:
c0016c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c64:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Video::getWidth()>:
c0016c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c70:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c76:	c3                   	ret    
c0016c77:	90                   	nop

c0016c78 <Video::getHeight()>:
c0016c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c82:	c3                   	ret    
c0016c83:	90                   	nop

c0016c84 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c84:	55                   	push   ebp
c0016c85:	57                   	push   edi
c0016c86:	56                   	push   esi
c0016c87:	53                   	push   ebx
c0016c88:	83 ec 2c             	sub    esp,0x2c
c0016c8b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c8f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c93:	83 f8 01             	cmp    eax,0x1
c0016c96:	19 c9                	sbb    ecx,ecx
c0016c98:	31 db                	xor    ebx,ebx
c0016c9a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c9e:	89 cd                	mov    ebp,ecx
c0016ca0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016ca8:	f7 d5                	not    ebp
c0016caa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016cb0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016cb4:	01 d8                	add    eax,ebx
c0016cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cba:	56                   	push   esi
c0016cbb:	e8 b8 ff ff ff       	call   c0016c78 <Video::getHeight()>
c0016cc0:	59                   	pop    ecx
c0016cc1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cc5:	7e 70                	jle    c0016d37 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ccb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ccf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cd6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cda:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ce1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ce5:	89 f8                	mov    eax,edi
c0016ce7:	83 c0 20             	add    eax,0x20
c0016cea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cee:	56                   	push   esi
c0016cef:	e8 78 ff ff ff       	call   c0016c6c <Video::getWidth()>
c0016cf4:	5a                   	pop    edx
c0016cf5:	39 c7                	cmp    edi,eax
c0016cf7:	7d 34                	jge    c0016d2d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016cf9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016cfe:	74 05                	je     c0016d05 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016d00:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d02:	55                   	push   ebp
c0016d03:	eb 0d                	jmp    c0016d12 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016d05:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016d0a:	74 12                	je     c0016d1e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016d0c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d16:	57                   	push   edi
c0016d17:	56                   	push   esi
c0016d18:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d22:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d26:	47                   	inc    edi
c0016d27:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d2b:	75 c1                	jne    c0016cee <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d2d:	43                   	inc    ebx
c0016d2e:	83 fb 20             	cmp    ebx,0x20
c0016d31:	0f 85 79 ff ff ff    	jne    c0016cb0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d37:	83 c4 2c             	add    esp,0x2c
c0016d3a:	5b                   	pop    ebx
c0016d3b:	5e                   	pop    esi
c0016d3c:	5f                   	pop    edi
c0016d3d:	5d                   	pop    ebp
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d40:	55                   	push   ebp
c0016d41:	57                   	push   edi
c0016d42:	56                   	push   esi
c0016d43:	53                   	push   ebx
c0016d44:	83 ec 28             	sub    esp,0x28
c0016d47:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d4b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d4f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016d53:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d57:	c1 e6 08             	shl    esi,0x8
c0016d5a:	01 c6                	add    esi,eax
c0016d5c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d60:	c1 e0 08             	shl    eax,0x8
c0016d63:	01 d0                	add    eax,edx
c0016d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d6d:	0f af c6             	imul   eax,esi
c0016d70:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d77:	50                   	push   eax
c0016d78:	e8 1f 88 ff ff       	call   c000f59c <malloc>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	89 c7                	mov    edi,eax
c0016d82:	85 c0                	test   eax,eax
c0016d84:	75 10                	jne    c0016d96 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	68 ad ac 02 c0       	push   0xc002acad
c0016d8e:	e8 cc 2e 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0016d93:	83 c4 10             	add    esp,0x10
c0016d96:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016d99:	ba 12 00 00 00       	mov    edx,0x12
c0016d9e:	84 c0                	test   al,al
c0016da0:	74 11                	je     c0016db3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016da2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016da6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016daa:	c1 fa 03             	sar    edx,0x3
c0016dad:	0f af d1             	imul   edx,ecx
c0016db0:	83 c2 12             	add    edx,0x12
c0016db3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016db7:	74 04                	je     c0016dbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016db9:	85 f6                	test   esi,esi
c0016dbb:	75 12                	jne    c0016dcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016dbd:	83 ec 0c             	sub    esp,0xc
c0016dc0:	68 bd ac 02 c0       	push   0xc002acbd
c0016dc5:	e8 5b b7 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0016dca:	e9 b8 00 00 00       	jmp    c0016e87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016dcf:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016dd3:	80 f9 02             	cmp    cl,0x2
c0016dd6:	0f 85 96 00 00 00    	jne    c0016e72 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016ddc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016de1:	75 0e                	jne    c0016df1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016de3:	84 c0                	test   al,al
c0016de5:	75 0a                	jne    c0016df1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016de7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016dea:	83 e8 18             	sub    eax,0x18
c0016ded:	a8 f7                	test   al,0xf7
c0016def:	74 0a                	je     c0016dfb <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016df1:	83 ec 0c             	sub    esp,0xc
c0016df4:	68 d2 ac 02 c0       	push   0xc002acd2
c0016df9:	eb 7f                	jmp    c0016e7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016dfb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e03:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e0b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016e0f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e17:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e1b:	75 0c                	jne    c0016e29 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e1d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016e22:	c1 e0 18             	shl    eax,0x18
c0016e25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e29:	45                   	inc    ebp
c0016e2a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016e2f:	c1 e1 10             	shl    ecx,0x10
c0016e32:	89 c8                	mov    eax,ecx
c0016e34:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016e39:	c1 e1 08             	shl    ecx,0x8
c0016e3c:	09 c1                	or     ecx,eax
c0016e3e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016e42:	09 c1                	or     ecx,eax
c0016e44:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016e48:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016e4c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e50:	c1 f8 03             	sar    eax,0x3
c0016e53:	01 c2                	add    edx,eax
c0016e55:	89 e8                	mov    eax,ebp
c0016e57:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e5b:	39 c6                	cmp    esi,eax
c0016e5d:	7f b0                	jg     c0016e0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016e5f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e67:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016e6a:	7e 22                	jle    c0016e8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016e6c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016e70:	eb 99                	jmp    c0016e0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016e72:	50                   	push   eax
c0016e73:	50                   	push   eax
c0016e74:	51                   	push   ecx
c0016e75:	68 e0 ac 02 c0       	push   0xc002ace0
c0016e7a:	e8 a6 b6 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0016e7f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e82:	e8 25 87 ff ff       	call   c000f5ac <free>
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	31 ff                	xor    edi,edi
c0016e8c:	eb 0f                	jmp    c0016e9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016e8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e92:	89 30                	mov    DWORD PTR [eax],esi
c0016e94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e98:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016e9b:	89 30                	mov    DWORD PTR [eax],esi
c0016e9d:	83 c4 1c             	add    esp,0x1c
c0016ea0:	89 f8                	mov    eax,edi
c0016ea2:	5b                   	pop    ebx
c0016ea3:	5e                   	pop    esi
c0016ea4:	5f                   	pop    edi
c0016ea5:	5d                   	pop    ebp
c0016ea6:	c3                   	ret    
c0016ea7:	90                   	nop

c0016ea8 <Video::putTGA(int, int, unsigned char*, int)>:
c0016ea8:	55                   	push   ebp
c0016ea9:	57                   	push   edi
c0016eaa:	56                   	push   esi
c0016eab:	53                   	push   ebx
c0016eac:	83 ec 28             	sub    esp,0x28
c0016eaf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016eb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eb7:	50                   	push   eax
c0016eb8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ebc:	50                   	push   eax
c0016ebd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec5:	56                   	push   esi
c0016ec6:	e8 75 fe ff ff       	call   c0016d40 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ecb:	83 c4 20             	add    esp,0x20
c0016ece:	85 c0                	test   eax,eax
c0016ed0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ed4:	74 35                	je     c0016f0b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ed6:	89 c7                	mov    edi,eax
c0016ed8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016edc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ee0:	39 d8                	cmp    eax,ebx
c0016ee2:	7e 27                	jle    c0016f0b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ee4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ee8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ef0:	39 e8                	cmp    eax,ebp
c0016ef2:	7e 14                	jle    c0016f08 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016ef4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ef6:	83 c7 04             	add    edi,0x4
c0016ef9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016efc:	53                   	push   ebx
c0016efd:	55                   	push   ebp
c0016efe:	45                   	inc    ebp
c0016eff:	56                   	push   esi
c0016f00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	eb e0                	jmp    c0016ee8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f08:	43                   	inc    ebx
c0016f09:	eb cd                	jmp    c0016ed8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f0b:	83 c4 1c             	add    esp,0x1c
c0016f0e:	5b                   	pop    ebx
c0016f0f:	5e                   	pop    esi
c0016f10:	5f                   	pop    edi
c0016f11:	5d                   	pop    ebp
c0016f12:	c3                   	ret    
c0016f13:	90                   	nop

c0016f14 <ACPI::close(int, int, void*)>:
c0016f14:	83 ec 1c             	sub    esp,0x1c
c0016f17:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f1f:	74 0a                	je     c0016f2b <ACPI::close(int, int, void*)+0x17>
c0016f21:	b8 00 00 00 00       	mov    eax,0x0
c0016f26:	e9 8a 00 00 00       	jmp    c0016fb5 <ACPI::close(int, int, void*)+0xa1>
c0016f2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f30:	75 27                	jne    c0016f59 <ACPI::close(int, int, void*)+0x45>
c0016f32:	a1 48 fc 02 c0       	mov    eax,ds:0xc002fc48
c0016f37:	85 c0                	test   eax,eax
c0016f39:	74 07                	je     c0016f42 <ACPI::close(int, int, void*)+0x2e>
c0016f3b:	a1 48 fc 02 c0       	mov    eax,ds:0xc002fc48
c0016f40:	ff d0                	call   eax
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	68 3c ad 02 c0       	push   0xc002ad3c
c0016f4a:	e8 10 2d 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0016f4f:	83 c4 10             	add    esp,0x10
c0016f52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f57:	eb 5c                	jmp    c0016fb5 <ACPI::close(int, int, void*)+0xa1>
c0016f59:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f5e:	75 50                	jne    c0016fb0 <ACPI::close(int, int, void*)+0x9c>
c0016f60:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c0016f65:	85 c0                	test   eax,eax
c0016f67:	74 07                	je     c0016f70 <ACPI::close(int, int, void*)+0x5c>
c0016f69:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c0016f6e:	ff d0                	call   eax
c0016f70:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f75:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f7a:	83 e0 02             	and    eax,0x2
c0016f7d:	74 1c                	je     c0016f9b <ACPI::close(int, int, void*)+0x87>
c0016f7f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f8a:	89 c2                	mov    edx,eax
c0016f8c:	ec                   	in     al,dx
c0016f8d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016f91:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016f95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016f99:	eb da                	jmp    c0016f75 <ACPI::close(int, int, void*)+0x61>
c0016f9b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fa2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fa7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016faf:	ee                   	out    dx,al
c0016fb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fb5:	83 c4 1c             	add    esp,0x1c
c0016fb8:	c3                   	ret    

c0016fb9 <findRSDP()>:
c0016fb9:	83 ec 1c             	sub    esp,0x1c
c0016fbc:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016fc1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fc7:	83 e0 04             	and    eax,0x4
c0016fca:	84 c0                	test   al,al
c0016fcc:	75 07                	jne    c0016fd5 <findRSDP()+0x1c>
c0016fce:	b8 00 00 00 00       	mov    eax,0x0
c0016fd3:	eb 6a                	jmp    c001703f <findRSDP()+0x86>
c0016fd5:	a1 f4 d5 02 c0       	mov    eax,ds:0xc002d5f4
c0016fda:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016fdf:	7f 1b                	jg     c0016ffc <findRSDP()+0x43>
c0016fe1:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016fe6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016fec:	83 e2 fb             	and    edx,0xfffffffb
c0016fef:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ff5:	b8 00 00 00 00       	mov    eax,0x0
c0016ffa:	eb 43                	jmp    c001703f <findRSDP()+0x86>
c0016ffc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017004:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001700c:	77 2c                	ja     c001703a <findRSDP()+0x81>
c001700e:	83 ec 04             	sub    esp,0x4
c0017011:	6a 08                	push   0x8
c0017013:	68 d7 ad 02 c0       	push   0xc002add7
c0017018:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001701c:	e8 2b 96 fe ff       	call   c000064c <memcmp>
c0017021:	83 c4 10             	add    esp,0x10
c0017024:	85 c0                	test   eax,eax
c0017026:	0f 94 c0             	sete   al
c0017029:	84 c0                	test   al,al
c001702b:	74 06                	je     c0017033 <findRSDP()+0x7a>
c001702d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017031:	eb 0c                	jmp    c001703f <findRSDP()+0x86>
c0017033:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017038:	eb ca                	jmp    c0017004 <findRSDP()+0x4b>
c001703a:	b8 00 00 00 00       	mov    eax,0x0
c001703f:	83 c4 1c             	add    esp,0x1c
c0017042:	c3                   	ret    

c0017043 <loadACPITables(unsigned char*)>:
c0017043:	57                   	push   edi
c0017044:	56                   	push   esi
c0017045:	53                   	push   ebx
c0017046:	83 ec 60             	sub    esp,0x60
c0017049:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001704e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017054:	83 e0 04             	and    eax,0x4
c0017057:	84 c0                	test   al,al
c0017059:	0f 84 33 02 00 00    	je     c0017292 <loadACPITables(unsigned char*)+0x24f>
c001705f:	a0 60 fe 02 c0       	mov    al,ds:0xc002fe60
c0017064:	84 c0                	test   al,al
c0017066:	74 75                	je     c00170dd <loadACPITables(unsigned char*)+0x9a>
c0017068:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001706c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017070:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017077:	83 e8 24             	sub    eax,0x24
c001707a:	c1 e8 03             	shr    eax,0x3
c001707d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017081:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017089:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001708d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017091:	0f 8d b2 00 00 00    	jge    c0017149 <loadACPITables(unsigned char*)+0x106>
c0017097:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001709b:	83 c0 24             	add    eax,0x24
c001709e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00170a2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170aa:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00170ae:	c1 e0 03             	shl    eax,0x3
c00170b1:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00170b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00170b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00170be:	89 c1                	mov    ecx,eax
c00170c0:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c00170c5:	8d 50 01             	lea    edx,[eax+0x1]
c00170c8:	89 15 4c fc 02 c0    	mov    DWORD PTR ds:0xc002fc4c,edx
c00170ce:	89 ca                	mov    edx,ecx
c00170d0:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c00170d7:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00170db:	eb ac                	jmp    c0017089 <loadACPITables(unsigned char*)+0x46>
c00170dd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170e1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00170e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170ec:	83 e8 24             	sub    eax,0x24
c00170ef:	c1 e8 02             	shr    eax,0x2
c00170f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00170f6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00170fe:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017102:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017106:	7d 41                	jge    c0017149 <loadACPITables(unsigned char*)+0x106>
c0017108:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001710c:	83 c0 24             	add    eax,0x24
c001710f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017113:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017117:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001711b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001711f:	c1 e0 02             	shl    eax,0x2
c0017122:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017126:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001712a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001712c:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c0017131:	8d 50 01             	lea    edx,[eax+0x1]
c0017134:	89 15 4c fc 02 c0    	mov    DWORD PTR ds:0xc002fc4c,edx
c001713a:	89 ca                	mov    edx,ecx
c001713c:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c0017143:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017147:	eb b5                	jmp    c00170fe <loadACPITables(unsigned char*)+0xbb>
c0017149:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017151:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c0017156:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001715a:	0f 8d 33 01 00 00    	jge    c0017293 <loadACPITables(unsigned char*)+0x250>
c0017160:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017164:	8b 04 c5 64 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd039c]
c001716b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001716f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017173:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001717b:	25 ff 0f 00 00       	and    eax,0xfff
c0017180:	89 c6                	mov    esi,eax
c0017182:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	6a 01                	push   0x1
c001718d:	e8 0f a0 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017199:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001719f:	83 ec 0c             	sub    esp,0xc
c00171a2:	6a 01                	push   0x1
c00171a4:	6a 01                	push   0x1
c00171a6:	50                   	push   eax
c00171a7:	52                   	push   edx
c00171a8:	53                   	push   ebx
c00171a9:	e8 a6 aa ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171ae:	83 c4 20             	add    esp,0x20
c00171b1:	09 f0                	or     eax,esi
c00171b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00171bb:	c1 e0 03             	shl    eax,0x3
c00171be:	05 60 fc 02 c0       	add    eax,0xc002fc60
c00171c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171cf:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00171d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00171eb:	89 c6                	mov    esi,eax
c00171ed:	89 d7                	mov    edi,edx
c00171ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00171f1:	89 c8                	mov    eax,ecx
c00171f3:	89 fa                	mov    edx,edi
c00171f5:	89 f3                	mov    ebx,esi
c00171f7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00171fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00171ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017203:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017207:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001720a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001720e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017212:	05 00 10 00 00       	add    eax,0x1000
c0017217:	c1 e8 0c             	shr    eax,0xc
c001721a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001721e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017222:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001722a:	25 ff 0f 00 00       	and    eax,0xfff
c001722f:	89 c6                	mov    esi,eax
c0017231:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017237:	83 ec 0c             	sub    esp,0xc
c001723a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001723e:	e8 5e 9f ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001724a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	6a 01                	push   0x1
c0017255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017259:	50                   	push   eax
c001725a:	52                   	push   edx
c001725b:	53                   	push   ebx
c001725c:	e8 f3 a9 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017261:	83 c4 20             	add    esp,0x20
c0017264:	09 f0                	or     eax,esi
c0017266:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001726a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	50                   	push   eax
c0017272:	e8 70 a3 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0017277:	83 c4 10             	add    esp,0x10
c001727a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001727e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017282:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c0017289:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001728d:	e9 bf fe ff ff       	jmp    c0017151 <loadACPITables(unsigned char*)+0x10e>
c0017292:	90                   	nop
c0017293:	83 c4 60             	add    esp,0x60
c0017296:	5b                   	pop    ebx
c0017297:	5e                   	pop    esi
c0017298:	5f                   	pop    edi
c0017299:	c3                   	ret    

c001729a <findRSDT(unsigned char*)>:
c001729a:	57                   	push   edi
c001729b:	56                   	push   esi
c001729c:	53                   	push   ebx
c001729d:	83 ec 50             	sub    esp,0x50
c00172a0:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00172a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172ab:	83 e0 04             	and    eax,0x4
c00172ae:	84 c0                	test   al,al
c00172b0:	75 0a                	jne    c00172bc <findRSDT(unsigned char*)+0x22>
c00172b2:	b8 00 00 00 00       	mov    eax,0x0
c00172b7:	e9 21 01 00 00       	jmp    c00173dd <findRSDT(unsigned char*)+0x143>
c00172bc:	89 e0                	mov    eax,esp
c00172be:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172ca:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00172d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00172e6:	89 c6                	mov    esi,eax
c00172e8:	89 d7                	mov    edi,edx
c00172ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172ec:	89 c8                	mov    eax,ecx
c00172ee:	89 fa                	mov    edx,edi
c00172f0:	89 f3                	mov    ebx,esi
c00172f2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00172f6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00172fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00172fe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017302:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017306:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001730e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017316:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001731a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001731e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017322:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017326:	25 ff 0f 00 00       	and    eax,0xfff
c001732b:	89 c6                	mov    esi,eax
c001732d:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017333:	83 ec 0c             	sub    esp,0xc
c0017336:	6a 02                	push   0x2
c0017338:	e8 64 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001733d:	83 c4 10             	add    esp,0x10
c0017340:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017344:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	6a 01                	push   0x1
c001734f:	6a 02                	push   0x2
c0017351:	50                   	push   eax
c0017352:	52                   	push   edx
c0017353:	53                   	push   ebx
c0017354:	e8 fb a8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017359:	83 c4 20             	add    esp,0x20
c001735c:	09 f0                	or     eax,esi
c001735e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017362:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017366:	25 ff 0f 00 00       	and    eax,0xfff
c001736b:	89 c6                	mov    esi,eax
c001736d:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	6a 02                	push   0x2
c0017378:	e8 24 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001737d:	83 c4 10             	add    esp,0x10
c0017380:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017384:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001738a:	83 ec 0c             	sub    esp,0xc
c001738d:	6a 01                	push   0x1
c001738f:	6a 02                	push   0x2
c0017391:	50                   	push   eax
c0017392:	52                   	push   edx
c0017393:	53                   	push   ebx
c0017394:	e8 bb a8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017399:	83 c4 20             	add    esp,0x20
c001739c:	09 f0                	or     eax,esi
c001739e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173a2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00173a7:	75 11                	jne    c00173ba <findRSDT(unsigned char*)+0x120>
c00173a9:	c6 05 60 fe 02 c0 00 	mov    BYTE PTR ds:0xc002fe60,0x0
c00173b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173b4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173b8:	eb 1f                	jmp    c00173d9 <findRSDT(unsigned char*)+0x13f>
c00173ba:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00173bf:	75 11                	jne    c00173d2 <findRSDT(unsigned char*)+0x138>
c00173c1:	c6 05 60 fe 02 c0 01 	mov    BYTE PTR ds:0xc002fe60,0x1
c00173c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173d0:	eb 07                	jmp    c00173d9 <findRSDT(unsigned char*)+0x13f>
c00173d2:	b8 00 00 00 00       	mov    eax,0x0
c00173d7:	eb 04                	jmp    c00173dd <findRSDT(unsigned char*)+0x143>
c00173d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00173dd:	83 c4 50             	add    esp,0x50
c00173e0:	5b                   	pop    ebx
c00173e1:	5e                   	pop    esi
c00173e2:	5f                   	pop    edi
c00173e3:	c3                   	ret    

c00173e4 <findDataTable(unsigned char*, char*)>:
c00173e4:	83 ec 1c             	sub    esp,0x1c
c00173e7:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00173ec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173f2:	83 e0 04             	and    eax,0x4
c00173f5:	84 c0                	test   al,al
c00173f7:	75 07                	jne    c0017400 <findDataTable(unsigned char*, char*)+0x1c>
c00173f9:	b8 00 00 00 00       	mov    eax,0x0
c00173fe:	eb 52                	jmp    c0017452 <findDataTable(unsigned char*, char*)+0x6e>
c0017400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017408:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c001740d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017411:	7d 3a                	jge    c001744d <findDataTable(unsigned char*, char*)+0x69>
c0017413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017417:	c1 e0 03             	shl    eax,0x3
c001741a:	05 60 fc 02 c0       	add    eax,0xc002fc60
c001741f:	83 ec 04             	sub    esp,0x4
c0017422:	6a 04                	push   0x4
c0017424:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017428:	50                   	push   eax
c0017429:	e8 1e 92 fe ff       	call   c000064c <memcmp>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	85 c0                	test   eax,eax
c0017433:	0f 94 c0             	sete   al
c0017436:	84 c0                	test   al,al
c0017438:	74 0d                	je     c0017447 <findDataTable(unsigned char*, char*)+0x63>
c001743a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001743e:	8b 04 c5 64 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd039c]
c0017445:	eb 0b                	jmp    c0017452 <findDataTable(unsigned char*, char*)+0x6e>
c0017447:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001744b:	eb bb                	jmp    c0017408 <findDataTable(unsigned char*, char*)+0x24>
c001744d:	b8 00 00 00 00       	mov    eax,0x0
c0017452:	83 c4 1c             	add    esp,0x1c
c0017455:	c3                   	ret    

c0017456 <scanMADT()>:
c0017456:	53                   	push   ebx
c0017457:	83 ec 38             	sub    esp,0x38
c001745a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001745f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017465:	83 e0 04             	and    eax,0x4
c0017468:	84 c0                	test   al,al
c001746a:	0f 84 4a 04 00 00    	je     c00178ba <scanMADT()+0x464>
c0017470:	e8 44 fb ff ff       	call   c0016fb9 <findRSDP()>
c0017475:	a3 6c fe 02 c0       	mov    ds:0xc002fe6c,eax
c001747a:	a1 6c fe 02 c0       	mov    eax,ds:0xc002fe6c
c001747f:	85 c0                	test   eax,eax
c0017481:	75 19                	jne    c001749c <scanMADT()+0x46>
c0017483:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017488:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001748e:	83 e2 fb             	and    edx,0xfffffffb
c0017491:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017497:	e9 22 04 00 00       	jmp    c00178be <scanMADT()+0x468>
c001749c:	a1 6c fe 02 c0       	mov    eax,ds:0xc002fe6c
c00174a1:	83 ec 0c             	sub    esp,0xc
c00174a4:	50                   	push   eax
c00174a5:	e8 f0 fd ff ff       	call   c001729a <findRSDT(unsigned char*)>
c00174aa:	83 c4 10             	add    esp,0x10
c00174ad:	a3 68 fe 02 c0       	mov    ds:0xc002fe68,eax
c00174b2:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174b7:	85 c0                	test   eax,eax
c00174b9:	75 19                	jne    c00174d4 <scanMADT()+0x7e>
c00174bb:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00174c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174c6:	83 e2 fb             	and    edx,0xfffffffb
c00174c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174cf:	e9 ea 03 00 00       	jmp    c00178be <scanMADT()+0x468>
c00174d4:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174d9:	83 ec 0c             	sub    esp,0xc
c00174dc:	50                   	push   eax
c00174dd:	e8 61 fb ff ff       	call   c0017043 <loadACPITables(unsigned char*)>
c00174e2:	83 c4 10             	add    esp,0x10
c00174e5:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174ea:	83 ec 08             	sub    esp,0x8
c00174ed:	68 e0 ad 02 c0       	push   0xc002ade0
c00174f2:	50                   	push   eax
c00174f3:	e8 ec fe ff ff       	call   c00173e4 <findDataTable(unsigned char*, char*)>
c00174f8:	83 c4 10             	add    esp,0x10
c00174fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017504:	75 19                	jne    c001751f <scanMADT()+0xc9>
c0017506:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001750b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017511:	83 e2 fe             	and    edx,0xfffffffe
c0017514:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001751a:	e9 9f 03 00 00       	jmp    c00178be <scanMADT()+0x468>
c001751f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017527:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001752b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001752e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017532:	0f 87 86 03 00 00    	ja     c00178be <scanMADT()+0x468>
c0017538:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017540:	0f 87 78 03 00 00    	ja     c00178be <scanMADT()+0x468>
c0017546:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001754e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017552:	8d 50 01             	lea    edx,[eax+0x1]
c0017555:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017559:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001755d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017561:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017565:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017569:	8d 50 01             	lea    edx,[eax+0x1]
c001756c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017570:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017574:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017578:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001757c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017581:	0f 86 36 03 00 00    	jbe    c00178bd <scanMADT()+0x467>
c0017587:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001758c:	75 57                	jne    c00175e5 <scanMADT()+0x18f>
c001758e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017592:	8d 50 01             	lea    edx,[eax+0x1]
c0017595:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017599:	8a 15 60 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030060
c001759f:	0f b6 d2             	movzx  edx,dl
c00175a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175a6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175aa:	88 82 a0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff60],al
c00175b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175b4:	8d 50 01             	lea    edx,[eax+0x1]
c00175b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175bb:	8a 15 60 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030060
c00175c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175c4:	88 0d 60 00 03 c0    	mov    BYTE PTR ds:0xc0030060,cl
c00175ca:	0f b6 d2             	movzx  edx,dl
c00175cd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175d1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175d5:	88 82 80 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff80],al
c00175db:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175e0:	e9 c1 02 00 00       	jmp    c00178a6 <scanMADT()+0x450>
c00175e5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175ea:	0f 85 14 01 00 00    	jne    c0017704 <scanMADT()+0x2ae>
c00175f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f4:	8d 50 01             	lea    edx,[eax+0x1]
c00175f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175fb:	8a 15 20 ff 02 c0    	mov    dl,BYTE PTR ds:0xc002ff20
c0017601:	0f b6 d2             	movzx  edx,dl
c0017604:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017608:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001760c:	88 82 40 ff 02 c0    	mov    BYTE PTR [edx-0x3ffd00c0],al
c0017612:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001761a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001761e:	01 d0                	add    eax,edx
c0017620:	83 c0 2c             	add    eax,0x2c
c0017623:	8a 00                	mov    al,BYTE PTR [eax]
c0017625:	0f b6 d0             	movzx  edx,al
c0017628:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762c:	8d 48 01             	lea    ecx,[eax+0x1]
c001762f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017633:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017637:	0f b6 c0             	movzx  eax,al
c001763a:	c1 e0 08             	shl    eax,0x8
c001763d:	89 d1                	mov    ecx,edx
c001763f:	09 c1                	or     ecx,eax
c0017641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017645:	8d 50 02             	lea    edx,[eax+0x2]
c0017648:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001764c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017650:	0f b6 c0             	movzx  eax,al
c0017653:	c1 e0 10             	shl    eax,0x10
c0017656:	09 c1                	or     ecx,eax
c0017658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001765c:	8d 50 03             	lea    edx,[eax+0x3]
c001765f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017663:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017667:	0f b6 c0             	movzx  eax,al
c001766a:	c1 e0 18             	shl    eax,0x18
c001766d:	09 c1                	or     ecx,eax
c001766f:	89 ca                	mov    edx,ecx
c0017671:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c0017676:	0f b6 c0             	movzx  eax,al
c0017679:	89 14 85 60 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd00a0],edx
c0017680:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017685:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017689:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001768d:	01 d0                	add    eax,edx
c001768f:	83 c0 2c             	add    eax,0x2c
c0017692:	8a 00                	mov    al,BYTE PTR [eax]
c0017694:	0f b6 d0             	movzx  edx,al
c0017697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769b:	8d 48 01             	lea    ecx,[eax+0x1]
c001769e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176a2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176a6:	0f b6 c0             	movzx  eax,al
c00176a9:	c1 e0 08             	shl    eax,0x8
c00176ac:	89 d1                	mov    ecx,edx
c00176ae:	09 c1                	or     ecx,eax
c00176b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176b4:	8d 50 02             	lea    edx,[eax+0x2]
c00176b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176bf:	0f b6 c0             	movzx  eax,al
c00176c2:	c1 e0 10             	shl    eax,0x10
c00176c5:	09 c1                	or     ecx,eax
c00176c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176cb:	8d 50 03             	lea    edx,[eax+0x3]
c00176ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176d6:	0f b6 c0             	movzx  eax,al
c00176d9:	c1 e0 18             	shl    eax,0x18
c00176dc:	09 c1                	or     ecx,eax
c00176de:	89 ca                	mov    edx,ecx
c00176e0:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00176e5:	0f b6 c0             	movzx  eax,al
c00176e8:	89 14 85 e0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0020],edx
c00176ef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176f4:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00176f9:	40                   	inc    eax
c00176fa:	a2 20 ff 02 c0       	mov    ds:0xc002ff20,al
c00176ff:	e9 a2 01 00 00       	jmp    c00178a6 <scanMADT()+0x450>
c0017704:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017709:	0f 85 e9 00 00 00    	jne    c00177f8 <scanMADT()+0x3a2>
c001770f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017713:	8d 50 01             	lea    edx,[eax+0x1]
c0017716:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001771a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001771e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017722:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772a:	8d 50 01             	lea    edx,[eax+0x1]
c001772d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017731:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017735:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017739:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001773d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017741:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017745:	01 d0                	add    eax,edx
c0017747:	83 c0 2c             	add    eax,0x2c
c001774a:	8a 00                	mov    al,BYTE PTR [eax]
c001774c:	0f b6 d0             	movzx  edx,al
c001774f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017753:	8d 48 01             	lea    ecx,[eax+0x1]
c0017756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001775a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001775e:	0f b6 c0             	movzx  eax,al
c0017761:	c1 e0 08             	shl    eax,0x8
c0017764:	89 d1                	mov    ecx,edx
c0017766:	09 c1                	or     ecx,eax
c0017768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001776c:	8d 50 02             	lea    edx,[eax+0x2]
c001776f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017773:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017777:	0f b6 c0             	movzx  eax,al
c001777a:	c1 e0 10             	shl    eax,0x10
c001777d:	09 c1                	or     ecx,eax
c001777f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017783:	8d 50 03             	lea    edx,[eax+0x3]
c0017786:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001778a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001778e:	0f b6 c0             	movzx  eax,al
c0017791:	c1 e0 18             	shl    eax,0x18
c0017794:	09 c8                	or     eax,ecx
c0017796:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001779a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001779f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a7:	01 d0                	add    eax,edx
c00177a9:	83 c0 2c             	add    eax,0x2c
c00177ac:	8a 00                	mov    al,BYTE PTR [eax]
c00177ae:	0f b6 c0             	movzx  eax,al
c00177b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177bc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177c0:	0f b6 d2             	movzx  edx,dl
c00177c3:	c1 e2 08             	shl    edx,0x8
c00177c6:	09 d0                	or     eax,edx
c00177c8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177cd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177d2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177db:	88 90 00 c8 02 c0    	mov    BYTE PTR [eax-0x3ffd3800],dl
c00177e1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177e6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177eb:	66 89 84 12 00 ff 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0100],ax
c00177f3:	e9 ae 00 00 00       	jmp    c00178a6 <scanMADT()+0x450>
c00177f8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00177fd:	0f 85 97 00 00 00    	jne    c001789a <scanMADT()+0x444>
c0017803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017807:	8d 50 01             	lea    edx,[eax+0x1]
c001780a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001780e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017812:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017816:	0f b6 c0             	movzx  eax,al
c0017819:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001781d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017825:	01 d0                	add    eax,edx
c0017827:	83 c0 2c             	add    eax,0x2c
c001782a:	8a 00                	mov    al,BYTE PTR [eax]
c001782c:	0f b6 d0             	movzx  edx,al
c001782f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017833:	8d 48 01             	lea    ecx,[eax+0x1]
c0017836:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001783a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001783e:	0f b6 c0             	movzx  eax,al
c0017841:	c1 e0 08             	shl    eax,0x8
c0017844:	09 d0                	or     eax,edx
c0017846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001784a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001784f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017853:	8d 50 01             	lea    edx,[eax+0x1]
c0017856:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001785a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001785e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017862:	0f b6 c0             	movzx  eax,al
c0017865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786d:	c1 e0 08             	shl    eax,0x8
c0017870:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017874:	89 c1                	mov    ecx,eax
c0017876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001787a:	c1 e0 18             	shl    eax,0x18
c001787d:	89 c3                	mov    ebx,eax
c001787f:	a1 70 fe 02 c0       	mov    eax,ds:0xc002fe70
c0017884:	8d 50 01             	lea    edx,[eax+0x1]
c0017887:	89 15 70 fe 02 c0    	mov    DWORD PTR ds:0xc002fe70,edx
c001788d:	09 d9                	or     ecx,ebx
c001788f:	89 ca                	mov    edx,ecx
c0017891:	89 14 85 80 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0180],edx
c0017898:	eb 0c                	jmp    c00178a6 <scanMADT()+0x450>
c001789a:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001789f:	75 05                	jne    c00178a6 <scanMADT()+0x450>
c00178a1:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00178a6:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178af:	01 d0                	add    eax,edx
c00178b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178b5:	e9 6d fc ff ff       	jmp    c0017527 <scanMADT()+0xd1>
c00178ba:	90                   	nop
c00178bb:	eb 01                	jmp    c00178be <scanMADT()+0x468>
c00178bd:	90                   	nop
c00178be:	83 c4 38             	add    esp,0x38
c00178c1:	5b                   	pop    ebx
c00178c2:	c3                   	ret    
c00178c3:	90                   	nop

c00178c4 <ACPI::ACPI()>:
c00178c4:	83 ec 0c             	sub    esp,0xc
c00178c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cb:	83 ec 08             	sub    esp,0x8
c00178ce:	68 e5 ad 02 c0       	push   0xc002ade5
c00178d3:	50                   	push   eax
c00178d4:	e8 89 c2 ff ff       	call   c0013b62 <Device::Device(char const*)>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	ba 40 af 02 c0       	mov    edx,0xc002af40
c00178e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e5:	89 10                	mov    DWORD PTR [eax],edx
c00178e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178eb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017904:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001790e:	e8 43 fb ff ff       	call   c0017456 <scanMADT()>
c0017913:	90                   	nop
c0017914:	83 c4 0c             	add    esp,0xc
c0017917:	c3                   	ret    

c0017918 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017918:	83 ec 2c             	sub    esp,0x2c
c001791b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001791f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017923:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017927:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001792b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017930:	88 d0                	mov    al,dl
c0017932:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017936:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001793b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017947:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001794d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017951:	0f 8d 97 00 00 00    	jge    c00179ee <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001795b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001795f:	83 c2 2a             	add    edx,0x2a
c0017962:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017966:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001796b:	75 78                	jne    c00179e5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001796d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017971:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017975:	83 c2 2a             	add    edx,0x2a
c0017978:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001797c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017980:	75 63                	jne    c00179e5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017982:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017987:	74 3a                	je     c00179c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017989:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001798d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017991:	83 c2 2a             	add    edx,0x2a
c0017994:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017998:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001799c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001799f:	39 c2                	cmp    edx,eax
c00179a1:	74 10                	je     c00179b3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179a3:	83 ec 0c             	sub    esp,0xc
c00179a6:	68 60 ad 02 c0       	push   0xc002ad60
c00179ab:	e8 af 22 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	83 ec 0c             	sub    esp,0xc
c00179b6:	68 ea ad 02 c0       	push   0xc002adea
c00179bb:	e8 9f 22 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179cf:	83 c2 2a             	add    edx,0x2a
c00179d2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00179d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179db:	89 01                	mov    DWORD PTR [ecx],eax
c00179dd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179e0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179e5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179e9:	e9 55 ff ff ff       	jmp    c0017943 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179ee:	90                   	nop
c00179ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179f3:	83 c4 2c             	add    esp,0x2c
c00179f6:	c2 04 00             	ret    0x4
c00179f9:	90                   	nop

c00179fa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00179fa:	83 ec 1c             	sub    esp,0x1c
c00179fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a01:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a09:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a0e:	88 c8                	mov    al,cl
c0017a10:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a14:	88 d0                	mov    al,dl
c0017a16:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a28:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a2b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a2f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a37:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a41:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a48:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a57:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017a5b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a62:	83 c2 2a             	add    edx,0x2a
c0017a65:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a77:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a7a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017a7e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a86:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a93:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017aa3:	3d 00 02 00 00       	cmp    eax,0x200
c0017aa8:	75 10                	jne    c0017aba <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017aaa:	83 ec 0c             	sub    esp,0xc
c0017aad:	68 f9 ad 02 c0       	push   0xc002adf9
c0017ab2:	e8 a8 21 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0017ab7:	83 c4 10             	add    esp,0x10
c0017aba:	90                   	nop
c0017abb:	83 c4 1c             	add    esp,0x1c
c0017abe:	c3                   	ret    
c0017abf:	90                   	nop

c0017ac0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017ac0:	b8 00 00 00 00       	mov    eax,0x0
c0017ac5:	c3                   	ret    

c0017ac6 <ACPI::detectPCI()>:
c0017ac6:	53                   	push   ebx
c0017ac7:	83 ec 28             	sub    esp,0x28
c0017aca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017acf:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017ad4:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017ad9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017adf:	83 e0 04             	and    eax,0x4
c0017ae2:	84 c0                	test   al,al
c0017ae4:	74 2b                	je     c0017b11 <ACPI::detectPCI()+0x4b>
c0017ae6:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c0017aeb:	83 ec 08             	sub    esp,0x8
c0017aee:	68 16 ae 02 c0       	push   0xc002ae16
c0017af3:	50                   	push   eax
c0017af4:	e8 eb f8 ff ff       	call   c00173e4 <findDataTable(unsigned char*, char*)>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b00:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b05:	74 0a                	je     c0017b11 <ACPI::detectPCI()+0x4b>
c0017b07:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b0c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b11:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017b19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b1d:	8a 00                	mov    al,BYTE PTR [eax]
c0017b1f:	3c 01                	cmp    al,0x1
c0017b21:	75 0c                	jne    c0017b2f <ACPI::detectPCI()+0x69>
c0017b23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b28:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b2d:	eb 26                	jmp    c0017b55 <ACPI::detectPCI()+0x8f>
c0017b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b33:	8a 00                	mov    al,BYTE PTR [eax]
c0017b35:	3c 02                	cmp    al,0x2
c0017b37:	75 1c                	jne    c0017b55 <ACPI::detectPCI()+0x8f>
c0017b39:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b3e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b43:	74 10                	je     c0017b55 <ACPI::detectPCI()+0x8f>
c0017b45:	83 ec 0c             	sub    esp,0xc
c0017b48:	68 90 ad 02 c0       	push   0xc002ad90
c0017b4d:	e8 0d 21 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017b59:	83 f0 01             	xor    eax,0x1
c0017b5c:	84 c0                	test   al,al
c0017b5e:	74 3f                	je     c0017b9f <ACPI::detectPCI()+0xd9>
c0017b60:	e8 eb 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017b65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b69:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017b6e:	75 0c                	jne    c0017b7c <ACPI::detectPCI()+0xb6>
c0017b70:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b75:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b7a:	eb 23                	jmp    c0017b9f <ACPI::detectPCI()+0xd9>
c0017b7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017b81:	75 1c                	jne    c0017b9f <ACPI::detectPCI()+0xd9>
c0017b83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b88:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b8d:	74 10                	je     c0017b9f <ACPI::detectPCI()+0xd9>
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	68 90 ad 02 c0       	push   0xc002ad90
c0017b97:	e8 c3 20 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0017b9c:	83 c4 10             	add    esp,0x10
c0017b9f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ba4:	74 7e                	je     c0017c24 <ACPI::detectPCI()+0x15e>
c0017ba6:	83 ec 0c             	sub    esp,0xc
c0017ba9:	68 1b ae 02 c0       	push   0xc002ae1b
c0017bae:	e8 43 7a ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017bbe:	83 ec 0c             	sub    esp,0xc
c0017bc1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bc5:	e8 d2 79 ff ff       	call   c000f59c <malloc>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	89 c3                	mov    ebx,eax
c0017bcf:	83 ec 0c             	sub    esp,0xc
c0017bd2:	53                   	push   ebx
c0017bd3:	e8 aa a5 00 00       	call   c0022182 <PCI::PCI()>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be3:	83 ec 08             	sub    esp,0x8
c0017be6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bea:	50                   	push   eax
c0017beb:	e8 6e bd ff ff       	call   c001395e <Device::addChild(Device*)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bf9:	83 c0 08             	add    eax,0x8
c0017bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bfe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c03:	74 07                	je     c0017c0c <ACPI::detectPCI()+0x146>
c0017c05:	ba 01 00 00 00       	mov    edx,0x1
c0017c0a:	eb 05                	jmp    c0017c11 <ACPI::detectPCI()+0x14b>
c0017c0c:	ba 02 00 00 00       	mov    edx,0x2
c0017c11:	6a 00                	push   0x0
c0017c13:	6a 00                	push   0x0
c0017c15:	52                   	push   edx
c0017c16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c1a:	ff d0                	call   eax
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	e9 9e 00 00 00       	jmp    c0017cc2 <ACPI::detectPCI()+0x1fc>
c0017c24:	83 ec 0c             	sub    esp,0xc
c0017c27:	68 33 ae 02 c0       	push   0xc002ae33
c0017c2c:	e8 f4 a8 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	83 ec 0c             	sub    esp,0xc
c0017c37:	68 3e ae 02 c0       	push   0xc002ae3e
c0017c3c:	e8 b5 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017c41:	83 c4 10             	add    esp,0x10
c0017c44:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017c4b:	83 ec 0c             	sub    esp,0xc
c0017c4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c52:	e8 45 79 ff ff       	call   c000f59c <malloc>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	89 c3                	mov    ebx,eax
c0017c5c:	83 ec 0c             	sub    esp,0xc
c0017c5f:	53                   	push   ebx
c0017c60:	e8 87 b0 00 00       	call   c0022cec <IDE::IDE()>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c70:	83 ec 08             	sub    esp,0x8
c0017c73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c77:	50                   	push   eax
c0017c78:	e8 e1 bc ff ff       	call   c001395e <Device::addChild(Device*)>
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c84:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c92:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017c9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c9f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cae:	83 c0 08             	add    eax,0x8
c0017cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cb3:	6a 00                	push   0x0
c0017cb5:	6a 00                	push   0x0
c0017cb7:	6a 00                	push   0x0
c0017cb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cbd:	ff d0                	call   eax
c0017cbf:	83 c4 10             	add    esp,0x10
c0017cc2:	90                   	nop
c0017cc3:	83 c4 28             	add    esp,0x28
c0017cc6:	5b                   	pop    ebx
c0017cc7:	c3                   	ret    

c0017cc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017cc8:	83 ec 1c             	sub    esp,0x1c
c0017ccb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ccf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017cd2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017cd6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017cdb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ce0:	83 ec 08             	sub    esp,0x8
c0017ce3:	52                   	push   edx
c0017ce4:	50                   	push   eax
c0017ce5:	e8 c6 6e ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017cea:	83 c4 10             	add    esp,0x10
c0017ced:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017cf1:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017cf6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017cfb:	83 ec 04             	sub    esp,0x4
c0017cfe:	6a 01                	push   0x1
c0017d00:	52                   	push   edx
c0017d01:	50                   	push   eax
c0017d02:	e8 db 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d07:	83 c4 10             	add    esp,0x10
c0017d0a:	90                   	nop
c0017d0b:	83 c4 1c             	add    esp,0x1c
c0017d0e:	c3                   	ret    
c0017d0f:	90                   	nop

c0017d10 <ACPI::sleep()>:
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c0017d18:	85 c0                	test   eax,eax
c0017d1a:	74 07                	je     c0017d23 <ACPI::sleep()+0x13>
c0017d1c:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c0017d21:	ff d0                	call   eax
c0017d23:	90                   	nop
c0017d24:	83 c4 0c             	add    esp,0xc
c0017d27:	c3                   	ret    

c0017d28 <ACPI::open(int, int, void*)>:
c0017d28:	57                   	push   edi
c0017d29:	56                   	push   esi
c0017d2a:	53                   	push   ebx
c0017d2b:	81 ec 60 01 00 00    	sub    esp,0x160
c0017d31:	83 ec 0c             	sub    esp,0xc
c0017d34:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017d3b:	e8 86 fd ff ff       	call   c0017ac6 <ACPI::detectPCI()>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	83 ec 0c             	sub    esp,0xc
c0017d46:	68 b8 ad 02 c0       	push   0xc002adb8
c0017d4b:	e8 a6 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d50:	83 c4 10             	add    esp,0x10
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	68 53 ae 02 c0       	push   0xc002ae53
c0017d5b:	e8 52 46 00 00       	call   c001c3b2 <Thr::loadKernelSymbolTable(char const*)>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	83 ec 0c             	sub    esp,0xc
c0017d66:	68 71 ae 02 c0       	push   0xc002ae71
c0017d6b:	e8 86 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d70:	83 c4 10             	add    esp,0x10
c0017d73:	83 ec 04             	sub    esp,0x4
c0017d76:	6a 0c                	push   0xc
c0017d78:	68 8c ae 02 c0       	push   0xc002ae8c
c0017d7d:	68 9d ae 02 c0       	push   0xc002ae9d
c0017d82:	e8 94 2c 00 00       	call   c001aa1b <Reg::readIntWithDefault(char*, char*, int)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017d91:	83 ec 0c             	sub    esp,0xc
c0017d94:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017d9b:	e8 0b 96 ff ff       	call   c00113ab <Virt::setupPageSwapping(int)>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	68 35 9c 02 c0       	push   0xc0029c35
c0017dab:	e8 46 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017db9:	83 ec 08             	sub    esp,0x8
c0017dbc:	6a 01                	push   0x1
c0017dbe:	68 a4 ae 02 c0       	push   0xc002aea4
c0017dc3:	e8 61 50 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	83 ec 08             	sub    esp,0x8
c0017dce:	53                   	push   ebx
c0017dcf:	50                   	push   eax
c0017dd0:	e8 7f 52 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0017dd5:	83 c4 10             	add    esp,0x10
c0017dd8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017ddf:	83 ec 08             	sub    esp,0x8
c0017de2:	6a 12                	push   0x12
c0017de4:	50                   	push   eax
c0017de5:	e8 f8 be ff ff       	call   c0013ce2 <getDevicesOfType(DeviceType)>
c0017dea:	83 c4 0c             	add    esp,0xc
c0017ded:	83 ec 0c             	sub    esp,0xc
c0017df0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017df7:	50                   	push   eax
c0017df8:	e8 87 09 01 00       	call   c0028784 <LinkedList<Device>::isEmpty()>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	83 f0 01             	xor    eax,0x1
c0017e03:	84 c0                	test   al,al
c0017e05:	0f 84 43 01 00 00    	je     c0017f4e <ACPI::open(int, int, void*)+0x226>
c0017e0b:	83 ec 0c             	sub    esp,0xc
c0017e0e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e15:	50                   	push   eax
c0017e16:	e8 85 09 01 00       	call   c00287a0 <LinkedList<Device>::getFirstElement()>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e2f:	50                   	push   eax
c0017e30:	e8 73 09 01 00       	call   c00287a8 <LinkedList<Device>::removeFirst()>
c0017e35:	83 c4 10             	add    esp,0x10
c0017e38:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017e3f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017e46:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017e4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017e51:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017e57:	ba 09 00 00 00       	mov    edx,0x9
c0017e5c:	fc                   	cld    
c0017e5d:	89 c7                	mov    edi,eax
c0017e5f:	89 de                	mov    esi,ebx
c0017e61:	89 d1                	mov    ecx,edx
c0017e63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e65:	83 ec 08             	sub    esp,0x8
c0017e68:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017e6c:	50                   	push   eax
c0017e6d:	83 ec 24             	sub    esp,0x24
c0017e70:	89 e0                	mov    eax,esp
c0017e72:	89 c3                	mov    ebx,eax
c0017e74:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017e78:	ba 09 00 00 00       	mov    edx,0x9
c0017e7d:	89 df                	mov    edi,ebx
c0017e7f:	89 c6                	mov    esi,eax
c0017e81:	89 d1                	mov    ecx,edx
c0017e83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e85:	e8 d6 a7 00 00       	call   c0022660 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017e8a:	83 c4 30             	add    esp,0x30
c0017e8d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017e94:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017e9c:	0f 84 4b ff ff ff    	je     c0017ded <ACPI::open(int, int, void*)+0xc5>
c0017ea2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017ead:	83 ec 0c             	sub    esp,0xc
c0017eb0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017eb7:	e8 e0 76 ff ff       	call   c000f59c <malloc>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	89 c3                	mov    ebx,eax
c0017ec1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0017ec6:	83 ec 04             	sub    esp,0x4
c0017ec9:	50                   	push   eax
c0017eca:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017ed1:	53                   	push   ebx
c0017ed2:	e8 ad ab ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017eeb:	e8 66 ae ff ff       	call   c0012d56 <File::exists()>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	84 c0                	test   al,al
c0017ef5:	74 27                	je     c0017f1e <ACPI::open(int, int, void*)+0x1f6>
c0017ef7:	83 ec 08             	sub    esp,0x8
c0017efa:	6a 01                	push   0x1
c0017efc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f03:	e8 21 4f 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	83 ec 08             	sub    esp,0x8
c0017f0e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f15:	50                   	push   eax
c0017f16:	e8 39 51 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017f26:	0f 84 c1 fe ff ff    	je     c0017ded <ACPI::open(int, int, void*)+0xc5>
c0017f2c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0017f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f35:	83 c0 08             	add    eax,0x8
c0017f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f3a:	83 ec 0c             	sub    esp,0xc
c0017f3d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f44:	ff d0                	call   eax
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	e9 9f fe ff ff       	jmp    c0017ded <ACPI::open(int, int, void*)+0xc5>
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f58:	50                   	push   eax
c0017f59:	e8 24 08 01 00       	call   c0028782 <LinkedList<Device>::~LinkedList()>
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017f67:	83 ec 08             	sub    esp,0x8
c0017f6a:	6a 01                	push   0x1
c0017f6c:	68 bf ae 02 c0       	push   0xc002aebf
c0017f71:	e8 b3 4e 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	83 ec 08             	sub    esp,0x8
c0017f7c:	53                   	push   ebx
c0017f7d:	50                   	push   eax
c0017f7e:	e8 d1 50 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017f8c:	83 ec 08             	sub    esp,0x8
c0017f8f:	6a 01                	push   0x1
c0017f91:	68 dc ae 02 c0       	push   0xc002aedc
c0017f96:	e8 8e 4e 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	83 ec 08             	sub    esp,0x8
c0017fa1:	53                   	push   ebx
c0017fa2:	50                   	push   eax
c0017fa3:	e8 ac 50 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017fb0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fb6:	83 e0 04             	and    eax,0x4
c0017fb9:	84 c0                	test   al,al
c0017fbb:	0f 84 0d 01 00 00    	je     c00180ce <ACPI::open(int, int, void*)+0x3a6>
c0017fc1:	83 ec 0c             	sub    esp,0xc
c0017fc4:	68 f9 ae 02 c0       	push   0xc002aef9
c0017fc9:	e8 28 76 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017fce:	83 c4 10             	add    esp,0x10
c0017fd1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0017fe6:	e8 b1 75 ff ff       	call   c000f59c <malloc>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	89 c3                	mov    ebx,eax
c0017ff0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0017ff5:	83 ec 04             	sub    esp,0x4
c0017ff8:	50                   	push   eax
c0017ff9:	68 16 af 02 c0       	push   0xc002af16
c0017ffe:	53                   	push   ebx
c0017fff:	e8 80 aa ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001800e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018016:	74 1a                	je     c0018032 <ACPI::open(int, int, void*)+0x30a>
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018022:	e8 2f ad ff ff       	call   c0012d56 <File::exists()>
c0018027:	83 c4 10             	add    esp,0x10
c001802a:	84 c0                	test   al,al
c001802c:	74 04                	je     c0018032 <ACPI::open(int, int, void*)+0x30a>
c001802e:	b0 01                	mov    al,0x1
c0018030:	eb 02                	jmp    c0018034 <ACPI::open(int, int, void*)+0x30c>
c0018032:	b0 00                	mov    al,0x0
c0018034:	84 c0                	test   al,al
c0018036:	74 25                	je     c001805d <ACPI::open(int, int, void*)+0x335>
c0018038:	83 ec 08             	sub    esp,0x8
c001803b:	6a 01                	push   0x1
c001803d:	68 16 af 02 c0       	push   0xc002af16
c0018042:	e8 e2 4d 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c0018047:	83 c4 10             	add    esp,0x10
c001804a:	83 ec 08             	sub    esp,0x8
c001804d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018054:	50                   	push   eax
c0018055:	e8 fa 4f 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018065:	74 27                	je     c001808e <ACPI::open(int, int, void*)+0x366>
c0018067:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001806f:	74 1d                	je     c001808e <ACPI::open(int, int, void*)+0x366>
c0018071:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018078:	8b 00                	mov    eax,DWORD PTR [eax]
c001807a:	83 c0 08             	add    eax,0x8
c001807d:	8b 00                	mov    eax,DWORD PTR [eax]
c001807f:	83 ec 0c             	sub    esp,0xc
c0018082:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018089:	ff d0                	call   eax
c001808b:	83 c4 10             	add    esp,0x10
c001808e:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c0018093:	83 ec 08             	sub    esp,0x8
c0018096:	68 33 af 02 c0       	push   0xc002af33
c001809b:	50                   	push   eax
c001809c:	e8 43 f3 ff ff       	call   c00173e4 <findDataTable(unsigned char*, char*)>
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00180ab:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00180b3:	74 19                	je     c00180ce <ACPI::open(int, int, void*)+0x3a6>
c00180b5:	83 ec 08             	sub    esp,0x8
c00180b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180bf:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180c6:	e8 fd fb ff ff       	call   c0017cc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	b8 00 00 00 00       	mov    eax,0x0
c00180d3:	81 c4 60 01 00 00    	add    esp,0x160
c00180d9:	5b                   	pop    ebx
c00180da:	5e                   	pop    esi
c00180db:	5f                   	pop    edi
c00180dc:	c3                   	ret    
c00180dd:	90                   	nop

c00180de <CPU::close(int, int, void*)>:
c00180de:	31 c0                	xor    eax,eax
c00180e0:	c3                   	ret    
c00180e1:	90                   	nop

c00180e2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00180e2:	55                   	push   ebp
c00180e3:	57                   	push   edi
c00180e4:	56                   	push   esi
c00180e5:	53                   	push   ebx
c00180e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180ee:	89 ce                	mov    esi,ecx
c00180f0:	89 d5                	mov    ebp,edx
c00180f2:	80 f9 04             	cmp    cl,0x4
c00180f5:	75 28                	jne    c001811f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00180f7:	8d 42 f9             	lea    eax,[edx-0x7]
c00180fa:	3c 03                	cmp    al,0x3
c00180fc:	0f 86 63 01 00 00    	jbe    c0018265 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018102:	80 fa 03             	cmp    dl,0x3
c0018105:	0f 84 5a 01 00 00    	je     c0018265 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001810b:	8d 7a f2             	lea    edi,[edx-0xe]
c001810e:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c0018113:	89 fb                	mov    ebx,edi
c0018115:	80 fb 01             	cmp    bl,0x1
c0018118:	77 4e                	ja     c0018168 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001811a:	e9 52 01 00 00       	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001811f:	80 f9 05             	cmp    cl,0x5
c0018122:	75 4d                	jne    c0018171 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018124:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0018129:	80 fa 03             	cmp    dl,0x3
c001812c:	0f 86 3f 01 00 00    	jbe    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018132:	8d 7a fa             	lea    edi,[edx-0x6]
c0018135:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c001813a:	89 fb                	mov    ebx,edi
c001813c:	80 fb 01             	cmp    bl,0x1
c001813f:	0f 86 2c 01 00 00    	jbe    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018145:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c001814a:	80 fa 08             	cmp    dl,0x8
c001814d:	0f 84 1e 01 00 00    	je     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018153:	89 d7                	mov    edi,edx
c0018155:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c001815a:	83 e7 fb             	and    edi,0xfffffffb
c001815d:	89 fb                	mov    ebx,edi
c001815f:	80 fb 09             	cmp    bl,0x9
c0018162:	0f 84 09 01 00 00    	je     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018168:	31 c0                	xor    eax,eax
c001816a:	89 eb                	mov    ebx,ebp
c001816c:	0f b6 fb             	movzx  edi,bl
c001816f:	eb 30                	jmp    c00181a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018171:	31 c0                	xor    eax,eax
c0018173:	80 f9 06             	cmp    cl,0x6
c0018176:	75 f2                	jne    c001816a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018178:	80 fa 0a             	cmp    dl,0xa
c001817b:	77 ed                	ja     c001816a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001817d:	bf de 05 00 00       	mov    edi,0x5de
c0018182:	0f a3 d7             	bt     edi,edx
c0018185:	73 e3                	jae    c001816a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018187:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c001818c:	e9 e0 00 00 00       	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018191:	39 c7                	cmp    edi,eax
c0018193:	0f 84 d3 00 00 00    	je     c001826c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018199:	40                   	inc    eax
c001819a:	3d d0 00 00 00       	cmp    eax,0xd0
c001819f:	74 09                	je     c00181aa <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00181a1:	89 f3                	mov    ebx,esi
c00181a3:	80 fb 0f             	cmp    bl,0xf
c00181a6:	75 f1                	jne    c0018199 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00181a8:	eb e7                	jmp    c0018191 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00181aa:	80 f9 10             	cmp    cl,0x10
c00181ad:	75 14                	jne    c00181c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00181af:	8d 42 fc             	lea    eax,[edx-0x4]
c00181b2:	83 e0 fb             	and    eax,0xfffffffb
c00181b5:	3c 02                	cmp    al,0x2
c00181b7:	76 34                	jbe    c00181ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00181b9:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181be:	80 fa 02             	cmp    dl,0x2
c00181c1:	eb 24                	jmp    c00181e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00181c3:	80 f9 11             	cmp    cl,0x11
c00181c6:	75 13                	jne    c00181db <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00181c8:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181cd:	80 fa 03             	cmp    dl,0x3
c00181d0:	0f 85 9b 00 00 00    	jne    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181d6:	e9 91 00 00 00       	jmp    c001826c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00181db:	80 f9 12             	cmp    cl,0x12
c00181de:	75 14                	jne    c00181f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00181e0:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181e5:	fe ca                	dec    dl
c00181e7:	0f 85 84 00 00 00    	jne    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181ed:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00181f2:	eb 7d                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f4:	80 f9 14             	cmp    cl,0x14
c00181f7:	75 12                	jne    c001820b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00181f9:	4a                   	dec    edx
c00181fa:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181ff:	80 fa 01             	cmp    dl,0x1
c0018202:	77 6d                	ja     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018204:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018209:	eb 66                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001820b:	80 f9 15             	cmp    cl,0x15
c001820e:	75 31                	jne    c0018241 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018210:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018215:	80 fa 01             	cmp    dl,0x1
c0018218:	74 57                	je     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001821a:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c001821f:	80 fa 13             	cmp    dl,0x13
c0018222:	76 0c                	jbe    c0018230 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018224:	80 fa 30             	cmp    dl,0x30
c0018227:	75 48                	jne    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018229:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c001822e:	eb 41                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018230:	b9 04 00 09 00       	mov    ecx,0x90004
c0018235:	0f a3 d1             	bt     ecx,edx
c0018238:	73 37                	jae    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823a:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c001823f:	eb 30                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018241:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018246:	80 f9 16             	cmp    cl,0x16
c0018249:	75 26                	jne    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001824b:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018250:	84 d2                	test   dl,dl
c0018252:	74 1d                	je     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018254:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018259:	80 fa 30             	cmp    dl,0x30
c001825c:	75 13                	jne    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001825e:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c0018263:	eb 0c                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018265:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c001826a:	eb 05                	jmp    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001826c:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018271:	5b                   	pop    ebx
c0018272:	5e                   	pop    esi
c0018273:	5f                   	pop    edi
c0018274:	5d                   	pop    ebp
c0018275:	c3                   	ret    

c0018276 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018276:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001827e:	80 f9 04             	cmp    cl,0x4
c0018281:	75 6b                	jne    c00182ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018283:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c0018288:	80 fa 01             	cmp    dl,0x1
c001828b:	0f 86 92 02 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018291:	b8 30 c8 02 c0       	mov    eax,0xc002c830
c0018296:	80 fa 02             	cmp    dl,0x2
c0018299:	0f 84 84 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001829f:	b8 40 c8 02 c0       	mov    eax,0xc002c840
c00182a4:	80 fa 03             	cmp    dl,0x3
c00182a7:	0f 84 76 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ad:	b8 50 c8 02 c0       	mov    eax,0xc002c850
c00182b2:	80 fa 04             	cmp    dl,0x4
c00182b5:	0f 84 68 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182bb:	b8 60 c8 02 c0       	mov    eax,0xc002c860
c00182c0:	80 fa 05             	cmp    dl,0x5
c00182c3:	0f 84 5a 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c9:	b8 40 c8 02 c0       	mov    eax,0xc002c840
c00182ce:	80 fa 07             	cmp    dl,0x7
c00182d1:	0f 84 4c 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d7:	83 ea 08             	sub    edx,0x8
c00182da:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00182df:	80 fa 01             	cmp    dl,0x1
c00182e2:	0f 87 3b 02 00 00    	ja     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e8:	b8 70 c8 02 c0       	mov    eax,0xc002c870
c00182ed:	c3                   	ret    
c00182ee:	80 f9 05             	cmp    cl,0x5
c00182f1:	75 45                	jne    c0018338 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00182f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00182f6:	b8 80 c8 02 c0       	mov    eax,0xc002c880
c00182fb:	80 f9 02             	cmp    cl,0x2
c00182fe:	0f 86 1f 02 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018304:	80 fa 04             	cmp    dl,0x4
c0018307:	0f 84 f3 01 00 00    	je     c0018500 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001830d:	80 fa 07             	cmp    dl,0x7
c0018310:	0f 84 0d 02 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018316:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c001831b:	80 fa 08             	cmp    dl,0x8
c001831e:	0f 84 ff 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018324:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018329:	80 fa 09             	cmp    dl,0x9
c001832c:	0f 85 f1 01 00 00    	jne    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018332:	b8 a0 c8 02 c0       	mov    eax,0xc002c8a0
c0018337:	c3                   	ret    
c0018338:	80 f9 06             	cmp    cl,0x6
c001833b:	0f 85 85 01 00 00    	jne    c00184c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018341:	b8 b0 c8 02 c0       	mov    eax,0xc002c8b0
c0018346:	80 fa 01             	cmp    dl,0x1
c0018349:	0f 84 d4 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001834f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018352:	3c 01                	cmp    al,0x1
c0018354:	0f 86 ac 01 00 00    	jbe    c0018506 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001835a:	80 fa 03             	cmp    dl,0x3
c001835d:	0f 84 a3 01 00 00    	je     c0018506 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018363:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018366:	b8 d0 c8 02 c0       	mov    eax,0xc002c8d0
c001836b:	80 f9 01             	cmp    cl,0x1
c001836e:	0f 86 af 01 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018374:	80 fa 09             	cmp    dl,0x9
c0018377:	0f 84 8f 01 00 00    	je     c001850c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001837d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018380:	80 f9 01             	cmp    cl,0x1
c0018383:	0f 86 9a 01 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018389:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c001838e:	80 fa 0d             	cmp    dl,0xd
c0018391:	0f 84 8c 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018397:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c001839c:	80 fa 0e             	cmp    dl,0xe
c001839f:	0f 84 7e 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a5:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c00183aa:	80 fa 0f             	cmp    dl,0xf
c00183ad:	0f 84 70 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b3:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c00183b8:	80 fa 15             	cmp    dl,0x15
c00183bb:	0f 84 62 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183c1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00183c4:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c00183c9:	80 f9 01             	cmp    cl,0x1
c00183cc:	0f 86 51 01 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d2:	80 fa 1a             	cmp    dl,0x1a
c00183d5:	0f 84 37 01 00 00    	je     c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00183db:	80 fa 1c             	cmp    dl,0x1c
c00183de:	0f 84 34 01 00 00    	je     c0018518 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00183e4:	80 fa 1d             	cmp    dl,0x1d
c00183e7:	0f 84 36 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ed:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c00183f2:	80 fa 25             	cmp    dl,0x25
c00183f5:	0f 84 28 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183fb:	8d 4a da             	lea    ecx,[edx-0x26]
c00183fe:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018403:	80 f9 01             	cmp    cl,0x1
c0018406:	0f 86 17 01 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840c:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c0018411:	80 fa 2a             	cmp    dl,0x2a
c0018414:	0f 84 09 01 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001841a:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c001841f:	80 fa 2c             	cmp    dl,0x2c
c0018422:	0f 84 fb 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018428:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c001842d:	80 fa 2d             	cmp    dl,0x2d
c0018430:	0f 84 ed 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018436:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c001843b:	80 fa 2e             	cmp    dl,0x2e
c001843e:	0f 84 df 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018444:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c0018449:	80 fa 2f             	cmp    dl,0x2f
c001844c:	0f 84 d1 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018452:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018455:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c001845a:	80 f9 01             	cmp    cl,0x1
c001845d:	0f 86 c0 00 00 00    	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018463:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018468:	80 fa 37             	cmp    dl,0x37
c001846b:	0f 84 b2 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018471:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018476:	80 fa 3a             	cmp    dl,0x3a
c0018479:	0f 84 a4 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847f:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c0018484:	80 fa 3c             	cmp    dl,0x3c
c0018487:	0f 84 96 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848d:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0018492:	80 fa 3d             	cmp    dl,0x3d
c0018495:	0f 84 88 00 00 00    	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849b:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c00184a0:	80 fa 3e             	cmp    dl,0x3e
c00184a3:	74 7e                	je     c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a5:	8d 42 bb             	lea    eax,[edx-0x45]
c00184a8:	3c 01                	cmp    al,0x1
c00184aa:	76 72                	jbe    c001851e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184ac:	80 fa 3f             	cmp    dl,0x3f
c00184af:	74 6d                	je     c001851e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184b1:	80 fa 4a             	cmp    dl,0x4a
c00184b4:	74 0a                	je     c00184c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00184b6:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00184bb:	80 fa 4d             	cmp    dl,0x4d
c00184be:	75 63                	jne    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c0:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c00184c5:	c3                   	ret    
c00184c6:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00184cb:	80 f9 0b             	cmp    cl,0xb
c00184ce:	75 0a                	jne    c00184da <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00184d0:	fe ca                	dec    dl
c00184d2:	75 4f                	jne    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d4:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c00184d9:	c3                   	ret    
c00184da:	80 f9 0f             	cmp    cl,0xf
c00184dd:	75 44                	jne    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184df:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c00184e4:	80 fa 02             	cmp    dl,0x2
c00184e7:	76 3a                	jbe    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e9:	8d 42 fd             	lea    eax,[edx-0x3]
c00184ec:	3c 01                	cmp    al,0x1
c00184ee:	76 0a                	jbe    c00184fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00184f0:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00184f5:	80 fa 06             	cmp    dl,0x6
c00184f8:	75 29                	jne    c0018523 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fa:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c00184ff:	c3                   	ret    
c0018500:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c0018505:	c3                   	ret    
c0018506:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c001850b:	c3                   	ret    
c001850c:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c0018511:	c3                   	ret    
c0018512:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c0018517:	c3                   	ret    
c0018518:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c001851d:	c3                   	ret    
c001851e:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c0018523:	c3                   	ret    

c0018524 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018524:	60                   	pusha  
c0018525:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001852d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018531:	9c                   	pushf  
c0018532:	fa                   	cli    
c0018533:	0f 09                	wbinvd 
c0018535:	0f 30                	wrmsr  
c0018537:	9d                   	popf   
c0018538:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001853c:	89 02                	mov    DWORD PTR [edx],eax
c001853e:	61                   	popa   
c001853f:	c3                   	ret    

c0018540 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018540:	60                   	pusha  
c0018541:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018545:	9c                   	pushf  
c0018546:	fa                   	cli    
c0018547:	0f 09                	wbinvd 
c0018549:	31 c0                	xor    eax,eax
c001854b:	31 d2                	xor    edx,edx
c001854d:	0f 32                	rdmsr  
c001854f:	9d                   	popf   
c0018550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018554:	89 02                	mov    DWORD PTR [edx],eax
c0018556:	61                   	popa   
c0018557:	c3                   	ret    

c0018558 <CPU::AMD_K6_writeback(int, int, int)>:
c0018558:	56                   	push   esi
c0018559:	53                   	push   ebx
c001855a:	83 ec 10             	sub    esp,0x10
c001855d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018561:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018566:	75 5d                	jne    c00185c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018568:	83 f8 08             	cmp    eax,0x8
c001856b:	75 09                	jne    c0018576 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001856d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018572:	7e 13                	jle    c0018587 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018574:	eb 30                	jmp    c00185a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018576:	83 f8 06             	cmp    eax,0x6
c0018579:	7c 4a                	jl     c00185c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001857b:	83 f8 07             	cmp    eax,0x7
c001857e:	7e 07                	jle    c0018587 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018580:	83 f8 09             	cmp    eax,0x9
c0018583:	74 21                	je     c00185a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018585:	eb 3e                	jmp    c00185c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018587:	89 e6                	mov    esi,esp
c0018589:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c001858f:	56                   	push   esi
c0018590:	c1 eb 15             	shr    ebx,0x15
c0018593:	68 82 00 00 c0       	push   0xc0000082
c0018598:	83 e3 7e             	and    ebx,0x7e
c001859b:	e8 a0 ff ff ff       	call   c0018540 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185a0:	56                   	push   esi
c00185a1:	6a 00                	push   0x0
c00185a3:	53                   	push   ebx
c00185a4:	eb 12                	jmp    c00185b8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00185a6:	89 e3                	mov    ebx,esp
c00185a8:	53                   	push   ebx
c00185a9:	68 82 00 00 c0       	push   0xc0000082
c00185ae:	e8 8d ff ff ff       	call   c0018540 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185b3:	53                   	push   ebx
c00185b4:	6a 00                	push   0x0
c00185b6:	6a 00                	push   0x0
c00185b8:	68 82 00 00 c0       	push   0xc0000082
c00185bd:	e8 62 ff ff ff       	call   c0018524 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00185c2:	83 c4 18             	add    esp,0x18
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	5b                   	pop    ebx
c00185c9:	5e                   	pop    esi
c00185ca:	c3                   	ret    
c00185cb:	90                   	nop

c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00185cc:	55                   	push   ebp
c00185cd:	57                   	push   edi
c00185ce:	56                   	push   esi
c00185cf:	53                   	push   ebx
c00185d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00185dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00185e0:	39 05 c0 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac0,eax
c00185e6:	75 23                	jne    c001860b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00185e8:	a1 cc 00 03 c0       	mov    eax,ds:0xc00300cc
c00185ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185f1:	89 06                	mov    DWORD PTR [esi],eax
c00185f3:	a1 c8 00 03 c0       	mov    eax,ds:0xc00300c8
c00185f8:	89 07                	mov    DWORD PTR [edi],eax
c00185fa:	a1 c4 00 03 c0       	mov    eax,ds:0xc00300c4
c00185ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018602:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c0018607:	89 02                	mov    DWORD PTR [edx],eax
c0018609:	eb 3f                	jmp    c001864a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001860b:	31 c9                	xor    ecx,ecx
c001860d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018611:	0f a2                	cpuid  
c0018613:	89 06                	mov    DWORD PTR [esi],eax
c0018615:	89 1f                	mov    DWORD PTR [edi],ebx
c0018617:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001861b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001861e:	89 10                	mov    DWORD PTR [eax],edx
c0018620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018624:	a3 c0 ca 02 c0       	mov    ds:0xc002cac0,eax
c0018629:	8b 06                	mov    eax,DWORD PTR [esi]
c001862b:	a3 cc 00 03 c0       	mov    ds:0xc00300cc,eax
c0018630:	8b 07                	mov    eax,DWORD PTR [edi]
c0018632:	a3 c8 00 03 c0       	mov    ds:0xc00300c8,eax
c0018637:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001863a:	a3 c4 00 03 c0       	mov    ds:0xc00300c4,eax
c001863f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018643:	8b 00                	mov    eax,DWORD PTR [eax]
c0018645:	a3 c0 00 03 c0       	mov    ds:0xc00300c0,eax
c001864a:	5b                   	pop    ebx
c001864b:	5e                   	pop    esi
c001864c:	5f                   	pop    edi
c001864d:	5d                   	pop    ebp
c001864e:	c3                   	ret    
c001864f:	90                   	nop

c0018650 <CPU::cpuidCheckEDX(unsigned int)>:
c0018650:	83 ec 10             	sub    esp,0x10
c0018653:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018657:	50                   	push   eax
c0018658:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001865c:	50                   	push   eax
c001865d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018661:	50                   	push   eax
c0018662:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018666:	50                   	push   eax
c0018667:	6a 01                	push   0x1
c0018669:	e8 5e ff ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001866e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018672:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018676:	0f 95 c0             	setne  al
c0018679:	83 c4 24             	add    esp,0x24
c001867c:	c3                   	ret    
c001867d:	90                   	nop

c001867e <CPU::cpuidCheckECX(unsigned int)>:
c001867e:	83 ec 10             	sub    esp,0x10
c0018681:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018685:	50                   	push   eax
c0018686:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001868a:	50                   	push   eax
c001868b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001868f:	50                   	push   eax
c0018690:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018694:	50                   	push   eax
c0018695:	6a 01                	push   0x1
c0018697:	e8 30 ff ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001869c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00186a4:	0f 95 c0             	setne  al
c00186a7:	83 c4 24             	add    esp,0x24
c00186aa:	c3                   	ret    
c00186ab:	90                   	nop

c00186ac <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00186ac:	83 ec 10             	sub    esp,0x10
c00186af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186b3:	50                   	push   eax
c00186b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186b8:	50                   	push   eax
c00186b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186bd:	50                   	push   eax
c00186be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c2:	50                   	push   eax
c00186c3:	6a 07                	push   0x7
c00186c5:	e8 02 ff ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186ce:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00186d2:	0f 95 c0             	setne  al
c00186d5:	83 c4 24             	add    esp,0x24
c00186d8:	c3                   	ret    
c00186d9:	90                   	nop

c00186da <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00186da:	83 ec 10             	sub    esp,0x10
c00186dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186e1:	50                   	push   eax
c00186e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186e6:	50                   	push   eax
c00186e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186eb:	50                   	push   eax
c00186ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f0:	50                   	push   eax
c00186f1:	6a 07                	push   0x7
c00186f3:	e8 d4 fe ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186fc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018700:	0f 95 c0             	setne  al
c0018703:	83 c4 24             	add    esp,0x24
c0018706:	c3                   	ret    
c0018707:	90                   	nop

c0018708 <CPU::CPU()>:
c0018708:	83 ec 0c             	sub    esp,0xc
c001870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001870f:	83 ec 08             	sub    esp,0x8
c0018712:	68 b9 b0 02 c0       	push   0xc002b0b9
c0018717:	50                   	push   eax
c0018718:	e8 45 b4 ff ff       	call   c0013b62 <Device::Device(char const*)>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c0018725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018729:	89 10                	mov    DWORD PTR [eax],edx
c001872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001872f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001873d:	05 78 01 00 00       	add    eax,0x178
c0018742:	83 ec 0c             	sub    esp,0xc
c0018745:	50                   	push   eax
c0018746:	e8 81 66 ff ff       	call   c000edcc <GDT::GDT()>
c001874b:	83 c4 10             	add    esp,0x10
c001874e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018752:	05 7c 09 00 00       	add    eax,0x97c
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	50                   	push   eax
c001875b:	e8 bc 68 ff ff       	call   c000f01c <IDT::IDT()>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018767:	05 7c 11 00 00       	add    eax,0x117c
c001876c:	83 ec 0c             	sub    esp,0xc
c001876f:	50                   	push   eax
c0018770:	e8 73 83 ff ff       	call   c0010ae8 <TSS::TSS()>
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001877c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018787:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018791:	90                   	nop
c0018792:	83 c4 0c             	add    esp,0xc
c0018795:	c3                   	ret    

c0018796 <CPU::displayFeatures()>:
c0018796:	c3                   	ret    
c0018797:	90                   	nop

c0018798 <CPU::detectFeatures()>:
c0018798:	55                   	push   ebp
c0018799:	57                   	push   edi
c001879a:	56                   	push   esi
c001879b:	53                   	push   ebx
c001879c:	83 ec 50             	sub    esp,0x50
c001879f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00187a3:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00187ad:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00187b4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00187ba:	6a 0d                	push   0xd
c00187bc:	6a 00                	push   0x0
c00187be:	55                   	push   ebp
c00187bf:	e8 8c 7f fe ff       	call   c0000750 <memset>
c00187c4:	83 c4 10             	add    esp,0x10
c00187c7:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00187cc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00187d3:	0f 84 22 09 00 00    	je     c00190fb <CPU::detectFeatures()+0x963>
c00187d9:	83 ec 0c             	sub    esp,0xc
c00187dc:	89 ef                	mov    edi,ebp
c00187de:	6a 10                	push   0x10
c00187e0:	e8 6b fe ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c00187e5:	83 e0 01             	and    eax,0x1
c00187e8:	8d 14 00             	lea    edx,[eax+eax*1]
c00187eb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187f1:	83 e0 fd             	and    eax,0xfffffffd
c00187f4:	09 d0                	or     eax,edx
c00187f6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187fc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018803:	e8 48 fe ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c0018808:	83 e0 01             	and    eax,0x1
c001880b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018812:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018818:	83 e0 fb             	and    eax,0xfffffffb
c001881b:	09 d0                	or     eax,edx
c001881d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018823:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001882a:	e8 21 fe ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c001882f:	83 e0 01             	and    eax,0x1
c0018832:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018839:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001883f:	83 e0 f7             	and    eax,0xfffffff7
c0018842:	09 d0                	or     eax,edx
c0018844:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001884a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018851:	e8 fa fd ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c0018856:	83 e0 01             	and    eax,0x1
c0018859:	c1 e0 04             	shl    eax,0x4
c001885c:	88 c2                	mov    dl,al
c001885e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018864:	83 e0 ef             	and    eax,0xffffffef
c0018867:	09 d0                	or     eax,edx
c0018869:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001886f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018876:	e8 d5 fd ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c001887b:	83 e0 01             	and    eax,0x1
c001887e:	c1 e0 05             	shl    eax,0x5
c0018881:	88 c2                	mov    dl,al
c0018883:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018889:	83 e0 df             	and    eax,0xffffffdf
c001888c:	09 d0                	or     eax,edx
c001888e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018894:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001889b:	e8 b0 fd ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c00188a0:	83 e0 01             	and    eax,0x1
c00188a3:	8d 14 00             	lea    edx,[eax+eax*1]
c00188a6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00188ac:	83 e0 fd             	and    eax,0xfffffffd
c00188af:	09 d0                	or     eax,edx
c00188b1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188b7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00188be:	e8 8d fd ff ff       	call   c0018650 <CPU::cpuidCheckEDX(unsigned int)>
c00188c3:	83 e0 01             	and    eax,0x1
c00188c6:	c1 e0 06             	shl    eax,0x6
c00188c9:	88 c2                	mov    dl,al
c00188cb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188d1:	83 e0 bf             	and    eax,0xffffffbf
c00188d4:	09 d0                	or     eax,edx
c00188d6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00188dc:	58                   	pop    eax
c00188dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188e1:	50                   	push   eax
c00188e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188e6:	50                   	push   eax
c00188e7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00188eb:	56                   	push   esi
c00188ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188f0:	50                   	push   eax
c00188f1:	6a 00                	push   0x0
c00188f3:	e8 d4 fc ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188f8:	b8 04 00 00 00       	mov    eax,0x4
c00188fd:	89 c1                	mov    ecx,eax
c00188ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018901:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018907:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001890b:	89 c1                	mov    ecx,eax
c001890d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001890f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018915:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018919:	89 c1                	mov    ecx,eax
c001891b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001891d:	83 c4 18             	add    esp,0x18
c0018920:	68 64 af 02 c0       	push   0xc002af64
c0018925:	55                   	push   ebp
c0018926:	e8 6d 7f fe ff       	call   c0000898 <strcmp>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	85 c0                	test   eax,eax
c0018930:	75 0f                	jne    c0018941 <CPU::detectFeatures()+0x1a9>
c0018932:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001893c:	e9 22 02 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018941:	50                   	push   eax
c0018942:	50                   	push   eax
c0018943:	68 71 af 02 c0       	push   0xc002af71
c0018948:	55                   	push   ebp
c0018949:	e8 4a 7f fe ff       	call   c0000898 <strcmp>
c001894e:	83 c4 10             	add    esp,0x10
c0018951:	85 c0                	test   eax,eax
c0018953:	74 dd                	je     c0018932 <CPU::detectFeatures()+0x19a>
c0018955:	50                   	push   eax
c0018956:	50                   	push   eax
c0018957:	68 7e af 02 c0       	push   0xc002af7e
c001895c:	55                   	push   ebp
c001895d:	e8 36 7f fe ff       	call   c0000898 <strcmp>
c0018962:	83 c4 10             	add    esp,0x10
c0018965:	85 c0                	test   eax,eax
c0018967:	74 2a                	je     c0018993 <CPU::detectFeatures()+0x1fb>
c0018969:	50                   	push   eax
c001896a:	50                   	push   eax
c001896b:	68 8b af 02 c0       	push   0xc002af8b
c0018970:	55                   	push   ebp
c0018971:	e8 22 7f fe ff       	call   c0000898 <strcmp>
c0018976:	83 c4 10             	add    esp,0x10
c0018979:	85 c0                	test   eax,eax
c001897b:	74 16                	je     c0018993 <CPU::detectFeatures()+0x1fb>
c001897d:	50                   	push   eax
c001897e:	50                   	push   eax
c001897f:	68 98 af 02 c0       	push   0xc002af98
c0018984:	55                   	push   ebp
c0018985:	e8 0e 7f fe ff       	call   c0000898 <strcmp>
c001898a:	83 c4 10             	add    esp,0x10
c001898d:	85 c0                	test   eax,eax
c001898f:	74 48                	je     c00189d9 <CPU::detectFeatures()+0x241>
c0018991:	eb 0f                	jmp    c00189a2 <CPU::detectFeatures()+0x20a>
c0018993:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001899d:	e9 c1 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c00189a2:	50                   	push   eax
c00189a3:	50                   	push   eax
c00189a4:	68 a5 af 02 c0       	push   0xc002afa5
c00189a9:	55                   	push   ebp
c00189aa:	e8 e9 7e fe ff       	call   c0000898 <strcmp>
c00189af:	83 c4 10             	add    esp,0x10
c00189b2:	85 c0                	test   eax,eax
c00189b4:	74 23                	je     c00189d9 <CPU::detectFeatures()+0x241>
c00189b6:	57                   	push   edi
c00189b7:	57                   	push   edi
c00189b8:	68 b2 af 02 c0       	push   0xc002afb2
c00189bd:	55                   	push   ebp
c00189be:	e8 d5 7e fe ff       	call   c0000898 <strcmp>
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	85 c0                	test   eax,eax
c00189c8:	75 1e                	jne    c00189e8 <CPU::detectFeatures()+0x250>
c00189ca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00189d4:	e9 8a 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c00189d9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00189e3:	e9 7b 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c00189e8:	56                   	push   esi
c00189e9:	56                   	push   esi
c00189ea:	68 bf af 02 c0       	push   0xc002afbf
c00189ef:	55                   	push   ebp
c00189f0:	e8 a3 7e fe ff       	call   c0000898 <strcmp>
c00189f5:	83 c4 10             	add    esp,0x10
c00189f8:	85 c0                	test   eax,eax
c00189fa:	75 0f                	jne    c0018a0b <CPU::detectFeatures()+0x273>
c00189fc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a06:	e9 58 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018a0b:	51                   	push   ecx
c0018a0c:	51                   	push   ecx
c0018a0d:	68 7e af 02 c0       	push   0xc002af7e
c0018a12:	55                   	push   ebp
c0018a13:	e8 80 7e fe ff       	call   c0000898 <strcmp>
c0018a18:	83 c4 10             	add    esp,0x10
c0018a1b:	85 c0                	test   eax,eax
c0018a1d:	75 0f                	jne    c0018a2e <CPU::detectFeatures()+0x296>
c0018a1f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a29:	e9 35 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018a2e:	52                   	push   edx
c0018a2f:	52                   	push   edx
c0018a30:	68 cc af 02 c0       	push   0xc002afcc
c0018a35:	55                   	push   ebp
c0018a36:	e8 5d 7e fe ff       	call   c0000898 <strcmp>
c0018a3b:	83 c4 10             	add    esp,0x10
c0018a3e:	85 c0                	test   eax,eax
c0018a40:	75 0f                	jne    c0018a51 <CPU::detectFeatures()+0x2b9>
c0018a42:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018a4c:	e9 12 01 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018a51:	50                   	push   eax
c0018a52:	50                   	push   eax
c0018a53:	68 d9 af 02 c0       	push   0xc002afd9
c0018a58:	55                   	push   ebp
c0018a59:	e8 3a 7e fe ff       	call   c0000898 <strcmp>
c0018a5e:	83 c4 10             	add    esp,0x10
c0018a61:	85 c0                	test   eax,eax
c0018a63:	75 0f                	jne    c0018a74 <CPU::detectFeatures()+0x2dc>
c0018a65:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018a6f:	e9 ef 00 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018a74:	50                   	push   eax
c0018a75:	50                   	push   eax
c0018a76:	68 e6 af 02 c0       	push   0xc002afe6
c0018a7b:	55                   	push   ebp
c0018a7c:	e8 17 7e fe ff       	call   c0000898 <strcmp>
c0018a81:	83 c4 10             	add    esp,0x10
c0018a84:	85 c0                	test   eax,eax
c0018a86:	75 0f                	jne    c0018a97 <CPU::detectFeatures()+0x2ff>
c0018a88:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018a92:	e9 cc 00 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018a97:	50                   	push   eax
c0018a98:	50                   	push   eax
c0018a99:	68 f3 af 02 c0       	push   0xc002aff3
c0018a9e:	55                   	push   ebp
c0018a9f:	e8 f4 7d fe ff       	call   c0000898 <strcmp>
c0018aa4:	83 c4 10             	add    esp,0x10
c0018aa7:	85 c0                	test   eax,eax
c0018aa9:	75 0f                	jne    c0018aba <CPU::detectFeatures()+0x322>
c0018aab:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ab5:	e9 a9 00 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018aba:	50                   	push   eax
c0018abb:	50                   	push   eax
c0018abc:	68 00 b0 02 c0       	push   0xc002b000
c0018ac1:	55                   	push   ebp
c0018ac2:	e8 d1 7d fe ff       	call   c0000898 <strcmp>
c0018ac7:	83 c4 10             	add    esp,0x10
c0018aca:	85 c0                	test   eax,eax
c0018acc:	75 0f                	jne    c0018add <CPU::detectFeatures()+0x345>
c0018ace:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018ad8:	e9 86 00 00 00       	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018add:	50                   	push   eax
c0018ade:	50                   	push   eax
c0018adf:	68 0d b0 02 c0       	push   0xc002b00d
c0018ae4:	55                   	push   ebp
c0018ae5:	e8 ae 7d fe ff       	call   c0000898 <strcmp>
c0018aea:	83 c4 10             	add    esp,0x10
c0018aed:	85 c0                	test   eax,eax
c0018aef:	75 0c                	jne    c0018afd <CPU::detectFeatures()+0x365>
c0018af1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018afb:	eb 66                	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018afd:	50                   	push   eax
c0018afe:	50                   	push   eax
c0018aff:	68 1a b0 02 c0       	push   0xc002b01a
c0018b04:	55                   	push   ebp
c0018b05:	e8 8e 7d fe ff       	call   c0000898 <strcmp>
c0018b0a:	83 c4 10             	add    esp,0x10
c0018b0d:	85 c0                	test   eax,eax
c0018b0f:	75 0c                	jne    c0018b1d <CPU::detectFeatures()+0x385>
c0018b11:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b1b:	eb 46                	jmp    c0018b63 <CPU::detectFeatures()+0x3cb>
c0018b1d:	57                   	push   edi
c0018b1e:	57                   	push   edi
c0018b1f:	68 27 b0 02 c0       	push   0xc002b027
c0018b24:	55                   	push   ebp
c0018b25:	e8 6e 7d fe ff       	call   c0000898 <strcmp>
c0018b2a:	83 c4 10             	add    esp,0x10
c0018b2d:	85 c0                	test   eax,eax
c0018b2f:	74 e0                	je     c0018b11 <CPU::detectFeatures()+0x379>
c0018b31:	56                   	push   esi
c0018b32:	56                   	push   esi
c0018b33:	68 34 b0 02 c0       	push   0xc002b034
c0018b38:	55                   	push   ebp
c0018b39:	e8 5a 7d fe ff       	call   c0000898 <strcmp>
c0018b3e:	83 c4 10             	add    esp,0x10
c0018b41:	85 c0                	test   eax,eax
c0018b43:	74 cc                	je     c0018b11 <CPU::detectFeatures()+0x379>
c0018b45:	51                   	push   ecx
c0018b46:	51                   	push   ecx
c0018b47:	68 41 b0 02 c0       	push   0xc002b041
c0018b4c:	55                   	push   ebp
c0018b4d:	e8 46 7d fe ff       	call   c0000898 <strcmp>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	85 c0                	test   eax,eax
c0018b57:	74 b8                	je     c0018b11 <CPU::detectFeatures()+0x379>
c0018b59:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018b63:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018b68:	0f 86 be 00 00 00    	jbe    c0018c2c <CPU::detectFeatures()+0x494>
c0018b6e:	83 ec 0c             	sub    esp,0xc
c0018b71:	68 80 00 00 00       	push   0x80
c0018b76:	e8 31 fb ff ff       	call   c00186ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b7b:	83 e0 01             	and    eax,0x1
c0018b7e:	c1 e0 06             	shl    eax,0x6
c0018b81:	88 c2                	mov    dl,al
c0018b83:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b89:	83 e0 bf             	and    eax,0xffffffbf
c0018b8c:	09 d0                	or     eax,edx
c0018b8e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b94:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018b9b:	e8 0c fb ff ff       	call   c00186ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ba0:	83 e0 01             	and    eax,0x1
c0018ba3:	c1 e0 04             	shl    eax,0x4
c0018ba6:	88 c2                	mov    dl,al
c0018ba8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bae:	83 e0 ef             	and    eax,0xffffffef
c0018bb1:	09 d0                	or     eax,edx
c0018bb3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bb9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018bc0:	e8 e7 fa ff ff       	call   c00186ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bc5:	c1 e0 07             	shl    eax,0x7
c0018bc8:	88 c2                	mov    dl,al
c0018bca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bd0:	83 e0 7f             	and    eax,0x7f
c0018bd3:	09 d0                	or     eax,edx
c0018bd5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bdb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018be2:	e8 f3 fa ff ff       	call   c00186da <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018be7:	83 e0 01             	and    eax,0x1
c0018bea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018bf1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bf7:	83 e0 f7             	and    eax,0xfffffff7
c0018bfa:	09 d0                	or     eax,edx
c0018bfc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c02:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c09:	e8 cc fa ff ff       	call   c00186da <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	83 e0 01             	and    eax,0x1
c0018c14:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c1b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c21:	83 e0 fb             	and    eax,0xfffffffb
c0018c24:	09 d0                	or     eax,edx
c0018c26:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c33:	50                   	push   eax
c0018c34:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c38:	50                   	push   eax
c0018c39:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c3d:	56                   	push   esi
c0018c3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c42:	50                   	push   eax
c0018c43:	6a 01                	push   0x1
c0018c45:	e8 82 f9 ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c4a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018c4e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c54:	88 ca                	mov    dl,cl
c0018c56:	83 e0 f0             	and    eax,0xfffffff0
c0018c59:	83 e2 0f             	and    edx,0xf
c0018c5c:	09 d0                	or     eax,edx
c0018c5e:	88 ca                	mov    dl,cl
c0018c60:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018c66:	c0 ea 04             	shr    dl,0x4
c0018c69:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018c6d:	0f b6 c2             	movzx  eax,dl
c0018c70:	83 c4 20             	add    esp,0x20
c0018c73:	c1 e0 06             	shl    eax,0x6
c0018c76:	89 c7                	mov    edi,eax
c0018c78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c7e:	66 25 3f c0          	and    ax,0xc03f
c0018c82:	09 f8                	or     eax,edi
c0018c84:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018c8b:	89 c8                	mov    eax,ecx
c0018c8d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018c94:	c1 e8 08             	shr    eax,0x8
c0018c97:	83 e5 3f             	and    ebp,0x3f
c0018c9a:	83 e0 0f             	and    eax,0xf
c0018c9d:	89 c7                	mov    edi,eax
c0018c9f:	c1 e7 06             	shl    edi,0x6
c0018ca2:	09 ef                	or     edi,ebp
c0018ca4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018cab:	89 fa                	mov    edx,edi
c0018cad:	83 e5 c0             	and    ebp,0xffffffc0
c0018cb0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018cb6:	88 c2                	mov    dl,al
c0018cb8:	c0 ea 02             	shr    dl,0x2
c0018cbb:	89 d7                	mov    edi,edx
c0018cbd:	09 ef                	or     edi,ebp
c0018cbf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018cc5:	89 fa                	mov    edx,edi
c0018cc7:	83 e5 cf             	and    ebp,0xffffffcf
c0018cca:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018cd0:	89 cf                	mov    edi,ecx
c0018cd2:	c1 ef 0c             	shr    edi,0xc
c0018cd5:	83 e7 03             	and    edi,0x3
c0018cd8:	c1 e7 04             	shl    edi,0x4
c0018cdb:	09 ef                	or     edi,ebp
c0018cdd:	3c 06                	cmp    al,0x6
c0018cdf:	89 fa                	mov    edx,edi
c0018ce1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ce7:	74 04                	je     c0018ced <CPU::detectFeatures()+0x555>
c0018ce9:	3c 0f                	cmp    al,0xf
c0018ceb:	75 5c                	jne    c0018d49 <CPU::detectFeatures()+0x5b1>
c0018ced:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cf1:	89 cf                	mov    edi,ecx
c0018cf3:	c1 ef 10             	shr    edi,0x10
c0018cf6:	c1 e7 04             	shl    edi,0x4
c0018cf9:	09 fa                	or     edx,edi
c0018cfb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018d01:	0f b6 d2             	movzx  edx,dl
c0018d04:	66 81 e7 3f c0       	and    di,0xc03f
c0018d09:	c1 e2 06             	shl    edx,0x6
c0018d0c:	09 fa                	or     edx,edi
c0018d0e:	3c 0f                	cmp    al,0xf
c0018d10:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d17:	75 30                	jne    c0018d49 <CPU::detectFeatures()+0x5b1>
c0018d19:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d1f:	c1 e9 14             	shr    ecx,0x14
c0018d22:	83 e0 3f             	and    eax,0x3f
c0018d25:	83 c1 0f             	add    ecx,0xf
c0018d28:	88 ca                	mov    dl,cl
c0018d2a:	c0 e9 02             	shr    cl,0x2
c0018d2d:	c1 e2 06             	shl    edx,0x6
c0018d30:	09 d0                	or     eax,edx
c0018d32:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018d38:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018d3e:	83 e0 c0             	and    eax,0xffffffc0
c0018d41:	09 c1                	or     ecx,eax
c0018d43:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018d49:	83 ec 0c             	sub    esp,0xc
c0018d4c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d57:	50                   	push   eax
c0018d58:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d5c:	55                   	push   ebp
c0018d5d:	56                   	push   esi
c0018d5e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d62:	57                   	push   edi
c0018d63:	68 00 00 00 80       	push   0x80000000
c0018d68:	e8 5f f8 ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d6d:	83 c4 20             	add    esp,0x20
c0018d70:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018d78:	76 22                	jbe    c0018d9c <CPU::detectFeatures()+0x604>
c0018d7a:	83 ec 0c             	sub    esp,0xc
c0018d7d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d81:	50                   	push   eax
c0018d82:	55                   	push   ebp
c0018d83:	56                   	push   esi
c0018d84:	57                   	push   edi
c0018d85:	68 01 00 00 80       	push   0x80000001
c0018d8a:	e8 3d f8 ff ff       	call   c00185cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d8f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018d99:	83 c4 20             	add    esp,0x20
c0018d9c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018da2:	83 f8 01             	cmp    eax,0x1
c0018da5:	75 6f                	jne    c0018e16 <CPU::detectFeatures()+0x67e>
c0018da7:	51                   	push   ecx
c0018da8:	51                   	push   ecx
c0018da9:	68 4d b0 02 c0       	push   0xc002b04d
c0018dae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018db2:	56                   	push   esi
c0018db3:	e8 54 7a fe ff       	call   c000080c <strcpy>
c0018db8:	5f                   	pop    edi
c0018db9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dbf:	5d                   	pop    ebp
c0018dc0:	66 c1 e8 06          	shr    ax,0x6
c0018dc4:	0f b6 c0             	movzx  eax,al
c0018dc7:	50                   	push   eax
c0018dc8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dce:	c1 e8 0e             	shr    eax,0xe
c0018dd1:	0f b6 c0             	movzx  eax,al
c0018dd4:	50                   	push   eax
c0018dd5:	e8 9c f4 ff ff       	call   c0018276 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018dda:	5a                   	pop    edx
c0018ddb:	59                   	pop    ecx
c0018ddc:	50                   	push   eax
c0018ddd:	56                   	push   esi
c0018dde:	e8 69 7b fe ff       	call   c000094c <strcat>
c0018de3:	5f                   	pop    edi
c0018de4:	5d                   	pop    ebp
c0018de5:	56                   	push   esi
c0018de6:	53                   	push   ebx
c0018de7:	e8 68 ad ff ff       	call   c0013b54 <Device::setName(char const*)>
c0018dec:	58                   	pop    eax
c0018ded:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018df3:	5a                   	pop    edx
c0018df4:	68 54 b0 02 c0       	push   0xc002b054
c0018df9:	50                   	push   eax
c0018dfa:	e8 99 7a fe ff       	call   c0000898 <strcmp>
c0018dff:	83 c4 10             	add    esp,0x10
c0018e02:	85 c0                	test   eax,eax
c0018e04:	0f 85 71 03 00 00    	jne    c001917b <CPU::detectFeatures()+0x9e3>
c0018e0a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e11:	e9 65 03 00 00       	jmp    c001917b <CPU::detectFeatures()+0x9e3>
c0018e16:	83 f8 02             	cmp    eax,0x2
c0018e19:	0f 85 b5 00 00 00    	jne    c0018ed4 <CPU::detectFeatures()+0x73c>
c0018e1f:	57                   	push   edi
c0018e20:	57                   	push   edi
c0018e21:	68 66 b0 02 c0       	push   0xc002b066
c0018e26:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e2a:	56                   	push   esi
c0018e2b:	e8 dc 79 fe ff       	call   c000080c <strcpy>
c0018e30:	5d                   	pop    ebp
c0018e31:	58                   	pop    eax
c0018e32:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e38:	66 c1 e8 06          	shr    ax,0x6
c0018e3c:	0f b6 c0             	movzx  eax,al
c0018e3f:	50                   	push   eax
c0018e40:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e46:	c1 e8 0e             	shr    eax,0xe
c0018e49:	0f b6 c0             	movzx  eax,al
c0018e4c:	50                   	push   eax
c0018e4d:	e8 90 f2 ff ff       	call   c00180e2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018e52:	5a                   	pop    edx
c0018e53:	59                   	pop    ecx
c0018e54:	50                   	push   eax
c0018e55:	56                   	push   esi
c0018e56:	e8 f1 7a fe ff       	call   c000094c <strcat>
c0018e5b:	5f                   	pop    edi
c0018e5c:	5d                   	pop    ebp
c0018e5d:	56                   	push   esi
c0018e5e:	53                   	push   ebx
c0018e5f:	e8 f0 ac ff ff       	call   c0013b54 <Device::setName(char const*)>
c0018e64:	58                   	pop    eax
c0018e65:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e6b:	5a                   	pop    edx
c0018e6c:	68 6b b0 02 c0       	push   0xc002b06b
c0018e71:	50                   	push   eax
c0018e72:	e8 21 7a fe ff       	call   c0000898 <strcmp>
c0018e77:	83 c4 10             	add    esp,0x10
c0018e7a:	85 c0                	test   eax,eax
c0018e7c:	75 20                	jne    c0018e9e <CPU::detectFeatures()+0x706>
c0018e7e:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0018e84:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018e8a:	a8 01                	test   al,0x1
c0018e8c:	74 10                	je     c0018e9e <CPU::detectFeatures()+0x706>
c0018e8e:	83 e0 fe             	and    eax,0xfffffffe
c0018e91:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018e97:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018e9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea4:	c1 e8 0e             	shr    eax,0xe
c0018ea7:	3c 05                	cmp    al,0x5
c0018ea9:	0f 85 cc 02 00 00    	jne    c001917b <CPU::detectFeatures()+0x9e3>
c0018eaf:	56                   	push   esi
c0018eb0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018eb6:	83 e0 0f             	and    eax,0xf
c0018eb9:	50                   	push   eax
c0018eba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ec0:	66 c1 e8 06          	shr    ax,0x6
c0018ec4:	0f b6 c0             	movzx  eax,al
c0018ec7:	50                   	push   eax
c0018ec8:	6a 05                	push   0x5
c0018eca:	e8 89 f6 ff ff       	call   c0018558 <CPU::AMD_K6_writeback(int, int, int)>
c0018ecf:	e9 1f 02 00 00       	jmp    c00190f3 <CPU::detectFeatures()+0x95b>
c0018ed4:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ed7:	83 fa 01             	cmp    edx,0x1
c0018eda:	76 09                	jbe    c0018ee5 <CPU::detectFeatures()+0x74d>
c0018edc:	83 f8 06             	cmp    eax,0x6
c0018edf:	0f 85 91 01 00 00    	jne    c0019076 <CPU::detectFeatures()+0x8de>
c0018ee5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018eeb:	c1 ea 0e             	shr    edx,0xe
c0018eee:	80 fa 05             	cmp    dl,0x5
c0018ef1:	75 7b                	jne    c0018f6e <CPU::detectFeatures()+0x7d6>
c0018ef3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ef9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018efe:	66 81 fa 00 01       	cmp    dx,0x100
c0018f03:	75 0c                	jne    c0018f11 <CPU::detectFeatures()+0x779>
c0018f05:	51                   	push   ecx
c0018f06:	51                   	push   ecx
c0018f07:	68 72 b0 02 c0       	push   0xc002b072
c0018f0c:	e9 dc 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f11:	66 81 fa 00 02       	cmp    dx,0x200
c0018f16:	75 0c                	jne    c0018f24 <CPU::detectFeatures()+0x78c>
c0018f18:	52                   	push   edx
c0018f19:	52                   	push   edx
c0018f1a:	68 85 b0 02 c0       	push   0xc002b085
c0018f1f:	e9 c9 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f24:	66 81 fa 40 02       	cmp    dx,0x240
c0018f29:	75 0c                	jne    c0018f37 <CPU::detectFeatures()+0x79f>
c0018f2b:	50                   	push   eax
c0018f2c:	50                   	push   eax
c0018f2d:	68 97 b0 02 c0       	push   0xc002b097
c0018f32:	e9 b6 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f37:	83 f8 06             	cmp    eax,0x6
c0018f3a:	75 0c                	jne    c0018f48 <CPU::detectFeatures()+0x7b0>
c0018f3c:	50                   	push   eax
c0018f3d:	50                   	push   eax
c0018f3e:	68 a9 b0 02 c0       	push   0xc002b0a9
c0018f43:	e9 a5 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f48:	83 f8 04             	cmp    eax,0x4
c0018f4b:	75 0c                	jne    c0018f59 <CPU::detectFeatures()+0x7c1>
c0018f4d:	50                   	push   eax
c0018f4e:	50                   	push   eax
c0018f4f:	68 b5 b0 02 c0       	push   0xc002b0b5
c0018f54:	e9 94 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f59:	83 f8 03             	cmp    eax,0x3
c0018f5c:	0f 85 19 02 00 00    	jne    c001917b <CPU::detectFeatures()+0x9e3>
c0018f62:	50                   	push   eax
c0018f63:	50                   	push   eax
c0018f64:	68 bd b0 02 c0       	push   0xc002b0bd
c0018f69:	e9 7f 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f6e:	80 fa 06             	cmp    dl,0x6
c0018f71:	0f 85 db 00 00 00    	jne    c0019052 <CPU::detectFeatures()+0x8ba>
c0018f77:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f7d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f82:	66 81 fa 80 01       	cmp    dx,0x180
c0018f87:	75 0c                	jne    c0018f95 <CPU::detectFeatures()+0x7fd>
c0018f89:	50                   	push   eax
c0018f8a:	50                   	push   eax
c0018f8b:	68 c8 b0 02 c0       	push   0xc002b0c8
c0018f90:	e9 58 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018f95:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018f9b:	66 f7 c1 80 ff       	test   cx,0xff80
c0018fa0:	75 0c                	jne    c0018fae <CPU::detectFeatures()+0x816>
c0018fa2:	50                   	push   eax
c0018fa3:	50                   	push   eax
c0018fa4:	68 d8 b0 02 c0       	push   0xc002b0d8
c0018fa9:	e9 3f 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018fae:	66 81 fa 40 02       	cmp    dx,0x240
c0018fb3:	75 0c                	jne    c0018fc1 <CPU::detectFeatures()+0x829>
c0018fb5:	55                   	push   ebp
c0018fb6:	55                   	push   ebp
c0018fb7:	68 df b0 02 c0       	push   0xc002b0df
c0018fbc:	e9 2c 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018fc1:	66 81 fa 80 02       	cmp    dx,0x280
c0018fc6:	75 0c                	jne    c0018fd4 <CPU::detectFeatures()+0x83c>
c0018fc8:	57                   	push   edi
c0018fc9:	57                   	push   edi
c0018fca:	68 e8 b0 02 c0       	push   0xc002b0e8
c0018fcf:	e9 19 01 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018fd4:	66 81 fa 40 03       	cmp    dx,0x340
c0018fd9:	74 ed                	je     c0018fc8 <CPU::detectFeatures()+0x830>
c0018fdb:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018fe0:	75 0c                	jne    c0018fee <CPU::detectFeatures()+0x856>
c0018fe2:	56                   	push   esi
c0018fe3:	56                   	push   esi
c0018fe4:	68 ef b0 02 c0       	push   0xc002b0ef
c0018fe9:	e9 ff 00 00 00       	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0018fee:	83 f8 06             	cmp    eax,0x6
c0018ff1:	0f 84 45 ff ff ff    	je     c0018f3c <CPU::detectFeatures()+0x7a4>
c0018ff7:	83 f8 04             	cmp    eax,0x4
c0018ffa:	0f 84 4d ff ff ff    	je     c0018f4d <CPU::detectFeatures()+0x7b5>
c0019000:	83 f8 03             	cmp    eax,0x3
c0019003:	0f 85 72 01 00 00    	jne    c001917b <CPU::detectFeatures()+0x9e3>
c0019009:	51                   	push   ecx
c001900a:	51                   	push   ecx
c001900b:	68 f8 b0 02 c0       	push   0xc002b0f8
c0019010:	53                   	push   ebx
c0019011:	e8 3e ab ff ff       	call   c0013b54 <Device::setName(char const*)>
c0019016:	b1 c1                	mov    cl,0xc1
c0019018:	88 c8                	mov    al,cl
c001901a:	e6 22                	out    0x22,al
c001901c:	e4 23                	in     al,0x23
c001901e:	88 c2                	mov    dl,al
c0019020:	88 c8                	mov    al,cl
c0019022:	e6 22                	out    0x22,al
c0019024:	88 d0                	mov    al,dl
c0019026:	83 c8 10             	or     eax,0x10
c0019029:	e6 23                	out    0x23,al
c001902b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019032:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019035:	89 d0                	mov    eax,edx
c0019037:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001903d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019041:	40                   	inc    eax
c0019042:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019048:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001904d:	e9 a1 00 00 00       	jmp    c00190f3 <CPU::detectFeatures()+0x95b>
c0019052:	83 f8 06             	cmp    eax,0x6
c0019055:	0f 84 e1 fe ff ff    	je     c0018f3c <CPU::detectFeatures()+0x7a4>
c001905b:	83 f8 04             	cmp    eax,0x4
c001905e:	0f 84 e9 fe ff ff    	je     c0018f4d <CPU::detectFeatures()+0x7b5>
c0019064:	83 f8 03             	cmp    eax,0x3
c0019067:	0f 85 0e 01 00 00    	jne    c001917b <CPU::detectFeatures()+0x9e3>
c001906d:	52                   	push   edx
c001906e:	52                   	push   edx
c001906f:	68 03 b1 02 c0       	push   0xc002b103
c0019074:	eb 77                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0019076:	83 f8 07             	cmp    eax,0x7
c0019079:	75 09                	jne    c0019084 <CPU::detectFeatures()+0x8ec>
c001907b:	50                   	push   eax
c001907c:	50                   	push   eax
c001907d:	68 0d b1 02 c0       	push   0xc002b10d
c0019082:	eb 69                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0019084:	83 f8 0a             	cmp    eax,0xa
c0019087:	75 09                	jne    c0019092 <CPU::detectFeatures()+0x8fa>
c0019089:	50                   	push   eax
c001908a:	50                   	push   eax
c001908b:	68 18 b1 02 c0       	push   0xc002b118
c0019090:	eb 5b                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c0019092:	83 f8 0b             	cmp    eax,0xb
c0019095:	75 09                	jne    c00190a0 <CPU::detectFeatures()+0x908>
c0019097:	50                   	push   eax
c0019098:	50                   	push   eax
c0019099:	68 20 b1 02 c0       	push   0xc002b120
c001909e:	eb 4d                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190a0:	83 f8 08             	cmp    eax,0x8
c00190a3:	75 09                	jne    c00190ae <CPU::detectFeatures()+0x916>
c00190a5:	50                   	push   eax
c00190a6:	50                   	push   eax
c00190a7:	68 29 b1 02 c0       	push   0xc002b129
c00190ac:	eb 3f                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190ae:	83 f8 09             	cmp    eax,0x9
c00190b1:	75 09                	jne    c00190bc <CPU::detectFeatures()+0x924>
c00190b3:	50                   	push   eax
c00190b4:	50                   	push   eax
c00190b5:	68 31 b1 02 c0       	push   0xc002b131
c00190ba:	eb 31                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190bc:	83 f8 05             	cmp    eax,0x5
c00190bf:	75 09                	jne    c00190ca <CPU::detectFeatures()+0x932>
c00190c1:	50                   	push   eax
c00190c2:	50                   	push   eax
c00190c3:	68 39 b1 02 c0       	push   0xc002b139
c00190c8:	eb 23                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190ca:	83 f8 0c             	cmp    eax,0xc
c00190cd:	75 09                	jne    c00190d8 <CPU::detectFeatures()+0x940>
c00190cf:	55                   	push   ebp
c00190d0:	55                   	push   ebp
c00190d1:	68 47 b1 02 c0       	push   0xc002b147
c00190d6:	eb 15                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190d8:	83 f8 0d             	cmp    eax,0xd
c00190db:	75 09                	jne    c00190e6 <CPU::detectFeatures()+0x94e>
c00190dd:	57                   	push   edi
c00190de:	57                   	push   edi
c00190df:	68 52 b1 02 c0       	push   0xc002b152
c00190e4:	eb 07                	jmp    c00190ed <CPU::detectFeatures()+0x955>
c00190e6:	56                   	push   esi
c00190e7:	56                   	push   esi
c00190e8:	68 66 b1 02 c0       	push   0xc002b166
c00190ed:	53                   	push   ebx
c00190ee:	e8 61 aa ff ff       	call   c0013b54 <Device::setName(char const*)>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	e9 80 00 00 00       	jmp    c001917b <CPU::detectFeatures()+0x9e3>
c00190fb:	51                   	push   ecx
c00190fc:	51                   	push   ecx
c00190fd:	68 b2 af 02 c0       	push   0xc002afb2
c0019102:	55                   	push   ebp
c0019103:	e8 04 77 fe ff       	call   c000080c <strcpy>
c0019108:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019112:	e8 97 71 fe ff       	call   c00002ae <is486>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	85 c0                	test   eax,eax
c001911c:	74 2b                	je     c0019149 <CPU::detectFeatures()+0x9b1>
c001911e:	52                   	push   edx
c001911f:	52                   	push   edx
c0019120:	68 72 b1 02 c0       	push   0xc002b172
c0019125:	53                   	push   ebx
c0019126:	e8 29 aa ff ff       	call   c0013b54 <Device::setName(char const*)>
c001912b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019132:	0f 20 c0             	mov    eax,cr0
c0019135:	83 e0 14             	and    eax,0x14
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	83 f8 04             	cmp    eax,0x4
c001913e:	75 1f                	jne    c001915f <CPU::detectFeatures()+0x9c7>
c0019140:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019147:	eb 32                	jmp    c001917b <CPU::detectFeatures()+0x9e3>
c0019149:	50                   	push   eax
c001914a:	50                   	push   eax
c001914b:	68 7d b1 02 c0       	push   0xc002b17d
c0019150:	53                   	push   ebx
c0019151:	e8 fe a9 ff ff       	call   c0013b54 <Device::setName(char const*)>
c0019156:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001915d:	eb d3                	jmp    c0019132 <CPU::detectFeatures()+0x99a>
c001915f:	e8 25 71 fe ff       	call   c0000289 <hasLegacyFPU>
c0019164:	83 e0 01             	and    eax,0x1
c0019167:	8d 14 00             	lea    edx,[eax+eax*1]
c001916a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019170:	83 e0 fd             	and    eax,0xfffffffd
c0019173:	09 d0                	or     eax,edx
c0019175:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001917b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019182:	83 c4 4c             	add    esp,0x4c
c0019185:	5b                   	pop    ebx
c0019186:	5e                   	pop    esi
c0019187:	5f                   	pop    edi
c0019188:	5d                   	pop    ebp
c0019189:	c3                   	ret    

c001918a <CPU::setupSMEP()>:
c001918a:	0f 20 e0             	mov    eax,cr4
c001918d:	0d 00 00 10 00       	or     eax,0x100000
c0019192:	0f 22 e0             	mov    cr4,eax
c0019195:	c3                   	ret    

c0019196 <CPU::setupUMIP()>:
c0019196:	0f 20 e0             	mov    eax,cr4
c0019199:	80 cc 08             	or     ah,0x8
c001919c:	0f 22 e0             	mov    cr4,eax
c001919f:	c3                   	ret    

c00191a0 <CPU::setupTSC()>:
c00191a0:	0f 20 e0             	mov    eax,cr4
c00191a3:	83 c8 04             	or     eax,0x4
c00191a6:	0f 22 e0             	mov    cr4,eax
c00191a9:	c3                   	ret    

c00191aa <CPU::setupLargePages()>:
c00191aa:	0f 20 e0             	mov    eax,cr4
c00191ad:	83 c8 10             	or     eax,0x10
c00191b0:	0f 22 e0             	mov    cr4,eax
c00191b3:	c3                   	ret    

c00191b4 <CPU::setupPAT()>:
c00191b4:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00191b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00191c0:	74 2c                	je     c00191ee <CPU::setupPAT()+0x3a>
c00191c2:	53                   	push   ebx
c00191c3:	83 ec 10             	sub    esp,0x10
c00191c6:	68 77 02 00 00       	push   0x277
c00191cb:	50                   	push   eax
c00191cc:	e8 6f 59 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00191d1:	83 e2 f8             	and    edx,0xfffffff8
c00191d4:	83 ca 01             	or     edx,0x1
c00191d7:	52                   	push   edx
c00191d8:	50                   	push   eax
c00191d9:	68 77 02 00 00       	push   0x277
c00191de:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c00191e4:	e8 83 59 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00191e9:	83 c4 28             	add    esp,0x28
c00191ec:	5b                   	pop    ebx
c00191ed:	c3                   	ret    
c00191ee:	c3                   	ret    
c00191ef:	90                   	nop

c00191f0 <CPU::setupMTRR()>:
c00191f0:	c3                   	ret    
c00191f1:	90                   	nop

c00191f2 <CPU::setupGlobalPages()>:
c00191f2:	0f 20 e0             	mov    eax,cr4
c00191f5:	0c 80                	or     al,0x80
c00191f7:	0f 22 e0             	mov    cr4,eax
c00191fa:	c3                   	ret    
c00191fb:	90                   	nop

c00191fc <CPU::allowUsermodeDataAccess()>:
c00191fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019200:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019207:	74 03                	je     c001920c <CPU::allowUsermodeDataAccess()+0x10>
c0019209:	0f 01 cb             	stac   
c001920c:	c3                   	ret    
c001920d:	90                   	nop

c001920e <CPU::prohibitUsermodeDataAccess()>:
c001920e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019212:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019219:	74 03                	je     c001921e <CPU::prohibitUsermodeDataAccess()+0x10>
c001921b:	0f 01 ca             	clac   
c001921e:	c3                   	ret    
c001921f:	90                   	nop

c0019220 <CPU::setupSMAP()>:
c0019220:	0f 20 e0             	mov    eax,cr4
c0019223:	0d 00 00 20 00       	or     eax,0x200000
c0019228:	0f 22 e0             	mov    cr4,eax
c001922b:	eb e1                	jmp    c001920e <CPU::prohibitUsermodeDataAccess()>
c001922d:	90                   	nop

c001922e <CPU::setupFeatures()>:
c001922e:	83 ec 0c             	sub    esp,0xc
c0019231:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019235:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001923c:	74 07                	je     c0019245 <CPU::setupFeatures()+0x17>
c001923e:	52                   	push   edx
c001923f:	e8 46 ff ff ff       	call   c001918a <CPU::setupSMEP()>
c0019244:	58                   	pop    eax
c0019245:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001924c:	74 07                	je     c0019255 <CPU::setupFeatures()+0x27>
c001924e:	52                   	push   edx
c001924f:	e8 cc ff ff ff       	call   c0019220 <CPU::setupSMAP()>
c0019254:	58                   	pop    eax
c0019255:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001925c:	74 07                	je     c0019265 <CPU::setupFeatures()+0x37>
c001925e:	52                   	push   edx
c001925f:	e8 32 ff ff ff       	call   c0019196 <CPU::setupUMIP()>
c0019264:	58                   	pop    eax
c0019265:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001926c:	74 07                	je     c0019275 <CPU::setupFeatures()+0x47>
c001926e:	52                   	push   edx
c001926f:	e8 2c ff ff ff       	call   c00191a0 <CPU::setupTSC()>
c0019274:	58                   	pop    eax
c0019275:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001927c:	74 07                	je     c0019285 <CPU::setupFeatures()+0x57>
c001927e:	52                   	push   edx
c001927f:	e8 26 ff ff ff       	call   c00191aa <CPU::setupLargePages()>
c0019284:	59                   	pop    ecx
c0019285:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001928c:	74 07                	je     c0019295 <CPU::setupFeatures()+0x67>
c001928e:	52                   	push   edx
c001928f:	e8 5e ff ff ff       	call   c00191f2 <CPU::setupGlobalPages()>
c0019294:	58                   	pop    eax
c0019295:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001929c:	74 0c                	je     c00192aa <CPU::setupFeatures()+0x7c>
c001929e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192a2:	83 c4 0c             	add    esp,0xc
c00192a5:	e9 0a ff ff ff       	jmp    c00191b4 <CPU::setupPAT()>
c00192aa:	83 c4 0c             	add    esp,0xc
c00192ad:	c3                   	ret    

c00192ae <CPU::open(int, int, void*)>:
c00192ae:	57                   	push   edi
c00192af:	56                   	push   esi
c00192b0:	53                   	push   ebx
c00192b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00192b9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00192bf:	83 ec 0c             	sub    esp,0xc
c00192c2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00192c8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00192ce:	50                   	push   eax
c00192cf:	e8 5a 5b ff ff       	call   c000ee2e <GDT::setup()>
c00192d4:	83 c4 0c             	add    esp,0xc
c00192d7:	6a 00                	push   0x0
c00192d9:	68 ef be ad de       	push   0xdeadbeef
c00192de:	57                   	push   edi
c00192df:	e8 44 78 ff ff       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c00192e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00192e7:	e8 1c 78 ff ff       	call   c0010b08 <TSS::flush()>
c00192ec:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00192f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00192f5:	e8 98 5d ff ff       	call   c000f092 <IDT::setup()>
c00192fa:	b8 00 04 00 00       	mov    eax,0x400
c00192ff:	0f 23 f8             	mov    db7,eax
c0019302:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001930c:	e8 2f 66 ff ff       	call   c000f940 <Phys::allocatePage()>
c0019311:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019317:	89 30                	mov    DWORD PTR [eax],esi
c0019319:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001931f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019322:	58                   	pop    eax
c0019323:	5a                   	pop    edx
c0019324:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001932a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001932e:	e8 05 89 ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c0019333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019336:	e8 5d f4 ff ff       	call   c0018798 <CPU::detectFeatures()>
c001933b:	e8 36 bc ff ff       	call   c0014f76 <setupInterruptController()>
c0019340:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019346:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c001934b:	83 e0 10             	and    eax,0x10
c001934e:	83 f8 01             	cmp    eax,0x1
c0019351:	19 c0                	sbb    eax,eax
c0019353:	83 e0 46             	and    eax,0x46
c0019356:	83 c0 1e             	add    eax,0x1e
c0019359:	89 04 24             	mov    DWORD PTR [esp],eax
c001935c:	e8 02 d2 ff ff       	call   c0016563 <setupTimer(int)>
c0019361:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001936a:	e8 bf fe ff ff       	call   c001922e <CPU::setupFeatures()>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	31 c0                	xor    eax,eax
c0019374:	5b                   	pop    ebx
c0019375:	5e                   	pop    esi
c0019376:	5f                   	pop    edi
c0019377:	c3                   	ret    

c0019378 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019378:	57                   	push   edi
c0019379:	56                   	push   esi
c001937a:	53                   	push   ebx
c001937b:	51                   	push   ecx
c001937c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019380:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019383:	0f 02 c0             	lar    eax,ax
c0019386:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019389:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001938d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019390:	88 ca                	mov    dl,cl
c0019392:	c0 ea 06             	shr    dl,0x6
c0019395:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019399:	89 ca                	mov    edx,ecx
c001939b:	66 c1 ea 03          	shr    dx,0x3
c001939f:	83 e2 07             	and    edx,0x7
c00193a2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00193a7:	88 17                	mov    BYTE PTR [edi],dl
c00193a9:	0f 84 a6 01 00 00    	je     c0019555 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00193af:	83 e1 07             	and    ecx,0x7
c00193b2:	80 f9 04             	cmp    cl,0x4
c00193b5:	0f 84 98 00 00 00    	je     c0019453 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00193bb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193c0:	0f 95 c0             	setne  al
c00193c3:	80 f9 05             	cmp    cl,0x5
c00193c6:	0f 95 c2             	setne  dl
c00193c9:	08 c2                	or     dl,al
c00193cb:	74 79                	je     c0019446 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00193cd:	84 c9                	test   cl,cl
c00193cf:	75 05                	jne    c00193d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00193d1:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00193d4:	eb 3c                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193d6:	80 f9 01             	cmp    cl,0x1
c00193d9:	75 05                	jne    c00193e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00193db:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00193de:	eb 32                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193e0:	80 f9 02             	cmp    cl,0x2
c00193e3:	75 05                	jne    c00193ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00193e5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00193e8:	eb 28                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193ea:	31 c0                	xor    eax,eax
c00193ec:	80 f9 03             	cmp    cl,0x3
c00193ef:	75 05                	jne    c00193f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00193f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00193f4:	eb 1c                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193f6:	80 f9 05             	cmp    cl,0x5
c00193f9:	75 05                	jne    c0019400 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00193fb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00193fe:	eb 12                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019400:	80 f9 06             	cmp    cl,0x6
c0019403:	75 05                	jne    c001940a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019405:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019408:	eb 08                	jmp    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001940a:	80 f9 07             	cmp    cl,0x7
c001940d:	75 03                	jne    c0019412 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001940f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019412:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019417:	75 10                	jne    c0019429 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019419:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001941d:	b9 03 00 00 00       	mov    ecx,0x3
c0019422:	01 d0                	add    eax,edx
c0019424:	e9 37 01 00 00       	jmp    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019429:	b9 02 00 00 00       	mov    ecx,0x2
c001942e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019433:	0f 85 27 01 00 00    	jne    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019439:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001943c:	b9 06 00 00 00       	mov    ecx,0x6
c0019441:	e9 1a 01 00 00       	jmp    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019446:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019449:	b9 06 00 00 00       	mov    ecx,0x6
c001944e:	e9 0f 01 00 00       	jmp    c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019453:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019456:	88 ca                	mov    dl,cl
c0019458:	c0 ea 06             	shr    dl,0x6
c001945b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001945f:	89 ca                	mov    edx,ecx
c0019461:	66 c1 ea 03          	shr    dx,0x3
c0019465:	83 e2 07             	and    edx,0x7
c0019468:	80 e1 07             	and    cl,0x7
c001946b:	75 05                	jne    c0019472 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001946d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019470:	eb 4c                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019472:	80 f9 01             	cmp    cl,0x1
c0019475:	75 05                	jne    c001947c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019477:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001947a:	eb 42                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001947c:	80 f9 02             	cmp    cl,0x2
c001947f:	75 05                	jne    c0019486 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019481:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019484:	eb 38                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019486:	80 f9 03             	cmp    cl,0x3
c0019489:	75 05                	jne    c0019490 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001948b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001948e:	eb 2e                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019490:	80 f9 04             	cmp    cl,0x4
c0019493:	75 12                	jne    c00194a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019495:	f6 c4 60             	test   ah,0x60
c0019498:	75 08                	jne    c00194a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001949a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001949d:	8d 78 14             	lea    edi,[eax+0x14]
c00194a0:	eb 1c                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194a2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00194a5:	eb 17                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194a7:	80 f9 05             	cmp    cl,0x5
c00194aa:	75 05                	jne    c00194b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00194ac:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00194af:	eb 0d                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194b1:	80 f9 06             	cmp    cl,0x6
c00194b4:	75 05                	jne    c00194bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00194b6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00194b9:	eb 03                	jmp    c00194be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194bb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00194be:	84 d2                	test   dl,dl
c00194c0:	75 05                	jne    c00194c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00194c2:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194c5:	eb 3c                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194c7:	80 fa 01             	cmp    dl,0x1
c00194ca:	75 05                	jne    c00194d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00194cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194cf:	eb 32                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194d1:	80 fa 02             	cmp    dl,0x2
c00194d4:	75 05                	jne    c00194db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00194d6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194d9:	eb 28                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194db:	80 fa 03             	cmp    dl,0x3
c00194de:	75 05                	jne    c00194e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00194e0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194e3:	eb 1e                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194e5:	31 c0                	xor    eax,eax
c00194e7:	80 fa 04             	cmp    dl,0x4
c00194ea:	74 17                	je     c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194ec:	80 fa 05             	cmp    dl,0x5
c00194ef:	75 05                	jne    c00194f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00194f1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194f4:	eb 0d                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194f6:	80 fa 06             	cmp    dl,0x6
c00194f9:	75 05                	jne    c0019500 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00194fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194fe:	eb 03                	jmp    c0019503 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019500:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019503:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019508:	0f 94 c2             	sete   dl
c001950b:	80 f9 05             	cmp    cl,0x5
c001950e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019512:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019517:	d3 e0                	shl    eax,cl
c0019519:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001951d:	74 0a                	je     c0019529 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001951f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019522:	b9 07 00 00 00       	mov    ecx,0x7
c0019527:	eb 37                	jmp    c0019560 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019529:	01 f8                	add    eax,edi
c001952b:	b9 03 00 00 00       	mov    ecx,0x3
c0019530:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019535:	74 2b                	je     c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019537:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001953c:	75 0d                	jne    c001954b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001953e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019542:	01 c8                	add    eax,ecx
c0019544:	b9 04 00 00 00       	mov    ecx,0x4
c0019549:	eb 17                	jmp    c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001954b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001954e:	b9 07 00 00 00       	mov    ecx,0x7
c0019553:	eb 0d                	jmp    c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019555:	b9 02 00 00 00       	mov    ecx,0x2
c001955a:	b2 01                	mov    dl,0x1
c001955c:	31 c0                	xor    eax,eax
c001955e:	eb 02                	jmp    c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019560:	31 d2                	xor    edx,edx
c0019562:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019566:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019568:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001956c:	88 11                	mov    BYTE PTR [ecx],dl
c001956e:	5a                   	pop    edx
c001956f:	5b                   	pop    ebx
c0019570:	5e                   	pop    esi
c0019571:	5f                   	pop    edi
c0019572:	c3                   	ret    

c0019573 <Krnl::smpEntry()>:
c0019573:	eb fe                	jmp    c0019573 <Krnl::smpEntry()>

c0019575 <Krnl::startCPU(int)>:
c0019575:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001957a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019581:	0f 84 36 01 00 00    	je     c00196bd <Krnl::startCPU(int)+0x148>
c0019587:	53                   	push   ebx
c0019588:	83 ec 10             	sub    esp,0x10
c001958b:	fa                   	cli    
c001958c:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c0019592:	6a 1b                	push   0x1b
c0019594:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c001959a:	e8 a1 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001959f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00195a4:	89 c3                	mov    ebx,eax
c00195a6:	58                   	pop    eax
c00195a7:	5a                   	pop    edx
c00195a8:	53                   	push   ebx
c00195a9:	68 b4 b1 02 c0       	push   0xc002b1b4
c00195ae:	e8 72 8f ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00195b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195cb:	c1 e0 18             	shl    eax,0x18
c00195ce:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00195dd:	09 c2                	or     edx,eax
c00195df:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00195e5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00195eb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00195f1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00195f7:	80 cd c5             	or     ch,0xc5
c00195fa:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019600:	f3 90                	pause  
c0019602:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019604:	0f ba e1 0c          	bt     ecx,0xc
c0019608:	72 f6                	jb     c0019600 <Krnl::startCPU(int)+0x8b>
c001960a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019610:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019616:	09 c1                	or     ecx,eax
c0019618:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001961e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019624:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001962a:	80 cd 85             	or     ch,0x85
c001962d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019633:	f3 90                	pause  
c0019635:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019637:	0f ba e1 0c          	bt     ecx,0xc
c001963b:	72 f6                	jb     c0019633 <Krnl::startCPU(int)+0xbe>
c001963d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019647:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001964d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019653:	09 c1                	or     ecx,eax
c0019655:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001965b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019661:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019667:	81 c9 02 06 00 00    	or     ecx,0x602
c001966d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019673:	f3 90                	pause  
c0019675:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019677:	0f ba e1 0c          	bt     ecx,0xc
c001967b:	72 f6                	jb     c0019673 <Krnl::startCPU(int)+0xfe>
c001967d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019687:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001968d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019693:	09 c8                	or     eax,ecx
c0019695:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001969b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00196a1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00196a6:	0d 02 06 00 00       	or     eax,0x602
c00196ab:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00196b1:	f3 90                	pause  
c00196b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00196b5:	0f ba e0 0c          	bt     eax,0xc
c00196b9:	72 f6                	jb     c00196b1 <Krnl::startCPU(int)+0x13c>
c00196bb:	eb fe                	jmp    c00196bb <Krnl::startCPU(int)+0x146>
c00196bd:	c3                   	ret    

c00196be <Krnl::startCPUs()>:
c00196be:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00196c3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00196c9:	88 c2                	mov    dl,al
c00196cb:	83 e2 0a             	and    edx,0xa
c00196ce:	80 fa 0a             	cmp    dl,0xa
c00196d1:	75 09                	jne    c00196dc <Krnl::startCPUs()+0x1e>
c00196d3:	a8 01                	test   al,0x1
c00196d5:	74 05                	je     c00196dc <Krnl::startCPUs()+0x1e>
c00196d7:	e9 bf 6a fe ff       	jmp    c000019b <prepareTramp>
c00196dc:	c3                   	ret    
c00196dd:	90                   	nop

c00196de <EnvVarContainer::getEnv(char const*)>:
c00196de:	57                   	push   edi
c00196df:	56                   	push   esi
c00196e0:	53                   	push   ebx
c00196e1:	31 db                	xor    ebx,ebx
c00196e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196e7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00196e9:	7e 2b                	jle    c0019716 <EnvVarContainer::getEnv(char const*)+0x38>
c00196eb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00196f2:	50                   	push   eax
c00196f3:	50                   	push   eax
c00196f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00196fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00196fe:	e8 95 71 fe ff       	call   c0000898 <strcmp>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	85 c0                	test   eax,eax
c0019708:	75 09                	jne    c0019713 <EnvVarContainer::getEnv(char const*)+0x35>
c001970a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001970d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019711:	eb 05                	jmp    c0019718 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019713:	43                   	inc    ebx
c0019714:	eb d1                	jmp    c00196e7 <EnvVarContainer::getEnv(char const*)+0x9>
c0019716:	31 c0                	xor    eax,eax
c0019718:	5b                   	pop    ebx
c0019719:	5e                   	pop    esi
c001971a:	5f                   	pop    edi
c001971b:	c3                   	ret    

c001971c <EnvVarContainer::setEnv(char const*, char const*)>:
c001971c:	55                   	push   ebp
c001971d:	57                   	push   edi
c001971e:	56                   	push   esi
c001971f:	53                   	push   ebx
c0019720:	83 ec 28             	sub    esp,0x28
c0019723:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019727:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001972b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001972f:	56                   	push   esi
c0019730:	e8 37 70 fe ff       	call   c000076c <strlen>
c0019735:	40                   	inc    eax
c0019736:	89 04 24             	mov    DWORD PTR [esp],eax
c0019739:	e8 5e 5e ff ff       	call   c000f59c <malloc>
c001973e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019741:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019745:	e8 22 70 fe ff       	call   c000076c <strlen>
c001974a:	40                   	inc    eax
c001974b:	89 04 24             	mov    DWORD PTR [esp],eax
c001974e:	e8 49 5e ff ff       	call   c000f59c <malloc>
c0019753:	89 34 24             	mov    DWORD PTR [esp],esi
c0019756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001975a:	e8 0d 70 fe ff       	call   c000076c <strlen>
c001975f:	83 c4 0c             	add    esp,0xc
c0019762:	40                   	inc    eax
c0019763:	50                   	push   eax
c0019764:	6a 00                	push   0x0
c0019766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001976a:	e8 e1 6f fe ff       	call   c0000750 <memset>
c001976f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019772:	e8 f5 6f fe ff       	call   c000076c <strlen>
c0019777:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001977b:	8d 48 01             	lea    ecx,[eax+0x1]
c001977e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019780:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019783:	89 de                	mov    esi,ebx
c0019785:	e8 e2 6f fe ff       	call   c000076c <strlen>
c001978a:	83 c4 0c             	add    esp,0xc
c001978d:	40                   	inc    eax
c001978e:	50                   	push   eax
c001978f:	6a 00                	push   0x0
c0019791:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019795:	e8 b6 6f fe ff       	call   c0000750 <memset>
c001979a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001979d:	e8 ca 6f fe ff       	call   c000076c <strlen>
c00197a2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00197a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00197ae:	40                   	inc    eax
c00197af:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00197b2:	c1 e0 03             	shl    eax,0x3
c00197b5:	5a                   	pop    edx
c00197b6:	59                   	pop    ecx
c00197b7:	50                   	push   eax
c00197b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00197bb:	e8 c8 5d ff ff       	call   c000f588 <realloc>
c00197c0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00197c4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00197c7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00197ca:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00197ce:	b9 08 00 00 00       	mov    ecx,0x8
c00197d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197d5:	83 c4 2c             	add    esp,0x2c
c00197d8:	5b                   	pop    ebx
c00197d9:	5e                   	pop    esi
c00197da:	5f                   	pop    edi
c00197db:	5d                   	pop    ebp
c00197dc:	c3                   	ret    
c00197dd:	90                   	nop

c00197de <EnvVarContainer::deleteEnv(char const*)>:
c00197de:	c3                   	ret    
c00197df:	90                   	nop

c00197e0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00197e0:	55                   	push   ebp
c00197e1:	57                   	push   edi
c00197e2:	56                   	push   esi
c00197e3:	53                   	push   ebx
c00197e4:	81 ec 38 01 00 00    	sub    esp,0x138
c00197ea:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00197f1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00197f8:	68 14 01 00 00       	push   0x114
c00197fd:	e8 9a 5d ff ff       	call   c000f59c <malloc>
c0019802:	83 c4 0c             	add    esp,0xc
c0019805:	89 c3                	mov    ebx,eax
c0019807:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001980a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019811:	50                   	push   eax
c0019812:	e8 6d 92 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c0019817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001981a:	e8 37 95 ff ff       	call   c0012d56 <File::exists()>
c001981f:	83 c4 10             	add    esp,0x10
c0019822:	84 c0                	test   al,al
c0019824:	75 31                	jne    c0019857 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019826:	50                   	push   eax
c0019827:	50                   	push   eax
c0019828:	6a 12                	push   0x12
c001982a:	53                   	push   ebx
c001982b:	e8 b8 92 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c0019830:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019832:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019835:	89 34 24             	mov    DWORD PTR [esp],esi
c0019838:	e8 2f 6f fe ff       	call   c000076c <strlen>
c001983d:	5a                   	pop    edx
c001983e:	31 d2                	xor    edx,edx
c0019840:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019844:	51                   	push   ecx
c0019845:	56                   	push   esi
c0019846:	52                   	push   edx
c0019847:	50                   	push   eax
c0019848:	53                   	push   ebx
c0019849:	ff d7                	call   edi
c001984b:	83 c4 14             	add    esp,0x14
c001984e:	53                   	push   ebx
c001984f:	e8 f2 92 ff ff       	call   c0012b46 <File::close()>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	56                   	push   esi
c0019858:	31 f6                	xor    esi,esi
c001985a:	68 00 01 00 00       	push   0x100
c001985f:	6a 00                	push   0x0
c0019861:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019865:	50                   	push   eax
c0019866:	e8 e5 6e fe ff       	call   c0000750 <memset>
c001986b:	5f                   	pop    edi
c001986c:	58                   	pop    eax
c001986d:	6a 01                	push   0x1
c001986f:	53                   	push   ebx
c0019870:	e8 73 92 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019885:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019889:	51                   	push   ecx
c001988a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001988e:	52                   	push   edx
c001988f:	6a 00                	push   0x0
c0019891:	6a 01                	push   0x1
c0019893:	53                   	push   ebx
c0019894:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019897:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001989b:	83 c4 20             	add    esp,0x20
c001989e:	3c 0d                	cmp    al,0xd
c00198a0:	0f 84 09 01 00 00    	je     c00199af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00198a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00198ab:	0f 84 ef 00 00 00    	je     c00199a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198b1:	3c 0a                	cmp    al,0xa
c00198b3:	74 13                	je     c00198c8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198ba:	74 0c                	je     c00198c8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198bc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00198c2:	0f 8e d8 00 00 00    	jle    c00199a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	8d 78 01             	lea    edi,[eax+0x1]
c00198d2:	57                   	push   edi
c00198d3:	e8 c4 5c ff ff       	call   c000f59c <malloc>
c00198d8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00198dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00198e0:	8d 56 04             	lea    edx,[esi+0x4]
c00198e3:	89 14 24             	mov    DWORD PTR [esp],edx
c00198e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00198ea:	e8 ad 5c ff ff       	call   c000f59c <malloc>
c00198ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00198f3:	83 c4 0c             	add    esp,0xc
c00198f6:	57                   	push   edi
c00198f7:	6a 00                	push   0x0
c00198f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198fd:	e8 4e 6e fe ff       	call   c0000750 <memset>
c0019902:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019906:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001990a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001990e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019910:	83 c4 0c             	add    esp,0xc
c0019913:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019917:	52                   	push   edx
c0019918:	6a 00                	push   0x0
c001991a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001991e:	e8 2d 6e fe ff       	call   c0000750 <memset>
c0019923:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019927:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001992b:	89 34 24             	mov    DWORD PTR [esp],esi
c001992e:	e8 39 6e fe ff       	call   c000076c <strlen>
c0019933:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019937:	89 c1                	mov    ecx,eax
c0019939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001993b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001993e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019941:	40                   	inc    eax
c0019942:	83 c4 10             	add    esp,0x10
c0019945:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019948:	85 d2                	test   edx,edx
c001994a:	75 0c                	jne    c0019958 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001994c:	83 ec 0c             	sub    esp,0xc
c001994f:	6a 08                	push   0x8
c0019951:	e8 46 5c ff ff       	call   c000f59c <malloc>
c0019956:	eb 0c                	jmp    c0019964 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019958:	c1 e0 03             	shl    eax,0x3
c001995b:	51                   	push   ecx
c001995c:	51                   	push   ecx
c001995d:	50                   	push   eax
c001995e:	52                   	push   edx
c001995f:	e8 24 5c ff ff       	call   c000f588 <realloc>
c0019964:	83 c4 10             	add    esp,0x10
c0019967:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001996a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001996d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019970:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019974:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019978:	b9 08 00 00 00       	mov    ecx,0x8
c001997d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001997f:	31 f6                	xor    esi,esi
c0019981:	50                   	push   eax
c0019982:	68 00 01 00 00       	push   0x100
c0019987:	6a 00                	push   0x0
c0019989:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001998d:	50                   	push   eax
c001998e:	e8 bd 6d fe ff       	call   c0000750 <memset>
c0019993:	83 c4 10             	add    esp,0x10
c0019996:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001999e:	eb 0f                	jmp    c00199af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199a0:	3c 3d                	cmp    al,0x3d
c00199a2:	74 07                	je     c00199ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00199a4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00199a8:	46                   	inc    esi
c00199a9:	eb 04                	jmp    c00199af <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199ab:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00199af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199b4:	0f 85 c6 fe ff ff    	jne    c0019880 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00199ba:	81 c4 2c 01 00 00    	add    esp,0x12c
c00199c0:	5b                   	pop    ebx
c00199c1:	5e                   	pop    esi
c00199c2:	5f                   	pop    edi
c00199c3:	5d                   	pop    ebp
c00199c4:	c3                   	ret    
c00199c5:	90                   	nop

c00199c6 <EnvVarContainer::__loadSystem()>:
c00199c6:	83 ec 10             	sub    esp,0x10
c00199c9:	68 e0 ca 02 c0       	push   0xc002cae0
c00199ce:	68 c5 b1 02 c0       	push   0xc002b1c5
c00199d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199d7:	e8 04 fe ff ff       	call   c00197e0 <EnvVarContainer::loadFrom(char const*, char const*)>
c00199dc:	83 c4 1c             	add    esp,0x1c
c00199df:	c3                   	ret    

c00199e0 <EnvVarContainer::__loadUser()>:
c00199e0:	c3                   	ret    
c00199e1:	90                   	nop

c00199e2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00199e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00199f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a02:	90                   	nop
c0019a03:	c3                   	ret    

c0019a04 <EnvVarContainer::~EnvVarContainer()>:
c0019a04:	83 ec 0c             	sub    esp,0xc
c0019a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a0e:	85 c0                	test   eax,eax
c0019a10:	74 1d                	je     c0019a2f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a16:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a18:	85 c0                	test   eax,eax
c0019a1a:	74 13                	je     c0019a2f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a23:	83 ec 0c             	sub    esp,0xc
c0019a26:	50                   	push   eax
c0019a27:	e8 80 5b ff ff       	call   c000f5ac <free>
c0019a2c:	83 c4 10             	add    esp,0x10
c0019a2f:	90                   	nop
c0019a30:	83 c4 0c             	add    esp,0xc
c0019a33:	c3                   	ret    

c0019a34 <Krnl::getEnv(Process*, char const*)>:
c0019a34:	53                   	push   ebx
c0019a35:	83 ec 08             	sub    esp,0x8
c0019a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a40:	39 05 f0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030af0,eax
c0019a46:	74 04                	je     c0019a4c <Krnl::getEnv(Process*, char const*)+0x18>
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	75 0b                	jne    c0019a57 <Krnl::getEnv(Process*, char const*)+0x23>
c0019a4c:	a1 d4 00 03 c0       	mov    eax,ds:0xc00300d4
c0019a51:	85 c0                	test   eax,eax
c0019a53:	75 19                	jne    c0019a6e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a55:	eb 27                	jmp    c0019a7e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a57:	52                   	push   edx
c0019a58:	52                   	push   edx
c0019a59:	53                   	push   ebx
c0019a5a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a60:	e8 79 fc ff ff       	call   c00196de <EnvVarContainer::getEnv(char const*)>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	85 c0                	test   eax,eax
c0019a6a:	75 28                	jne    c0019a94 <Krnl::getEnv(Process*, char const*)+0x60>
c0019a6c:	eb de                	jmp    c0019a4c <Krnl::getEnv(Process*, char const*)+0x18>
c0019a6e:	52                   	push   edx
c0019a6f:	52                   	push   edx
c0019a70:	53                   	push   ebx
c0019a71:	50                   	push   eax
c0019a72:	e8 67 fc ff ff       	call   c00196de <EnvVarContainer::getEnv(char const*)>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	85 c0                	test   eax,eax
c0019a7c:	75 16                	jne    c0019a94 <Krnl::getEnv(Process*, char const*)+0x60>
c0019a7e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a82:	a1 d8 00 03 c0       	mov    eax,ds:0xc00300d8
c0019a87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a8b:	83 c4 08             	add    esp,0x8
c0019a8e:	5b                   	pop    ebx
c0019a8f:	e9 4a fc ff ff       	jmp    c00196de <EnvVarContainer::getEnv(char const*)>
c0019a94:	83 c4 08             	add    esp,0x8
c0019a97:	5b                   	pop    ebx
c0019a98:	c3                   	ret    

c0019a99 <Krnl::setEnvSystem(char const*, char const*)>:
c0019a99:	83 ec 10             	sub    esp,0x10
c0019a9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aa0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aa4:	ff 35 d8 00 03 c0    	push   DWORD PTR ds:0xc00300d8
c0019aaa:	e8 6d fc ff ff       	call   c001971c <EnvVarContainer::setEnv(char const*, char const*)>
c0019aaf:	83 c4 1c             	add    esp,0x1c
c0019ab2:	c3                   	ret    

c0019ab3 <Krnl::setEnvUser(char const*, char const*)>:
c0019ab3:	a1 d4 00 03 c0       	mov    eax,ds:0xc00300d4
c0019ab8:	85 c0                	test   eax,eax
c0019aba:	74 15                	je     c0019ad1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019abc:	83 ec 10             	sub    esp,0x10
c0019abf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ac3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ac7:	50                   	push   eax
c0019ac8:	e8 4f fc ff ff       	call   c001971c <EnvVarContainer::setEnv(char const*, char const*)>
c0019acd:	83 c4 1c             	add    esp,0x1c
c0019ad0:	c3                   	ret    
c0019ad1:	c3                   	ret    

c0019ad2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad6:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019adc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ae0:	e9 37 fc ff ff       	jmp    c001971c <EnvVarContainer::setEnv(char const*, char const*)>

c0019ae5 <Krnl::deleteEnvSystem(char const*)>:
c0019ae5:	c3                   	ret    

c0019ae6 <Krnl::deleteEnvUser(char const*)>:
c0019ae6:	c3                   	ret    

c0019ae7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019ae7:	c3                   	ret    

c0019ae8 <Krnl::newProcessEnv(Process*)>:
c0019ae8:	83 ec 28             	sub    esp,0x28
c0019aeb:	6a 0c                	push   0xc
c0019aed:	e8 aa 5a ff ff       	call   c000f59c <malloc>
c0019af2:	5a                   	pop    edx
c0019af3:	59                   	pop    ecx
c0019af4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af8:	50                   	push   eax
c0019af9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019afd:	e8 e0 fe ff ff       	call   c00199e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b06:	83 c4 2c             	add    esp,0x2c
c0019b09:	c3                   	ret    

c0019b0a <Krnl::copyProcessEnv(Process*, Process*)>:
c0019b0a:	57                   	push   edi
c0019b0b:	56                   	push   esi
c0019b0c:	53                   	push   ebx
c0019b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b11:	83 ec 0c             	sub    esp,0xc
c0019b14:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019b1a:	6a 0c                	push   0xc
c0019b1c:	e8 7b 5a ff ff       	call   c000f59c <malloc>
c0019b21:	89 c3                	mov    ebx,eax
c0019b23:	58                   	pop    eax
c0019b24:	5a                   	pop    edx
c0019b25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b29:	53                   	push   ebx
c0019b2a:	e8 b3 fe ff ff       	call   c00199e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b2f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019b31:	89 03                	mov    DWORD PTR [ebx],eax
c0019b33:	c1 e0 03             	shl    eax,0x3
c0019b36:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b39:	e8 5e 5a ff ff       	call   c000f59c <malloc>
c0019b3e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b41:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019b43:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019b46:	c1 e1 03             	shl    ecx,0x3
c0019b49:	89 c7                	mov    edi,eax
c0019b4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	89 d8                	mov    eax,ebx
c0019b52:	5b                   	pop    ebx
c0019b53:	5e                   	pop    esi
c0019b54:	5f                   	pop    edi
c0019b55:	c3                   	ret    

c0019b56 <Krnl::loadSystemEnv()>:
c0019b56:	53                   	push   ebx
c0019b57:	83 ec 14             	sub    esp,0x14
c0019b5a:	6a 0c                	push   0xc
c0019b5c:	e8 3b 5a ff ff       	call   c000f59c <malloc>
c0019b61:	89 c3                	mov    ebx,eax
c0019b63:	58                   	pop    eax
c0019b64:	5a                   	pop    edx
c0019b65:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c0019b6b:	53                   	push   ebx
c0019b6c:	e8 71 fe ff ff       	call   c00199e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b74:	89 1d d8 00 03 c0    	mov    DWORD PTR ds:0xc00300d8,ebx
c0019b7a:	e8 47 fe ff ff       	call   c00199c6 <EnvVarContainer::__loadSystem()>
c0019b7f:	83 c4 18             	add    esp,0x18
c0019b82:	5b                   	pop    ebx
c0019b83:	c3                   	ret    

c0019b84 <Krnl::loadUserEnv()>:
c0019b84:	53                   	push   ebx
c0019b85:	83 ec 14             	sub    esp,0x14
c0019b88:	6a 0c                	push   0xc
c0019b8a:	e8 0d 5a ff ff       	call   c000f59c <malloc>
c0019b8f:	89 c3                	mov    ebx,eax
c0019b91:	58                   	pop    eax
c0019b92:	5a                   	pop    edx
c0019b93:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c0019b99:	53                   	push   ebx
c0019b9a:	e8 43 fe ff ff       	call   c00199e2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b9f:	89 1d d4 00 03 c0    	mov    DWORD PTR ds:0xc00300d4,ebx
c0019ba5:	83 c4 18             	add    esp,0x18
c0019ba8:	5b                   	pop    ebx
c0019ba9:	c3                   	ret    

c0019baa <Krnl::flushEnv()>:
c0019baa:	c3                   	ret    

c0019bab <Krnl::getProcessTotalEnvCount(Process*)>:
c0019bab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019baf:	8b 15 d4 00 03 c0    	mov    edx,DWORD PTR ds:0xc00300d4
c0019bb5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bbb:	a1 d8 00 03 c0       	mov    eax,ds:0xc00300d8
c0019bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bc2:	03 01                	add    eax,DWORD PTR [ecx]
c0019bc4:	85 d2                	test   edx,edx
c0019bc6:	74 02                	je     c0019bca <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019bc8:	03 02                	add    eax,DWORD PTR [edx]
c0019bca:	c3                   	ret    

c0019bcb <Krnl::getProcessEnvPair(Process*, int)>:
c0019bcb:	57                   	push   edi
c0019bcc:	56                   	push   esi
c0019bcd:	8b 35 d4 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300d4
c0019bd3:	53                   	push   ebx
c0019bd4:	85 f6                	test   esi,esi
c0019bd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bde:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019be4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019be8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019bea:	75 16                	jne    c0019c02 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019bec:	39 c2                	cmp    edx,eax
c0019bee:	7c 16                	jl     c0019c06 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019bf0:	8b 0d d8 00 03 c0    	mov    ecx,DWORD PTR ds:0xc00300d8
c0019bf6:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019bf8:	01 c6                	add    esi,eax
c0019bfa:	39 d6                	cmp    esi,edx
c0019bfc:	7e 3c                	jle    c0019c3a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019bfe:	29 c2                	sub    edx,eax
c0019c00:	eb 04                	jmp    c0019c06 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c02:	39 c2                	cmp    edx,eax
c0019c04:	7d 05                	jge    c0019c0b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019c06:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c09:	eb 20                	jmp    c0019c2b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019c0b:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019c0d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019c10:	39 d1                	cmp    ecx,edx
c0019c12:	7e 04                	jle    c0019c18 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019c14:	29 c2                	sub    edx,eax
c0019c16:	eb 10                	jmp    c0019c28 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019c18:	8b 35 d8 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300d8
c0019c1e:	03 0e                	add    ecx,DWORD PTR [esi]
c0019c20:	39 d1                	cmp    ecx,edx
c0019c22:	7e 16                	jle    c0019c3a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c24:	29 c2                	sub    edx,eax
c0019c26:	29 fa                	sub    edx,edi
c0019c28:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c2b:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019c2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c30:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019c33:	89 03                	mov    DWORD PTR [ebx],eax
c0019c35:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019c38:	eb 1d                	jmp    c0019c57 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019c3a:	83 ec 0c             	sub    esp,0xc
c0019c3d:	68 e7 b1 02 c0       	push   0xc002b1e7
c0019c42:	e8 18 00 00 00       	call   c0019c5f <Krnl::panic(char const*)>
c0019c47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c54:	83 c4 10             	add    esp,0x10
c0019c57:	89 d8                	mov    eax,ebx
c0019c59:	5b                   	pop    ebx
c0019c5a:	5e                   	pop    esi
c0019c5b:	5f                   	pop    edi
c0019c5c:	c2 04 00             	ret    0x4

c0019c5f <Krnl::panic(char const*)>:
c0019c5f:	55                   	push   ebp
c0019c60:	89 e5                	mov    ebp,esp
c0019c62:	53                   	push   ebx
c0019c63:	83 ec 10             	sub    esp,0x10
c0019c66:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c69:	fa                   	cli    
c0019c6a:	c6 05 e4 00 03 c0 01 	mov    BYTE PTR ds:0xc00300e4,0x1
c0019c71:	53                   	push   ebx
c0019c72:	e8 7f 59 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019c77:	58                   	pop    eax
c0019c78:	c6 05 e0 c4 02 c0 00 	mov    BYTE PTR ds:0xc002c4e0,0x0
c0019c7f:	5a                   	pop    edx
c0019c80:	53                   	push   ebx
c0019c81:	68 01 b2 02 c0       	push   0xc002b201
c0019c86:	e8 9a 88 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0019c8b:	59                   	pop    ecx
c0019c8c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019c91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c97:	e8 3b 66 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c0019c9c:	83 c4 0c             	add    esp,0xc
c0019c9f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ca4:	6a 01                	push   0x1
c0019ca6:	6a 0f                	push   0xf
c0019ca8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cae:	e8 83 64 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019cb3:	58                   	pop    eax
c0019cb4:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cbf:	e8 94 69 ff ff       	call   c0010658 <VgaText::clearScreen()>
c0019cc4:	58                   	pop    eax
c0019cc5:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cca:	5a                   	pop    edx
c0019ccb:	68 1a b2 02 c0       	push   0xc002b21a
c0019cd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd6:	e8 09 6b ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cdb:	59                   	pop    ecx
c0019cdc:	58                   	pop    eax
c0019cdd:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ce2:	68 c0 b2 02 c0       	push   0xc002b2c0
c0019ce7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ced:	e8 f2 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cf2:	58                   	pop    eax
c0019cf3:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cf8:	5a                   	pop    edx
c0019cf9:	68 36 b2 02 c0       	push   0xc002b236
c0019cfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d04:	e8 db 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d09:	59                   	pop    ecx
c0019d0a:	58                   	pop    eax
c0019d0b:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d10:	53                   	push   ebx
c0019d11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d17:	e8 c8 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d1c:	58                   	pop    eax
c0019d1d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d22:	5a                   	pop    edx
c0019d23:	68 56 b2 02 c0       	push   0xc002b256
c0019d28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d2e:	e8 b1 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d33:	a1 e0 00 03 c0       	mov    eax,ds:0xc00300e0
c0019d38:	83 c4 10             	add    esp,0x10
c0019d3b:	85 c0                	test   eax,eax
c0019d3d:	74 02                	je     c0019d41 <Krnl::panic(char const*)+0xe2>
c0019d3f:	ff d0                	call   eax
c0019d41:	83 ec 0c             	sub    esp,0xc
c0019d44:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d47:	e8 8c 30 00 00       	call   c001cdd8 <Thr::getDriverNameFromAddress(unsigned long)>
c0019d4c:	83 c4 10             	add    esp,0x10
c0019d4f:	89 c3                	mov    ebx,eax
c0019d51:	85 c0                	test   eax,eax
c0019d53:	0f 84 4e 02 00 00    	je     c0019fa7 <Krnl::panic(char const*)+0x348>
c0019d59:	83 ec 08             	sub    esp,0x8
c0019d5c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d61:	68 fc b2 02 c0       	push   0xc002b2fc
c0019d66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d6c:	e8 73 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d71:	58                   	pop    eax
c0019d72:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d77:	5a                   	pop    edx
c0019d78:	68 36 b2 02 c0       	push   0xc002b236
c0019d7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d83:	e8 5c 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d88:	59                   	pop    ecx
c0019d89:	58                   	pop    eax
c0019d8a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d8f:	53                   	push   ebx
c0019d90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d96:	e8 49 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	83 ec 08             	sub    esp,0x8
c0019da1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019da6:	68 55 b2 02 c0       	push   0xc002b255
c0019dab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db1:	e8 2e 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019db6:	58                   	pop    eax
c0019db7:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019dbc:	5a                   	pop    edx
c0019dbd:	68 54 b3 02 c0       	push   0xc002b354
c0019dc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc8:	e8 17 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019dcd:	59                   	pop    ecx
c0019dce:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019dd3:	5b                   	pop    ebx
c0019dd4:	68 94 b3 02 c0       	push   0xc002b394
c0019dd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ddf:	e8 00 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019de4:	58                   	pop    eax
c0019de5:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019dea:	5a                   	pop    edx
c0019deb:	68 41 b2 02 c0       	push   0xc002b241
c0019df0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019df6:	e8 e9 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019dfb:	59                   	pop    ecx
c0019dfc:	5b                   	pop    ebx
c0019dfd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e00:	68 59 b2 02 c0       	push   0xc002b259
c0019e05:	e8 1b 87 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0019e0a:	58                   	pop    eax
c0019e0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e0e:	5a                   	pop    edx
c0019e0f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e12:	68 62 b2 02 c0       	push   0xc002b262
c0019e17:	e8 09 87 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0019e1c:	59                   	pop    ecx
c0019e1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e20:	5b                   	pop    ebx
c0019e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e23:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e26:	68 6b b2 02 c0       	push   0xc002b26b
c0019e2b:	e8 f5 86 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0019e30:	58                   	pop    eax
c0019e31:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e36:	5a                   	pop    edx
c0019e37:	68 d8 b3 02 c0       	push   0xc002b3d8
c0019e3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e42:	e8 9d 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e47:	59                   	pop    ecx
c0019e48:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e4d:	5b                   	pop    ebx
c0019e4e:	68 74 b2 02 c0       	push   0xc002b274
c0019e53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e59:	e8 86 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e5e:	0f 20 c0             	mov    eax,cr0
c0019e61:	5a                   	pop    edx
c0019e62:	59                   	pop    ecx
c0019e63:	50                   	push   eax
c0019e64:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6f:	e8 2a 69 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019e74:	5b                   	pop    ebx
c0019e75:	58                   	pop    eax
c0019e76:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e7b:	68 7e b2 02 c0       	push   0xc002b27e
c0019e80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e86:	e8 59 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e8b:	0f 20 d0             	mov    eax,cr2
c0019e8e:	5a                   	pop    edx
c0019e8f:	59                   	pop    ecx
c0019e90:	50                   	push   eax
c0019e91:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e9c:	e8 fd 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019ea1:	5b                   	pop    ebx
c0019ea2:	58                   	pop    eax
c0019ea3:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ea8:	68 88 b2 02 c0       	push   0xc002b288
c0019ead:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb3:	e8 2c 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019eb8:	0f 20 d8             	mov    eax,cr3
c0019ebb:	5a                   	pop    edx
c0019ebc:	59                   	pop    ecx
c0019ebd:	50                   	push   eax
c0019ebe:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ec3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec9:	e8 d0 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019ece:	5b                   	pop    ebx
c0019ecf:	58                   	pop    eax
c0019ed0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ed5:	68 9b b2 02 c0       	push   0xc002b29b
c0019eda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee0:	e8 ff 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ee5:	0f 20 e0             	mov    eax,cr4
c0019ee8:	5a                   	pop    edx
c0019ee9:	59                   	pop    ecx
c0019eea:	50                   	push   eax
c0019eeb:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ef0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ef6:	e8 a3 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019efb:	5b                   	pop    ebx
c0019efc:	58                   	pop    eax
c0019efd:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f02:	68 a5 b2 02 c0       	push   0xc002b2a5
c0019f07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f0d:	e8 d2 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f12:	5a                   	pop    edx
c0019f13:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f18:	59                   	pop    ecx
c0019f19:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f22:	50                   	push   eax
c0019f23:	e8 76 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f28:	5b                   	pop    ebx
c0019f29:	58                   	pop    eax
c0019f2a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f2f:	68 bc b2 02 c0       	push   0xc002b2bc
c0019f34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3a:	e8 a5 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f3f:	5a                   	pop    edx
c0019f40:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f45:	59                   	pop    ecx
c0019f46:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f4c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f4f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f52:	50                   	push   eax
c0019f53:	e8 46 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f58:	5b                   	pop    ebx
c0019f59:	58                   	pop    eax
c0019f5a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f5f:	68 bc b2 02 c0       	push   0xc002b2bc
c0019f64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6a:	e8 75 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f6f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f74:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f77:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f7d:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f7f:	59                   	pop    ecx
c0019f80:	5b                   	pop    ebx
c0019f81:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f84:	50                   	push   eax
c0019f85:	e8 14 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f8a:	83 c4 10             	add    esp,0x10
c0019f8d:	b2 fe                	mov    dl,0xfe
c0019f8f:	e4 60                	in     al,0x60
c0019f91:	3c 1c                	cmp    al,0x1c
c0019f93:	74 04                	je     c0019f99 <Krnl::panic(char const*)+0x33a>
c0019f95:	3c 5a                	cmp    al,0x5a
c0019f97:	75 f6                	jne    c0019f8f <Krnl::panic(char const*)+0x330>
c0019f99:	e4 64                	in     al,0x64
c0019f9b:	a8 02                	test   al,0x2
c0019f9d:	75 fa                	jne    c0019f99 <Krnl::panic(char const*)+0x33a>
c0019f9f:	88 d0                	mov    al,dl
c0019fa1:	e6 64                	out    0x64,al
c0019fa3:	fa                   	cli    
c0019fa4:	f4                   	hlt    
c0019fa5:	eb e8                	jmp    c0019f8f <Krnl::panic(char const*)+0x330>
c0019fa7:	50                   	push   eax
c0019fa8:	50                   	push   eax
c0019fa9:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019fae:	68 28 b3 02 c0       	push   0xc002b328
c0019fb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb9:	e8 26 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fbe:	58                   	pop    eax
c0019fbf:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019fc4:	5a                   	pop    edx
c0019fc5:	68 36 b2 02 c0       	push   0xc002b236
c0019fca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd0:	e8 0f 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fd5:	59                   	pop    ecx
c0019fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fdb:	5b                   	pop    ebx
c0019fdc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019fdf:	83 c0 0c             	add    eax,0xc
c0019fe2:	50                   	push   eax
c0019fe3:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019fe8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fee:	e8 f1 67 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	e9 a3 fd ff ff       	jmp    c0019d9e <Krnl::panic(char const*)+0x13f>

c0019ffb <Net::switchEndian16(unsigned short)>:
c0019ffb:	83 ec 04             	sub    esp,0x4
c0019ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a002:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a006:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a00a:	c1 f8 08             	sar    eax,0x8
c001a00d:	89 c2                	mov    edx,eax
c001a00f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a013:	c1 e0 08             	shl    eax,0x8
c001a016:	09 d0                	or     eax,edx
c001a018:	83 c4 04             	add    esp,0x4
c001a01b:	c3                   	ret    

c001a01c <Net::switchEndian32(unsigned int)>:
c001a01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a020:	c1 e8 18             	shr    eax,0x18
c001a023:	89 c2                	mov    edx,eax
c001a025:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a029:	c1 e0 08             	shl    eax,0x8
c001a02c:	25 00 00 ff 00       	and    eax,0xff0000
c001a031:	09 c2                	or     edx,eax
c001a033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a037:	c1 e8 08             	shr    eax,0x8
c001a03a:	25 00 ff 00 00       	and    eax,0xff00
c001a03f:	09 c2                	or     edx,eax
c001a041:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a045:	c1 e0 18             	shl    eax,0x18
c001a048:	09 d0                	or     eax,edx
c001a04a:	c3                   	ret    

c001a04b <Net::crc32Calc(unsigned char*, int)>:
c001a04b:	83 ec 10             	sub    esp,0x10
c001a04e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a053:	75 07                	jne    c001a05c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a055:	b8 00 00 00 00       	mov    eax,0x0
c001a05a:	eb 7c                	jmp    c001a0d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a05c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a061:	7f 07                	jg     c001a06a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a063:	b8 00 00 00 00       	mov    eax,0x0
c001a068:	eb 6e                	jmp    c001a0d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a06a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a072:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a07a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a07e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a082:	7d 4e                	jge    c001a0d2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a088:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a08c:	01 d0                	add    eax,edx
c001a08e:	8a 00                	mov    al,BYTE PTR [eax]
c001a090:	0f b6 c0             	movzx  eax,al
c001a093:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a09f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a0a4:	7f 26                	jg     c001a0cc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a0a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0aa:	83 e0 01             	and    eax,0x1
c001a0ad:	74 0d                	je     c001a0bc <Net::crc32Calc(unsigned char*, int)+0x71>
c001a0af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b3:	d1 e8                	shr    eax,1
c001a0b5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a0ba:	eb 06                	jmp    c001a0c2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c0:	d1 e8                	shr    eax,1
c001a0c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0ca:	eb d3                	jmp    c001a09f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a0cc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a0d0:	eb a8                	jmp    c001a07a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a0d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0d6:	f7 d0                	not    eax
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	c3                   	ret    

c001a0dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a0dc:	57                   	push   edi
c001a0dd:	56                   	push   esi
c001a0de:	53                   	push   ebx
c001a0df:	83 ec 60             	sub    esp,0x60
c001a0e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0e9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a0ed:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a0f5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a0fa:	7f 1a                	jg     c001a116 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a0fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a103:	8d 50 01             	lea    edx,[eax+0x1]
c001a106:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a10d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a110:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a114:	eb df                	jmp    c001a0f5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a116:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a11d:	8d 50 01             	lea    edx,[eax+0x1]
c001a120:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a127:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a12a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a131:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a135:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a139:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a13d:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a145:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a149:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a14d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a151:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a155:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a159:	89 c6                	mov    esi,eax
c001a15b:	89 d7                	mov    edi,edx
c001a15d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a15f:	89 c8                	mov    eax,ecx
c001a161:	89 fa                	mov    edx,edi
c001a163:	89 f3                	mov    ebx,esi
c001a165:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a169:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a16d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a170:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a178:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a17f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a183:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a187:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a18b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a193:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a19b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a19f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a1a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a1a7:	89 c6                	mov    esi,eax
c001a1a9:	89 d7                	mov    edi,edx
c001a1ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1ad:	89 c8                	mov    eax,ecx
c001a1af:	89 fa                	mov    edx,edi
c001a1b1:	89 f3                	mov    ebx,esi
c001a1b3:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a1b7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a1bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1bf:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1c7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a1ce:	0f b7 c0             	movzx  eax,ax
c001a1d1:	c1 f8 08             	sar    eax,0x8
c001a1d4:	89 c1                	mov    ecx,eax
c001a1d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a1e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1e7:	88 ca                	mov    dl,cl
c001a1e9:	88 10                	mov    BYTE PTR [eax],dl
c001a1eb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a1f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1f9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a1fc:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a203:	88 10                	mov    BYTE PTR [eax],dl
c001a205:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a209:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a20d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a214:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a218:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a21c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a220:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a224:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a228:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a22c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a230:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a234:	89 c6                	mov    esi,eax
c001a236:	89 d7                	mov    edi,edx
c001a238:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a23a:	89 c8                	mov    eax,ecx
c001a23c:	89 fa                	mov    edx,edi
c001a23e:	89 f3                	mov    ebx,esi
c001a240:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a244:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a248:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a24c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a250:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a257:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a25e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a262:	50                   	push   eax
c001a263:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a267:	e8 df fd ff ff       	call   c001a04b <Net::crc32Calc(unsigned char*, int)>
c001a26c:	83 c4 08             	add    esp,0x8
c001a26f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a273:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a277:	c1 e8 18             	shr    eax,0x18
c001a27a:	89 c1                	mov    ecx,eax
c001a27c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a283:	8d 50 01             	lea    edx,[eax+0x1]
c001a286:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a28d:	88 ca                	mov    dl,cl
c001a28f:	88 10                	mov    BYTE PTR [eax],dl
c001a291:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a295:	c1 e8 10             	shr    eax,0x10
c001a298:	89 c1                	mov    ecx,eax
c001a29a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2a1:	8d 50 01             	lea    edx,[eax+0x1]
c001a2a4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2ab:	88 ca                	mov    dl,cl
c001a2ad:	88 10                	mov    BYTE PTR [eax],dl
c001a2af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2b3:	c1 e8 08             	shr    eax,0x8
c001a2b6:	89 c1                	mov    ecx,eax
c001a2b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2bf:	8d 50 01             	lea    edx,[eax+0x1]
c001a2c2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2c9:	88 ca                	mov    dl,cl
c001a2cb:	88 10                	mov    BYTE PTR [eax],dl
c001a2cd:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a2d7:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2de:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a2e2:	88 10                	mov    BYTE PTR [eax],dl
c001a2e4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2e8:	83 c4 60             	add    esp,0x60
c001a2eb:	5b                   	pop    ebx
c001a2ec:	5e                   	pop    esi
c001a2ed:	5f                   	pop    edi
c001a2ee:	c3                   	ret    

c001a2ef <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a2ef:	57                   	push   edi
c001a2f0:	56                   	push   esi
c001a2f1:	53                   	push   ebx
c001a2f2:	83 ec 70             	sub    esp,0x70
c001a2f5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a2fc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a300:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a308:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a30f:	83 c0 0e             	add    eax,0xe
c001a312:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a316:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a31d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a321:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a329:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a32d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a335:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a339:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a33d:	89 c6                	mov    esi,eax
c001a33f:	89 d7                	mov    edi,edx
c001a341:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a343:	89 c8                	mov    eax,ecx
c001a345:	89 fa                	mov    edx,edi
c001a347:	89 f3                	mov    ebx,esi
c001a349:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a34d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a355:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a35d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a364:	83 c0 08             	add    eax,0x8
c001a367:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a36b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a372:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a376:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a37e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a382:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a386:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a38a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a38e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a392:	89 c6                	mov    esi,eax
c001a394:	89 d7                	mov    edi,edx
c001a396:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a398:	89 c8                	mov    eax,ecx
c001a39a:	89 fa                	mov    edx,edi
c001a39c:	89 f3                	mov    ebx,esi
c001a39e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a3a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a3aa:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a3b2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3b9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3c3:	8a 00                	mov    al,BYTE PTR [eax]
c001a3c5:	0f b6 c0             	movzx  eax,al
c001a3c8:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a3cd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a3d7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3de:	8a 00                	mov    al,BYTE PTR [eax]
c001a3e0:	0f b6 c0             	movzx  eax,al
c001a3e3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a3e8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a3ed:	c1 e0 08             	shl    eax,0x8
c001a3f0:	89 c2                	mov    edx,eax
c001a3f2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a3f6:	09 d0                	or     eax,edx
c001a3f8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a3ff:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a403:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a40b:	75 46                	jne    c001a453 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a40d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a414:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a417:	66 3d dc 05          	cmp    ax,0x5dc
c001a41b:	77 16                	ja     c001a433 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a41d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a424:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a427:	0f b7 c0             	movzx  eax,ax
c001a42a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a431:	eb 20                	jmp    c001a453 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a433:	83 ec 0c             	sub    esp,0xc
c001a436:	68 00 b4 02 c0       	push   0xc002b400
c001a43b:	e8 e5 80 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001a440:	83 c4 10             	add    esp,0x10
c001a443:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a44a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a44e:	e9 17 01 00 00       	jmp    c001a56a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a453:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a45a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a461:	8b 12                	mov    edx,DWORD PTR [edx]
c001a463:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a467:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a46e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a472:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a47a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a47e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a486:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a48a:	89 c6                	mov    esi,eax
c001a48c:	89 d7                	mov    edi,edx
c001a48e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a490:	89 c8                	mov    eax,ecx
c001a492:	89 fa                	mov    edx,edi
c001a494:	89 f3                	mov    ebx,esi
c001a496:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a49a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a49e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4a1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4a8:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a4af:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4b6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4b9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a4c2:	0f b6 c0             	movzx  eax,al
c001a4c5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a4c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4d0:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4da:	8a 00                	mov    al,BYTE PTR [eax]
c001a4dc:	0f b6 c0             	movzx  eax,al
c001a4df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a4e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4f4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4f6:	0f b6 c0             	movzx  eax,al
c001a4f9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a4fd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a504:	8d 50 01             	lea    edx,[eax+0x1]
c001a507:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a50e:	8a 00                	mov    al,BYTE PTR [eax]
c001a510:	0f b6 c0             	movzx  eax,al
c001a513:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a517:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a51b:	c1 e0 18             	shl    eax,0x18
c001a51e:	89 c2                	mov    edx,eax
c001a520:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a524:	c1 e0 10             	shl    eax,0x10
c001a527:	09 c2                	or     edx,eax
c001a529:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a52d:	c1 e0 08             	shl    eax,0x8
c001a530:	09 d0                	or     eax,edx
c001a532:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a536:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a53a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a541:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a545:	83 e8 04             	sub    eax,0x4
c001a548:	83 ec 08             	sub    esp,0x8
c001a54b:	50                   	push   eax
c001a54c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a550:	e8 f6 fa ff ff       	call   c001a04b <Net::crc32Calc(unsigned char*, int)>
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a55c:	0f 94 c2             	sete   dl
c001a55f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a566:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a569:	90                   	nop
c001a56a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a571:	83 c4 70             	add    esp,0x70
c001a574:	5b                   	pop    ebx
c001a575:	5e                   	pop    esi
c001a576:	5f                   	pop    edi
c001a577:	c2 04 00             	ret    0x4

c001a57a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a57a:	55                   	push   ebp
c001a57b:	57                   	push   edi
c001a57c:	56                   	push   esi
c001a57d:	53                   	push   ebx
c001a57e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a584:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a58b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a58d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a590:	80 fb 40             	cmp    bl,0x40
c001a593:	75 1b                	jne    c001a5b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a595:	8a 16                	mov    dl,BYTE PTR [esi]
c001a597:	84 d2                	test   dl,dl
c001a599:	0f 84 f1 00 00 00    	je     c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a59f:	8d 46 01             	lea    eax,[esi+0x1]
c001a5a2:	80 fa 3a             	cmp    dl,0x3a
c001a5a5:	74 04                	je     c001a5ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5a7:	89 c6                	mov    esi,eax
c001a5a9:	eb ea                	jmp    c001a595 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5ae:	89 c6                	mov    esi,eax
c001a5b0:	50                   	push   eax
c001a5b1:	6a 40                	push   0x40
c001a5b3:	6a 00                	push   0x0
c001a5b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5b9:	50                   	push   eax
c001a5ba:	e8 91 61 fe ff       	call   c0000750 <memset>
c001a5bf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5c6:	31 c0                	xor    eax,eax
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a5cd:	84 c9                	test   cl,cl
c001a5cf:	0f 84 bb 00 00 00    	je     c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5d5:	3d c7 00 00 00       	cmp    eax,0xc7
c001a5da:	0f 8f b0 00 00 00    	jg     c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5e0:	80 f9 0a             	cmp    cl,0xa
c001a5e3:	0f 85 98 00 00 00    	jne    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a5e9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a5ee:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a5f2:	a8 df                	test   al,0xdf
c001a5f4:	0f 94 c1             	sete   cl
c001a5f7:	3c 23                	cmp    al,0x23
c001a5f9:	0f 94 c2             	sete   dl
c001a5fc:	08 d1                	or     cl,dl
c001a5fe:	75 4a                	jne    c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a600:	8d 50 f7             	lea    edx,[eax-0x9]
c001a603:	80 fa 01             	cmp    dl,0x1
c001a606:	76 42                	jbe    c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a608:	3c 5b                	cmp    al,0x5b
c001a60a:	75 42                	jne    c001a64e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a60c:	80 fb 40             	cmp    bl,0x40
c001a60f:	75 39                	jne    c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a611:	83 ec 0c             	sub    esp,0xc
c001a614:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a618:	52                   	push   edx
c001a619:	e8 4e 61 fe ff       	call   c000076c <strlen>
c001a61e:	83 c4 10             	add    esp,0x10
c001a621:	83 f8 3f             	cmp    eax,0x3f
c001a624:	77 6a                	ja     c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a626:	50                   	push   eax
c001a627:	50                   	push   eax
c001a628:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a62c:	52                   	push   edx
c001a62d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a631:	52                   	push   edx
c001a632:	e8 d5 61 fe ff       	call   c000080c <strcpy>
c001a637:	58                   	pop    eax
c001a638:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a63c:	52                   	push   edx
c001a63d:	e8 2a 61 fe ff       	call   c000076c <strlen>
c001a642:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a647:	83 c4 10             	add    esp,0x10
c001a64a:	31 d2                	xor    edx,edx
c001a64c:	eb 3a                	jmp    c001a688 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a64e:	80 fb 40             	cmp    bl,0x40
c001a651:	74 06                	je     c001a659 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a653:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a657:	eb 20                	jmp    c001a679 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a659:	50                   	push   eax
c001a65a:	50                   	push   eax
c001a65b:	55                   	push   ebp
c001a65c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a660:	50                   	push   eax
c001a661:	e8 32 62 fe ff       	call   c0000898 <strcmp>
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	85 c0                	test   eax,eax
c001a66b:	75 dd                	jne    c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a66d:	eb e4                	jmp    c001a653 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a66f:	8d 50 01             	lea    edx,[eax+0x1]
c001a672:	80 f9 3d             	cmp    cl,0x3d
c001a675:	74 1d                	je     c001a694 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a677:	89 d0                	mov    eax,edx
c001a679:	8a 08                	mov    cl,BYTE PTR [eax]
c001a67b:	84 c9                	test   cl,cl
c001a67d:	75 f0                	jne    c001a66f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a67f:	eb 0f                	jmp    c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a681:	8d 50 01             	lea    edx,[eax+0x1]
c001a684:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a688:	47                   	inc    edi
c001a689:	89 d0                	mov    eax,edx
c001a68b:	e9 3b ff ff ff       	jmp    c001a5cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a690:	31 c0                	xor    eax,eax
c001a692:	eb 33                	jmp    c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a694:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a698:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a69b:	50                   	push   eax
c001a69c:	50                   	push   eax
c001a69d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6a1:	50                   	push   eax
c001a6a2:	56                   	push   esi
c001a6a3:	e8 f0 61 fe ff       	call   c0000898 <strcmp>
c001a6a8:	83 c4 10             	add    esp,0x10
c001a6ab:	85 c0                	test   eax,eax
c001a6ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6b1:	75 97                	jne    c001a64a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6b3:	51                   	push   ecx
c001a6b4:	51                   	push   ecx
c001a6b5:	52                   	push   edx
c001a6b6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6bd:	e8 4a 61 fe ff       	call   c000080c <strcpy>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	b0 01                	mov    al,0x1
c001a6c7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a6cd:	5b                   	pop    ebx
c001a6ce:	5e                   	pop    esi
c001a6cf:	5f                   	pop    edi
c001a6d0:	5d                   	pop    ebp
c001a6d1:	c3                   	ret    

c001a6d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a6d2:	57                   	push   edi
c001a6d3:	56                   	push   esi
c001a6d4:	53                   	push   ebx
c001a6d5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a6db:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a6e2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6e9:	53                   	push   ebx
c001a6ea:	e8 7d 60 fe ff       	call   c000076c <strlen>
c001a6ef:	89 34 24             	mov    DWORD PTR [esp],esi
c001a6f2:	89 c7                	mov    edi,eax
c001a6f4:	e8 73 60 fe ff       	call   c000076c <strlen>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a700:	3d ff 00 00 00       	cmp    eax,0xff
c001a705:	0f 87 d3 00 00 00    	ja     c001a7de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a70b:	57                   	push   edi
c001a70c:	57                   	push   edi
c001a70d:	56                   	push   esi
c001a70e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a712:	56                   	push   esi
c001a713:	e8 f4 60 fe ff       	call   c000080c <strcpy>
c001a718:	58                   	pop    eax
c001a719:	5a                   	pop    edx
c001a71a:	68 a2 b7 02 c0       	push   0xc002b7a2
c001a71f:	56                   	push   esi
c001a720:	e8 27 62 fe ff       	call   c000094c <strcat>
c001a725:	59                   	pop    ecx
c001a726:	5f                   	pop    edi
c001a727:	53                   	push   ebx
c001a728:	56                   	push   esi
c001a729:	e8 1e 62 fe ff       	call   c000094c <strcat>
c001a72e:	58                   	pop    eax
c001a72f:	5a                   	pop    edx
c001a730:	68 4c b4 02 c0       	push   0xc002b44c
c001a735:	56                   	push   esi
c001a736:	e8 11 62 fe ff       	call   c000094c <strcat>
c001a73b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a742:	e8 55 4e ff ff       	call   c000f59c <malloc>
c001a747:	83 c4 0c             	add    esp,0xc
c001a74a:	89 c3                	mov    ebx,eax
c001a74c:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001a752:	56                   	push   esi
c001a753:	50                   	push   eax
c001a754:	e8 2b 83 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	85 db                	test   ebx,ebx
c001a75e:	74 7e                	je     c001a7de <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a760:	51                   	push   ecx
c001a761:	51                   	push   ecx
c001a762:	6a 01                	push   0x1
c001a764:	53                   	push   ebx
c001a765:	e8 7e 83 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	85 c0                	test   eax,eax
c001a76f:	74 08                	je     c001a779 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a776:	53                   	push   ebx
c001a777:	eb 5f                	jmp    c001a7d8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a779:	52                   	push   edx
c001a77a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a77e:	50                   	push   eax
c001a77f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a783:	50                   	push   eax
c001a784:	53                   	push   ebx
c001a785:	e8 0a 86 ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c001a78a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a78e:	83 c4 10             	add    esp,0x10
c001a791:	89 c1                	mov    ecx,eax
c001a793:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a797:	74 31                	je     c001a7ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a799:	83 ec 0c             	sub    esp,0xc
c001a79c:	50                   	push   eax
c001a79d:	e8 fa 4d ff ff       	call   c000f59c <malloc>
c001a7a2:	89 c6                	mov    esi,eax
c001a7a4:	58                   	pop    eax
c001a7a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a7:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7ab:	52                   	push   edx
c001a7ac:	56                   	push   esi
c001a7ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7b5:	53                   	push   ebx
c001a7b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7b9:	83 c4 20             	add    esp,0x20
c001a7bc:	85 c0                	test   eax,eax
c001a7be:	75 0a                	jne    c001a7ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7c4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7c8:	74 18                	je     c001a7e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	53                   	push   ebx
c001a7ce:	e8 73 83 ff ff       	call   c0012b46 <File::close()>
c001a7d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7db:	83 c4 10             	add    esp,0x10
c001a7de:	31 c0                	xor    eax,eax
c001a7e0:	eb 3b                	jmp    c001a81d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a7e2:	83 ec 0c             	sub    esp,0xc
c001a7e5:	53                   	push   ebx
c001a7e6:	e8 5b 83 ff ff       	call   c0012b46 <File::close()>
c001a7eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7f3:	83 c4 0c             	add    esp,0xc
c001a7f6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a7fd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a804:	56                   	push   esi
c001a805:	e8 70 fd ff ff       	call   c001a57a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a80a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a80d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a811:	e8 96 4d ff ff       	call   c000f5ac <free>
c001a816:	83 c4 10             	add    esp,0x10
c001a819:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a81d:	81 c4 20 01 00 00    	add    esp,0x120
c001a823:	5b                   	pop    ebx
c001a824:	5e                   	pop    esi
c001a825:	5f                   	pop    edi
c001a826:	c3                   	ret    

c001a827 <Reg::getLine(char*, char*, char*)>:
c001a827:	57                   	push   edi
c001a828:	56                   	push   esi
c001a829:	53                   	push   ebx
c001a82a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a82e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a832:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a836:	57                   	push   edi
c001a837:	56                   	push   esi
c001a838:	53                   	push   ebx
c001a839:	68 51 b4 02 c0       	push   0xc002b451
c001a83e:	e8 8f fe ff ff       	call   c001a6d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	84 c0                	test   al,al
c001a848:	75 10                	jne    c001a85a <Reg::getLine(char*, char*, char*)+0x33>
c001a84a:	57                   	push   edi
c001a84b:	56                   	push   esi
c001a84c:	53                   	push   ebx
c001a84d:	68 76 b4 02 c0       	push   0xc002b476
c001a852:	e8 7b fe ff ff       	call   c001a6d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	5b                   	pop    ebx
c001a85b:	5e                   	pop    esi
c001a85c:	5f                   	pop    edi
c001a85d:	c3                   	ret    

c001a85e <Reg::readInt(char*, char*, int*)>:
c001a85e:	55                   	push   ebp
c001a85f:	57                   	push   edi
c001a860:	56                   	push   esi
c001a861:	53                   	push   ebx
c001a862:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a868:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a86c:	57                   	push   edi
c001a86d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a874:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a87b:	e8 a7 ff ff ff       	call   c001a827 <Reg::getLine(char*, char*, char*)>
c001a880:	83 c4 10             	add    esp,0x10
c001a883:	84 c0                	test   al,al
c001a885:	0f 84 b3 00 00 00    	je     c001a93e <Reg::readInt(char*, char*, int*)+0xe0>
c001a88b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a88f:	80 fa 2b             	cmp    dl,0x2b
c001a892:	74 0c                	je     c001a8a0 <Reg::readInt(char*, char*, int*)+0x42>
c001a894:	80 fa 2d             	cmp    dl,0x2d
c001a897:	75 0e                	jne    c001a8a7 <Reg::readInt(char*, char*, int*)+0x49>
c001a899:	ba 01 00 00 00       	mov    edx,0x1
c001a89e:	eb 0b                	jmp    c001a8ab <Reg::readInt(char*, char*, int*)+0x4d>
c001a8a0:	ba 01 00 00 00       	mov    edx,0x1
c001a8a5:	eb 02                	jmp    c001a8a9 <Reg::readInt(char*, char*, int*)+0x4b>
c001a8a7:	31 d2                	xor    edx,edx
c001a8a9:	31 c0                	xor    eax,eax
c001a8ab:	be 0a 00 00 00       	mov    esi,0xa
c001a8b0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8b5:	75 20                	jne    c001a8d7 <Reg::readInt(char*, char*, int*)+0x79>
c001a8b7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8bb:	80 f9 78             	cmp    cl,0x78
c001a8be:	75 0a                	jne    c001a8ca <Reg::readInt(char*, char*, int*)+0x6c>
c001a8c0:	83 c2 02             	add    edx,0x2
c001a8c3:	be 10 00 00 00       	mov    esi,0x10
c001a8c8:	eb 0d                	jmp    c001a8d7 <Reg::readInt(char*, char*, int*)+0x79>
c001a8ca:	80 f9 62             	cmp    cl,0x62
c001a8cd:	75 08                	jne    c001a8d7 <Reg::readInt(char*, char*, int*)+0x79>
c001a8cf:	83 c2 02             	add    edx,0x2
c001a8d2:	be 02 00 00 00       	mov    esi,0x2
c001a8d7:	01 d7                	add    edi,edx
c001a8d9:	31 d2                	xor    edx,edx
c001a8db:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a8dd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a8e1:	80 fb 0d             	cmp    bl,0xd
c001a8e4:	0f 94 c3             	sete   bl
c001a8e7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a8ec:	0f 94 c1             	sete   cl
c001a8ef:	08 cb                	or     bl,cl
c001a8f1:	75 3a                	jne    c001a92d <Reg::readInt(char*, char*, int*)+0xcf>
c001a8f3:	0f af d6             	imul   edx,esi
c001a8f6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a8fb:	83 fe 10             	cmp    esi,0x10
c001a8fe:	75 26                	jne    c001a926 <Reg::readInt(char*, char*, int*)+0xc8>
c001a900:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a904:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a907:	89 e9                	mov    ecx,ebp
c001a909:	80 f9 05             	cmp    cl,0x5
c001a90c:	77 06                	ja     c001a914 <Reg::readInt(char*, char*, int*)+0xb6>
c001a90e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a912:	eb 16                	jmp    c001a92a <Reg::readInt(char*, char*, int*)+0xcc>
c001a914:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a918:	83 e9 61             	sub    ecx,0x61
c001a91b:	80 f9 05             	cmp    cl,0x5
c001a91e:	77 06                	ja     c001a926 <Reg::readInt(char*, char*, int*)+0xc8>
c001a920:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a924:	eb 04                	jmp    c001a92a <Reg::readInt(char*, char*, int*)+0xcc>
c001a926:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a92a:	47                   	inc    edi
c001a92b:	eb ae                	jmp    c001a8db <Reg::readInt(char*, char*, int*)+0x7d>
c001a92d:	84 c0                	test   al,al
c001a92f:	74 02                	je     c001a933 <Reg::readInt(char*, char*, int*)+0xd5>
c001a931:	f7 da                	neg    edx
c001a933:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a93a:	89 10                	mov    DWORD PTR [eax],edx
c001a93c:	88 d8                	mov    al,bl
c001a93e:	81 c4 ec 00 00 00    	add    esp,0xec
c001a944:	5b                   	pop    ebx
c001a945:	5e                   	pop    esi
c001a946:	5f                   	pop    edi
c001a947:	5d                   	pop    ebp
c001a948:	c3                   	ret    

c001a949 <Reg::readString(char*, char*, char*, int)>:
c001a949:	57                   	push   edi
c001a94a:	56                   	push   esi
c001a94b:	53                   	push   ebx
c001a94c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a952:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a959:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a95d:	57                   	push   edi
c001a95e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a965:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a96c:	e8 b6 fe ff ff       	call   c001a827 <Reg::getLine(char*, char*, char*)>
c001a971:	83 c4 10             	add    esp,0x10
c001a974:	89 c6                	mov    esi,eax
c001a976:	84 c0                	test   al,al
c001a978:	74 44                	je     c001a9be <Reg::readString(char*, char*, char*, int)+0x75>
c001a97a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a981:	31 c0                	xor    eax,eax
c001a983:	4a                   	dec    edx
c001a984:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a987:	84 c9                	test   cl,cl
c001a989:	74 0f                	je     c001a99a <Reg::readString(char*, char*, char*, int)+0x51>
c001a98b:	39 c2                	cmp    edx,eax
c001a98d:	7e 0b                	jle    c001a99a <Reg::readString(char*, char*, char*, int)+0x51>
c001a98f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a992:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a997:	40                   	inc    eax
c001a998:	eb ea                	jmp    c001a984 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a99a:	83 ec 0c             	sub    esp,0xc
c001a99d:	53                   	push   ebx
c001a99e:	e8 c9 5d fe ff       	call   c000076c <strlen>
c001a9a3:	83 c4 10             	add    esp,0x10
c001a9a6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9ab:	75 11                	jne    c001a9be <Reg::readString(char*, char*, char*, int)+0x75>
c001a9ad:	83 ec 0c             	sub    esp,0xc
c001a9b0:	53                   	push   ebx
c001a9b1:	e8 b6 5d fe ff       	call   c000076c <strlen>
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9be:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9c4:	89 f0                	mov    eax,esi
c001a9c6:	5b                   	pop    ebx
c001a9c7:	5e                   	pop    esi
c001a9c8:	5f                   	pop    edi
c001a9c9:	c3                   	ret    

c001a9ca <Reg::readBool(char*, char*, bool*)>:
c001a9ca:	83 ec 20             	sub    esp,0x20
c001a9cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9d1:	50                   	push   eax
c001a9d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9da:	e8 7f fe ff ff       	call   c001a85e <Reg::readInt(char*, char*, int*)>
c001a9df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a9e4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a9e8:	0f 95 02             	setne  BYTE PTR [edx]
c001a9eb:	83 c4 2c             	add    esp,0x2c
c001a9ee:	c3                   	ret    

c001a9ef <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a9ef:	53                   	push   ebx
c001a9f0:	83 ec 1c             	sub    esp,0x1c
c001a9f3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a9f7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a9fb:	50                   	push   eax
c001a9fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa04:	e8 c1 ff ff ff       	call   c001a9ca <Reg::readBool(char*, char*, bool*)>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	84 c0                	test   al,al
c001aa0e:	74 04                	je     c001aa14 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa10:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa14:	88 d8                	mov    al,bl
c001aa16:	83 c4 18             	add    esp,0x18
c001aa19:	5b                   	pop    ebx
c001aa1a:	c3                   	ret    

c001aa1b <Reg::readIntWithDefault(char*, char*, int)>:
c001aa1b:	53                   	push   ebx
c001aa1c:	83 ec 1c             	sub    esp,0x1c
c001aa1f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa23:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa27:	50                   	push   eax
c001aa28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa30:	e8 29 fe ff ff       	call   c001a85e <Reg::readInt(char*, char*, int*)>
c001aa35:	83 c4 10             	add    esp,0x10
c001aa38:	84 c0                	test   al,al
c001aa3a:	74 04                	je     c001aa40 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa40:	89 d8                	mov    eax,ebx
c001aa42:	83 c4 18             	add    esp,0x18
c001aa45:	5b                   	pop    ebx
c001aa46:	c3                   	ret    

c001aa47 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa47:	57                   	push   edi
c001aa48:	56                   	push   esi
c001aa49:	56                   	push   esi
c001aa4a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa4e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa52:	56                   	push   esi
c001aa53:	57                   	push   edi
c001aa54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa5c:	e8 e8 fe ff ff       	call   c001a949 <Reg::readString(char*, char*, char*, int)>
c001aa61:	83 c4 10             	add    esp,0x10
c001aa64:	84 c0                	test   al,al
c001aa66:	75 1a                	jne    c001aa82 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aa68:	51                   	push   ecx
c001aa69:	56                   	push   esi
c001aa6a:	6a 00                	push   0x0
c001aa6c:	57                   	push   edi
c001aa6d:	e8 de 5c fe ff       	call   c0000750 <memset>
c001aa72:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aa75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aa79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa82:	89 f8                	mov    eax,edi
c001aa84:	5a                   	pop    edx
c001aa85:	5e                   	pop    esi
c001aa86:	5f                   	pop    edi
c001aa87:	c3                   	ret    

c001aa88 <Sys::eject(regs*)>:
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	83 ca ff             	or     edx,0xffffffff
c001aa8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa92:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aa95:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aa9a:	83 e9 41             	sub    ecx,0x41
c001aa9d:	83 f9 19             	cmp    ecx,0x19
c001aaa0:	77 18                	ja     c001aaba <Sys::eject(regs*)+0x32>
c001aaa2:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c001aaa9:	85 c9                	test   ecx,ecx
c001aaab:	74 0d                	je     c001aaba <Sys::eject(regs*)+0x32>
c001aaad:	83 ec 0c             	sub    esp,0xc
c001aab0:	51                   	push   ecx
c001aab1:	e8 28 b3 ff ff       	call   c0015dde <LogicalDisk::eject()>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	99                   	cdq    
c001aaba:	83 c4 0c             	add    esp,0xc
c001aabd:	c3                   	ret    

c001aabe <Sys::exit(regs*)>:
c001aabe:	83 ec 18             	sub    esp,0x18
c001aac1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aac5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aac8:	e8 bc 35 00 00       	call   c001e089 <terminateTask(int)>
c001aacd:	83 c8 ff             	or     eax,0xffffffff
c001aad0:	83 c4 1c             	add    esp,0x1c
c001aad3:	89 c2                	mov    edx,eax
c001aad5:	c3                   	ret    

c001aad6 <Sys::getCwd(regs*)>:
c001aad6:	83 ec 10             	sub    esp,0x10
c001aad9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aadd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aae0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aae8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aaeb:	e8 96 7d ff ff       	call   c0012886 <Fs::getcwd(Process*, char*, int)>
c001aaf0:	83 c4 1c             	add    esp,0x1c
c001aaf3:	99                   	cdq    
c001aaf4:	c3                   	ret    

c001aaf5 <Sys::getPID(regs*)>:
c001aaf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aafa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aafd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaff:	99                   	cdq    
c001ab00:	c3                   	ret    

c001ab01 <Sys::getRAMData(regs*)>:
c001ab01:	8b 0d f4 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5f4
c001ab07:	6b 05 f0 d5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d5f0,0x64
c001ab0e:	99                   	cdq    
c001ab0f:	f7 f9                	idiv   ecx
c001ab11:	c1 e0 18             	shl    eax,0x18
c001ab14:	09 c8                	or     eax,ecx
c001ab16:	99                   	cdq    
c001ab17:	c3                   	ret    

c001ab18 <Sys::getVGAPtr(regs*)>:
c001ab18:	55                   	push   ebp
c001ab19:	57                   	push   edi
c001ab1a:	56                   	push   esi
c001ab1b:	53                   	push   ebx
c001ab1c:	83 ec 18             	sub    esp,0x18
c001ab1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab23:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ab26:	e8 aa 30 00 00       	call   c001dbd5 <Thr::processFromPID(int)>
c001ab2b:	83 c4 10             	add    esp,0x10
c001ab2e:	89 c1                	mov    ecx,eax
c001ab30:	b8 01 00 00 00       	mov    eax,0x1
c001ab35:	85 c9                	test   ecx,ecx
c001ab37:	74 59                	je     c001ab92 <Sys::getVGAPtr(regs*)+0x7a>
c001ab39:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ab3f:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ab43:	74 0c                	je     c001ab51 <Sys::getVGAPtr(regs*)+0x39>
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	53                   	push   ebx
c001ab49:	e8 89 57 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ab54:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ab57:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ab5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab5e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ab61:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab64:	81 c3 82 00 00 00    	add    ebx,0x82
c001ab6a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ab70:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab73:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ab76:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ab7c:	50                   	push   eax
c001ab7d:	50                   	push   eax
c001ab7e:	53                   	push   ebx
c001ab7f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab82:	05 a8 0f 00 00       	add    eax,0xfa8
c001ab87:	50                   	push   eax
c001ab88:	e8 7f 5c fe ff       	call   c000080c <strcpy>
c001ab8d:	83 c4 10             	add    esp,0x10
c001ab90:	31 c0                	xor    eax,eax
c001ab92:	83 c4 0c             	add    esp,0xc
c001ab95:	31 d2                	xor    edx,edx
c001ab97:	5b                   	pop    ebx
c001ab98:	5e                   	pop    esi
c001ab99:	5f                   	pop    edi
c001ab9a:	5d                   	pop    ebp
c001ab9b:	c3                   	ret    

c001ab9c <Sys::loadDLL(regs*)>:
c001ab9c:	56                   	push   esi
c001ab9d:	53                   	push   ebx
c001ab9e:	31 d2                	xor    edx,edx
c001aba0:	51                   	push   ecx
c001aba1:	b8 01 00 00 00       	mov    eax,0x1
c001aba6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abaa:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001abae:	0f 84 8c 00 00 00    	je     c001ac40 <Sys::loadDLL(regs*)+0xa4>
c001abb4:	83 ec 0c             	sub    esp,0xc
c001abb7:	68 14 01 00 00       	push   0x114
c001abbc:	e8 db 49 ff ff       	call   c000f59c <malloc>
c001abc1:	83 c4 0c             	add    esp,0xc
c001abc4:	89 c3                	mov    ebx,eax
c001abc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abcb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abd1:	53                   	push   ebx
c001abd2:	e8 ad 7e ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	31 d2                	xor    edx,edx
c001abdc:	b8 02 00 00 00       	mov    eax,0x2
c001abe1:	85 db                	test   ebx,ebx
c001abe3:	74 5b                	je     c001ac40 <Sys::loadDLL(regs*)+0xa4>
c001abe5:	83 ec 0c             	sub    esp,0xc
c001abe8:	53                   	push   ebx
c001abe9:	e8 68 81 ff ff       	call   c0012d56 <File::exists()>
c001abee:	83 c4 10             	add    esp,0x10
c001abf1:	84 c0                	test   al,al
c001abf3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abf5:	75 11                	jne    c001ac08 <Sys::loadDLL(regs*)+0x6c>
c001abf7:	83 ec 0c             	sub    esp,0xc
c001abfa:	53                   	push   ebx
c001abfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abfe:	83 c4 10             	add    esp,0x10
c001ac01:	b8 03 00 00 00       	mov    eax,0x3
c001ac06:	eb 36                	jmp    c001ac3e <Sys::loadDLL(regs*)+0xa2>
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	53                   	push   ebx
c001ac0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac0f:	58                   	pop    eax
c001ac10:	5a                   	pop    edx
c001ac11:	6a 00                	push   0x0
c001ac13:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac16:	e8 0e 22 00 00       	call   c001ce29 <Thr::loadDLL(char const*, bool)>
c001ac1b:	83 c4 10             	add    esp,0x10
c001ac1e:	89 c1                	mov    ecx,eax
c001ac20:	31 d2                	xor    edx,edx
c001ac22:	b8 04 00 00 00       	mov    eax,0x4
c001ac27:	85 c9                	test   ecx,ecx
c001ac29:	74 15                	je     c001ac40 <Sys::loadDLL(regs*)+0xa4>
c001ac2b:	53                   	push   ebx
c001ac2c:	53                   	push   ebx
c001ac2d:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c001ac33:	51                   	push   ecx
c001ac34:	e8 1b 24 00 00       	call   c001d054 <Thr::executeDLL(unsigned long, void*)>
c001ac39:	83 c4 10             	add    esp,0x10
c001ac3c:	31 c0                	xor    eax,eax
c001ac3e:	31 d2                	xor    edx,edx
c001ac40:	59                   	pop    ecx
c001ac41:	5b                   	pop    ebx
c001ac42:	5e                   	pop    esi
c001ac43:	c3                   	ret    

c001ac44 <Sys::read(regs*)>:
c001ac44:	57                   	push   edi
c001ac45:	56                   	push   esi
c001ac46:	53                   	push   ebx
c001ac47:	83 ec 10             	sub    esp,0x10
c001ac4a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac51:	83 f8 02             	cmp    eax,0x2
c001ac54:	77 10                	ja     c001ac66 <Sys::read(regs*)+0x22>
c001ac56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac5e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac64:	eb 0e                	jmp    c001ac74 <Sys::read(regs*)+0x30>
c001ac66:	83 ec 0c             	sub    esp,0xc
c001ac69:	50                   	push   eax
c001ac6a:	e8 dc 63 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	89 c1                	mov    ecx,eax
c001ac74:	83 c8 ff             	or     eax,0xffffffff
c001ac77:	85 c9                	test   ecx,ecx
c001ac79:	89 c2                	mov    edx,eax
c001ac7b:	74 28                	je     c001aca5 <Sys::read(regs*)+0x61>
c001ac7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac85:	31 ff                	xor    edi,edi
c001ac87:	83 ec 0c             	sub    esp,0xc
c001ac8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac8c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac90:	52                   	push   edx
c001ac91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac94:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac97:	57                   	push   edi
c001ac98:	56                   	push   esi
c001ac99:	51                   	push   ecx
c001ac9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aca1:	83 c4 20             	add    esp,0x20
c001aca4:	99                   	cdq    
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	5b                   	pop    ebx
c001aca9:	5e                   	pop    esi
c001acaa:	5f                   	pop    edi
c001acab:	c3                   	ret    

c001acac <Sys::sbrk(regs*)>:
c001acac:	56                   	push   esi
c001acad:	53                   	push   ebx
c001acae:	50                   	push   eax
c001acaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acbb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001acbe:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001acc4:	85 db                	test   ebx,ebx
c001acc6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001acc9:	74 02                	je     c001accd <Sys::sbrk(regs*)+0x21>
c001accb:	79 06                	jns    c001acd3 <Sys::sbrk(regs*)+0x27>
c001accd:	89 f0                	mov    eax,esi
c001accf:	31 d2                	xor    edx,edx
c001acd1:	eb 2a                	jmp    c001acfd <Sys::sbrk(regs*)+0x51>
c001acd3:	83 c8 ff             	or     eax,0xffffffff
c001acd6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001acdc:	89 c2                	mov    edx,eax
c001acde:	77 1d                	ja     c001acfd <Sys::sbrk(regs*)+0x51>
c001ace0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ace6:	50                   	push   eax
c001ace7:	c1 ea 0c             	shr    edx,0xc
c001acea:	68 07 0c 00 00       	push   0xc07
c001acef:	52                   	push   edx
c001acf0:	51                   	push   ecx
c001acf1:	e8 6a 6d ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001acf6:	89 f0                	mov    eax,esi
c001acf8:	31 d2                	xor    edx,edx
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	59                   	pop    ecx
c001acfe:	5b                   	pop    ebx
c001acff:	5e                   	pop    esi
c001ad00:	c3                   	ret    

c001ad01 <Sys::setCwd(regs*)>:
c001ad01:	83 ec 14             	sub    esp,0x14
c001ad04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad08:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad10:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad13:	e8 dd 80 ff ff       	call   c0012df5 <Fs::setcwd(Process*, char*)>
c001ad18:	83 c4 1c             	add    esp,0x1c
c001ad1b:	99                   	cdq    
c001ad1c:	c3                   	ret    

c001ad1d <Sys::setTime(regs*)>:
c001ad1d:	55                   	push   ebp
c001ad1e:	31 c9                	xor    ecx,ecx
c001ad20:	57                   	push   edi
c001ad21:	bd 0c 00 00 00       	mov    ebp,0xc
c001ad26:	56                   	push   esi
c001ad27:	53                   	push   ebx
c001ad28:	31 db                	xor    ebx,ebx
c001ad2a:	83 ec 10             	sub    esp,0x10
c001ad2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad31:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ad34:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ad37:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ad3a:	89 c2                	mov    edx,eax
c001ad3c:	66 81 ef 6c 07       	sub    di,0x76c
c001ad41:	83 e2 1f             	and    edx,0x1f
c001ad44:	c1 e7 10             	shl    edi,0x10
c001ad47:	42                   	inc    edx
c001ad48:	c1 e8 05             	shr    eax,0x5
c001ad4b:	88 d1                	mov    cl,dl
c001ad4d:	31 d2                	xor    edx,edx
c001ad4f:	f7 f5                	div    ebp
c001ad51:	89 dd                	mov    ebp,ebx
c001ad53:	88 d5                	mov    ch,dl
c001ad55:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ad5b:	0f b7 c1             	movzx  eax,cx
c001ad5e:	31 d2                	xor    edx,edx
c001ad60:	09 f8                	or     eax,edi
c001ad62:	bf 3c 00 00 00       	mov    edi,0x3c
c001ad67:	89 c1                	mov    ecx,eax
c001ad69:	89 f0                	mov    eax,esi
c001ad6b:	f7 f7                	div    edi
c001ad6d:	c1 e2 10             	shl    edx,0x10
c001ad70:	09 d5                	or     ebp,edx
c001ad72:	31 d2                	xor    edx,edx
c001ad74:	89 eb                	mov    ebx,ebp
c001ad76:	f7 f7                	div    edi
c001ad78:	bf 10 0e 00 00       	mov    edi,0xe10
c001ad7d:	88 d7                	mov    bh,dl
c001ad7f:	89 f0                	mov    eax,esi
c001ad81:	31 d2                	xor    edx,edx
c001ad83:	f7 f7                	div    edi
c001ad85:	bf 18 00 00 00       	mov    edi,0x18
c001ad8a:	31 d2                	xor    edx,edx
c001ad8c:	f7 f7                	div    edi
c001ad8e:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001ad93:	88 d3                	mov    bl,dl
c001ad95:	53                   	push   ebx
c001ad96:	51                   	push   ecx
c001ad97:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ad9d:	e8 9c 88 ff ff       	call   c001363e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ada2:	83 c4 1c             	add    esp,0x1c
c001ada5:	83 f0 01             	xor    eax,0x1
c001ada8:	5b                   	pop    ebx
c001ada9:	0f b6 c0             	movzx  eax,al
c001adac:	5e                   	pop    esi
c001adad:	31 d2                	xor    edx,edx
c001adaf:	5f                   	pop    edi
c001adb0:	5d                   	pop    ebp
c001adb1:	c3                   	ret    

c001adb2 <Sys::timezone(regs*)>:
c001adb2:	53                   	push   ebx
c001adb3:	83 ec 08             	sub    esp,0x8
c001adb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adba:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001adbe:	75 17                	jne    c001add7 <Sys::timezone(regs*)+0x25>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	68 91 b4 02 c0       	push   0xc002b491
c001adc8:	e8 58 77 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001adcd:	83 c8 ff             	or     eax,0xffffffff
c001add0:	83 c4 10             	add    esp,0x10
c001add3:	89 c2                	mov    edx,eax
c001add5:	eb 20                	jmp    c001adf7 <Sys::timezone(regs*)+0x45>
c001add7:	83 ec 0c             	sub    esp,0xc
c001adda:	68 a6 b4 02 c0       	push   0xc002b4a6
c001addf:	e8 41 77 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001ade4:	58                   	pop    eax
c001ade5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ade8:	e8 b3 85 ff ff       	call   c00133a0 <User::loadClockSettings(int)>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	b8 01 00 00 00       	mov    eax,0x1
c001adf5:	31 d2                	xor    edx,edx
c001adf7:	83 c4 08             	add    esp,0x8
c001adfa:	5b                   	pop    ebx
c001adfb:	c3                   	ret    

c001adfc <Sys::write(regs*)>:
c001adfc:	57                   	push   edi
c001adfd:	56                   	push   esi
c001adfe:	53                   	push   ebx
c001adff:	83 ec 10             	sub    esp,0x10
c001ae02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae09:	83 f8 02             	cmp    eax,0x2
c001ae0c:	77 10                	ja     c001ae1e <Sys::write(regs*)+0x22>
c001ae0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae16:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae1c:	eb 0e                	jmp    c001ae2c <Sys::write(regs*)+0x30>
c001ae1e:	83 ec 0c             	sub    esp,0xc
c001ae21:	50                   	push   eax
c001ae22:	e8 24 62 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	89 c1                	mov    ecx,eax
c001ae2c:	83 c8 ff             	or     eax,0xffffffff
c001ae2f:	85 c9                	test   ecx,ecx
c001ae31:	89 c2                	mov    edx,eax
c001ae33:	74 28                	je     c001ae5d <Sys::write(regs*)+0x61>
c001ae35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae3d:	31 ff                	xor    edi,edi
c001ae3f:	83 ec 0c             	sub    esp,0xc
c001ae42:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae44:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae48:	52                   	push   edx
c001ae49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae4c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	51                   	push   ecx
c001ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae59:	83 c4 20             	add    esp,0x20
c001ae5c:	99                   	cdq    
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	5b                   	pop    ebx
c001ae61:	5e                   	pop    esi
c001ae62:	5f                   	pop    edi
c001ae63:	c3                   	ret    

c001ae64 <Sys::wsbe(regs*)>:
c001ae64:	57                   	push   edi
c001ae65:	b9 0b 00 00 00       	mov    ecx,0xb
c001ae6a:	56                   	push   esi
c001ae6b:	be e5 b4 02 c0       	mov    esi,0xc002b4e5
c001ae70:	53                   	push   ebx
c001ae71:	83 ec 30             	sub    esp,0x30
c001ae74:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ae78:	fc                   	cld    
c001ae79:	83 ec 0c             	sub    esp,0xc
c001ae7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae7e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ae82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae8a:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001ae90:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae92:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ae95:	57                   	push   edi
c001ae96:	e8 d1 58 fe ff       	call   c000076c <strlen>
c001ae9b:	5a                   	pop    edx
c001ae9c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001aea0:	52                   	push   edx
c001aea1:	31 d2                	xor    edx,edx
c001aea3:	57                   	push   edi
c001aea4:	52                   	push   edx
c001aea5:	50                   	push   eax
c001aea6:	56                   	push   esi
c001aea7:	ff d3                	call   ebx
c001aea9:	83 c4 14             	add    esp,0x14
c001aeac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aeb0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aeb3:	e8 d1 31 00 00       	call   c001e089 <terminateTask(int)>
c001aeb8:	83 c4 40             	add    esp,0x40
c001aebb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aec0:	5b                   	pop    ebx
c001aec1:	31 d2                	xor    edx,edx
c001aec3:	5e                   	pop    esi
c001aec4:	5f                   	pop    edi
c001aec5:	c3                   	ret    

c001aec6 <Sys::yield(regs*)>:
c001aec6:	57                   	push   edi
c001aec7:	56                   	push   esi
c001aec8:	53                   	push   ebx
c001aec9:	fa                   	cli    
c001aeca:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001aed0:	e8 14 29 00 00       	call   c001d7e9 <schedule()>
c001aed5:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001aeda:	48                   	dec    eax
c001aedb:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001aee0:	75 01                	jne    c001aee3 <Sys::yield(regs*)+0x1d>
c001aee2:	fb                   	sti    
c001aee3:	8b 35 10 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc10
c001aee9:	8b 3d 14 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc14
c001aeef:	89 f0                	mov    eax,esi
c001aef1:	89 fb                	mov    ebx,edi
c001aef3:	89 f1                	mov    ecx,esi
c001aef5:	c1 e0 07             	shl    eax,0x7
c001aef8:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aefc:	25 80 30 0f 00       	and    eax,0xf3080
c001af01:	c1 eb 17             	shr    ebx,0x17
c001af04:	31 c8                	xor    eax,ecx
c001af06:	89 da                	mov    edx,ebx
c001af08:	5b                   	pop    ebx
c001af09:	5e                   	pop    esi
c001af0a:	5f                   	pop    edi
c001af0b:	c3                   	ret    

c001af0c <sysCallSeekDir(regs*)>:
c001af0c:	31 c0                	xor    eax,eax
c001af0e:	31 d2                	xor    edx,edx
c001af10:	c3                   	ret    

c001af11 <sysCallTellDir(regs*)>:
c001af11:	31 c0                	xor    eax,eax
c001af13:	31 d2                	xor    edx,edx
c001af15:	c3                   	ret    

c001af16 <sysCallVerify(regs*)>:
c001af16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af1a:	31 d2                	xor    edx,edx
c001af1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af1f:	c3                   	ret    

c001af20 <sysCallGetArgc(regs*)>:
c001af20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af28:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001af2e:	99                   	cdq    
c001af2f:	c3                   	ret    

c001af30 <sysFormatDisk(regs*)>:
c001af30:	56                   	push   esi
c001af31:	53                   	push   ebx
c001af32:	53                   	push   ebx
c001af33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af37:	8b 1d 14 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d714
c001af3d:	eb 25                	jmp    c001af64 <sysFormatDisk(regs*)+0x34>
c001af3f:	83 ec 0c             	sub    esp,0xc
c001af42:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af45:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af47:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af4a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af4d:	50                   	push   eax
c001af4e:	ff 34 85 a0 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2460]
c001af55:	53                   	push   ebx
c001af56:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af59:	83 c4 20             	add    esp,0x20
c001af5c:	83 f8 08             	cmp    eax,0x8
c001af5f:	75 12                	jne    c001af73 <sysFormatDisk(regs*)+0x43>
c001af61:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af64:	85 db                	test   ebx,ebx
c001af66:	75 d7                	jne    c001af3f <sysFormatDisk(regs*)+0xf>
c001af68:	59                   	pop    ecx
c001af69:	b8 03 00 00 00       	mov    eax,0x3
c001af6e:	31 d2                	xor    edx,edx
c001af70:	5b                   	pop    ebx
c001af71:	5e                   	pop    esi
c001af72:	c3                   	ret    
c001af73:	85 c0                	test   eax,eax
c001af75:	74 1b                	je     c001af92 <sysFormatDisk(regs*)+0x62>
c001af77:	83 f8 09             	cmp    eax,0x9
c001af7a:	74 0b                	je     c001af87 <sysFormatDisk(regs*)+0x57>
c001af7c:	59                   	pop    ecx
c001af7d:	b8 02 00 00 00       	mov    eax,0x2
c001af82:	31 d2                	xor    edx,edx
c001af84:	5b                   	pop    ebx
c001af85:	5e                   	pop    esi
c001af86:	c3                   	ret    
c001af87:	59                   	pop    ecx
c001af88:	b8 01 00 00 00       	mov    eax,0x1
c001af8d:	31 d2                	xor    edx,edx
c001af8f:	5b                   	pop    ebx
c001af90:	5e                   	pop    esi
c001af91:	c3                   	ret    
c001af92:	59                   	pop    ecx
c001af93:	31 c0                	xor    eax,eax
c001af95:	31 d2                	xor    edx,edx
c001af97:	5b                   	pop    ebx
c001af98:	5e                   	pop    esi
c001af99:	c3                   	ret    

c001af9a <sysSetDiskVolumeLabel(regs*)>:
c001af9a:	56                   	push   esi
c001af9b:	53                   	push   ebx
c001af9c:	53                   	push   ebx
c001af9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afa1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001afa4:	83 f8 19             	cmp    eax,0x19
c001afa7:	77 29                	ja     c001afd2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afa9:	8b 0c 85 a0 db 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2460]
c001afb0:	85 c9                	test   ecx,ecx
c001afb2:	74 1e                	je     c001afd2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afb4:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001afb7:	85 d2                	test   edx,edx
c001afb9:	74 17                	je     c001afd2 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afbb:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001afc1:	8b 33                	mov    esi,DWORD PTR [ebx]
c001afc3:	52                   	push   edx
c001afc4:	50                   	push   eax
c001afc5:	51                   	push   ecx
c001afc6:	53                   	push   ebx
c001afc7:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001afca:	83 c4 10             	add    esp,0x10
c001afcd:	99                   	cdq    
c001afce:	59                   	pop    ecx
c001afcf:	5b                   	pop    ebx
c001afd0:	5e                   	pop    esi
c001afd1:	c3                   	ret    
c001afd2:	59                   	pop    ecx
c001afd3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afdd:	5b                   	pop    ebx
c001afde:	5e                   	pop    esi
c001afdf:	c3                   	ret    

c001afe0 <sysGetDiskVolumeLabel(regs*)>:
c001afe0:	57                   	push   edi
c001afe1:	56                   	push   esi
c001afe2:	53                   	push   ebx
c001afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afea:	83 fa 19             	cmp    edx,0x19
c001afed:	77 34                	ja     c001b023 <sysGetDiskVolumeLabel(regs*)+0x43>
c001afef:	8b 0c 95 a0 db 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2460]
c001aff6:	85 c9                	test   ecx,ecx
c001aff8:	74 29                	je     c001b023 <sysGetDiskVolumeLabel(regs*)+0x43>
c001affa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001affd:	85 db                	test   ebx,ebx
c001afff:	74 22                	je     c001b023 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b001:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b004:	85 c0                	test   eax,eax
c001b006:	74 1b                	je     c001b023 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b008:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b00e:	83 ec 0c             	sub    esp,0xc
c001b011:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b013:	50                   	push   eax
c001b014:	53                   	push   ebx
c001b015:	52                   	push   edx
c001b016:	51                   	push   ecx
c001b017:	56                   	push   esi
c001b018:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b01b:	83 c4 20             	add    esp,0x20
c001b01e:	99                   	cdq    
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	c3                   	ret    
c001b023:	5b                   	pop    ebx
c001b024:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b029:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b02e:	5e                   	pop    esi
c001b02f:	5f                   	pop    edi
c001b030:	c3                   	ret    

c001b031 <sysShutdown(regs*)>:
c001b031:	83 ec 0c             	sub    esp,0xc
c001b034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b038:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b03b:	85 c0                	test   eax,eax
c001b03d:	74 18                	je     c001b057 <sysShutdown(regs*)+0x26>
c001b03f:	83 f8 01             	cmp    eax,0x1
c001b042:	74 38                	je     c001b07c <sysShutdown(regs*)+0x4b>
c001b044:	83 f8 02             	cmp    eax,0x2
c001b047:	74 24                	je     c001b06d <sysShutdown(regs*)+0x3c>
c001b049:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b04e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b053:	83 c4 0c             	add    esp,0xc
c001b056:	c3                   	ret    
c001b057:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001b05c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b05e:	6a 00                	push   0x0
c001b060:	6a 00                	push   0x0
c001b062:	6a 00                	push   0x0
c001b064:	50                   	push   eax
c001b065:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b068:	83 c4 10             	add    esp,0x10
c001b06b:	eb dc                	jmp    c001b049 <sysShutdown(regs*)+0x18>
c001b06d:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001b072:	8b 10                	mov    edx,DWORD PTR [eax]
c001b074:	6a 00                	push   0x0
c001b076:	6a 00                	push   0x0
c001b078:	6a 01                	push   0x1
c001b07a:	eb e8                	jmp    c001b064 <sysShutdown(regs*)+0x33>
c001b07c:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c001b081:	85 c0                	test   eax,eax
c001b083:	74 02                	je     c001b087 <sysShutdown(regs*)+0x56>
c001b085:	ff d0                	call   eax
c001b087:	31 c0                	xor    eax,eax
c001b089:	31 d2                	xor    edx,edx
c001b08b:	83 c4 0c             	add    esp,0xc
c001b08e:	c3                   	ret    

c001b08f <sysCallRealpath(regs*)>:
c001b08f:	83 ec 0c             	sub    esp,0xc
c001b092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b096:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b099:	85 d2                	test   edx,edx
c001b09b:	74 07                	je     c001b0a4 <sysCallRealpath(regs*)+0x15>
c001b09d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b0a0:	85 c0                	test   eax,eax
c001b0a2:	75 0b                	jne    c001b0af <sysCallRealpath(regs*)+0x20>
c001b0a4:	b8 01 00 00 00       	mov    eax,0x1
c001b0a9:	31 d2                	xor    edx,edx
c001b0ab:	83 c4 0c             	add    esp,0xc
c001b0ae:	c3                   	ret    
c001b0af:	51                   	push   ecx
c001b0b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b0b6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b0b9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b0bf:	51                   	push   ecx
c001b0c0:	52                   	push   edx
c001b0c1:	50                   	push   eax
c001b0c2:	e8 13 78 ff ff       	call   c00128da <Fs::standardiseFiles(char*, char const*, char const*)>
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	31 c0                	xor    eax,eax
c001b0cc:	31 d2                	xor    edx,edx
c001b0ce:	83 c4 0c             	add    esp,0xc
c001b0d1:	c3                   	ret    

c001b0d2 <sysCallReadDir(regs*)>:
c001b0d2:	53                   	push   ebx
c001b0d3:	83 ec 18             	sub    esp,0x18
c001b0d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b0dd:	83 f8 02             	cmp    eax,0x2
c001b0e0:	76 60                	jbe    c001b142 <sysCallReadDir(regs*)+0x70>
c001b0e2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b0e9:	77 48                	ja     c001b133 <sysCallReadDir(regs*)+0x61>
c001b0eb:	83 ec 0c             	sub    esp,0xc
c001b0ee:	50                   	push   eax
c001b0ef:	e8 57 5f ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	85 c0                	test   eax,eax
c001b0f9:	74 38                	je     c001b133 <sysCallReadDir(regs*)+0x61>
c001b0fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b103:	83 ec 0c             	sub    esp,0xc
c001b106:	8b 10                	mov    edx,DWORD PTR [eax]
c001b108:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b10c:	51                   	push   ecx
c001b10d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b110:	6a 00                	push   0x0
c001b112:	68 10 01 00 00       	push   0x110
c001b117:	50                   	push   eax
c001b118:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b11b:	83 c4 20             	add    esp,0x20
c001b11e:	85 c0                	test   eax,eax
c001b120:	74 29                	je     c001b14b <sysCallReadDir(regs*)+0x79>
c001b122:	83 f8 07             	cmp    eax,0x7
c001b125:	74 1b                	je     c001b142 <sysCallReadDir(regs*)+0x70>
c001b127:	b8 02 00 00 00       	mov    eax,0x2
c001b12c:	31 d2                	xor    edx,edx
c001b12e:	83 c4 18             	add    esp,0x18
c001b131:	5b                   	pop    ebx
c001b132:	c3                   	ret    
c001b133:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b138:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b13d:	83 c4 18             	add    esp,0x18
c001b140:	5b                   	pop    ebx
c001b141:	c3                   	ret    
c001b142:	b8 01 00 00 00       	mov    eax,0x1
c001b147:	31 d2                	xor    edx,edx
c001b149:	eb e3                	jmp    c001b12e <sysCallReadDir(regs*)+0x5c>
c001b14b:	31 c0                	xor    eax,eax
c001b14d:	31 d2                	xor    edx,edx
c001b14f:	eb dd                	jmp    c001b12e <sysCallReadDir(regs*)+0x5c>

c001b151 <sysCallIsATTY(regs*)>:
c001b151:	83 ec 0c             	sub    esp,0xc
c001b154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b158:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b15b:	83 f8 02             	cmp    eax,0x2
c001b15e:	76 07                	jbe    c001b167 <sysCallIsATTY(regs*)+0x16>
c001b160:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b165:	75 26                	jne    c001b18d <sysCallIsATTY(regs*)+0x3c>
c001b167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b16c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b16f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b175:	85 c0                	test   eax,eax
c001b177:	74 24                	je     c001b19d <sysCallIsATTY(regs*)+0x4c>
c001b179:	83 ec 0c             	sub    esp,0xc
c001b17c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b17e:	50                   	push   eax
c001b17f:	ff 12                	call   DWORD PTR [edx]
c001b181:	31 d2                	xor    edx,edx
c001b183:	0f b6 c0             	movzx  eax,al
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	83 c4 0c             	add    esp,0xc
c001b18c:	c3                   	ret    
c001b18d:	83 ec 0c             	sub    esp,0xc
c001b190:	50                   	push   eax
c001b191:	e8 b5 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b196:	83 c4 10             	add    esp,0x10
c001b199:	85 c0                	test   eax,eax
c001b19b:	75 dc                	jne    c001b179 <sysCallIsATTY(regs*)+0x28>
c001b19d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1a7:	83 c4 0c             	add    esp,0xc
c001b1aa:	c3                   	ret    

c001b1ab <sysCallSeek(regs*)>:
c001b1ab:	53                   	push   ebx
c001b1ac:	83 ec 08             	sub    esp,0x8
c001b1af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1b6:	8d 50 fd             	lea    edx,[eax-0x3]
c001b1b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b1bf:	77 32                	ja     c001b1f3 <sysCallSeek(regs*)+0x48>
c001b1c1:	83 ec 0c             	sub    esp,0xc
c001b1c4:	50                   	push   eax
c001b1c5:	e8 81 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b1ca:	83 c4 0c             	add    esp,0xc
c001b1cd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1d0:	31 db                	xor    ebx,ebx
c001b1d2:	53                   	push   ebx
c001b1d3:	51                   	push   ecx
c001b1d4:	50                   	push   eax
c001b1d5:	e8 cc 79 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001b1da:	83 c4 10             	add    esp,0x10
c001b1dd:	85 c0                	test   eax,eax
c001b1df:	0f 95 c0             	setne  al
c001b1e2:	31 d2                	xor    edx,edx
c001b1e4:	0f b6 c0             	movzx  eax,al
c001b1e7:	f7 d8                	neg    eax
c001b1e9:	83 d2 00             	adc    edx,0x0
c001b1ec:	83 c4 08             	add    esp,0x8
c001b1ef:	f7 da                	neg    edx
c001b1f1:	5b                   	pop    ebx
c001b1f2:	c3                   	ret    
c001b1f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1fd:	83 c4 08             	add    esp,0x8
c001b200:	5b                   	pop    ebx
c001b201:	c3                   	ret    

c001b202 <sysCallTell(regs*)>:
c001b202:	53                   	push   ebx
c001b203:	83 ec 08             	sub    esp,0x8
c001b206:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b20a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b20d:	83 f8 02             	cmp    eax,0x2
c001b210:	76 4d                	jbe    c001b25f <sysCallTell(regs*)+0x5d>
c001b212:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b217:	76 19                	jbe    c001b232 <sysCallTell(regs*)+0x30>
c001b219:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b21c:	31 d2                	xor    edx,edx
c001b21e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b224:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b22b:	31 c0                	xor    eax,eax
c001b22d:	83 c4 08             	add    esp,0x8
c001b230:	5b                   	pop    ebx
c001b231:	c3                   	ret    
c001b232:	83 ec 0c             	sub    esp,0xc
c001b235:	50                   	push   eax
c001b236:	e8 10 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b23b:	5a                   	pop    edx
c001b23c:	59                   	pop    ecx
c001b23d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b240:	50                   	push   eax
c001b241:	e8 b6 79 ff ff       	call   c0012bfc <File::tell(unsigned long long*)>
c001b246:	83 c4 10             	add    esp,0x10
c001b249:	85 c0                	test   eax,eax
c001b24b:	0f 95 c0             	setne  al
c001b24e:	31 d2                	xor    edx,edx
c001b250:	0f b6 c0             	movzx  eax,al
c001b253:	f7 d8                	neg    eax
c001b255:	83 d2 00             	adc    edx,0x0
c001b258:	83 c4 08             	add    esp,0x8
c001b25b:	f7 da                	neg    edx
c001b25d:	5b                   	pop    ebx
c001b25e:	c3                   	ret    
c001b25f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b264:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b269:	83 c4 08             	add    esp,0x8
c001b26c:	5b                   	pop    ebx
c001b26d:	c3                   	ret    

c001b26e <sysCallSize(regs*)>:
c001b26e:	53                   	push   ebx
c001b26f:	83 ec 18             	sub    esp,0x18
c001b272:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b276:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b279:	83 f8 02             	cmp    eax,0x2
c001b27c:	76 53                	jbe    c001b2d1 <sysCallSize(regs*)+0x63>
c001b27e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b283:	76 19                	jbe    c001b29e <sysCallSize(regs*)+0x30>
c001b285:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b288:	31 d2                	xor    edx,edx
c001b28a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b290:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b297:	31 c0                	xor    eax,eax
c001b299:	83 c4 18             	add    esp,0x18
c001b29c:	5b                   	pop    ebx
c001b29d:	c3                   	ret    
c001b29e:	83 ec 0c             	sub    esp,0xc
c001b2a1:	50                   	push   eax
c001b2a2:	e8 a4 5d ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b2a7:	83 c4 0c             	add    esp,0xc
c001b2aa:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b2ae:	52                   	push   edx
c001b2af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b2b2:	50                   	push   eax
c001b2b3:	e8 dc 7a ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c001b2b8:	83 c4 10             	add    esp,0x10
c001b2bb:	85 c0                	test   eax,eax
c001b2bd:	0f 95 c0             	setne  al
c001b2c0:	31 d2                	xor    edx,edx
c001b2c2:	0f b6 c0             	movzx  eax,al
c001b2c5:	f7 d8                	neg    eax
c001b2c7:	83 d2 00             	adc    edx,0x0
c001b2ca:	83 c4 18             	add    esp,0x18
c001b2cd:	f7 da                	neg    edx
c001b2cf:	5b                   	pop    ebx
c001b2d0:	c3                   	ret    
c001b2d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2db:	83 c4 18             	add    esp,0x18
c001b2de:	5b                   	pop    ebx
c001b2df:	c3                   	ret    

c001b2e0 <sysCallSizeFromFilename(regs*)>:
c001b2e0:	57                   	push   edi
c001b2e1:	56                   	push   esi
c001b2e2:	53                   	push   ebx
c001b2e3:	83 ec 20             	sub    esp,0x20
c001b2e6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2ea:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b2ed:	83 fb 02             	cmp    ebx,0x2
c001b2f0:	0f 86 88 00 00 00    	jbe    c001b37e <sysCallSizeFromFilename(regs*)+0x9e>
c001b2f6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b2fc:	76 1b                	jbe    c001b319 <sysCallSizeFromFilename(regs*)+0x39>
c001b2fe:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b301:	31 d2                	xor    edx,edx
c001b303:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b309:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b310:	83 c4 20             	add    esp,0x20
c001b313:	31 c0                	xor    eax,eax
c001b315:	5b                   	pop    ebx
c001b316:	5e                   	pop    esi
c001b317:	5f                   	pop    edi
c001b318:	c3                   	ret    
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	68 14 01 00 00       	push   0x114
c001b321:	e8 76 42 ff ff       	call   c000f59c <malloc>
c001b326:	83 c4 0c             	add    esp,0xc
c001b329:	89 c7                	mov    edi,eax
c001b32b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b330:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b333:	53                   	push   ebx
c001b334:	57                   	push   edi
c001b335:	e8 4a 77 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001b33a:	83 c4 0c             	add    esp,0xc
c001b33d:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b341:	50                   	push   eax
c001b342:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b345:	57                   	push   edi
c001b346:	e8 49 7a ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	85 ff                	test   edi,edi
c001b350:	74 14                	je     c001b366 <sysCallSizeFromFilename(regs*)+0x86>
c001b352:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b356:	8b 17                	mov    edx,DWORD PTR [edi]
c001b358:	83 ec 0c             	sub    esp,0xc
c001b35b:	57                   	push   edi
c001b35c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b366:	85 c0                	test   eax,eax
c001b368:	0f 95 c0             	setne  al
c001b36b:	31 d2                	xor    edx,edx
c001b36d:	0f b6 c0             	movzx  eax,al
c001b370:	f7 d8                	neg    eax
c001b372:	83 d2 00             	adc    edx,0x0
c001b375:	83 c4 20             	add    esp,0x20
c001b378:	f7 da                	neg    edx
c001b37a:	5b                   	pop    ebx
c001b37b:	5e                   	pop    esi
c001b37c:	5f                   	pop    edi
c001b37d:	c3                   	ret    
c001b37e:	83 c4 20             	add    esp,0x20
c001b381:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b386:	5b                   	pop    ebx
c001b387:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b38c:	5e                   	pop    esi
c001b38d:	5f                   	pop    edi
c001b38e:	c3                   	ret    

c001b38f <sysCallClose(regs*)>:
c001b38f:	53                   	push   ebx
c001b390:	83 ec 08             	sub    esp,0x8
c001b393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b397:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b39a:	83 f8 02             	cmp    eax,0x2
c001b39d:	76 41                	jbe    c001b3e0 <sysCallClose(regs*)+0x51>
c001b39f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b3a5:	83 fa 01             	cmp    edx,0x1
c001b3a8:	76 2d                	jbe    c001b3d7 <sysCallClose(regs*)+0x48>
c001b3aa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3af:	77 2f                	ja     c001b3e0 <sysCallClose(regs*)+0x51>
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	50                   	push   eax
c001b3b5:	e8 91 5c ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b3ba:	89 c3                	mov    ebx,eax
c001b3bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3bf:	e8 82 77 ff ff       	call   c0012b46 <File::close()>
c001b3c4:	83 c4 10             	add    esp,0x10
c001b3c7:	85 db                	test   ebx,ebx
c001b3c9:	74 0c                	je     c001b3d7 <sysCallClose(regs*)+0x48>
c001b3cb:	83 ec 0c             	sub    esp,0xc
c001b3ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3d0:	53                   	push   ebx
c001b3d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3d4:	83 c4 10             	add    esp,0x10
c001b3d7:	31 c0                	xor    eax,eax
c001b3d9:	31 d2                	xor    edx,edx
c001b3db:	83 c4 08             	add    esp,0x8
c001b3de:	5b                   	pop    ebx
c001b3df:	c3                   	ret    
c001b3e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ea:	83 c4 08             	add    esp,0x8
c001b3ed:	5b                   	pop    ebx
c001b3ee:	c3                   	ret    

c001b3ef <sysCallOpenDir(regs*)>:
c001b3ef:	56                   	push   esi
c001b3f0:	53                   	push   ebx
c001b3f1:	53                   	push   ebx
c001b3f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3f6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b3f9:	85 f6                	test   esi,esi
c001b3fb:	74 59                	je     c001b456 <sysCallOpenDir(regs*)+0x67>
c001b3fd:	83 ec 0c             	sub    esp,0xc
c001b400:	68 14 01 00 00       	push   0x114
c001b405:	e8 92 41 ff ff       	call   c000f59c <malloc>
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	89 c6                	mov    esi,eax
c001b40f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b414:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b417:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b41a:	56                   	push   esi
c001b41b:	e8 10 7b ff ff       	call   c0012f30 <Directory::Directory(char const*, Process*)>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	85 f6                	test   esi,esi
c001b425:	74 2f                	je     c001b456 <sysCallOpenDir(regs*)+0x67>
c001b427:	83 ec 0c             	sub    esp,0xc
c001b42a:	56                   	push   esi
c001b42b:	e8 64 7b ff ff       	call   c0012f94 <Directory::open()>
c001b430:	83 c4 10             	add    esp,0x10
c001b433:	85 c0                	test   eax,eax
c001b435:	75 1f                	jne    c001b456 <sysCallOpenDir(regs*)+0x67>
c001b437:	83 ec 0c             	sub    esp,0xc
c001b43a:	56                   	push   esi
c001b43b:	e8 16 59 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b440:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b443:	83 c4 10             	add    esp,0x10
c001b446:	89 02                	mov    DWORD PTR [edx],eax
c001b448:	c1 f8 1f             	sar    eax,0x1f
c001b44b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b44e:	31 c0                	xor    eax,eax
c001b450:	59                   	pop    ecx
c001b451:	31 d2                	xor    edx,edx
c001b453:	5b                   	pop    ebx
c001b454:	5e                   	pop    esi
c001b455:	c3                   	ret    
c001b456:	59                   	pop    ecx
c001b457:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b45c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b461:	5b                   	pop    ebx
c001b462:	5e                   	pop    esi
c001b463:	c3                   	ret    

c001b464 <sysCallCloseDir(regs*)>:
c001b464:	53                   	push   ebx
c001b465:	83 ec 08             	sub    esp,0x8
c001b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b46f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b472:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b478:	77 2f                	ja     c001b4a9 <sysCallCloseDir(regs*)+0x45>
c001b47a:	83 ec 0c             	sub    esp,0xc
c001b47d:	50                   	push   eax
c001b47e:	e8 c8 5b ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b483:	89 c3                	mov    ebx,eax
c001b485:	89 04 24             	mov    DWORD PTR [esp],eax
c001b488:	e8 63 7b ff ff       	call   c0012ff0 <Directory::close()>
c001b48d:	83 c4 10             	add    esp,0x10
c001b490:	85 db                	test   ebx,ebx
c001b492:	74 0c                	je     c001b4a0 <sysCallCloseDir(regs*)+0x3c>
c001b494:	83 ec 0c             	sub    esp,0xc
c001b497:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b499:	53                   	push   ebx
c001b49a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b49d:	83 c4 10             	add    esp,0x10
c001b4a0:	31 c0                	xor    eax,eax
c001b4a2:	31 d2                	xor    edx,edx
c001b4a4:	83 c4 08             	add    esp,0x8
c001b4a7:	5b                   	pop    ebx
c001b4a8:	c3                   	ret    
c001b4a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4b3:	83 c4 08             	add    esp,0x8
c001b4b6:	5b                   	pop    ebx
c001b4b7:	c3                   	ret    

c001b4b8 <sysCallMakeDir(regs*)>:
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	83 ec 10             	sub    esp,0x10
c001b4bd:	68 14 01 00 00       	push   0x114
c001b4c2:	e8 d5 40 ff ff       	call   c000f59c <malloc>
c001b4c7:	83 c4 0c             	add    esp,0xc
c001b4ca:	89 c3                	mov    ebx,eax
c001b4cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4d8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b4db:	53                   	push   ebx
c001b4dc:	e8 4f 7a ff ff       	call   c0012f30 <Directory::Directory(char const*, Process*)>
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	85 db                	test   ebx,ebx
c001b4e6:	74 32                	je     c001b51a <sysCallMakeDir(regs*)+0x62>
c001b4e8:	83 ec 0c             	sub    esp,0xc
c001b4eb:	53                   	push   ebx
c001b4ec:	e8 83 7c ff ff       	call   c0013174 <Directory::create()>
c001b4f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4f4:	89 c6                	mov    esi,eax
c001b4f6:	e8 f5 7a ff ff       	call   c0012ff0 <Directory::close()>
c001b4fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	31 c0                	xor    eax,eax
c001b508:	59                   	pop    ecx
c001b509:	85 f6                	test   esi,esi
c001b50b:	5b                   	pop    ebx
c001b50c:	0f 95 c0             	setne  al
c001b50f:	5e                   	pop    esi
c001b510:	31 d2                	xor    edx,edx
c001b512:	f7 d8                	neg    eax
c001b514:	83 d2 00             	adc    edx,0x0
c001b517:	f7 da                	neg    edx
c001b519:	c3                   	ret    
c001b51a:	59                   	pop    ecx
c001b51b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b520:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b525:	5b                   	pop    ebx
c001b526:	5e                   	pop    esi
c001b527:	c3                   	ret    

c001b528 <sysCallWait(regs*)>:
c001b528:	83 ec 10             	sub    esp,0x10
c001b52b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b52f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b532:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b535:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b538:	e8 af 24 00 00       	call   c001d9ec <waitTask(int, int*, int)>
c001b53d:	83 c4 1c             	add    esp,0x1c
c001b540:	99                   	cdq    
c001b541:	c3                   	ret    

c001b542 <sysCallNotImpl(regs*)>:
c001b542:	83 ec 18             	sub    esp,0x18
c001b545:	68 11 b5 02 c0       	push   0xc002b511
c001b54a:	e8 10 e7 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001b54f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b554:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b559:	83 c4 1c             	add    esp,0x1c
c001b55c:	c3                   	ret    

c001b55d <sysPanic(regs*)>:
c001b55d:	83 ec 18             	sub    esp,0x18
c001b560:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b564:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b567:	e8 f3 e6 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001b56c:	b8 01 00 00 00       	mov    eax,0x1
c001b571:	31 d2                	xor    edx,edx
c001b573:	83 c4 1c             	add    esp,0x1c
c001b576:	c3                   	ret    

c001b577 <sysCallRmdir(regs*)>:
c001b577:	56                   	push   esi
c001b578:	53                   	push   ebx
c001b579:	83 ec 20             	sub    esp,0x20
c001b57c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b580:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b583:	68 14 01 00 00       	push   0x114
c001b588:	e8 0f 40 ff ff       	call   c000f59c <malloc>
c001b58d:	83 c4 0c             	add    esp,0xc
c001b590:	89 c3                	mov    ebx,eax
c001b592:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b597:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b59a:	56                   	push   esi
c001b59b:	53                   	push   ebx
c001b59c:	e8 e3 74 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001b5a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5a4:	e8 b7 76 ff ff       	call   c0012c60 <File::unlink()>
c001b5a9:	83 c4 10             	add    esp,0x10
c001b5ac:	85 db                	test   ebx,ebx
c001b5ae:	74 14                	je     c001b5c4 <sysCallRmdir(regs*)+0x4d>
c001b5b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5b6:	83 ec 0c             	sub    esp,0xc
c001b5b9:	53                   	push   ebx
c001b5ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5c4:	85 c0                	test   eax,eax
c001b5c6:	0f 95 c0             	setne  al
c001b5c9:	31 d2                	xor    edx,edx
c001b5cb:	0f b6 c0             	movzx  eax,al
c001b5ce:	f7 d8                	neg    eax
c001b5d0:	83 d2 00             	adc    edx,0x0
c001b5d3:	83 c4 14             	add    esp,0x14
c001b5d6:	f7 da                	neg    edx
c001b5d8:	5b                   	pop    ebx
c001b5d9:	5e                   	pop    esi
c001b5da:	c3                   	ret    

c001b5db <sysCallUnlink(regs*)>:
c001b5db:	56                   	push   esi
c001b5dc:	53                   	push   ebx
c001b5dd:	83 ec 20             	sub    esp,0x20
c001b5e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5e4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5e7:	68 14 01 00 00       	push   0x114
c001b5ec:	e8 ab 3f ff ff       	call   c000f59c <malloc>
c001b5f1:	83 c4 0c             	add    esp,0xc
c001b5f4:	89 c3                	mov    ebx,eax
c001b5f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5fb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5fe:	56                   	push   esi
c001b5ff:	53                   	push   ebx
c001b600:	e8 7f 74 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001b605:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b608:	e8 53 76 ff ff       	call   c0012c60 <File::unlink()>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	85 db                	test   ebx,ebx
c001b612:	74 14                	je     c001b628 <sysCallUnlink(regs*)+0x4d>
c001b614:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b618:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b61a:	83 ec 0c             	sub    esp,0xc
c001b61d:	53                   	push   ebx
c001b61e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b621:	83 c4 10             	add    esp,0x10
c001b624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b628:	85 c0                	test   eax,eax
c001b62a:	0f 95 c0             	setne  al
c001b62d:	31 d2                	xor    edx,edx
c001b62f:	0f b6 c0             	movzx  eax,al
c001b632:	f7 d8                	neg    eax
c001b634:	83 d2 00             	adc    edx,0x0
c001b637:	83 c4 14             	add    esp,0x14
c001b63a:	f7 da                	neg    edx
c001b63c:	5b                   	pop    ebx
c001b63d:	5e                   	pop    esi
c001b63e:	c3                   	ret    

c001b63f <sysCallGetArgv(regs*)>:
c001b63f:	83 ec 0c             	sub    esp,0xc
c001b642:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b646:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b649:	85 c0                	test   eax,eax
c001b64b:	78 2b                	js     c001b678 <sysCallGetArgv(regs*)+0x39>
c001b64d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b653:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b656:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b65c:	7d 1a                	jge    c001b678 <sysCallGetArgv(regs*)+0x39>
c001b65e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b665:	85 c0                	test   eax,eax
c001b667:	74 17                	je     c001b680 <sysCallGetArgv(regs*)+0x41>
c001b669:	83 ec 08             	sub    esp,0x8
c001b66c:	50                   	push   eax
c001b66d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b670:	e8 97 51 fe ff       	call   c000080c <strcpy>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	31 c0                	xor    eax,eax
c001b67a:	31 d2                	xor    edx,edx
c001b67c:	83 c4 0c             	add    esp,0xc
c001b67f:	c3                   	ret    
c001b680:	b8 01 00 00 00       	mov    eax,0x1
c001b685:	31 d2                	xor    edx,edx
c001b687:	83 c4 0c             	add    esp,0xc
c001b68a:	c3                   	ret    

c001b68b <sysCallTTYName(regs*)>:
c001b68b:	56                   	push   esi
c001b68c:	53                   	push   ebx
c001b68d:	53                   	push   ebx
c001b68e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b692:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b695:	85 c0                	test   eax,eax
c001b697:	74 5f                	je     c001b6f8 <sysCallTTYName(regs*)+0x6d>
c001b699:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b69c:	83 f8 02             	cmp    eax,0x2
c001b69f:	77 3e                	ja     c001b6df <sysCallTTYName(regs*)+0x54>
c001b6a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6a9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b6af:	85 db                	test   ebx,ebx
c001b6b1:	74 45                	je     c001b6f8 <sysCallTTYName(regs*)+0x6d>
c001b6b3:	83 ec 0c             	sub    esp,0xc
c001b6b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6b8:	53                   	push   ebx
c001b6b9:	ff 10                	call   DWORD PTR [eax]
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	84 c0                	test   al,al
c001b6c0:	74 41                	je     c001b703 <sysCallTTYName(regs*)+0x78>
c001b6c2:	83 ec 08             	sub    esp,0x8
c001b6c5:	81 c3 82 00 00 00    	add    ebx,0x82
c001b6cb:	53                   	push   ebx
c001b6cc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6cf:	e8 38 51 fe ff       	call   c000080c <strcpy>
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	31 c0                	xor    eax,eax
c001b6d9:	59                   	pop    ecx
c001b6da:	31 d2                	xor    edx,edx
c001b6dc:	5b                   	pop    ebx
c001b6dd:	5e                   	pop    esi
c001b6de:	c3                   	ret    
c001b6df:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b6e4:	74 bb                	je     c001b6a1 <sysCallTTYName(regs*)+0x16>
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	50                   	push   eax
c001b6ea:	e8 5c 59 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b6ef:	83 c4 10             	add    esp,0x10
c001b6f2:	89 c3                	mov    ebx,eax
c001b6f4:	85 db                	test   ebx,ebx
c001b6f6:	75 bb                	jne    c001b6b3 <sysCallTTYName(regs*)+0x28>
c001b6f8:	59                   	pop    ecx
c001b6f9:	b8 01 00 00 00       	mov    eax,0x1
c001b6fe:	31 d2                	xor    edx,edx
c001b700:	5b                   	pop    ebx
c001b701:	5e                   	pop    esi
c001b702:	c3                   	ret    
c001b703:	59                   	pop    ecx
c001b704:	b8 02 00 00 00       	mov    eax,0x2
c001b709:	31 d2                	xor    edx,edx
c001b70b:	5b                   	pop    ebx
c001b70c:	5e                   	pop    esi
c001b70d:	c3                   	ret    

c001b70e <sysCallUSleep(regs*)>:
c001b70e:	83 ec 14             	sub    esp,0x14
c001b711:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b716:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b71a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b721:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b724:	01 ca                	add    edx,ecx
c001b726:	52                   	push   edx
c001b727:	50                   	push   eax
c001b728:	e8 96 23 00 00       	call   c001dac3 <nanoSleep(unsigned long long)>
c001b72d:	31 c0                	xor    eax,eax
c001b72f:	31 d2                	xor    edx,edx
c001b731:	83 c4 1c             	add    esp,0x1c
c001b734:	c3                   	ret    

c001b735 <sysCallSpawn(regs*)>:
c001b735:	56                   	push   esi
c001b736:	53                   	push   ebx
c001b737:	50                   	push   eax
c001b738:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b73c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b73f:	85 c0                	test   eax,eax
c001b741:	75 08                	jne    c001b74b <sysCallSpawn(regs*)+0x16>
c001b743:	59                   	pop    ecx
c001b744:	31 c0                	xor    eax,eax
c001b746:	31 d2                	xor    edx,edx
c001b748:	5b                   	pop    ebx
c001b749:	5e                   	pop    esi
c001b74a:	c3                   	ret    
c001b74b:	83 ec 0c             	sub    esp,0xc
c001b74e:	68 3f 07 00 00       	push   0x73f
c001b753:	e8 44 3e ff ff       	call   c000f59c <malloc>
c001b758:	83 c4 10             	add    esp,0x10
c001b75b:	89 c6                	mov    esi,eax
c001b75d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b760:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b763:	85 c0                	test   eax,eax
c001b765:	75 32                	jne    c001b799 <sysCallSpawn(regs*)+0x64>
c001b767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b76f:	52                   	push   edx
c001b770:	50                   	push   eax
c001b771:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b774:	56                   	push   esi
c001b775:	e8 6e 1a 00 00       	call   c001d1e8 <Process::Process(char const*, Process*, char**)>
c001b77a:	83 c4 10             	add    esp,0x10
c001b77d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b784:	75 bd                	jne    c001b743 <sysCallSpawn(regs*)+0xe>
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	56                   	push   esi
c001b78a:	e8 3b 1f 00 00       	call   c001d6ca <Process::createUserThread()>
c001b78f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b791:	83 c4 10             	add    esp,0x10
c001b794:	99                   	cdq    
c001b795:	59                   	pop    ecx
c001b796:	5b                   	pop    ebx
c001b797:	5e                   	pop    esi
c001b798:	c3                   	ret    
c001b799:	31 c0                	xor    eax,eax
c001b79b:	eb d2                	jmp    c001b76f <sysCallSpawn(regs*)+0x3a>

c001b79d <sysCallGetEnv(regs*)>:
c001b79d:	57                   	push   edi
c001b79e:	56                   	push   esi
c001b79f:	53                   	push   ebx
c001b7a0:	83 ec 1c             	sub    esp,0x1c
c001b7a3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7ac:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b7af:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7b2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7b5:	e8 f1 e3 ff ff       	call   c0019bab <Krnl::getProcessTotalEnvCount(Process*)>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	39 c7                	cmp    edi,eax
c001b7bf:	7c 14                	jl     c001b7d5 <sysCallGetEnv(regs*)+0x38>
c001b7c1:	85 f6                	test   esi,esi
c001b7c3:	75 0b                	jne    c001b7d0 <sysCallGetEnv(regs*)+0x33>
c001b7c5:	83 c4 10             	add    esp,0x10
c001b7c8:	31 c0                	xor    eax,eax
c001b7ca:	5b                   	pop    ebx
c001b7cb:	31 d2                	xor    edx,edx
c001b7cd:	5e                   	pop    esi
c001b7ce:	5f                   	pop    edi
c001b7cf:	c3                   	ret    
c001b7d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b7d3:	eb f0                	jmp    c001b7c5 <sysCallGetEnv(regs*)+0x28>
c001b7d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7d9:	52                   	push   edx
c001b7da:	57                   	push   edi
c001b7db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b7e1:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b7e4:	50                   	push   eax
c001b7e5:	e8 e1 e3 ff ff       	call   c0019bcb <Krnl::getProcessEnvPair(Process*, int)>
c001b7ea:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b7ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b7f5:	83 c4 0c             	add    esp,0xc
c001b7f8:	85 c9                	test   ecx,ecx
c001b7fa:	75 23                	jne    c001b81f <sysCallGetEnv(regs*)+0x82>
c001b7fc:	83 ec 0c             	sub    esp,0xc
c001b7ff:	50                   	push   eax
c001b800:	e8 67 4f fe ff       	call   c000076c <strlen>
c001b805:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b808:	89 c3                	mov    ebx,eax
c001b80a:	e8 5d 4f fe ff       	call   c000076c <strlen>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	31 d2                	xor    edx,edx
c001b81b:	5b                   	pop    ebx
c001b81c:	5e                   	pop    esi
c001b81d:	5f                   	pop    edi
c001b81e:	c3                   	ret    
c001b81f:	83 ec 08             	sub    esp,0x8
c001b822:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b825:	50                   	push   eax
c001b826:	56                   	push   esi
c001b827:	e8 e0 4f fe ff       	call   c000080c <strcpy>
c001b82c:	58                   	pop    eax
c001b82d:	5a                   	pop    edx
c001b82e:	68 2b b5 02 c0       	push   0xc002b52b
c001b833:	56                   	push   esi
c001b834:	e8 13 51 fe ff       	call   c000094c <strcat>
c001b839:	59                   	pop    ecx
c001b83a:	5b                   	pop    ebx
c001b83b:	57                   	push   edi
c001b83c:	56                   	push   esi
c001b83d:	e8 0a 51 fe ff       	call   c000094c <strcat>
c001b842:	83 c4 10             	add    esp,0x10
c001b845:	e9 7b ff ff ff       	jmp    c001b7c5 <sysCallGetEnv(regs*)+0x28>

c001b84a <sysAppSettings(regs*)>:
c001b84a:	57                   	push   edi
c001b84b:	56                   	push   esi
c001b84c:	56                   	push   esi
c001b84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b851:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b854:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b85a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b85f:	66 3d c0 09          	cmp    ax,0x9c0
c001b863:	75 2e                	jne    c001b893 <sysAppSettings(regs*)+0x49>
c001b865:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b86b:	83 e0 1f             	and    eax,0x1f
c001b86e:	3c 01                	cmp    al,0x1
c001b870:	74 2c                	je     c001b89e <sysAppSettings(regs*)+0x54>
c001b872:	3c 07                	cmp    al,0x7
c001b874:	0f 84 b3 00 00 00    	je     c001b92d <sysAppSettings(regs*)+0xe3>
c001b87a:	84 c0                	test   al,al
c001b87c:	0f 84 d2 00 00 00    	je     c001b954 <sysAppSettings(regs*)+0x10a>
c001b882:	3c 08                	cmp    al,0x8
c001b884:	74 63                	je     c001b8e9 <sysAppSettings(regs*)+0x9f>
c001b886:	59                   	pop    ecx
c001b887:	0f b6 c0             	movzx  eax,al
c001b88a:	5e                   	pop    esi
c001b88b:	05 e8 03 00 00       	add    eax,0x3e8
c001b890:	5f                   	pop    edi
c001b891:	99                   	cdq    
c001b892:	c3                   	ret    
c001b893:	b8 01 00 00 00       	mov    eax,0x1
c001b898:	59                   	pop    ecx
c001b899:	31 d2                	xor    edx,edx
c001b89b:	5e                   	pop    esi
c001b89c:	5f                   	pop    edi
c001b89d:	c3                   	ret    
c001b89e:	50                   	push   eax
c001b89f:	68 00 01 00 00       	push   0x100
c001b8a4:	6a 00                	push   0x0
c001b8a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ae:	83 c0 0c             	add    eax,0xc
c001b8b1:	50                   	push   eax
c001b8b2:	e8 99 4e fe ff       	call   c0000750 <memset>
c001b8b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8bc:	b9 ff 00 00 00       	mov    ecx,0xff
c001b8c1:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b8c4:	83 c7 0c             	add    edi,0xc
c001b8c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ce:	5a                   	pop    edx
c001b8cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8d2:	59                   	pop    ecx
c001b8d3:	8d 50 0c             	lea    edx,[eax+0xc]
c001b8d6:	52                   	push   edx
c001b8d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b8dd:	e8 94 48 ff ff       	call   c0010176 <VgaText::setTitle(char*)>
c001b8e2:	83 c4 10             	add    esp,0x10
c001b8e5:	31 c0                	xor    eax,eax
c001b8e7:	eb af                	jmp    c001b898 <sysAppSettings(regs*)+0x4e>
c001b8e9:	83 ec 08             	sub    esp,0x8
c001b8ec:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b8f2:	83 e0 0f             	and    eax,0xf
c001b8f5:	50                   	push   eax
c001b8f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b904:	e8 5d 48 ff ff       	call   c0010166 <VgaText::setTitleColour(VgaColour)>
c001b909:	5f                   	pop    edi
c001b90a:	58                   	pop    eax
c001b90b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b911:	c1 e8 04             	shr    eax,0x4
c001b914:	83 e0 0f             	and    eax,0xf
c001b917:	50                   	push   eax
c001b918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b920:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b926:	e8 2b 48 ff ff       	call   c0010156 <VgaText::setTitleTextColour(VgaColour)>
c001b92b:	eb b5                	jmp    c001b8e2 <sysAppSettings(regs*)+0x98>
c001b92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b932:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b935:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b93b:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001b941:	c0 e8 06             	shr    al,0x6
c001b944:	83 e0 01             	and    eax,0x1
c001b947:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001b94d:	31 c0                	xor    eax,eax
c001b94f:	e9 44 ff ff ff       	jmp    c001b898 <sysAppSettings(regs*)+0x4e>
c001b954:	b8 02 00 00 00       	mov    eax,0x2
c001b959:	e9 3a ff ff ff       	jmp    c001b898 <sysAppSettings(regs*)+0x4e>

c001b95e <sysSetFatAttrib(regs*)>:
c001b95e:	57                   	push   edi
c001b95f:	56                   	push   esi
c001b960:	53                   	push   ebx
c001b961:	83 ec 1c             	sub    esp,0x1c
c001b964:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b968:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b96b:	68 14 01 00 00       	push   0x114
c001b970:	e8 27 3c ff ff       	call   c000f59c <malloc>
c001b975:	83 c4 0c             	add    esp,0xc
c001b978:	89 c3                	mov    ebx,eax
c001b97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b982:	57                   	push   edi
c001b983:	53                   	push   ebx
c001b984:	e8 fb 70 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001b989:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b98c:	83 c4 0c             	add    esp,0xc
c001b98f:	0f b6 d4             	movzx  edx,ah
c001b992:	0f b6 c0             	movzx  eax,al
c001b995:	52                   	push   edx
c001b996:	50                   	push   eax
c001b997:	53                   	push   ebx
c001b998:	e8 5d 73 ff ff       	call   c0012cfa <File::chfatattr(unsigned char, unsigned char)>
c001b99d:	83 c4 10             	add    esp,0x10
c001b9a0:	85 db                	test   ebx,ebx
c001b9a2:	74 14                	je     c001b9b8 <sysSetFatAttrib(regs*)+0x5a>
c001b9a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9aa:	83 ec 0c             	sub    esp,0xc
c001b9ad:	53                   	push   ebx
c001b9ae:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b8:	85 c0                	test   eax,eax
c001b9ba:	0f 95 c0             	setne  al
c001b9bd:	31 d2                	xor    edx,edx
c001b9bf:	0f b6 c0             	movzx  eax,al
c001b9c2:	f7 d8                	neg    eax
c001b9c4:	83 d2 00             	adc    edx,0x0
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	f7 da                	neg    edx
c001b9cc:	5b                   	pop    ebx
c001b9cd:	5e                   	pop    esi
c001b9ce:	5f                   	pop    edi
c001b9cf:	c3                   	ret    

c001b9d0 <sysPipe(regs*)>:
c001b9d0:	57                   	push   edi
c001b9d1:	56                   	push   esi
c001b9d2:	53                   	push   ebx
c001b9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d7:	83 ec 0c             	sub    esp,0xc
c001b9da:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b9dd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b9e0:	6a 20                	push   0x20
c001b9e2:	e8 b5 3b ff ff       	call   c000f59c <malloc>
c001b9e7:	89 c3                	mov    ebx,eax
c001b9e9:	58                   	pop    eax
c001b9ea:	5a                   	pop    edx
c001b9eb:	68 00 50 00 00       	push   0x5000
c001b9f0:	53                   	push   ebx
c001b9f1:	e8 f8 44 ff ff       	call   c000feee <Pipe::Pipe(int)>
c001b9f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9f9:	e8 58 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b9fe:	89 07                	mov    DWORD PTR [edi],eax
c001ba00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba03:	e8 4e 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	89 06                	mov    DWORD PTR [esi],eax
c001ba0d:	31 d2                	xor    edx,edx
c001ba0f:	5b                   	pop    ebx
c001ba10:	31 c0                	xor    eax,eax
c001ba12:	5e                   	pop    esi
c001ba13:	5f                   	pop    edi
c001ba14:	c3                   	ret    

c001ba15 <sysGetUnixTime(regs*)>:
c001ba15:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001ba1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba24:	e9 4d 7a ff ff       	jmp    c0013476 <Clock::timeInSecondsLocal()>

c001ba29 <string_ends_with(char const*, char const*)>:
c001ba29:	57                   	push   edi
c001ba2a:	56                   	push   esi
c001ba2b:	53                   	push   ebx
c001ba2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba30:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	53                   	push   ebx
c001ba38:	e8 2f 4d fe ff       	call   c000076c <strlen>
c001ba3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba40:	89 c6                	mov    esi,eax
c001ba42:	e8 25 4d fe ff       	call   c000076c <strlen>
c001ba47:	83 c4 10             	add    esp,0x10
c001ba4a:	39 c6                	cmp    esi,eax
c001ba4c:	7d 06                	jge    c001ba54 <string_ends_with(char const*, char const*)+0x2b>
c001ba4e:	5b                   	pop    ebx
c001ba4f:	31 c0                	xor    eax,eax
c001ba51:	5e                   	pop    esi
c001ba52:	5f                   	pop    edi
c001ba53:	c3                   	ret    
c001ba54:	83 ec 08             	sub    esp,0x8
c001ba57:	29 c6                	sub    esi,eax
c001ba59:	57                   	push   edi
c001ba5a:	01 f3                	add    ebx,esi
c001ba5c:	53                   	push   ebx
c001ba5d:	e8 36 4e fe ff       	call   c0000898 <strcmp>
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	85 c0                	test   eax,eax
c001ba67:	5b                   	pop    ebx
c001ba68:	0f 94 c0             	sete   al
c001ba6b:	5e                   	pop    esi
c001ba6c:	0f b6 c0             	movzx  eax,al
c001ba6f:	5f                   	pop    edi
c001ba70:	c3                   	ret    

c001ba71 <sysCallOpen(regs*)>:
c001ba71:	56                   	push   esi
c001ba72:	53                   	push   ebx
c001ba73:	81 ec 04 01 00 00    	sub    esp,0x104
c001ba79:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001ba80:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001ba83:	85 c9                	test   ecx,ecx
c001ba85:	0f 84 ad 01 00 00    	je     c001bc38 <sysCallOpen(regs*)+0x1c7>
c001ba8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ba8e:	85 c0                	test   eax,eax
c001ba90:	0f 84 a2 01 00 00    	je     c001bc38 <sysCallOpen(regs*)+0x1c7>
c001ba96:	52                   	push   edx
c001ba97:	68 2d b5 02 c0       	push   0xc002b52d
c001ba9c:	50                   	push   eax
c001ba9d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001baa1:	56                   	push   esi
c001baa2:	e8 33 6e ff ff       	call   c00128da <Fs::standardiseFiles(char*, char const*, char const*)>
c001baa7:	89 34 24             	mov    DWORD PTR [esp],esi
c001baaa:	e8 bd 4c fe ff       	call   c000076c <strlen>
c001baaf:	83 c4 10             	add    esp,0x10
c001bab2:	48                   	dec    eax
c001bab3:	74 1d                	je     c001bad2 <sysCallOpen(regs*)+0x61>
c001bab5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bab8:	eb 0f                	jmp    c001bac9 <sysCallOpen(regs*)+0x58>
c001baba:	80 fa 3a             	cmp    dl,0x3a
c001babd:	74 0f                	je     c001bace <sysCallOpen(regs*)+0x5d>
c001babf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bac3:	48                   	dec    eax
c001bac4:	74 0c                	je     c001bad2 <sysCallOpen(regs*)+0x61>
c001bac6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bac9:	80 fa 2e             	cmp    dl,0x2e
c001bacc:	75 ec                	jne    c001baba <sysCallOpen(regs*)+0x49>
c001bace:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bad2:	83 ec 08             	sub    esp,0x8
c001bad5:	68 31 b5 02 c0       	push   0xc002b531
c001bada:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001badd:	e8 47 ff ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bae2:	83 c4 10             	add    esp,0x10
c001bae5:	85 c0                	test   eax,eax
c001bae7:	74 1d                	je     c001bb06 <sysCallOpen(regs*)+0x95>
c001bae9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baec:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001baf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baf9:	81 c4 04 01 00 00    	add    esp,0x104
c001baff:	31 c0                	xor    eax,eax
c001bb01:	31 d2                	xor    edx,edx
c001bb03:	5b                   	pop    ebx
c001bb04:	5e                   	pop    esi
c001bb05:	c3                   	ret    
c001bb06:	83 ec 08             	sub    esp,0x8
c001bb09:	68 36 b5 02 c0       	push   0xc002b536
c001bb0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb11:	e8 13 ff ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bb16:	83 c4 10             	add    esp,0x10
c001bb19:	85 c0                	test   eax,eax
c001bb1b:	75 cc                	jne    c001bae9 <sysCallOpen(regs*)+0x78>
c001bb1d:	83 ec 08             	sub    esp,0x8
c001bb20:	68 32 b5 02 c0       	push   0xc002b532
c001bb25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb28:	e8 6b 4d fe ff       	call   c0000898 <strcmp>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	85 c0                	test   eax,eax
c001bb32:	74 b5                	je     c001bae9 <sysCallOpen(regs*)+0x78>
c001bb34:	83 ec 08             	sub    esp,0x8
c001bb37:	68 31 b5 02 c0       	push   0xc002b531
c001bb3c:	56                   	push   esi
c001bb3d:	e8 e7 fe ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	85 c0                	test   eax,eax
c001bb47:	75 a0                	jne    c001bae9 <sysCallOpen(regs*)+0x78>
c001bb49:	83 ec 08             	sub    esp,0x8
c001bb4c:	68 3b b5 02 c0       	push   0xc002b53b
c001bb51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb54:	e8 d0 fe ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bb59:	83 c4 10             	add    esp,0x10
c001bb5c:	85 c0                	test   eax,eax
c001bb5e:	0f 85 e7 00 00 00    	jne    c001bc4b <sysCallOpen(regs*)+0x1da>
c001bb64:	83 ec 08             	sub    esp,0x8
c001bb67:	68 40 b5 02 c0       	push   0xc002b540
c001bb6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb6f:	e8 b5 fe ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	85 c0                	test   eax,eax
c001bb79:	0f 85 cc 00 00 00    	jne    c001bc4b <sysCallOpen(regs*)+0x1da>
c001bb7f:	83 ec 08             	sub    esp,0x8
c001bb82:	68 3c b5 02 c0       	push   0xc002b53c
c001bb87:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb8a:	e8 09 4d fe ff       	call   c0000898 <strcmp>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	85 c0                	test   eax,eax
c001bb94:	0f 84 b1 00 00 00    	je     c001bc4b <sysCallOpen(regs*)+0x1da>
c001bb9a:	83 ec 08             	sub    esp,0x8
c001bb9d:	68 3b b5 02 c0       	push   0xc002b53b
c001bba2:	56                   	push   esi
c001bba3:	e8 81 fe ff ff       	call   c001ba29 <string_ends_with(char const*, char const*)>
c001bba8:	83 c4 10             	add    esp,0x10
c001bbab:	85 c0                	test   eax,eax
c001bbad:	0f 85 98 00 00 00    	jne    c001bc4b <sysCallOpen(regs*)+0x1da>
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	68 14 01 00 00       	push   0x114
c001bbbb:	e8 dc 39 ff ff       	call   c000f59c <malloc>
c001bbc0:	83 c4 0c             	add    esp,0xc
c001bbc3:	89 c6                	mov    esi,eax
c001bbc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbca:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbcd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbd0:	56                   	push   esi
c001bbd1:	e8 ae 6e ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001bbd6:	83 c4 10             	add    esp,0x10
c001bbd9:	85 f6                	test   esi,esi
c001bbdb:	74 5b                	je     c001bc38 <sysCallOpen(regs*)+0x1c7>
c001bbdd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bbe0:	0f b6 c2             	movzx  eax,dl
c001bbe3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bbe6:	89 d0                	mov    eax,edx
c001bbe8:	83 e0 01             	and    eax,0x1
c001bbeb:	f6 c2 02             	test   dl,0x2
c001bbee:	74 03                	je     c001bbf3 <sysCallOpen(regs*)+0x182>
c001bbf0:	83 c8 02             	or     eax,0x2
c001bbf3:	f6 c2 04             	test   dl,0x4
c001bbf6:	74 03                	je     c001bbfb <sysCallOpen(regs*)+0x18a>
c001bbf8:	83 c8 04             	or     eax,0x4
c001bbfb:	f6 c2 08             	test   dl,0x8
c001bbfe:	74 03                	je     c001bc03 <sysCallOpen(regs*)+0x192>
c001bc00:	83 c8 0a             	or     eax,0xa
c001bc03:	83 e2 10             	and    edx,0x10
c001bc06:	74 03                	je     c001bc0b <sysCallOpen(regs*)+0x19a>
c001bc08:	83 c8 12             	or     eax,0x12
c001bc0b:	83 ec 08             	sub    esp,0x8
c001bc0e:	50                   	push   eax
c001bc0f:	56                   	push   esi
c001bc10:	e8 d3 6e ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	85 c0                	test   eax,eax
c001bc1a:	75 1c                	jne    c001bc38 <sysCallOpen(regs*)+0x1c7>
c001bc1c:	83 ec 0c             	sub    esp,0xc
c001bc1f:	56                   	push   esi
c001bc20:	e8 31 51 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001bc25:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	89 02                	mov    DWORD PTR [edx],eax
c001bc2d:	c1 f8 1f             	sar    eax,0x1f
c001bc30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc33:	e9 c1 fe ff ff       	jmp    c001baf9 <sysCallOpen(regs*)+0x88>
c001bc38:	81 c4 04 01 00 00    	add    esp,0x104
c001bc3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc43:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc48:	5b                   	pop    ebx
c001bc49:	5e                   	pop    esi
c001bc4a:	c3                   	ret    
c001bc4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc4e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bc54:	e9 99 fe ff ff       	jmp    c001baf2 <sysCallOpen(regs*)+0x81>

c001bc59 <Sys::loadSyscalls()>:
c001bc59:	c7 05 00 01 03 c0 c6 ae 01 c0 	mov    DWORD PTR ds:0xc0030100,0xc001aec6
c001bc63:	c7 05 04 01 03 c0 be aa 01 c0 	mov    DWORD PTR ds:0xc0030104,0xc001aabe
c001bc6d:	c7 05 08 01 03 c0 ac ac 01 c0 	mov    DWORD PTR ds:0xc0030108,0xc001acac
c001bc77:	c7 05 0c 01 03 c0 fc ad 01 c0 	mov    DWORD PTR ds:0xc003010c,0xc001adfc
c001bc81:	c7 05 10 01 03 c0 44 ac 01 c0 	mov    DWORD PTR ds:0xc0030110,0xc001ac44
c001bc8b:	c7 05 14 01 03 c0 f5 aa 01 c0 	mov    DWORD PTR ds:0xc0030114,0xc001aaf5
c001bc95:	c7 05 18 01 03 c0 d6 aa 01 c0 	mov    DWORD PTR ds:0xc0030118,0xc001aad6
c001bc9f:	c7 05 1c 01 03 c0 01 ad 01 c0 	mov    DWORD PTR ds:0xc003011c,0xc001ad01
c001bca9:	c7 05 24 01 03 c0 8f b3 01 c0 	mov    DWORD PTR ds:0xc0030124,0xc001b38f
c001bcb3:	c7 05 20 01 03 c0 71 ba 01 c0 	mov    DWORD PTR ds:0xc0030120,0xc001ba71
c001bcbd:	c7 05 28 01 03 c0 ef b3 01 c0 	mov    DWORD PTR ds:0xc0030128,0xc001b3ef
c001bcc7:	c7 05 2c 01 03 c0 d2 b0 01 c0 	mov    DWORD PTR ds:0xc003012c,0xc001b0d2
c001bcd1:	c7 05 30 01 03 c0 0c af 01 c0 	mov    DWORD PTR ds:0xc0030130,0xc001af0c
c001bcdb:	c7 05 34 01 03 c0 11 af 01 c0 	mov    DWORD PTR ds:0xc0030134,0xc001af11
c001bce5:	c7 05 38 01 03 c0 b8 b4 01 c0 	mov    DWORD PTR ds:0xc0030138,0xc001b4b8
c001bcef:	c7 05 3c 01 03 c0 64 b4 01 c0 	mov    DWORD PTR ds:0xc003013c,0xc001b464
c001bcf9:	c7 05 40 01 03 c0 ab b1 01 c0 	mov    DWORD PTR ds:0xc0030140,0xc001b1ab
c001bd03:	c7 05 44 01 03 c0 02 b2 01 c0 	mov    DWORD PTR ds:0xc0030144,0xc001b202
c001bd0d:	c7 05 48 01 03 c0 6e b2 01 c0 	mov    DWORD PTR ds:0xc0030148,0xc001b26e
c001bd17:	c7 05 4c 01 03 c0 16 af 01 c0 	mov    DWORD PTR ds:0xc003014c,0xc001af16
c001bd21:	c7 05 50 01 03 c0 28 b5 01 c0 	mov    DWORD PTR ds:0xc0030150,0xc001b528
c001bd2b:	c7 05 54 01 03 c0 42 b5 01 c0 	mov    DWORD PTR ds:0xc0030154,0xc001b542
c001bd35:	c7 05 58 01 03 c0 42 b5 01 c0 	mov    DWORD PTR ds:0xc0030158,0xc001b542
c001bd3f:	c7 05 5c 01 03 c0 77 b5 01 c0 	mov    DWORD PTR ds:0xc003015c,0xc001b577
c001bd49:	c7 05 60 01 03 c0 db b5 01 c0 	mov    DWORD PTR ds:0xc0030160,0xc001b5db
c001bd53:	c7 05 64 01 03 c0 20 af 01 c0 	mov    DWORD PTR ds:0xc0030164,0xc001af20
c001bd5d:	c7 05 68 01 03 c0 3f b6 01 c0 	mov    DWORD PTR ds:0xc0030168,0xc001b63f
c001bd67:	c7 05 6c 01 03 c0 8f b0 01 c0 	mov    DWORD PTR ds:0xc003016c,0xc001b08f
c001bd71:	c7 05 70 01 03 c0 8b b6 01 c0 	mov    DWORD PTR ds:0xc0030170,0xc001b68b
c001bd7b:	c7 05 74 01 03 c0 51 b1 01 c0 	mov    DWORD PTR ds:0xc0030174,0xc001b151
c001bd85:	c7 05 78 01 03 c0 0e b7 01 c0 	mov    DWORD PTR ds:0xc0030178,0xc001b70e
c001bd8f:	c7 05 7c 01 03 c0 e0 b2 01 c0 	mov    DWORD PTR ds:0xc003017c,0xc001b2e0
c001bd99:	c7 05 80 01 03 c0 35 b7 01 c0 	mov    DWORD PTR ds:0xc0030180,0xc001b735
c001bda3:	c7 05 84 01 03 c0 9d b7 01 c0 	mov    DWORD PTR ds:0xc0030184,0xc001b79d
c001bdad:	c7 05 88 01 03 c0 4a b8 01 c0 	mov    DWORD PTR ds:0xc0030188,0xc001b84a
c001bdb7:	c7 05 8c 01 03 c0 30 af 01 c0 	mov    DWORD PTR ds:0xc003018c,0xc001af30
c001bdc1:	c7 05 90 01 03 c0 9a af 01 c0 	mov    DWORD PTR ds:0xc0030190,0xc001af9a
c001bdcb:	c7 05 94 01 03 c0 e0 af 01 c0 	mov    DWORD PTR ds:0xc0030194,0xc001afe0
c001bdd5:	c7 05 98 01 03 c0 5e b9 01 c0 	mov    DWORD PTR ds:0xc0030198,0xc001b95e
c001bddf:	c7 05 9c 01 03 c0 5d b5 01 c0 	mov    DWORD PTR ds:0xc003019c,0xc001b55d
c001bde9:	c7 05 a0 01 03 c0 31 b0 01 c0 	mov    DWORD PTR ds:0xc00301a0,0xc001b031
c001bdf3:	c7 05 a4 01 03 c0 d0 b9 01 c0 	mov    DWORD PTR ds:0xc00301a4,0xc001b9d0
c001bdfd:	c7 05 a8 01 03 c0 15 ba 01 c0 	mov    DWORD PTR ds:0xc00301a8,0xc001ba15
c001be07:	c7 05 ac 01 03 c0 9c ab 01 c0 	mov    DWORD PTR ds:0xc00301ac,0xc001ab9c
c001be11:	c7 05 b0 01 03 c0 1d ad 01 c0 	mov    DWORD PTR ds:0xc00301b0,0xc001ad1d
c001be1b:	c7 05 b4 01 03 c0 b2 ad 01 c0 	mov    DWORD PTR ds:0xc00301b4,0xc001adb2
c001be25:	c7 05 b8 01 03 c0 88 aa 01 c0 	mov    DWORD PTR ds:0xc00301b8,0xc001aa88
c001be2f:	c7 05 bc 01 03 c0 64 ae 01 c0 	mov    DWORD PTR ds:0xc00301bc,0xc001ae64
c001be39:	c7 05 c0 01 03 c0 01 ab 01 c0 	mov    DWORD PTR ds:0xc00301c0,0xc001ab01
c001be43:	c7 05 c4 01 03 c0 18 ab 01 c0 	mov    DWORD PTR ds:0xc00301c4,0xc001ab18
c001be4d:	c3                   	ret    

c001be4e <Sys::systemCall(regs*, void*)>:
c001be4e:	53                   	push   ebx
c001be4f:	83 ec 08             	sub    esp,0x8
c001be52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001be59:	83 f8 7f             	cmp    eax,0x7f
c001be5c:	77 16                	ja     c001be74 <Sys::systemCall(regs*, void*)+0x26>
c001be5e:	8b 14 85 00 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff00]
c001be65:	85 d2                	test   edx,edx
c001be67:	74 0b                	je     c001be74 <Sys::systemCall(regs*, void*)+0x26>
c001be69:	83 ec 0c             	sub    esp,0xc
c001be6c:	53                   	push   ebx
c001be6d:	ff d2                	call   edx
c001be6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001be72:	eb 0d                	jmp    c001be81 <Sys::systemCall(regs*, void*)+0x33>
c001be74:	52                   	push   edx
c001be75:	52                   	push   edx
c001be76:	50                   	push   eax
c001be77:	68 45 b5 02 c0       	push   0xc002b545
c001be7c:	e8 a4 66 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001be89:	31 d2                	xor    edx,edx
c001be8b:	83 c4 08             	add    esp,0x8
c001be8e:	5b                   	pop    ebx
c001be8f:	c3                   	ret    

c001be90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001be90:	55                   	push   ebp
c001be91:	57                   	push   edi
c001be92:	56                   	push   esi
c001be93:	53                   	push   ebx
c001be94:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001be9a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bea1:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bea8:	85 c0                	test   eax,eax
c001beaa:	0f 95 c1             	setne  cl
c001bead:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001beb5:	0f 94 c2             	sete   dl
c001beb8:	84 d1                	test   cl,dl
c001beba:	74 23                	je     c001bedf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bebc:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bec2:	74 1b                	je     c001bedf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bec4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001beca:	89 da                	mov    edx,ebx
c001becc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bed2:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bed8:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bedf:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bee6:	05 ff 0f 00 00       	add    eax,0xfff
c001beeb:	83 ec 0c             	sub    esp,0xc
c001beee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bef2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bef8:	c1 e8 0c             	shr    eax,0xc
c001befb:	89 fe                	mov    esi,edi
c001befd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf01:	c1 ee 0c             	shr    esi,0xc
c001bf04:	6a 01                	push   0x1
c001bf06:	e8 96 52 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001bf0b:	89 c5                	mov    ebp,eax
c001bf0d:	58                   	pop    eax
c001bf0e:	5a                   	pop    edx
c001bf0f:	56                   	push   esi
c001bf10:	68 59 b5 02 c0       	push   0xc002b559
c001bf15:	e8 0b 66 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001bf1a:	59                   	pop    ecx
c001bf1b:	58                   	pop    eax
c001bf1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf20:	68 6b b5 02 c0       	push   0xc002b56b
c001bf25:	e8 fb 65 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001bf2a:	83 c4 10             	add    esp,0x10
c001bf2d:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001bf33:	0f 86 31 01 00 00    	jbe    c001c06a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001bf39:	c1 e6 0c             	shl    esi,0xc
c001bf3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf3f:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001bf42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf46:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001bf4d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf50:	01 df                	add    edi,ebx
c001bf52:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001bf55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001bf59:	0f 84 08 01 00 00    	je     c001c067 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001bf5f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001bf65:	76 05                	jbe    c001bf6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001bf67:	bf 00 10 00 00       	mov    edi,0x1000
c001bf6c:	83 ec 0c             	sub    esp,0xc
c001bf6f:	31 d2                	xor    edx,edx
c001bf71:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf78:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf7a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bf7e:	50                   	push   eax
c001bf7f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001bf83:	56                   	push   esi
c001bf84:	52                   	push   edx
c001bf85:	57                   	push   edi
c001bf86:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001bf8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf90:	83 c4 20             	add    esp,0x20
c001bf93:	85 c0                	test   eax,eax
c001bf95:	74 0a                	je     c001bfa1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001bf97:	53                   	push   ebx
c001bf98:	53                   	push   ebx
c001bf99:	50                   	push   eax
c001bf9a:	68 7d b5 02 c0       	push   0xc002b57d
c001bf9f:	eb 0f                	jmp    c001bfb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001bfa1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001bfa5:	74 20                	je     c001bfc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001bfa7:	51                   	push   ecx
c001bfa8:	51                   	push   ecx
c001bfa9:	6a 00                	push   0x0
c001bfab:	68 a8 b5 02 c0       	push   0xc002b5a8
c001bfb0:	e8 70 65 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001bfb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfb8:	e8 2a 56 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001bfbd:	83 c4 10             	add    esp,0x10
c001bfc0:	31 c0                	xor    eax,eax
c001bfc2:	e9 68 01 00 00       	jmp    c001c12f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001bfc7:	fa                   	cli    
c001bfc8:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001bfce:	e8 6d 39 ff ff       	call   c000f940 <Phys::allocatePage()>
c001bfd3:	6a 07                	push   0x7
c001bfd5:	89 c7                	mov    edi,eax
c001bfd7:	55                   	push   ebp
c001bfd8:	50                   	push   eax
c001bfd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfde:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfe1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bfe7:	e8 72 59 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001bfec:	83 c4 0c             	add    esp,0xc
c001bfef:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001bff6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bffc:	6a 00                	push   0x0
c001bffe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c003:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c006:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c00c:	e8 a7 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c011:	58                   	pop    eax
c001c012:	5a                   	pop    edx
c001c013:	68 07 0c 00 00       	push   0xc07
c001c018:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c01c:	57                   	push   edi
c001c01d:	89 ef                	mov    edi,ebp
c001c01f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c026:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c02c:	6a 00                	push   0x0
c001c02e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c033:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c036:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c03c:	e8 d9 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c041:	b9 00 10 00 00       	mov    ecx,0x1000
c001c046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c048:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001c04d:	83 c4 20             	add    esp,0x20
c001c050:	48                   	dec    eax
c001c051:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001c056:	85 c0                	test   eax,eax
c001c058:	75 01                	jne    c001c05b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c05a:	fb                   	sti    
c001c05b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c062:	e9 df fe ff ff       	jmp    c001bf46 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c067:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c06a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c072:	0f 86 a9 00 00 00    	jbe    c001c121 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c078:	fa                   	cli    
c001c079:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001c07f:	51                   	push   ecx
c001c080:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c087:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c08d:	6a 00                	push   0x0
c001c08f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c094:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c097:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c09d:	e8 16 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c0a6:	c1 e6 0c             	shl    esi,0xc
c001c0a9:	01 de                	add    esi,ebx
c001c0ab:	83 c4 10             	add    esp,0x10
c001c0ae:	39 de                	cmp    esi,ebx
c001c0b0:	74 61                	je     c001c113 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c0b2:	e8 89 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c0b7:	6a 07                	push   0x7
c001c0b9:	89 c7                	mov    edi,eax
c001c0bb:	55                   	push   ebp
c001c0bc:	50                   	push   eax
c001c0bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0cb:	e8 8e 58 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0d0:	58                   	pop    eax
c001c0d1:	5a                   	pop    edx
c001c0d2:	68 07 0c 00 00       	push   0xc07
c001c0d7:	53                   	push   ebx
c001c0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0de:	57                   	push   edi
c001c0df:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c0e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0ec:	6a 00                	push   0x0
c001c0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0fc:	e8 19 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c101:	83 c4 1c             	add    esp,0x1c
c001c104:	68 00 10 00 00       	push   0x1000
c001c109:	6a 00                	push   0x0
c001c10b:	55                   	push   ebp
c001c10c:	e8 3f 46 fe ff       	call   c0000750 <memset>
c001c111:	eb 98                	jmp    c001c0ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c113:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001c118:	48                   	dec    eax
c001c119:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001c11e:	75 01                	jne    c001c121 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c120:	fb                   	sti    
c001c121:	83 ec 0c             	sub    esp,0xc
c001c124:	55                   	push   ebp
c001c125:	e8 bd 54 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001c12a:	83 c4 10             	add    esp,0x10
c001c12d:	b0 01                	mov    al,0x1
c001c12f:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c135:	5b                   	pop    ebx
c001c136:	5e                   	pop    esi
c001c137:	5f                   	pop    edi
c001c138:	5d                   	pop    ebp
c001c139:	c3                   	ret    

c001c13a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c13a:	55                   	push   ebp
c001c13b:	57                   	push   edi
c001c13c:	56                   	push   esi
c001c13d:	53                   	push   ebx
c001c13e:	83 ec 48             	sub    esp,0x48
c001c141:	68 14 01 00 00       	push   0x114
c001c146:	e8 51 34 ff ff       	call   c000f59c <malloc>
c001c14b:	83 c4 0c             	add    esp,0xc
c001c14e:	89 c6                	mov    esi,eax
c001c150:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c154:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c158:	50                   	push   eax
c001c159:	e8 26 69 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001c15e:	58                   	pop    eax
c001c15f:	5a                   	pop    edx
c001c160:	6a 01                	push   0x1
c001c162:	56                   	push   esi
c001c163:	e8 80 69 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	85 c0                	test   eax,eax
c001c16d:	0f 85 47 01 00 00    	jne    c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c173:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c17b:	83 ec 0c             	sub    esp,0xc
c001c17e:	6a 34                	push   0x34
c001c180:	e8 17 34 ff ff       	call   c000f59c <malloc>
c001c185:	89 c3                	mov    ebx,eax
c001c187:	58                   	pop    eax
c001c188:	8b 06                	mov    eax,DWORD PTR [esi]
c001c18a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c18e:	57                   	push   edi
c001c18f:	53                   	push   ebx
c001c190:	6a 00                	push   0x0
c001c192:	6a 34                	push   0x34
c001c194:	56                   	push   esi
c001c195:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c198:	83 c4 20             	add    esp,0x20
c001c19b:	85 c0                	test   eax,eax
c001c19d:	0f 85 17 01 00 00    	jne    c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1a3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1a9:	0f 85 0b 01 00 00    	jne    c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1b2:	85 c0                	test   eax,eax
c001c1b4:	0f 84 00 01 00 00    	je     c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1ba:	31 d2                	xor    edx,edx
c001c1bc:	55                   	push   ebp
c001c1bd:	52                   	push   edx
c001c1be:	50                   	push   eax
c001c1bf:	56                   	push   esi
c001c1c0:	e8 e1 69 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	85 c0                	test   eax,eax
c001c1ca:	0f 85 ea 00 00 00    	jne    c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1d0:	83 ec 0c             	sub    esp,0xc
c001c1d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c1d6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c1da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c1de:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c1e2:	0f af c2             	imul   eax,edx
c001c1e5:	50                   	push   eax
c001c1e6:	e8 b1 33 ff ff       	call   c000f59c <malloc>
c001c1eb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c1ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c1f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1f8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c1fc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c200:	0f af c2             	imul   eax,edx
c001c203:	99                   	cdq    
c001c204:	52                   	push   edx
c001c205:	50                   	push   eax
c001c206:	56                   	push   esi
c001c207:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c20a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c20d:	83 c4 20             	add    esp,0x20
c001c210:	85 c0                	test   eax,eax
c001c212:	0f 84 a2 00 00 00    	je     c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c218:	31 d2                	xor    edx,edx
c001c21a:	51                   	push   ecx
c001c21b:	52                   	push   edx
c001c21c:	50                   	push   eax
c001c21d:	56                   	push   esi
c001c21e:	e8 83 69 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c223:	83 c4 10             	add    esp,0x10
c001c226:	85 c0                	test   eax,eax
c001c228:	0f 85 8c 00 00 00    	jne    c001c2ba <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c235:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c239:	31 ed                	xor    ebp,ebp
c001c23b:	0f af c2             	imul   eax,edx
c001c23e:	50                   	push   eax
c001c23f:	e8 58 33 ff ff       	call   c000f59c <malloc>
c001c244:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c246:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c24a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c251:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c255:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c259:	0f af c2             	imul   eax,edx
c001c25c:	99                   	cdq    
c001c25d:	52                   	push   edx
c001c25e:	50                   	push   eax
c001c25f:	56                   	push   esi
c001c260:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c263:	83 c4 20             	add    esp,0x20
c001c266:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c26e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c272:	0f 86 80 00 00 00    	jbe    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c278:	0f b7 fd             	movzx  edi,bp
c001c27b:	c1 e7 05             	shl    edi,0x5
c001c27e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c282:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c285:	75 6b                	jne    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c287:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c28a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c28e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c295:	52                   	push   edx
c001c296:	31 d2                	xor    edx,edx
c001c298:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c29b:	52                   	push   edx
c001c29c:	50                   	push   eax
c001c29d:	56                   	push   esi
c001c29e:	e8 03 69 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c2a3:	83 c4 10             	add    esp,0x10
c001c2a6:	85 c0                	test   eax,eax
c001c2a8:	74 17                	je     c001c2c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	68 d4 b5 02 c0       	push   0xc002b5d4
c001c2b2:	e8 6e 62 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001c2b7:	83 c4 10             	add    esp,0x10
c001c2ba:	31 c0                	xor    eax,eax
c001c2bc:	e9 87 00 00 00       	jmp    c001c348 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2c1:	83 ec 0c             	sub    esp,0xc
c001c2c4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2c7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c2ca:	50                   	push   eax
c001c2cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2d3:	56                   	push   esi
c001c2d4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c2d8:	e8 b3 fb ff ff       	call   c001be90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c2dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2e1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c2e5:	83 c4 20             	add    esp,0x20
c001c2e8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c2ec:	73 04                	jae    c001c2f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2f2:	45                   	inc    ebp
c001c2f3:	e9 76 ff ff ff       	jmp    c001c26e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c2f8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c2fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c304:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c313:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c318:	05 00 10 00 00       	add    eax,0x1000
c001c31d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c324:	e8 83 32 ff ff       	call   c000f5ac <free>
c001c329:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c32c:	e8 7b 32 ff ff       	call   c000f5ac <free>
c001c331:	58                   	pop    eax
c001c332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c336:	e8 71 32 ff ff       	call   c000f5ac <free>
c001c33b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c33e:	e8 03 68 ff ff       	call   c0012b46 <File::close()>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	b0 01                	mov    al,0x1
c001c348:	83 c4 3c             	add    esp,0x3c
c001c34b:	5b                   	pop    ebx
c001c34c:	5e                   	pop    esi
c001c34d:	5f                   	pop    edi
c001c34e:	5d                   	pop    ebp
c001c34f:	c3                   	ret    

c001c350 <Thr::runtimeReferenceHelper()>:
c001c350:	83 ec 18             	sub    esp,0x18
c001c353:	68 dc b5 02 c0       	push   0xc002b5dc
c001c358:	e8 c8 61 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001c35d:	fa                   	cli    
c001c35e:	83 c4 10             	add    esp,0x10
c001c361:	eb fe                	jmp    c001c361 <Thr::runtimeReferenceHelper()+0x11>

c001c363 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c363:	57                   	push   edi
c001c364:	56                   	push   esi
c001c365:	53                   	push   ebx
c001c366:	31 db                	xor    ebx,ebx
c001c368:	39 1d a0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030aa0,ebx
c001c36e:	7e 3c                	jle    c001c3ac <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c370:	8b 34 9d 20 0a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf5e0]
c001c377:	31 ff                	xor    edi,edi
c001c379:	39 3c 9d 20 09 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf6e0],edi
c001c380:	7e 27                	jle    c001c3a9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c382:	50                   	push   eax
c001c383:	50                   	push   eax
c001c384:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c388:	8b 06                	mov    eax,DWORD PTR [esi]
c001c38a:	03 04 9d a0 09 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf660]
c001c391:	50                   	push   eax
c001c392:	e8 01 45 fe ff       	call   c0000898 <strcmp>
c001c397:	83 c4 10             	add    esp,0x10
c001c39a:	85 c0                	test   eax,eax
c001c39c:	75 05                	jne    c001c3a3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c39e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3a1:	eb 0b                	jmp    c001c3ae <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3a3:	83 c6 10             	add    esi,0x10
c001c3a6:	47                   	inc    edi
c001c3a7:	eb d0                	jmp    c001c379 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3a9:	43                   	inc    ebx
c001c3aa:	eb bc                	jmp    c001c368 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3ac:	31 c0                	xor    eax,eax
c001c3ae:	5b                   	pop    ebx
c001c3af:	5e                   	pop    esi
c001c3b0:	5f                   	pop    edi
c001c3b1:	c3                   	ret    

c001c3b2 <Thr::loadKernelSymbolTable(char const*)>:
c001c3b2:	55                   	push   ebp
c001c3b3:	57                   	push   edi
c001c3b4:	56                   	push   esi
c001c3b5:	53                   	push   ebx
c001c3b6:	83 ec 68             	sub    esp,0x68
c001c3b9:	8b 35 f0 0a 03 c0    	mov    esi,DWORD PTR ds:0xc0030af0
c001c3bf:	68 14 01 00 00       	push   0x114
c001c3c4:	e8 d3 31 ff ff       	call   c000f59c <malloc>
c001c3c9:	83 c4 0c             	add    esp,0xc
c001c3cc:	89 c3                	mov    ebx,eax
c001c3ce:	56                   	push   esi
c001c3cf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c3d3:	50                   	push   eax
c001c3d4:	e8 ab 66 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001c3d9:	5e                   	pop    esi
c001c3da:	5f                   	pop    edi
c001c3db:	6a 01                	push   0x1
c001c3dd:	53                   	push   ebx
c001c3de:	e8 05 67 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	85 c0                	test   eax,eax
c001c3e8:	74 0a                	je     c001c3f4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	68 fe b5 02 c0       	push   0xc002b5fe
c001c3f2:	eb 34                	jmp    c001c428 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c3f4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c3fc:	83 ec 0c             	sub    esp,0xc
c001c3ff:	6a 34                	push   0x34
c001c401:	e8 96 31 ff ff       	call   c000f59c <malloc>
c001c406:	59                   	pop    ecx
c001c407:	89 c7                	mov    edi,eax
c001c409:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c40d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c40f:	56                   	push   esi
c001c410:	57                   	push   edi
c001c411:	6a 00                	push   0x0
c001c413:	6a 34                	push   0x34
c001c415:	53                   	push   ebx
c001c416:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c419:	83 c4 20             	add    esp,0x20
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 17                	je     c001c437 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	68 15 b6 02 c0       	push   0xc002b615
c001c428:	e8 32 d8 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001c42d:	83 c4 10             	add    esp,0x10
c001c430:	31 c0                	xor    eax,eax
c001c432:	e9 31 02 00 00       	jmp    c001c668 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c437:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c43d:	75 e1                	jne    c001c420 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c43f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c442:	85 c0                	test   eax,eax
c001c444:	74 da                	je     c001c420 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c446:	52                   	push   edx
c001c447:	31 d2                	xor    edx,edx
c001c449:	52                   	push   edx
c001c44a:	50                   	push   eax
c001c44b:	53                   	push   ebx
c001c44c:	e8 55 67 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	85 c0                	test   eax,eax
c001c456:	75 c8                	jne    c001c420 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c45f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c463:	31 ed                	xor    ebp,ebp
c001c465:	0f af c2             	imul   eax,edx
c001c468:	50                   	push   eax
c001c469:	e8 2e 31 ff ff       	call   c000f59c <malloc>
c001c46e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c470:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c474:	89 34 24             	mov    DWORD PTR [esp],esi
c001c477:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c47b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c47f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c483:	0f af c2             	imul   eax,edx
c001c486:	99                   	cdq    
c001c487:	52                   	push   edx
c001c488:	50                   	push   eax
c001c489:	53                   	push   ebx
c001c48a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c48d:	83 c4 20             	add    esp,0x20
c001c490:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c498:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4b0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4b4:	0f 86 aa 00 00 00    	jbe    c001c564 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4ba:	0f b7 f5             	movzx  esi,bp
c001c4bd:	6b f6 28             	imul   esi,esi,0x28
c001c4c0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4cb:	50                   	push   eax
c001c4cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c4d0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c4d4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c4d6:	6b c0 28             	imul   eax,eax,0x28
c001c4d9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c4dd:	89 d0                	mov    eax,edx
c001c4df:	31 d2                	xor    edx,edx
c001c4e1:	52                   	push   edx
c001c4e2:	50                   	push   eax
c001c4e3:	53                   	push   ebx
c001c4e4:	e8 bd 66 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c4e9:	83 c4 0c             	add    esp,0xc
c001c4ec:	6a 20                	push   0x20
c001c4ee:	6a 00                	push   0x0
c001c4f0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c4f4:	52                   	push   edx
c001c4f5:	e8 56 42 fe ff       	call   c0000750 <memset>
c001c4fa:	58                   	pop    eax
c001c4fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4fd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c501:	51                   	push   ecx
c001c502:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c506:	52                   	push   edx
c001c507:	6a 00                	push   0x0
c001c509:	6a 1f                	push   0x1f
c001c50b:	53                   	push   ebx
c001c50c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c50f:	83 c4 18             	add    esp,0x18
c001c512:	68 2c b6 02 c0       	push   0xc002b62c
c001c517:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c51b:	52                   	push   edx
c001c51c:	e8 77 43 fe ff       	call   c0000898 <strcmp>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	85 c0                	test   eax,eax
c001c526:	75 0f                	jne    c001c537 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c528:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c52b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c52f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c537:	50                   	push   eax
c001c538:	50                   	push   eax
c001c539:	68 34 b6 02 c0       	push   0xc002b634
c001c53e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c542:	50                   	push   eax
c001c543:	e8 50 43 fe ff       	call   c0000898 <strcmp>
c001c548:	83 c4 10             	add    esp,0x10
c001c54b:	85 c0                	test   eax,eax
c001c54d:	75 0f                	jne    c001c55e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c54f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c552:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c556:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c55a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c55e:	45                   	inc    ebp
c001c55f:	e9 4c ff ff ff       	jmp    c001c4b0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c564:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c569:	75 10                	jne    c001c57b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c56b:	83 ec 0c             	sub    esp,0xc
c001c56e:	68 3c b6 02 c0       	push   0xc002b63c
c001c573:	e8 e7 d6 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001c578:	83 c4 10             	add    esp,0x10
c001c57b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c580:	75 10                	jne    c001c592 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c582:	83 ec 0c             	sub    esp,0xc
c001c585:	68 3c b6 02 c0       	push   0xc002b63c
c001c58a:	e8 d0 d6 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	31 d2                	xor    edx,edx
c001c594:	50                   	push   eax
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	52                   	push   edx
c001c59a:	50                   	push   eax
c001c59b:	53                   	push   ebx
c001c59c:	e8 05 66 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c5a1:	5a                   	pop    edx
c001c5a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5a6:	e8 f1 2f ff ff       	call   c000f59c <malloc>
c001c5ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5b3:	31 c9                	xor    ecx,ecx
c001c5b5:	5e                   	pop    esi
c001c5b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5b8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5bc:	55                   	push   ebp
c001c5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c1:	51                   	push   ecx
c001c5c2:	52                   	push   edx
c001c5c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5c7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c5cb:	53                   	push   ebx
c001c5cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5cf:	83 c4 14             	add    esp,0x14
c001c5d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5d6:	e8 c1 2f ff ff       	call   c000f59c <malloc>
c001c5db:	89 c6                	mov    esi,eax
c001c5dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5e2:	56                   	push   esi
c001c5e3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5eb:	51                   	push   ecx
c001c5ec:	52                   	push   edx
c001c5ed:	53                   	push   ebx
c001c5ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5f5:	8b 15 a0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa0
c001c5fb:	83 c4 1c             	add    esp,0x1c
c001c5fe:	c1 e8 04             	shr    eax,0x4
c001c601:	89 04 95 20 09 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf6e0],eax
c001c608:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c60c:	31 d2                	xor    edx,edx
c001c60e:	52                   	push   edx
c001c60f:	50                   	push   eax
c001c610:	53                   	push   ebx
c001c611:	e8 90 65 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c616:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c618:	31 d2                	xor    edx,edx
c001c61a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c61d:	56                   	push   esi
c001c61e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c622:	52                   	push   edx
c001c623:	50                   	push   eax
c001c624:	53                   	push   ebx
c001c625:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c628:	83 c4 14             	add    esp,0x14
c001c62b:	53                   	push   ebx
c001c62c:	e8 15 65 ff ff       	call   c0012b46 <File::close()>
c001c631:	5d                   	pop    ebp
c001c632:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c636:	e8 71 2f ff ff       	call   c000f5ac <free>
c001c63b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c63e:	e8 69 2f ff ff       	call   c000f5ac <free>
c001c643:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001c648:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c64c:	8d 50 01             	lea    edx,[eax+0x1]
c001c64f:	89 0c 85 20 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5e0],ecx
c001c656:	89 34 85 a0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf660],esi
c001c65d:	89 15 a0 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa0,edx
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	b0 01                	mov    al,0x1
c001c668:	83 c4 5c             	add    esp,0x5c
c001c66b:	5b                   	pop    ebx
c001c66c:	5e                   	pop    esi
c001c66d:	5f                   	pop    edi
c001c66e:	5d                   	pop    ebp
c001c66f:	c3                   	ret    

c001c670 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c670:	55                   	push   ebp
c001c671:	57                   	push   edi
c001c672:	56                   	push   esi
c001c673:	53                   	push   ebx
c001c674:	81 ec 68 03 00 00    	sub    esp,0x368
c001c67a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c681:	8b 1d f0 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030af0
c001c687:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c68b:	68 14 01 00 00       	push   0x114
c001c690:	e8 07 2f ff ff       	call   c000f59c <malloc>
c001c695:	83 c4 0c             	add    esp,0xc
c001c698:	89 c5                	mov    ebp,eax
c001c69a:	53                   	push   ebx
c001c69b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6a2:	50                   	push   eax
c001c6a3:	e8 dc 63 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001c6a8:	5e                   	pop    esi
c001c6a9:	5f                   	pop    edi
c001c6aa:	6a 01                	push   0x1
c001c6ac:	55                   	push   ebp
c001c6ad:	e8 36 64 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001c6b2:	83 c4 10             	add    esp,0x10
c001c6b5:	85 c0                	test   eax,eax
c001c6b7:	0f 85 a7 06 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6bd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6c5:	83 ec 0c             	sub    esp,0xc
c001c6c8:	6a 34                	push   0x34
c001c6ca:	e8 cd 2e ff ff       	call   c000f59c <malloc>
c001c6cf:	5b                   	pop    ebx
c001c6d0:	89 c7                	mov    edi,eax
c001c6d2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c6d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6d9:	53                   	push   ebx
c001c6da:	57                   	push   edi
c001c6db:	6a 00                	push   0x0
c001c6dd:	6a 34                	push   0x34
c001c6df:	55                   	push   ebp
c001c6e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6e3:	83 c4 20             	add    esp,0x20
c001c6e6:	85 c0                	test   eax,eax
c001c6e8:	0f 85 76 06 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6ee:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c6f4:	0f 85 6a 06 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6fa:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	0f 84 5f 06 00 00    	je     c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c705:	31 d2                	xor    edx,edx
c001c707:	51                   	push   ecx
c001c708:	52                   	push   edx
c001c709:	50                   	push   eax
c001c70a:	55                   	push   ebp
c001c70b:	e8 96 64 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c710:	83 c4 10             	add    esp,0x10
c001c713:	85 c0                	test   eax,eax
c001c715:	0f 85 49 06 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c71b:	83 ec 0c             	sub    esp,0xc
c001c71e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c721:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c725:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c729:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c72d:	0f af c2             	imul   eax,edx
c001c730:	50                   	push   eax
c001c731:	e8 66 2e ff ff       	call   c000f59c <malloc>
c001c736:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c739:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c73d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c740:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c744:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c748:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c74c:	0f af c2             	imul   eax,edx
c001c74f:	99                   	cdq    
c001c750:	52                   	push   edx
c001c751:	50                   	push   eax
c001c752:	55                   	push   ebp
c001c753:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c756:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c759:	83 c4 20             	add    esp,0x20
c001c75c:	85 c0                	test   eax,eax
c001c75e:	0f 84 00 06 00 00    	je     c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c764:	52                   	push   edx
c001c765:	31 d2                	xor    edx,edx
c001c767:	52                   	push   edx
c001c768:	50                   	push   eax
c001c769:	55                   	push   ebp
c001c76a:	e8 37 64 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	85 c0                	test   eax,eax
c001c774:	0f 85 ea 05 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c77a:	83 ec 0c             	sub    esp,0xc
c001c77d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c781:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c785:	31 f6                	xor    esi,esi
c001c787:	0f af c2             	imul   eax,edx
c001c78a:	50                   	push   eax
c001c78b:	e8 0c 2e ff ff       	call   c000f59c <malloc>
c001c790:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c793:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c797:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c79a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c79e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7a2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7a6:	0f af c2             	imul   eax,edx
c001c7a9:	99                   	cdq    
c001c7aa:	52                   	push   edx
c001c7ab:	50                   	push   eax
c001c7ac:	55                   	push   ebp
c001c7ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7b0:	83 c4 20             	add    esp,0x20
c001c7b3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7b7:	0f 86 8a 00 00 00    	jbe    c001c847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7bd:	0f b7 de             	movzx  ebx,si
c001c7c0:	c1 e3 05             	shl    ebx,0x5
c001c7c3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7c7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c7ca:	75 75                	jne    c001c841 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c7cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c7cf:	31 d2                	xor    edx,edx
c001c7d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7dc:	50                   	push   eax
c001c7dd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c7e0:	52                   	push   edx
c001c7e1:	50                   	push   eax
c001c7e2:	55                   	push   ebp
c001c7e3:	e8 be 63 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	85 c0                	test   eax,eax
c001c7ed:	0f 85 71 05 00 00    	jne    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7f3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c7fa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7fd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c801:	31 d2                	xor    edx,edx
c001c803:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c807:	83 ec 0c             	sub    esp,0xc
c001c80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c80e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c815:	50                   	push   eax
c001c816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c81e:	52                   	push   edx
c001c81f:	50                   	push   eax
c001c820:	55                   	push   ebp
c001c821:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c824:	83 c4 1c             	add    esp,0x1c
c001c827:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c82a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c82d:	50                   	push   eax
c001c82e:	6a 00                	push   0x0
c001c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c834:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c838:	50                   	push   eax
c001c839:	e8 12 3f fe ff       	call   c0000750 <memset>
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	46                   	inc    esi
c001c842:	e9 6c ff ff ff       	jmp    c001c7b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c847:	53                   	push   ebx
c001c848:	31 db                	xor    ebx,ebx
c001c84a:	68 00 01 00 00       	push   0x100
c001c84f:	6a 00                	push   0x0
c001c851:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c855:	50                   	push   eax
c001c856:	e8 f5 3e fe ff       	call   c0000750 <memset>
c001c85b:	83 c4 0c             	add    esp,0xc
c001c85e:	68 00 01 00 00       	push   0x100
c001c863:	6a 00                	push   0x0
c001c865:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c86c:	50                   	push   eax
c001c86d:	e8 de 3e fe ff       	call   c0000750 <memset>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c87d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c885:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c88d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c895:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c89d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8a1:	0f 86 30 01 00 00    	jbe    c001c9d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8a7:	0f b7 f3             	movzx  esi,bx
c001c8aa:	6b f6 28             	imul   esi,esi,0x28
c001c8ad:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8b1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b8:	52                   	push   edx
c001c8b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8bd:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8c3:	6b d2 28             	imul   edx,edx,0x28
c001c8c6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c8ca:	31 d2                	xor    edx,edx
c001c8cc:	52                   	push   edx
c001c8cd:	50                   	push   eax
c001c8ce:	55                   	push   ebp
c001c8cf:	e8 d2 62 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c8d4:	83 c4 0c             	add    esp,0xc
c001c8d7:	6a 20                	push   0x20
c001c8d9:	6a 00                	push   0x0
c001c8db:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c8e2:	51                   	push   ecx
c001c8e3:	e8 68 3e fe ff       	call   c0000750 <memset>
c001c8e8:	59                   	pop    ecx
c001c8e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c8f0:	52                   	push   edx
c001c8f1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c8f8:	51                   	push   ecx
c001c8f9:	6a 00                	push   0x0
c001c8fb:	6a 1f                	push   0x1f
c001c8fd:	55                   	push   ebp
c001c8fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c901:	83 c4 1c             	add    esp,0x1c
c001c904:	6a 09                	push   0x9
c001c906:	68 56 b6 02 c0       	push   0xc002b656
c001c90b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c912:	51                   	push   ecx
c001c913:	e8 34 3d fe ff       	call   c000064c <memcmp>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	85 c0                	test   eax,eax
c001c91d:	75 21                	jne    c001c940 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c91f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c923:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c927:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c92b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c92f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c932:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c939:	89 d0                	mov    eax,edx
c001c93b:	40                   	inc    eax
c001c93c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c940:	50                   	push   eax
c001c941:	6a 09                	push   0x9
c001c943:	68 60 b6 02 c0       	push   0xc002b660
c001c948:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c94f:	50                   	push   eax
c001c950:	e8 f7 3c fe ff       	call   c000064c <memcmp>
c001c955:	83 c4 10             	add    esp,0x10
c001c958:	85 c0                	test   eax,eax
c001c95a:	75 21                	jne    c001c97d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c95c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c960:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c964:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c96c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c96f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c976:	89 d0                	mov    eax,edx
c001c978:	40                   	inc    eax
c001c979:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c97d:	50                   	push   eax
c001c97e:	50                   	push   eax
c001c97f:	68 2c b6 02 c0       	push   0xc002b62c
c001c984:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c98b:	50                   	push   eax
c001c98c:	e8 07 3f fe ff       	call   c0000898 <strcmp>
c001c991:	83 c4 10             	add    esp,0x10
c001c994:	85 c0                	test   eax,eax
c001c996:	75 0f                	jne    c001c9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c998:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c99b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9a7:	50                   	push   eax
c001c9a8:	50                   	push   eax
c001c9a9:	68 34 b6 02 c0       	push   0xc002b634
c001c9ae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9b5:	50                   	push   eax
c001c9b6:	e8 dd 3e fe ff       	call   c0000898 <strcmp>
c001c9bb:	83 c4 10             	add    esp,0x10
c001c9be:	85 c0                	test   eax,eax
c001c9c0:	75 0f                	jne    c001c9d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9cd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c9d1:	43                   	inc    ebx
c001c9d2:	e9 c6 fe ff ff       	jmp    c001c89d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c9d7:	31 d2                	xor    edx,edx
c001c9d9:	50                   	push   eax
c001c9da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9de:	52                   	push   edx
c001c9df:	50                   	push   eax
c001c9e0:	55                   	push   ebp
c001c9e1:	e8 c0 61 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001c9e6:	58                   	pop    eax
c001c9e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9eb:	e8 ac 2b ff ff       	call   c000f59c <malloc>
c001c9f0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9f3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c9f7:	31 d2                	xor    edx,edx
c001c9f9:	58                   	pop    eax
c001c9fa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c9fe:	53                   	push   ebx
c001c9ff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca07:	52                   	push   edx
c001ca08:	50                   	push   eax
c001ca09:	55                   	push   ebp
c001ca0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca0d:	83 c4 14             	add    esp,0x14
c001ca10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca14:	e8 83 2b ff ff       	call   c000f59c <malloc>
c001ca19:	31 d2                	xor    edx,edx
c001ca1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca1f:	83 c4 0c             	add    esp,0xc
c001ca22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca26:	52                   	push   edx
c001ca27:	50                   	push   eax
c001ca28:	55                   	push   ebp
c001ca29:	e8 78 61 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001ca2e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca31:	31 d2                	xor    edx,edx
c001ca33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca3e:	52                   	push   edx
c001ca3f:	50                   	push   eax
c001ca40:	55                   	push   ebp
c001ca41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca44:	83 c4 20             	add    esp,0x20
c001ca47:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca53:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca57:	0f 84 0b 03 00 00    	je     c001cd68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ca5d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca64:	31 d2                	xor    edx,edx
c001ca66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca6a:	c1 e8 03             	shr    eax,0x3
c001ca6d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ca71:	51                   	push   ecx
c001ca72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca76:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ca7a:	52                   	push   edx
c001ca7b:	50                   	push   eax
c001ca7c:	55                   	push   ebp
c001ca7d:	e8 24 61 ff ff       	call   c0012ba6 <File::seek(unsigned long long)>
c001ca82:	5b                   	pop    ebx
c001ca83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca87:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ca8e:	e8 09 2b ff ff       	call   c000f59c <malloc>
c001ca93:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca9a:	31 d2                	xor    edx,edx
c001ca9c:	5e                   	pop    esi
c001ca9d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001caa1:	50                   	push   eax
c001caa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001caaa:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cab1:	52                   	push   edx
c001cab2:	50                   	push   eax
c001cab3:	55                   	push   ebp
c001cab4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cab7:	83 c4 20             	add    esp,0x20
c001caba:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cac2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cac6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001caca:	0f 8d 7c 02 00 00    	jge    c001cd4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cad8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cadd:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cae0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cae4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cae8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001caec:	89 d8                	mov    eax,ebx
c001caee:	c1 e8 08             	shr    eax,0x8
c001caf1:	89 c6                	mov    esi,eax
c001caf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001caf7:	c1 e6 04             	shl    esi,0x4
c001cafa:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cafe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb01:	85 d2                	test   edx,edx
c001cb03:	0f 85 bf 00 00 00    	jne    c001cbc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb09:	83 ec 0c             	sub    esp,0xc
c001cb0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb10:	03 06                	add    eax,DWORD PTR [esi]
c001cb12:	50                   	push   eax
c001cb13:	e8 4b f8 ff ff       	call   c001c363 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb18:	83 c4 10             	add    esp,0x10
c001cb1b:	89 c2                	mov    edx,eax
c001cb1d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb22:	85 c0                	test   eax,eax
c001cb24:	0f 85 9e 00 00 00    	jne    c001cbc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb31:	03 06                	add    eax,DWORD PTR [esi]
c001cb33:	50                   	push   eax
c001cb34:	e8 06 1a ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cb39:	83 c4 10             	add    esp,0x10
c001cb3c:	89 c2                	mov    edx,eax
c001cb3e:	85 c0                	test   eax,eax
c001cb40:	0f 85 82 00 00 00    	jne    c001cbc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb46:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb4a:	50                   	push   eax
c001cb4b:	50                   	push   eax
c001cb4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb50:	03 06                	add    eax,DWORD PTR [esi]
c001cb52:	50                   	push   eax
c001cb53:	68 6a b6 02 c0       	push   0xc002b66a
c001cb58:	e8 c8 59 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001cb5d:	58                   	pop    eax
c001cb5e:	5a                   	pop    edx
c001cb5f:	68 84 b6 02 c0       	push   0xc002b684
c001cb64:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb6b:	50                   	push   eax
c001cb6c:	e8 9b 3c fe ff       	call   c000080c <strcpy>
c001cb71:	59                   	pop    ecx
c001cb72:	58                   	pop    eax
c001cb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb77:	03 06                	add    eax,DWORD PTR [esi]
c001cb79:	50                   	push   eax
c001cb7a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb81:	50                   	push   eax
c001cb82:	e8 c5 3d fe ff       	call   c000094c <strcat>
c001cb87:	58                   	pop    eax
c001cb88:	5a                   	pop    edx
c001cb89:	68 1a b7 02 c0       	push   0xc002b71a
c001cb8e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb95:	50                   	push   eax
c001cb96:	e8 b1 3d fe ff       	call   c000094c <strcat>
c001cb9b:	83 c4 10             	add    esp,0x10
c001cb9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cba3:	0f 84 5d 01 00 00    	je     c001cd06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cba9:	83 ec 0c             	sub    esp,0xc
c001cbac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbb3:	50                   	push   eax
c001cbb4:	e8 a6 d0 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001cbb9:	83 c4 10             	add    esp,0x10
c001cbbc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbc0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbc4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cbc8:	80 fb 01             	cmp    bl,0x1
c001cbcb:	0f 85 88 00 00 00    	jne    c001cc59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cbd1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cbd8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbdc:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cbe0:	01 ce                	add    esi,ecx
c001cbe2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cbe8:	0f 94 c0             	sete   al
c001cbeb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cbf1:	0f 94 c3             	sete   bl
c001cbf4:	09 c3                	or     ebx,eax
c001cbf6:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbf8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cbfd:	74 41                	je     c001cc40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cbff:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc02:	84 db                	test   bl,bl
c001cc04:	75 15                	jne    c001cc1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cc06:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc0a:	66 83 f8 0c          	cmp    ax,0xc
c001cc0e:	76 05                	jbe    c001cc15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cc10:	b8 0c 00 00 00       	mov    eax,0xc
c001cc15:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc19:	76 37                	jbe    c001cc52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc1b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc1f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc24:	0f 84 dc 00 00 00    	je     c001cd06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	68 9b b6 02 c0       	push   0xc002b69b
c001cc32:	e8 28 d0 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001cc37:	83 c4 10             	add    esp,0x10
c001cc3a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc3e:	eb 12                	jmp    c001cc52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc40:	01 c1                	add    ecx,eax
c001cc42:	84 db                	test   bl,bl
c001cc44:	75 0c                	jne    c001cc52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc4a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc4e:	77 02                	ja     c001cc52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc50:	01 d1                	add    ecx,edx
c001cc52:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc54:	e9 ea 00 00 00       	jmp    c001cd43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cc59:	80 fb 02             	cmp    bl,0x2
c001cc5c:	75 7c                	jne    c001ccda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cc5e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc65:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc69:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc6d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc73:	74 20                	je     c001cc95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc75:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc7b:	74 18                	je     c001cc95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc7d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc81:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc86:	66 83 f8 0e          	cmp    ax,0xe
c001cc8a:	77 03                	ja     c001cc8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cc8c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cc8f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cc93:	76 1f                	jbe    c001ccb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cc95:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cc99:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc9e:	74 66                	je     c001cd06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cca0:	83 ec 0c             	sub    esp,0xc
c001cca3:	68 b7 b6 02 c0       	push   0xc002b6b7
c001cca8:	e8 b2 cf ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccb4:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccb6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccbb:	74 13                	je     c001ccd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ccbd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccc1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ccc8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cccc:	01 c8                	add    eax,ecx
c001ccce:	eb 04                	jmp    c001ccd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ccd0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ccd4:	01 c2                	add    edx,eax
c001ccd6:	89 16                	mov    DWORD PTR [esi],edx
c001ccd8:	eb 69                	jmp    c001cd43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ccda:	0f b6 db             	movzx  ebx,bl
c001ccdd:	50                   	push   eax
c001ccde:	50                   	push   eax
c001ccdf:	53                   	push   ebx
c001cce0:	68 d3 b6 02 c0       	push   0xc002b6d3
c001cce5:	e8 3b 58 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001ccea:	83 c4 10             	add    esp,0x10
c001cced:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccf2:	74 12                	je     c001cd06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccf4:	83 ec 0c             	sub    esp,0xc
c001ccf7:	68 de b6 02 c0       	push   0xc002b6de
c001ccfc:	e8 5e cf ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	eb 3d                	jmp    c001cd43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	55                   	push   ebp
c001cd0a:	e8 37 5e ff ff       	call   c0012b46 <File::close()>
c001cd0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd12:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd18:	59                   	pop    ecx
c001cd19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd1d:	e8 8a 28 ff ff       	call   c000f5ac <free>
c001cd22:	5b                   	pop    ebx
c001cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd27:	e8 80 28 ff ff       	call   c000f5ac <free>
c001cd2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd2f:	e8 78 28 ff ff       	call   c000f5ac <free>
c001cd34:	5e                   	pop    esi
c001cd35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd39:	e8 6e 28 ff ff       	call   c000f5ac <free>
c001cd3e:	83 c4 10             	add    esp,0x10
c001cd41:	eb 21                	jmp    c001cd64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd43:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd47:	e9 76 fd ff ff       	jmp    c001cac2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd53:	e8 54 28 ff ff       	call   c000f5ac <free>
c001cd58:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	e9 eb fc ff ff       	jmp    c001ca4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd64:	31 c0                	xor    eax,eax
c001cd66:	eb 33                	jmp    c001cd9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cd68:	83 ec 0c             	sub    esp,0xc
c001cd6b:	55                   	push   ebp
c001cd6c:	e8 d5 5d ff ff       	call   c0012b46 <File::close()>
c001cd71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd74:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd7a:	58                   	pop    eax
c001cd7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd7f:	e8 28 28 ff ff       	call   c000f5ac <free>
c001cd84:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd87:	e8 20 28 ff ff       	call   c000f5ac <free>
c001cd8c:	5a                   	pop    edx
c001cd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd91:	e8 16 28 ff ff       	call   c000f5ac <free>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	b0 01                	mov    al,0x1
c001cd9b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cda1:	5b                   	pop    ebx
c001cda2:	5e                   	pop    esi
c001cda3:	5f                   	pop    edi
c001cda4:	5d                   	pop    ebp
c001cda5:	c3                   	ret    

c001cda6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cda6:	56                   	push   esi
c001cda7:	31 d2                	xor    edx,edx
c001cda9:	53                   	push   ebx
c001cdaa:	8b 1d 00 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030300
c001cdb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdb4:	39 d3                	cmp    ebx,edx
c001cdb6:	7e 1b                	jle    c001cdd3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cdb8:	8b 04 95 20 05 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcfae0]
c001cdbf:	39 c8                	cmp    eax,ecx
c001cdc1:	77 0d                	ja     c001cdd0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cdc3:	8b 34 95 20 03 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfce0]
c001cdca:	01 c6                	add    esi,eax
c001cdcc:	39 ce                	cmp    esi,ecx
c001cdce:	77 05                	ja     c001cdd5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cdd0:	42                   	inc    edx
c001cdd1:	eb e1                	jmp    c001cdb4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cdd3:	31 c0                	xor    eax,eax
c001cdd5:	5b                   	pop    ebx
c001cdd6:	5e                   	pop    esi
c001cdd7:	c3                   	ret    

c001cdd8 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cdd8:	53                   	push   ebx
c001cdd9:	31 c0                	xor    eax,eax
c001cddb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cddf:	8b 1d 00 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030300
c001cde5:	39 c3                	cmp    ebx,eax
c001cde7:	7e 22                	jle    c001ce0b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cde9:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c001cdf0:	39 ca                	cmp    edx,ecx
c001cdf2:	77 14                	ja     c001ce08 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cdf4:	03 14 85 20 03 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfce0]
c001cdfb:	39 ca                	cmp    edx,ecx
c001cdfd:	76 09                	jbe    c001ce08 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cdff:	8b 04 85 20 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8e0]
c001ce06:	eb 05                	jmp    c001ce0d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce08:	40                   	inc    eax
c001ce09:	eb da                	jmp    c001cde5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce0b:	31 c0                	xor    eax,eax
c001ce0d:	5b                   	pop    ebx
c001ce0e:	c3                   	ret    

c001ce0f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce0f:	53                   	push   ebx
c001ce10:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce14:	53                   	push   ebx
c001ce15:	e8 8c ff ff ff       	call   c001cda6 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce1a:	5a                   	pop    edx
c001ce1b:	31 d2                	xor    edx,edx
c001ce1d:	85 c0                	test   eax,eax
c001ce1f:	74 04                	je     c001ce25 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce21:	89 da                	mov    edx,ebx
c001ce23:	29 c2                	sub    edx,eax
c001ce25:	89 d0                	mov    eax,edx
c001ce27:	5b                   	pop    ebx
c001ce28:	c3                   	ret    

c001ce29 <Thr::loadDLL(char const*, bool)>:
c001ce29:	55                   	push   ebp
c001ce2a:	57                   	push   edi
c001ce2b:	56                   	push   esi
c001ce2c:	53                   	push   ebx
c001ce2d:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce33:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce3a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001ce41:	56                   	push   esi
c001ce42:	68 f6 b6 02 c0       	push   0xc002b6f6
c001ce47:	e8 d9 56 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001ce4c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce53:	e8 44 27 ff ff       	call   c000f59c <malloc>
c001ce58:	83 c4 0c             	add    esp,0xc
c001ce5b:	89 c3                	mov    ebx,eax
c001ce5d:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001ce63:	56                   	push   esi
c001ce64:	50                   	push   eax
c001ce65:	e8 1a 5c ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001ce6a:	83 c4 10             	add    esp,0x10
c001ce6d:	85 db                	test   ebx,ebx
c001ce6f:	75 3c                	jne    c001cead <Thr::loadDLL(char const*, bool)+0x84>
c001ce71:	89 f8                	mov    eax,edi
c001ce73:	84 c0                	test   al,al
c001ce75:	0f 84 cc 01 00 00    	je     c001d047 <Thr::loadDLL(char const*, bool)+0x21e>
c001ce7b:	55                   	push   ebp
c001ce7c:	55                   	push   ebp
c001ce7d:	68 07 b7 02 c0       	push   0xc002b707
c001ce82:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001ce86:	55                   	push   ebp
c001ce87:	e8 80 39 fe ff       	call   c000080c <strcpy>
c001ce8c:	58                   	pop    eax
c001ce8d:	5a                   	pop    edx
c001ce8e:	56                   	push   esi
c001ce8f:	55                   	push   ebp
c001ce90:	e8 b7 3a fe ff       	call   c000094c <strcat>
c001ce95:	59                   	pop    ecx
c001ce96:	58                   	pop    eax
c001ce97:	68 1a b7 02 c0       	push   0xc002b71a
c001ce9c:	55                   	push   ebp
c001ce9d:	e8 aa 3a fe ff       	call   c000094c <strcat>
c001cea2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cea5:	e8 b5 cd ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ceaa:	83 c4 10             	add    esp,0x10
c001cead:	51                   	push   ecx
c001ceae:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ceb2:	50                   	push   eax
c001ceb3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ceb7:	50                   	push   eax
c001ceb8:	53                   	push   ebx
c001ceb9:	e8 d6 5e ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	85 db                	test   ebx,ebx
c001cec3:	74 0c                	je     c001ced1 <Thr::loadDLL(char const*, bool)+0xa8>
c001cec5:	83 ec 0c             	sub    esp,0xc
c001cec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceca:	53                   	push   ebx
c001cecb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cece:	83 c4 10             	add    esp,0x10
c001ced1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001ced6:	75 0a                	jne    c001cee2 <Thr::loadDLL(char const*, bool)+0xb9>
c001ced8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cedc:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cee0:	75 3c                	jne    c001cf1e <Thr::loadDLL(char const*, bool)+0xf5>
c001cee2:	89 f8                	mov    eax,edi
c001cee4:	84 c0                	test   al,al
c001cee6:	0f 84 43 01 00 00    	je     c001d02f <Thr::loadDLL(char const*, bool)+0x206>
c001ceec:	51                   	push   ecx
c001ceed:	51                   	push   ecx
c001ceee:	68 07 b7 02 c0       	push   0xc002b707
c001cef3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cef7:	53                   	push   ebx
c001cef8:	e8 0f 39 fe ff       	call   c000080c <strcpy>
c001cefd:	5d                   	pop    ebp
c001cefe:	58                   	pop    eax
c001ceff:	56                   	push   esi
c001cf00:	53                   	push   ebx
c001cf01:	e8 46 3a fe ff       	call   c000094c <strcat>
c001cf06:	58                   	pop    eax
c001cf07:	5a                   	pop    edx
c001cf08:	68 1a b7 02 c0       	push   0xc002b71a
c001cf0d:	53                   	push   ebx
c001cf0e:	e8 39 3a fe ff       	call   c000094c <strcat>
c001cf13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf16:	e8 44 cd ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001cf1b:	83 c4 10             	add    esp,0x10
c001cf1e:	52                   	push   edx
c001cf1f:	6a 03                	push   0x3
c001cf21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf29:	05 ff 0f 00 00       	add    eax,0xfff
c001cf2e:	83 d2 00             	adc    edx,0x0
c001cf31:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cf35:	50                   	push   eax
c001cf36:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c001cf3c:	e8 1f 4b ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001cf41:	59                   	pop    ecx
c001cf42:	89 c3                	mov    ebx,eax
c001cf44:	5d                   	pop    ebp
c001cf45:	50                   	push   eax
c001cf46:	68 42 9e 02 c0       	push   0xc0029e42
c001cf4b:	e8 d5 55 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001cf50:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf53:	e8 14 38 fe ff       	call   c000076c <strlen>
c001cf58:	8b 2d 00 03 03 c0    	mov    ebp,DWORD PTR ds:0xc0030300
c001cf5e:	40                   	inc    eax
c001cf5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf62:	e8 35 26 ff ff       	call   c000f59c <malloc>
c001cf67:	89 04 ad 20 07 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf8e0],eax
c001cf6e:	58                   	pop    eax
c001cf6f:	a1 00 03 03 c0       	mov    eax,ds:0xc0030300
c001cf74:	5a                   	pop    edx
c001cf75:	56                   	push   esi
c001cf76:	ff 34 85 20 07 03 c0 	push   DWORD PTR [eax*4-0x3ffcf8e0]
c001cf7d:	e8 8a 38 fe ff       	call   c000080c <strcpy>
c001cf82:	a1 00 03 03 c0       	mov    eax,ds:0xc0030300
c001cf87:	8d 50 01             	lea    edx,[eax+0x1]
c001cf8a:	89 1c 85 20 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfae0],ebx
c001cf91:	89 15 00 03 03 c0    	mov    DWORD PTR ds:0xc0030300,edx
c001cf97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf9b:	83 c4 0c             	add    esp,0xc
c001cf9e:	89 14 85 20 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfce0],edx
c001cfa5:	6a 01                	push   0x1
c001cfa7:	53                   	push   ebx
c001cfa8:	56                   	push   esi
c001cfa9:	e8 c2 f6 ff ff       	call   c001c670 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfae:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cfb2:	83 c4 10             	add    esp,0x10
c001cfb5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cfba:	0f 85 83 00 00 00    	jne    c001d043 <Thr::loadDLL(char const*, bool)+0x21a>
c001cfc0:	89 f8                	mov    eax,edi
c001cfc2:	84 c0                	test   al,al
c001cfc4:	74 6d                	je     c001d033 <Thr::loadDLL(char const*, bool)+0x20a>
c001cfc6:	83 ec 0c             	sub    esp,0xc
c001cfc9:	68 1c b7 02 c0       	push   0xc002b71c
c001cfce:	e8 8c cc ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	eb 5b                	jmp    c001d033 <Thr::loadDLL(char const*, bool)+0x20a>
c001cfd8:	89 ee                	mov    esi,ebp
c001cfda:	50                   	push   eax
c001cfdb:	c1 e6 0c             	shl    esi,0xc
c001cfde:	50                   	push   eax
c001cfdf:	01 de                	add    esi,ebx
c001cfe1:	56                   	push   esi
c001cfe2:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c001cfe8:	e8 db 45 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cff3:	75 0c                	jne    c001d001 <Thr::loadDLL(char const*, bool)+0x1d8>
c001cff5:	83 ec 0c             	sub    esp,0xc
c001cff8:	56                   	push   esi
c001cff9:	e8 e7 28 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001cffe:	83 c4 10             	add    esp,0x10
c001d001:	45                   	inc    ebp
c001d002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d00a:	05 ff 0f 00 00       	add    eax,0xfff
c001d00f:	bf 00 00 00 00       	mov    edi,0x0
c001d014:	83 d2 00             	adc    edx,0x0
c001d017:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d01b:	c1 ea 0c             	shr    edx,0xc
c001d01e:	39 c5                	cmp    ebp,eax
c001d020:	89 d1                	mov    ecx,edx
c001d022:	89 f8                	mov    eax,edi
c001d024:	19 c8                	sbb    eax,ecx
c001d026:	72 b0                	jb     c001cfd8 <Thr::loadDLL(char const*, bool)+0x1af>
c001d028:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d02d:	75 18                	jne    c001d047 <Thr::loadDLL(char const*, bool)+0x21e>
c001d02f:	31 db                	xor    ebx,ebx
c001d031:	eb 14                	jmp    c001d047 <Thr::loadDLL(char const*, bool)+0x21e>
c001d033:	83 ec 0c             	sub    esp,0xc
c001d036:	68 3b b7 02 c0       	push   0xc002b73b
c001d03b:	e8 1f cc ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001d040:	83 c4 10             	add    esp,0x10
c001d043:	31 ed                	xor    ebp,ebp
c001d045:	eb bb                	jmp    c001d002 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d047:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d04d:	89 d8                	mov    eax,ebx
c001d04f:	5b                   	pop    ebx
c001d050:	5e                   	pop    esi
c001d051:	5f                   	pop    edi
c001d052:	5d                   	pop    ebp
c001d053:	c3                   	ret    

c001d054 <Thr::executeDLL(unsigned long, void*)>:
c001d054:	56                   	push   esi
c001d055:	53                   	push   ebx
c001d056:	52                   	push   edx
c001d057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d05b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d05f:	85 db                	test   ebx,ebx
c001d061:	75 10                	jne    c001d073 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d063:	83 ec 0c             	sub    esp,0xc
c001d066:	68 57 b7 02 c0       	push   0xc002b757
c001d06b:	e8 ef cb ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	50                   	push   eax
c001d074:	50                   	push   eax
c001d075:	53                   	push   ebx
c001d076:	68 81 b7 02 c0       	push   0xc002b781
c001d07b:	e8 a5 54 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001d080:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d084:	89 d8                	mov    eax,ebx
c001d086:	83 c4 14             	add    esp,0x14
c001d089:	5b                   	pop    ebx
c001d08a:	5e                   	pop    esi
c001d08b:	ff e0                	jmp    eax
c001d08d:	90                   	nop

c001d08e <userModeEntryPoint(void*)>:
c001d08e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d093:	48                   	dec    eax
c001d094:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d099:	75 01                	jne    c001d09c <userModeEntryPoint(void*)+0xe>
c001d09b:	fb                   	sti    
c001d09c:	fb                   	sti    
c001d09d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d0a5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d0ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0af:	e9 76 32 fe ff       	jmp    c000032a <goToUsermode>

c001d0b4 <changeTSS>:
c001d0b4:	83 ec 14             	sub    esp,0x14
c001d0b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0bc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d0bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d0c4:	c1 e2 15             	shl    edx,0x15
c001d0c7:	29 d0                	sub    eax,edx
c001d0c9:	50                   	push   eax
c001d0ca:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001d0cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0d5:	05 7c 11 00 00       	add    eax,0x117c
c001d0da:	50                   	push   eax
c001d0db:	e8 16 3a ff ff       	call   c0010af6 <TSS::setESP(unsigned long)>
c001d0e0:	83 c4 1c             	add    esp,0x1c
c001d0e3:	c3                   	ret    

c001d0e4 <switchToThread(ThreadControlBlock*)>:
c001d0e4:	57                   	push   edi
c001d0e5:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d0ea:	56                   	push   esi
c001d0eb:	85 c0                	test   eax,eax
c001d0ed:	53                   	push   ebx
c001d0ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0f2:	0f 85 88 00 00 00    	jne    c001d180 <switchToThread(ThreadControlBlock*)+0x9c>
c001d0f8:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d0fb:	3c ff                	cmp    al,0xff
c001d0fd:	74 7d                	je     c001d17c <switchToThread(ThreadControlBlock*)+0x98>
c001d0ff:	0f b6 d0             	movzx  edx,al
c001d102:	b8 84 03 00 00       	mov    eax,0x384
c001d107:	29 d0                	sub    eax,edx
c001d109:	c1 e0 10             	shl    eax,0x10
c001d10c:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d10f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d112:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001d117:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d11d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d124:	74 4a                	je     c001d170 <switchToThread(ThreadControlBlock*)+0x8c>
c001d126:	0f 31                	rdtsc  
c001d128:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d12d:	89 c6                	mov    esi,eax
c001d12f:	89 d7                	mov    edi,edx
c001d131:	2b 35 f8 0a 03 c0    	sub    esi,DWORD PTR ds:0xc0030af8
c001d137:	89 15 0c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b0c,edx
c001d13d:	1b 3d fc 0a 03 c0    	sbb    edi,DWORD PTR ds:0xc0030afc
c001d143:	89 35 00 0b 03 c0    	mov    DWORD PTR ds:0xc0030b00,esi
c001d149:	a3 f8 0a 03 c0       	mov    ds:0xc0030af8,eax
c001d14e:	89 3d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,edi
c001d154:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d15a:	89 15 fc 0a 03 c0    	mov    DWORD PTR ds:0xc0030afc,edx
c001d160:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d163:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d166:	01 c6                	add    esi,eax
c001d168:	11 d7                	adc    edi,edx
c001d16a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d16d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d170:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d174:	5b                   	pop    ebx
c001d175:	5e                   	pop    esi
c001d176:	5f                   	pop    edi
c001d177:	e9 e6 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d17c:	31 c0                	xor    eax,eax
c001d17e:	eb 8f                	jmp    c001d10f <switchToThread(ThreadControlBlock*)+0x2b>
c001d180:	5b                   	pop    ebx
c001d181:	c7 05 c0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x1
c001d18b:	5e                   	pop    esi
c001d18c:	5f                   	pop    edi
c001d18d:	c3                   	ret    

c001d18e <Process::addArgs(char**)>:
c001d18e:	57                   	push   edi
c001d18f:	56                   	push   esi
c001d190:	53                   	push   ebx
c001d191:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d195:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d199:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d1a3:	85 ff                	test   edi,edi
c001d1a5:	74 3d                	je     c001d1e4 <Process::addArgs(char**)+0x56>
c001d1a7:	8b 07                	mov    eax,DWORD PTR [edi]
c001d1a9:	85 c0                	test   eax,eax
c001d1ab:	74 37                	je     c001d1e4 <Process::addArgs(char**)+0x56>
c001d1ad:	31 db                	xor    ebx,ebx
c001d1af:	83 ec 0c             	sub    esp,0xc
c001d1b2:	50                   	push   eax
c001d1b3:	e8 b4 35 fe ff       	call   c000076c <strlen>
c001d1b8:	40                   	inc    eax
c001d1b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1bc:	e8 db 23 ff ff       	call   c000f59c <malloc>
c001d1c1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d1c8:	5a                   	pop    edx
c001d1c9:	59                   	pop    ecx
c001d1ca:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d1cd:	43                   	inc    ebx
c001d1ce:	50                   	push   eax
c001d1cf:	e8 38 36 fe ff       	call   c000080c <strcpy>
c001d1d4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d1da:	83 c4 10             	add    esp,0x10
c001d1dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1e0:	85 c0                	test   eax,eax
c001d1e2:	75 cb                	jne    c001d1af <Process::addArgs(char**)+0x21>
c001d1e4:	5b                   	pop    ebx
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	c3                   	ret    

c001d1e8 <Process::Process(char const*, Process*, char**)>:
c001d1e8:	56                   	push   esi
c001d1e9:	53                   	push   ebx
c001d1ea:	83 ec 14             	sub    esp,0x14
c001d1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f1:	05 0c 02 00 00       	add    eax,0x20c
c001d1f6:	bb 07 00 00 00       	mov    ebx,0x7
c001d1fb:	89 c6                	mov    esi,eax
c001d1fd:	85 db                	test   ebx,ebx
c001d1ff:	78 12                	js     c001d213 <Process::Process(char const*, Process*, char**)+0x2b>
c001d201:	83 ec 0c             	sub    esp,0xc
c001d204:	56                   	push   esi
c001d205:	e8 9c b6 00 00       	call   c00288a6 <ThreadControlBlock::ThreadControlBlock()>
c001d20a:	83 c4 10             	add    esp,0x10
c001d20d:	83 c6 63             	add    esi,0x63
c001d210:	4b                   	dec    ebx
c001d211:	eb ea                	jmp    c001d1fd <Process::Process(char const*, Process*, char**)+0x15>
c001d213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d217:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d21e:	83 ec 0c             	sub    esp,0xc
c001d221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d225:	e8 be c8 ff ff       	call   c0019ae8 <Krnl::newProcessEnv(Process*)>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	89 c2                	mov    edx,eax
c001d22f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d233:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d23d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d246:	a1 30 cb 02 c0       	mov    eax,ds:0xc002cb30
c001d24b:	8d 50 01             	lea    edx,[eax+0x1]
c001d24e:	89 15 30 cb 02 c0    	mov    DWORD PTR ds:0xc002cb30,edx
c001d254:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d258:	89 02                	mov    DWORD PTR [edx],eax
c001d25a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d262:	83 ec 0c             	sub    esp,0xc
c001d265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d269:	e8 2e 23 ff ff       	call   c000f59c <malloc>
c001d26e:	83 c4 10             	add    esp,0x10
c001d271:	89 c3                	mov    ebx,eax
c001d273:	83 ec 08             	sub    esp,0x8
c001d276:	6a 00                	push   0x0
c001d278:	53                   	push   ebx
c001d279:	e8 8a 4b ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d27e:	83 c4 10             	add    esp,0x10
c001d281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d285:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d28b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d28f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2a1:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2b1:	85 c0                	test   eax,eax
c001d2b3:	74 42                	je     c001d2f7 <Process::Process(char const*, Process*, char**)+0x10f>
c001d2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2bf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2d9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d2df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e3:	05 0c 01 00 00       	add    eax,0x10c
c001d2e8:	83 ec 08             	sub    esp,0x8
c001d2eb:	52                   	push   edx
c001d2ec:	50                   	push   eax
c001d2ed:	e8 1a 35 fe ff       	call   c000080c <strcpy>
c001d2f2:	83 c4 10             	add    esp,0x10
c001d2f5:	eb 63                	jmp    c001d35a <Process::Process(char const*, Process*, char**)+0x172>
c001d2f7:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d2ff:	83 ec 0c             	sub    esp,0xc
c001d302:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d306:	e8 91 22 ff ff       	call   c000f59c <malloc>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	89 c3                	mov    ebx,eax
c001d310:	83 ec 08             	sub    esp,0x8
c001d313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d317:	53                   	push   ebx
c001d318:	e8 ed 34 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d324:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d32e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d334:	83 ec 0c             	sub    esp,0xc
c001d337:	50                   	push   eax
c001d338:	e8 8c 2c ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d344:	05 0c 01 00 00       	add    eax,0x10c
c001d349:	83 ec 08             	sub    esp,0x8
c001d34c:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d351:	50                   	push   eax
c001d352:	e8 b5 34 fe ff       	call   c000080c <strcpy>
c001d357:	83 c4 10             	add    esp,0x10
c001d35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35e:	83 c0 0c             	add    eax,0xc
c001d361:	83 ec 08             	sub    esp,0x8
c001d364:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d368:	50                   	push   eax
c001d369:	e8 9e 34 fe ff       	call   c000080c <strcpy>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	83 ec 08             	sub    esp,0x8
c001d374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d378:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d37c:	e8 0d fe ff ff       	call   c001d18e <Process::addArgs(char**)>
c001d381:	83 c4 10             	add    esp,0x10
c001d384:	83 ec 08             	sub    esp,0x8
c001d387:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d38b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d38f:	e8 a6 ed ff ff       	call   c001c13a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d39b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d39f:	83 f0 01             	xor    eax,0x1
c001d3a2:	88 c2                	mov    dl,al
c001d3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a8:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d3ae:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d3b3:	83 ec 08             	sub    esp,0x8
c001d3b6:	50                   	push   eax
c001d3b7:	68 f8 b7 02 c0       	push   0xc002b7f8
c001d3bc:	e8 64 51 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001d3c1:	83 c4 10             	add    esp,0x10
c001d3c4:	90                   	nop
c001d3c5:	83 c4 14             	add    esp,0x14
c001d3c8:	5b                   	pop    ebx
c001d3c9:	5e                   	pop    esi
c001d3ca:	c3                   	ret    
c001d3cb:	90                   	nop

c001d3cc <Process::Process(bool, char const*, Process*, char**)>:
c001d3cc:	56                   	push   esi
c001d3cd:	53                   	push   ebx
c001d3ce:	83 ec 24             	sub    esp,0x24
c001d3d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d3d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3dd:	05 0c 02 00 00       	add    eax,0x20c
c001d3e2:	bb 07 00 00 00       	mov    ebx,0x7
c001d3e7:	89 c6                	mov    esi,eax
c001d3e9:	85 db                	test   ebx,ebx
c001d3eb:	78 12                	js     c001d3ff <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	56                   	push   esi
c001d3f1:	e8 b0 b4 00 00       	call   c00288a6 <ThreadControlBlock::ThreadControlBlock()>
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	83 c6 63             	add    esi,0x63
c001d3fc:	4b                   	dec    ebx
c001d3fd:	eb ea                	jmp    c001d3e9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d403:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d40a:	83 ec 0c             	sub    esp,0xc
c001d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d411:	e8 d2 c6 ff ff       	call   c0019ae8 <Krnl::newProcessEnv(Process*)>
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	89 c2                	mov    edx,eax
c001d41b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d41f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d425:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d429:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d432:	a1 30 cb 02 c0       	mov    eax,ds:0xc002cb30
c001d437:	8d 50 01             	lea    edx,[eax+0x1]
c001d43a:	89 15 30 cb 02 c0    	mov    DWORD PTR ds:0xc002cb30,edx
c001d440:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d444:	89 02                	mov    DWORD PTR [edx],eax
c001d446:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d455:	e8 42 21 ff ff       	call   c000f59c <malloc>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	89 c3                	mov    ebx,eax
c001d45f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d464:	83 ec 08             	sub    esp,0x8
c001d467:	50                   	push   eax
c001d468:	53                   	push   ebx
c001d469:	e8 9a 49 ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d46e:	83 c4 10             	add    esp,0x10
c001d471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d475:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d47b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d47f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d48d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d491:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d49b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4a1:	85 c0                	test   eax,eax
c001d4a3:	74 42                	je     c001d4e7 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d4a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4a9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4af:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4b9:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4c3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4c9:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4d3:	05 0c 01 00 00       	add    eax,0x10c
c001d4d8:	83 ec 08             	sub    esp,0x8
c001d4db:	52                   	push   edx
c001d4dc:	50                   	push   eax
c001d4dd:	e8 2a 33 fe ff       	call   c000080c <strcpy>
c001d4e2:	83 c4 10             	add    esp,0x10
c001d4e5:	eb 63                	jmp    c001d54a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d4e7:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d4f6:	e8 a1 20 ff ff       	call   c000f59c <malloc>
c001d4fb:	83 c4 10             	add    esp,0x10
c001d4fe:	89 c3                	mov    ebx,eax
c001d500:	83 ec 08             	sub    esp,0x8
c001d503:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d507:	53                   	push   ebx
c001d508:	e8 fd 32 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d50d:	83 c4 10             	add    esp,0x10
c001d510:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d514:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d51a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d51e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	50                   	push   eax
c001d528:	e8 9c 2a ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d534:	05 0c 01 00 00       	add    eax,0x10c
c001d539:	83 ec 08             	sub    esp,0x8
c001d53c:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d541:	50                   	push   eax
c001d542:	e8 c5 32 fe ff       	call   c000080c <strcpy>
c001d547:	83 c4 10             	add    esp,0x10
c001d54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d54e:	83 c0 0c             	add    eax,0xc
c001d551:	83 ec 08             	sub    esp,0x8
c001d554:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d558:	50                   	push   eax
c001d559:	e8 ae 32 fe ff       	call   c000080c <strcpy>
c001d55e:	83 c4 10             	add    esp,0x10
c001d561:	83 ec 08             	sub    esp,0x8
c001d564:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d56c:	e8 1d fc ff ff       	call   c001d18e <Process::addArgs(char**)>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	90                   	nop
c001d575:	83 c4 24             	add    esp,0x24
c001d578:	5b                   	pop    ebx
c001d579:	5e                   	pop    esi
c001d57a:	c3                   	ret    

c001d57b <taskStartupFunction>:
c001d57b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d580:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d583:	c3                   	ret    

c001d584 <Semaphore::Semaphore(int)>:
c001d584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d58c:	89 10                	mov    DWORD PTR [eax],edx
c001d58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d592:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d59d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5af:	90                   	nop
c001d5b0:	c3                   	ret    
c001d5b1:	90                   	nop

c001d5b2 <Mutex::Mutex()>:
c001d5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b6:	6a 01                	push   0x1
c001d5b8:	50                   	push   eax
c001d5b9:	e8 c6 ff ff ff       	call   c001d584 <Semaphore::Semaphore(int)>
c001d5be:	83 c4 08             	add    esp,0x8
c001d5c1:	90                   	nop
c001d5c2:	c3                   	ret    
c001d5c3:	90                   	nop

c001d5c4 <Process::createThread(void (*)(void*), void*, int)>:
c001d5c4:	55                   	push   ebp
c001d5c5:	31 c9                	xor    ecx,ecx
c001d5c7:	57                   	push   edi
c001d5c8:	56                   	push   esi
c001d5c9:	53                   	push   ebx
c001d5ca:	83 ec 1c             	sub    esp,0x1c
c001d5cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5d1:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d5d8:	89 f2                	mov    edx,esi
c001d5da:	0f b7 c2             	movzx  eax,dx
c001d5dd:	83 e2 01             	and    edx,0x1
c001d5e0:	74 16                	je     c001d5f8 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d5e2:	d1 f8                	sar    eax,1
c001d5e4:	41                   	inc    ecx
c001d5e5:	89 c2                	mov    edx,eax
c001d5e7:	83 f9 10             	cmp    ecx,0x10
c001d5ea:	75 ee                	jne    c001d5da <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d5ec:	83 c4 1c             	add    esp,0x1c
c001d5ef:	31 db                	xor    ebx,ebx
c001d5f1:	89 d8                	mov    eax,ebx
c001d5f3:	5b                   	pop    ebx
c001d5f4:	5e                   	pop    esi
c001d5f5:	5f                   	pop    edi
c001d5f6:	5d                   	pop    ebp
c001d5f7:	c3                   	ret    
c001d5f8:	b8 01 00 00 00       	mov    eax,0x1
c001d5fd:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d600:	d3 e0                	shl    eax,cl
c001d602:	09 c6                	or     esi,eax
c001d604:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d607:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d60e:	89 c6                	mov    esi,eax
c001d610:	c1 e6 05             	shl    esi,0x5
c001d613:	01 f0                	add    eax,esi
c001d615:	01 d8                	add    eax,ebx
c001d617:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d61e:	75 0a                	jne    c001d62a <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d620:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d62a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d630:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d634:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d637:	01 ca                	add    edx,ecx
c001d639:	83 ec 08             	sub    esp,0x8
c001d63c:	89 d0                	mov    eax,edx
c001d63e:	c1 e0 05             	shl    eax,0x5
c001d641:	01 d0                	add    eax,edx
c001d643:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d647:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d64b:	01 d8                	add    eax,ebx
c001d64d:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d653:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d659:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d65f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d665:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d66b:	89 cd                	mov    ebp,ecx
c001d66d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d671:	f7 dd                	neg    ebp
c001d673:	c1 e5 15             	shl    ebp,0x15
c001d676:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d67c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d682:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d68c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d692:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d69c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6aa:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d6b1:	53                   	push   ebx
c001d6b2:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d6b7:	e8 a4 af 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6bc:	89 d8                	mov    eax,ebx
c001d6be:	83 c4 10             	add    esp,0x10
c001d6c1:	83 c4 1c             	add    esp,0x1c
c001d6c4:	5b                   	pop    ebx
c001d6c5:	5e                   	pop    esi
c001d6c6:	5f                   	pop    edi
c001d6c7:	5d                   	pop    ebp
c001d6c8:	c3                   	ret    
c001d6c9:	90                   	nop

c001d6ca <Process::createUserThread()>:
c001d6ca:	83 ec 0c             	sub    esp,0xc
c001d6cd:	68 80 00 00 00       	push   0x80
c001d6d2:	6a 00                	push   0x0
c001d6d4:	68 8e d0 01 c0       	push   0xc001d08e
c001d6d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6dd:	e8 e2 fe ff ff       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c001d6e2:	83 c4 1c             	add    esp,0x1c
c001d6e5:	c3                   	ret    

c001d6e6 <setupMultitasking(void (*)())>:
c001d6e6:	56                   	push   esi
c001d6e7:	53                   	push   ebx
c001d6e8:	51                   	push   ecx
c001d6e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6ed:	eb 10                	jmp    c001d6ff <setupMultitasking(void (*)())+0x19>
c001d6ef:	83 ec 0c             	sub    esp,0xc
c001d6f2:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d6f7:	e8 b6 ae 00 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d6fc:	83 c4 10             	add    esp,0x10
c001d6ff:	83 ec 0c             	sub    esp,0xc
c001d702:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d707:	e8 82 ae 00 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d70c:	83 c4 10             	add    esp,0x10
c001d70f:	84 c0                	test   al,al
c001d711:	74 dc                	je     c001d6ef <setupMultitasking(void (*)())+0x9>
c001d713:	83 ec 0c             	sub    esp,0xc
c001d716:	68 3f 07 00 00       	push   0x73f
c001d71b:	e8 7c 1e ff ff       	call   c000f59c <malloc>
c001d720:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d727:	89 c3                	mov    ebx,eax
c001d729:	6a 00                	push   0x0
c001d72b:	68 a4 b7 02 c0       	push   0xc002b7a4
c001d730:	6a 01                	push   0x1
c001d732:	50                   	push   eax
c001d733:	e8 94 fc ff ff       	call   c001d3cc <Process::Process(bool, char const*, Process*, char**)>
c001d738:	83 c4 14             	add    esp,0x14
c001d73b:	89 1d f0 0a 03 c0    	mov    DWORD PTR ds:0xc0030af0,ebx
c001d741:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d747:	e8 8b 2b ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001d74c:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d754:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d75e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d764:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d767:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d771:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d777:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d77d:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d787:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d791:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d79b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7a1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7ab:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7b1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7bb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7c1:	58                   	pop    eax
c001d7c2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7c8:	5a                   	pop    edx
c001d7c9:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d7ce:	50                   	push   eax
c001d7cf:	e8 38 30 fe ff       	call   c000080c <strcpy>
c001d7d4:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7df:	83 c4 14             	add    esp,0x14
c001d7e2:	5b                   	pop    ebx
c001d7e3:	5e                   	pop    esi
c001d7e4:	e9 6b 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7e9 <schedule()>:
c001d7e9:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d7ee:	85 c0                	test   eax,eax
c001d7f0:	74 0b                	je     c001d7fd <schedule()+0x14>
c001d7f2:	c7 05 c0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x1
c001d7fc:	c3                   	ret    
c001d7fd:	53                   	push   ebx
c001d7fe:	83 ec 14             	sub    esp,0x14
c001d801:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d806:	e8 83 ad 00 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	84 c0                	test   al,al
c001d810:	75 38                	jne    c001d84a <schedule()+0x61>
c001d812:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d817:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d81a:	4a                   	dec    edx
c001d81b:	74 32                	je     c001d84f <schedule()+0x66>
c001d81d:	83 ec 0c             	sub    esp,0xc
c001d820:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d825:	e8 80 ad 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d82a:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001d831:	89 c3                	mov    ebx,eax
c001d833:	e8 7a ad 00 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d838:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d83f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d842:	e8 9d f8 ff ff       	call   c001d0e4 <switchToThread(ThreadControlBlock*)>
c001d847:	83 c4 10             	add    esp,0x10
c001d84a:	83 c4 08             	add    esp,0x8
c001d84d:	5b                   	pop    ebx
c001d84e:	c3                   	ret    
c001d84f:	83 ec 08             	sub    esp,0x8
c001d852:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d859:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d85f:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d864:	e8 f7 ad 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d869:	83 c4 10             	add    esp,0x10
c001d86c:	eb af                	jmp    c001d81d <schedule()+0x34>

c001d86e <Semaphore::tryAcquire()>:
c001d86e:	53                   	push   ebx
c001d86f:	83 ec 08             	sub    esp,0x8
c001d872:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d876:	fa                   	cli    
c001d877:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d87c:	8d 50 01             	lea    edx,[eax+0x1]
c001d87f:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001d885:	8b 15 c4 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030ac4
c001d88b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d88e:	89 1d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ebx
c001d894:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d897:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d899:	7c 2a                	jl     c001d8c5 <Semaphore::tryAcquire()+0x57>
c001d89b:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c001d8a1:	85 d2                	test   edx,edx
c001d8a3:	75 0a                	jne    c001d8af <Semaphore::tryAcquire()+0x41>
c001d8a5:	8b 15 c0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030ac0
c001d8ab:	85 d2                	test   edx,edx
c001d8ad:	75 5b                	jne    c001d90a <Semaphore::tryAcquire()+0x9c>
c001d8af:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d8b4:	85 c0                	test   eax,eax
c001d8b6:	74 07                	je     c001d8bf <Semaphore::tryAcquire()+0x51>
c001d8b8:	31 c0                	xor    eax,eax
c001d8ba:	83 c4 08             	add    esp,0x8
c001d8bd:	5b                   	pop    ebx
c001d8be:	c3                   	ret    
c001d8bf:	fb                   	sti    
c001d8c0:	83 c4 08             	add    esp,0x8
c001d8c3:	5b                   	pop    ebx
c001d8c4:	c3                   	ret    
c001d8c5:	43                   	inc    ebx
c001d8c6:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c001d8cc:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d8cf:	85 d2                	test   edx,edx
c001d8d1:	75 1f                	jne    c001d8f2 <Semaphore::tryAcquire()+0x84>
c001d8d3:	8b 0d c0 0a 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ac0
c001d8d9:	85 c9                	test   ecx,ecx
c001d8db:	74 15                	je     c001d8f2 <Semaphore::tryAcquire()+0x84>
c001d8dd:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d8e7:	e8 fd fe ff ff       	call   c001d7e9 <schedule()>
c001d8ec:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d8f1:	48                   	dec    eax
c001d8f2:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d8f7:	85 c0                	test   eax,eax
c001d8f9:	75 08                	jne    c001d903 <Semaphore::tryAcquire()+0x95>
c001d8fb:	fb                   	sti    
c001d8fc:	b0 01                	mov    al,0x1
c001d8fe:	83 c4 08             	add    esp,0x8
c001d901:	5b                   	pop    ebx
c001d902:	c3                   	ret    
c001d903:	b0 01                	mov    al,0x1
c001d905:	83 c4 08             	add    esp,0x8
c001d908:	5b                   	pop    ebx
c001d909:	c3                   	ret    
c001d90a:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d914:	e8 d0 fe ff ff       	call   c001d7e9 <schedule()>
c001d919:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d91e:	48                   	dec    eax
c001d91f:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d924:	85 c0                	test   eax,eax
c001d926:	75 90                	jne    c001d8b8 <Semaphore::tryAcquire()+0x4a>
c001d928:	eb 95                	jmp    c001d8bf <Semaphore::tryAcquire()+0x51>

c001d92a <Semaphore::assertLocked(char const*)>:
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d931:	fa                   	cli    
c001d932:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001d938:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d93d:	8d 48 01             	lea    ecx,[eax+0x1]
c001d940:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001d946:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001d948:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001d94b:	7c 24                	jl     c001d971 <Semaphore::assertLocked(char const*)+0x47>
c001d94d:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001d952:	85 c0                	test   eax,eax
c001d954:	75 09                	jne    c001d95f <Semaphore::assertLocked(char const*)+0x35>
c001d956:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001d95b:	85 c0                	test   eax,eax
c001d95d:	75 29                	jne    c001d988 <Semaphore::assertLocked(char const*)+0x5e>
c001d95f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d964:	48                   	dec    eax
c001d965:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d96a:	75 01                	jne    c001d96d <Semaphore::assertLocked(char const*)+0x43>
c001d96c:	fb                   	sti    
c001d96d:	83 c4 0c             	add    esp,0xc
c001d970:	c3                   	ret    
c001d971:	83 ec 0c             	sub    esp,0xc
c001d974:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d978:	e8 e2 c2 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001d97d:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	48                   	dec    eax
c001d986:	eb c5                	jmp    c001d94d <Semaphore::assertLocked(char const*)+0x23>
c001d988:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d992:	e8 52 fe ff ff       	call   c001d7e9 <schedule()>
c001d997:	eb c6                	jmp    c001d95f <Semaphore::assertLocked(char const*)+0x35>

c001d999 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d999:	83 ec 0c             	sub    esp,0xc
c001d99c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9a8:	e8 3c fe ff ff       	call   c001d7e9 <schedule()>
c001d9ad:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d9b2:	48                   	dec    eax
c001d9b3:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d9b8:	75 01                	jne    c001d9bb <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001d9ba:	fb                   	sti    
c001d9bb:	83 c4 0c             	add    esp,0xc
c001d9be:	c3                   	ret    

c001d9bf <blockTask(TaskState)>:
c001d9bf:	83 ec 0c             	sub    esp,0xc
c001d9c2:	fa                   	cli    
c001d9c3:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001d9c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9d5:	e8 0f fe ff ff       	call   c001d7e9 <schedule()>
c001d9da:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d9df:	48                   	dec    eax
c001d9e0:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d9e5:	75 01                	jne    c001d9e8 <blockTask(TaskState)+0x29>
c001d9e7:	fb                   	sti    
c001d9e8:	83 c4 0c             	add    esp,0xc
c001d9eb:	c3                   	ret    

c001d9ec <waitTask(int, int*, int)>:
c001d9ec:	83 ec 18             	sub    esp,0x18
c001d9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d9fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da04:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001da07:	6a 07                	push   0x7
c001da09:	e8 b1 ff ff ff       	call   c001d9bf <blockTask(TaskState)>
c001da0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da13:	83 c4 10             	add    esp,0x10
c001da16:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001da19:	85 d2                	test   edx,edx
c001da1b:	74 0a                	je     c001da27 <waitTask(int, int*, int)+0x3b>
c001da1d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001da20:	89 02                	mov    DWORD PTR [edx],eax
c001da22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da27:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001da2a:	83 c4 0c             	add    esp,0xc
c001da2d:	c3                   	ret    

c001da2e <nanoSleepUntil(unsigned long long)>:
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da39:	3b 05 10 dc 02 c0    	cmp    eax,DWORD PTR ds:0xc002dc10
c001da3f:	89 d1                	mov    ecx,edx
c001da41:	1b 0d 14 dc 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dc14
c001da47:	73 04                	jae    c001da4d <nanoSleepUntil(unsigned long long)+0x1f>
c001da49:	83 c4 0c             	add    esp,0xc
c001da4c:	c3                   	ret    
c001da4d:	fa                   	cli    
c001da4e:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001da54:	83 ec 08             	sub    esp,0x8
c001da57:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001da5d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da63:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001da66:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001da69:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da6f:	68 d8 0a 03 c0       	push   0xc0030ad8
c001da74:	e8 e7 ab 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da79:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001da80:	e8 3a ff ff ff       	call   c001d9bf <blockTask(TaskState)>
c001da85:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	48                   	dec    eax
c001da8e:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001da93:	85 c0                	test   eax,eax
c001da95:	75 09                	jne    c001daa0 <nanoSleepUntil(unsigned long long)+0x72>
c001da97:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001da9c:	85 c0                	test   eax,eax
c001da9e:	75 12                	jne    c001dab2 <nanoSleepUntil(unsigned long long)+0x84>
c001daa0:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001daa5:	48                   	dec    eax
c001daa6:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001daab:	75 9c                	jne    c001da49 <nanoSleepUntil(unsigned long long)+0x1b>
c001daad:	fb                   	sti    
c001daae:	83 c4 0c             	add    esp,0xc
c001dab1:	c3                   	ret    
c001dab2:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001dabc:	e8 28 fd ff ff       	call   c001d7e9 <schedule()>
c001dac1:	eb dd                	jmp    c001daa0 <nanoSleepUntil(unsigned long long)+0x72>

c001dac3 <nanoSleep(unsigned long long)>:
c001dac3:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c001dac8:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c001dace:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dad2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dad6:	e9 53 ff ff ff       	jmp    c001da2e <nanoSleepUntil(unsigned long long)>

c001dadb <sleep(unsigned long long)>:
c001dadb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dae3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dae8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001daec:	01 ca                	add    edx,ecx
c001daee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001daf2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001daf6:	eb cb                	jmp    c001dac3 <nanoSleep(unsigned long long)>

c001daf8 <Semaphore::acquire()>:
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daff:	fa                   	cli    
c001db00:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001db05:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001db0b:	8d 48 01             	lea    ecx,[eax+0x1]
c001db0e:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001db14:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001db17:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001db19:	7d 28                	jge    c001db43 <Semaphore::acquire()+0x4b>
c001db1b:	41                   	inc    ecx
c001db1c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001db1f:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001db24:	85 c0                	test   eax,eax
c001db26:	75 09                	jne    c001db31 <Semaphore::acquire()+0x39>
c001db28:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001db2d:	85 c0                	test   eax,eax
c001db2f:	75 4e                	jne    c001db7f <Semaphore::acquire()+0x87>
c001db31:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001db36:	48                   	dec    eax
c001db37:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001db3c:	75 01                	jne    c001db3f <Semaphore::acquire()+0x47>
c001db3e:	fb                   	sti    
c001db3f:	83 c4 0c             	add    esp,0xc
c001db42:	c3                   	ret    
c001db43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db48:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001db4f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001db52:	85 c9                	test   ecx,ecx
c001db54:	74 3a                	je     c001db90 <Semaphore::acquire()+0x98>
c001db56:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001db59:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db5f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001db62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db67:	83 ec 0c             	sub    esp,0xc
c001db6a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001db6d:	6a 05                	push   0x5
c001db6f:	e8 4b fe ff ff       	call   c001d9bf <blockTask(TaskState)>
c001db74:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	48                   	dec    eax
c001db7d:	eb a0                	jmp    c001db1f <Semaphore::acquire()+0x27>
c001db7f:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001db89:	e8 5b fc ff ff       	call   c001d7e9 <schedule()>
c001db8e:	eb a1                	jmp    c001db31 <Semaphore::acquire()+0x39>
c001db90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db95:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001db98:	eb c8                	jmp    c001db62 <Semaphore::acquire()+0x6a>

c001db9a <taskReturned>:
c001db9a:	83 ec 18             	sub    esp,0x18
c001db9d:	68 20 b8 02 c0       	push   0xc002b820
c001dba2:	e8 b8 c0 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001dba7:	83 c4 10             	add    esp,0x10
c001dbaa:	83 ec 0c             	sub    esp,0xc
c001dbad:	6a 02                	push   0x2
c001dbaf:	e8 0b fe ff ff       	call   c001d9bf <blockTask(TaskState)>
c001dbb4:	fa                   	cli    
c001dbb5:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dbbb:	e8 29 fc ff ff       	call   c001d7e9 <schedule()>
c001dbc0:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dbc5:	83 c4 10             	add    esp,0x10
c001dbc8:	48                   	dec    eax
c001dbc9:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dbce:	85 c0                	test   eax,eax
c001dbd0:	75 d8                	jne    c001dbaa <taskReturned+0x10>
c001dbd2:	fb                   	sti    
c001dbd3:	eb d5                	jmp    c001dbaa <taskReturned+0x10>

c001dbd5 <Thr::processFromPID(int)>:
c001dbd5:	57                   	push   edi
c001dbd6:	56                   	push   esi
c001dbd7:	53                   	push   ebx
c001dbd8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbdc:	fa                   	cli    
c001dbdd:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dbe3:	83 ec 0c             	sub    esp,0xc
c001dbe6:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dbeb:	e8 ba a9 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbf0:	83 c4 10             	add    esp,0x10
c001dbf3:	89 c7                	mov    edi,eax
c001dbf5:	eb 14                	jmp    c001dc0b <Thr::processFromPID(int)+0x36>
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dbff:	e8 a6 a9 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	39 f8                	cmp    eax,edi
c001dc09:	74 49                	je     c001dc54 <Thr::processFromPID(int)+0x7f>
c001dc0b:	83 ec 0c             	sub    esp,0xc
c001dc0e:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc13:	e8 92 a9 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc18:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001dc1f:	89 c3                	mov    ebx,eax
c001dc21:	e8 8c a9 00 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc26:	58                   	pop    eax
c001dc27:	5a                   	pop    edx
c001dc28:	53                   	push   ebx
c001dc29:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc2e:	e8 2d aa 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc33:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc36:	83 c4 10             	add    esp,0x10
c001dc39:	39 30                	cmp    DWORD PTR [eax],esi
c001dc3b:	75 ba                	jne    c001dbf7 <Thr::processFromPID(int)+0x22>
c001dc3d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dc42:	48                   	dec    eax
c001dc43:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dc48:	74 07                	je     c001dc51 <Thr::processFromPID(int)+0x7c>
c001dc4a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc4d:	5b                   	pop    ebx
c001dc4e:	5e                   	pop    esi
c001dc4f:	5f                   	pop    edi
c001dc50:	c3                   	ret    
c001dc51:	fb                   	sti    
c001dc52:	eb f6                	jmp    c001dc4a <Thr::processFromPID(int)+0x75>
c001dc54:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dc59:	48                   	dec    eax
c001dc5a:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dc5f:	75 05                	jne    c001dc66 <Thr::processFromPID(int)+0x91>
c001dc61:	fb                   	sti    
c001dc62:	5b                   	pop    ebx
c001dc63:	5e                   	pop    esi
c001dc64:	5f                   	pop    edi
c001dc65:	c3                   	ret    
c001dc66:	5b                   	pop    ebx
c001dc67:	31 c0                	xor    eax,eax
c001dc69:	5e                   	pop    esi
c001dc6a:	5f                   	pop    edi
c001dc6b:	c3                   	ret    

c001dc6c <unblockTask(ThreadControlBlock*)>:
c001dc6c:	53                   	push   ebx
c001dc6d:	83 ec 08             	sub    esp,0x8
c001dc70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc74:	fa                   	cli    
c001dc75:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dc7b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc7e:	85 c0                	test   eax,eax
c001dc80:	74 5a                	je     c001dcdc <unblockTask(ThreadControlBlock*)+0x70>
c001dc82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc85:	48                   	dec    eax
c001dc86:	74 31                	je     c001dcb9 <unblockTask(ThreadControlBlock*)+0x4d>
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc90:	e8 15 a9 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	85 c0                	test   eax,eax
c001dc9a:	75 17                	jne    c001dcb3 <unblockTask(ThreadControlBlock*)+0x47>
c001dc9c:	eb 50                	jmp    c001dcee <unblockTask(ThreadControlBlock*)+0x82>
c001dc9e:	83 ec 08             	sub    esp,0x8
c001dca1:	50                   	push   eax
c001dca2:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dca7:	e8 86 ac 00 00       	call   c0028932 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	85 c0                	test   eax,eax
c001dcb1:	74 3b                	je     c001dcee <unblockTask(ThreadControlBlock*)+0x82>
c001dcb3:	39 c3                	cmp    ebx,eax
c001dcb5:	75 e7                	jne    c001dc9e <unblockTask(ThreadControlBlock*)+0x32>
c001dcb7:	eb 10                	jmp    c001dcc9 <unblockTask(ThreadControlBlock*)+0x5d>
c001dcb9:	83 ec 0c             	sub    esp,0xc
c001dcbc:	68 c2 b7 02 c0       	push   0xc002b7c2
c001dcc1:	e8 5f 48 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001dcc6:	83 c4 10             	add    esp,0x10
c001dcc9:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dcce:	48                   	dec    eax
c001dccf:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dcd4:	75 01                	jne    c001dcd7 <unblockTask(ThreadControlBlock*)+0x6b>
c001dcd6:	fb                   	sti    
c001dcd7:	83 c4 08             	add    esp,0x8
c001dcda:	5b                   	pop    ebx
c001dcdb:	c3                   	ret    
c001dcdc:	83 ec 0c             	sub    esp,0xc
c001dcdf:	68 ab b7 02 c0       	push   0xc002b7ab
c001dce4:	e8 3c 48 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	eb db                	jmp    c001dcc9 <unblockTask(ThreadControlBlock*)+0x5d>
c001dcee:	83 ec 08             	sub    esp,0x8
c001dcf1:	53                   	push   ebx
c001dcf2:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dcf7:	e8 64 a9 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	eb c8                	jmp    c001dcc9 <unblockTask(ThreadControlBlock*)+0x5d>

c001dd01 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd01:	55                   	push   ebp
c001dd02:	57                   	push   edi
c001dd03:	56                   	push   esi
c001dd04:	53                   	push   ebx
c001dd05:	83 ec 1c             	sub    esp,0x1c
c001dd08:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd0c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd0f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd15:	85 ff                	test   edi,edi
c001dd17:	7e 20                	jle    c001dd39 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd19:	31 f6                	xor    esi,esi
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd25:	46                   	inc    esi
c001dd26:	e8 81 18 ff ff       	call   c000f5ac <free>
c001dd2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd2e:	83 c4 10             	add    esp,0x10
c001dd31:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dd37:	7f e2                	jg     c001dd1b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dd39:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd43:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dd48:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dd4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dd4e:	d3 c0                	rol    eax,cl
c001dd50:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dd57:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd5a:	89 f7                	mov    edi,esi
c001dd5c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dd64:	0f 85 64 01 00 00    	jne    c001dece <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd6a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dd70:	85 ed                	test   ebp,ebp
c001dd72:	74 1b                	je     c001dd8f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	55                   	push   ebp
c001dd78:	e8 87 bc ff ff       	call   c0019a04 <EnvVarContainer::~EnvVarContainer()>
c001dd7d:	59                   	pop    ecx
c001dd7e:	5e                   	pop    esi
c001dd7f:	6a 0c                	push   0xc
c001dd81:	55                   	push   ebp
c001dd82:	e8 c6 46 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001dd87:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	89 f7                	mov    edi,esi
c001dd8f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dd95:	85 c0                	test   eax,eax
c001dd97:	0f 84 aa 00 00 00    	je     c001de47 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dd9d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dda0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dda4:	31 c9                	xor    ecx,ecx
c001dda6:	eb 10                	jmp    c001ddb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dda8:	41                   	inc    ecx
c001dda9:	83 f9 10             	cmp    ecx,0x10
c001ddac:	0f 84 95 00 00 00    	je     c001de47 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddb2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddb8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ddbf:	d3 fa                	sar    edx,cl
c001ddc1:	83 e2 01             	and    edx,0x1
c001ddc4:	74 e2                	je     c001dda8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddc6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ddc9:	01 ca                	add    edx,ecx
c001ddcb:	89 d5                	mov    ebp,edx
c001ddcd:	c1 e5 05             	shl    ebp,0x5
c001ddd0:	01 ea                	add    edx,ebp
c001ddd2:	01 d0                	add    eax,edx
c001ddd4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ddda:	83 fd 07             	cmp    ebp,0x7
c001dddd:	75 c9                	jne    c001dda8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dddf:	05 40 02 00 00       	add    eax,0x240
c001dde4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dde7:	83 fd ff             	cmp    ebp,0xffffffff
c001ddea:	0f 8c e6 00 00 00    	jl     c001ded6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001ddf0:	0f 84 97 01 00 00    	je     c001df8d <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001ddf6:	85 ed                	test   ebp,ebp
c001ddf8:	0f 84 7e 01 00 00    	je     c001df7c <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001ddfe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de00:	75 a6                	jne    c001dda8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de02:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de0c:	01 d0                	add    eax,edx
c001de0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de12:	83 ec 0c             	sub    esp,0xc
c001de15:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de1e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de24:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de2b:	50                   	push   eax
c001de2c:	e8 3b fe ff ff       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001de31:	83 c4 10             	add    esp,0x10
c001de34:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de3b:	89 f7                	mov    edi,esi
c001de3d:	41                   	inc    ecx
c001de3e:	83 f9 10             	cmp    ecx,0x10
c001de41:	0f 85 6b ff ff ff    	jne    c001ddb2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001de47:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001de4d:	85 c0                	test   eax,eax
c001de4f:	74 5d                	je     c001deae <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de51:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001de57:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001de5d:	74 4f                	je     c001deae <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de5f:	83 ec 0c             	sub    esp,0xc
c001de62:	68 e4 0a 03 c0       	push   0xc0030ae4
c001de67:	e8 3e a7 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de6c:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001de73:	89 c7                	mov    edi,eax
c001de75:	e8 14 a7 00 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	84 c0                	test   al,al
c001de7f:	0f 84 c2 00 00 00    	je     c001df47 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001de85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de88:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de8e:	85 d2                	test   edx,edx
c001de90:	74 0f                	je     c001dea1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001de92:	83 ec 0c             	sub    esp,0xc
c001de95:	8b 02                	mov    eax,DWORD PTR [edx]
c001de97:	52                   	push   edx
c001de98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de9e:	83 c4 10             	add    esp,0x10
c001dea1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001deab:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001deae:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001deb4:	85 db                	test   ebx,ebx
c001deb6:	74 16                	je     c001dece <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	53                   	push   ebx
c001debc:	e8 21 39 ff ff       	call   c00117e2 <VAS::~VAS()>
c001dec1:	58                   	pop    eax
c001dec2:	5a                   	pop    edx
c001dec3:	6a 14                	push   0x14
c001dec5:	53                   	push   ebx
c001dec6:	e8 82 45 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001decb:	83 c4 10             	add    esp,0x10
c001dece:	83 c4 1c             	add    esp,0x1c
c001ded1:	5b                   	pop    ebx
c001ded2:	5e                   	pop    esi
c001ded3:	5f                   	pop    edi
c001ded4:	5d                   	pop    ebp
c001ded5:	c3                   	ret    
c001ded6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001deda:	83 ec 0c             	sub    esp,0xc
c001dedd:	68 54 b8 02 c0       	push   0xc002b854
c001dee2:	e8 78 bd ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001dee7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001deea:	83 c4 10             	add    esp,0x10
c001deed:	89 f7                	mov    edi,esi
c001deef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001def3:	e9 b0 fe ff ff       	jmp    c001dda8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001def8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001defe:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001df04:	75 1c                	jne    c001df22 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	68 bc b8 02 c0       	push   0xc002b8bc
c001df0e:	e8 12 46 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001df13:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df1a:	e8 a0 fa ff ff       	call   c001d9bf <blockTask(TaskState)>
c001df1f:	83 c4 10             	add    esp,0x10
c001df22:	83 ec 08             	sub    esp,0x8
c001df25:	56                   	push   esi
c001df26:	68 e4 0a 03 c0       	push   0xc0030ae4
c001df2b:	e8 30 a7 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df30:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001df37:	e8 6e a6 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df3c:	83 c4 10             	add    esp,0x10
c001df3f:	39 f8                	cmp    eax,edi
c001df41:	0f 84 3e ff ff ff    	je     c001de85 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001df47:	83 ec 0c             	sub    esp,0xc
c001df4a:	68 e4 0a 03 c0       	push   0xc0030ae4
c001df4f:	e8 56 a6 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df54:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001df5b:	89 c6                	mov    esi,eax
c001df5d:	e8 50 a6 00 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df62:	83 c4 10             	add    esp,0x10
c001df65:	39 f3                	cmp    ebx,esi
c001df67:	74 b9                	je     c001df22 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df69:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001df6c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df6f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001df75:	75 ab                	jne    c001df22 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df77:	e9 7c ff ff ff       	jmp    c001def8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001df7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	68 88 b8 02 c0       	push   0xc002b888
c001df88:	e9 55 ff ff ff       	jmp    c001dee2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001df8d:	8b 36                	mov    esi,DWORD PTR [esi]
c001df8f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df93:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001df96:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df99:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001df9f:	01 d7                	add    edi,edx
c001dfa1:	89 f8                	mov    eax,edi
c001dfa3:	e9 66 fe ff ff       	jmp    c001de0e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dfa8 <cleanerTaskFunction(void*)>:
c001dfa8:	53                   	push   ebx
c001dfa9:	83 ec 08             	sub    esp,0x8
c001dfac:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dfb1:	48                   	dec    eax
c001dfb2:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dfb7:	75 01                	jne    c001dfba <cleanerTaskFunction(void*)+0x12>
c001dfb9:	fb                   	sti    
c001dfba:	fa                   	cli    
c001dfbb:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dfc0:	80 3d ac 0a 03 c0 00 	cmp    BYTE PTR ds:0xc0030aac,0x0
c001dfc7:	8d 50 01             	lea    edx,[eax+0x1]
c001dfca:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001dfd0:	0f 84 a1 00 00 00    	je     c001e077 <cleanerTaskFunction(void*)+0xcf>
c001dfd6:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dfdb:	85 c0                	test   eax,eax
c001dfdd:	75 01                	jne    c001dfe0 <cleanerTaskFunction(void*)+0x38>
c001dfdf:	fb                   	sti    
c001dfe0:	c6 05 ac 0a 03 c0 00 	mov    BYTE PTR ds:0xc0030aac,0x0
c001dfe7:	fa                   	cli    
c001dfe8:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dfee:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001dff4:	fa                   	cli    
c001dff5:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dffb:	eb 26                	jmp    c001e023 <cleanerTaskFunction(void*)+0x7b>
c001dffd:	83 ec 0c             	sub    esp,0xc
c001e000:	68 cc 0a 03 c0       	push   0xc0030acc
c001e005:	e8 a0 a5 00 00       	call   c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e00a:	c7 04 24 cc 0a 03 c0 	mov    DWORD PTR [esp],0xc0030acc
c001e011:	89 c3                	mov    ebx,eax
c001e013:	e8 9a a5 00 00       	call   c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e01b:	e8 e1 fc ff ff       	call   c001dd01 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	83 ec 0c             	sub    esp,0xc
c001e026:	68 cc 0a 03 c0       	push   0xc0030acc
c001e02b:	e8 5e a5 00 00       	call   c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e030:	83 c4 10             	add    esp,0x10
c001e033:	84 c0                	test   al,al
c001e035:	74 c6                	je     c001dffd <cleanerTaskFunction(void*)+0x55>
c001e037:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e03c:	48                   	dec    eax
c001e03d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e042:	75 01                	jne    c001e045 <cleanerTaskFunction(void*)+0x9d>
c001e044:	fb                   	sti    
c001e045:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e04a:	48                   	dec    eax
c001e04b:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e050:	0f 85 56 ff ff ff    	jne    c001dfac <cleanerTaskFunction(void*)+0x4>
c001e056:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001e05b:	85 c0                	test   eax,eax
c001e05d:	0f 84 49 ff ff ff    	je     c001dfac <cleanerTaskFunction(void*)+0x4>
c001e063:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e06d:	e8 77 f7 ff ff       	call   c001d7e9 <schedule()>
c001e072:	e9 35 ff ff ff       	jmp    c001dfac <cleanerTaskFunction(void*)+0x4>
c001e077:	83 ec 0c             	sub    esp,0xc
c001e07a:	6a 02                	push   0x2
c001e07c:	e8 18 f9 ff ff       	call   c001d999 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e081:	83 c4 10             	add    esp,0x10
c001e084:	e9 57 ff ff ff       	jmp    c001dfe0 <cleanerTaskFunction(void*)+0x38>

c001e089 <terminateTask(int)>:
c001e089:	83 ec 14             	sub    esp,0x14
c001e08c:	fa                   	cli    
c001e08d:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e093:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001e099:	fa                   	cli    
c001e09a:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e0a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0a9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e0ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e0b4:	50                   	push   eax
c001e0b5:	68 cc 0a 03 c0       	push   0xc0030acc
c001e0ba:	e8 a1 a5 00 00       	call   c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0c4:	83 c4 10             	add    esp,0x10
c001e0c7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e0ce:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e0d3:	85 c0                	test   eax,eax
c001e0d5:	74 53                	je     c001e12a <terminateTask(int)+0xa1>
c001e0d7:	83 ec 0c             	sub    esp,0xc
c001e0da:	c6 05 ac 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aac,0x1
c001e0e1:	50                   	push   eax
c001e0e2:	e8 85 fb ff ff       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001e0e7:	83 c4 10             	add    esp,0x10
c001e0ea:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e0ef:	48                   	dec    eax
c001e0f0:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e0f5:	75 01                	jne    c001e0f8 <terminateTask(int)+0x6f>
c001e0f7:	fb                   	sti    
c001e0f8:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e0fd:	48                   	dec    eax
c001e0fe:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e103:	75 09                	jne    c001e10e <terminateTask(int)+0x85>
c001e105:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c001e10c:	75 2e                	jne    c001e13c <terminateTask(int)+0xb3>
c001e10e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e113:	48                   	dec    eax
c001e114:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e119:	75 01                	jne    c001e11c <terminateTask(int)+0x93>
c001e11b:	fb                   	sti    
c001e11c:	fa                   	cli    
c001e11d:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e123:	e8 c1 f6 ff ff       	call   c001d7e9 <schedule()>
c001e128:	eb e4                	jmp    c001e10e <terminateTask(int)+0x85>
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	68 d9 b7 02 c0       	push   0xc002b7d9
c001e132:	e8 ee 43 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001e137:	83 c4 10             	add    esp,0x10
c001e13a:	eb ae                	jmp    c001e0ea <terminateTask(int)+0x61>
c001e13c:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e146:	eb db                	jmp    c001e123 <terminateTask(int)+0x9a>

c001e148 <Thr::terminateFromIRQ(int)>:
c001e148:	83 ec 18             	sub    esp,0x18
c001e14b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e14f:	e8 35 ff ff ff       	call   c001e089 <terminateTask(int)>

c001e154 <Semaphore::release()>:
c001e154:	83 ec 0c             	sub    esp,0xc
c001e157:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e15b:	fa                   	cli    
c001e15c:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e161:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e167:	8d 48 01             	lea    ecx,[eax+0x1]
c001e16a:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001e170:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e173:	85 c9                	test   ecx,ecx
c001e175:	74 3c                	je     c001e1b3 <Semaphore::release()+0x5f>
c001e177:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e17a:	83 ec 0c             	sub    esp,0xc
c001e17d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e180:	51                   	push   ecx
c001e181:	e8 e6 fa ff ff       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001e186:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e18b:	83 c4 10             	add    esp,0x10
c001e18e:	48                   	dec    eax
c001e18f:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e194:	85 c0                	test   eax,eax
c001e196:	75 09                	jne    c001e1a1 <Semaphore::release()+0x4d>
c001e198:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001e19d:	85 c0                	test   eax,eax
c001e19f:	75 17                	jne    c001e1b8 <Semaphore::release()+0x64>
c001e1a1:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e1a6:	48                   	dec    eax
c001e1a7:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e1ac:	75 01                	jne    c001e1af <Semaphore::release()+0x5b>
c001e1ae:	fb                   	sti    
c001e1af:	83 c4 0c             	add    esp,0xc
c001e1b2:	c3                   	ret    
c001e1b3:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e1b6:	eb d7                	jmp    c001e18f <Semaphore::release()+0x3b>
c001e1b8:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e1c2:	e8 22 f6 ff ff       	call   c001d7e9 <schedule()>
c001e1c7:	eb d8                	jmp    c001e1a1 <Semaphore::release()+0x4d>

c001e1c9 <__static_initialization_and_destruction_0(int, int)>:
c001e1c9:	83 ec 0c             	sub    esp,0xc
c001e1cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e1d1:	0f 85 88 00 00 00    	jne    c001e25f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1d7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e1df:	75 7e                	jne    c001e25f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1e1:	83 ec 0c             	sub    esp,0xc
c001e1e4:	68 e4 0a 03 c0       	push   0xc0030ae4
c001e1e9:	e8 02 a7 00 00       	call   c00288f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e1ee:	83 c4 10             	add    esp,0x10
c001e1f1:	83 ec 04             	sub    esp,0x4
c001e1f4:	68 70 c3 02 c0       	push   0xc002c370
c001e1f9:	68 e4 0a 03 c0       	push   0xc0030ae4
c001e1fe:	68 a4 88 02 c0       	push   0xc00288a4
c001e203:	e8 bf 41 ff ff       	call   c00123c7 <__cxa_atexit>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	83 ec 0c             	sub    esp,0xc
c001e20e:	68 d8 0a 03 c0       	push   0xc0030ad8
c001e213:	e8 d8 a6 00 00       	call   c00288f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	83 ec 04             	sub    esp,0x4
c001e21e:	68 70 c3 02 c0       	push   0xc002c370
c001e223:	68 d8 0a 03 c0       	push   0xc0030ad8
c001e228:	68 a4 88 02 c0       	push   0xc00288a4
c001e22d:	e8 95 41 ff ff       	call   c00123c7 <__cxa_atexit>
c001e232:	83 c4 10             	add    esp,0x10
c001e235:	83 ec 0c             	sub    esp,0xc
c001e238:	68 cc 0a 03 c0       	push   0xc0030acc
c001e23d:	e8 ae a6 00 00       	call   c00288f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e242:	83 c4 10             	add    esp,0x10
c001e245:	83 ec 04             	sub    esp,0x4
c001e248:	68 70 c3 02 c0       	push   0xc002c370
c001e24d:	68 cc 0a 03 c0       	push   0xc0030acc
c001e252:	68 a4 88 02 c0       	push   0xc00288a4
c001e257:	e8 6b 41 ff ff       	call   c00123c7 <__cxa_atexit>
c001e25c:	83 c4 10             	add    esp,0x10
c001e25f:	90                   	nop
c001e260:	83 c4 0c             	add    esp,0xc
c001e263:	c3                   	ret    

c001e264 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	83 ec 08             	sub    esp,0x8
c001e26a:	68 ff ff 00 00       	push   0xffff
c001e26f:	6a 01                	push   0x1
c001e271:	e8 53 ff ff ff       	call   c001e1c9 <__static_initialization_and_destruction_0(int, int)>
c001e276:	83 c4 10             	add    esp,0x10
c001e279:	83 c4 0c             	add    esp,0xc
c001e27c:	c3                   	ret    

c001e27d <Vm::inbv(unsigned short)>:
c001e27d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e281:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e286:	75 06                	jne    c001e28e <Vm::inbv(unsigned short)+0x11>
c001e288:	a0 2c 0b 03 c0       	mov    al,ds:0xc0030b2c
c001e28d:	c3                   	ret    
c001e28e:	ec                   	in     al,dx
c001e28f:	c3                   	ret    

c001e290 <Vm::outbv(unsigned short, unsigned char)>:
c001e290:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e298:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e29d:	75 25                	jne    c001e2c4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e29f:	8b 0d 2c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b2c
c001e2a5:	8d 51 01             	lea    edx,[ecx+0x1]
c001e2a8:	88 81 40 0b 03 c0    	mov    BYTE PTR [ecx-0x3ffcf4c0],al
c001e2ae:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c001e2b4:	83 fa 20             	cmp    edx,0x20
c001e2b7:	75 0c                	jne    c001e2c5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e2b9:	c7 05 2c 0b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x1f
c001e2c3:	c3                   	ret    
c001e2c4:	ee                   	out    dx,al
c001e2c5:	c3                   	ret    

c001e2c6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e2c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e2cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e2d0:	c1 e0 04             	shl    eax,0x4
c001e2d3:	01 d0                	add    eax,edx
c001e2d5:	c3                   	ret    

c001e2d6 <Vm::getSegment(unsigned int)>:
c001e2d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2da:	c1 e8 10             	shr    eax,0x10
c001e2dd:	c3                   	ret    

c001e2de <Vm::getOffset(unsigned int)>:
c001e2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2e2:	c3                   	ret    

c001e2e3 <Vm::mainloop2()>:
c001e2e3:	83 ec 18             	sub    esp,0x18
c001e2e6:	fa                   	cli    
c001e2e7:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e2ed:	6a 02                	push   0x2
c001e2ef:	c6 05 25 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b25,0x1
c001e2f6:	e8 9e f6 ff ff       	call   c001d999 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e300:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e304:	52                   	push   edx
c001e305:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e309:	52                   	push   edx
c001e30a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e30e:	52                   	push   edx
c001e30f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e313:	50                   	push   eax
c001e314:	e8 e1 1f fe ff       	call   c00002fa <goToVM86>
c001e319:	83 c4 2c             	add    esp,0x2c
c001e31c:	c3                   	ret    

c001e31d <Vm::mainVm8086Loop(void*)>:
c001e31d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e322:	48                   	dec    eax
c001e323:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e328:	75 01                	jne    c001e32b <Vm::mainVm8086Loop(void*)+0xe>
c001e32a:	fb                   	sti    
c001e32b:	eb b6                	jmp    c001e2e3 <Vm::mainloop2()>

c001e32d <Vm::mainloop3(unsigned long)>:
c001e32d:	83 ec 18             	sub    esp,0x18
c001e330:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e334:	fa                   	cli    
c001e335:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e33b:	6a 02                	push   0x2
c001e33d:	c6 05 24 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b24,0x1
c001e344:	a3 20 0b 03 c0       	mov    ds:0xc0030b20,eax
c001e349:	e8 4b f6 ff ff       	call   c001d999 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e34e:	83 c4 1c             	add    esp,0x1c
c001e351:	eb 90                	jmp    c001e2e3 <Vm::mainloop2()>

c001e353 <Vm::initialise8086()>:
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	68 80 00 00 00       	push   0x80
c001e35b:	6a 00                	push   0x0
c001e35d:	68 1d e3 01 c0       	push   0xc001e31d
c001e362:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001e368:	e8 57 f2 ff ff       	call   c001d5c4 <Process::createThread(void (*)(void*), void*, int)>
c001e36d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e374:	a3 28 0b 03 c0       	mov    ds:0xc0030b28,eax
c001e379:	68 00 01 00 00       	push   0x100
c001e37e:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001e383:	6a 00                	push   0x0
c001e385:	6a 00                	push   0x0
c001e387:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e38d:	e8 c2 38 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e392:	83 c4 2c             	add    esp,0x2c
c001e395:	c3                   	ret    

c001e396 <Vm::finish8086()>:
c001e396:	53                   	push   ebx
c001e397:	83 ec 08             	sub    esp,0x8
c001e39a:	fa                   	cli    
c001e39b:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e3a1:	80 3d 24 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b24,0x0
c001e3a8:	75 15                	jne    c001e3bf <Vm::finish8086()+0x29>
c001e3aa:	e8 3a f4 ff ff       	call   c001d7e9 <schedule()>
c001e3af:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e3b4:	48                   	dec    eax
c001e3b5:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e3ba:	75 de                	jne    c001e39a <Vm::finish8086()+0x4>
c001e3bc:	fb                   	sti    
c001e3bd:	eb db                	jmp    c001e39a <Vm::finish8086()+0x4>
c001e3bf:	83 ec 0c             	sub    esp,0xc
c001e3c2:	8b 1d 20 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b20
c001e3c8:	ff 35 28 0b 03 c0    	push   DWORD PTR ds:0xc0030b28
c001e3ce:	c6 05 24 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b24,0x0
c001e3d5:	e8 92 f8 ff ff       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001e3da:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	8d 50 ff             	lea    edx,[eax-0x1]
c001e3e5:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001e3eb:	85 d2                	test   edx,edx
c001e3ed:	75 01                	jne    c001e3f0 <Vm::finish8086()+0x5a>
c001e3ef:	fb                   	sti    
c001e3f0:	89 d8                	mov    eax,ebx
c001e3f2:	83 c4 08             	add    esp,0x8
c001e3f5:	5b                   	pop    ebx
c001e3f6:	c3                   	ret    

c001e3f7 <Vm::getOutput8086(unsigned char*)>:
c001e3f7:	57                   	push   edi
c001e3f8:	8b 0d 2c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b2c
c001e3fe:	56                   	push   esi
c001e3ff:	be 40 0b 03 c0       	mov    esi,0xc0030b40
c001e404:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e408:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e40a:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c001e40f:	5e                   	pop    esi
c001e410:	c7 05 2c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x0
c001e41a:	5f                   	pop    edi
c001e41b:	c3                   	ret    

c001e41c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e41c:	55                   	push   ebp
c001e41d:	57                   	push   edi
c001e41e:	56                   	push   esi
c001e41f:	53                   	push   ebx
c001e420:	83 ec 2c             	sub    esp,0x2c
c001e423:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e427:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e42b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e42f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e433:	fa                   	cli    
c001e434:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e43a:	0f b6 35 25 0b 03 c0 	movzx  esi,BYTE PTR ds:0xc0030b25
c001e441:	89 f0                	mov    eax,esi
c001e443:	84 c0                	test   al,al
c001e445:	75 1d                	jne    c001e464 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e447:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e44b:	e8 99 f3 ff ff       	call   c001d7e9 <schedule()>
c001e450:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e455:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e459:	48                   	dec    eax
c001e45a:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e45f:	75 d2                	jne    c001e433 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e461:	fb                   	sti    
c001e462:	eb cf                	jmp    c001e433 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e464:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c001e469:	c7 05 2c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x0
c001e473:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e477:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e47b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e47f:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e483:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e487:	50                   	push   eax
c001e488:	6a 20                	push   0x20
c001e48a:	6a 00                	push   0x0
c001e48c:	68 40 0b 03 c0       	push   0xc0030b40
c001e491:	e8 ba 22 fe ff       	call   c0000750 <memset>
c001e496:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e49d:	e8 fa 10 ff ff       	call   c000f59c <malloc>
c001e4a2:	83 c4 0c             	add    esp,0xc
c001e4a5:	89 c3                	mov    ebx,eax
c001e4a7:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001e4ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4b1:	50                   	push   eax
c001e4b2:	e8 cd 45 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	85 db                	test   ebx,ebx
c001e4bc:	75 0a                	jne    c001e4c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e4be:	83 ec 0c             	sub    esp,0xc
c001e4c1:	68 e4 b8 02 c0       	push   0xc002b8e4
c001e4c6:	eb 3e                	jmp    c001e506 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4c8:	50                   	push   eax
c001e4c9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e4cd:	50                   	push   eax
c001e4ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e4d2:	50                   	push   eax
c001e4d3:	53                   	push   ebx
c001e4d4:	e8 bb 48 ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e4e1:	74 0a                	je     c001e4ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e4e3:	83 ec 0c             	sub    esp,0xc
c001e4e6:	68 f8 b8 02 c0       	push   0xc002b8f8
c001e4eb:	eb 19                	jmp    c001e506 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4ed:	51                   	push   ecx
c001e4ee:	51                   	push   ecx
c001e4ef:	6a 01                	push   0x1
c001e4f1:	53                   	push   ebx
c001e4f2:	e8 f1 45 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c001e4f7:	83 c4 10             	add    esp,0x10
c001e4fa:	85 c0                	test   eax,eax
c001e4fc:	74 24                	je     c001e522 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e4fe:	83 ec 0c             	sub    esp,0xc
c001e501:	68 11 b9 02 c0       	push   0xc002b911
c001e506:	e8 54 b7 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001e50b:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	48                   	dec    eax
c001e514:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e519:	85 c0                	test   eax,eax
c001e51b:	75 01                	jne    c001e51e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e51d:	fb                   	sti    
c001e51e:	31 f6                	xor    esi,esi
c001e520:	eb 58                	jmp    c001e57a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e522:	0f b7 ed             	movzx  ebp,bp
c001e525:	50                   	push   eax
c001e526:	0f b7 ff             	movzx  edi,di
c001e529:	50                   	push   eax
c001e52a:	55                   	push   ebp
c001e52b:	57                   	push   edi
c001e52c:	e8 95 fd ff ff       	call   c001e2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e531:	5a                   	pop    edx
c001e532:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e534:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e538:	51                   	push   ecx
c001e539:	50                   	push   eax
c001e53a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e53e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e542:	53                   	push   ebx
c001e543:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e546:	83 c4 14             	add    esp,0x14
c001e549:	53                   	push   ebx
c001e54a:	e8 f7 45 ff ff       	call   c0012b46 <File::close()>
c001e54f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e554:	83 c4 10             	add    esp,0x10
c001e557:	48                   	dec    eax
c001e558:	c6 05 25 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b25,0x0
c001e55f:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e564:	85 c0                	test   eax,eax
c001e566:	75 01                	jne    c001e569 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e568:	fb                   	sti    
c001e569:	83 ec 0c             	sub    esp,0xc
c001e56c:	ff 35 28 0b 03 c0    	push   DWORD PTR ds:0xc0030b28
c001e572:	e8 f5 f6 ff ff       	call   c001dc6c <unblockTask(ThreadControlBlock*)>
c001e577:	83 c4 10             	add    esp,0x10
c001e57a:	83 c4 2c             	add    esp,0x2c
c001e57d:	89 f0                	mov    eax,esi
c001e57f:	5b                   	pop    ebx
c001e580:	5e                   	pop    esi
c001e581:	5f                   	pop    edi
c001e582:	5d                   	pop    ebp
c001e583:	c3                   	ret    

c001e584 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e584:	57                   	push   edi
c001e585:	56                   	push   esi
c001e586:	53                   	push   ebx
c001e587:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e58b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e58f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e593:	83 e8 06             	sub    eax,0x6
c001e596:	0f b7 c0             	movzx  eax,ax
c001e599:	50                   	push   eax
c001e59a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e59f:	50                   	push   eax
c001e5a0:	e8 21 fd ff ff       	call   c001e2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e5a5:	5a                   	pop    edx
c001e5a6:	5e                   	pop    esi
c001e5a7:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e5aa:	8d 56 fa             	lea    edx,[esi-0x6]
c001e5ad:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e5b3:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e5b6:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e5b9:	83 c2 02             	add    edx,0x2
c001e5bc:	66 89 10             	mov    WORD PTR [eax],dx
c001e5bf:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e5c2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e5c6:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e5c9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e5cd:	89 d6                	mov    esi,edx
c001e5cf:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e5d5:	66 81 e6 ff fd       	and    si,0xfdff
c001e5da:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e5de:	74 07                	je     c001e5e7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e5e0:	89 d6                	mov    esi,edx
c001e5e2:	66 81 ce 00 02       	or     si,0x200
c001e5e7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e5eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5f0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e5f4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e5fc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e5ff:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e607:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e60a:	5b                   	pop    ebx
c001e60b:	5e                   	pop    esi
c001e60c:	5f                   	pop    edi
c001e60d:	c3                   	ret    

c001e60e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e60e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e613:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e618:	c1 e0 04             	shl    eax,0x4
c001e61b:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e61e:	c3                   	ret    

c001e61f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e61f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e624:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e629:	c1 e0 04             	shl    eax,0x4
c001e62c:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e630:	c3                   	ret    

c001e631 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e631:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e636:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e63b:	c1 e0 04             	shl    eax,0x4
c001e63e:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e641:	c3                   	ret    

c001e642 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e642:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e647:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e64c:	c1 e0 04             	shl    eax,0x4
c001e64f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e653:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e656:	c3                   	ret    

c001e657 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e657:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e65c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e661:	c1 e0 04             	shl    eax,0x4
c001e664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e668:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e66c:	c3                   	ret    

c001e66d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e66d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e672:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e677:	c1 e0 04             	shl    eax,0x4
c001e67a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e67e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e681:	c3                   	ret    

c001e682 <Vm::faultHandler(regs*)>:
c001e682:	55                   	push   ebp
c001e683:	57                   	push   edi
c001e684:	56                   	push   esi
c001e685:	53                   	push   ebx
c001e686:	83 ec 1c             	sub    esp,0x1c
c001e689:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e68d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e690:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e694:	0f b7 f8             	movzx  edi,ax
c001e697:	52                   	push   edx
c001e698:	0f b7 c0             	movzx  eax,ax
c001e69b:	50                   	push   eax
c001e69c:	e8 25 fc ff ff       	call   c001e2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6a1:	5a                   	pop    edx
c001e6a2:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e6a5:	59                   	pop    ecx
c001e6a6:	89 c1                	mov    ecx,eax
c001e6a8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e6ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e6b8:	0f b7 c5             	movzx  eax,bp
c001e6bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e6c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6c7:	e8 fa fb ff ff       	call   c001e2c6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6cc:	5e                   	pop    esi
c001e6cd:	be 06 00 00 00       	mov    esi,0x6
c001e6d2:	5a                   	pop    edx
c001e6d3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e6d8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e6dd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e6e0:	80 fa 9d             	cmp    dl,0x9d
c001e6e3:	0f 84 2c 02 00 00    	je     c001e915 <Vm::faultHandler(regs*)+0x293>
c001e6e9:	0f 87 91 00 00 00    	ja     c001e780 <Vm::faultHandler(regs*)+0xfe>
c001e6ef:	80 fa 66             	cmp    dl,0x66
c001e6f2:	0f 84 98 01 00 00    	je     c001e890 <Vm::faultHandler(regs*)+0x20e>
c001e6f8:	77 47                	ja     c001e741 <Vm::faultHandler(regs*)+0xbf>
c001e6fa:	80 fa 36             	cmp    dl,0x36
c001e6fd:	0f 84 80 01 00 00    	je     c001e883 <Vm::faultHandler(regs*)+0x201>
c001e703:	77 1a                	ja     c001e71f <Vm::faultHandler(regs*)+0x9d>
c001e705:	80 fa 26             	cmp    dl,0x26
c001e708:	0f 84 4e 01 00 00    	je     c001e85c <Vm::faultHandler(regs*)+0x1da>
c001e70e:	80 fa 2e             	cmp    dl,0x2e
c001e711:	0f 85 e2 05 00 00    	jne    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e717:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e71a:	31 f6                	xor    esi,esi
c001e71c:	41                   	inc    ecx
c001e71d:	eb be                	jmp    c001e6dd <Vm::faultHandler(regs*)+0x5b>
c001e71f:	80 fa 64             	cmp    dl,0x64
c001e722:	0f 84 41 01 00 00    	je     c001e869 <Vm::faultHandler(regs*)+0x1e7>
c001e728:	0f 87 48 01 00 00    	ja     c001e876 <Vm::faultHandler(regs*)+0x1f4>
c001e72e:	80 fa 3e             	cmp    dl,0x3e
c001e731:	0f 85 c2 05 00 00    	jne    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e737:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e73a:	be 01 00 00 00       	mov    esi,0x1
c001e73f:	eb db                	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e741:	80 fa 6d             	cmp    dl,0x6d
c001e744:	0f 84 ec 02 00 00    	je     c001ea36 <Vm::faultHandler(regs*)+0x3b4>
c001e74a:	77 17                	ja     c001e763 <Vm::faultHandler(regs*)+0xe1>
c001e74c:	80 fa 67             	cmp    dl,0x67
c001e74f:	0f 84 48 01 00 00    	je     c001e89d <Vm::faultHandler(regs*)+0x21b>
c001e755:	80 fa 6c             	cmp    dl,0x6c
c001e758:	0f 84 69 02 00 00    	je     c001e9c7 <Vm::faultHandler(regs*)+0x345>
c001e75e:	e9 96 05 00 00       	jmp    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e763:	80 fa 6f             	cmp    dl,0x6f
c001e766:	0f 84 f4 03 00 00    	je     c001eb60 <Vm::faultHandler(regs*)+0x4de>
c001e76c:	0f 82 59 03 00 00    	jb     c001eacb <Vm::faultHandler(regs*)+0x449>
c001e772:	80 fa 9c             	cmp    dl,0x9c
c001e775:	0f 84 2f 01 00 00    	je     c001e8aa <Vm::faultHandler(regs*)+0x228>
c001e77b:	e9 79 05 00 00       	jmp    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e780:	80 fa ec             	cmp    dl,0xec
c001e783:	0f 84 14 05 00 00    	je     c001ec9d <Vm::faultHandler(regs*)+0x61b>
c001e789:	77 7b                	ja     c001e806 <Vm::faultHandler(regs*)+0x184>
c001e78b:	80 fa e4             	cmp    dl,0xe4
c001e78e:	0f 84 93 04 00 00    	je     c001ec27 <Vm::faultHandler(regs*)+0x5a5>
c001e794:	77 53                	ja     c001e7e9 <Vm::faultHandler(regs*)+0x167>
c001e796:	80 fa cd             	cmp    dl,0xcd
c001e799:	0f 84 d9 01 00 00    	je     c001e978 <Vm::faultHandler(regs*)+0x2f6>
c001e79f:	80 fa cf             	cmp    dl,0xcf
c001e7a2:	0f 85 51 05 00 00    	jne    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e7a8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e7ab:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e7ae:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e7b2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e7b5:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e7b9:	81 ca 00 02 02 00    	or     edx,0x20200
c001e7bf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e7c2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e7c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7cc:	66 c1 e8 09          	shr    ax,0x9
c001e7d0:	83 e0 01             	and    eax,0x1
c001e7d3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e7d6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e7d9:	83 c0 06             	add    eax,0x6
c001e7dc:	25 ff ff 00 00       	and    eax,0xffff
c001e7e1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e7e4:	e9 0c 05 00 00       	jmp    c001ecf5 <Vm::faultHandler(regs*)+0x673>
c001e7e9:	80 fa e6             	cmp    dl,0xe6
c001e7ec:	0f 84 7f 04 00 00    	je     c001ec71 <Vm::faultHandler(regs*)+0x5ef>
c001e7f2:	0f 82 4b 04 00 00    	jb     c001ec43 <Vm::faultHandler(regs*)+0x5c1>
c001e7f8:	80 fa e7             	cmp    dl,0xe7
c001e7fb:	0f 84 87 04 00 00    	je     c001ec88 <Vm::faultHandler(regs*)+0x606>
c001e801:	e9 f3 04 00 00       	jmp    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e806:	80 fa ef             	cmp    dl,0xef
c001e809:	0f 84 d1 04 00 00    	je     c001ece0 <Vm::faultHandler(regs*)+0x65e>
c001e80f:	77 28                	ja     c001e839 <Vm::faultHandler(regs*)+0x1b7>
c001e811:	80 fa ed             	cmp    dl,0xed
c001e814:	0f 84 9f 04 00 00    	je     c001ecb9 <Vm::faultHandler(regs*)+0x637>
c001e81a:	80 fa ee             	cmp    dl,0xee
c001e81d:	0f 85 d6 04 00 00    	jne    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e823:	50                   	push   eax
c001e824:	50                   	push   eax
c001e825:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e829:	50                   	push   eax
c001e82a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e82e:	50                   	push   eax
c001e82f:	e8 5c fa ff ff       	call   c001e290 <Vm::outbv(unsigned short, unsigned char)>
c001e834:	e9 9f 04 00 00       	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x656>
c001e839:	80 fa fa             	cmp    dl,0xfa
c001e83c:	0f 84 69 01 00 00    	je     c001e9ab <Vm::faultHandler(regs*)+0x329>
c001e842:	80 fa fb             	cmp    dl,0xfb
c001e845:	0f 84 6e 01 00 00    	je     c001e9b9 <Vm::faultHandler(regs*)+0x337>
c001e84b:	80 fa f3             	cmp    dl,0xf3
c001e84e:	0f 85 a5 04 00 00    	jne    c001ecf9 <Vm::faultHandler(regs*)+0x677>
c001e854:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e857:	e9 c0 fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e85c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e85f:	be 02 00 00 00       	mov    esi,0x2
c001e864:	e9 b3 fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e869:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e86c:	be 03 00 00 00       	mov    esi,0x3
c001e871:	e9 a6 fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e876:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e879:	be 04 00 00 00       	mov    esi,0x4
c001e87e:	e9 99 fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e883:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e886:	be 05 00 00 00       	mov    esi,0x5
c001e88b:	e9 8c fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e890:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e893:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e898:	e9 7f fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e89d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8a0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e8a5:	e9 72 fe ff ff       	jmp    c001e71c <Vm::faultHandler(regs*)+0x9a>
c001e8aa:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e8ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e8b1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e8b6:	74 30                	je     c001e8e8 <Vm::faultHandler(regs*)+0x266>
c001e8b8:	83 e9 04             	sub    ecx,0x4
c001e8bb:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e8c1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8c7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e8ca:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8d3:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e8d7:	0f 84 15 04 00 00    	je     c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e8dd:	80 ce 02             	or     dh,0x2
c001e8e0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8e3:	e9 0a 04 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e8e8:	83 e9 02             	sub    ecx,0x2
c001e8eb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8f1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e8f4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e8f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8fe:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e902:	74 05                	je     c001e909 <Vm::faultHandler(regs*)+0x287>
c001e904:	80 ce 02             	or     dh,0x2
c001e907:	eb 03                	jmp    c001e90c <Vm::faultHandler(regs*)+0x28a>
c001e909:	80 e6 fd             	and    dh,0xfd
c001e90c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e910:	e9 dd 03 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e915:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e91a:	74 2a                	je     c001e946 <Vm::faultHandler(regs*)+0x2c4>
c001e91c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e91e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e924:	81 ca 00 02 02 00    	or     edx,0x20200
c001e92a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e92d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e92f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e935:	c1 e8 09             	shr    eax,0x9
c001e938:	83 e0 01             	and    eax,0x1
c001e93b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e93e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e941:	83 c0 04             	add    eax,0x4
c001e944:	eb 25                	jmp    c001e96b <Vm::faultHandler(regs*)+0x2e9>
c001e946:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e949:	81 ca 00 02 02 00    	or     edx,0x20200
c001e94f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e952:	66 8b 00             	mov    ax,WORD PTR [eax]
c001e955:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e95b:	66 c1 e8 09          	shr    ax,0x9
c001e95f:	83 e0 01             	and    eax,0x1
c001e962:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e965:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e968:	83 c0 02             	add    eax,0x2
c001e96b:	25 ff ff 00 00       	and    eax,0xffff
c001e970:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e973:	e9 7a 03 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e978:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e97c:	3c ee                	cmp    al,0xee
c001e97e:	75 10                	jne    c001e990 <Vm::faultHandler(regs*)+0x30e>
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001e986:	e8 a2 f9 ff ff       	call   c001e32d <Vm::mainloop3(unsigned long)>
c001e98b:	e9 4b 03 00 00       	jmp    c001ecdb <Vm::faultHandler(regs*)+0x659>
c001e990:	83 ec 0c             	sub    esp,0xc
c001e993:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e99b:	51                   	push   ecx
c001e99c:	50                   	push   eax
c001e99d:	53                   	push   ebx
c001e99e:	e8 e1 fb ff ff       	call   c001e584 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e9a3:	83 c4 20             	add    esp,0x20
c001e9a6:	e9 4a 03 00 00       	jmp    c001ecf5 <Vm::faultHandler(regs*)+0x673>
c001e9ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9b0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9b4:	e9 39 03 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e9b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9be:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e9c2:	e9 2b 03 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001e9c7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001e9ca:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001e9cf:	74 2b                	je     c001e9fc <Vm::faultHandler(regs*)+0x37a>
c001e9d1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001e9d8:	76 22                	jbe    c001e9fc <Vm::faultHandler(regs*)+0x37a>
c001e9da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001e9de:	50                   	push   eax
c001e9df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001e9e3:	50                   	push   eax
c001e9e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001e9e8:	50                   	push   eax
c001e9e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001e9ed:	50                   	push   eax
c001e9ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e9f2:	50                   	push   eax
c001e9f3:	6a 6c                	push   0x6c
c001e9f5:	6a 6c                	push   0x6c
c001e9f7:	e9 b9 01 00 00       	jmp    c001ebb5 <Vm::faultHandler(regs*)+0x533>
c001e9fc:	83 ec 0c             	sub    esp,0xc
c001e9ff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea03:	0f b7 f6             	movzx  esi,si
c001ea06:	50                   	push   eax
c001ea07:	e8 71 f8 ff ff       	call   c001e27d <Vm::inbv(unsigned short)>
c001ea0c:	83 c4 0c             	add    esp,0xc
c001ea0f:	0f b6 c0             	movzx  eax,al
c001ea12:	50                   	push   eax
c001ea13:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ea17:	50                   	push   eax
c001ea18:	56                   	push   esi
c001ea19:	e8 24 fc ff ff       	call   c001e642 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ea1e:	83 c4 10             	add    esp,0x10
c001ea21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea24:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea28:	74 03                	je     c001ea2d <Vm::faultHandler(regs*)+0x3ab>
c001ea2a:	48                   	dec    eax
c001ea2b:	eb 01                	jmp    c001ea2e <Vm::faultHandler(regs*)+0x3ac>
c001ea2d:	40                   	inc    eax
c001ea2e:	0f b7 c0             	movzx  eax,ax
c001ea31:	e9 8d 00 00 00       	jmp    c001eac3 <Vm::faultHandler(regs*)+0x441>
c001ea36:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea41:	74 29                	je     c001ea6c <Vm::faultHandler(regs*)+0x3ea>
c001ea43:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea48:	76 22                	jbe    c001ea6c <Vm::faultHandler(regs*)+0x3ea>
c001ea4a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea4e:	50                   	push   eax
c001ea4f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea53:	50                   	push   eax
c001ea54:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea58:	50                   	push   eax
c001ea59:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea5d:	50                   	push   eax
c001ea5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea62:	50                   	push   eax
c001ea63:	6a 6d                	push   0x6d
c001ea65:	6a 6d                	push   0x6d
c001ea67:	e9 49 01 00 00       	jmp    c001ebb5 <Vm::faultHandler(regs*)+0x533>
c001ea6c:	0f b7 c8             	movzx  ecx,ax
c001ea6f:	0f b7 f6             	movzx  esi,si
c001ea72:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ea75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea7a:	74 20                	je     c001ea9c <Vm::faultHandler(regs*)+0x41a>
c001ea7c:	ed                   	in     eax,dx
c001ea7d:	55                   	push   ebp
c001ea7e:	50                   	push   eax
c001ea7f:	51                   	push   ecx
c001ea80:	56                   	push   esi
c001ea81:	e8 e7 fb ff ff       	call   c001e66d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ea86:	83 c4 10             	add    esp,0x10
c001ea89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea8c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea90:	74 05                	je     c001ea97 <Vm::faultHandler(regs*)+0x415>
c001ea92:	83 e8 04             	sub    eax,0x4
c001ea95:	eb 27                	jmp    c001eabe <Vm::faultHandler(regs*)+0x43c>
c001ea97:	83 c0 04             	add    eax,0x4
c001ea9a:	eb 22                	jmp    c001eabe <Vm::faultHandler(regs*)+0x43c>
c001ea9c:	66 ed                	in     ax,dx
c001ea9e:	0f b7 c0             	movzx  eax,ax
c001eaa1:	57                   	push   edi
c001eaa2:	50                   	push   eax
c001eaa3:	51                   	push   ecx
c001eaa4:	56                   	push   esi
c001eaa5:	e8 ad fb ff ff       	call   c001e657 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eab0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eab4:	74 05                	je     c001eabb <Vm::faultHandler(regs*)+0x439>
c001eab6:	83 e8 02             	sub    eax,0x2
c001eab9:	eb 03                	jmp    c001eabe <Vm::faultHandler(regs*)+0x43c>
c001eabb:	83 c0 02             	add    eax,0x2
c001eabe:	25 ff ff 00 00       	and    eax,0xffff
c001eac3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eac6:	e9 27 02 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001eacb:	8d 46 ff             	lea    eax,[esi-0x1]
c001eace:	3c 05                	cmp    al,0x5
c001ead0:	77 24                	ja     c001eaf6 <Vm::faultHandler(regs*)+0x474>
c001ead2:	0f b6 c0             	movzx  eax,al
c001ead5:	ff 24 85 84 b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd467c]
c001eadc:	0f b7 fd             	movzx  edi,bp
c001eadf:	eb 15                	jmp    c001eaf6 <Vm::faultHandler(regs*)+0x474>
c001eae1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eae5:	eb 0f                	jmp    c001eaf6 <Vm::faultHandler(regs*)+0x474>
c001eae7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eaeb:	eb 09                	jmp    c001eaf6 <Vm::faultHandler(regs*)+0x474>
c001eaed:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eaf1:	eb 03                	jmp    c001eaf6 <Vm::faultHandler(regs*)+0x474>
c001eaf3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eaf6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eaf9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eafe:	74 29                	je     c001eb29 <Vm::faultHandler(regs*)+0x4a7>
c001eb00:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb05:	76 22                	jbe    c001eb29 <Vm::faultHandler(regs*)+0x4a7>
c001eb07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb0b:	50                   	push   eax
c001eb0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb10:	50                   	push   eax
c001eb11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb15:	50                   	push   eax
c001eb16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb1a:	50                   	push   eax
c001eb1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb1f:	50                   	push   eax
c001eb20:	6a 6e                	push   0x6e
c001eb22:	6a 6e                	push   0x6e
c001eb24:	e9 8c 00 00 00       	jmp    c001ebb5 <Vm::faultHandler(regs*)+0x533>
c001eb29:	0f b7 c0             	movzx  eax,ax
c001eb2c:	52                   	push   edx
c001eb2d:	52                   	push   edx
c001eb2e:	50                   	push   eax
c001eb2f:	57                   	push   edi
c001eb30:	e8 d9 fa ff ff       	call   c001e60e <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eb35:	59                   	pop    ecx
c001eb36:	0f b6 c0             	movzx  eax,al
c001eb39:	5e                   	pop    esi
c001eb3a:	50                   	push   eax
c001eb3b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb3f:	50                   	push   eax
c001eb40:	e8 4b f7 ff ff       	call   c001e290 <Vm::outbv(unsigned short, unsigned char)>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb4b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb4f:	74 03                	je     c001eb54 <Vm::faultHandler(regs*)+0x4d2>
c001eb51:	48                   	dec    eax
c001eb52:	eb 01                	jmp    c001eb55 <Vm::faultHandler(regs*)+0x4d3>
c001eb54:	40                   	inc    eax
c001eb55:	0f b7 c0             	movzx  eax,ax
c001eb58:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001eb5b:	e9 92 01 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001eb60:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb63:	3c 05                	cmp    al,0x5
c001eb65:	77 1f                	ja     c001eb86 <Vm::faultHandler(regs*)+0x504>
c001eb67:	0f b6 c0             	movzx  eax,al
c001eb6a:	ff 24 85 9c b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4664]
c001eb71:	89 ef                	mov    edi,ebp
c001eb73:	eb 11                	jmp    c001eb86 <Vm::faultHandler(regs*)+0x504>
c001eb75:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001eb78:	eb 0c                	jmp    c001eb86 <Vm::faultHandler(regs*)+0x504>
c001eb7a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001eb7d:	eb 07                	jmp    c001eb86 <Vm::faultHandler(regs*)+0x504>
c001eb7f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001eb82:	eb 02                	jmp    c001eb86 <Vm::faultHandler(regs*)+0x504>
c001eb84:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001eb86:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001eb89:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb8e:	74 37                	je     c001ebc7 <Vm::faultHandler(regs*)+0x545>
c001eb90:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eb96:	76 2f                	jbe    c001ebc7 <Vm::faultHandler(regs*)+0x545>
c001eb98:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb9c:	50                   	push   eax
c001eb9d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eba1:	50                   	push   eax
c001eba2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eba6:	50                   	push   eax
c001eba7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebab:	50                   	push   eax
c001ebac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebb0:	50                   	push   eax
c001ebb1:	6a 6f                	push   0x6f
c001ebb3:	6a 6f                	push   0x6f
c001ebb5:	68 2a b9 02 c0       	push   0xc002b92a
c001ebba:	e8 66 39 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001ebbf:	83 c4 20             	add    esp,0x20
c001ebc2:	e9 86 01 00 00       	jmp    c001ed4d <Vm::faultHandler(regs*)+0x6cb>
c001ebc7:	0f b7 d7             	movzx  edx,di
c001ebca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ebcd:	0f b7 c6             	movzx  eax,si
c001ebd0:	81 e1 00 04 00 00    	and    ecx,0x400
c001ebd6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ebd9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebde:	74 1d                	je     c001ebfd <Vm::faultHandler(regs*)+0x57b>
c001ebe0:	55                   	push   ebp
c001ebe1:	55                   	push   ebp
c001ebe2:	50                   	push   eax
c001ebe3:	52                   	push   edx
c001ebe4:	e8 48 fa ff ff       	call   c001e631 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	89 fa                	mov    edx,edi
c001ebee:	ef                   	out    dx,eax
c001ebef:	85 c9                	test   ecx,ecx
c001ebf1:	74 05                	je     c001ebf8 <Vm::faultHandler(regs*)+0x576>
c001ebf3:	83 ee 04             	sub    esi,0x4
c001ebf6:	eb 21                	jmp    c001ec19 <Vm::faultHandler(regs*)+0x597>
c001ebf8:	83 c6 04             	add    esi,0x4
c001ebfb:	eb 1c                	jmp    c001ec19 <Vm::faultHandler(regs*)+0x597>
c001ebfd:	55                   	push   ebp
c001ebfe:	55                   	push   ebp
c001ebff:	50                   	push   eax
c001ec00:	52                   	push   edx
c001ec01:	e8 19 fa ff ff       	call   c001e61f <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ec06:	83 c4 10             	add    esp,0x10
c001ec09:	89 fa                	mov    edx,edi
c001ec0b:	66 ef                	out    dx,ax
c001ec0d:	85 c9                	test   ecx,ecx
c001ec0f:	74 05                	je     c001ec16 <Vm::faultHandler(regs*)+0x594>
c001ec11:	83 ee 02             	sub    esi,0x2
c001ec14:	eb 03                	jmp    c001ec19 <Vm::faultHandler(regs*)+0x597>
c001ec16:	83 c6 02             	add    esi,0x2
c001ec19:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ec1f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ec22:	e9 cb 00 00 00       	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001ec27:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ec2e:	83 ec 0c             	sub    esp,0xc
c001ec31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec35:	50                   	push   eax
c001ec36:	e8 42 f6 ff ff       	call   c001e27d <Vm::inbv(unsigned short)>
c001ec3b:	0f b6 c0             	movzx  eax,al
c001ec3e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ec41:	eb 3f                	jmp    c001ec82 <Vm::faultHandler(regs*)+0x600>
c001ec43:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec48:	74 07                	je     c001ec51 <Vm::faultHandler(regs*)+0x5cf>
c001ec4a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec4e:	ed                   	in     eax,dx
c001ec4f:	eb 14                	jmp    c001ec65 <Vm::faultHandler(regs*)+0x5e3>
c001ec51:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ec54:	66 31 f6             	xor    si,si
c001ec57:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ec5a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec5e:	66 ed                	in     ax,dx
c001ec60:	0f b7 c0             	movzx  eax,ax
c001ec63:	09 f0                	or     eax,esi
c001ec65:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ec68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec6c:	e9 84 00 00 00       	jmp    c001ecf5 <Vm::faultHandler(regs*)+0x673>
c001ec71:	52                   	push   edx
c001ec72:	52                   	push   edx
c001ec73:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ec77:	50                   	push   eax
c001ec78:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec7c:	50                   	push   eax
c001ec7d:	e8 0e f6 ff ff       	call   c001e290 <Vm::outbv(unsigned short, unsigned char)>
c001ec82:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec86:	eb 53                	jmp    c001ecdb <Vm::faultHandler(regs*)+0x659>
c001ec88:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ec8b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec8f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec94:	74 03                	je     c001ec99 <Vm::faultHandler(regs*)+0x617>
c001ec96:	ef                   	out    dx,eax
c001ec97:	eb cf                	jmp    c001ec68 <Vm::faultHandler(regs*)+0x5e6>
c001ec99:	66 ef                	out    dx,ax
c001ec9b:	eb cb                	jmp    c001ec68 <Vm::faultHandler(regs*)+0x5e6>
c001ec9d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecab:	50                   	push   eax
c001ecac:	e8 cc f5 ff ff       	call   c001e27d <Vm::inbv(unsigned short)>
c001ecb1:	0f b6 c0             	movzx  eax,al
c001ecb4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ecb7:	eb 1f                	jmp    c001ecd8 <Vm::faultHandler(regs*)+0x656>
c001ecb9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ecbc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecc1:	74 03                	je     c001ecc6 <Vm::faultHandler(regs*)+0x644>
c001ecc3:	ed                   	in     eax,dx
c001ecc4:	eb 0d                	jmp    c001ecd3 <Vm::faultHandler(regs*)+0x651>
c001ecc6:	66 ed                	in     ax,dx
c001ecc8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001eccb:	0f b7 c0             	movzx  eax,ax
c001ecce:	66 31 d2             	xor    dx,dx
c001ecd1:	09 d0                	or     eax,edx
c001ecd3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ecd6:	eb 1a                	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001ecd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecdb:	83 c4 10             	add    esp,0x10
c001ecde:	eb 15                	jmp    c001ecf5 <Vm::faultHandler(regs*)+0x673>
c001ece0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ece3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ece6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eceb:	74 03                	je     c001ecf0 <Vm::faultHandler(regs*)+0x66e>
c001eced:	ef                   	out    dx,eax
c001ecee:	eb 02                	jmp    c001ecf2 <Vm::faultHandler(regs*)+0x670>
c001ecf0:	66 ef                	out    dx,ax
c001ecf2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ecf5:	b0 01                	mov    al,0x1
c001ecf7:	eb 56                	jmp    c001ed4f <Vm::faultHandler(regs*)+0x6cd>
c001ecf9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecfd:	50                   	push   eax
c001ecfe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed02:	50                   	push   eax
c001ed03:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed07:	50                   	push   eax
c001ed08:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed0c:	50                   	push   eax
c001ed0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed11:	50                   	push   eax
c001ed12:	52                   	push   edx
c001ed13:	52                   	push   edx
c001ed14:	68 57 b9 02 c0       	push   0xc002b957
c001ed19:	e8 07 38 ff ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c001ed1e:	83 c4 20             	add    esp,0x20
c001ed21:	83 ec 0c             	sub    esp,0xc
c001ed24:	6a 60                	push   0x60
c001ed26:	e8 52 f5 ff ff       	call   c001e27d <Vm::inbv(unsigned short)>
c001ed2b:	83 c4 10             	add    esp,0x10
c001ed2e:	3c 1c                	cmp    al,0x1c
c001ed30:	74 04                	je     c001ed36 <Vm::faultHandler(regs*)+0x6b4>
c001ed32:	3c 5a                	cmp    al,0x5a
c001ed34:	75 eb                	jne    c001ed21 <Vm::faultHandler(regs*)+0x69f>
c001ed36:	3c 5a                	cmp    al,0x5a
c001ed38:	74 04                	je     c001ed3e <Vm::faultHandler(regs*)+0x6bc>
c001ed3a:	3c 1c                	cmp    al,0x1c
c001ed3c:	75 0f                	jne    c001ed4d <Vm::faultHandler(regs*)+0x6cb>
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	6a 60                	push   0x60
c001ed43:	e8 35 f5 ff ff       	call   c001e27d <Vm::inbv(unsigned short)>
c001ed48:	83 c4 10             	add    esp,0x10
c001ed4b:	eb e9                	jmp    c001ed36 <Vm::faultHandler(regs*)+0x6b4>
c001ed4d:	31 c0                	xor    eax,eax
c001ed4f:	83 c4 1c             	add    esp,0x1c
c001ed52:	5b                   	pop    ebx
c001ed53:	5e                   	pop    esi
c001ed54:	5f                   	pop    edi
c001ed55:	5d                   	pop    ebp
c001ed56:	c3                   	ret    

c001ed57 <Vm::fpuInternalTo32(unsigned long long)>:
c001ed57:	57                   	push   edi
c001ed58:	56                   	push   esi
c001ed59:	53                   	push   ebx
c001ed5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed62:	89 d6                	mov    esi,edx
c001ed64:	89 d7                	mov    edi,edx
c001ed66:	89 c1                	mov    ecx,eax
c001ed68:	c1 ef 14             	shr    edi,0x14
c001ed6b:	89 d3                	mov    ebx,edx
c001ed6d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed73:	31 d2                	xor    edx,edx
c001ed75:	89 f8                	mov    eax,edi
c001ed77:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed7d:	bf ff 00 00 00       	mov    edi,0xff
c001ed82:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed87:	83 d2 ff             	adc    edx,0xffffffff
c001ed8a:	39 c7                	cmp    edi,eax
c001ed8c:	bf 00 00 00 00       	mov    edi,0x0
c001ed91:	19 d7                	sbb    edi,edx
c001ed93:	72 15                	jb     c001edaa <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed95:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed99:	c1 e0 17             	shl    eax,0x17
c001ed9c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eda2:	09 f1                	or     ecx,esi
c001eda4:	09 c1                	or     ecx,eax
c001eda6:	89 cf                	mov    edi,ecx
c001eda8:	eb 02                	jmp    c001edac <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001edaa:	31 ff                	xor    edi,edi
c001edac:	89 f8                	mov    eax,edi
c001edae:	5b                   	pop    ebx
c001edaf:	5e                   	pop    esi
c001edb0:	5f                   	pop    edi
c001edb1:	c3                   	ret    

c001edb2 <Vm::fpuInternalTo64(unsigned long long)>:
c001edb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edba:	c3                   	ret    

c001edbb <Vm::fpu32ToInternal(unsigned int)>:
c001edbb:	57                   	push   edi
c001edbc:	31 ff                	xor    edi,edi
c001edbe:	56                   	push   esi
c001edbf:	53                   	push   ebx
c001edc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edc4:	89 cb                	mov    ebx,ecx
c001edc6:	89 ce                	mov    esi,ecx
c001edc8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001edce:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001edd4:	c1 e9 17             	shr    ecx,0x17
c001edd7:	89 f0                	mov    eax,esi
c001edd9:	0f b6 d1             	movzx  edx,cl
c001eddc:	81 c2 80 03 00 00    	add    edx,0x380
c001ede2:	89 d1                	mov    ecx,edx
c001ede4:	89 fa                	mov    edx,edi
c001ede6:	c1 e1 14             	shl    ecx,0x14
c001ede9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eded:	c1 e0 1d             	shl    eax,0x1d
c001edf0:	89 d7                	mov    edi,edx
c001edf2:	89 c6                	mov    esi,eax
c001edf4:	89 ca                	mov    edx,ecx
c001edf6:	89 f0                	mov    eax,esi
c001edf8:	09 fa                	or     edx,edi
c001edfa:	09 da                	or     edx,ebx
c001edfc:	5b                   	pop    ebx
c001edfd:	5e                   	pop    esi
c001edfe:	5f                   	pop    edi
c001edff:	c3                   	ret    

c001ee00 <Vm::fpu64ToInternal(unsigned long long)>:
c001ee00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee08:	c3                   	ret    

c001ee09 <Vm::fpuFloatToLong(unsigned long long)>:
c001ee09:	57                   	push   edi
c001ee0a:	31 c0                	xor    eax,eax
c001ee0c:	56                   	push   esi
c001ee0d:	31 d2                	xor    edx,edx
c001ee0f:	53                   	push   ebx
c001ee10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee18:	89 d9                	mov    ecx,ebx
c001ee1a:	c1 e9 14             	shr    ecx,0x14
c001ee1d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ee23:	89 cf                	mov    edi,ecx
c001ee25:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee2b:	78 33                	js     c001ee60 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee2d:	89 d9                	mov    ecx,ebx
c001ee2f:	89 f0                	mov    eax,esi
c001ee31:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee37:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ee3d:	89 ca                	mov    edx,ecx
c001ee3f:	b9 34 00 00 00       	mov    ecx,0x34
c001ee44:	29 f9                	sub    ecx,edi
c001ee46:	0f ad d0             	shrd   eax,edx,cl
c001ee49:	d3 fa                	sar    edx,cl
c001ee4b:	f6 c1 20             	test   cl,0x20
c001ee4e:	74 05                	je     c001ee55 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ee50:	89 d0                	mov    eax,edx
c001ee52:	c1 fa 1f             	sar    edx,0x1f
c001ee55:	85 db                	test   ebx,ebx
c001ee57:	79 07                	jns    c001ee60 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee59:	f7 d8                	neg    eax
c001ee5b:	83 d2 00             	adc    edx,0x0
c001ee5e:	f7 da                	neg    edx
c001ee60:	5b                   	pop    ebx
c001ee61:	5e                   	pop    esi
c001ee62:	5f                   	pop    edi
c001ee63:	c3                   	ret    

c001ee64 <Vm::fpuULongToFloat(unsigned long long)>:
c001ee64:	57                   	push   edi
c001ee65:	31 c9                	xor    ecx,ecx
c001ee67:	56                   	push   esi
c001ee68:	53                   	push   ebx
c001ee69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee71:	0f ba e7 14          	bt     edi,0x14
c001ee75:	72 07                	jb     c001ee7e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee77:	01 f6                	add    esi,esi
c001ee79:	11 ff                	adc    edi,edi
c001ee7b:	41                   	inc    ecx
c001ee7c:	eb f3                	jmp    c001ee71 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee7e:	89 fa                	mov    edx,edi
c001ee80:	89 f0                	mov    eax,esi
c001ee82:	bb 33 04 00 00       	mov    ebx,0x433
c001ee87:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee8d:	29 cb                	sub    ebx,ecx
c001ee8f:	89 d9                	mov    ecx,ebx
c001ee91:	5b                   	pop    ebx
c001ee92:	c1 e1 14             	shl    ecx,0x14
c001ee95:	5e                   	pop    esi
c001ee96:	09 ca                	or     edx,ecx
c001ee98:	5f                   	pop    edi
c001ee99:	c3                   	ret    

c001ee9a <Vm::fpuLongToFloat(long long)>:
c001ee9a:	56                   	push   esi
c001ee9b:	31 c0                	xor    eax,eax
c001ee9d:	53                   	push   ebx
c001ee9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eea6:	39 c8                	cmp    eax,ecx
c001eea8:	19 d8                	sbb    eax,ebx
c001eeaa:	7d 04                	jge    c001eeb0 <Vm::fpuLongToFloat(long long)+0x16>
c001eeac:	31 f6                	xor    esi,esi
c001eeae:	eb 0c                	jmp    c001eebc <Vm::fpuLongToFloat(long long)+0x22>
c001eeb0:	f7 d9                	neg    ecx
c001eeb2:	be 01 00 00 00       	mov    esi,0x1
c001eeb7:	83 d3 00             	adc    ebx,0x0
c001eeba:	f7 db                	neg    ebx
c001eebc:	31 c0                	xor    eax,eax
c001eebe:	0f ba e3 14          	bt     ebx,0x14
c001eec2:	72 07                	jb     c001eecb <Vm::fpuLongToFloat(long long)+0x31>
c001eec4:	01 c9                	add    ecx,ecx
c001eec6:	11 db                	adc    ebx,ebx
c001eec8:	40                   	inc    eax
c001eec9:	eb f3                	jmp    c001eebe <Vm::fpuLongToFloat(long long)+0x24>
c001eecb:	ba 33 04 00 00       	mov    edx,0x433
c001eed0:	29 c2                	sub    edx,eax
c001eed2:	89 c8                	mov    eax,ecx
c001eed4:	c1 e2 14             	shl    edx,0x14
c001eed7:	89 d9                	mov    ecx,ebx
c001eed9:	89 f3                	mov    ebx,esi
c001eedb:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eee1:	09 ca                	or     edx,ecx
c001eee3:	84 db                	test   bl,bl
c001eee5:	74 06                	je     c001eeed <Vm::fpuLongToFloat(long long)+0x53>
c001eee7:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eeed:	5b                   	pop    ebx
c001eeee:	5e                   	pop    esi
c001eeef:	c3                   	ret    

c001eef0 <Vm::fpuGet0()>:
c001eef0:	31 c0                	xor    eax,eax
c001eef2:	31 d2                	xor    edx,edx
c001eef4:	c3                   	ret    

c001eef5 <Vm::fpuGet1()>:
c001eef5:	b8 01 00 00 00       	mov    eax,0x1
c001eefa:	31 d2                	xor    edx,edx
c001eefc:	c3                   	ret    

c001eefd <Vm::fpuGetPi()>:
c001eefd:	b8 03 00 00 00       	mov    eax,0x3
c001ef02:	31 d2                	xor    edx,edx
c001ef04:	c3                   	ret    

c001ef05 <Vm::fpuGetLog2E()>:
c001ef05:	83 ec 18             	sub    esp,0x18
c001ef08:	68 b4 b9 02 c0       	push   0xc002b9b4
c001ef0d:	e8 4d ad ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ef12:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef17:	31 d2                	xor    edx,edx
c001ef19:	83 c4 1c             	add    esp,0x1c
c001ef1c:	c3                   	ret    

c001ef1d <Vm::fpuGetLogE2()>:
c001ef1d:	83 ec 18             	sub    esp,0x18
c001ef20:	68 c0 b9 02 c0       	push   0xc002b9c0
c001ef25:	e8 35 ad ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ef2a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef2f:	31 d2                	xor    edx,edx
c001ef31:	83 c4 1c             	add    esp,0x1c
c001ef34:	c3                   	ret    

c001ef35 <Vm::fpuGetLog210()>:
c001ef35:	83 ec 18             	sub    esp,0x18
c001ef38:	68 cc b9 02 c0       	push   0xc002b9cc
c001ef3d:	e8 1d ad ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ef42:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef47:	31 d2                	xor    edx,edx
c001ef49:	83 c4 1c             	add    esp,0x1c
c001ef4c:	c3                   	ret    

c001ef4d <Vm::fpuGetLog102()>:
c001ef4d:	83 ec 18             	sub    esp,0x18
c001ef50:	68 d9 b9 02 c0       	push   0xc002b9d9
c001ef55:	e8 05 ad ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001ef5a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef5f:	31 d2                	xor    edx,edx
c001ef61:	83 c4 1c             	add    esp,0x1c
c001ef64:	c3                   	ret    

c001ef65 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef69:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef71:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef75:	0f 92 c0             	setb   al
c001ef78:	c3                   	ret    

c001ef79 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef81:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef85:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef89:	09 c2                	or     edx,eax
c001ef8b:	0f 94 c0             	sete   al
c001ef8e:	c3                   	ret    

c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef8f:	57                   	push   edi
c001ef90:	56                   	push   esi
c001ef91:	53                   	push   ebx
c001ef92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef9a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef9e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001efa2:	57                   	push   edi
c001efa3:	56                   	push   esi
c001efa4:	53                   	push   ebx
c001efa5:	51                   	push   ecx
c001efa6:	e8 ce ff ff ff       	call   c001ef79 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	88 c2                	mov    dl,al
c001efb0:	31 c0                	xor    eax,eax
c001efb2:	84 d2                	test   dl,dl
c001efb4:	75 0c                	jne    c001efc2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001efb6:	57                   	push   edi
c001efb7:	56                   	push   esi
c001efb8:	53                   	push   ebx
c001efb9:	51                   	push   ecx
c001efba:	e8 a6 ff ff ff       	call   c001ef65 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001efbf:	83 c4 10             	add    esp,0x10
c001efc2:	83 e0 01             	and    eax,0x1
c001efc5:	5b                   	pop    ebx
c001efc6:	88 c1                	mov    cl,al
c001efc8:	83 e2 01             	and    edx,0x1
c001efcb:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001efd0:	c1 e2 06             	shl    edx,0x6
c001efd3:	83 e0 ba             	and    eax,0xffffffba
c001efd6:	5e                   	pop    esi
c001efd7:	09 c8                	or     eax,ecx
c001efd9:	5f                   	pop    edi
c001efda:	09 d0                	or     eax,edx
c001efdc:	a2 61 0b 03 c0       	mov    ds:0xc0030b61,al
c001efe1:	c3                   	ret    

c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001efe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efe6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efea:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001efee:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001eff2:	c3                   	ret    

c001eff3 <Vm::fpuAbs(unsigned long long)>:
c001eff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eff7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001effb:	c3                   	ret    

c001effc <Vm::fpuChs(unsigned long long)>:
c001effc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f004:	f7 d8                	neg    eax
c001f006:	83 d2 00             	adc    edx,0x0
c001f009:	f7 da                	neg    edx
c001f00b:	c3                   	ret    

c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f00c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f010:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f015:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f019:	eb c7                	jmp    c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f01b:	53                   	push   ebx
c001f01c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f020:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f028:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f02c:	0f af ca             	imul   ecx,edx
c001f02f:	0f af d8             	imul   ebx,eax
c001f032:	f7 e2                	mul    edx
c001f034:	01 d9                	add    ecx,ebx
c001f036:	5b                   	pop    ebx
c001f037:	01 ca                	add    edx,ecx
c001f039:	c3                   	ret    

c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04d:	e8 e2 74 00 00       	call   c0026534 <__udivdi3>
c001f052:	83 c4 1c             	add    esp,0x1c
c001f055:	c3                   	ret    

c001f056 <Vm::fpuSquare(unsigned long long)>:
c001f056:	50                   	push   eax
c001f057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f05b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f05f:	52                   	push   edx
c001f060:	50                   	push   eax
c001f061:	52                   	push   edx
c001f062:	50                   	push   eax
c001f063:	e8 b3 ff ff ff       	call   c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f068:	83 c4 14             	add    esp,0x14
c001f06b:	c3                   	ret    

c001f06c <Vm::fpuGetReg(int)>:
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f074:	76 10                	jbe    c001f086 <Vm::fpuGetReg(int)+0x1a>
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	68 e6 b9 02 c0       	push   0xc002b9e6
c001f07e:	e8 dc ab ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001f083:	83 c4 10             	add    esp,0x10
c001f086:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f08b:	b9 08 00 00 00       	mov    ecx,0x8
c001f090:	c0 e8 03             	shr    al,0x3
c001f093:	83 e0 07             	and    eax,0x7
c001f096:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f09a:	99                   	cdq    
c001f09b:	f7 f9                	idiv   ecx
c001f09d:	8b 04 d5 64 0b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf49c]
c001f0a4:	8b 14 d5 68 0b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf498]
c001f0ab:	83 c4 0c             	add    esp,0xc
c001f0ae:	c3                   	ret    

c001f0af <Vm::fpuSetReg(int, unsigned long long)>:
c001f0af:	57                   	push   edi
c001f0b0:	56                   	push   esi
c001f0b1:	52                   	push   edx
c001f0b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f0b6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0ba:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0bf:	76 10                	jbe    c001f0d1 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f0c1:	83 ec 0c             	sub    esp,0xc
c001f0c4:	68 f9 b9 02 c0       	push   0xc002b9f9
c001f0c9:	e8 91 ab ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f0d6:	b9 08 00 00 00       	mov    ecx,0x8
c001f0db:	c0 e8 03             	shr    al,0x3
c001f0de:	83 e0 07             	and    eax,0x7
c001f0e1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0e5:	99                   	cdq    
c001f0e6:	f7 f9                	idiv   ecx
c001f0e8:	89 34 d5 64 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf49c],esi
c001f0ef:	89 3c d5 68 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf498],edi
c001f0f6:	58                   	pop    eax
c001f0f7:	5e                   	pop    esi
c001f0f8:	5f                   	pop    edi
c001f0f9:	c3                   	ret    

c001f0fa <Vm::fpuPush(unsigned long long)>:
c001f0fa:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f0ff:	c0 e8 03             	shr    al,0x3
c001f102:	83 e0 07             	and    eax,0x7
c001f105:	83 c0 07             	add    eax,0x7
c001f108:	88 c2                	mov    dl,al
c001f10a:	83 e0 07             	and    eax,0x7
c001f10d:	83 e2 07             	and    edx,0x7
c001f110:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f117:	8a 15 61 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030b61
c001f11d:	83 e2 c7             	and    edx,0xffffffc7
c001f120:	09 ca                	or     edx,ecx
c001f122:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f126:	88 15 61 0b 03 c0    	mov    BYTE PTR ds:0xc0030b61,dl
c001f12c:	89 0c c5 68 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf498],ecx
c001f133:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f137:	89 14 c5 64 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf49c],edx
c001f13e:	a1 a4 0b 03 c0       	mov    eax,ds:0xc0030ba4
c001f143:	83 f8 08             	cmp    eax,0x8
c001f146:	75 08                	jne    c001f150 <Vm::fpuPush(unsigned long long)+0x56>
c001f148:	80 0d 60 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b60,0x40
c001f14f:	c3                   	ret    
c001f150:	40                   	inc    eax
c001f151:	a3 a4 0b 03 c0       	mov    ds:0xc0030ba4,eax
c001f156:	c3                   	ret    

c001f157 <Vm::fpuPop()>:
c001f157:	8a 0d 61 0b 03 c0    	mov    cl,BYTE PTR ds:0xc0030b61
c001f15d:	53                   	push   ebx
c001f15e:	c0 e9 03             	shr    cl,0x3
c001f161:	8a 1d 61 0b 03 c0    	mov    bl,BYTE PTR ds:0xc0030b61
c001f167:	83 e1 07             	and    ecx,0x7
c001f16a:	83 e3 c7             	and    ebx,0xffffffc7
c001f16d:	8b 04 cd 64 0b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf49c]
c001f174:	8b 14 cd 68 0b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf498]
c001f17b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f182:	83 e1 38             	and    ecx,0x38
c001f185:	09 d9                	or     ecx,ebx
c001f187:	88 0d 61 0b 03 c0    	mov    BYTE PTR ds:0xc0030b61,cl
c001f18d:	8b 0d a4 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ba4
c001f193:	85 c9                	test   ecx,ecx
c001f195:	74 09                	je     c001f1a0 <Vm::fpuPop()+0x49>
c001f197:	49                   	dec    ecx
c001f198:	89 0d a4 0b 03 c0    	mov    DWORD PTR ds:0xc0030ba4,ecx
c001f19e:	eb 07                	jmp    c001f1a7 <Vm::fpuPop()+0x50>
c001f1a0:	80 0d 60 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b60,0x40
c001f1a7:	5b                   	pop    ebx
c001f1a8:	c3                   	ret    

c001f1a9 <Vm::x87Handler(regs*)>:
c001f1a9:	55                   	push   ebp
c001f1aa:	57                   	push   edi
c001f1ab:	56                   	push   esi
c001f1ac:	53                   	push   ebx
c001f1ad:	83 ec 1c             	sub    esp,0x1c
c001f1b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f1b4:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f1b9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f1bc:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f1c4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f1c8:	50                   	push   eax
c001f1c9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f1cd:	50                   	push   eax
c001f1ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1d2:	50                   	push   eax
c001f1d3:	53                   	push   ebx
c001f1d4:	e8 9f a1 ff ff       	call   c0019378 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f1d9:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f1dc:	83 c4 10             	add    esp,0x10
c001f1df:	89 c6                	mov    esi,eax
c001f1e1:	80 fa d9             	cmp    dl,0xd9
c001f1e4:	0f 85 52 01 00 00    	jne    c001f33c <Vm::x87Handler(regs*)+0x193>
c001f1ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ee:	8d 50 20             	lea    edx,[eax+0x20]
c001f1f1:	80 fa 0e             	cmp    dl,0xe
c001f1f4:	0f 87 86 00 00 00    	ja     c001f280 <Vm::x87Handler(regs*)+0xd7>
c001f1fa:	0f b6 d2             	movzx  edx,dl
c001f1fd:	ff 24 95 0c ba 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd45f4]
c001f204:	e8 e7 fc ff ff       	call   c001eef0 <Vm::fpuGet0()>
c001f209:	eb 05                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f20b:	e8 e5 fc ff ff       	call   c001eef5 <Vm::fpuGet1()>
c001f210:	57                   	push   edi
c001f211:	57                   	push   edi
c001f212:	52                   	push   edx
c001f213:	50                   	push   eax
c001f214:	e8 e1 fe ff ff       	call   c001f0fa <Vm::fpuPush(unsigned long long)>
c001f219:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	b0 01                	mov    al,0x1
c001f222:	e9 e3 09 00 00       	jmp    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001f227:	83 ec 0c             	sub    esp,0xc
c001f22a:	6a 00                	push   0x0
c001f22c:	e8 3b fe ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f231:	59                   	pop    ecx
c001f232:	5e                   	pop    esi
c001f233:	52                   	push   edx
c001f234:	50                   	push   eax
c001f235:	e8 c2 fd ff ff       	call   c001effc <Vm::fpuChs(unsigned long long)>
c001f23a:	eb 13                	jmp    c001f24f <Vm::x87Handler(regs*)+0xa6>
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	6a 00                	push   0x0
c001f241:	e8 26 fe ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f246:	5f                   	pop    edi
c001f247:	5d                   	pop    ebp
c001f248:	52                   	push   edx
c001f249:	50                   	push   eax
c001f24a:	e8 a4 fd ff ff       	call   c001eff3 <Vm::fpuAbs(unsigned long long)>
c001f24f:	83 c4 0c             	add    esp,0xc
c001f252:	52                   	push   edx
c001f253:	50                   	push   eax
c001f254:	6a 00                	push   0x0
c001f256:	e8 54 fe ff ff       	call   c001f0af <Vm::fpuSetReg(int, unsigned long long)>
c001f25b:	eb bc                	jmp    c001f219 <Vm::x87Handler(regs*)+0x70>
c001f25d:	e8 d3 fc ff ff       	call   c001ef35 <Vm::fpuGetLog210()>
c001f262:	eb ac                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f264:	e8 9c fc ff ff       	call   c001ef05 <Vm::fpuGetLog2E()>
c001f269:	eb a5                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f26b:	e8 8d fc ff ff       	call   c001eefd <Vm::fpuGetPi()>
c001f270:	eb 9e                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f272:	e8 d6 fc ff ff       	call   c001ef4d <Vm::fpuGetLog102()>
c001f277:	eb 97                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f279:	e8 9f fc ff ff       	call   c001ef1d <Vm::fpuGetLogE2()>
c001f27e:	eb 90                	jmp    c001f210 <Vm::x87Handler(regs*)+0x67>
c001f280:	8d 50 40             	lea    edx,[eax+0x40]
c001f283:	80 fa 07             	cmp    dl,0x7
c001f286:	77 15                	ja     c001f29d <Vm::x87Handler(regs*)+0xf4>
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	2d c0 00 00 00       	sub    eax,0xc0
c001f290:	50                   	push   eax
c001f291:	e8 d6 fd ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f296:	59                   	pop    ecx
c001f297:	5e                   	pop    esi
c001f298:	e9 75 ff ff ff       	jmp    c001f212 <Vm::x87Handler(regs*)+0x69>
c001f29d:	8d 50 38             	lea    edx,[eax+0x38]
c001f2a0:	80 fa 07             	cmp    dl,0x7
c001f2a3:	77 3c                	ja     c001f2e1 <Vm::x87Handler(regs*)+0x138>
c001f2a5:	83 ec 0c             	sub    esp,0xc
c001f2a8:	2d c8 00 00 00       	sub    eax,0xc8
c001f2ad:	50                   	push   eax
c001f2ae:	e8 b9 fd ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f2b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2ba:	89 c6                	mov    esi,eax
c001f2bc:	89 d7                	mov    edi,edx
c001f2be:	e8 a9 fd ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f2c3:	83 c4 0c             	add    esp,0xc
c001f2c6:	52                   	push   edx
c001f2c7:	50                   	push   eax
c001f2c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2cc:	2d c8 00 00 00       	sub    eax,0xc8
c001f2d1:	50                   	push   eax
c001f2d2:	e8 d8 fd ff ff       	call   c001f0af <Vm::fpuSetReg(int, unsigned long long)>
c001f2d7:	83 c4 0c             	add    esp,0xc
c001f2da:	57                   	push   edi
c001f2db:	56                   	push   esi
c001f2dc:	e9 73 ff ff ff       	jmp    c001f254 <Vm::x87Handler(regs*)+0xab>
c001f2e1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2e5:	84 d2                	test   dl,dl
c001f2e7:	75 0f                	jne    c001f2f8 <Vm::x87Handler(regs*)+0x14f>
c001f2e9:	83 ec 0c             	sub    esp,0xc
c001f2ec:	ff 36                	push   DWORD PTR [esi]
c001f2ee:	e8 c8 fa ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f2f3:	e9 bf 00 00 00       	jmp    c001f3b7 <Vm::x87Handler(regs*)+0x20e>
c001f2f8:	80 fa 03             	cmp    dl,0x3
c001f2fb:	75 13                	jne    c001f310 <Vm::x87Handler(regs*)+0x167>
c001f2fd:	e8 55 fe ff ff       	call   c001f157 <Vm::fpuPop()>
c001f302:	55                   	push   ebp
c001f303:	55                   	push   ebp
c001f304:	52                   	push   edx
c001f305:	50                   	push   eax
c001f306:	e8 4c fa ff ff       	call   c001ed57 <Vm::fpuInternalTo32(unsigned long long)>
c001f30b:	e9 88 00 00 00       	jmp    c001f398 <Vm::x87Handler(regs*)+0x1ef>
c001f310:	80 fa 05             	cmp    dl,0x5
c001f313:	75 0e                	jne    c001f323 <Vm::x87Handler(regs*)+0x17a>
c001f315:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f318:	66 a3 62 0b 03 c0    	mov    ds:0xc0030b62,ax
c001f31e:	e9 df 00 00 00       	jmp    c001f402 <Vm::x87Handler(regs*)+0x259>
c001f323:	31 c0                	xor    eax,eax
c001f325:	80 fa 07             	cmp    dl,0x7
c001f328:	0f 85 dc 08 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001f32e:	66 a1 62 0b 03 c0    	mov    ax,ds:0xc0030b62
c001f334:	66 89 06             	mov    WORD PTR [esi],ax
c001f337:	e9 c6 00 00 00       	jmp    c001f402 <Vm::x87Handler(regs*)+0x259>
c001f33c:	80 fa d8             	cmp    dl,0xd8
c001f33f:	0f 84 c9 00 00 00    	je     c001f40e <Vm::x87Handler(regs*)+0x265>
c001f345:	80 fa dc             	cmp    dl,0xdc
c001f348:	0f 84 0d 02 00 00    	je     c001f55b <Vm::x87Handler(regs*)+0x3b2>
c001f34e:	80 fa de             	cmp    dl,0xde
c001f351:	0f 84 cd 02 00 00    	je     c001f624 <Vm::x87Handler(regs*)+0x47b>
c001f357:	80 fa dd             	cmp    dl,0xdd
c001f35a:	0f 84 5f 04 00 00    	je     c001f7bf <Vm::x87Handler(regs*)+0x616>
c001f360:	80 fa da             	cmp    dl,0xda
c001f363:	0f 84 24 05 00 00    	je     c001f88d <Vm::x87Handler(regs*)+0x6e4>
c001f369:	80 fa df             	cmp    dl,0xdf
c001f36c:	0f 84 68 05 00 00    	je     c001f8da <Vm::x87Handler(regs*)+0x731>
c001f372:	31 c0                	xor    eax,eax
c001f374:	80 fa db             	cmp    dl,0xdb
c001f377:	0f 85 8d 08 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001f37d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f381:	80 fa 03             	cmp    dl,0x3
c001f384:	0f 85 70 06 00 00    	jne    c001f9fa <Vm::x87Handler(regs*)+0x851>
c001f38a:	e8 c8 fd ff ff       	call   c001f157 <Vm::fpuPop()>
c001f38f:	55                   	push   ebp
c001f390:	55                   	push   ebp
c001f391:	52                   	push   edx
c001f392:	50                   	push   eax
c001f393:	e8 71 fa ff ff       	call   c001ee09 <Vm::fpuFloatToLong(unsigned long long)>
c001f398:	83 c4 10             	add    esp,0x10
c001f39b:	89 06                	mov    DWORD PTR [esi],eax
c001f39d:	eb 63                	jmp    c001f402 <Vm::x87Handler(regs*)+0x259>
c001f39f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3a3:	84 d2                	test   dl,dl
c001f3a5:	0f 85 e6 05 00 00    	jne    c001f991 <Vm::x87Handler(regs*)+0x7e8>
c001f3ab:	57                   	push   edi
c001f3ac:	57                   	push   edi
c001f3ad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3b0:	ff 36                	push   DWORD PTR [esi]
c001f3b2:	e8 49 fa ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001f3b7:	5e                   	pop    esi
c001f3b8:	5f                   	pop    edi
c001f3b9:	52                   	push   edx
c001f3ba:	50                   	push   eax
c001f3bb:	e8 3a fd ff ff       	call   c001f0fa <Vm::fpuPush(unsigned long long)>
c001f3c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3c4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3c7:	e9 51 fe ff ff       	jmp    c001f21d <Vm::x87Handler(regs*)+0x74>
c001f3cc:	80 fa 03             	cmp    dl,0x3
c001f3cf:	0f 85 d7 06 00 00    	jne    c001faac <Vm::x87Handler(regs*)+0x903>
c001f3d5:	57                   	push   edi
c001f3d6:	57                   	push   edi
c001f3d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3da:	ff 36                	push   DWORD PTR [esi]
c001f3dc:	e8 1f fa ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001f3e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3e8:	89 c6                	mov    esi,eax
c001f3ea:	89 d7                	mov    edi,edx
c001f3ec:	e8 7b fc ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f3f1:	57                   	push   edi
c001f3f2:	56                   	push   esi
c001f3f3:	52                   	push   edx
c001f3f4:	50                   	push   eax
c001f3f5:	e8 95 fb ff ff       	call   c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3fa:	83 c4 20             	add    esp,0x20
c001f3fd:	e8 55 fd ff ff       	call   c001f157 <Vm::fpuPop()>
c001f402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f406:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f409:	e9 12 fe ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x77>
c001f40e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f412:	8d 50 40             	lea    edx,[eax+0x40]
c001f415:	80 fa 07             	cmp    dl,0x7
c001f418:	77 29                	ja     c001f443 <Vm::x87Handler(regs*)+0x29a>
c001f41a:	83 ec 0c             	sub    esp,0xc
c001f41d:	2d c0 00 00 00       	sub    eax,0xc0
c001f422:	50                   	push   eax
c001f423:	e8 44 fc ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f428:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f42f:	89 c6                	mov    esi,eax
c001f431:	89 d7                	mov    edi,edx
c001f433:	e8 34 fc ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f438:	57                   	push   edi
c001f439:	56                   	push   esi
c001f43a:	52                   	push   edx
c001f43b:	50                   	push   eax
c001f43c:	e8 a1 fb ff ff       	call   c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f441:	eb 2f                	jmp    c001f472 <Vm::x87Handler(regs*)+0x2c9>
c001f443:	8d 50 38             	lea    edx,[eax+0x38]
c001f446:	80 fa 07             	cmp    dl,0x7
c001f449:	77 2f                	ja     c001f47a <Vm::x87Handler(regs*)+0x2d1>
c001f44b:	83 ec 0c             	sub    esp,0xc
c001f44e:	2d c8 00 00 00       	sub    eax,0xc8
c001f453:	50                   	push   eax
c001f454:	e8 13 fc ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f459:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f460:	89 c6                	mov    esi,eax
c001f462:	89 d7                	mov    edi,edx
c001f464:	e8 03 fc ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f469:	57                   	push   edi
c001f46a:	56                   	push   esi
c001f46b:	52                   	push   edx
c001f46c:	50                   	push   eax
c001f46d:	e8 a9 fb ff ff       	call   c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f472:	83 c4 1c             	add    esp,0x1c
c001f475:	e9 d8 fd ff ff       	jmp    c001f252 <Vm::x87Handler(regs*)+0xa9>
c001f47a:	8d 50 30             	lea    edx,[eax+0x30]
c001f47d:	80 fa 07             	cmp    dl,0x7
c001f480:	77 0d                	ja     c001f48f <Vm::x87Handler(regs*)+0x2e6>
c001f482:	83 ec 0c             	sub    esp,0xc
c001f485:	2d d0 00 00 00       	sub    eax,0xd0
c001f48a:	e9 99 03 00 00       	jmp    c001f828 <Vm::x87Handler(regs*)+0x67f>
c001f48f:	8d 50 28             	lea    edx,[eax+0x28]
c001f492:	80 fa 07             	cmp    dl,0x7
c001f495:	77 0d                	ja     c001f4a4 <Vm::x87Handler(regs*)+0x2fb>
c001f497:	83 ec 0c             	sub    esp,0xc
c001f49a:	2d d8 00 00 00       	sub    eax,0xd8
c001f49f:	e9 c0 03 00 00       	jmp    c001f864 <Vm::x87Handler(regs*)+0x6bb>
c001f4a4:	8d 50 20             	lea    edx,[eax+0x20]
c001f4a7:	80 fa 07             	cmp    dl,0x7
c001f4aa:	77 1b                	ja     c001f4c7 <Vm::x87Handler(regs*)+0x31e>
c001f4ac:	83 ec 0c             	sub    esp,0xc
c001f4af:	2d e0 00 00 00       	sub    eax,0xe0
c001f4b4:	50                   	push   eax
c001f4b5:	e8 b2 fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f4ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4c1:	89 c6                	mov    esi,eax
c001f4c3:	89 d7                	mov    edi,edx
c001f4c5:	eb 22                	jmp    c001f4e9 <Vm::x87Handler(regs*)+0x340>
c001f4c7:	8d 50 18             	lea    edx,[eax+0x18]
c001f4ca:	80 fa 07             	cmp    dl,0x7
c001f4cd:	77 2d                	ja     c001f4fc <Vm::x87Handler(regs*)+0x353>
c001f4cf:	83 ec 0c             	sub    esp,0xc
c001f4d2:	6a 00                	push   0x0
c001f4d4:	e8 93 fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f4d9:	89 c6                	mov    esi,eax
c001f4db:	89 d7                	mov    edi,edx
c001f4dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e1:	2d e8 00 00 00       	sub    eax,0xe8
c001f4e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4e9:	e8 7e fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f4ee:	57                   	push   edi
c001f4ef:	56                   	push   esi
c001f4f0:	52                   	push   edx
c001f4f1:	50                   	push   eax
c001f4f2:	e8 15 fb ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4f7:	e9 76 ff ff ff       	jmp    c001f472 <Vm::x87Handler(regs*)+0x2c9>
c001f4fc:	8d 50 10             	lea    edx,[eax+0x10]
c001f4ff:	80 fa 07             	cmp    dl,0x7
c001f502:	77 1b                	ja     c001f51f <Vm::x87Handler(regs*)+0x376>
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	2d f0 00 00 00       	sub    eax,0xf0
c001f50c:	50                   	push   eax
c001f50d:	e8 5a fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f512:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f519:	89 c6                	mov    esi,eax
c001f51b:	89 d7                	mov    edi,edx
c001f51d:	eb 22                	jmp    c001f541 <Vm::x87Handler(regs*)+0x398>
c001f51f:	3c f7                	cmp    al,0xf7
c001f521:	0f 86 d1 03 00 00    	jbe    c001f8f8 <Vm::x87Handler(regs*)+0x74f>
c001f527:	83 ec 0c             	sub    esp,0xc
c001f52a:	6a 00                	push   0x0
c001f52c:	e8 3b fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f531:	89 c6                	mov    esi,eax
c001f533:	89 d7                	mov    edi,edx
c001f535:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f539:	2d f8 00 00 00       	sub    eax,0xf8
c001f53e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f541:	e8 26 fb ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f546:	57                   	push   edi
c001f547:	56                   	push   esi
c001f548:	52                   	push   edx
c001f549:	50                   	push   eax
c001f54a:	e8 eb fa ff ff       	call   c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f54f:	83 c4 1c             	add    esp,0x1c
c001f552:	52                   	push   edx
c001f553:	50                   	push   eax
c001f554:	6a 00                	push   0x0
c001f556:	e9 51 02 00 00       	jmp    c001f7ac <Vm::x87Handler(regs*)+0x603>
c001f55b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f55f:	8d 50 40             	lea    edx,[eax+0x40]
c001f562:	80 fa 07             	cmp    dl,0x7
c001f565:	77 37                	ja     c001f59e <Vm::x87Handler(regs*)+0x3f5>
c001f567:	83 ec 0c             	sub    esp,0xc
c001f56a:	2d c0 00 00 00       	sub    eax,0xc0
c001f56f:	50                   	push   eax
c001f570:	e8 f7 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f575:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f57c:	89 c6                	mov    esi,eax
c001f57e:	89 d7                	mov    edi,edx
c001f580:	e8 e7 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f585:	57                   	push   edi
c001f586:	56                   	push   esi
c001f587:	52                   	push   edx
c001f588:	50                   	push   eax
c001f589:	e8 54 fa ff ff       	call   c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	52                   	push   edx
c001f592:	50                   	push   eax
c001f593:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f597:	2d c0 00 00 00       	sub    eax,0xc0
c001f59c:	eb 3d                	jmp    c001f5db <Vm::x87Handler(regs*)+0x432>
c001f59e:	8d 50 38             	lea    edx,[eax+0x38]
c001f5a1:	80 fa 07             	cmp    dl,0x7
c001f5a4:	77 3b                	ja     c001f5e1 <Vm::x87Handler(regs*)+0x438>
c001f5a6:	83 ec 0c             	sub    esp,0xc
c001f5a9:	2d c8 00 00 00       	sub    eax,0xc8
c001f5ae:	50                   	push   eax
c001f5af:	e8 b8 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f5b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5bb:	89 c6                	mov    esi,eax
c001f5bd:	89 d7                	mov    edi,edx
c001f5bf:	e8 a8 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f5c4:	57                   	push   edi
c001f5c5:	56                   	push   esi
c001f5c6:	52                   	push   edx
c001f5c7:	50                   	push   eax
c001f5c8:	e8 4e fa ff ff       	call   c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5cd:	83 c4 1c             	add    esp,0x1c
c001f5d0:	52                   	push   edx
c001f5d1:	50                   	push   eax
c001f5d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d6:	2d c8 00 00 00       	sub    eax,0xc8
c001f5db:	50                   	push   eax
c001f5dc:	e9 75 fc ff ff       	jmp    c001f256 <Vm::x87Handler(regs*)+0xad>
c001f5e1:	83 c0 18             	add    eax,0x18
c001f5e4:	3c 07                	cmp    al,0x7
c001f5e6:	0f 87 3b 04 00 00    	ja     c001fa27 <Vm::x87Handler(regs*)+0x87e>
c001f5ec:	83 ec 0c             	sub    esp,0xc
c001f5ef:	6a 00                	push   0x0
c001f5f1:	e8 76 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f5f6:	89 c6                	mov    esi,eax
c001f5f8:	89 d7                	mov    edi,edx
c001f5fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5fe:	2d e8 00 00 00       	sub    eax,0xe8
c001f603:	89 04 24             	mov    DWORD PTR [esp],eax
c001f606:	e8 61 fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f60b:	57                   	push   edi
c001f60c:	56                   	push   esi
c001f60d:	52                   	push   edx
c001f60e:	50                   	push   eax
c001f60f:	e8 f8 f9 ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f614:	83 c4 1c             	add    esp,0x1c
c001f617:	52                   	push   edx
c001f618:	50                   	push   eax
c001f619:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f61d:	2d e8 00 00 00       	sub    eax,0xe8
c001f622:	eb b7                	jmp    c001f5db <Vm::x87Handler(regs*)+0x432>
c001f624:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f628:	8d 50 40             	lea    edx,[eax+0x40]
c001f62b:	80 fa 07             	cmp    dl,0x7
c001f62e:	77 3a                	ja     c001f66a <Vm::x87Handler(regs*)+0x4c1>
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	2d c0 00 00 00       	sub    eax,0xc0
c001f638:	50                   	push   eax
c001f639:	e8 2e fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f63e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f645:	89 c6                	mov    esi,eax
c001f647:	89 d7                	mov    edi,edx
c001f649:	e8 1e fa ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f64e:	57                   	push   edi
c001f64f:	56                   	push   esi
c001f650:	52                   	push   edx
c001f651:	50                   	push   eax
c001f652:	e8 8b f9 ff ff       	call   c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f657:	83 c4 1c             	add    esp,0x1c
c001f65a:	52                   	push   edx
c001f65b:	50                   	push   eax
c001f65c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f660:	2d c0 00 00 00       	sub    eax,0xc0
c001f665:	e9 9e 01 00 00       	jmp    c001f808 <Vm::x87Handler(regs*)+0x65f>
c001f66a:	8d 50 20             	lea    edx,[eax+0x20]
c001f66d:	80 fa 07             	cmp    dl,0x7
c001f670:	77 3a                	ja     c001f6ac <Vm::x87Handler(regs*)+0x503>
c001f672:	83 ec 0c             	sub    esp,0xc
c001f675:	2d e0 00 00 00       	sub    eax,0xe0
c001f67a:	50                   	push   eax
c001f67b:	e8 ec f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f680:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f687:	89 c6                	mov    esi,eax
c001f689:	89 d7                	mov    edi,edx
c001f68b:	e8 dc f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f690:	57                   	push   edi
c001f691:	56                   	push   esi
c001f692:	52                   	push   edx
c001f693:	50                   	push   eax
c001f694:	e8 73 f9 ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f699:	83 c4 1c             	add    esp,0x1c
c001f69c:	52                   	push   edx
c001f69d:	50                   	push   eax
c001f69e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6a2:	2d e0 00 00 00       	sub    eax,0xe0
c001f6a7:	e9 5c 01 00 00       	jmp    c001f808 <Vm::x87Handler(regs*)+0x65f>
c001f6ac:	8d 50 18             	lea    edx,[eax+0x18]
c001f6af:	80 fa 07             	cmp    dl,0x7
c001f6b2:	77 3b                	ja     c001f6ef <Vm::x87Handler(regs*)+0x546>
c001f6b4:	83 ec 0c             	sub    esp,0xc
c001f6b7:	6a 00                	push   0x0
c001f6b9:	e8 ae f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f6be:	89 c6                	mov    esi,eax
c001f6c0:	89 d7                	mov    edi,edx
c001f6c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6c6:	2d e8 00 00 00       	sub    eax,0xe8
c001f6cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ce:	e8 99 f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f6d3:	57                   	push   edi
c001f6d4:	56                   	push   esi
c001f6d5:	52                   	push   edx
c001f6d6:	50                   	push   eax
c001f6d7:	e8 30 f9 ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6dc:	83 c4 1c             	add    esp,0x1c
c001f6df:	52                   	push   edx
c001f6e0:	50                   	push   eax
c001f6e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e5:	2d e8 00 00 00       	sub    eax,0xe8
c001f6ea:	e9 19 01 00 00       	jmp    c001f808 <Vm::x87Handler(regs*)+0x65f>
c001f6ef:	8d 50 38             	lea    edx,[eax+0x38]
c001f6f2:	80 fa 07             	cmp    dl,0x7
c001f6f5:	77 37                	ja     c001f72e <Vm::x87Handler(regs*)+0x585>
c001f6f7:	83 ec 0c             	sub    esp,0xc
c001f6fa:	2d c8 00 00 00       	sub    eax,0xc8
c001f6ff:	50                   	push   eax
c001f700:	e8 67 f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f705:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f70c:	89 c6                	mov    esi,eax
c001f70e:	89 d7                	mov    edi,edx
c001f710:	e8 57 f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f715:	57                   	push   edi
c001f716:	56                   	push   esi
c001f717:	52                   	push   edx
c001f718:	50                   	push   eax
c001f719:	e8 fd f8 ff ff       	call   c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f71e:	83 c4 1c             	add    esp,0x1c
c001f721:	52                   	push   edx
c001f722:	50                   	push   eax
c001f723:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f727:	2d c8 00 00 00       	sub    eax,0xc8
c001f72c:	eb 7d                	jmp    c001f7ab <Vm::x87Handler(regs*)+0x602>
c001f72e:	3c f7                	cmp    al,0xf7
c001f730:	76 38                	jbe    c001f76a <Vm::x87Handler(regs*)+0x5c1>
c001f732:	83 ec 0c             	sub    esp,0xc
c001f735:	6a 00                	push   0x0
c001f737:	e8 30 f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f73c:	89 c6                	mov    esi,eax
c001f73e:	89 d7                	mov    edi,edx
c001f740:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f744:	2d f8 00 00 00       	sub    eax,0xf8
c001f749:	89 04 24             	mov    DWORD PTR [esp],eax
c001f74c:	e8 1b f9 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f751:	57                   	push   edi
c001f752:	56                   	push   esi
c001f753:	52                   	push   edx
c001f754:	50                   	push   eax
c001f755:	e8 e0 f8 ff ff       	call   c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f75a:	83 c4 1c             	add    esp,0x1c
c001f75d:	52                   	push   edx
c001f75e:	50                   	push   eax
c001f75f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f763:	2d f8 00 00 00       	sub    eax,0xf8
c001f768:	eb 41                	jmp    c001f7ab <Vm::x87Handler(regs*)+0x602>
c001f76a:	8d 50 10             	lea    edx,[eax+0x10]
c001f76d:	80 fa 07             	cmp    dl,0x7
c001f770:	0f 87 5a 01 00 00    	ja     c001f8d0 <Vm::x87Handler(regs*)+0x727>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	2d f0 00 00 00       	sub    eax,0xf0
c001f77e:	50                   	push   eax
c001f77f:	e8 e8 f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f784:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f78b:	89 c6                	mov    esi,eax
c001f78d:	89 d7                	mov    edi,edx
c001f78f:	e8 d8 f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f794:	57                   	push   edi
c001f795:	56                   	push   esi
c001f796:	52                   	push   edx
c001f797:	50                   	push   eax
c001f798:	e8 9d f8 ff ff       	call   c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f79d:	83 c4 1c             	add    esp,0x1c
c001f7a0:	52                   	push   edx
c001f7a1:	50                   	push   eax
c001f7a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7a6:	2d f0 00 00 00       	sub    eax,0xf0
c001f7ab:	50                   	push   eax
c001f7ac:	e8 fe f8 ff ff       	call   c001f0af <Vm::fpuSetReg(int, unsigned long long)>
c001f7b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7b5:	e8 9d f9 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f7ba:	e9 5e fa ff ff       	jmp    c001f21d <Vm::x87Handler(regs*)+0x74>
c001f7bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c3:	8d 50 30             	lea    edx,[eax+0x30]
c001f7c6:	80 fa 07             	cmp    dl,0x7
c001f7c9:	77 1d                	ja     c001f7e8 <Vm::x87Handler(regs*)+0x63f>
c001f7cb:	83 ec 0c             	sub    esp,0xc
c001f7ce:	6a 00                	push   0x0
c001f7d0:	e8 97 f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f7d5:	83 c4 0c             	add    esp,0xc
c001f7d8:	52                   	push   edx
c001f7d9:	50                   	push   eax
c001f7da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7de:	2d d0 00 00 00       	sub    eax,0xd0
c001f7e3:	e9 f3 fd ff ff       	jmp    c001f5db <Vm::x87Handler(regs*)+0x432>
c001f7e8:	8d 50 28             	lea    edx,[eax+0x28]
c001f7eb:	80 fa 07             	cmp    dl,0x7
c001f7ee:	77 28                	ja     c001f818 <Vm::x87Handler(regs*)+0x66f>
c001f7f0:	83 ec 0c             	sub    esp,0xc
c001f7f3:	6a 00                	push   0x0
c001f7f5:	e8 72 f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f7fa:	83 c4 0c             	add    esp,0xc
c001f7fd:	52                   	push   edx
c001f7fe:	50                   	push   eax
c001f7ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f803:	2d d8 00 00 00       	sub    eax,0xd8
c001f808:	50                   	push   eax
c001f809:	e8 a1 f8 ff ff       	call   c001f0af <Vm::fpuSetReg(int, unsigned long long)>
c001f80e:	e8 44 f9 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f813:	e9 01 fa ff ff       	jmp    c001f219 <Vm::x87Handler(regs*)+0x70>
c001f818:	8d 50 20             	lea    edx,[eax+0x20]
c001f81b:	80 fa 07             	cmp    dl,0x7
c001f81e:	77 30                	ja     c001f850 <Vm::x87Handler(regs*)+0x6a7>
c001f820:	83 ec 0c             	sub    esp,0xc
c001f823:	2d e0 00 00 00       	sub    eax,0xe0
c001f828:	50                   	push   eax
c001f829:	e8 3e f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f82e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f835:	89 c6                	mov    esi,eax
c001f837:	89 d7                	mov    edi,edx
c001f839:	e8 2e f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f83e:	57                   	push   edi
c001f83f:	56                   	push   esi
c001f840:	52                   	push   edx
c001f841:	50                   	push   eax
c001f842:	e8 48 f7 ff ff       	call   c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f847:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f84b:	e9 54 02 00 00       	jmp    c001faa4 <Vm::x87Handler(regs*)+0x8fb>
c001f850:	8d 50 18             	lea    edx,[eax+0x18]
c001f853:	80 fa 07             	cmp    dl,0x7
c001f856:	0f 87 43 fb ff ff    	ja     c001f39f <Vm::x87Handler(regs*)+0x1f6>
c001f85c:	83 ec 0c             	sub    esp,0xc
c001f85f:	2d e8 00 00 00       	sub    eax,0xe8
c001f864:	50                   	push   eax
c001f865:	e8 02 f8 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f86a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f871:	89 c6                	mov    esi,eax
c001f873:	89 d7                	mov    edi,edx
c001f875:	e8 f2 f7 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f87a:	57                   	push   edi
c001f87b:	56                   	push   esi
c001f87c:	52                   	push   edx
c001f87d:	50                   	push   eax
c001f87e:	e8 0c f7 ff ff       	call   c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f883:	83 c4 20             	add    esp,0x20
c001f886:	e8 cc f8 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f88b:	eb 62                	jmp    c001f8ef <Vm::x87Handler(regs*)+0x746>
c001f88d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f891:	0f 85 0f 01 00 00    	jne    c001f9a6 <Vm::x87Handler(regs*)+0x7fd>
c001f897:	83 ec 0c             	sub    esp,0xc
c001f89a:	6a 01                	push   0x1
c001f89c:	e8 cb f7 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f8a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8a8:	89 c6                	mov    esi,eax
c001f8aa:	89 d7                	mov    edi,edx
c001f8ac:	e8 bb f7 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f8b1:	57                   	push   edi
c001f8b2:	56                   	push   esi
c001f8b3:	52                   	push   edx
c001f8b4:	50                   	push   eax
c001f8b5:	e8 d5 f6 ff ff       	call   c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8ba:	83 c4 20             	add    esp,0x20
c001f8bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8c1:	e8 91 f8 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f8c6:	e8 8c f8 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f8cb:	e9 50 f9 ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x77>
c001f8d0:	3c d9                	cmp    al,0xd9
c001f8d2:	0f 85 b5 02 00 00    	jne    c001fb8d <Vm::x87Handler(regs*)+0x9e4>
c001f8d8:	eb bd                	jmp    c001f897 <Vm::x87Handler(regs*)+0x6ee>
c001f8da:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f8de:	0f 85 ea 02 00 00    	jne    c001fbce <Vm::x87Handler(regs*)+0xa25>
c001f8e4:	0f b7 05 60 0b 03 c0 	movzx  eax,WORD PTR ds:0xc0030b60
c001f8eb:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f8ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8f3:	e9 28 f9 ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x77>
c001f8f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8fc:	84 d2                	test   dl,dl
c001f8fe:	75 0f                	jne    c001f90f <Vm::x87Handler(regs*)+0x766>
c001f900:	83 ec 0c             	sub    esp,0xc
c001f903:	ff 36                	push   DWORD PTR [esi]
c001f905:	e8 b1 f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f90a:	e9 2c 01 00 00       	jmp    c001fa3b <Vm::x87Handler(regs*)+0x892>
c001f90f:	80 fa 01             	cmp    dl,0x1
c001f912:	75 0f                	jne    c001f923 <Vm::x87Handler(regs*)+0x77a>
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	ff 36                	push   DWORD PTR [esi]
c001f919:	e8 9d f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f91e:	e9 81 02 00 00       	jmp    c001fba4 <Vm::x87Handler(regs*)+0x9fb>
c001f923:	80 fa 04             	cmp    dl,0x4
c001f926:	75 0f                	jne    c001f937 <Vm::x87Handler(regs*)+0x78e>
c001f928:	83 ec 0c             	sub    esp,0xc
c001f92b:	ff 36                	push   DWORD PTR [esi]
c001f92d:	e8 89 f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f932:	e9 86 01 00 00       	jmp    c001fabd <Vm::x87Handler(regs*)+0x914>
c001f937:	80 fa 05             	cmp    dl,0x5
c001f93a:	75 1b                	jne    c001f957 <Vm::x87Handler(regs*)+0x7ae>
c001f93c:	83 ec 0c             	sub    esp,0xc
c001f93f:	6a 00                	push   0x0
c001f941:	e8 26 f7 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f946:	89 c7                	mov    edi,eax
c001f948:	89 d5                	mov    ebp,edx
c001f94a:	58                   	pop    eax
c001f94b:	ff 36                	push   DWORD PTR [esi]
c001f94d:	e8 69 f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f952:	e9 a3 01 00 00       	jmp    c001fafa <Vm::x87Handler(regs*)+0x951>
c001f957:	80 fa 06             	cmp    dl,0x6
c001f95a:	75 0f                	jne    c001f96b <Vm::x87Handler(regs*)+0x7c2>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	ff 36                	push   DWORD PTR [esi]
c001f961:	e8 55 f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f966:	e9 ae 01 00 00       	jmp    c001fb19 <Vm::x87Handler(regs*)+0x970>
c001f96b:	31 c0                	xor    eax,eax
c001f96d:	80 fa 07             	cmp    dl,0x7
c001f970:	0f 85 94 02 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	6a 00                	push   0x0
c001f97b:	e8 ec f6 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f980:	89 c7                	mov    edi,eax
c001f982:	89 d5                	mov    ebp,edx
c001f984:	58                   	pop    eax
c001f985:	ff 36                	push   DWORD PTR [esi]
c001f987:	e8 2f f4 ff ff       	call   c001edbb <Vm::fpu32ToInternal(unsigned int)>
c001f98c:	e9 cb 01 00 00       	jmp    c001fb5c <Vm::x87Handler(regs*)+0x9b3>
c001f991:	80 fa 03             	cmp    dl,0x3
c001f994:	0f 85 d3 01 00 00    	jne    c001fb6d <Vm::x87Handler(regs*)+0x9c4>
c001f99a:	e8 b8 f7 ff ff       	call   c001f157 <Vm::fpuPop()>
c001f99f:	51                   	push   ecx
c001f9a0:	51                   	push   ecx
c001f9a1:	e9 de 01 00 00       	jmp    c001fb84 <Vm::x87Handler(regs*)+0x9db>
c001f9a6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9aa:	80 fa 01             	cmp    dl,0x1
c001f9ad:	75 09                	jne    c001f9b8 <Vm::x87Handler(regs*)+0x80f>
c001f9af:	57                   	push   edi
c001f9b0:	57                   	push   edi
c001f9b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9b3:	e9 e3 01 00 00       	jmp    c001fb9b <Vm::x87Handler(regs*)+0x9f2>
c001f9b8:	80 fa 04             	cmp    dl,0x4
c001f9bb:	75 12                	jne    c001f9cf <Vm::x87Handler(regs*)+0x826>
c001f9bd:	31 d2                	xor    edx,edx
c001f9bf:	51                   	push   ecx
c001f9c0:	51                   	push   ecx
c001f9c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9c3:	52                   	push   edx
c001f9c4:	50                   	push   eax
c001f9c5:	e8 d0 f4 ff ff       	call   c001ee9a <Vm::fpuLongToFloat(long long)>
c001f9ca:	e9 ee 00 00 00       	jmp    c001fabd <Vm::x87Handler(regs*)+0x914>
c001f9cf:	31 c0                	xor    eax,eax
c001f9d1:	80 fa 07             	cmp    dl,0x7
c001f9d4:	0f 85 30 02 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	6a 00                	push   0x0
c001f9df:	e8 88 f6 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001f9e4:	89 c7                	mov    edi,eax
c001f9e6:	89 d5                	mov    ebp,edx
c001f9e8:	58                   	pop    eax
c001f9e9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9eb:	5a                   	pop    edx
c001f9ec:	31 d2                	xor    edx,edx
c001f9ee:	52                   	push   edx
c001f9ef:	50                   	push   eax
c001f9f0:	e8 a5 f4 ff ff       	call   c001ee9a <Vm::fpuLongToFloat(long long)>
c001f9f5:	e9 62 01 00 00       	jmp    c001fb5c <Vm::x87Handler(regs*)+0x9b3>
c001f9fa:	84 d2                	test   dl,dl
c001f9fc:	75 0d                	jne    c001fa0b <Vm::x87Handler(regs*)+0x862>
c001f9fe:	31 d2                	xor    edx,edx
c001fa00:	55                   	push   ebp
c001fa01:	55                   	push   ebp
c001fa02:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa04:	52                   	push   edx
c001fa05:	50                   	push   eax
c001fa06:	e9 d3 01 00 00       	jmp    c001fbde <Vm::x87Handler(regs*)+0xa35>
c001fa0b:	31 c0                	xor    eax,eax
c001fa0d:	80 fa 02             	cmp    dl,0x2
c001fa10:	0f 85 f4 01 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001fa16:	83 ec 0c             	sub    esp,0xc
c001fa19:	6a 00                	push   0x0
c001fa1b:	e8 4c f6 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fa20:	59                   	pop    ecx
c001fa21:	5f                   	pop    edi
c001fa22:	e9 6a f9 ff ff       	jmp    c001f391 <Vm::x87Handler(regs*)+0x1e8>
c001fa27:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa2b:	84 d2                	test   dl,dl
c001fa2d:	75 2a                	jne    c001fa59 <Vm::x87Handler(regs*)+0x8b0>
c001fa2f:	50                   	push   eax
c001fa30:	50                   	push   eax
c001fa31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa34:	ff 36                	push   DWORD PTR [esi]
c001fa36:	e8 c5 f3 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fa3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa42:	89 c6                	mov    esi,eax
c001fa44:	89 d7                	mov    edi,edx
c001fa46:	e8 21 f6 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fa4b:	57                   	push   edi
c001fa4c:	56                   	push   esi
c001fa4d:	52                   	push   edx
c001fa4e:	50                   	push   eax
c001fa4f:	e8 8e f5 ff ff       	call   c001efe2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa54:	e9 64 01 00 00       	jmp    c001fbbd <Vm::x87Handler(regs*)+0xa14>
c001fa59:	80 fa 01             	cmp    dl,0x1
c001fa5c:	75 11                	jne    c001fa6f <Vm::x87Handler(regs*)+0x8c6>
c001fa5e:	50                   	push   eax
c001fa5f:	50                   	push   eax
c001fa60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa63:	ff 36                	push   DWORD PTR [esi]
c001fa65:	e8 96 f3 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fa6a:	e9 35 01 00 00       	jmp    c001fba4 <Vm::x87Handler(regs*)+0x9fb>
c001fa6f:	80 fa 02             	cmp    dl,0x2
c001fa72:	0f 85 54 f9 ff ff    	jne    c001f3cc <Vm::x87Handler(regs*)+0x223>
c001fa78:	55                   	push   ebp
c001fa79:	55                   	push   ebp
c001fa7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa7d:	ff 36                	push   DWORD PTR [esi]
c001fa7f:	e8 7c f3 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fa84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa8b:	89 c6                	mov    esi,eax
c001fa8d:	89 d7                	mov    edi,edx
c001fa8f:	e8 d8 f5 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fa94:	57                   	push   edi
c001fa95:	56                   	push   esi
c001fa96:	52                   	push   edx
c001fa97:	50                   	push   eax
c001fa98:	e8 f2 f4 ff ff       	call   c001ef8f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001faa1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001faa4:	83 c4 20             	add    esp,0x20
c001faa7:	e9 74 f7 ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x77>
c001faac:	80 fa 04             	cmp    dl,0x4
c001faaf:	75 2a                	jne    c001fadb <Vm::x87Handler(regs*)+0x932>
c001fab1:	51                   	push   ecx
c001fab2:	51                   	push   ecx
c001fab3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fab6:	ff 36                	push   DWORD PTR [esi]
c001fab8:	e8 43 f3 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fabd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac4:	89 c6                	mov    esi,eax
c001fac6:	89 d7                	mov    edi,edx
c001fac8:	e8 9f f5 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001facd:	57                   	push   edi
c001face:	56                   	push   esi
c001facf:	52                   	push   edx
c001fad0:	50                   	push   eax
c001fad1:	e8 36 f5 ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fad6:	e9 e2 00 00 00       	jmp    c001fbbd <Vm::x87Handler(regs*)+0xa14>
c001fadb:	80 fa 05             	cmp    dl,0x5
c001fade:	75 28                	jne    c001fb08 <Vm::x87Handler(regs*)+0x95f>
c001fae0:	83 ec 0c             	sub    esp,0xc
c001fae3:	6a 00                	push   0x0
c001fae5:	e8 82 f5 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001faea:	89 c7                	mov    edi,eax
c001faec:	89 d5                	mov    ebp,edx
c001faee:	58                   	pop    eax
c001faef:	5a                   	pop    edx
c001faf0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faf3:	ff 36                	push   DWORD PTR [esi]
c001faf5:	e8 06 f3 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fafa:	83 c4 10             	add    esp,0x10
c001fafd:	55                   	push   ebp
c001fafe:	57                   	push   edi
c001faff:	52                   	push   edx
c001fb00:	50                   	push   eax
c001fb01:	e8 06 f5 ff ff       	call   c001f00c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb06:	eb 60                	jmp    c001fb68 <Vm::x87Handler(regs*)+0x9bf>
c001fb08:	80 fa 06             	cmp    dl,0x6
c001fb0b:	75 2a                	jne    c001fb37 <Vm::x87Handler(regs*)+0x98e>
c001fb0d:	51                   	push   ecx
c001fb0e:	51                   	push   ecx
c001fb0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb12:	ff 36                	push   DWORD PTR [esi]
c001fb14:	e8 e7 f2 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fb19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb20:	89 c6                	mov    esi,eax
c001fb22:	89 d7                	mov    edi,edx
c001fb24:	e8 43 f5 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fb29:	57                   	push   edi
c001fb2a:	56                   	push   esi
c001fb2b:	52                   	push   edx
c001fb2c:	50                   	push   eax
c001fb2d:	e8 08 f5 ff ff       	call   c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb32:	e9 86 00 00 00       	jmp    c001fbbd <Vm::x87Handler(regs*)+0xa14>
c001fb37:	31 c0                	xor    eax,eax
c001fb39:	80 fa 07             	cmp    dl,0x7
c001fb3c:	0f 85 c8 00 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001fb42:	83 ec 0c             	sub    esp,0xc
c001fb45:	6a 00                	push   0x0
c001fb47:	e8 20 f5 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fb4c:	89 c7                	mov    edi,eax
c001fb4e:	89 d5                	mov    ebp,edx
c001fb50:	58                   	pop    eax
c001fb51:	5a                   	pop    edx
c001fb52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb55:	ff 36                	push   DWORD PTR [esi]
c001fb57:	e8 a4 f2 ff ff       	call   c001ee00 <Vm::fpu64ToInternal(unsigned long long)>
c001fb5c:	83 c4 10             	add    esp,0x10
c001fb5f:	55                   	push   ebp
c001fb60:	57                   	push   edi
c001fb61:	52                   	push   edx
c001fb62:	50                   	push   eax
c001fb63:	e8 d2 f4 ff ff       	call   c001f03a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb68:	83 c4 0c             	add    esp,0xc
c001fb6b:	eb 53                	jmp    c001fbc0 <Vm::x87Handler(regs*)+0xa17>
c001fb6d:	31 c0                	xor    eax,eax
c001fb6f:	80 fa 02             	cmp    dl,0x2
c001fb72:	0f 85 92 00 00 00    	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	6a 00                	push   0x0
c001fb7d:	e8 ea f4 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fb82:	59                   	pop    ecx
c001fb83:	5f                   	pop    edi
c001fb84:	52                   	push   edx
c001fb85:	50                   	push   eax
c001fb86:	e8 27 f2 ff ff       	call   c001edb2 <Vm::fpuInternalTo64(unsigned long long)>
c001fb8b:	eb 70                	jmp    c001fbfd <Vm::x87Handler(regs*)+0xa54>
c001fb8d:	31 c0                	xor    eax,eax
c001fb8f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb94:	75 74                	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001fb96:	50                   	push   eax
c001fb97:	50                   	push   eax
c001fb98:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb9b:	31 d2                	xor    edx,edx
c001fb9d:	52                   	push   edx
c001fb9e:	50                   	push   eax
c001fb9f:	e8 f6 f2 ff ff       	call   c001ee9a <Vm::fpuLongToFloat(long long)>
c001fba4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbab:	89 c6                	mov    esi,eax
c001fbad:	89 d7                	mov    edi,edx
c001fbaf:	e8 b8 f4 ff ff       	call   c001f06c <Vm::fpuGetReg(int)>
c001fbb4:	57                   	push   edi
c001fbb5:	56                   	push   esi
c001fbb6:	52                   	push   edx
c001fbb7:	50                   	push   eax
c001fbb8:	e8 5e f4 ff ff       	call   c001f01b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbbd:	83 c4 1c             	add    esp,0x1c
c001fbc0:	52                   	push   edx
c001fbc1:	50                   	push   eax
c001fbc2:	6a 00                	push   0x0
c001fbc4:	e8 e6 f4 ff ff       	call   c001f0af <Vm::fpuSetReg(int, unsigned long long)>
c001fbc9:	e9 f2 f7 ff ff       	jmp    c001f3c0 <Vm::x87Handler(regs*)+0x217>
c001fbce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbd2:	80 fa 05             	cmp    dl,0x5
c001fbd5:	75 11                	jne    c001fbe8 <Vm::x87Handler(regs*)+0xa3f>
c001fbd7:	55                   	push   ebp
c001fbd8:	55                   	push   ebp
c001fbd9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbdc:	ff 36                	push   DWORD PTR [esi]
c001fbde:	e8 81 f2 ff ff       	call   c001ee64 <Vm::fpuULongToFloat(unsigned long long)>
c001fbe3:	e9 cf f7 ff ff       	jmp    c001f3b7 <Vm::x87Handler(regs*)+0x20e>
c001fbe8:	31 c0                	xor    eax,eax
c001fbea:	80 fa 07             	cmp    dl,0x7
c001fbed:	75 1b                	jne    c001fc0a <Vm::x87Handler(regs*)+0xa61>
c001fbef:	e8 63 f5 ff ff       	call   c001f157 <Vm::fpuPop()>
c001fbf4:	51                   	push   ecx
c001fbf5:	51                   	push   ecx
c001fbf6:	52                   	push   edx
c001fbf7:	50                   	push   eax
c001fbf8:	e8 0c f2 ff ff       	call   c001ee09 <Vm::fpuFloatToLong(unsigned long long)>
c001fbfd:	83 c4 10             	add    esp,0x10
c001fc00:	89 06                	mov    DWORD PTR [esi],eax
c001fc02:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fc05:	e9 f8 f7 ff ff       	jmp    c001f402 <Vm::x87Handler(regs*)+0x259>
c001fc0a:	83 c4 1c             	add    esp,0x1c
c001fc0d:	5b                   	pop    ebx
c001fc0e:	5e                   	pop    esi
c001fc0f:	5f                   	pop    edi
c001fc10:	5d                   	pop    ebp
c001fc11:	c3                   	ret    

c001fc12 <__static_initialization_and_destruction_0(int, int)>:
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fc1a:	75 1a                	jne    c001fc36 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc1c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fc24:	75 10                	jne    c001fc36 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	68 60 0b 03 c0       	push   0xc0030b60
c001fc2e:	e8 07 8d 00 00       	call   c002893a <Vm::_FPUState::_FPUState()>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	90                   	nop
c001fc37:	83 c4 0c             	add    esp,0xc
c001fc3a:	c3                   	ret    

c001fc3b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	83 ec 08             	sub    esp,0x8
c001fc41:	68 ff ff 00 00       	push   0xffff
c001fc46:	6a 01                	push   0x1
c001fc48:	e8 c5 ff ff ff       	call   c001fc12 <__static_initialization_and_destruction_0(int, int)>
c001fc4d:	83 c4 10             	add    esp,0x10
c001fc50:	83 c4 0c             	add    esp,0xc
c001fc53:	c3                   	ret    

c001fc54 <FAT::getName()>:
c001fc54:	b8 48 ba 02 c0       	mov    eax,0xc002ba48
c001fc59:	c3                   	ret    

c001fc5a <FAT::tell(void*, unsigned long long*)>:
c001fc5a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc5f:	75 06                	jne    c001fc67 <FAT::tell(void*, unsigned long long*)+0xd>
c001fc61:	b8 04 00 00 00       	mov    eax,0x4
c001fc66:	c3                   	ret    
c001fc67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc6c:	75 06                	jne    c001fc74 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc6e:	b8 04 00 00 00       	mov    eax,0x4
c001fc73:	c3                   	ret    
c001fc74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc78:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc7b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc82:	89 01                	mov    DWORD PTR [ecx],eax
c001fc84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc87:	b8 00 00 00 00       	mov    eax,0x0
c001fc8c:	c3                   	ret    
c001fc8d:	90                   	nop

c001fc8e <FAT::stat(void*, unsigned long long*)>:
c001fc8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc93:	75 06                	jne    c001fc9b <FAT::stat(void*, unsigned long long*)+0xd>
c001fc95:	b8 04 00 00 00       	mov    eax,0x4
c001fc9a:	c3                   	ret    
c001fc9b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fca0:	75 06                	jne    c001fca8 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fca2:	b8 04 00 00 00       	mov    eax,0x4
c001fca7:	c3                   	ret    
c001fca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fcaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fcb2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fcb6:	89 01                	mov    DWORD PTR [ecx],eax
c001fcb8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fcbb:	b8 00 00 00 00       	mov    eax,0x0
c001fcc0:	c3                   	ret    
c001fcc1:	90                   	nop

c001fcc2 <FAT::~FAT()>:
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c001fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcce:	89 10                	mov    DWORD PTR [eax],edx
c001fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	50                   	push   eax
c001fcd8:	e8 77 2b ff ff       	call   c0012854 <Filesystem::~Filesystem()>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	90                   	nop
c001fce1:	83 c4 0c             	add    esp,0xc
c001fce4:	c3                   	ret    
c001fce5:	90                   	nop

c001fce6 <FAT::~FAT()>:
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	83 ec 0c             	sub    esp,0xc
c001fcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf0:	e8 cd ff ff ff       	call   c001fcc2 <FAT::~FAT()>
c001fcf5:	83 c4 10             	add    esp,0x10
c001fcf8:	83 ec 08             	sub    esp,0x8
c001fcfb:	6a 08                	push   0x8
c001fcfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd01:	e8 47 27 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c001fd06:	83 c4 10             	add    esp,0x10
c001fd09:	83 c4 0c             	add    esp,0xc
c001fd0c:	c3                   	ret    
c001fd0d:	90                   	nop

c001fd0e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fd0e:	83 ec 1c             	sub    esp,0x1c
c001fd11:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fd18:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fd1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd21:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fd28:	83 f8 ff             	cmp    eax,0xffffffff
c001fd2b:	75 34                	jne    c001fd61 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd2d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd31:	88 c2                	mov    dl,al
c001fd33:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fd38:	01 d0                	add    eax,edx
c001fd3a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd3e:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001fd44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd48:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001fd4f:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fd54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd58:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001fd5f:	eb 17                	jmp    c001fd78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd61:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd65:	88 c2                	mov    dl,al
c001fd67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd6b:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fd72:	01 d0                	add    eax,edx
c001fd74:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd78:	83 ec 04             	sub    esp,0x4
c001fd7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd83:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd87:	50                   	push   eax
c001fd88:	e8 71 6f fe ff       	call   c0006cfe <f_getlabel>
c001fd8d:	83 c4 10             	add    esp,0x10
c001fd90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd99:	75 07                	jne    c001fda2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd9b:	b8 00 00 00 00       	mov    eax,0x0
c001fda0:	eb 05                	jmp    c001fda7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fda2:	b8 01 00 00 00       	mov    eax,0x1
c001fda7:	83 c4 1c             	add    esp,0x1c
c001fdaa:	c3                   	ret    
c001fdab:	90                   	nop

c001fdac <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fdac:	57                   	push   edi
c001fdad:	83 ec 58             	sub    esp,0x58
c001fdb0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fdb8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fdbc:	b9 0f 00 00 00       	mov    ecx,0xf
c001fdc1:	b8 00 00 00 00       	mov    eax,0x0
c001fdc6:	fc                   	cld    
c001fdc7:	89 d7                	mov    edi,edx
c001fdc9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fdcb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdcf:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fdd6:	83 f8 ff             	cmp    eax,0xffffffff
c001fdd9:	75 34                	jne    c001fe0f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fddb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fddf:	88 c2                	mov    dl,al
c001fde1:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fde6:	01 d0                	add    eax,edx
c001fde8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdec:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001fdf2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdf6:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001fdfd:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fe02:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fe06:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001fe0d:	eb 17                	jmp    c001fe26 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fe0f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe13:	88 c2                	mov    dl,al
c001fe15:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe19:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fe20:	01 d0                	add    eax,edx
c001fe22:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe26:	83 ec 08             	sub    esp,0x8
c001fe29:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe31:	50                   	push   eax
c001fe32:	e8 15 0b fe ff       	call   c000094c <strcat>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe41:	50                   	push   eax
c001fe42:	e8 a5 70 fe ff       	call   c0006eec <f_setlabel>
c001fe47:	83 c4 10             	add    esp,0x10
c001fe4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fe4e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fe53:	75 07                	jne    c001fe5c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe55:	b8 00 00 00 00       	mov    eax,0x0
c001fe5a:	eb 05                	jmp    c001fe61 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe5c:	b8 01 00 00 00       	mov    eax,0x1
c001fe61:	83 c4 58             	add    esp,0x58
c001fe64:	5f                   	pop    edi
c001fe65:	c3                   	ret    

c001fe66 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe66:	83 ec 2c             	sub    esp,0x2c
c001fe69:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe71:	83 ec 08             	sub    esp,0x8
c001fe74:	68 6c ba 02 c0       	push   0xc002ba6c
c001fe79:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe7d:	e8 16 0a fe ff       	call   c0000898 <strcmp>
c001fe82:	83 c4 10             	add    esp,0x10
c001fe85:	85 c0                	test   eax,eax
c001fe87:	0f 94 c0             	sete   al
c001fe8a:	84 c0                	test   al,al
c001fe8c:	74 0d                	je     c001fe9b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe8e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe96:	e9 a6 00 00 00       	jmp    c001ff41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe9b:	83 ec 08             	sub    esp,0x8
c001fe9e:	68 5e ba 02 c0       	push   0xc002ba5e
c001fea3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fea7:	e8 ec 09 fe ff       	call   c0000898 <strcmp>
c001feac:	83 c4 10             	add    esp,0x10
c001feaf:	85 c0                	test   eax,eax
c001feb1:	0f 94 c0             	sete   al
c001feb4:	84 c0                	test   al,al
c001feb6:	74 0a                	je     c001fec2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001feb8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fec0:	eb 7f                	jmp    c001ff41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fec2:	83 ec 08             	sub    esp,0x8
c001fec5:	68 64 ba 02 c0       	push   0xc002ba64
c001feca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fece:	e8 c5 09 fe ff       	call   c0000898 <strcmp>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	85 c0                	test   eax,eax
c001fed8:	0f 94 c0             	sete   al
c001fedb:	84 c0                	test   al,al
c001fedd:	74 0a                	je     c001fee9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fedf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fee7:	eb 58                	jmp    c001ff41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fee9:	83 ec 08             	sub    esp,0x8
c001feec:	68 ac 90 02 c0       	push   0xc00290ac
c001fef1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fef5:	e8 9e 09 fe ff       	call   c0000898 <strcmp>
c001fefa:	83 c4 10             	add    esp,0x10
c001fefd:	85 c0                	test   eax,eax
c001feff:	0f 94 c0             	sete   al
c001ff02:	84 c0                	test   al,al
c001ff04:	74 0a                	je     c001ff10 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ff06:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ff0e:	eb 31                	jmp    c001ff41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff10:	83 ec 08             	sub    esp,0x8
c001ff13:	68 6a ba 02 c0       	push   0xc002ba6a
c001ff18:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff1c:	e8 77 09 fe ff       	call   c0000898 <strcmp>
c001ff21:	83 c4 10             	add    esp,0x10
c001ff24:	85 c0                	test   eax,eax
c001ff26:	0f 94 c0             	sete   al
c001ff29:	84 c0                	test   al,al
c001ff2b:	74 0a                	je     c001ff37 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff2d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ff35:	eb 0a                	jmp    c001ff41 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff37:	b8 08 00 00 00       	mov    eax,0x8
c001ff3c:	e9 df 00 00 00       	jmp    c0020020 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001ff41:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ff48:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ff4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff51:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001ff58:	83 f8 ff             	cmp    eax,0xffffffff
c001ff5b:	75 34                	jne    c001ff91 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff5d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff61:	88 c2                	mov    dl,al
c001ff63:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001ff68:	01 d0                	add    eax,edx
c001ff6a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff6e:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001ff74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff78:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001ff7f:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001ff84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff88:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001ff8f:	eb 17                	jmp    c001ffa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff91:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff95:	88 c2                	mov    dl,al
c001ff97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff9b:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001ffa2:	01 d0                	add    eax,edx
c001ffa4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ffa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ffac:	88 04 24             	mov    BYTE PTR [esp],al
c001ffaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ffb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffb7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ffbf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ffc4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	68 00 20 00 00       	push   0x2000
c001ffd4:	e8 c3 f5 fe ff       	call   c000f59c <malloc>
c001ffd9:	83 c4 10             	add    esp,0x10
c001ffdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffe0:	68 00 20 00 00       	push   0x2000
c001ffe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffe9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffed:	50                   	push   eax
c001ffee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fff2:	50                   	push   eax
c001fff3:	e8 3f 73 fe ff       	call   c0007337 <f_mkfs>
c001fff8:	83 c4 10             	add    esp,0x10
c001fffb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020004:	75 07                	jne    c002000d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020006:	b8 00 00 00 00       	mov    eax,0x0
c002000b:	eb 13                	jmp    c0020020 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002000d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020012:	75 07                	jne    c002001b <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020014:	b8 09 00 00 00       	mov    eax,0x9
c0020019:	eb 05                	jmp    c0020020 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002001b:	b8 01 00 00 00       	mov    eax,0x1
c0020020:	83 c4 2c             	add    esp,0x2c
c0020023:	c3                   	ret    

c0020024 <FAT::tryMount(LogicalDisk*, int)>:
c0020024:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002002a:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c002002f:	83 f8 14             	cmp    eax,0x14
c0020032:	75 17                	jne    c002004b <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020034:	83 ec 0c             	sub    esp,0xc
c0020037:	68 70 ba 02 c0       	push   0xc002ba70
c002003c:	e8 1e 9c ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0020041:	83 c4 10             	add    esp,0x10
c0020044:	b0 00                	mov    al,0x0
c0020046:	e9 d7 01 00 00       	jmp    c0020222 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002004b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020052:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020058:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002005e:	3d 00 02 00 00       	cmp    eax,0x200
c0020063:	74 07                	je     c002006c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020065:	b0 00                	mov    al,0x0
c0020067:	e9 b6 01 00 00       	jmp    c0020222 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002006c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020074:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002007b:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c0020082:	83 f8 ff             	cmp    eax,0xffffffff
c0020085:	74 07                	je     c002008e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020087:	b0 01                	mov    al,0x1
c0020089:	e9 94 01 00 00       	jmp    c0020222 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002008e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020098:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00200a0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00200a7:	88 c2                	mov    dl,al
c00200a9:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c00200ae:	01 d0                	add    eax,edx
c00200b0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00200b7:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c00200bd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200c4:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c00200cb:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c00200d0:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200d7:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	68 54 02 00 00       	push   0x254
c00200e6:	e8 b1 f4 fe ff       	call   c000f59c <malloc>
c00200eb:	83 c4 10             	add    esp,0x10
c00200ee:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200f5:	83 ec 04             	sub    esp,0x4
c00200f8:	6a 00                	push   0x0
c00200fa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020101:	50                   	push   eax
c0020102:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020109:	e8 e7 4d fe ff       	call   c0004ef5 <f_mount>
c002010e:	83 c4 10             	add    esp,0x10
c0020111:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020118:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020120:	74 19                	je     c002013b <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020122:	83 ec 0c             	sub    esp,0xc
c0020125:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002012c:	e8 8b f4 fe ff       	call   c000f5bc <rfree>
c0020131:	83 c4 10             	add    esp,0x10
c0020134:	b0 00                	mov    al,0x0
c0020136:	e9 e7 00 00 00       	jmp    c0020222 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002013b:	83 ec 04             	sub    esp,0x4
c002013e:	68 00 01 00 00       	push   0x100
c0020143:	6a 00                	push   0x0
c0020145:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002014c:	50                   	push   eax
c002014d:	e8 fe 05 fe ff       	call   c0000750 <memset>
c0020152:	83 c4 10             	add    esp,0x10
c0020155:	83 ec 08             	sub    esp,0x8
c0020158:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002015f:	50                   	push   eax
c0020160:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020167:	50                   	push   eax
c0020168:	e8 df 07 fe ff       	call   c000094c <strcat>
c002016d:	83 c4 10             	add    esp,0x10
c0020170:	83 ec 08             	sub    esp,0x8
c0020173:	68 7e ba 02 c0       	push   0xc002ba7e
c0020178:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002017f:	50                   	push   eax
c0020180:	e8 c7 07 fe ff       	call   c000094c <strcat>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	83 ec 04             	sub    esp,0x4
c002018b:	6a 01                	push   0x1
c002018d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020194:	50                   	push   eax
c0020195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020199:	50                   	push   eax
c002019a:	e8 b8 4d fe ff       	call   c0004f57 <f_open>
c002019f:	83 c4 10             	add    esp,0x10
c00201a2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201a9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00201b0:	85 c0                	test   eax,eax
c00201b2:	74 0a                	je     c00201be <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00201b4:	78 2d                	js     c00201e3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201b6:	83 e8 04             	sub    eax,0x4
c00201b9:	83 f8 01             	cmp    eax,0x1
c00201bc:	77 25                	ja     c00201e3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201be:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201cd:	50                   	push   eax
c00201ce:	e8 d6 58 fe ff       	call   c0005aa9 <f_close>
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	90                   	nop
c00201d7:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201df:	74 3a                	je     c002021b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201e1:	eb 2d                	jmp    c0020210 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201e3:	83 ec 0c             	sub    esp,0xc
c00201e6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201ed:	e8 ca f3 fe ff       	call   c000f5bc <rfree>
c00201f2:	83 c4 10             	add    esp,0x10
c00201f5:	83 ec 04             	sub    esp,0x4
c00201f8:	6a 00                	push   0x0
c00201fa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020201:	50                   	push   eax
c0020202:	6a 00                	push   0x0
c0020204:	e8 ec 4c fe ff       	call   c0004ef5 <f_mount>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	b0 00                	mov    al,0x0
c002020e:	eb 12                	jmp    c0020222 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020210:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c0020215:	40                   	inc    eax
c0020216:	a3 c0 0b 03 c0       	mov    ds:0xc0030bc0,eax
c002021b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020222:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020228:	c3                   	ret    
c0020229:	90                   	nop

c002022a <FAT::getFileFirstSector(char const*)>:
c002022a:	53                   	push   ebx
c002022b:	83 ec 28             	sub    esp,0x28
c002022e:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023d:	e8 5a f3 fe ff       	call   c000f59c <malloc>
c0020242:	83 c4 10             	add    esp,0x10
c0020245:	89 c3                	mov    ebx,eax
c0020247:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c002024c:	83 ec 04             	sub    esp,0x4
c002024f:	50                   	push   eax
c0020250:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020254:	53                   	push   ebx
c0020255:	e8 2a 28 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020261:	83 ec 08             	sub    esp,0x8
c0020264:	6a 01                	push   0x1
c0020266:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002026a:	e8 79 28 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c002026f:	83 c4 10             	add    esp,0x10
c0020272:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020276:	8b 00                	mov    eax,DWORD PTR [eax]
c0020278:	83 c0 0c             	add    eax,0xc
c002027b:	8b 00                	mov    eax,DWORD PTR [eax]
c002027d:	83 ec 0c             	sub    esp,0xc
c0020280:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020284:	52                   	push   edx
c0020285:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020289:	52                   	push   edx
c002028a:	6a 00                	push   0x0
c002028c:	6a 04                	push   0x4
c002028e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020292:	ff d0                	call   eax
c0020294:	83 c4 20             	add    esp,0x20
c0020297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002029b:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00202a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202a9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00202ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00202af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202b3:	83 ec 0c             	sub    esp,0xc
c00202b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202ba:	e8 87 28 ff ff       	call   c0012b46 <File::close()>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202c6:	ba 00 00 00 00       	mov    edx,0x0
c00202cb:	83 c4 28             	add    esp,0x28
c00202ce:	5b                   	pop    ebx
c00202cf:	c3                   	ret    

c00202d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00202d0:	57                   	push   edi
c00202d1:	56                   	push   esi
c00202d2:	53                   	push   ebx
c00202d3:	81 ec 50 02 00 00    	sub    esp,0x250
c00202d9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00202e1:	74 0a                	je     c00202ed <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00202e3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00202eb:	75 0a                	jne    c00202f7 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00202ed:	b8 04 00 00 00       	mov    eax,0x4
c00202f2:	e9 29 01 00 00       	jmp    c0020420 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00202f7:	83 ec 08             	sub    esp,0x8
c00202fa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020301:	50                   	push   eax
c0020302:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020309:	e8 a5 5d fe ff       	call   c00060b3 <f_readdir>
c002030e:	83 c4 10             	add    esp,0x10
c0020311:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020318:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020329:	83 c0 1a             	add    eax,0x1a
c002032c:	50                   	push   eax
c002032d:	e8 3a 04 fe ff       	call   c000076c <strlen>
c0020332:	83 c4 10             	add    esp,0x10
c0020335:	ba 00 00 00 00       	mov    edx,0x0
c002033a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002033e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020342:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020349:	0f b6 c0             	movzx  eax,al
c002034c:	83 e0 10             	and    eax,0x10
c002034f:	74 07                	je     c0020358 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020351:	b8 02 00 00 00       	mov    eax,0x2
c0020356:	eb 05                	jmp    c002035d <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020358:	b8 01 00 00 00       	mov    eax,0x1
c002035d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020361:	83 ec 08             	sub    esp,0x8
c0020364:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002036b:	83 c0 1a             	add    eax,0x1a
c002036e:	50                   	push   eax
c002036f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020373:	83 c0 10             	add    eax,0x10
c0020376:	50                   	push   eax
c0020377:	e8 90 04 fe ff       	call   c000080c <strcpy>
c002037c:	83 c4 10             	add    esp,0x10
c002037f:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020386:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002038d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020391:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020398:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002039f:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00203a6:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00203ad:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00203b4:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00203bb:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00203c2:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00203c9:	89 c6                	mov    esi,eax
c00203cb:	89 d7                	mov    edi,edx
c00203cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203cf:	89 c8                	mov    eax,ecx
c00203d1:	89 fa                	mov    edx,edi
c00203d3:	89 f3                	mov    ebx,esi
c00203d5:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00203dc:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00203e3:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00203ea:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00203f1:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00203f7:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00203fe:	84 c0                	test   al,al
c0020400:	75 07                	jne    c0020409 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020402:	b8 07 00 00 00       	mov    eax,0x7
c0020407:	eb 17                	jmp    c0020420 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020409:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020410:	85 c0                	test   eax,eax
c0020412:	75 07                	jne    c002041b <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020414:	b8 00 00 00 00       	mov    eax,0x0
c0020419:	eb 05                	jmp    c0020420 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002041b:	b8 01 00 00 00       	mov    eax,0x1
c0020420:	81 c4 50 02 00 00    	add    esp,0x250
c0020426:	5b                   	pop    ebx
c0020427:	5e                   	pop    esi
c0020428:	5f                   	pop    edi
c0020429:	c3                   	ret    

c002042a <FAT::read(void*, unsigned long, void*, int*)>:
c002042a:	83 ec 1c             	sub    esp,0x1c
c002042d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020432:	74 07                	je     c002043b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020434:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020439:	75 07                	jne    c0020442 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002043b:	b8 04 00 00 00       	mov    eax,0x4
c0020440:	eb 3d                	jmp    c002047f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020442:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020446:	50                   	push   eax
c0020447:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002044b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002044f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020453:	e8 3b 4f fe ff       	call   c0005393 <f_read>
c0020458:	83 c4 10             	add    esp,0x10
c002045b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002045f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020463:	89 c2                	mov    edx,eax
c0020465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020469:	89 10                	mov    DWORD PTR [eax],edx
c002046b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002046f:	85 c0                	test   eax,eax
c0020471:	75 07                	jne    c002047a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020473:	b8 00 00 00 00       	mov    eax,0x0
c0020478:	eb 05                	jmp    c002047f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002047a:	b8 01 00 00 00       	mov    eax,0x1
c002047f:	83 c4 1c             	add    esp,0x1c
c0020482:	c3                   	ret    
c0020483:	90                   	nop

c0020484 <FAT::write(void*, unsigned long, void*, int*)>:
c0020484:	83 ec 1c             	sub    esp,0x1c
c0020487:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002048c:	74 07                	je     c0020495 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002048e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020493:	75 07                	jne    c002049c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020495:	b8 04 00 00 00       	mov    eax,0x4
c002049a:	eb 3d                	jmp    c00204d9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002049c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204a0:	50                   	push   eax
c00204a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204ad:	e8 61 51 fe ff       	call   c0005613 <f_write>
c00204b2:	83 c4 10             	add    esp,0x10
c00204b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204bd:	89 c2                	mov    edx,eax
c00204bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204c3:	89 10                	mov    DWORD PTR [eax],edx
c00204c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204c9:	85 c0                	test   eax,eax
c00204cb:	75 07                	jne    c00204d4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00204cd:	b8 00 00 00 00       	mov    eax,0x0
c00204d2:	eb 05                	jmp    c00204d9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00204d4:	b8 01 00 00 00       	mov    eax,0x1
c00204d9:	83 c4 1c             	add    esp,0x1c
c00204dc:	c3                   	ret    
c00204dd:	90                   	nop

c00204de <FAT::close(void*)>:
c00204de:	83 ec 1c             	sub    esp,0x1c
c00204e1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204e6:	75 07                	jne    c00204ef <FAT::close(void*)+0x11>
c00204e8:	b8 04 00 00 00       	mov    eax,0x4
c00204ed:	eb 36                	jmp    c0020525 <FAT::close(void*)+0x47>
c00204ef:	83 ec 0c             	sub    esp,0xc
c00204f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204f6:	e8 ae 55 fe ff       	call   c0005aa9 <f_close>
c00204fb:	83 c4 10             	add    esp,0x10
c00204fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020502:	83 ec 0c             	sub    esp,0xc
c0020505:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020509:	e8 9e f0 fe ff       	call   c000f5ac <free>
c002050e:	83 c4 10             	add    esp,0x10
c0020511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020515:	85 c0                	test   eax,eax
c0020517:	75 07                	jne    c0020520 <FAT::close(void*)+0x42>
c0020519:	b8 00 00 00 00       	mov    eax,0x0
c002051e:	eb 05                	jmp    c0020525 <FAT::close(void*)+0x47>
c0020520:	b8 01 00 00 00       	mov    eax,0x1
c0020525:	83 c4 1c             	add    esp,0x1c
c0020528:	c3                   	ret    
c0020529:	90                   	nop

c002052a <FAT::closeDir(void*)>:
c002052a:	83 ec 1c             	sub    esp,0x1c
c002052d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020532:	75 07                	jne    c002053b <FAT::closeDir(void*)+0x11>
c0020534:	b8 04 00 00 00       	mov    eax,0x4
c0020539:	eb 36                	jmp    c0020571 <FAT::closeDir(void*)+0x47>
c002053b:	83 ec 0c             	sub    esp,0xc
c002053e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020542:	e8 4a 5b fe ff       	call   c0006091 <f_closedir>
c0020547:	83 c4 10             	add    esp,0x10
c002054a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020555:	e8 52 f0 fe ff       	call   c000f5ac <free>
c002055a:	83 c4 10             	add    esp,0x10
c002055d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020561:	85 c0                	test   eax,eax
c0020563:	75 07                	jne    c002056c <FAT::closeDir(void*)+0x42>
c0020565:	b8 00 00 00 00       	mov    eax,0x0
c002056a:	eb 05                	jmp    c0020571 <FAT::closeDir(void*)+0x47>
c002056c:	b8 01 00 00 00       	mov    eax,0x1
c0020571:	83 c4 1c             	add    esp,0x1c
c0020574:	c3                   	ret    
c0020575:	90                   	nop

c0020576 <FAT::seek(void*, unsigned long long)>:
c0020576:	83 ec 2c             	sub    esp,0x2c
c0020579:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002057d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020581:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020589:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002058e:	75 07                	jne    c0020597 <FAT::seek(void*, unsigned long long)+0x21>
c0020590:	b8 04 00 00 00       	mov    eax,0x4
c0020595:	eb 2f                	jmp    c00205c6 <FAT::seek(void*, unsigned long long)+0x50>
c0020597:	83 ec 04             	sub    esp,0x4
c002059a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002059e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00205a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00205a6:	e8 2d 55 fe ff       	call   c0005ad8 <f_lseek>
c00205ab:	83 c4 10             	add    esp,0x10
c00205ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205b6:	85 c0                	test   eax,eax
c00205b8:	75 07                	jne    c00205c1 <FAT::seek(void*, unsigned long long)+0x4b>
c00205ba:	b8 00 00 00 00       	mov    eax,0x0
c00205bf:	eb 05                	jmp    c00205c6 <FAT::seek(void*, unsigned long long)+0x50>
c00205c1:	b8 01 00 00 00       	mov    eax,0x1
c00205c6:	83 c4 2c             	add    esp,0x2c
c00205c9:	c3                   	ret    

c00205ca <fatWrapperReadDisk>:
c00205ca:	83 ec 1c             	sub    esp,0x1c
c00205cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205d1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00205dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00205e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205e9:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00205f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00205f4:	83 ec 0c             	sub    esp,0xc
c00205f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205fb:	52                   	push   edx
c00205fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020604:	50                   	push   eax
c0020605:	e8 3e 58 ff ff       	call   c0015e48 <LogicalDisk::read(unsigned long long, int, void*)>
c002060a:	83 c4 20             	add    esp,0x20
c002060d:	83 c4 1c             	add    esp,0x1c
c0020610:	c3                   	ret    

c0020611 <fatWrapperWriteDisk>:
c0020611:	83 ec 1c             	sub    esp,0x1c
c0020614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020618:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002061c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020620:	89 04 24             	mov    DWORD PTR [esp],eax
c0020623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020627:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002062b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020630:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c0020637:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002063b:	83 ec 0c             	sub    esp,0xc
c002063e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020642:	52                   	push   edx
c0020643:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020647:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002064b:	50                   	push   eax
c002064c:	e8 63 58 ff ff       	call   c0015eb4 <LogicalDisk::write(unsigned long long, int, void*)>
c0020651:	83 c4 20             	add    esp,0x20
c0020654:	83 c4 1c             	add    esp,0x1c
c0020657:	c3                   	ret    

c0020658 <fatWrapperIoctl>:
c0020658:	53                   	push   ebx
c0020659:	83 ec 28             	sub    esp,0x28
c002065c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020660:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020664:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020668:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002066c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020671:	75 31                	jne    c00206a4 <fatWrapperIoctl+0x4c>
c0020673:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020677:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002067b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020680:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c0020687:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002068d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020693:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020697:	66 89 02             	mov    WORD PTR [edx],ax
c002069a:	b8 00 00 00 00       	mov    eax,0x0
c002069f:	e9 b2 00 00 00       	jmp    c0020756 <fatWrapperIoctl+0xfe>
c00206a4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00206a9:	75 6a                	jne    c0020715 <fatWrapperIoctl+0xbd>
c00206ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206b3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206b8:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00206bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206c5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00206cb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00206d1:	89 c8                	mov    eax,ecx
c00206d3:	89 da                	mov    edx,ebx
c00206d5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00206d9:	c1 e0 0a             	shl    eax,0xa
c00206dc:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00206e1:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c00206e8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00206ee:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00206f4:	89 cb                	mov    ebx,ecx
c00206f6:	c1 fb 1f             	sar    ebx,0x1f
c00206f9:	53                   	push   ebx
c00206fa:	51                   	push   ecx
c00206fb:	52                   	push   edx
c00206fc:	50                   	push   eax
c00206fd:	e8 32 5e 00 00       	call   c0026534 <__udivdi3>
c0020702:	83 c4 10             	add    esp,0x10
c0020705:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020709:	89 01                	mov    DWORD PTR [ecx],eax
c002070b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002070e:	b8 00 00 00 00       	mov    eax,0x0
c0020713:	eb 41                	jmp    c0020756 <fatWrapperIoctl+0xfe>
c0020715:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002071a:	75 07                	jne    c0020723 <fatWrapperIoctl+0xcb>
c002071c:	b8 00 00 00 00       	mov    eax,0x0
c0020721:	eb 33                	jmp    c0020756 <fatWrapperIoctl+0xfe>
c0020723:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020728:	75 19                	jne    c0020743 <fatWrapperIoctl+0xeb>
c002072a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002072e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020736:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002073c:	b8 00 00 00 00       	mov    eax,0x0
c0020741:	eb 13                	jmp    c0020756 <fatWrapperIoctl+0xfe>
c0020743:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020748:	75 07                	jne    c0020751 <fatWrapperIoctl+0xf9>
c002074a:	b8 00 00 00 00       	mov    eax,0x0
c002074f:	eb 05                	jmp    c0020756 <fatWrapperIoctl+0xfe>
c0020751:	b8 04 00 00 00       	mov    eax,0x4
c0020756:	83 c4 28             	add    esp,0x28
c0020759:	5b                   	pop    ebx
c002075a:	c3                   	ret    
c002075b:	90                   	nop

c002075c <FAT::FAT()>:
c002075c:	83 ec 1c             	sub    esp,0x1c
c002075f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020763:	83 ec 0c             	sub    esp,0xc
c0020766:	50                   	push   eax
c0020767:	e8 c4 20 ff ff       	call   c0012830 <Filesystem::Filesystem()>
c002076c:	83 c4 10             	add    esp,0x10
c002076f:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c0020774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020778:	89 10                	mov    DWORD PTR [eax],edx
c002077a:	c7 05 c0 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030bc0,0x0
c0020784:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002078c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020791:	7f 15                	jg     c00207a8 <FAT::FAT()+0x4c>
c0020793:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020797:	c7 04 85 e0 0b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf420],0xffffffff
c00207a2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00207a6:	eb e4                	jmp    c002078c <FAT::FAT()+0x30>
c00207a8:	90                   	nop
c00207a9:	83 c4 1c             	add    esp,0x1c
c00207ac:	c3                   	ret    
c00207ad:	90                   	nop

c00207ae <FAT::fixFilepath(char*)>:
c00207ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207b2:	8a 00                	mov    al,BYTE PTR [eax]
c00207b4:	3c 40                	cmp    al,0x40
c00207b6:	7e 2c                	jle    c00207e4 <FAT::fixFilepath(char*)+0x36>
c00207b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207bc:	8a 00                	mov    al,BYTE PTR [eax]
c00207be:	83 e8 41             	sub    eax,0x41
c00207c1:	88 c2                	mov    dl,al
c00207c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207c7:	88 10                	mov    BYTE PTR [eax],dl
c00207c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207cd:	8a 00                	mov    al,BYTE PTR [eax]
c00207cf:	0f be c0             	movsx  eax,al
c00207d2:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c00207d9:	83 c0 30             	add    eax,0x30
c00207dc:	88 c2                	mov    dl,al
c00207de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207e2:	88 10                	mov    BYTE PTR [eax],dl
c00207e4:	90                   	nop
c00207e5:	c3                   	ret    

c00207e6 <FAT::open(char const*, void**, FileOpenMode)>:
c00207e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207f4:	74 0a                	je     c0020800 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00207f6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00207fe:	75 0a                	jne    c002080a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020800:	b8 04 00 00 00       	mov    eax,0x4
c0020805:	e9 fd 00 00 00       	jmp    c0020907 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002080a:	83 ec 08             	sub    esp,0x8
c002080d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020814:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020818:	50                   	push   eax
c0020819:	e8 ee ff fd ff       	call   c000080c <strcpy>
c002081e:	83 c4 10             	add    esp,0x10
c0020821:	83 ec 08             	sub    esp,0x8
c0020824:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020828:	50                   	push   eax
c0020829:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020830:	e8 79 ff ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020840:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020847:	83 e0 01             	and    eax,0x1
c002084a:	74 08                	je     c0020854 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002084c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020854:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002085b:	83 e0 04             	and    eax,0x4
c002085e:	74 10                	je     c0020870 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020860:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020868:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020870:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020877:	83 e0 02             	and    eax,0x2
c002087a:	74 08                	je     c0020884 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002087c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020884:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002088b:	83 e0 08             	and    eax,0x8
c002088e:	74 08                	je     c0020898 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020890:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020898:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002089f:	83 e0 10             	and    eax,0x10
c00208a2:	74 08                	je     c00208ac <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00208a4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00208ac:	83 ec 0c             	sub    esp,0xc
c00208af:	68 50 02 00 00       	push   0x250
c00208b4:	e8 e3 ec fe ff       	call   c000f59c <malloc>
c00208b9:	83 c4 10             	add    esp,0x10
c00208bc:	89 c2                	mov    edx,eax
c00208be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208c5:	89 10                	mov    DWORD PTR [eax],edx
c00208c7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00208cf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00208d8:	83 ec 04             	sub    esp,0x4
c00208db:	52                   	push   edx
c00208dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00208e0:	52                   	push   edx
c00208e1:	50                   	push   eax
c00208e2:	e8 70 46 fe ff       	call   c0004f57 <f_open>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00208f1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00208f9:	74 07                	je     c0020902 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00208fb:	b8 01 00 00 00       	mov    eax,0x1
c0020900:	eb 05                	jmp    c0020907 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020902:	b8 00 00 00 00       	mov    eax,0x0
c0020907:	81 c4 1c 01 00 00    	add    esp,0x11c
c002090d:	c3                   	ret    

c002090e <FAT::openDir(char const*, void**)>:
c002090e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020914:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002091c:	74 0a                	je     c0020928 <FAT::openDir(char const*, void**)+0x1a>
c002091e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020926:	75 07                	jne    c002092f <FAT::openDir(char const*, void**)+0x21>
c0020928:	b8 04 00 00 00       	mov    eax,0x4
c002092d:	eb 7d                	jmp    c00209ac <FAT::openDir(char const*, void**)+0x9e>
c002092f:	83 ec 08             	sub    esp,0x8
c0020932:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020939:	8d 44 24 18          	lea    eax,[esp+0x18]
c002093d:	50                   	push   eax
c002093e:	e8 c9 fe fd ff       	call   c000080c <strcpy>
c0020943:	83 c4 10             	add    esp,0x10
c0020946:	83 ec 08             	sub    esp,0x8
c0020949:	8d 44 24 14          	lea    eax,[esp+0x14]
c002094d:	50                   	push   eax
c002094e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020955:	e8 54 fe ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c002095a:	83 c4 10             	add    esp,0x10
c002095d:	83 ec 0c             	sub    esp,0xc
c0020960:	6a 4c                	push   0x4c
c0020962:	e8 35 ec fe ff       	call   c000f59c <malloc>
c0020967:	83 c4 10             	add    esp,0x10
c002096a:	89 c2                	mov    edx,eax
c002096c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020973:	89 10                	mov    DWORD PTR [eax],edx
c0020975:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002097c:	8b 00                	mov    eax,DWORD PTR [eax]
c002097e:	83 ec 08             	sub    esp,0x8
c0020981:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020985:	52                   	push   edx
c0020986:	50                   	push   eax
c0020987:	e8 03 56 fe ff       	call   c0005f8f <f_opendir>
c002098c:	83 c4 10             	add    esp,0x10
c002098f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020996:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002099e:	74 07                	je     c00209a7 <FAT::openDir(char const*, void**)+0x99>
c00209a0:	b8 01 00 00 00       	mov    eax,0x1
c00209a5:	eb 05                	jmp    c00209ac <FAT::openDir(char const*, void**)+0x9e>
c00209a7:	b8 00 00 00 00       	mov    eax,0x0
c00209ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209b2:	c3                   	ret    
c00209b3:	90                   	nop

c00209b4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00209b4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209ba:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00209c2:	75 0a                	jne    c00209ce <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00209c4:	b8 04 00 00 00       	mov    eax,0x4
c00209c9:	e9 c9 00 00 00       	jmp    c0020a97 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209ce:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00209d6:	75 0a                	jne    c00209e2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00209d8:	b8 04 00 00 00       	mov    eax,0x4
c00209dd:	e9 b5 00 00 00       	jmp    c0020a97 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209e2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00209ea:	75 0a                	jne    c00209f6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00209ec:	b8 04 00 00 00       	mov    eax,0x4
c00209f1:	e9 a1 00 00 00       	jmp    c0020a97 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209f6:	83 ec 08             	sub    esp,0x8
c00209f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a07:	50                   	push   eax
c0020a08:	e8 ff fd fd ff       	call   c000080c <strcpy>
c0020a0d:	83 c4 10             	add    esp,0x10
c0020a10:	83 ec 08             	sub    esp,0x8
c0020a13:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a1a:	50                   	push   eax
c0020a1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a22:	e8 87 fd ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	83 ec 08             	sub    esp,0x8
c0020a2d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a31:	50                   	push   eax
c0020a32:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a39:	50                   	push   eax
c0020a3a:	e8 0f 57 fe ff       	call   c000614e <f_stat>
c0020a3f:	83 c4 10             	add    esp,0x10
c0020a42:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a49:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a50:	85 c0                	test   eax,eax
c0020a52:	74 07                	je     c0020a5b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020a54:	83 f8 04             	cmp    eax,0x4
c0020a57:	74 32                	je     c0020a8b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020a59:	eb 37                	jmp    c0020a92 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020a5b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020a5f:	0f b6 c0             	movzx  eax,al
c0020a62:	83 e0 10             	and    eax,0x10
c0020a65:	0f 95 c2             	setne  dl
c0020a68:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020a6f:	88 10                	mov    BYTE PTR [eax],dl
c0020a71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a78:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020a7f:	89 01                	mov    DWORD PTR [ecx],eax
c0020a81:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a84:	b8 00 00 00 00       	mov    eax,0x0
c0020a89:	eb 0c                	jmp    c0020a97 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a8b:	b8 02 00 00 00       	mov    eax,0x2
c0020a90:	eb 05                	jmp    c0020a97 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a92:	b8 01 00 00 00       	mov    eax,0x1
c0020a97:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020a9d:	c3                   	ret    

c0020a9e <FAT::unlink(char const*)>:
c0020a9e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020aa4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020aac:	75 07                	jne    c0020ab5 <FAT::unlink(char const*)+0x17>
c0020aae:	b8 04 00 00 00       	mov    eax,0x4
c0020ab3:	eb 5c                	jmp    c0020b11 <FAT::unlink(char const*)+0x73>
c0020ab5:	83 ec 08             	sub    esp,0x8
c0020ab8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020abf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ac3:	50                   	push   eax
c0020ac4:	e8 43 fd fd ff       	call   c000080c <strcpy>
c0020ac9:	83 c4 10             	add    esp,0x10
c0020acc:	83 ec 08             	sub    esp,0x8
c0020acf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ad3:	50                   	push   eax
c0020ad4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020adb:	e8 ce fc ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020ae0:	83 c4 10             	add    esp,0x10
c0020ae3:	83 ec 0c             	sub    esp,0xc
c0020ae6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020aea:	50                   	push   eax
c0020aeb:	e8 b0 59 fe ff       	call   c00064a0 <f_unlink>
c0020af0:	83 c4 10             	add    esp,0x10
c0020af3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020afa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020b01:	85 c0                	test   eax,eax
c0020b03:	75 07                	jne    c0020b0c <FAT::unlink(char const*)+0x6e>
c0020b05:	b8 00 00 00 00       	mov    eax,0x0
c0020b0a:	eb 05                	jmp    c0020b11 <FAT::unlink(char const*)+0x73>
c0020b0c:	b8 01 00 00 00       	mov    eax,0x1
c0020b11:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b17:	c3                   	ret    

c0020b18 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b18:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b1e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b25:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b2c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b30:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020b34:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020b3c:	75 0a                	jne    c0020b48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020b3e:	b8 04 00 00 00       	mov    eax,0x4
c0020b43:	e9 1c 01 00 00       	jmp    c0020c64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b48:	83 ec 08             	sub    esp,0x8
c0020b4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b52:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b56:	50                   	push   eax
c0020b57:	e8 b0 fc fd ff       	call   c000080c <strcpy>
c0020b5c:	83 c4 10             	add    esp,0x10
c0020b5f:	83 ec 08             	sub    esp,0x8
c0020b62:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020b66:	50                   	push   eax
c0020b67:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b6e:	e8 3b fc ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020b7e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020b86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b8b:	83 e0 01             	and    eax,0x1
c0020b8e:	74 08                	je     c0020b98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020b90:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020b98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b9d:	83 e0 02             	and    eax,0x2
c0020ba0:	74 08                	je     c0020baa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020ba2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020baa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020baf:	83 e0 04             	and    eax,0x4
c0020bb2:	74 08                	je     c0020bbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020bb4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020bbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bc1:	83 e0 08             	and    eax,0x8
c0020bc4:	74 08                	je     c0020bce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020bc6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020bce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bd3:	83 e0 01             	and    eax,0x1
c0020bd6:	74 08                	je     c0020be0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020bd8:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020be0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020be5:	83 e0 02             	and    eax,0x2
c0020be8:	74 08                	je     c0020bf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020bea:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020bf2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bf7:	83 e0 04             	and    eax,0x4
c0020bfa:	74 08                	je     c0020c04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020bfc:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020c04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c09:	83 e0 08             	and    eax,0x8
c0020c0c:	74 08                	je     c0020c16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020c0e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020c16:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c1d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c24:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c2c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020c34:	83 ec 04             	sub    esp,0x4
c0020c37:	52                   	push   edx
c0020c38:	50                   	push   eax
c0020c39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c3d:	50                   	push   eax
c0020c3e:	e8 ff 5e fe ff       	call   c0006b42 <f_chmod>
c0020c43:	83 c4 10             	add    esp,0x10
c0020c46:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020c4d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020c54:	85 c0                	test   eax,eax
c0020c56:	75 07                	jne    c0020c5f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020c58:	b8 00 00 00 00       	mov    eax,0x0
c0020c5d:	eb 05                	jmp    c0020c64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c5f:	b8 01 00 00 00       	mov    eax,0x1
c0020c64:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020c6a:	c3                   	ret    
c0020c6b:	90                   	nop

c0020c6c <FAT::rename(char const*, char const*)>:
c0020c6c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020c72:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020c7a:	74 0a                	je     c0020c86 <FAT::rename(char const*, char const*)+0x1a>
c0020c7c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020c84:	75 0a                	jne    c0020c90 <FAT::rename(char const*, char const*)+0x24>
c0020c86:	b8 04 00 00 00       	mov    eax,0x4
c0020c8b:	e9 98 00 00 00       	jmp    c0020d28 <FAT::rename(char const*, char const*)+0xbc>
c0020c90:	83 ec 08             	sub    esp,0x8
c0020c93:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020c9a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ca1:	50                   	push   eax
c0020ca2:	e8 65 fb fd ff       	call   c000080c <strcpy>
c0020ca7:	83 c4 10             	add    esp,0x10
c0020caa:	83 ec 08             	sub    esp,0x8
c0020cad:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020cb4:	50                   	push   eax
c0020cb5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cbc:	e8 ed fa ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020cc1:	83 c4 10             	add    esp,0x10
c0020cc4:	83 ec 08             	sub    esp,0x8
c0020cc7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020cce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cd2:	50                   	push   eax
c0020cd3:	e8 34 fb fd ff       	call   c000080c <strcpy>
c0020cd8:	83 c4 10             	add    esp,0x10
c0020cdb:	83 ec 08             	sub    esp,0x8
c0020cde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ce2:	50                   	push   eax
c0020ce3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cea:	e8 bf fa ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020cef:	83 c4 10             	add    esp,0x10
c0020cf2:	83 ec 08             	sub    esp,0x8
c0020cf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cf9:	50                   	push   eax
c0020cfa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d01:	50                   	push   eax
c0020d02:	e8 48 5b fe ff       	call   c000684f <f_rename>
c0020d07:	83 c4 10             	add    esp,0x10
c0020d0a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020d11:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020d18:	85 c0                	test   eax,eax
c0020d1a:	75 07                	jne    c0020d23 <FAT::rename(char const*, char const*)+0xb7>
c0020d1c:	b8 00 00 00 00       	mov    eax,0x0
c0020d21:	eb 05                	jmp    c0020d28 <FAT::rename(char const*, char const*)+0xbc>
c0020d23:	b8 01 00 00 00       	mov    eax,0x1
c0020d28:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020d2e:	c3                   	ret    
c0020d2f:	90                   	nop

c0020d30 <FAT::mkdir(char const*)>:
c0020d30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d3e:	75 07                	jne    c0020d47 <FAT::mkdir(char const*)+0x17>
c0020d40:	b8 04 00 00 00       	mov    eax,0x4
c0020d45:	eb 5c                	jmp    c0020da3 <FAT::mkdir(char const*)+0x73>
c0020d47:	83 ec 08             	sub    esp,0x8
c0020d4a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d51:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d55:	50                   	push   eax
c0020d56:	e8 b1 fa fd ff       	call   c000080c <strcpy>
c0020d5b:	83 c4 10             	add    esp,0x10
c0020d5e:	83 ec 08             	sub    esp,0x8
c0020d61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d65:	50                   	push   eax
c0020d66:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d6d:	e8 3c fa ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020d72:	83 c4 10             	add    esp,0x10
c0020d75:	83 ec 0c             	sub    esp,0xc
c0020d78:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d7c:	50                   	push   eax
c0020d7d:	e8 a1 58 fe ff       	call   c0006623 <f_mkdir>
c0020d82:	83 c4 10             	add    esp,0x10
c0020d85:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d8c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d93:	85 c0                	test   eax,eax
c0020d95:	75 07                	jne    c0020d9e <FAT::mkdir(char const*)+0x6e>
c0020d97:	b8 00 00 00 00       	mov    eax,0x0
c0020d9c:	eb 05                	jmp    c0020da3 <FAT::mkdir(char const*)+0x73>
c0020d9e:	b8 01 00 00 00       	mov    eax,0x1
c0020da3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020da9:	c3                   	ret    

c0020daa <FAT::exists(char const*)>:
c0020daa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020db0:	83 ec 08             	sub    esp,0x8
c0020db3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020dba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020dbe:	50                   	push   eax
c0020dbf:	e8 48 fa fd ff       	call   c000080c <strcpy>
c0020dc4:	83 c4 10             	add    esp,0x10
c0020dc7:	83 ec 08             	sub    esp,0x8
c0020dca:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020dce:	50                   	push   eax
c0020dcf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020dd6:	e8 d3 f9 ff ff       	call   c00207ae <FAT::fixFilepath(char*)>
c0020ddb:	83 c4 10             	add    esp,0x10
c0020dde:	83 ec 08             	sub    esp,0x8
c0020de1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020de8:	50                   	push   eax
c0020de9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ded:	50                   	push   eax
c0020dee:	e8 5b 53 fe ff       	call   c000614e <f_stat>
c0020df3:	83 c4 10             	add    esp,0x10
c0020df6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020dfd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e04:	85 c0                	test   eax,eax
c0020e06:	75 04                	jne    c0020e0c <FAT::exists(char const*)+0x62>
c0020e08:	b0 01                	mov    al,0x1
c0020e0a:	eb 02                	jmp    c0020e0e <FAT::exists(char const*)+0x64>
c0020e0c:	b0 00                	mov    al,0x0
c0020e0e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e14:	c3                   	ret    
c0020e15:	90                   	nop

c0020e16 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020e16:	b8 08 00 00 00       	mov    eax,0x8
c0020e1b:	c3                   	ret    

c0020e1c <ISO9660::seek(void*, unsigned long long)>:
c0020e1c:	53                   	push   ebx
c0020e1d:	b8 04 00 00 00       	mov    eax,0x4
c0020e22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e2a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e2e:	85 d2                	test   edx,edx
c0020e30:	74 17                	je     c0020e49 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e32:	89 c8                	mov    eax,ecx
c0020e34:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020e37:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020e3a:	b8 01 00 00 00       	mov    eax,0x1
c0020e3f:	73 08                	jae    c0020e49 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e41:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020e44:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020e47:	31 c0                	xor    eax,eax
c0020e49:	5b                   	pop    ebx
c0020e4a:	c3                   	ret    
c0020e4b:	90                   	nop

c0020e4c <ISO9660::tell(void*, unsigned long long*)>:
c0020e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e54:	85 d2                	test   edx,edx
c0020e56:	74 12                	je     c0020e6a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e58:	85 c0                	test   eax,eax
c0020e5a:	74 0e                	je     c0020e6a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e5c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020e5f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020e62:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e65:	89 10                	mov    DWORD PTR [eax],edx
c0020e67:	31 c0                	xor    eax,eax
c0020e69:	c3                   	ret    
c0020e6a:	b8 04 00 00 00       	mov    eax,0x4
c0020e6f:	c3                   	ret    

c0020e70 <ISO9660::getName()>:
c0020e70:	b8 f4 ba 02 c0       	mov    eax,0xc002baf4
c0020e75:	c3                   	ret    

c0020e76 <ISO9660::stat(void*, unsigned long long*)>:
c0020e76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e7e:	85 d2                	test   edx,edx
c0020e80:	74 12                	je     c0020e94 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e82:	85 c0                	test   eax,eax
c0020e84:	74 0e                	je     c0020e94 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e86:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020e89:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020e8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e8f:	89 10                	mov    DWORD PTR [eax],edx
c0020e91:	31 c0                	xor    eax,eax
c0020e93:	c3                   	ret    
c0020e94:	b8 04 00 00 00       	mov    eax,0x4
c0020e99:	c3                   	ret    

c0020e9a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020e9a:	b8 01 00 00 00       	mov    eax,0x1
c0020e9f:	c3                   	ret    

c0020ea0 <ISO9660::unlink(char const*)>:
c0020ea0:	b8 01 00 00 00       	mov    eax,0x1
c0020ea5:	c3                   	ret    

c0020ea6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020ea6:	b8 01 00 00 00       	mov    eax,0x1
c0020eab:	c3                   	ret    

c0020eac <ISO9660::rename(char const*, char const*)>:
c0020eac:	b8 01 00 00 00       	mov    eax,0x1
c0020eb1:	c3                   	ret    

c0020eb2 <ISO9660::mkdir(char const*)>:
c0020eb2:	b8 01 00 00 00       	mov    eax,0x1
c0020eb7:	c3                   	ret    

c0020eb8 <ISO9660::close(void*)>:
c0020eb8:	83 ec 0c             	sub    esp,0xc
c0020ebb:	b8 04 00 00 00       	mov    eax,0x4
c0020ec0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ec4:	85 d2                	test   edx,edx
c0020ec6:	74 0e                	je     c0020ed6 <ISO9660::close(void*)+0x1e>
c0020ec8:	83 ec 0c             	sub    esp,0xc
c0020ecb:	52                   	push   edx
c0020ecc:	e8 db e6 fe ff       	call   c000f5ac <free>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	31 c0                	xor    eax,eax
c0020ed6:	83 c4 0c             	add    esp,0xc
c0020ed9:	c3                   	ret    

c0020eda <ISO9660::closeDir(void*)>:
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	b8 04 00 00 00       	mov    eax,0x4
c0020ee2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ee6:	85 d2                	test   edx,edx
c0020ee8:	74 0e                	je     c0020ef8 <ISO9660::closeDir(void*)+0x1e>
c0020eea:	83 ec 0c             	sub    esp,0xc
c0020eed:	52                   	push   edx
c0020eee:	e8 b9 e6 fe ff       	call   c000f5ac <free>
c0020ef3:	83 c4 10             	add    esp,0x10
c0020ef6:	31 c0                	xor    eax,eax
c0020ef8:	83 c4 0c             	add    esp,0xc
c0020efb:	c3                   	ret    

c0020efc <ISO9660::~ISO9660()>:
c0020efc:	83 ec 0c             	sub    esp,0xc
c0020eff:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c0020f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f08:	89 10                	mov    DWORD PTR [eax],edx
c0020f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f0e:	83 ec 0c             	sub    esp,0xc
c0020f11:	50                   	push   eax
c0020f12:	e8 3d 19 ff ff       	call   c0012854 <Filesystem::~Filesystem()>
c0020f17:	83 c4 10             	add    esp,0x10
c0020f1a:	90                   	nop
c0020f1b:	83 c4 0c             	add    esp,0xc
c0020f1e:	c3                   	ret    
c0020f1f:	90                   	nop

c0020f20 <ISO9660::~ISO9660()>:
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	83 ec 0c             	sub    esp,0xc
c0020f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f2a:	e8 cd ff ff ff       	call   c0020efc <ISO9660::~ISO9660()>
c0020f2f:	83 c4 10             	add    esp,0x10
c0020f32:	83 ec 08             	sub    esp,0x8
c0020f35:	6a 08                	push   0x8
c0020f37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f3b:	e8 0d 15 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0020f40:	83 c4 10             	add    esp,0x10
c0020f43:	83 c4 0c             	add    esp,0xc
c0020f46:	c3                   	ret    

c0020f47 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020f47:	55                   	push   ebp
c0020f48:	31 c9                	xor    ecx,ecx
c0020f4a:	57                   	push   edi
c0020f4b:	56                   	push   esi
c0020f4c:	53                   	push   ebx
c0020f4d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020f51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020f55:	89 eb                	mov    ebx,ebp
c0020f57:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020f5b:	39 ce                	cmp    esi,ecx
c0020f5d:	7e 17                	jle    c0020f76 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020f5f:	31 d2                	xor    edx,edx
c0020f61:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020f65:	7d 13                	jge    c0020f7a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020f67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020f6b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020f6e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020f71:	75 0d                	jne    c0020f80 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020f73:	42                   	inc    edx
c0020f74:	eb eb                	jmp    c0020f61 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020f76:	31 c0                	xor    eax,eax
c0020f78:	eb 0a                	jmp    c0020f84 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f7a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020f7e:	eb 04                	jmp    c0020f84 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f80:	41                   	inc    ecx
c0020f81:	43                   	inc    ebx
c0020f82:	eb d7                	jmp    c0020f5b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020f84:	5b                   	pop    ebx
c0020f85:	5e                   	pop    esi
c0020f86:	5f                   	pop    edi
c0020f87:	5d                   	pop    ebp
c0020f88:	c3                   	ret    

c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020f89:	57                   	push   edi
c0020f8a:	56                   	push   esi
c0020f8b:	53                   	push   ebx
c0020f8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f94:	39 0d c0 0c 03 c0    	cmp    DWORD PTR ds:0xc0030cc0,ecx
c0020f9a:	75 08                	jne    c0020fa4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0020f9c:	38 05 34 cb 02 c0    	cmp    BYTE PTR ds:0xc002cb34,al
c0020fa2:	74 2b                	je     c0020fcf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0020fa4:	83 ec 0c             	sub    esp,0xc
c0020fa7:	a2 34 cb 02 c0       	mov    ds:0xc002cb34,al
c0020fac:	68 e0 0c 03 c0       	push   0xc0030ce0
c0020fb1:	0f be c0             	movsx  eax,al
c0020fb4:	6a 01                	push   0x1
c0020fb6:	89 0d c0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cc0,ecx
c0020fbc:	31 db                	xor    ebx,ebx
c0020fbe:	53                   	push   ebx
c0020fbf:	51                   	push   ecx
c0020fc0:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c0020fc7:	e8 7c 4e ff ff       	call   c0015e48 <LogicalDisk::read(unsigned long long, int, void*)>
c0020fcc:	83 c4 20             	add    esp,0x20
c0020fcf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020fd3:	be e0 0c 03 c0       	mov    esi,0xc0030ce0
c0020fd8:	b9 00 08 00 00       	mov    ecx,0x800
c0020fdd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fdf:	5b                   	pop    ebx
c0020fe0:	5e                   	pop    esi
c0020fe1:	5f                   	pop    edi
c0020fe2:	c3                   	ret    
c0020fe3:	90                   	nop

c0020fe4 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020fe4:	81 ec 10 08 00 00    	sub    esp,0x810
c0020fea:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020ff1:	83 c0 41             	add    eax,0x41
c0020ff4:	0f be c0             	movsx  eax,al
c0020ff7:	50                   	push   eax
c0020ff8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ffc:	50                   	push   eax
c0020ffd:	6a 10                	push   0x10
c0020fff:	e8 85 ff ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021004:	83 c4 10             	add    esp,0x10
c0021007:	31 c0                	xor    eax,eax
c0021009:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002100e:	75 1d                	jne    c002102d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021010:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021015:	75 16                	jne    c002102d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021017:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002101c:	75 0f                	jne    c002102d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002101e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021023:	75 08                	jne    c002102d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021025:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002102a:	0f 94 c0             	sete   al
c002102d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021033:	c3                   	ret    

c0021034 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021034:	55                   	push   ebp
c0021035:	57                   	push   edi
c0021036:	56                   	push   esi
c0021037:	53                   	push   ebx
c0021038:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002103e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021045:	85 ed                	test   ebp,ebp
c0021047:	0f 84 da 01 00 00    	je     c0021227 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002104d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021055:	0f 84 cc 01 00 00    	je     c0021227 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002105b:	b8 01 00 00 00       	mov    eax,0x1
c0021060:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021064:	0f 85 c2 01 00 00    	jne    c002122c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002106a:	31 d2                	xor    edx,edx
c002106c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021073:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021076:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021079:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002107c:	89 04 24             	mov    DWORD PTR [esp],eax
c002107f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021083:	01 c8                	add    eax,ecx
c0021085:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021088:	11 da                	adc    edx,ebx
c002108a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002108e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021092:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021096:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002109a:	19 d7                	sbb    edi,edx
c002109c:	72 11                	jb     c00210af <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002109e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00210a1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00210a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00210ad:	eb 0c                	jmp    c00210bb <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00210af:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00210b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210b7:	29 ce                	sub    esi,ecx
c00210b9:	19 df                	sbb    edi,ebx
c00210bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00210be:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00210c1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00210c5:	c1 e0 0b             	shl    eax,0xb
c00210c8:	01 c8                	add    eax,ecx
c00210ca:	11 da                	adc    edx,ebx
c00210cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00210cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210d3:	51                   	push   ecx
c00210d4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210d8:	50                   	push   eax
c00210d9:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00210dd:	53                   	push   ebx
c00210de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210e6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00210ea:	50                   	push   eax
c00210eb:	e8 99 fe ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00210f3:	b8 00 08 00 00       	mov    eax,0x800
c00210f8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00210fe:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021102:	29 d0                	sub    eax,edx
c0021104:	83 c4 10             	add    esp,0x10
c0021107:	89 f9                	mov    ecx,edi
c0021109:	39 c6                	cmp    esi,eax
c002110b:	83 d9 00             	sbb    ecx,0x0
c002110e:	7d 1b                	jge    c002112b <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021110:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021115:	75 12                	jne    c0021129 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021117:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002111e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021124:	e9 fa 00 00 00       	jmp    c0021223 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021129:	89 f0                	mov    eax,esi
c002112b:	01 d3                	add    ebx,edx
c002112d:	31 d2                	xor    edx,edx
c002112f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021133:	39 c2                	cmp    edx,eax
c0021135:	7d 14                	jge    c002114b <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021137:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002113e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021142:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021145:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021148:	42                   	inc    edx
c0021149:	eb e8                	jmp    c0021133 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002114b:	89 c2                	mov    edx,eax
c002114d:	85 c0                	test   eax,eax
c002114f:	79 02                	jns    c0021153 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021151:	31 d2                	xor    edx,edx
c0021153:	01 c2                	add    edx,eax
c0021155:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021158:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002115f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021163:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021167:	99                   	cdq    
c0021168:	01 c1                	add    ecx,eax
c002116a:	11 d3                	adc    ebx,edx
c002116c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021170:	29 c6                	sub    esi,eax
c0021172:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021176:	19 d7                	sbb    edi,edx
c0021178:	89 34 24             	mov    DWORD PTR [esp],esi
c002117b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002117f:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021184:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021187:	b8 00 00 00 00       	mov    eax,0x0
c002118c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021190:	7d 43                	jge    c00211d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021192:	52                   	push   edx
c0021193:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021197:	50                   	push   eax
c0021198:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002119c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00211a4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211a8:	50                   	push   eax
c00211a9:	e8 db fd ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211ae:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00211b6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00211bb:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00211c3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00211cb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00211d0:	83 c4 10             	add    esp,0x10
c00211d3:	eb aa                	jmp    c002117f <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00211d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00211dc:	74 2a                	je     c0021208 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00211de:	50                   	push   eax
c00211df:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211e3:	50                   	push   eax
c00211e4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00211e8:	56                   	push   esi
c00211e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00211ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00211f1:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00211f5:	51                   	push   ecx
c00211f6:	e8 8e fd ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211fb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00211ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021203:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002120f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021217:	89 18                	mov    DWORD PTR [eax],ebx
c0021219:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002121d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021220:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021223:	31 c0                	xor    eax,eax
c0021225:	eb 05                	jmp    c002122c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021227:	b8 04 00 00 00       	mov    eax,0x4
c002122c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021232:	5b                   	pop    ebx
c0021233:	5e                   	pop    esi
c0021234:	5f                   	pop    edi
c0021235:	5d                   	pop    ebp
c0021236:	c3                   	ret    
c0021237:	90                   	nop

c0021238 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021238:	55                   	push   ebp
c0021239:	57                   	push   edi
c002123a:	56                   	push   esi
c002123b:	53                   	push   ebx
c002123c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021242:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021249:	85 ed                	test   ebp,ebp
c002124b:	0f 84 51 02 00 00    	je     c00214a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021251:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021259:	0f 84 43 02 00 00    	je     c00214a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002125f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021262:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021265:	75 0a                	jne    c0021271 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021267:	b8 07 00 00 00       	mov    eax,0x7
c002126c:	e9 36 02 00 00       	jmp    c00214a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021271:	50                   	push   eax
c0021272:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021276:	50                   	push   eax
c0021277:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002127e:	53                   	push   ebx
c002127f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021282:	c1 e0 0b             	shl    eax,0xb
c0021285:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021288:	c1 e8 0b             	shr    eax,0xb
c002128b:	50                   	push   eax
c002128c:	e8 f8 fc ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021291:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021294:	83 c4 10             	add    esp,0x10
c0021297:	89 c1                	mov    ecx,eax
c0021299:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002129c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00212a2:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00212a5:	84 db                	test   bl,bl
c00212a7:	0f 85 8b 00 00 00    	jne    c0021338 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00212ad:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00212b3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00212b6:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00212bc:	29 c6                	sub    esi,eax
c00212be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00212c2:	89 f3                	mov    ebx,esi
c00212c4:	89 f1                	mov    ecx,esi
c00212c6:	c1 fb 1f             	sar    ebx,0x1f
c00212c9:	01 f0                	add    eax,esi
c00212cb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00212ce:	11 da                	adc    edx,ebx
c00212d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00212d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212d7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00212da:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212dd:	89 d8                	mov    eax,ebx
c00212df:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00212e3:	ba 00 00 00 00       	mov    edx,0x0
c00212e8:	19 f8                	sbb    eax,edi
c00212ea:	b8 00 00 00 00       	mov    eax,0x0
c00212ef:	73 08                	jae    c00212f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00212f1:	89 f0                	mov    eax,esi
c00212f3:	89 fa                	mov    edx,edi
c00212f5:	29 c8                	sub    eax,ecx
c00212f7:	19 da                	sbb    edx,ebx
c00212f9:	89 d7                	mov    edi,edx
c00212fb:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00212fe:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021301:	09 c7                	or     edi,eax
c0021303:	0f 84 5e ff ff ff    	je     c0021267 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021309:	57                   	push   edi
c002130a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002130e:	50                   	push   eax
c002130f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021316:	53                   	push   ebx
c0021317:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002131a:	c1 e0 0b             	shl    eax,0xb
c002131d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021321:	c1 e8 0b             	shr    eax,0xb
c0021324:	50                   	push   eax
c0021325:	e8 5f fc ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002132a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002132d:	83 c4 10             	add    esp,0x10
c0021330:	25 ff 07 00 00       	and    eax,0x7ff
c0021335:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021338:	31 ff                	xor    edi,edi
c002133a:	56                   	push   esi
c002133b:	6a 28                	push   0x28
c002133d:	6a 00                	push   0x0
c002133f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021343:	50                   	push   eax
c0021344:	e8 07 f4 fd ff       	call   c0000750 <memset>
c0021349:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002134c:	25 ff 07 00 00       	and    eax,0x7ff
c0021351:	89 c6                	mov    esi,eax
c0021353:	83 c6 21             	add    esi,0x21
c0021356:	83 d7 00             	adc    edi,0x0
c0021359:	83 c4 10             	add    esp,0x10
c002135c:	31 c9                	xor    ecx,ecx
c002135e:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021365:	83 f9 28             	cmp    ecx,0x28
c0021368:	88 04 24             	mov    BYTE PTR [esp],al
c002136b:	0f 94 c2             	sete   dl
c002136e:	88 d0                	mov    al,dl
c0021370:	ba ff 07 00 00       	mov    edx,0x7ff
c0021375:	39 f2                	cmp    edx,esi
c0021377:	ba 00 00 00 00       	mov    edx,0x0
c002137c:	19 fa                	sbb    edx,edi
c002137e:	0f 92 c2             	setb   dl
c0021381:	09 c2                	or     edx,eax
c0021383:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021387:	0f 94 c0             	sete   al
c002138a:	08 d0                	or     al,dl
c002138c:	75 16                	jne    c00213a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002138e:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021392:	74 10                	je     c00213a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021394:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021397:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002139b:	41                   	inc    ecx
c002139c:	83 c6 01             	add    esi,0x1
c002139f:	83 d7 00             	adc    edi,0x0
c00213a2:	eb ba                	jmp    c002135e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00213a4:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00213ab:	83 ec 0c             	sub    esp,0xc
c00213ae:	8d 74 24 24          	lea    esi,[esp+0x24]
c00213b2:	56                   	push   esi
c00213b3:	e8 b4 f3 fd ff       	call   c000076c <strlen>
c00213b8:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00213bf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213c3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00213cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213ce:	5a                   	pop    edx
c00213cf:	25 ff 07 00 00       	and    eax,0x7ff
c00213d4:	59                   	pop    ecx
c00213d5:	01 f8                	add    eax,edi
c00213d7:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00213dd:	83 e0 02             	and    eax,0x2
c00213e0:	3c 01                	cmp    al,0x1
c00213e2:	19 c0                	sbb    eax,eax
c00213e4:	83 c0 02             	add    eax,0x2
c00213e7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213eb:	56                   	push   esi
c00213ec:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00213f0:	50                   	push   eax
c00213f1:	e8 16 f4 fd ff       	call   c000080c <strcpy>
c00213f6:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00213fa:	83 c4 10             	add    esp,0x10
c00213fd:	84 c0                	test   al,al
c00213ff:	75 21                	jne    c0021422 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021401:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021409:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021411:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021419:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021420:	eb 28                	jmp    c002144a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021422:	fe c8                	dec    al
c0021424:	75 24                	jne    c002144a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021426:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002142e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021436:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002143e:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021445:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002144a:	8d 74 24 40          	lea    esi,[esp+0x40]
c002144e:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021455:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002145c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002145e:	0f b6 f3             	movzx  esi,bl
c0021461:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021468:	31 db                	xor    ebx,ebx
c002146a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021470:	89 df                	mov    edi,ebx
c0021472:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021478:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002147b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002147e:	39 c6                	cmp    esi,eax
c0021480:	19 d7                	sbb    edi,edx
c0021482:	72 10                	jb     c0021494 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021484:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002148b:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021492:	eb 0a                	jmp    c002149e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021494:	29 f0                	sub    eax,esi
c0021496:	19 da                	sbb    edx,ebx
c0021498:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002149b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002149e:	31 c0                	xor    eax,eax
c00214a0:	eb 05                	jmp    c00214a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00214a2:	b8 04 00 00 00       	mov    eax,0x4
c00214a7:	81 c4 5c 09 00 00    	add    esp,0x95c
c00214ad:	5b                   	pop    ebx
c00214ae:	5e                   	pop    esi
c00214af:	5f                   	pop    edi
c00214b0:	5d                   	pop    ebp
c00214b1:	c3                   	ret    

c00214b2 <readRoot(unsigned int*, unsigned int*, char)>:
c00214b2:	57                   	push   edi
c00214b3:	56                   	push   esi
c00214b4:	81 ec 38 08 00 00    	sub    esp,0x838
c00214ba:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00214c2:	50                   	push   eax
c00214c3:	8d 44 24 38          	lea    eax,[esp+0x38]
c00214c7:	50                   	push   eax
c00214c8:	6a 10                	push   0x10
c00214ca:	e8 ba fa ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214cf:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00214d6:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00214da:	b9 22 00 00 00       	mov    ecx,0x22
c00214df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214e1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214ec:	89 10                	mov    DWORD PTR [eax],edx
c00214ee:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00214f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00214f9:	89 10                	mov    DWORD PTR [eax],edx
c00214fb:	81 c4 44 08 00 00    	add    esp,0x844
c0021501:	b0 01                	mov    al,0x1
c0021503:	5e                   	pop    esi
c0021504:	5f                   	pop    edi
c0021505:	c3                   	ret    

c0021506 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021506:	55                   	push   ebp
c0021507:	57                   	push   edi
c0021508:	56                   	push   esi
c0021509:	53                   	push   ebx
c002150a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021510:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021517:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002151e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021522:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021526:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002152a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002152e:	75 03                	jne    c0021533 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021530:	83 c3 02             	add    ebx,0x2
c0021533:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021536:	75 03                	jne    c002153b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021538:	43                   	inc    ebx
c0021539:	eb f8                	jmp    c0021533 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002153b:	51                   	push   ecx
c002153c:	68 00 01 00 00       	push   0x100
c0021541:	6a 00                	push   0x0
c0021543:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021547:	50                   	push   eax
c0021548:	e8 03 f2 fd ff       	call   c0000750 <memset>
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	31 d2                	xor    edx,edx
c0021552:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021555:	84 c0                	test   al,al
c0021557:	74 21                	je     c002157a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021559:	3c 2f                	cmp    al,0x2f
c002155b:	75 0b                	jne    c0021568 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002155d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021561:	bd 01 00 00 00       	mov    ebp,0x1
c0021566:	eb 14                	jmp    c002157c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021568:	8d 48 9f             	lea    ecx,[eax-0x61]
c002156b:	80 f9 19             	cmp    cl,0x19
c002156e:	77 03                	ja     c0021573 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021570:	83 e8 20             	sub    eax,0x20
c0021573:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021577:	42                   	inc    edx
c0021578:	eb d8                	jmp    c0021552 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002157a:	31 ed                	xor    ebp,ebp
c002157c:	83 ec 0c             	sub    esp,0xc
c002157f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021586:	e8 11 e0 fe ff       	call   c000f59c <malloc>
c002158b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021592:	89 c6                	mov    esi,eax
c0021594:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002159a:	c1 ef 0b             	shr    edi,0xb
c002159d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00215a4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00215b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215b4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00215bb:	74 28                	je     c00215e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00215bd:	52                   	push   edx
c00215be:	57                   	push   edi
c00215bf:	50                   	push   eax
c00215c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215c4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00215cb:	e8 b9 f9 ff ff       	call   c0020f89 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215d4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00215db:	05 00 08 00 00       	add    eax,0x800
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	eb cb                	jmp    c00215b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00215e5:	83 ec 0c             	sub    esp,0xc
c00215e8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00215ec:	57                   	push   edi
c00215ed:	e8 7a f1 fd ff       	call   c000076c <strlen>
c00215f2:	50                   	push   eax
c00215f3:	57                   	push   edi
c00215f4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00215fb:	56                   	push   esi
c00215fc:	e8 46 f9 ff ff       	call   c0020f47 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021601:	83 c4 20             	add    esp,0x20
c0021604:	85 c0                	test   eax,eax
c0021606:	75 13                	jne    c002161b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021608:	83 ec 0c             	sub    esp,0xc
c002160b:	56                   	push   esi
c002160c:	e8 9b df fe ff       	call   c000f5ac <free>
c0021611:	83 c4 10             	add    esp,0x10
c0021614:	31 c0                	xor    eax,eax
c0021616:	e9 b3 00 00 00       	jmp    c00216ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002161b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002161f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021623:	c1 e7 08             	shl    edi,0x8
c0021626:	c1 e2 10             	shl    edx,0x10
c0021629:	09 d7                	or     edi,edx
c002162b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002162f:	09 d7                	or     edi,edx
c0021631:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021635:	c1 e2 18             	shl    edx,0x18
c0021638:	09 d7                	or     edi,edx
c002163a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002163e:	89 d1                	mov    ecx,edx
c0021640:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021644:	c1 e1 08             	shl    ecx,0x8
c0021647:	c1 e2 10             	shl    edx,0x10
c002164a:	09 ca                	or     edx,ecx
c002164c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021650:	09 ca                	or     edx,ecx
c0021652:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021656:	c1 e1 18             	shl    ecx,0x18
c0021659:	09 ca                	or     edx,ecx
c002165b:	89 e9                	mov    ecx,ebp
c002165d:	84 c9                	test   cl,cl
c002165f:	74 3c                	je     c002169d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021661:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021665:	83 ec 0c             	sub    esp,0xc
c0021668:	56                   	push   esi
c0021669:	e8 3e df fe ff       	call   c000f5ac <free>
c002166e:	83 c4 0c             	add    esp,0xc
c0021671:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021678:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002167d:	50                   	push   eax
c002167e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021685:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002168c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021690:	52                   	push   edx
c0021691:	57                   	push   edi
c0021692:	53                   	push   ebx
c0021693:	e8 6e fe ff ff       	call   c0021506 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021698:	83 c4 20             	add    esp,0x20
c002169b:	eb 31                	jmp    c00216ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002169d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00216a0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00216a7:	d0 e8                	shr    al,1
c00216a9:	89 3b                	mov    DWORD PTR [ebx],edi
c00216ab:	83 e0 01             	and    eax,0x1
c00216ae:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00216b5:	83 ec 0c             	sub    esp,0xc
c00216b8:	89 13                	mov    DWORD PTR [ebx],edx
c00216ba:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00216c1:	89 03                	mov    DWORD PTR [ebx],eax
c00216c3:	56                   	push   esi
c00216c4:	e8 e3 de fe ff       	call   c000f5ac <free>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	b0 01                	mov    al,0x1
c00216ce:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216d4:	5b                   	pop    ebx
c00216d5:	5e                   	pop    esi
c00216d6:	5f                   	pop    edi
c00216d7:	5d                   	pop    ebp
c00216d8:	c3                   	ret    

c00216d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00216d9:	55                   	push   ebp
c00216da:	57                   	push   edi
c00216db:	56                   	push   esi
c00216dc:	53                   	push   ebx
c00216dd:	83 ec 20             	sub    esp,0x20
c00216e0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00216e4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00216e8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00216ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216f4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00216fc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021701:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021707:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002170d:	57                   	push   edi
c002170e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021712:	50                   	push   eax
c0021713:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021717:	50                   	push   eax
c0021718:	e8 95 fd ff ff       	call   c00214b2 <readRoot(unsigned int*, unsigned int*, char)>
c002171d:	5a                   	pop    edx
c002171e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021722:	e8 45 f0 fd ff       	call   c000076c <strlen>
c0021727:	83 c4 10             	add    esp,0x10
c002172a:	83 f8 03             	cmp    eax,0x3
c002172d:	77 17                	ja     c0021746 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002172f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021733:	89 03                	mov    DWORD PTR [ebx],eax
c0021735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021739:	89 06                	mov    DWORD PTR [esi],eax
c002173b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021742:	b0 01                	mov    al,0x1
c0021744:	eb 19                	jmp    c002175f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021746:	50                   	push   eax
c0021747:	55                   	push   ebp
c0021748:	57                   	push   edi
c0021749:	56                   	push   esi
c002174a:	53                   	push   ebx
c002174b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002174f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021753:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021757:	e8 aa fd ff ff       	call   c0021506 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002175c:	83 c4 20             	add    esp,0x20
c002175f:	83 c4 1c             	add    esp,0x1c
c0021762:	5b                   	pop    ebx
c0021763:	5e                   	pop    esi
c0021764:	5f                   	pop    edi
c0021765:	5d                   	pop    ebp
c0021766:	c3                   	ret    
c0021767:	90                   	nop

c0021768 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021768:	57                   	push   edi
c0021769:	56                   	push   esi
c002176a:	53                   	push   ebx
c002176b:	83 ec 10             	sub    esp,0x10
c002176e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021772:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021776:	85 ff                	test   edi,edi
c0021778:	0f 84 8b 00 00 00    	je     c0021809 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002177e:	85 f6                	test   esi,esi
c0021780:	0f 84 83 00 00 00    	je     c0021809 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021786:	b8 03 00 00 00       	mov    eax,0x3
c002178b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021790:	75 7c                	jne    c002180e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021792:	83 ec 0c             	sub    esp,0xc
c0021795:	6a 1c                	push   0x1c
c0021797:	e8 00 de fe ff       	call   c000f59c <malloc>
c002179c:	89 07                	mov    DWORD PTR [edi],eax
c002179e:	89 c3                	mov    ebx,eax
c00217a0:	58                   	pop    eax
c00217a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217a5:	50                   	push   eax
c00217a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00217a9:	50                   	push   eax
c00217aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217ae:	50                   	push   eax
c00217af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217b3:	50                   	push   eax
c00217b4:	56                   	push   esi
c00217b5:	e8 1f ff ff ff       	call   c00216d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00217ba:	83 c4 20             	add    esp,0x20
c00217bd:	84 c0                	test   al,al
c00217bf:	74 07                	je     c00217c8 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00217c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00217c6:	74 0b                	je     c00217d3 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00217c8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00217cc:	b8 01 00 00 00       	mov    eax,0x1
c00217d1:	eb 3b                	jmp    c002180e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217d7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00217db:	89 03                	mov    DWORD PTR [ebx],eax
c00217dd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00217e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00217ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00217f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021800:	8a 06                	mov    al,BYTE PTR [esi]
c0021802:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021805:	31 c0                	xor    eax,eax
c0021807:	eb 05                	jmp    c002180e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021809:	b8 04 00 00 00       	mov    eax,0x4
c002180e:	83 c4 10             	add    esp,0x10
c0021811:	5b                   	pop    ebx
c0021812:	5e                   	pop    esi
c0021813:	5f                   	pop    edi
c0021814:	c3                   	ret    
c0021815:	90                   	nop

c0021816 <ISO9660::exists(char const*)>:
c0021816:	83 ec 28             	sub    esp,0x28
c0021819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002181d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021821:	52                   	push   edx
c0021822:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021825:	52                   	push   edx
c0021826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002182a:	52                   	push   edx
c002182b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002182f:	52                   	push   edx
c0021830:	50                   	push   eax
c0021831:	e8 a3 fe ff ff       	call   c00216d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021836:	83 c4 3c             	add    esp,0x3c
c0021839:	c3                   	ret    

c002183a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002183a:	56                   	push   esi
c002183b:	53                   	push   ebx
c002183c:	83 ec 14             	sub    esp,0x14
c002183f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021843:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021847:	85 db                	test   ebx,ebx
c0021849:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002184d:	0f 94 c2             	sete   dl
c0021850:	85 f6                	test   esi,esi
c0021852:	0f 94 c0             	sete   al
c0021855:	08 c2                	or     dl,al
c0021857:	75 68                	jne    c00218c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021859:	85 c9                	test   ecx,ecx
c002185b:	74 64                	je     c00218c1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002185d:	83 ec 0c             	sub    esp,0xc
c0021860:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021863:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021867:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002186d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021874:	50                   	push   eax
c0021875:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021878:	50                   	push   eax
c0021879:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002187d:	50                   	push   eax
c002187e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021882:	50                   	push   eax
c0021883:	51                   	push   ecx
c0021884:	e8 50 fe ff ff       	call   c00216d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021889:	83 c4 20             	add    esp,0x20
c002188c:	ba 01 00 00 00       	mov    edx,0x1
c0021891:	84 c0                	test   al,al
c0021893:	74 31                	je     c00218c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021899:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218a0:	89 03                	mov    DWORD PTR [ebx],eax
c00218a2:	ba 00 00 00 00       	mov    edx,0x0
c00218a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218ab:	85 c0                	test   eax,eax
c00218ad:	0f 95 06             	setne  BYTE PTR [esi]
c00218b0:	74 14                	je     c00218c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218b2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00218b8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218bf:	eb 05                	jmp    c00218c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218c1:	ba 04 00 00 00       	mov    edx,0x4
c00218c6:	83 c4 14             	add    esp,0x14
c00218c9:	89 d0                	mov    eax,edx
c00218cb:	5b                   	pop    ebx
c00218cc:	5e                   	pop    esi
c00218cd:	c3                   	ret    

c00218ce <ISO9660::openDir(char const*, void**)>:
c00218ce:	57                   	push   edi
c00218cf:	56                   	push   esi
c00218d0:	53                   	push   ebx
c00218d1:	83 ec 10             	sub    esp,0x10
c00218d4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218dc:	85 ff                	test   edi,edi
c00218de:	74 7b                	je     c002195b <ISO9660::openDir(char const*, void**)+0x8d>
c00218e0:	85 f6                	test   esi,esi
c00218e2:	74 77                	je     c002195b <ISO9660::openDir(char const*, void**)+0x8d>
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	6a 1c                	push   0x1c
c00218e9:	e8 ae dc fe ff       	call   c000f59c <malloc>
c00218ee:	89 07                	mov    DWORD PTR [edi],eax
c00218f0:	89 c3                	mov    ebx,eax
c00218f2:	58                   	pop    eax
c00218f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218f7:	50                   	push   eax
c00218f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00218fb:	50                   	push   eax
c00218fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021900:	50                   	push   eax
c0021901:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021905:	50                   	push   eax
c0021906:	56                   	push   esi
c0021907:	e8 cd fd ff ff       	call   c00216d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002190c:	83 c4 20             	add    esp,0x20
c002190f:	84 c0                	test   al,al
c0021911:	74 07                	je     c002191a <ISO9660::openDir(char const*, void**)+0x4c>
c0021913:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021918:	75 0b                	jne    c0021925 <ISO9660::openDir(char const*, void**)+0x57>
c002191a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002191e:	b8 01 00 00 00       	mov    eax,0x1
c0021923:	eb 3b                	jmp    c0021960 <ISO9660::openDir(char const*, void**)+0x92>
c0021925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021929:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002192d:	89 03                	mov    DWORD PTR [ebx],eax
c002192f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002193a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021941:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021948:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002194b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021952:	8a 06                	mov    al,BYTE PTR [esi]
c0021954:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021957:	31 c0                	xor    eax,eax
c0021959:	eb 05                	jmp    c0021960 <ISO9660::openDir(char const*, void**)+0x92>
c002195b:	b8 04 00 00 00       	mov    eax,0x4
c0021960:	83 c4 10             	add    esp,0x10
c0021963:	5b                   	pop    ebx
c0021964:	5e                   	pop    esi
c0021965:	5f                   	pop    edi
c0021966:	c3                   	ret    
c0021967:	90                   	nop

c0021968 <ISO9660::ISO9660()>:
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002196f:	83 ec 0c             	sub    esp,0xc
c0021972:	50                   	push   eax
c0021973:	e8 b8 0e ff ff       	call   c0012830 <Filesystem::Filesystem()>
c0021978:	83 c4 10             	add    esp,0x10
c002197b:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c0021980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021984:	89 10                	mov    DWORD PTR [eax],edx
c0021986:	90                   	nop
c0021987:	83 c4 0c             	add    esp,0xc
c002198a:	c3                   	ret    
c002198b:	90                   	nop

c002198c <SoundChannel::SoundChannel(int, int, int, int)>:
c002198c:	83 ec 1c             	sub    esp,0x1c
c002198f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021993:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021997:	89 10                	mov    DWORD PTR [eax],edx
c0021999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002199d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00219a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00219ac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219af:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00219b4:	75 23                	jne    c00219d9 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00219b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00219bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219c3:	0f af c2             	imul   eax,edx
c00219c6:	85 c0                	test   eax,eax
c00219c8:	79 03                	jns    c00219cd <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00219ca:	83 c0 03             	add    eax,0x3
c00219cd:	c1 f8 02             	sar    eax,0x2
c00219d0:	05 a0 0f 00 00       	add    eax,0xfa0
c00219d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00219d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219e1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00219e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00219ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00219fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219fe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a01:	c1 e0 02             	shl    eax,0x2
c0021a04:	83 ec 0c             	sub    esp,0xc
c0021a07:	50                   	push   eax
c0021a08:	e8 8f db fe ff       	call   c000f59c <malloc>
c0021a0d:	83 c4 10             	add    esp,0x10
c0021a10:	89 c2                	mov    edx,eax
c0021a12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a16:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021a19:	83 ec 04             	sub    esp,0x4
c0021a1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a20:	50                   	push   eax
c0021a21:	6a 01                	push   0x1
c0021a23:	6a 04                	push   0x4
c0021a25:	e8 3b 71 fe ff       	call   c0008b65 <src_new>
c0021a2a:	83 c4 10             	add    esp,0x10
c0021a2d:	89 c2                	mov    edx,eax
c0021a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a33:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a3a:	85 c0                	test   eax,eax
c0021a3c:	74 10                	je     c0021a4e <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021a3e:	83 ec 0c             	sub    esp,0xc
c0021a41:	68 78 bb 02 c0       	push   0xc002bb78
c0021a46:	e8 14 82 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0021a4b:	83 c4 10             	add    esp,0x10
c0021a4e:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c0021a53:	83 f0 01             	xor    eax,0x1
c0021a56:	84 c0                	test   al,al
c0021a58:	74 57                	je     c0021ab1 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021a5a:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0021a5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a6b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a73:	7f 35                	jg     c0021aaa <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021a75:	83 ec 0c             	sub    esp,0xc
c0021a78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a7c:	e8 de 53 00 00       	call   c0026e5f <__floatsisf>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	8b 15 94 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb94
c0021a8a:	83 ec 08             	sub    esp,0x8
c0021a8d:	52                   	push   edx
c0021a8e:	50                   	push   eax
c0021a8f:	e8 dd 4f 00 00       	call   c0026a71 <__mulsf3>
c0021a94:	83 c4 10             	add    esp,0x10
c0021a97:	89 c2                	mov    edx,eax
c0021a99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a9d:	89 14 85 e0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb20],edx
c0021aa4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021aa8:	eb c1                	jmp    c0021a6b <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021aaa:	c6 05 e0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318e0,0x1
c0021ab1:	90                   	nop
c0021ab2:	83 c4 1c             	add    esp,0x1c
c0021ab5:	c3                   	ret    

c0021ab6 <SoundChannel::~SoundChannel()>:
c0021ab6:	83 ec 0c             	sub    esp,0xc
c0021ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	50                   	push   eax
c0021ac4:	e8 e3 da fe ff       	call   c000f5ac <free>
c0021ac9:	83 c4 10             	add    esp,0x10
c0021acc:	90                   	nop
c0021acd:	83 c4 0c             	add    esp,0xc
c0021ad0:	c3                   	ret    
c0021ad1:	90                   	nop

c0021ad2 <SoundChannel::getSampleRate()>:
c0021ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ad8:	c3                   	ret    
c0021ad9:	90                   	nop

c0021ada <SoundChannel::getBits()>:
c0021ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ae1:	c3                   	ret    

c0021ae2 <SoundChannel::getBufferUsed()>:
c0021ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ae9:	c3                   	ret    

c0021aea <SoundChannel::getBufferSize()>:
c0021aea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021af1:	c3                   	ret    

c0021af2 <SoundChannel::unbuffer(float*, int, int)>:
c0021af2:	56                   	push   esi
c0021af3:	53                   	push   ebx
c0021af4:	83 ec 40             	sub    esp,0x40
c0021af7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021afb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021afe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b02:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021b05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021b09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021b0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021b11:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021b15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021b19:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021b1d:	e8 3d 53 00 00       	call   c0026e5f <__floatsisf>
c0021b22:	5a                   	pop    edx
c0021b23:	89 c6                	mov    esi,eax
c0021b25:	ff 33                	push   DWORD PTR [ebx]
c0021b27:	e8 33 53 00 00       	call   c0026e5f <__floatsisf>
c0021b2c:	59                   	pop    ecx
c0021b2d:	5a                   	pop    edx
c0021b2e:	50                   	push   eax
c0021b2f:	56                   	push   esi
c0021b30:	e8 ff 50 00 00       	call   c0026c34 <__divsf3>
c0021b35:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b38:	e8 f2 65 00 00       	call   c002812f <__extendsfdf2>
c0021b3d:	59                   	pop    ecx
c0021b3e:	5e                   	pop    esi
c0021b3f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021b47:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021b4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b53:	50                   	push   eax
c0021b54:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b57:	e8 fe 6b fe ff       	call   c000875a <src_process>
c0021b5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b60:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b63:	83 c4 0c             	add    esp,0xc
c0021b66:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b69:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b6c:	29 d0                	sub    eax,edx
c0021b6e:	c1 e0 02             	shl    eax,0x2
c0021b71:	50                   	push   eax
c0021b72:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b75:	50                   	push   eax
c0021b76:	51                   	push   ecx
c0021b77:	e8 0c eb fd ff       	call   c0000688 <memmove>
c0021b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b80:	83 c4 44             	add    esp,0x44
c0021b83:	5b                   	pop    ebx
c0021b84:	5e                   	pop    esi
c0021b85:	c3                   	ret    

c0021b86 <SoundChannel::buffer16(short*, int)>:
c0021b86:	55                   	push   ebp
c0021b87:	57                   	push   edi
c0021b88:	56                   	push   esi
c0021b89:	53                   	push   ebx
c0021b8a:	83 ec 1c             	sub    esp,0x1c
c0021b8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021b91:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021b94:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021b97:	0f 84 d2 00 00 00    	je     c0021c6f <SoundChannel::buffer16(short*, int)+0xe9>
c0021b9d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021ba1:	85 ed                	test   ebp,ebp
c0021ba3:	0f 8e c6 00 00 00    	jle    c0021c6f <SoundChannel::buffer16(short*, int)+0xe9>
c0021ba9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021bad:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021bb2:	83 ec 0c             	sub    esp,0xc
c0021bb5:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021bb8:	50                   	push   eax
c0021bb9:	e8 a1 52 00 00       	call   c0026e5f <__floatsisf>
c0021bbe:	59                   	pop    ecx
c0021bbf:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021bc2:	5f                   	pop    edi
c0021bc3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021bc6:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021bc9:	55                   	push   ebp
c0021bca:	50                   	push   eax
c0021bcb:	e8 a1 4e 00 00       	call   c0026a71 <__mulsf3>
c0021bd0:	83 c4 10             	add    esp,0x10
c0021bd3:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021bd6:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021bd9:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021bdc:	0f 84 99 00 00 00    	je     c0021c7b <SoundChannel::buffer16(short*, int)+0xf5>
c0021be2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021be7:	74 78                	je     c0021c61 <SoundChannel::buffer16(short*, int)+0xdb>
c0021be9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021bed:	83 ec 0c             	sub    esp,0xc
c0021bf0:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021bf4:	50                   	push   eax
c0021bf5:	e8 65 52 00 00       	call   c0026e5f <__floatsisf>
c0021bfa:	5f                   	pop    edi
c0021bfb:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021bfe:	5a                   	pop    edx
c0021bff:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c02:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c05:	55                   	push   ebp
c0021c06:	50                   	push   eax
c0021c07:	e8 65 4e 00 00       	call   c0026a71 <__mulsf3>
c0021c0c:	83 c4 10             	add    esp,0x10
c0021c0f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c12:	be 02 00 00 00       	mov    esi,0x2
c0021c17:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c1a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c1d:	74 46                	je     c0021c65 <SoundChannel::buffer16(short*, int)+0xdf>
c0021c1f:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021c23:	eb 36                	jmp    c0021c5b <SoundChannel::buffer16(short*, int)+0xd5>
c0021c25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c29:	83 ec 0c             	sub    esp,0xc
c0021c2c:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021c30:	46                   	inc    esi
c0021c31:	50                   	push   eax
c0021c32:	e8 28 52 00 00       	call   c0026e5f <__floatsisf>
c0021c37:	5a                   	pop    edx
c0021c38:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021c3b:	59                   	pop    ecx
c0021c3c:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021c3f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c46:	50                   	push   eax
c0021c47:	e8 25 4e 00 00       	call   c0026a71 <__mulsf3>
c0021c4c:	83 c4 10             	add    esp,0x10
c0021c4f:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021c53:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c56:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c59:	74 0a                	je     c0021c65 <SoundChannel::buffer16(short*, int)+0xdf>
c0021c5b:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021c5f:	75 c4                	jne    c0021c25 <SoundChannel::buffer16(short*, int)+0x9f>
c0021c61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021c65:	83 c4 1c             	add    esp,0x1c
c0021c68:	89 f0                	mov    eax,esi
c0021c6a:	5b                   	pop    ebx
c0021c6b:	5e                   	pop    esi
c0021c6c:	5f                   	pop    edi
c0021c6d:	5d                   	pop    ebp
c0021c6e:	c3                   	ret    
c0021c6f:	83 c4 1c             	add    esp,0x1c
c0021c72:	31 f6                	xor    esi,esi
c0021c74:	5b                   	pop    ebx
c0021c75:	89 f0                	mov    eax,esi
c0021c77:	5e                   	pop    esi
c0021c78:	5f                   	pop    edi
c0021c79:	5d                   	pop    ebp
c0021c7a:	c3                   	ret    
c0021c7b:	be 01 00 00 00       	mov    esi,0x1
c0021c80:	eb e3                	jmp    c0021c65 <SoundChannel::buffer16(short*, int)+0xdf>

c0021c82 <SoundChannel::buffer8(unsigned char*, int)>:
c0021c82:	55                   	push   ebp
c0021c83:	57                   	push   edi
c0021c84:	56                   	push   esi
c0021c85:	53                   	push   ebx
c0021c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c8a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021c8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021c91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021c95:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021c98:	74 7a                	je     c0021d14 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021c9a:	85 ff                	test   edi,edi
c0021c9c:	7e 76                	jle    c0021d14 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021c9e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021ca2:	8d 70 01             	lea    esi,[eax+0x1]
c0021ca5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021ca8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cab:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021cb2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021cb5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021cb8:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021cbb:	74 5e                	je     c0021d1b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021cbd:	83 ff 01             	cmp    edi,0x1
c0021cc0:	74 4b                	je     c0021d0d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021cc2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021cc6:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cc9:	8d 70 01             	lea    esi,[eax+0x1]
c0021ccc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ccf:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021cd6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021cd9:	b8 02 00 00 00       	mov    eax,0x2
c0021cde:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ce1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ce4:	75 23                	jne    c0021d09 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ce6:	eb 27                	jmp    c0021d0f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ce8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ced:	8d 71 01             	lea    esi,[ecx+0x1]
c0021cf0:	40                   	inc    eax
c0021cf1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cf4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021cf7:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021cfe:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021d01:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d04:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d07:	74 06                	je     c0021d0f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d09:	39 c7                	cmp    edi,eax
c0021d0b:	75 db                	jne    c0021ce8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021d0d:	89 f8                	mov    eax,edi
c0021d0f:	5b                   	pop    ebx
c0021d10:	5e                   	pop    esi
c0021d11:	5f                   	pop    edi
c0021d12:	5d                   	pop    ebp
c0021d13:	c3                   	ret    
c0021d14:	5b                   	pop    ebx
c0021d15:	31 c0                	xor    eax,eax
c0021d17:	5e                   	pop    esi
c0021d18:	5f                   	pop    edi
c0021d19:	5d                   	pop    ebp
c0021d1a:	c3                   	ret    
c0021d1b:	b8 01 00 00 00       	mov    eax,0x1
c0021d20:	eb ed                	jmp    c0021d0f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d22 <SoundDevice::SoundDevice(char const*)>:
c0021d22:	83 ec 1c             	sub    esp,0x1c
c0021d25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d29:	83 ec 08             	sub    esp,0x8
c0021d2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021d30:	50                   	push   eax
c0021d31:	e8 2c 1e ff ff       	call   c0013b62 <Device::Device(char const*)>
c0021d36:	83 c4 10             	add    esp,0x10
c0021d39:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0021d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d42:	89 10                	mov    DWORD PTR [eax],edx
c0021d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d48:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021d60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d68:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021d6d:	7f 19                	jg     c0021d88 <SoundDevice::SoundDevice(char const*)+0x66>
c0021d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d77:	83 c2 54             	add    edx,0x54
c0021d7a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021d82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d86:	eb e0                	jmp    c0021d68 <SoundDevice::SoundDevice(char const*)+0x46>
c0021d88:	90                   	nop
c0021d89:	83 c4 1c             	add    esp,0x1c
c0021d8c:	c3                   	ret    
c0021d8d:	90                   	nop

c0021d8e <SoundDevice::~SoundDevice()>:
c0021d8e:	53                   	push   ebx
c0021d8f:	83 ec 18             	sub    esp,0x18
c0021d92:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0021d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d9b:	89 10                	mov    DWORD PTR [eax],edx
c0021d9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021da5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021daa:	7f 46                	jg     c0021df2 <SoundDevice::~SoundDevice()+0x64>
c0021dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021db0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021db4:	83 c2 54             	add    edx,0x54
c0021db7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021dbb:	85 c0                	test   eax,eax
c0021dbd:	74 2d                	je     c0021dec <SoundDevice::~SoundDevice()+0x5e>
c0021dbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dc7:	83 c2 54             	add    edx,0x54
c0021dca:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021dce:	85 db                	test   ebx,ebx
c0021dd0:	74 1a                	je     c0021dec <SoundDevice::~SoundDevice()+0x5e>
c0021dd2:	83 ec 0c             	sub    esp,0xc
c0021dd5:	53                   	push   ebx
c0021dd6:	e8 db fc ff ff       	call   c0021ab6 <SoundChannel::~SoundChannel()>
c0021ddb:	83 c4 10             	add    esp,0x10
c0021dde:	83 ec 08             	sub    esp,0x8
c0021de1:	6a 2c                	push   0x2c
c0021de3:	53                   	push   ebx
c0021de4:	e8 64 06 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021df0:	eb b3                	jmp    c0021da5 <SoundDevice::~SoundDevice()+0x17>
c0021df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021df6:	83 ec 0c             	sub    esp,0xc
c0021df9:	50                   	push   eax
c0021dfa:	e8 2d 1a ff ff       	call   c001382c <Device::~Device()>
c0021dff:	83 c4 10             	add    esp,0x10
c0021e02:	90                   	nop
c0021e03:	83 c4 18             	add    esp,0x18
c0021e06:	5b                   	pop    ebx
c0021e07:	c3                   	ret    

c0021e08 <SoundDevice::~SoundDevice()>:
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	83 ec 0c             	sub    esp,0xc
c0021e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e12:	e8 77 ff ff ff       	call   c0021d8e <SoundDevice::~SoundDevice()>
c0021e17:	83 c4 10             	add    esp,0x10
c0021e1a:	83 ec 08             	sub    esp,0x8
c0021e1d:	68 e4 01 00 00       	push   0x1e4
c0021e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e26:	e8 22 06 ff ff       	call   c001244d <operator delete(void*, unsigned long)>
c0021e2b:	83 c4 10             	add    esp,0x10
c0021e2e:	83 c4 0c             	add    esp,0xc
c0021e31:	c3                   	ret    

c0021e32 <SoundDevice::getFreeChannelNum()>:
c0021e32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e36:	31 c0                	xor    eax,eax
c0021e38:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021e40:	74 09                	je     c0021e4b <SoundDevice::getFreeChannelNum()+0x19>
c0021e42:	40                   	inc    eax
c0021e43:	83 f8 20             	cmp    eax,0x20
c0021e46:	75 f0                	jne    c0021e38 <SoundDevice::getFreeChannelNum()+0x6>
c0021e48:	83 c8 ff             	or     eax,0xffffffff
c0021e4b:	c3                   	ret    

c0021e4c <SoundDevice::addChannel(SoundChannel*)>:
c0021e4c:	56                   	push   esi
c0021e4d:	53                   	push   ebx
c0021e4e:	51                   	push   ecx
c0021e4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e57:	53                   	push   ebx
c0021e58:	e8 d5 ff ff ff       	call   c0021e32 <SoundDevice::getFreeChannelNum()>
c0021e5d:	5a                   	pop    edx
c0021e5e:	83 f8 ff             	cmp    eax,0xffffffff
c0021e61:	74 51                	je     c0021eb4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e63:	85 f6                	test   esi,esi
c0021e65:	74 4d                	je     c0021eb4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e67:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021e6e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021e75:	75 30                	jne    c0021ea7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021e77:	83 ec 0c             	sub    esp,0xc
c0021e7a:	56                   	push   esi
c0021e7b:	e8 52 fc ff ff       	call   c0021ad2 <SoundChannel::getSampleRate()>
c0021e80:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021e86:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e89:	e8 4c fc ff ff       	call   c0021ada <SoundChannel::getBits()>
c0021e8e:	83 c4 0c             	add    esp,0xc
c0021e91:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021e97:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021e99:	50                   	push   eax
c0021e9a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021ea0:	53                   	push   ebx
c0021ea1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021ea4:	83 c4 10             	add    esp,0x10
c0021ea7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021ead:	b8 01 00 00 00       	mov    eax,0x1
c0021eb2:	eb 03                	jmp    c0021eb7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021eb4:	83 c8 ff             	or     eax,0xffffffff
c0021eb7:	5a                   	pop    edx
c0021eb8:	5b                   	pop    ebx
c0021eb9:	5e                   	pop    esi
c0021eba:	c3                   	ret    
c0021ebb:	90                   	nop

c0021ebc <SoundDevice::removeChannel(int)>:
c0021ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec4:	83 fa 1f             	cmp    edx,0x1f
c0021ec7:	77 23                	ja     c0021eec <SoundDevice::removeChannel(int)+0x30>
c0021ec9:	8d 14 90             	lea    edx,[eax+edx*4]
c0021ecc:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021ed3:	74 17                	je     c0021eec <SoundDevice::removeChannel(int)+0x30>
c0021ed5:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021edf:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021ee5:	75 05                	jne    c0021eec <SoundDevice::removeChannel(int)+0x30>
c0021ee7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee9:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021eec:	c3                   	ret    
c0021eed:	90                   	nop

c0021eee <SoundDevice::floatTo16(float*, short*, int)>:
c0021eee:	57                   	push   edi
c0021eef:	56                   	push   esi
c0021ef0:	53                   	push   ebx
c0021ef1:	31 db                	xor    ebx,ebx
c0021ef3:	83 ec 10             	sub    esp,0x10
c0021ef6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021efa:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021efe:	0f 8d d0 00 00 00    	jge    c0021fd4 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021f04:	83 ec 0c             	sub    esp,0xc
c0021f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021f0e:	e8 1c 62 00 00       	call   c002812f <__extendsfdf2>
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f1e:	68 00 00 f0 3f       	push   0x3ff00000
c0021f23:	6a 00                	push   0x0
c0021f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f2d:	e8 89 51 00 00       	call   c00270bb <__adddf3>
c0021f32:	83 c4 10             	add    esp,0x10
c0021f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f3d:	68 00 00 e0 3f       	push   0x3fe00000
c0021f42:	6a 00                	push   0x0
c0021f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f4c:	e8 e7 57 00 00       	call   c0027738 <__muldf3>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f5c:	68 c0 ff df 40       	push   0x40dfffc0
c0021f61:	6a 00                	push   0x0
c0021f63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f6b:	e8 c8 57 00 00       	call   c0027738 <__muldf3>
c0021f70:	59                   	pop    ecx
c0021f71:	5f                   	pop    edi
c0021f72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021f76:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021f7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f82:	e8 84 60 00 00       	call   c002800b <__truncdfsf2>
c0021f87:	5a                   	pop    edx
c0021f88:	89 c7                	mov    edi,eax
c0021f8a:	59                   	pop    ecx
c0021f8b:	68 00 fe ff 46       	push   0x46fffe00
c0021f90:	50                   	push   eax
c0021f91:	e8 1f 51 00 00       	call   c00270b5 <__gesf2>
c0021f96:	83 c4 10             	add    esp,0x10
c0021f99:	85 c0                	test   eax,eax
c0021f9b:	78 08                	js     c0021fa5 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0021f9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0021fa3:	eb 29                	jmp    c0021fce <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fa5:	50                   	push   eax
c0021fa6:	50                   	push   eax
c0021fa7:	6a 00                	push   0x0
c0021fa9:	57                   	push   edi
c0021faa:	e8 0a 51 00 00       	call   c00270b9 <__lesf2>
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	85 c0                	test   eax,eax
c0021fb4:	7f 08                	jg     c0021fbe <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0021fb6:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0021fbc:	eb 10                	jmp    c0021fce <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fbe:	83 ec 0c             	sub    esp,0xc
c0021fc1:	57                   	push   edi
c0021fc2:	e8 05 62 00 00       	call   c00281cc <lrintf>
c0021fc7:	83 c4 10             	add    esp,0x10
c0021fca:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0021fce:	43                   	inc    ebx
c0021fcf:	e9 26 ff ff ff       	jmp    c0021efa <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0021fd4:	83 c4 10             	add    esp,0x10
c0021fd7:	5b                   	pop    ebx
c0021fd8:	5e                   	pop    esi
c0021fd9:	5f                   	pop    edi
c0021fda:	c3                   	ret    
c0021fdb:	90                   	nop

c0021fdc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021fdc:	57                   	push   edi
c0021fdd:	56                   	push   esi
c0021fde:	53                   	push   ebx
c0021fdf:	31 db                	xor    ebx,ebx
c0021fe1:	83 ec 10             	sub    esp,0x10
c0021fe4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fe8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fec:	0f 8d cb 00 00 00    	jge    c00220bd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021ff2:	83 ec 0c             	sub    esp,0xc
c0021ff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ff9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021ffc:	e8 2e 61 00 00       	call   c002812f <__extendsfdf2>
c0022001:	83 c4 10             	add    esp,0x10
c0022004:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022008:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002200c:	68 00 00 f0 3f       	push   0x3ff00000
c0022011:	6a 00                	push   0x0
c0022013:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002201b:	e8 9b 50 00 00       	call   c00270bb <__adddf3>
c0022020:	83 c4 10             	add    esp,0x10
c0022023:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022027:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002202b:	68 00 00 e0 3f       	push   0x3fe00000
c0022030:	6a 00                	push   0x0
c0022032:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022036:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203a:	e8 f9 56 00 00       	call   c0027738 <__muldf3>
c002203f:	83 c4 10             	add    esp,0x10
c0022042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022046:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002204a:	68 00 00 60 40       	push   0x40600000
c002204f:	6a 00                	push   0x0
c0022051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022055:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022059:	e8 da 56 00 00       	call   c0027738 <__muldf3>
c002205e:	59                   	pop    ecx
c002205f:	5f                   	pop    edi
c0022060:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022064:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022068:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002206c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022070:	e8 96 5f 00 00       	call   c002800b <__truncdfsf2>
c0022075:	5a                   	pop    edx
c0022076:	89 c7                	mov    edi,eax
c0022078:	59                   	pop    ecx
c0022079:	68 00 00 fe 42       	push   0x42fe0000
c002207e:	50                   	push   eax
c002207f:	e8 31 50 00 00       	call   c00270b5 <__gesf2>
c0022084:	83 c4 10             	add    esp,0x10
c0022087:	85 c0                	test   eax,eax
c0022089:	78 06                	js     c0022091 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002208b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002208f:	eb 26                	jmp    c00220b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022091:	50                   	push   eax
c0022092:	50                   	push   eax
c0022093:	6a 00                	push   0x0
c0022095:	57                   	push   edi
c0022096:	e8 1e 50 00 00       	call   c00270b9 <__lesf2>
c002209b:	83 c4 10             	add    esp,0x10
c002209e:	85 c0                	test   eax,eax
c00220a0:	7f 06                	jg     c00220a8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00220a2:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00220a6:	eb 0f                	jmp    c00220b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00220a8:	83 ec 0c             	sub    esp,0xc
c00220ab:	57                   	push   edi
c00220ac:	e8 1b 61 00 00       	call   c00281cc <lrintf>
c00220b1:	83 c4 10             	add    esp,0x10
c00220b4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00220b7:	43                   	inc    ebx
c00220b8:	e9 2b ff ff ff       	jmp    c0021fe8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00220bd:	83 c4 10             	add    esp,0x10
c00220c0:	5b                   	pop    ebx
c00220c1:	5e                   	pop    esi
c00220c2:	5f                   	pop    edi
c00220c3:	c3                   	ret    

c00220c4 <SoundDevice::getAudio(int, float*, float*)>:
c00220c4:	55                   	push   ebp
c00220c5:	31 ed                	xor    ebp,ebp
c00220c7:	57                   	push   edi
c00220c8:	56                   	push   esi
c00220c9:	31 f6                	xor    esi,esi
c00220cb:	53                   	push   ebx
c00220cc:	83 ec 20             	sub    esp,0x20
c00220cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00220d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00220d7:	c1 e0 02             	shl    eax,0x2
c00220da:	50                   	push   eax
c00220db:	6a 00                	push   0x0
c00220dd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00220e1:	e8 6a e6 fd ff       	call   c0000750 <memset>
c00220e6:	83 c4 10             	add    esp,0x10
c00220e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220f1:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00220f8:	85 c9                	test   ecx,ecx
c00220fa:	74 52                	je     c002214e <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00220fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022100:	99                   	cdq    
c0022101:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022107:	50                   	push   eax
c0022108:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002210e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022112:	51                   	push   ecx
c0022113:	e8 da f9 ff ff       	call   c0021af2 <SoundChannel::unbuffer(float*, int, int)>
c0022118:	31 d2                	xor    edx,edx
c002211a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002211e:	83 c4 10             	add    esp,0x10
c0022121:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022125:	7d 1e                	jge    c0022145 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022127:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002212b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002212f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022132:	89 cf                	mov    edi,ecx
c0022134:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002213a:	0f af ca             	imul   ecx,edx
c002213d:	42                   	inc    edx
c002213e:	01 e9                	add    ecx,ebp
c0022140:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022143:	eb dc                	jmp    c0022121 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022145:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022149:	45                   	inc    ebp
c002214a:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002214e:	46                   	inc    esi
c002214f:	83 fe 20             	cmp    esi,0x20
c0022152:	75 9d                	jne    c00220f1 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022158:	83 c4 1c             	add    esp,0x1c
c002215b:	5b                   	pop    ebx
c002215c:	5e                   	pop    esi
c002215d:	5f                   	pop    edi
c002215e:	5d                   	pop    ebp
c002215f:	c3                   	ret    

c0022160 <PCI::open(int, int, void*)>:
c0022160:	83 ec 18             	sub    esp,0x18
c0022163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022167:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002216b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022171:	8b 10                	mov    edx,DWORD PTR [eax]
c0022173:	50                   	push   eax
c0022174:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022177:	31 c0                	xor    eax,eax
c0022179:	83 c4 1c             	add    esp,0x1c
c002217c:	c3                   	ret    
c002217d:	90                   	nop

c002217e <PCI::close(int, int, void*)>:
c002217e:	31 c0                	xor    eax,eax
c0022180:	c3                   	ret    
c0022181:	90                   	nop

c0022182 <PCI::PCI()>:
c0022182:	83 ec 0c             	sub    esp,0xc
c0022185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022189:	83 ec 08             	sub    esp,0x8
c002218c:	68 d0 bb 02 c0       	push   0xc002bbd0
c0022191:	50                   	push   eax
c0022192:	e8 2f 10 ff ff       	call   c00131c6 <Bus::Bus(char const*)>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c002219f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a3:	89 10                	mov    DWORD PTR [eax],edx
c00221a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00221b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b7:	a3 e4 18 03 c0       	mov    ds:0xc00318e4,eax
c00221bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221c6:	0f b6 d0             	movzx  edx,al
c00221c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00221d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221de:	0f b6 d0             	movzx  edx,al
c00221e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00221ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221f4:	8d 50 01             	lea    edx,[eax+0x1]
c00221f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221fb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022201:	0f b6 d0             	movzx  edx,al
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002220c:	83 c9 c0             	or     ecx,0xffffffc0
c002220f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022213:	90                   	nop
c0022214:	83 c4 0c             	add    esp,0xc
c0022217:	c3                   	ret    

c0022218 <PCI::readBAR8(unsigned int, int)>:
c0022218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002221c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022220:	f6 c2 01             	test   dl,0x1
c0022223:	74 07                	je     c002222c <PCI::readBAR8(unsigned int, int)+0x14>
c0022225:	83 e2 fc             	and    edx,0xfffffffc
c0022228:	01 c2                	add    edx,eax
c002222a:	ec                   	in     al,dx
c002222b:	c3                   	ret    
c002222c:	83 e2 f0             	and    edx,0xfffffff0
c002222f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022232:	c3                   	ret    
c0022233:	90                   	nop

c0022234 <PCI::readBAR16(unsigned int, int)>:
c0022234:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022238:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002223c:	f6 c2 01             	test   dl,0x1
c002223f:	74 08                	je     c0022249 <PCI::readBAR16(unsigned int, int)+0x15>
c0022241:	83 e2 fc             	and    edx,0xfffffffc
c0022244:	01 c2                	add    edx,eax
c0022246:	66 ed                	in     ax,dx
c0022248:	c3                   	ret    
c0022249:	83 e2 f0             	and    edx,0xfffffff0
c002224c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022250:	c3                   	ret    
c0022251:	90                   	nop

c0022252 <PCI::readBAR32(unsigned int, int)>:
c0022252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002225a:	f6 c2 01             	test   dl,0x1
c002225d:	74 07                	je     c0022266 <PCI::readBAR32(unsigned int, int)+0x14>
c002225f:	83 e2 fc             	and    edx,0xfffffffc
c0022262:	01 c2                	add    edx,eax
c0022264:	ed                   	in     eax,dx
c0022265:	c3                   	ret    
c0022266:	83 e2 f0             	and    edx,0xfffffff0
c0022269:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002226c:	c3                   	ret    
c002226d:	90                   	nop

c002226e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022272:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022276:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002227a:	f6 c2 01             	test   dl,0x1
c002227d:	74 07                	je     c0022286 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002227f:	83 e2 fc             	and    edx,0xfffffffc
c0022282:	01 ca                	add    edx,ecx
c0022284:	ee                   	out    dx,al
c0022285:	c3                   	ret    
c0022286:	83 e2 f0             	and    edx,0xfffffff0
c0022289:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002228c:	c3                   	ret    
c002228d:	90                   	nop

c002228e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002228e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022296:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002229a:	f6 c2 01             	test   dl,0x1
c002229d:	74 08                	je     c00222a7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002229f:	83 e2 fc             	and    edx,0xfffffffc
c00222a2:	01 ca                	add    edx,ecx
c00222a4:	66 ef                	out    dx,ax
c00222a6:	c3                   	ret    
c00222a7:	83 e2 f0             	and    edx,0xfffffff0
c00222aa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00222ae:	c3                   	ret    
c00222af:	90                   	nop

c00222b0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00222b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222bc:	f6 c2 01             	test   dl,0x1
c00222bf:	74 07                	je     c00222c8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00222c1:	83 e2 fc             	and    edx,0xfffffffc
c00222c4:	01 ca                	add    edx,ecx
c00222c6:	ef                   	out    dx,eax
c00222c7:	c3                   	ret    
c00222c8:	83 e2 f0             	and    edx,0xfffffff0
c00222cb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00222ce:	c3                   	ret    
c00222cf:	90                   	nop

c00222d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00222d0:	55                   	push   ebp
c00222d1:	57                   	push   edi
c00222d2:	56                   	push   esi
c00222d3:	53                   	push   ebx
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00222db:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00222df:	89 f0                	mov    eax,esi
c00222e1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00222e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00222e9:	3c 07                	cmp    al,0x7
c00222eb:	76 10                	jbe    c00222fd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00222ed:	83 ec 0c             	sub    esp,0xc
c00222f0:	68 d8 bb 02 c0       	push   0xc002bbd8
c00222f5:	e8 65 79 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00222fa:	83 c4 10             	add    esp,0x10
c00222fd:	80 fb 0f             	cmp    bl,0xf
c0022300:	76 10                	jbe    c0022312 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022302:	83 ec 0c             	sub    esp,0xc
c0022305:	68 08 bc 02 c0       	push   0xc002bc08
c002230a:	e8 50 79 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	8d 04 36             	lea    eax,[esi+esi*1]
c0022315:	ba f8 0c 00 00       	mov    edx,0xcf8
c002231a:	83 c8 f0             	or     eax,0xfffffff0
c002231d:	ee                   	out    dx,al
c002231e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022323:	89 e8                	mov    eax,ebp
c0022325:	ee                   	out    dx,al
c0022326:	83 c4 0c             	add    esp,0xc
c0022329:	89 d8                	mov    eax,ebx
c002232b:	66 81 e7 fc 00       	and    di,0xfc
c0022330:	5b                   	pop    ebx
c0022331:	c1 e0 08             	shl    eax,0x8
c0022334:	5e                   	pop    esi
c0022335:	09 f8                	or     eax,edi
c0022337:	5f                   	pop    edi
c0022338:	66 0d 00 c0          	or     ax,0xc000
c002233c:	5d                   	pop    ebp
c002233d:	c3                   	ret    

c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002233e:	57                   	push   edi
c002233f:	56                   	push   esi
c0022340:	53                   	push   ebx
c0022341:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022345:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022349:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002234f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022357:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002235b:	83 ff 01             	cmp    edi,0x1
c002235e:	75 3e                	jne    c002239e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022360:	89 de                	mov    esi,ebx
c0022362:	0f b6 c0             	movzx  eax,al
c0022365:	81 e6 fc 00 00 00    	and    esi,0xfc
c002236b:	c1 e0 10             	shl    eax,0x10
c002236e:	0f b6 c9             	movzx  ecx,cl
c0022371:	09 f0                	or     eax,esi
c0022373:	c1 e1 08             	shl    ecx,0x8
c0022376:	0f b6 d2             	movzx  edx,dl
c0022379:	09 c8                	or     eax,ecx
c002237b:	c1 e2 0b             	shl    edx,0xb
c002237e:	09 d0                	or     eax,edx
c0022380:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022385:	0d 00 00 00 80       	or     eax,0x80000000
c002238a:	ef                   	out    dx,eax
c002238b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022390:	ed                   	in     eax,dx
c0022391:	83 e3 02             	and    ebx,0x2
c0022394:	0f b6 cb             	movzx  ecx,bl
c0022397:	c1 e1 03             	shl    ecx,0x3
c002239a:	d3 e8                	shr    eax,cl
c002239c:	eb 43                	jmp    c00223e1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002239e:	83 ff 02             	cmp    edi,0x2
c00223a1:	75 2c                	jne    c00223cf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00223a3:	83 ec 0c             	sub    esp,0xc
c00223a6:	0f b6 c9             	movzx  ecx,cl
c00223a9:	0f b6 d2             	movzx  edx,dl
c00223ac:	0f b6 fb             	movzx  edi,bl
c00223af:	0f b6 c0             	movzx  eax,al
c00223b2:	57                   	push   edi
c00223b3:	51                   	push   ecx
c00223b4:	52                   	push   edx
c00223b5:	50                   	push   eax
c00223b6:	56                   	push   esi
c00223b7:	e8 14 ff ff ff       	call   c00222d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223bc:	89 c2                	mov    edx,eax
c00223be:	ed                   	in     eax,dx
c00223bf:	83 e3 02             	and    ebx,0x2
c00223c2:	83 c4 20             	add    esp,0x20
c00223c5:	0f b6 cb             	movzx  ecx,bl
c00223c8:	c1 e1 03             	shl    ecx,0x3
c00223cb:	d3 e8                	shr    eax,cl
c00223cd:	eb 12                	jmp    c00223e1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00223cf:	83 ec 0c             	sub    esp,0xc
c00223d2:	68 38 bc 02 c0       	push   0xc002bc38
c00223d7:	e8 83 78 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00223dc:	83 c4 10             	add    esp,0x10
c00223df:	31 c0                	xor    eax,eax
c00223e1:	5b                   	pop    ebx
c00223e2:	5e                   	pop    esi
c00223e3:	5f                   	pop    edi
c00223e4:	c3                   	ret    
c00223e5:	90                   	nop

c00223e6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00223e6:	83 ec 18             	sub    esp,0x18
c00223e9:	6a 00                	push   0x0
c00223eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223f0:	50                   	push   eax
c00223f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223f6:	50                   	push   eax
c00223f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223fc:	50                   	push   eax
c00223fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022401:	e8 38 ff ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022406:	83 c4 2c             	add    esp,0x2c
c0022409:	c3                   	ret    

c002240a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002240a:	83 ec 18             	sub    esp,0x18
c002240d:	6a 0e                	push   0xe
c002240f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022414:	50                   	push   eax
c0022415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002241a:	50                   	push   eax
c002241b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022420:	50                   	push   eax
c0022421:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022425:	e8 14 ff ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002242a:	83 c4 2c             	add    esp,0x2c
c002242d:	0f b6 c0             	movzx  eax,al
c0022430:	c3                   	ret    
c0022431:	90                   	nop

c0022432 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022432:	55                   	push   ebp
c0022433:	57                   	push   edi
c0022434:	56                   	push   esi
c0022435:	53                   	push   ebx
c0022436:	83 ec 18             	sub    esp,0x18
c0022439:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002243e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022443:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022448:	6a 0a                	push   0xa
c002244a:	56                   	push   esi
c002244b:	55                   	push   ebp
c002244c:	57                   	push   edi
c002244d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022451:	e8 e8 fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022456:	83 c4 14             	add    esp,0x14
c0022459:	89 c3                	mov    ebx,eax
c002245b:	6a 0a                	push   0xa
c002245d:	0f b6 db             	movzx  ebx,bl
c0022460:	56                   	push   esi
c0022461:	55                   	push   ebp
c0022462:	57                   	push   edi
c0022463:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022467:	e8 d2 fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002246c:	83 c4 2c             	add    esp,0x2c
c002246f:	25 00 ff 00 00       	and    eax,0xff00
c0022474:	09 d8                	or     eax,ebx
c0022476:	5b                   	pop    ebx
c0022477:	5e                   	pop    esi
c0022478:	5f                   	pop    edi
c0022479:	5d                   	pop    ebp
c002247a:	c3                   	ret    
c002247b:	90                   	nop

c002247c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002247c:	83 ec 18             	sub    esp,0x18
c002247f:	6a 08                	push   0x8
c0022481:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022486:	50                   	push   eax
c0022487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002248c:	50                   	push   eax
c002248d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022492:	50                   	push   eax
c0022493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022497:	e8 a2 fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002249c:	83 c4 2c             	add    esp,0x2c
c002249f:	0f b6 c4             	movzx  eax,ah
c00224a2:	c3                   	ret    
c00224a3:	90                   	nop

c00224a4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00224a4:	83 ec 18             	sub    esp,0x18
c00224a7:	6a 08                	push   0x8
c00224a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ae:	50                   	push   eax
c00224af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224b4:	50                   	push   eax
c00224b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ba:	50                   	push   eax
c00224bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224bf:	e8 7a fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224c4:	83 c4 2c             	add    esp,0x2c
c00224c7:	c3                   	ret    

c00224c8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00224c8:	83 ec 18             	sub    esp,0x18
c00224cb:	6a 3c                	push   0x3c
c00224cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224d2:	50                   	push   eax
c00224d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224d8:	50                   	push   eax
c00224d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224de:	50                   	push   eax
c00224df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224e3:	e8 56 fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224e8:	83 c4 2c             	add    esp,0x2c
c00224eb:	c3                   	ret    

c00224ec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00224ec:	83 ec 18             	sub    esp,0x18
c00224ef:	6a 18                	push   0x18
c00224f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f6:	50                   	push   eax
c00224f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224fc:	50                   	push   eax
c00224fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022502:	50                   	push   eax
c0022503:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022507:	e8 32 fe ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002250c:	83 c4 2c             	add    esp,0x2c
c002250f:	0f b6 c4             	movzx  eax,ah
c0022512:	c3                   	ret    
c0022513:	90                   	nop

c0022514 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022514:	55                   	push   ebp
c0022515:	57                   	push   edi
c0022516:	56                   	push   esi
c0022517:	53                   	push   ebx
c0022518:	83 ec 28             	sub    esp,0x28
c002251b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002251f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022524:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022529:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002252e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022535:	8d 43 12             	lea    eax,[ebx+0x12]
c0022538:	83 c3 10             	add    ebx,0x10
c002253b:	0f b6 c0             	movzx  eax,al
c002253e:	0f b6 db             	movzx  ebx,bl
c0022541:	50                   	push   eax
c0022542:	51                   	push   ecx
c0022543:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022547:	57                   	push   edi
c0022548:	55                   	push   ebp
c0022549:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002254d:	e8 ec fd ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022552:	83 c4 14             	add    esp,0x14
c0022555:	89 c6                	mov    esi,eax
c0022557:	53                   	push   ebx
c0022558:	c1 e6 10             	shl    esi,0x10
c002255b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002255f:	51                   	push   ecx
c0022560:	57                   	push   edi
c0022561:	55                   	push   ebp
c0022562:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022566:	e8 d3 fd ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002256b:	83 c4 3c             	add    esp,0x3c
c002256e:	0f b7 c0             	movzx  eax,ax
c0022571:	5b                   	pop    ebx
c0022572:	09 f0                	or     eax,esi
c0022574:	5e                   	pop    esi
c0022575:	5f                   	pop    edi
c0022576:	5d                   	pop    ebp
c0022577:	c3                   	ret    

c0022578 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022578:	55                   	push   ebp
c0022579:	57                   	push   edi
c002257a:	56                   	push   esi
c002257b:	53                   	push   ebx
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022583:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022587:	89 f5                	mov    ebp,esi
c0022589:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002258f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022593:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022597:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002259b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002259f:	83 f9 01             	cmp    ecx,0x1
c00225a2:	75 5d                	jne    c0022601 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00225a4:	0f b6 c8             	movzx  ecx,al
c00225a7:	0f b6 d2             	movzx  edx,dl
c00225aa:	c1 e1 10             	shl    ecx,0x10
c00225ad:	c1 e2 0b             	shl    edx,0xb
c00225b0:	89 f0                	mov    eax,esi
c00225b2:	25 fc 00 00 00       	and    eax,0xfc
c00225b7:	09 c1                	or     ecx,eax
c00225b9:	89 e8                	mov    eax,ebp
c00225bb:	0f b6 c0             	movzx  eax,al
c00225be:	c1 e0 08             	shl    eax,0x8
c00225c1:	09 c1                	or     ecx,eax
c00225c3:	09 d1                	or     ecx,edx
c00225c5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225ca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00225d0:	89 c8                	mov    eax,ecx
c00225d2:	ef                   	out    dx,eax
c00225d3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225d8:	ed                   	in     eax,dx
c00225d9:	0f b7 db             	movzx  ebx,bx
c00225dc:	83 e6 02             	and    esi,0x2
c00225df:	74 0a                	je     c00225eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00225e1:	0f b7 d0             	movzx  edx,ax
c00225e4:	c1 e3 10             	shl    ebx,0x10
c00225e7:	09 d3                	or     ebx,edx
c00225e9:	eb 05                	jmp    c00225f0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00225eb:	66 31 c0             	xor    ax,ax
c00225ee:	09 c3                	or     ebx,eax
c00225f0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225f5:	89 c8                	mov    eax,ecx
c00225f7:	ef                   	out    dx,eax
c00225f8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225fd:	89 d8                	mov    eax,ebx
c00225ff:	eb 41                	jmp    c0022642 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022601:	83 f9 02             	cmp    ecx,0x2
c0022604:	75 45                	jne    c002264b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022606:	83 ec 0c             	sub    esp,0xc
c0022609:	0f b6 d2             	movzx  edx,dl
c002260c:	89 f1                	mov    ecx,esi
c002260e:	0f b6 c0             	movzx  eax,al
c0022611:	0f b6 f1             	movzx  esi,cl
c0022614:	89 e9                	mov    ecx,ebp
c0022616:	56                   	push   esi
c0022617:	0f b6 c9             	movzx  ecx,cl
c002261a:	51                   	push   ecx
c002261b:	52                   	push   edx
c002261c:	50                   	push   eax
c002261d:	57                   	push   edi
c002261e:	e8 ad fc ff ff       	call   c00222d0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022623:	89 c2                	mov    edx,eax
c0022625:	ed                   	in     eax,dx
c0022626:	83 c4 20             	add    esp,0x20
c0022629:	0f b7 db             	movzx  ebx,bx
c002262c:	f6 c2 02             	test   dl,0x2
c002262f:	74 0c                	je     c002263d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022631:	0f b7 c8             	movzx  ecx,ax
c0022634:	89 d8                	mov    eax,ebx
c0022636:	c1 e0 10             	shl    eax,0x10
c0022639:	09 c8                	or     eax,ecx
c002263b:	eb 05                	jmp    c0022642 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002263d:	66 31 c0             	xor    ax,ax
c0022640:	09 d8                	or     eax,ebx
c0022642:	ef                   	out    dx,eax
c0022643:	83 c4 0c             	add    esp,0xc
c0022646:	5b                   	pop    ebx
c0022647:	5e                   	pop    esi
c0022648:	5f                   	pop    edi
c0022649:	5d                   	pop    ebp
c002264a:	c3                   	ret    
c002264b:	c7 44 24 20 38 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc38
c0022653:	83 c4 0c             	add    esp,0xc
c0022656:	5b                   	pop    ebx
c0022657:	5e                   	pop    esi
c0022658:	5f                   	pop    edi
c0022659:	5d                   	pop    ebp
c002265a:	e9 00 76 ff ff       	jmp    c0019c5f <Krnl::panic(char const*)>
c002265f:	90                   	nop

c0022660 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022660:	55                   	push   ebp
c0022661:	57                   	push   edi
c0022662:	56                   	push   esi
c0022663:	53                   	push   ebx
c0022664:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002266a:	80 3d f0 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318f0,0x0
c0022671:	0f 85 84 00 00 00    	jne    c00226fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022677:	83 ec 0c             	sub    esp,0xc
c002267a:	68 14 01 00 00       	push   0x114
c002267f:	e8 18 cf fe ff       	call   c000f59c <malloc>
c0022684:	83 c4 0c             	add    esp,0xc
c0022687:	89 c3                	mov    ebx,eax
c0022689:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c002268f:	68 3e bc 02 c0       	push   0xc002bc3e
c0022694:	50                   	push   eax
c0022695:	e8 ea 03 ff ff       	call   c0012a84 <File::File(char const*, Process*)>
c002269a:	5a                   	pop    edx
c002269b:	59                   	pop    ecx
c002269c:	6a 01                	push   0x1
c002269e:	53                   	push   ebx
c002269f:	e8 44 04 ff ff       	call   c0012ae8 <File::open(FileOpenMode)>
c00226a4:	83 c4 0c             	add    esp,0xc
c00226a7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00226ab:	50                   	push   eax
c00226ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00226b0:	50                   	push   eax
c00226b1:	53                   	push   ebx
c00226b2:	e8 dd 06 ff ff       	call   c0012d94 <File::stat(unsigned long long*, bool*)>
c00226b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226bb:	40                   	inc    eax
c00226bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00226bf:	e8 d8 ce fe ff       	call   c000f59c <malloc>
c00226c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226c8:	a3 ec 18 03 c0       	mov    ds:0xc00318ec,eax
c00226cd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00226d1:	5e                   	pop    esi
c00226d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226d4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00226d8:	51                   	push   ecx
c00226d9:	50                   	push   eax
c00226da:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226de:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226e2:	53                   	push   ebx
c00226e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00226e6:	83 c4 14             	add    esp,0x14
c00226e9:	53                   	push   ebx
c00226ea:	e8 57 04 ff ff       	call   c0012b46 <File::close()>
c00226ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226f3:	83 c4 10             	add    esp,0x10
c00226f6:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c00226fb:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0022700:	8b 15 ec 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318ec
c0022706:	89 04 24             	mov    DWORD PTR [esp],eax
c0022709:	31 ff                	xor    edi,edi
c002270b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022713:	31 f6                	xor    esi,esi
c0022715:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002271a:	31 db                	xor    ebx,ebx
c002271c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022724:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022729:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022730:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022734:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002273b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002273f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022742:	0f 8e 6b 01 00 00    	jle    c00228b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022748:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002274b:	d4 40                	aam    0x40
c002274d:	d5 39                	aad    0x39
c002274f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022753:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022757:	d4 40                	aam    0x40
c0022759:	d5 39                	aad    0x39
c002275b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002275f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022763:	d4 40                	aam    0x40
c0022765:	d5 39                	aad    0x39
c0022767:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002276b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002276f:	d4 40                	aam    0x40
c0022771:	d5 39                	aad    0x39
c0022773:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022777:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002277b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002277f:	3c 56                	cmp    al,0x56
c0022781:	74 45                	je     c00227c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022783:	d4 40                	aam    0x40
c0022785:	d5 39                	aad    0x39
c0022787:	8d 48 d0             	lea    ecx,[eax-0x30]
c002278a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002278e:	0f b6 c9             	movzx  ecx,cl
c0022791:	c1 e1 04             	shl    ecx,0x4
c0022794:	d4 40                	aam    0x40
c0022796:	d5 39                	aad    0x39
c0022798:	8d 58 d0             	lea    ebx,[eax-0x30]
c002279b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002279f:	0f b6 db             	movzx  ebx,bl
c00227a2:	09 cb                	or     ebx,ecx
c00227a4:	c1 e3 04             	shl    ebx,0x4
c00227a7:	d4 40                	aam    0x40
c00227a9:	d5 39                	aad    0x39
c00227ab:	8d 48 d0             	lea    ecx,[eax-0x30]
c00227ae:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00227b2:	0f b6 c9             	movzx  ecx,cl
c00227b5:	09 cb                	or     ebx,ecx
c00227b7:	c1 e3 04             	shl    ebx,0x4
c00227ba:	89 d9                	mov    ecx,ebx
c00227bc:	d4 40                	aam    0x40
c00227be:	d5 39                	aad    0x39
c00227c0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227c3:	0f b6 db             	movzx  ebx,bl
c00227c6:	09 cb                	or     ebx,ecx
c00227c8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00227cc:	80 f9 44             	cmp    cl,0x44
c00227cf:	74 47                	je     c0022818 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00227d1:	88 c8                	mov    al,cl
c00227d3:	d4 40                	aam    0x40
c00227d5:	d5 39                	aad    0x39
c00227d7:	83 e8 30             	sub    eax,0x30
c00227da:	0f b6 e8             	movzx  ebp,al
c00227dd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00227e1:	c1 e5 04             	shl    ebp,0x4
c00227e4:	d4 40                	aam    0x40
c00227e6:	d5 39                	aad    0x39
c00227e8:	83 e8 30             	sub    eax,0x30
c00227eb:	0f b6 f0             	movzx  esi,al
c00227ee:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00227f2:	09 ee                	or     esi,ebp
c00227f4:	c1 e6 04             	shl    esi,0x4
c00227f7:	d4 40                	aam    0x40
c00227f9:	d5 39                	aad    0x39
c00227fb:	83 e8 30             	sub    eax,0x30
c00227fe:	0f b6 e8             	movzx  ebp,al
c0022801:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022805:	09 ee                	or     esi,ebp
c0022807:	c1 e6 04             	shl    esi,0x4
c002280a:	89 f5                	mov    ebp,esi
c002280c:	d4 40                	aam    0x40
c002280e:	d5 39                	aad    0x39
c0022810:	83 e8 30             	sub    eax,0x30
c0022813:	0f b6 f0             	movzx  esi,al
c0022816:	09 ee                	or     esi,ebp
c0022818:	83 c7 10             	add    edi,0x10
c002281b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002281f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022822:	3c 0a                	cmp    al,0xa
c0022824:	74 09                	je     c002282f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022826:	45                   	inc    ebp
c0022827:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002282a:	75 16                	jne    c0022842 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c002282c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002282f:	3c 0a                	cmp    al,0xa
c0022831:	0f 94 c0             	sete   al
c0022834:	0f b6 c0             	movzx  eax,al
c0022837:	01 c7                	add    edi,eax
c0022839:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002283e:	75 0c                	jne    c002284c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022840:	eb 15                	jmp    c0022857 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022842:	47                   	inc    edi
c0022843:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022846:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002284a:	eb d3                	jmp    c002281f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c002284c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022851:	0f 85 e8 fe ff ff    	jne    c002273f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022857:	80 f9 44             	cmp    cl,0x44
c002285a:	74 0b                	je     c0022867 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c002285c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022861:	0f 85 d8 fe ff ff    	jne    c002273f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022867:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002286b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002286f:	c1 e1 04             	shl    ecx,0x4
c0022872:	83 e8 30             	sub    eax,0x30
c0022875:	09 c8                	or     eax,ecx
c0022877:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002287b:	0f 85 be fe ff ff    	jne    c002273f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022881:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022885:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022889:	c1 e1 04             	shl    ecx,0x4
c002288c:	83 e8 30             	sub    eax,0x30
c002288f:	09 c8                	or     eax,ecx
c0022891:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022895:	0f 85 a4 fe ff ff    	jne    c002273f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002289b:	50                   	push   eax
c002289c:	50                   	push   eax
c002289d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228a1:	50                   	push   eax
c00228a2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00228a9:	e8 5e df fd ff       	call   c000080c <strcpy>
c00228ae:	83 c4 10             	add    esp,0x10
c00228b1:	eb 15                	jmp    c00228c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00228b3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228ba:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00228c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00228c8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228cf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00228d5:	5b                   	pop    ebx
c00228d6:	5e                   	pop    esi
c00228d7:	5f                   	pop    edi
c00228d8:	5d                   	pop    ebp
c00228d9:	c3                   	ret    

c00228da <PCI::checkBus(unsigned char)>:
c00228da:	56                   	push   esi
c00228db:	53                   	push   ebx
c00228dc:	31 db                	xor    ebx,ebx
c00228de:	51                   	push   ecx
c00228df:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00228e4:	52                   	push   edx
c00228e5:	53                   	push   ebx
c00228e6:	43                   	inc    ebx
c00228e7:	56                   	push   esi
c00228e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ec:	e8 37 03 00 00       	call   c0022c28 <PCI::checkDevice(unsigned char, unsigned char)>
c00228f1:	83 c4 10             	add    esp,0x10
c00228f4:	83 fb 20             	cmp    ebx,0x20
c00228f7:	75 eb                	jne    c00228e4 <PCI::checkBus(unsigned char)+0xa>
c00228f9:	58                   	pop    eax
c00228fa:	5b                   	pop    ebx
c00228fb:	5e                   	pop    esi
c00228fc:	c3                   	ret    
c00228fd:	90                   	nop

c00228fe <PCI::foundDevice(PCIDeviceInfo)>:
c00228fe:	55                   	push   ebp
c00228ff:	57                   	push   edi
c0022900:	56                   	push   esi
c0022901:	53                   	push   ebx
c0022902:	83 ec 1c             	sub    esp,0x1c
c0022905:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022909:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002290f:	0f 84 52 01 00 00    	je     c0022a67 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022915:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022919:	66 81 f9 06 04       	cmp    cx,0x406
c002291e:	75 2c                	jne    c002294c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022920:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022925:	50                   	push   eax
c0022926:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002292b:	50                   	push   eax
c002292c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022931:	50                   	push   eax
c0022932:	56                   	push   esi
c0022933:	e8 b4 fb ff ff       	call   c00224ec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022938:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002293c:	0f b6 c0             	movzx  eax,al
c002293f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022943:	83 c4 2c             	add    esp,0x2c
c0022946:	5b                   	pop    ebx
c0022947:	5e                   	pop    esi
c0022948:	5f                   	pop    edi
c0022949:	5d                   	pop    ebp
c002294a:	eb 8e                	jmp    c00228da <PCI::checkBus(unsigned char)>
c002294c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022950:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022956:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002295a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002295e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022962:	88 d3                	mov    bl,dl
c0022964:	85 c0                	test   eax,eax
c0022966:	74 33                	je     c002299b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022968:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002296b:	85 d2                	test   edx,edx
c002296d:	74 28                	je     c0022997 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002296f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022975:	31 ef                	xor    edi,ebp
c0022977:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002297d:	75 18                	jne    c0022997 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002297f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022983:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022989:	75 0c                	jne    c0022997 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002298b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022991:	0f 84 d0 00 00 00    	je     c0022a67 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022997:	8b 00                	mov    eax,DWORD PTR [eax]
c0022999:	eb c9                	jmp    c0022964 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002299b:	66 81 f9 01 06       	cmp    cx,0x601
c00229a0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00229a4:	75 19                	jne    c00229bf <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00229a6:	83 ec 0c             	sub    esp,0xc
c00229a9:	68 64 01 00 00       	push   0x164
c00229ae:	e8 e9 cb fe ff       	call   c000f59c <malloc>
c00229b3:	89 c5                	mov    ebp,eax
c00229b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00229b8:	e8 85 0e 00 00       	call   c0023842 <SATABus::SATABus()>
c00229bd:	eb 1e                	jmp    c00229dd <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00229bf:	66 81 f9 01 01       	cmp    cx,0x101
c00229c4:	75 60                	jne    c0022a26 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00229c6:	83 ec 0c             	sub    esp,0xc
c00229c9:	68 70 02 00 00       	push   0x270
c00229ce:	e8 c9 cb fe ff       	call   c000f59c <malloc>
c00229d3:	89 c5                	mov    ebp,eax
c00229d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00229d8:	e8 0f 03 00 00       	call   c0022cec <IDE::IDE()>
c00229dd:	58                   	pop    eax
c00229de:	5a                   	pop    edx
c00229df:	55                   	push   ebp
c00229e0:	56                   	push   esi
c00229e1:	e8 78 0f ff ff       	call   c001395e <Device::addChild(Device*)>
c00229e6:	83 ec 1c             	sub    esp,0x1c
c00229e9:	b9 09 00 00 00       	mov    ecx,0x9
c00229ee:	fc                   	cld    
c00229ef:	89 e7                	mov    edi,esp
c00229f1:	89 de                	mov    esi,ebx
c00229f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00229f5:	55                   	push   ebp
c00229f6:	e8 75 0e ff ff       	call   c0013870 <Device::preOpenPCI(PCIDeviceInfo)>
c00229fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00229fe:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022a02:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022a0a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022a12:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022a1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a1d:	83 c4 4c             	add    esp,0x4c
c0022a20:	5b                   	pop    ebx
c0022a21:	5e                   	pop    esi
c0022a22:	5f                   	pop    edi
c0022a23:	5d                   	pop    ebp
c0022a24:	ff e0                	jmp    eax
c0022a26:	83 ec 0c             	sub    esp,0xc
c0022a29:	68 58 01 00 00       	push   0x158
c0022a2e:	e8 69 cb fe ff       	call   c000f59c <malloc>
c0022a33:	89 c5                	mov    ebp,eax
c0022a35:	58                   	pop    eax
c0022a36:	5a                   	pop    edx
c0022a37:	68 57 bc 02 c0       	push   0xc002bc57
c0022a3c:	55                   	push   ebp
c0022a3d:	e8 26 12 ff ff       	call   c0013c68 <DriverlessDevice::DriverlessDevice(char const*)>
c0022a42:	59                   	pop    ecx
c0022a43:	5f                   	pop    edi
c0022a44:	55                   	push   ebp
c0022a45:	56                   	push   esi
c0022a46:	e8 13 0f ff ff       	call   c001395e <Device::addChild(Device*)>
c0022a4b:	b9 09 00 00 00       	mov    ecx,0x9
c0022a50:	fc                   	cld    
c0022a51:	89 df                	mov    edi,ebx
c0022a53:	89 de                	mov    esi,ebx
c0022a55:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a57:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022a5b:	83 c4 2c             	add    esp,0x2c
c0022a5e:	5b                   	pop    ebx
c0022a5f:	5e                   	pop    esi
c0022a60:	5f                   	pop    edi
c0022a61:	5d                   	pop    ebp
c0022a62:	e9 09 0e ff ff       	jmp    c0013870 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a67:	83 c4 1c             	add    esp,0x1c
c0022a6a:	5b                   	pop    ebx
c0022a6b:	5e                   	pop    esi
c0022a6c:	5f                   	pop    edi
c0022a6d:	5d                   	pop    ebp
c0022a6e:	c3                   	ret    
c0022a6f:	90                   	nop

c0022a70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022a70:	55                   	push   ebp
c0022a71:	57                   	push   edi
c0022a72:	56                   	push   esi
c0022a73:	53                   	push   ebx
c0022a74:	83 ec 68             	sub    esp,0x68
c0022a77:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022a7b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022a82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022a86:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022a8d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022a92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a96:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022a9d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022aa2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022aa6:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022aab:	6a 0c                	push   0xc
c0022aad:	57                   	push   edi
c0022aae:	53                   	push   ebx
c0022aaf:	56                   	push   esi
c0022ab0:	55                   	push   ebp
c0022ab1:	e8 88 f8 ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab6:	83 c4 20             	add    esp,0x20
c0022ab9:	57                   	push   edi
c0022aba:	53                   	push   ebx
c0022abb:	56                   	push   esi
c0022abc:	55                   	push   ebp
c0022abd:	e8 70 f9 ff ff       	call   c0022432 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ac2:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ac7:	57                   	push   edi
c0022ac8:	53                   	push   ebx
c0022ac9:	56                   	push   esi
c0022aca:	55                   	push   ebp
c0022acb:	e8 f8 f9 ff ff       	call   c00224c8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ad0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ad4:	83 c4 14             	add    esp,0x14
c0022ad7:	6a 3c                	push   0x3c
c0022ad9:	57                   	push   edi
c0022ada:	53                   	push   ebx
c0022adb:	56                   	push   esi
c0022adc:	55                   	push   ebp
c0022add:	e8 5c f8 ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae2:	0f b6 c4             	movzx  eax,ah
c0022ae5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ae9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022aed:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022af1:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0022af6:	83 c4 20             	add    esp,0x20
c0022af9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022aff:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022b06:	74 7c                	je     c0022b84 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b08:	31 c0                	xor    eax,eax
c0022b0a:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0022b10:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b16:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022b1c:	7e 66                	jle    c0022b84 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b1e:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022b21:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022b28:	39 cb                	cmp    ebx,ecx
c0022b2a:	75 55                	jne    c0022b81 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b2c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022b33:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022b37:	75 48                	jne    c0022b81 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b3d:	83 ec 0c             	sub    esp,0xc
c0022b40:	68 71 bc 02 c0       	push   0xc002bc71
c0022b45:	e8 db f9 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0022b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b4e:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0022b54:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022b58:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b5e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022b66:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022b6a:	52                   	push   edx
c0022b6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b6f:	53                   	push   ebx
c0022b70:	68 96 bc 02 c0       	push   0xc002bc96
c0022b75:	e8 ab f9 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0022b7a:	83 c4 20             	add    esp,0x20
c0022b7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022b81:	40                   	inc    eax
c0022b82:	eb 86                	jmp    c0022b0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022b84:	31 d2                	xor    edx,edx
c0022b86:	83 ec 0c             	sub    esp,0xc
c0022b89:	57                   	push   edi
c0022b8a:	53                   	push   ebx
c0022b8b:	56                   	push   esi
c0022b8c:	52                   	push   edx
c0022b8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022b91:	55                   	push   ebp
c0022b92:	e8 7d f9 ff ff       	call   c0022514 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022b9b:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022b9f:	42                   	inc    edx
c0022ba0:	83 c4 20             	add    esp,0x20
c0022ba3:	83 fa 06             	cmp    edx,0x6
c0022ba6:	75 de                	jne    c0022b86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022ba8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022bad:	83 ec 0c             	sub    esp,0xc
c0022bb0:	86 e0                	xchg   al,ah
c0022bb2:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022bb7:	6a 02                	push   0x2
c0022bb9:	57                   	push   edi
c0022bba:	53                   	push   ebx
c0022bbb:	56                   	push   esi
c0022bbc:	55                   	push   ebp
c0022bbd:	e8 7c f7 ff ff       	call   c002233e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc2:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022bc7:	83 c4 20             	add    esp,0x20
c0022bca:	57                   	push   edi
c0022bcb:	53                   	push   ebx
c0022bcc:	56                   	push   esi
c0022bcd:	55                   	push   ebp
c0022bce:	e8 a9 f8 ff ff       	call   c002247c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022bd3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022bd7:	57                   	push   edi
c0022bd8:	53                   	push   ebx
c0022bd9:	56                   	push   esi
c0022bda:	55                   	push   ebp
c0022bdb:	e8 06 f8 ff ff       	call   c00223e6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022be0:	b9 09 00 00 00       	mov    ecx,0x9
c0022be5:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022bea:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022bee:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022bf2:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022bf6:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022bfa:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022bfe:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022c02:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022c06:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022c0a:	83 ec 0c             	sub    esp,0xc
c0022c0d:	fc                   	cld    
c0022c0e:	89 e7                	mov    edi,esp
c0022c10:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022c14:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c16:	55                   	push   ebp
c0022c17:	e8 e2 fc ff ff       	call   c00228fe <PCI::foundDevice(PCIDeviceInfo)>
c0022c1c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022c22:	5b                   	pop    ebx
c0022c23:	5e                   	pop    esi
c0022c24:	5f                   	pop    edi
c0022c25:	5d                   	pop    ebp
c0022c26:	c3                   	ret    
c0022c27:	90                   	nop

c0022c28 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022c28:	55                   	push   ebp
c0022c29:	57                   	push   edi
c0022c2a:	56                   	push   esi
c0022c2b:	53                   	push   ebx
c0022c2c:	83 ec 0c             	sub    esp,0xc
c0022c2f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022c33:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022c38:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c3d:	6a 00                	push   0x0
c0022c3f:	56                   	push   esi
c0022c40:	57                   	push   edi
c0022c41:	55                   	push   ebp
c0022c42:	e8 9f f7 ff ff       	call   c00223e6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c47:	6a 00                	push   0x0
c0022c49:	56                   	push   esi
c0022c4a:	57                   	push   edi
c0022c4b:	55                   	push   ebp
c0022c4c:	e8 1f fe ff ff       	call   c0022a70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c51:	83 c4 20             	add    esp,0x20
c0022c54:	6a 00                	push   0x0
c0022c56:	56                   	push   esi
c0022c57:	57                   	push   edi
c0022c58:	55                   	push   ebp
c0022c59:	e8 ac f7 ff ff       	call   c002240a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022c5e:	83 c4 10             	add    esp,0x10
c0022c61:	84 c0                	test   al,al
c0022c63:	79 27                	jns    c0022c8c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022c65:	bb 01 00 00 00       	mov    ebx,0x1
c0022c6a:	53                   	push   ebx
c0022c6b:	56                   	push   esi
c0022c6c:	57                   	push   edi
c0022c6d:	55                   	push   ebp
c0022c6e:	e8 73 f7 ff ff       	call   c00223e6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c73:	83 c4 10             	add    esp,0x10
c0022c76:	66 40                	inc    ax
c0022c78:	74 0c                	je     c0022c86 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022c7a:	53                   	push   ebx
c0022c7b:	56                   	push   esi
c0022c7c:	57                   	push   edi
c0022c7d:	55                   	push   ebp
c0022c7e:	e8 ed fd ff ff       	call   c0022a70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c83:	83 c4 10             	add    esp,0x10
c0022c86:	43                   	inc    ebx
c0022c87:	83 fb 08             	cmp    ebx,0x8
c0022c8a:	75 de                	jne    c0022c6a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022c8c:	83 c4 0c             	add    esp,0xc
c0022c8f:	5b                   	pop    ebx
c0022c90:	5e                   	pop    esi
c0022c91:	5f                   	pop    edi
c0022c92:	5d                   	pop    ebp
c0022c93:	c3                   	ret    

c0022c94 <PCI::detect()>:
c0022c94:	56                   	push   esi
c0022c95:	53                   	push   ebx
c0022c96:	53                   	push   ebx
c0022c97:	31 db                	xor    ebx,ebx
c0022c99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022c9d:	6a 00                	push   0x0
c0022c9f:	6a 00                	push   0x0
c0022ca1:	6a 00                	push   0x0
c0022ca3:	56                   	push   esi
c0022ca4:	e8 61 f7 ff ff       	call   c002240a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ca9:	83 c4 10             	add    esp,0x10
c0022cac:	a8 80                	test   al,0x80
c0022cae:	75 21                	jne    c0022cd1 <PCI::detect()+0x3d>
c0022cb0:	51                   	push   ecx
c0022cb1:	51                   	push   ecx
c0022cb2:	6a 00                	push   0x0
c0022cb4:	56                   	push   esi
c0022cb5:	e8 20 fc ff ff       	call   c00228da <PCI::checkBus(unsigned char)>
c0022cba:	83 c4 10             	add    esp,0x10
c0022cbd:	eb 24                	jmp    c0022ce3 <PCI::detect()+0x4f>
c0022cbf:	52                   	push   edx
c0022cc0:	52                   	push   edx
c0022cc1:	53                   	push   ebx
c0022cc2:	43                   	inc    ebx
c0022cc3:	56                   	push   esi
c0022cc4:	e8 11 fc ff ff       	call   c00228da <PCI::checkBus(unsigned char)>
c0022cc9:	83 c4 10             	add    esp,0x10
c0022ccc:	83 fb 08             	cmp    ebx,0x8
c0022ccf:	74 12                	je     c0022ce3 <PCI::detect()+0x4f>
c0022cd1:	53                   	push   ebx
c0022cd2:	6a 00                	push   0x0
c0022cd4:	6a 00                	push   0x0
c0022cd6:	56                   	push   esi
c0022cd7:	e8 0a f7 ff ff       	call   c00223e6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	66 40                	inc    ax
c0022ce1:	74 dc                	je     c0022cbf <PCI::detect()+0x2b>
c0022ce3:	58                   	pop    eax
c0022ce4:	5b                   	pop    ebx
c0022ce5:	5e                   	pop    esi
c0022ce6:	c3                   	ret    
c0022ce7:	90                   	nop

c0022ce8 <IDE::close(int, int, void*)>:
c0022ce8:	83 c8 ff             	or     eax,0xffffffff
c0022ceb:	c3                   	ret    

c0022cec <IDE::IDE()>:
c0022cec:	83 ec 0c             	sub    esp,0xc
c0022cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf3:	83 ec 08             	sub    esp,0x8
c0022cf6:	68 e0 bc 02 c0       	push   0xc002bce0
c0022cfb:	50                   	push   eax
c0022cfc:	e8 0b 10 ff ff       	call   c0013d0c <HardDiskController::HardDiskController(char const*)>
c0022d01:	83 c4 10             	add    esp,0x10
c0022d04:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c0022d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0d:	89 10                	mov    DWORD PTR [eax],edx
c0022d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d13:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022d1a:	90                   	nop
c0022d1b:	83 c4 0c             	add    esp,0xc
c0022d1e:	c3                   	ret    
c0022d1f:	90                   	nop

c0022d20 <IDE::prepareInterrupt(unsigned char)>:
c0022d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022d25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d29:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022d31:	c3                   	ret    

c0022d32 <selectDrive(unsigned char, unsigned char)>:
c0022d32:	c3                   	ret    
c0022d33:	90                   	nop

c0022d34 <IDE::getBase(unsigned char)>:
c0022d34:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022d39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d3d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022d45:	c3                   	ret    

c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022d46:	55                   	push   ebp
c0022d47:	57                   	push   edi
c0022d48:	56                   	push   esi
c0022d49:	53                   	push   ebx
c0022d4a:	83 ec 1c             	sub    esp,0x1c
c0022d4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d55:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d60:	80 f9 03             	cmp    cl,0x3
c0022d63:	77 51                	ja     c0022db6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d69:	0f b6 f2             	movzx  esi,dl
c0022d6c:	0f b6 db             	movzx  ebx,bl
c0022d6f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d72:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022d76:	83 ca 80             	or     edx,0xffffff80
c0022d79:	0f b6 d2             	movzx  edx,dl
c0022d7c:	52                   	push   edx
c0022d7d:	6a 0c                	push   0xc
c0022d7f:	56                   	push   esi
c0022d80:	57                   	push   edi
c0022d81:	e8 c0 ff ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d86:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d8f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022d93:	ee                   	out    dx,al
c0022d94:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022d99:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022d9d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022da1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022da5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022dad:	83 c4 2c             	add    esp,0x2c
c0022db0:	5b                   	pop    ebx
c0022db1:	5e                   	pop    esi
c0022db2:	5f                   	pop    edi
c0022db3:	5d                   	pop    ebp
c0022db4:	eb 90                	jmp    c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022db6:	80 fb 07             	cmp    bl,0x7
c0022db9:	77 12                	ja     c0022dcd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022dbb:	0f b6 d2             	movzx  edx,dl
c0022dbe:	0f b6 db             	movzx  ebx,bl
c0022dc1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022dc9:	89 da                	mov    edx,ebx
c0022dcb:	eb 2f                	jmp    c0022dfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022dcd:	80 fb 0d             	cmp    bl,0xd
c0022dd0:	77 13                	ja     c0022de5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022dd2:	0f b6 d2             	movzx  edx,dl
c0022dd5:	0f b6 db             	movzx  ebx,bl
c0022dd8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022ddf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022de3:	eb 17                	jmp    c0022dfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022de5:	80 fb 15             	cmp    bl,0x15
c0022de8:	77 13                	ja     c0022dfd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022dea:	0f b6 d2             	movzx  edx,dl
c0022ded:	0f b6 db             	movzx  ebx,bl
c0022df0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022df8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022dfc:	ee                   	out    dx,al
c0022dfd:	83 c4 1c             	add    esp,0x1c
c0022e00:	5b                   	pop    ebx
c0022e01:	5e                   	pop    esi
c0022e02:	5f                   	pop    edi
c0022e03:	5d                   	pop    ebp
c0022e04:	c3                   	ret    
c0022e05:	90                   	nop

c0022e06 <IDE::read(unsigned char, unsigned char)>:
c0022e06:	55                   	push   ebp
c0022e07:	57                   	push   edi
c0022e08:	56                   	push   esi
c0022e09:	53                   	push   ebx
c0022e0a:	83 ec 1c             	sub    esp,0x1c
c0022e0d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e15:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022e18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e1c:	3c 03                	cmp    al,0x3
c0022e1e:	77 43                	ja     c0022e63 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022e20:	0f b6 f2             	movzx  esi,dl
c0022e23:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e26:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022e2a:	83 c8 80             	or     eax,0xffffff80
c0022e2d:	0f b6 c0             	movzx  eax,al
c0022e30:	50                   	push   eax
c0022e31:	6a 0c                	push   0xc
c0022e33:	56                   	push   esi
c0022e34:	57                   	push   edi
c0022e35:	e8 0c ff ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e3a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022e3f:	0f b6 c3             	movzx  eax,bl
c0022e42:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022e46:	ec                   	in     al,dx
c0022e47:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e4b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022e50:	52                   	push   edx
c0022e51:	6a 0c                	push   0xc
c0022e53:	56                   	push   esi
c0022e54:	57                   	push   edi
c0022e55:	e8 ec fe ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e5a:	83 c4 20             	add    esp,0x20
c0022e5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022e61:	eb 49                	jmp    c0022eac <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e63:	80 fb 07             	cmp    bl,0x7
c0022e66:	77 12                	ja     c0022e7a <IDE::read(unsigned char, unsigned char)+0x74>
c0022e68:	0f b6 d2             	movzx  edx,dl
c0022e6b:	0f b6 c3             	movzx  eax,bl
c0022e6e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022e76:	89 c2                	mov    edx,eax
c0022e78:	eb 31                	jmp    c0022eab <IDE::read(unsigned char, unsigned char)+0xa5>
c0022e7a:	80 fb 0d             	cmp    bl,0xd
c0022e7d:	77 13                	ja     c0022e92 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022e7f:	0f b6 d2             	movzx  edx,dl
c0022e82:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022e89:	0f b6 d3             	movzx  edx,bl
c0022e8c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022e90:	eb 19                	jmp    c0022eab <IDE::read(unsigned char, unsigned char)+0xa5>
c0022e92:	31 c0                	xor    eax,eax
c0022e94:	80 fb 15             	cmp    bl,0x15
c0022e97:	77 13                	ja     c0022eac <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e99:	0f b6 d2             	movzx  edx,dl
c0022e9c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022ea4:	0f b6 d3             	movzx  edx,bl
c0022ea7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022eab:	ec                   	in     al,dx
c0022eac:	83 c4 1c             	add    esp,0x1c
c0022eaf:	5b                   	pop    ebx
c0022eb0:	5e                   	pop    esi
c0022eb1:	5f                   	pop    edi
c0022eb2:	5d                   	pop    ebp
c0022eb3:	c3                   	ret    

c0022eb4 <IDE::waitInterrupt(unsigned char)>:
c0022eb4:	55                   	push   ebp
c0022eb5:	57                   	push   edi
c0022eb6:	56                   	push   esi
c0022eb7:	53                   	push   ebx
c0022eb8:	31 db                	xor    ebx,ebx
c0022eba:	83 ec 0c             	sub    esp,0xc
c0022ebd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022ec1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022ec6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022ece:	89 e8                	mov    eax,ebp
c0022ed0:	84 c0                	test   al,al
c0022ed2:	75 34                	jne    c0022f08 <IDE::waitInterrupt(unsigned char)+0x54>
c0022ed4:	52                   	push   edx
c0022ed5:	6a 0c                	push   0xc
c0022ed7:	56                   	push   esi
c0022ed8:	57                   	push   edi
c0022ed9:	e8 28 ff ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0022ede:	83 c4 10             	add    esp,0x10
c0022ee1:	a8 01                	test   al,0x1
c0022ee3:	75 2b                	jne    c0022f10 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ee5:	f6 c3 04             	test   bl,0x4
c0022ee8:	75 16                	jne    c0022f00 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022eea:	83 fb 32             	cmp    ebx,0x32
c0022eed:	7e 11                	jle    c0022f00 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022eef:	50                   	push   eax
c0022ef0:	50                   	push   eax
c0022ef1:	6a 00                	push   0x0
c0022ef3:	68 80 96 98 00       	push   0x989680
c0022ef8:	e8 c6 ab ff ff       	call   c001dac3 <nanoSleep(unsigned long long)>
c0022efd:	83 c4 10             	add    esp,0x10
c0022f00:	83 fb 3c             	cmp    ebx,0x3c
c0022f03:	74 0b                	je     c0022f10 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f05:	43                   	inc    ebx
c0022f06:	eb be                	jmp    c0022ec6 <IDE::waitInterrupt(unsigned char)+0x12>
c0022f08:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022f10:	83 c4 0c             	add    esp,0xc
c0022f13:	89 e8                	mov    eax,ebp
c0022f15:	5b                   	pop    ebx
c0022f16:	5e                   	pop    esi
c0022f17:	5f                   	pop    edi
c0022f18:	5d                   	pop    ebp
c0022f19:	c3                   	ret    

c0022f1a <ideChannel0IRQHandler(regs*, void*)>:
c0022f1a:	83 ec 10             	sub    esp,0x10
c0022f1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f21:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022f28:	6a 07                	push   0x7
c0022f2a:	6a 00                	push   0x0
c0022f2c:	50                   	push   eax
c0022f2d:	e8 d4 fe ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0022f32:	83 c4 1c             	add    esp,0x1c
c0022f35:	c3                   	ret    

c0022f36 <ideChannel1IRQHandler(regs*, void*)>:
c0022f36:	83 ec 10             	sub    esp,0x10
c0022f39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f3d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022f44:	6a 07                	push   0x7
c0022f46:	6a 01                	push   0x1
c0022f48:	50                   	push   eax
c0022f49:	e8 b8 fe ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0022f4e:	83 c4 1c             	add    esp,0x1c
c0022f51:	c3                   	ret    

c0022f52 <IDE::enableIRQs(unsigned char, bool)>:
c0022f52:	57                   	push   edi
c0022f53:	56                   	push   esi
c0022f54:	be 04 00 00 00       	mov    esi,0x4
c0022f59:	53                   	push   ebx
c0022f5a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022f5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f63:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022f68:	0f 94 c0             	sete   al
c0022f6b:	d1 e0                	shl    eax,1
c0022f6d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022f74:	0f b6 c0             	movzx  eax,al
c0022f77:	50                   	push   eax
c0022f78:	6a 0c                	push   0xc
c0022f7a:	57                   	push   edi
c0022f7b:	53                   	push   ebx
c0022f7c:	e8 c5 fd ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f81:	83 c4 10             	add    esp,0x10
c0022f84:	50                   	push   eax
c0022f85:	6a 0c                	push   0xc
c0022f87:	57                   	push   edi
c0022f88:	53                   	push   ebx
c0022f89:	e8 78 fe ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0022f8e:	83 c4 10             	add    esp,0x10
c0022f91:	4e                   	dec    esi
c0022f92:	75 f0                	jne    c0022f84 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022f94:	5b                   	pop    ebx
c0022f95:	5e                   	pop    esi
c0022f96:	5f                   	pop    edi
c0022f97:	c3                   	ret    

c0022f98 <IDE::open(int, int, void*)>:
c0022f98:	55                   	push   ebp
c0022f99:	57                   	push   edi
c0022f9a:	56                   	push   esi
c0022f9b:	53                   	push   ebx
c0022f9c:	83 ec 1c             	sub    esp,0x1c
c0022f9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022fa3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022fac:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022fb5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022fbc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022fc3:	0f 85 b0 02 00 00    	jne    c0023279 <IDE::open(int, int, void*)+0x2e1>
c0022fc9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022fcf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022fd3:	83 e0 7f             	and    eax,0x7f
c0022fd6:	3c 05                	cmp    al,0x5
c0022fd8:	74 04                	je     c0022fde <IDE::open(int, int, void*)+0x46>
c0022fda:	3c 0f                	cmp    al,0xf
c0022fdc:	75 32                	jne    c0023010 <IDE::open(int, int, void*)+0x78>
c0022fde:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022fe4:	83 e0 fc             	and    eax,0xfffffffc
c0022fe7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022fee:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022ff4:	83 e0 fc             	and    eax,0xfffffffc
c0022ff7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022ffe:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023004:	83 e0 fc             	and    eax,0xfffffffc
c0023007:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002300e:	eb 14                	jmp    c0023024 <IDE::open(int, int, void*)+0x8c>
c0023010:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002301a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023024:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002302b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023036:	89 c6                	mov    esi,eax
c0023038:	bf f8 0c 00 00       	mov    edi,0xcf8
c002303d:	c1 e6 10             	shl    esi,0x10
c0023040:	89 e8                	mov    eax,ebp
c0023042:	89 fa                	mov    edx,edi
c0023044:	c1 e0 0b             	shl    eax,0xb
c0023047:	09 f0                	or     eax,esi
c0023049:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023050:	c1 e6 08             	shl    esi,0x8
c0023053:	09 c6                	or     esi,eax
c0023055:	89 f0                	mov    eax,esi
c0023057:	0d 08 00 00 80       	or     eax,0x80000008
c002305c:	ef                   	out    dx,eax
c002305d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023062:	89 ca                	mov    edx,ecx
c0023064:	ed                   	in     eax,dx
c0023065:	c1 e8 10             	shr    eax,0x10
c0023068:	3d ff ff 00 00       	cmp    eax,0xffff
c002306d:	0f 84 f5 00 00 00    	je     c0023168 <IDE::open(int, int, void*)+0x1d0>
c0023073:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023079:	89 fa                	mov    edx,edi
c002307b:	89 f0                	mov    eax,esi
c002307d:	ef                   	out    dx,eax
c002307e:	b0 fe                	mov    al,0xfe
c0023080:	89 ca                	mov    edx,ecx
c0023082:	ee                   	out    dx,al
c0023083:	89 f0                	mov    eax,esi
c0023085:	89 fa                	mov    edx,edi
c0023087:	ef                   	out    dx,eax
c0023088:	89 ca                	mov    edx,ecx
c002308a:	ed                   	in     eax,dx
c002308b:	3c fe                	cmp    al,0xfe
c002308d:	0f 85 a9 00 00 00    	jne    c002313c <IDE::open(int, int, void*)+0x1a4>
c0023093:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0023099:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00230a0:	74 33                	je     c00230d5 <IDE::open(int, int, void*)+0x13d>
c00230a2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00230a8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00230ac:	40                   	inc    eax
c00230ad:	83 ec 0c             	sub    esp,0xc
c00230b0:	0f b6 c0             	movzx  eax,al
c00230b3:	50                   	push   eax
c00230b4:	55                   	push   ebp
c00230b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00230b9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00230bf:	51                   	push   ecx
c00230c0:	e8 53 48 ff ff       	call   c0017918 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00230c5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00230ca:	83 c4 1c             	add    esp,0x1c
c00230cd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00230d3:	eb 0a                	jmp    c00230df <IDE::open(int, int, void*)+0x147>
c00230d5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00230df:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00230e6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00230ed:	c1 e1 10             	shl    ecx,0x10
c00230f0:	c1 e0 08             	shl    eax,0x8
c00230f3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00230f8:	09 c1                	or     ecx,eax
c00230fa:	89 fa                	mov    edx,edi
c00230fc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023103:	c1 e0 0b             	shl    eax,0xb
c0023106:	09 c1                	or     ecx,eax
c0023108:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002310e:	89 c8                	mov    eax,ecx
c0023110:	ef                   	out    dx,eax
c0023111:	be fc 0c 00 00       	mov    esi,0xcfc
c0023116:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002311c:	89 f2                	mov    edx,esi
c002311e:	ee                   	out    dx,al
c002311f:	89 c8                	mov    eax,ecx
c0023121:	89 fa                	mov    edx,edi
c0023123:	ef                   	out    dx,eax
c0023124:	89 f2                	mov    edx,esi
c0023126:	ed                   	in     eax,dx
c0023127:	0f b6 c0             	movzx  eax,al
c002312a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023130:	74 46                	je     c0023178 <IDE::open(int, int, void*)+0x1e0>
c0023132:	83 ec 0c             	sub    esp,0xc
c0023135:	68 f8 bc 02 c0       	push   0xc002bcf8
c002313a:	eb 34                	jmp    c0023170 <IDE::open(int, int, void*)+0x1d8>
c002313c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023145:	75 17                	jne    c002315e <IDE::open(int, int, void*)+0x1c6>
c0023147:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002314c:	74 07                	je     c0023155 <IDE::open(int, int, void*)+0x1bd>
c002314e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023153:	75 09                	jne    c002315e <IDE::open(int, int, void*)+0x1c6>
c0023155:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002315c:	eb 1a                	jmp    c0023178 <IDE::open(int, int, void*)+0x1e0>
c002315e:	83 ec 0c             	sub    esp,0xc
c0023161:	68 00 bd 02 c0       	push   0xc002bd00
c0023166:	eb 08                	jmp    c0023170 <IDE::open(int, int, void*)+0x1d8>
c0023168:	83 ec 0c             	sub    esp,0xc
c002316b:	68 31 bd 02 c0       	push   0xc002bd31
c0023170:	e8 ea 6a ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0023175:	83 c4 10             	add    esp,0x10
c0023178:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002317f:	79 1a                	jns    c002319b <IDE::open(int, int, void*)+0x203>
c0023181:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023187:	83 e0 fc             	and    eax,0xfffffffc
c002318a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023191:	83 c0 08             	add    eax,0x8
c0023194:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002319b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00231a1:	89 c2                	mov    edx,eax
c00231a3:	83 e2 0f             	and    edx,0xf
c00231a6:	66 83 fa 08          	cmp    dx,0x8
c00231aa:	75 0a                	jne    c00231b6 <IDE::open(int, int, void*)+0x21e>
c00231ac:	83 e8 02             	sub    eax,0x2
c00231af:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231b6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00231bc:	89 c2                	mov    edx,eax
c00231be:	83 e2 0f             	and    edx,0xf
c00231c1:	66 83 fa 08          	cmp    dx,0x8
c00231c5:	75 0a                	jne    c00231d1 <IDE::open(int, int, void*)+0x239>
c00231c7:	83 e8 02             	sub    eax,0x2
c00231ca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00231d1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00231d8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00231df:	89 d0                	mov    eax,edx
c00231e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00231e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00231e8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00231ec:	8d 4a 01             	lea    ecx,[edx+0x1]
c00231ef:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00231f4:	0f b6 c9             	movzx  ecx,cl
c00231f7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00231fe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023201:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023205:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023209:	8d 50 02             	lea    edx,[eax+0x2]
c002320c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023211:	0f b6 d2             	movzx  edx,dl
c0023214:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002321a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002321d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023221:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023225:	8d 48 03             	lea    ecx,[eax+0x3]
c0023228:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002322d:	0f b6 c9             	movzx  ecx,cl
c0023230:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023236:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023239:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002323d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023241:	8d 50 04             	lea    edx,[eax+0x4]
c0023244:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002324a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002324f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023256:	66 85 f6             	test   si,si
c0023259:	74 5b                	je     c00232b6 <IDE::open(int, int, void*)+0x31e>
c002325b:	0f b6 d2             	movzx  edx,dl
c002325e:	83 c0 05             	add    eax,0x5
c0023261:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023264:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023268:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002326c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023272:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023277:	eb 3d                	jmp    c00232b6 <IDE::open(int, int, void*)+0x31e>
c0023279:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002327f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023286:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002328d:	66 05 06 02          	add    ax,0x206
c0023291:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023298:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002329f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232a6:	66 05 06 02          	add    ax,0x206
c00232aa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232b1:	e9 e5 fe ff ff       	jmp    c002319b <IDE::open(int, int, void*)+0x203>
c00232b6:	50                   	push   eax
c00232b7:	50                   	push   eax
c00232b8:	6a 00                	push   0x0
c00232ba:	53                   	push   ebx
c00232bb:	e8 60 fa ff ff       	call   c0022d20 <IDE::prepareInterrupt(unsigned char)>
c00232c0:	5a                   	pop    edx
c00232c1:	59                   	pop    ecx
c00232c2:	6a 01                	push   0x1
c00232c4:	53                   	push   ebx
c00232c5:	e8 56 fa ff ff       	call   c0022d20 <IDE::prepareInterrupt(unsigned char)>
c00232ca:	83 c4 0c             	add    esp,0xc
c00232cd:	6a 00                	push   0x0
c00232cf:	6a 00                	push   0x0
c00232d1:	53                   	push   ebx
c00232d2:	e8 7b fc ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c00232d7:	83 c4 0c             	add    esp,0xc
c00232da:	6a 00                	push   0x0
c00232dc:	6a 01                	push   0x1
c00232de:	53                   	push   ebx
c00232df:	e8 6e fc ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c00232e4:	83 c4 10             	add    esp,0x10
c00232e7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00232ee:	74 34                	je     c0023324 <IDE::open(int, int, void*)+0x38c>
c00232f0:	83 ec 0c             	sub    esp,0xc
c00232f3:	53                   	push   ebx
c00232f4:	6a 01                	push   0x1
c00232f6:	68 1a 2f 02 c0       	push   0xc0022f1a
c00232fb:	6a 0e                	push   0xe
c00232fd:	53                   	push   ebx
c00232fe:	e8 d3 05 ff ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023303:	83 c4 14             	add    esp,0x14
c0023306:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002330c:	53                   	push   ebx
c002330d:	6a 01                	push   0x1
c002330f:	68 36 2f 02 c0       	push   0xc0022f36
c0023314:	6a 0f                	push   0xf
c0023316:	53                   	push   ebx
c0023317:	e8 ba 05 ff ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002331c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023322:	eb 38                	jmp    c002335c <IDE::open(int, int, void*)+0x3c4>
c0023324:	83 ec 0c             	sub    esp,0xc
c0023327:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023331:	53                   	push   ebx
c0023332:	6a 00                	push   0x0
c0023334:	68 1a 2f 02 c0       	push   0xc0022f1a
c0023339:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002333f:	53                   	push   ebx
c0023340:	e8 91 05 ff ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023345:	83 c4 14             	add    esp,0x14
c0023348:	53                   	push   ebx
c0023349:	6a 00                	push   0x0
c002334b:	68 36 2f 02 c0       	push   0xc0022f36
c0023350:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023356:	53                   	push   ebx
c0023357:	e8 7a 05 ff ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002335c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002335e:	83 c4 20             	add    esp,0x20
c0023361:	83 ec 0c             	sub    esp,0xc
c0023364:	53                   	push   ebx
c0023365:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023368:	83 c4 0c             	add    esp,0xc
c002336b:	6a 07                	push   0x7
c002336d:	6a 00                	push   0x0
c002336f:	53                   	push   ebx
c0023370:	e8 91 fa ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023375:	83 c4 0c             	add    esp,0xc
c0023378:	6a 07                	push   0x7
c002337a:	6a 01                	push   0x1
c002337c:	53                   	push   ebx
c002337d:	e8 84 fa ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023382:	83 c4 0c             	add    esp,0xc
c0023385:	6a 01                	push   0x1
c0023387:	6a 00                	push   0x0
c0023389:	53                   	push   ebx
c002338a:	e8 c3 fb ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c002338f:	83 c4 0c             	add    esp,0xc
c0023392:	6a 01                	push   0x1
c0023394:	6a 01                	push   0x1
c0023396:	53                   	push   ebx
c0023397:	e8 b6 fb ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c002339c:	83 c4 2c             	add    esp,0x2c
c002339f:	31 c0                	xor    eax,eax
c00233a1:	5b                   	pop    ebx
c00233a2:	5e                   	pop    esi
c00233a3:	5f                   	pop    edi
c00233a4:	5d                   	pop    ebp
c00233a5:	c3                   	ret    

c00233a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00233a6:	55                   	push   ebp
c00233a7:	57                   	push   edi
c00233a8:	56                   	push   esi
c00233a9:	53                   	push   ebx
c00233aa:	83 ec 1c             	sub    esp,0x1c
c00233ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00233b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233b5:	8d 50 f8             	lea    edx,[eax-0x8]
c00233b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233bc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00233c0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00233c4:	80 fa 03             	cmp    dl,0x3
c00233c7:	77 5d                	ja     c0023426 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00233c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00233cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00233d1:	0f b6 db             	movzx  ebx,bl
c00233d4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00233d7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00233db:	83 ca 80             	or     edx,0xffffff80
c00233de:	0f b6 d2             	movzx  edx,dl
c00233e1:	52                   	push   edx
c00233e2:	6a 0c                	push   0xc
c00233e4:	53                   	push   ebx
c00233e5:	56                   	push   esi
c00233e6:	e8 5b f9 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233eb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00233f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00233f8:	0f b6 c0             	movzx  eax,al
c00233fb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00233ff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023401:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023406:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002340a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002340e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023412:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002341a:	83 c4 2c             	add    esp,0x2c
c002341d:	5b                   	pop    ebx
c002341e:	5e                   	pop    esi
c002341f:	5f                   	pop    edi
c0023420:	5d                   	pop    ebp
c0023421:	e9 20 f9 ff ff       	jmp    c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023426:	3c 07                	cmp    al,0x7
c0023428:	77 10                	ja     c002343a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002342a:	0f b6 db             	movzx  ebx,bl
c002342d:	0f b6 d0             	movzx  edx,al
c0023430:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023438:	eb 2d                	jmp    c0023467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002343a:	3c 0d                	cmp    al,0xd
c002343c:	77 13                	ja     c0023451 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002343e:	0f b6 db             	movzx  ebx,bl
c0023441:	0f b6 c0             	movzx  eax,al
c0023444:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002344b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002344f:	eb 16                	jmp    c0023467 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023451:	3c 15                	cmp    al,0x15
c0023453:	77 14                	ja     c0023469 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023455:	0f b6 db             	movzx  ebx,bl
c0023458:	0f b6 c0             	movzx  eax,al
c002345b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023463:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023467:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023469:	83 c4 1c             	add    esp,0x1c
c002346c:	5b                   	pop    ebx
c002346d:	5e                   	pop    esi
c002346e:	5f                   	pop    edi
c002346f:	5d                   	pop    ebp
c0023470:	c3                   	ret    
c0023471:	90                   	nop

c0023472 <IDE::detect()>:
c0023472:	55                   	push   ebp
c0023473:	57                   	push   edi
c0023474:	56                   	push   esi
c0023475:	53                   	push   ebx
c0023476:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002347c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023483:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002348a:	0f 85 9d 02 00 00    	jne    c002372d <IDE::detect()+0x2bb>
c0023490:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023497:	31 f6                	xor    esi,esi
c0023499:	31 ed                	xor    ebp,ebp
c002349b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00234a3:	89 e8                	mov    eax,ebp
c00234a5:	c1 e0 06             	shl    eax,0x6
c00234a8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00234b0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00234b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00234b8:	c1 e0 04             	shl    eax,0x4
c00234bb:	83 c8 a0             	or     eax,0xffffffa0
c00234be:	0f b6 c0             	movzx  eax,al
c00234c1:	50                   	push   eax
c00234c2:	6a 06                	push   0x6
c00234c4:	56                   	push   esi
c00234c5:	53                   	push   ebx
c00234c6:	e8 7b f8 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234cb:	83 c4 0c             	add    esp,0xc
c00234ce:	6a 0c                	push   0xc
c00234d0:	56                   	push   esi
c00234d1:	53                   	push   ebx
c00234d2:	e8 2f f9 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00234d7:	83 c4 0c             	add    esp,0xc
c00234da:	6a 0c                	push   0xc
c00234dc:	56                   	push   esi
c00234dd:	53                   	push   ebx
c00234de:	e8 23 f9 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00234e3:	83 c4 0c             	add    esp,0xc
c00234e6:	6a 0c                	push   0xc
c00234e8:	56                   	push   esi
c00234e9:	53                   	push   ebx
c00234ea:	e8 17 f9 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00234ef:	83 c4 0c             	add    esp,0xc
c00234f2:	6a 0c                	push   0xc
c00234f4:	56                   	push   esi
c00234f5:	53                   	push   ebx
c00234f6:	e8 0b f9 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00234fb:	68 ec 00 00 00       	push   0xec
c0023500:	6a 07                	push   0x7
c0023502:	56                   	push   esi
c0023503:	53                   	push   ebx
c0023504:	e8 3d f8 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023509:	83 c4 1c             	add    esp,0x1c
c002350c:	6a 0c                	push   0xc
c002350e:	56                   	push   esi
c002350f:	53                   	push   ebx
c0023510:	e8 f1 f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023515:	83 c4 0c             	add    esp,0xc
c0023518:	6a 0c                	push   0xc
c002351a:	56                   	push   esi
c002351b:	53                   	push   ebx
c002351c:	e8 e5 f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023521:	83 c4 0c             	add    esp,0xc
c0023524:	6a 0c                	push   0xc
c0023526:	56                   	push   esi
c0023527:	53                   	push   ebx
c0023528:	e8 d9 f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c002352d:	83 c4 0c             	add    esp,0xc
c0023530:	6a 0c                	push   0xc
c0023532:	56                   	push   esi
c0023533:	53                   	push   ebx
c0023534:	e8 cd f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023539:	83 c4 0c             	add    esp,0xc
c002353c:	6a 0c                	push   0xc
c002353e:	56                   	push   esi
c002353f:	53                   	push   ebx
c0023540:	e8 c1 f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023545:	83 c4 10             	add    esp,0x10
c0023548:	84 c0                	test   al,al
c002354a:	0f 84 63 01 00 00    	je     c00236b3 <IDE::detect()+0x241>
c0023550:	31 ff                	xor    edi,edi
c0023552:	50                   	push   eax
c0023553:	6a 0c                	push   0xc
c0023555:	56                   	push   esi
c0023556:	53                   	push   ebx
c0023557:	e8 aa f8 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c002355c:	83 c4 10             	add    esp,0x10
c002355f:	a8 01                	test   al,0x1
c0023561:	0f 85 6d 01 00 00    	jne    c00236d4 <IDE::detect()+0x262>
c0023567:	84 c0                	test   al,al
c0023569:	78 04                	js     c002356f <IDE::detect()+0xfd>
c002356b:	a8 08                	test   al,0x8
c002356d:	75 27                	jne    c0023596 <IDE::detect()+0x124>
c002356f:	47                   	inc    edi
c0023570:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023576:	7e da                	jle    c0023552 <IDE::detect()+0xe0>
c0023578:	50                   	push   eax
c0023579:	50                   	push   eax
c002357a:	6a 00                	push   0x0
c002357c:	68 40 4b 4c 00       	push   0x4c4b40
c0023581:	e8 3d a5 ff ff       	call   c001dac3 <nanoSleep(unsigned long long)>
c0023586:	83 c4 10             	add    esp,0x10
c0023589:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002358f:	75 c1                	jne    c0023552 <IDE::detect()+0xe0>
c0023591:	e9 3e 01 00 00       	jmp    c00236d4 <IDE::detect()+0x262>
c0023596:	31 c9                	xor    ecx,ecx
c0023598:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002359c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00235a0:	83 ec 0c             	sub    esp,0xc
c00235a3:	68 80 00 00 00       	push   0x80
c00235a8:	57                   	push   edi
c00235a9:	6a 00                	push   0x0
c00235ab:	56                   	push   esi
c00235ac:	53                   	push   ebx
c00235ad:	e8 f4 fd ff ff       	call   c00233a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00235b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00235b7:	89 e8                	mov    eax,ebp
c00235b9:	89 d1                	mov    ecx,edx
c00235bb:	c1 e0 06             	shl    eax,0x6
c00235be:	01 d8                	add    eax,ebx
c00235c0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00235c7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00235ce:	89 f2                	mov    edx,esi
c00235d0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00235d6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00235da:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00235e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00235e4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00235eb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00235f3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00235fa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023602:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023608:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002360f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023615:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023619:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002361d:	83 c4 20             	add    esp,0x20
c0023620:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023623:	83 c0 02             	add    eax,0x2
c0023626:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002362c:	83 c7 02             	add    edi,0x2
c002362f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023632:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023638:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002363c:	75 e2                	jne    c0023620 <IDE::detect()+0x1ae>
c002363e:	89 e8                	mov    eax,ebp
c0023640:	c1 e0 06             	shl    eax,0x6
c0023643:	01 d8                	add    eax,ebx
c0023645:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002364b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023652:	66 c1 ea 09          	shr    dx,0x9
c0023656:	83 e2 01             	and    edx,0x1
c0023659:	84 c9                	test   cl,cl
c002365b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023661:	75 22                	jne    c0023685 <IDE::detect()+0x213>
c0023663:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002366a:	74 46                	je     c00236b2 <IDE::detect()+0x240>
c002366c:	83 ec 0c             	sub    esp,0xc
c002366f:	68 7c 01 00 00       	push   0x17c
c0023674:	e8 23 bf fe ff       	call   c000f59c <malloc>
c0023679:	89 c7                	mov    edi,eax
c002367b:	89 04 24             	mov    DWORD PTR [esp],eax
c002367e:	e8 15 05 00 00       	call   c0023b98 <ATA::ATA()>
c0023683:	eb 17                	jmp    c002369c <IDE::detect()+0x22a>
c0023685:	83 ec 0c             	sub    esp,0xc
c0023688:	68 80 01 00 00       	push   0x180
c002368d:	e8 0a bf fe ff       	call   c000f59c <malloc>
c0023692:	89 c7                	mov    edi,eax
c0023694:	89 04 24             	mov    DWORD PTR [esp],eax
c0023697:	e8 04 0b 00 00       	call   c00241a0 <ATAPI::ATAPI()>
c002369c:	5a                   	pop    edx
c002369d:	59                   	pop    ecx
c002369e:	57                   	push   edi
c002369f:	53                   	push   ebx
c00236a0:	e8 b9 02 ff ff       	call   c001395e <Device::addChild(Device*)>
c00236a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00236a7:	53                   	push   ebx
c00236a8:	55                   	push   ebp
c00236a9:	6a 00                	push   0x0
c00236ab:	57                   	push   edi
c00236ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00236af:	83 c4 20             	add    esp,0x20
c00236b2:	45                   	inc    ebp
c00236b3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00236b8:	74 0d                	je     c00236c7 <IDE::detect()+0x255>
c00236ba:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00236c2:	e9 dc fd ff ff       	jmp    c00234a3 <IDE::detect()+0x31>
c00236c7:	4e                   	dec    esi
c00236c8:	74 63                	je     c002372d <IDE::detect()+0x2bb>
c00236ca:	be 01 00 00 00       	mov    esi,0x1
c00236cf:	e9 c7 fd ff ff       	jmp    c002349b <IDE::detect()+0x29>
c00236d4:	50                   	push   eax
c00236d5:	6a 04                	push   0x4
c00236d7:	56                   	push   esi
c00236d8:	53                   	push   ebx
c00236d9:	e8 28 f7 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00236de:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00236e2:	83 c4 0c             	add    esp,0xc
c00236e5:	6a 05                	push   0x5
c00236e7:	56                   	push   esi
c00236e8:	53                   	push   ebx
c00236e9:	e8 18 f7 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00236ee:	83 c4 10             	add    esp,0x10
c00236f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00236f5:	80 fa 14             	cmp    dl,0x14
c00236f8:	75 04                	jne    c00236fe <IDE::detect()+0x28c>
c00236fa:	3c eb                	cmp    al,0xeb
c00236fc:	eb 07                	jmp    c0023705 <IDE::detect()+0x293>
c00236fe:	3c 96                	cmp    al,0x96
c0023700:	75 b1                	jne    c00236b3 <IDE::detect()+0x241>
c0023702:	80 fa 69             	cmp    dl,0x69
c0023705:	75 ac                	jne    c00236b3 <IDE::detect()+0x241>
c0023707:	68 a1 00 00 00       	push   0xa1
c002370c:	6a 07                	push   0x7
c002370e:	56                   	push   esi
c002370f:	53                   	push   ebx
c0023710:	e8 31 f6 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023715:	5f                   	pop    edi
c0023716:	58                   	pop    eax
c0023717:	6a 00                	push   0x0
c0023719:	68 40 42 0f 00       	push   0xf4240
c002371e:	e8 a0 a3 ff ff       	call   c001dac3 <nanoSleep(unsigned long long)>
c0023723:	83 c4 10             	add    esp,0x10
c0023726:	b1 01                	mov    cl,0x1
c0023728:	e9 6b fe ff ff       	jmp    c0023598 <IDE::detect()+0x126>
c002372d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023733:	5b                   	pop    ebx
c0023734:	5e                   	pop    esi
c0023735:	5f                   	pop    edi
c0023736:	5d                   	pop    ebp
c0023737:	c3                   	ret    

c0023738 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023738:	55                   	push   ebp
c0023739:	57                   	push   edi
c002373a:	56                   	push   esi
c002373b:	53                   	push   ebx
c002373c:	83 ec 1c             	sub    esp,0x1c
c002373f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023743:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023747:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002374b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002374f:	88 c3                	mov    bl,al
c0023751:	84 c0                	test   al,al
c0023753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023757:	0f 84 81 00 00 00    	je     c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002375d:	83 ec 0c             	sub    esp,0xc
c0023760:	68 5b bd 02 c0       	push   0xc002bd5b
c0023765:	e8 bb ed fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c002376a:	83 c4 10             	add    esp,0x10
c002376d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023771:	3c 01                	cmp    al,0x1
c0023773:	74 63                	je     c00237d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023775:	3c 02                	cmp    al,0x2
c0023777:	75 53                	jne    c00237cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023779:	d1 e6                	shl    esi,1
c002377b:	09 ee                	or     esi,ebp
c002377d:	50                   	push   eax
c002377e:	89 f0                	mov    eax,esi
c0023780:	6a 01                	push   0x1
c0023782:	0f b6 f0             	movzx  esi,al
c0023785:	c1 e6 06             	shl    esi,0x6
c0023788:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023790:	50                   	push   eax
c0023791:	57                   	push   edi
c0023792:	e8 6f f6 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023797:	83 c4 10             	add    esp,0x10
c002379a:	a8 01                	test   al,0x1
c002379c:	74 02                	je     c00237a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c002379e:	b3 07                	mov    bl,0x7
c00237a0:	a8 02                	test   al,0x2
c00237a2:	74 02                	je     c00237a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00237a4:	b3 03                	mov    bl,0x3
c00237a6:	a8 04                	test   al,0x4
c00237a8:	74 02                	je     c00237ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00237aa:	b3 14                	mov    bl,0x14
c00237ac:	a8 08                	test   al,0x8
c00237ae:	74 02                	je     c00237b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00237b0:	b3 03                	mov    bl,0x3
c00237b2:	a8 10                	test   al,0x10
c00237b4:	74 02                	je     c00237b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00237b6:	b3 15                	mov    bl,0x15
c00237b8:	a8 20                	test   al,0x20
c00237ba:	74 02                	je     c00237be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00237bc:	b3 03                	mov    bl,0x3
c00237be:	a8 40                	test   al,0x40
c00237c0:	74 02                	je     c00237c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00237c2:	b3 16                	mov    bl,0x16
c00237c4:	84 c0                	test   al,al
c00237c6:	79 16                	jns    c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237c8:	b3 0d                	mov    bl,0xd
c00237ca:	eb 12                	jmp    c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237cc:	3c 03                	cmp    al,0x3
c00237ce:	74 0c                	je     c00237dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00237d0:	3c 04                	cmp    al,0x4
c00237d2:	75 0a                	jne    c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237d4:	b3 08                	mov    bl,0x8
c00237d6:	eb 06                	jmp    c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237d8:	b3 13                	mov    bl,0x13
c00237da:	eb 02                	jmp    c00237de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237dc:	b3 17                	mov    bl,0x17
c00237de:	83 c4 1c             	add    esp,0x1c
c00237e1:	88 d8                	mov    al,bl
c00237e3:	5b                   	pop    ebx
c00237e4:	5e                   	pop    esi
c00237e5:	5f                   	pop    edi
c00237e6:	5d                   	pop    ebp
c00237e7:	c3                   	ret    

c00237e8 <IDE::polling(unsigned char, unsigned int)>:
c00237e8:	57                   	push   edi
c00237e9:	56                   	push   esi
c00237ea:	53                   	push   ebx
c00237eb:	bb 04 00 00 00       	mov    ebx,0x4
c00237f0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00237f4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237f9:	52                   	push   edx
c00237fa:	6a 0c                	push   0xc
c00237fc:	56                   	push   esi
c00237fd:	57                   	push   edi
c00237fe:	e8 03 f6 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023803:	83 c4 10             	add    esp,0x10
c0023806:	4b                   	dec    ebx
c0023807:	75 f0                	jne    c00237f9 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023809:	bb a0 86 01 00       	mov    ebx,0x186a0
c002380e:	50                   	push   eax
c002380f:	6a 0c                	push   0xc
c0023811:	56                   	push   esi
c0023812:	57                   	push   edi
c0023813:	e8 ee f5 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023818:	83 c4 10             	add    esp,0x10
c002381b:	a8 01                	test   al,0x1
c002381d:	75 17                	jne    c0023836 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002381f:	a8 20                	test   al,0x20
c0023821:	75 0f                	jne    c0023832 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023823:	4b                   	dec    ebx
c0023824:	74 10                	je     c0023836 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023826:	84 c0                	test   al,al
c0023828:	78 e4                	js     c002380e <IDE::polling(unsigned char, unsigned int)+0x26>
c002382a:	a8 08                	test   al,0x8
c002382c:	74 e0                	je     c002380e <IDE::polling(unsigned char, unsigned int)+0x26>
c002382e:	31 c0                	xor    eax,eax
c0023830:	eb 06                	jmp    c0023838 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023832:	b0 01                	mov    al,0x1
c0023834:	eb 02                	jmp    c0023838 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023836:	b0 02                	mov    al,0x2
c0023838:	5b                   	pop    ebx
c0023839:	5e                   	pop    esi
c002383a:	5f                   	pop    edi
c002383b:	c3                   	ret    

c002383c <SATABus::close(int, int, void*)>:
c002383c:	31 c0                	xor    eax,eax
c002383e:	c3                   	ret    
c002383f:	90                   	nop

c0023840 <SATABus::detect()>:
c0023840:	c3                   	ret    
c0023841:	90                   	nop

c0023842 <SATABus::SATABus()>:
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023849:	83 ec 08             	sub    esp,0x8
c002384c:	68 94 bd 02 c0       	push   0xc002bd94
c0023851:	50                   	push   eax
c0023852:	e8 b5 04 ff ff       	call   c0013d0c <HardDiskController::HardDiskController(char const*)>
c0023857:	83 c4 10             	add    esp,0x10
c002385a:	ba e8 bd 02 c0       	mov    edx,0xc002bde8
c002385f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023863:	89 10                	mov    DWORD PTR [eax],edx
c0023865:	83 ec 0c             	sub    esp,0xc
c0023868:	6a 50                	push   0x50
c002386a:	e8 7a c1 fe ff       	call   c000f9e9 <Phys::allocateContiguousPages(int)>
c002386f:	83 c4 10             	add    esp,0x10
c0023872:	89 c2                	mov    edx,eax
c0023874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023878:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002387e:	83 ec 0c             	sub    esp,0xc
c0023881:	6a 50                	push   0x50
c0023883:	e8 19 d9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0023888:	83 c4 10             	add    esp,0x10
c002388b:	89 c2                	mov    edx,eax
c002388d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023891:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023897:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c002389c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238a0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00238a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238aa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238b0:	83 ec 0c             	sub    esp,0xc
c00238b3:	6a 03                	push   0x3
c00238b5:	6a 50                	push   0x50
c00238b7:	51                   	push   ecx
c00238b8:	52                   	push   edx
c00238b9:	50                   	push   eax
c00238ba:	e8 95 e3 fe ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238bf:	83 c4 20             	add    esp,0x20
c00238c2:	90                   	nop
c00238c3:	83 c4 0c             	add    esp,0xc
c00238c6:	c3                   	ret    
c00238c7:	90                   	nop

c00238c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00238c8:	83 ec 0c             	sub    esp,0xc
c00238cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238cf:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00238d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00238d5:	09 c2                	or     edx,eax
c00238d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00238e3:	31 c0                	xor    eax,eax
c00238e5:	c1 e9 08             	shr    ecx,0x8
c00238e8:	83 e1 0f             	and    ecx,0xf
c00238eb:	39 c8                	cmp    eax,ecx
c00238ed:	74 0a                	je     c00238f9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00238ef:	f6 c2 01             	test   dl,0x1
c00238f2:	74 18                	je     c002390c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00238f4:	d1 ea                	shr    edx,1
c00238f6:	40                   	inc    eax
c00238f7:	eb f2                	jmp    c00238eb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00238f9:	83 ec 0c             	sub    esp,0xc
c00238fc:	68 b8 bd 02 c0       	push   0xc002bdb8
c0023901:	e8 59 63 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0023906:	83 c4 10             	add    esp,0x10
c0023909:	83 c8 ff             	or     eax,0xffffffff
c002390c:	83 c4 0c             	add    esp,0xc
c002390f:	c3                   	ret    

c0023910 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023914:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023917:	89 c2                	mov    edx,eax
c0023919:	c1 ea 08             	shr    edx,0x8
c002391c:	83 e2 0f             	and    edx,0xf
c002391f:	fe ca                	dec    dl
c0023921:	75 31                	jne    c0023954 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023923:	83 e0 0f             	and    eax,0xf
c0023926:	3c 03                	cmp    al,0x3
c0023928:	75 2a                	jne    c0023954 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002392a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002392d:	b8 02 00 00 00       	mov    eax,0x2
c0023932:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023938:	74 1c                	je     c0023956 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002393a:	b8 04 00 00 00       	mov    eax,0x4
c002393f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023945:	74 0f                	je     c0023956 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023947:	31 c0                	xor    eax,eax
c0023949:	83 fa 03             	cmp    edx,0x3
c002394c:	0f 94 c0             	sete   al
c002394f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023953:	c3                   	ret    
c0023954:	31 c0                	xor    eax,eax
c0023956:	c3                   	ret    
c0023957:	90                   	nop

c0023958 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002395c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002395f:	0f ba e2 0f          	bt     edx,0xf
c0023963:	72 f7                	jb     c002395c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023965:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023968:	83 ca 10             	or     edx,0x10
c002396b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002396e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023971:	83 ca 01             	or     edx,0x1
c0023974:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023977:	c3                   	ret    

c0023978 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002397c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002397f:	83 e2 fe             	and    edx,0xfffffffe
c0023982:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023985:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023988:	83 e2 ef             	and    edx,0xffffffef
c002398b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002398e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023991:	0f ba e2 0e          	bt     edx,0xe
c0023995:	72 f7                	jb     c002398e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023997:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002399a:	0f ba e2 0f          	bt     edx,0xf
c002399e:	72 ee                	jb     c002398e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239a0:	c3                   	ret    
c00239a1:	90                   	nop

c00239a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00239a2:	55                   	push   ebp
c00239a3:	57                   	push   edi
c00239a4:	56                   	push   esi
c00239a5:	53                   	push   ebx
c00239a6:	83 ec 1c             	sub    esp,0x1c
c00239a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00239b1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00239b5:	53                   	push   ebx
c00239b6:	89 fd                	mov    ebp,edi
c00239b8:	56                   	push   esi
c00239b9:	c1 e5 0a             	shl    ebp,0xa
c00239bc:	e8 b7 ff ff ff       	call   c0023978 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00239c1:	83 ec 0c             	sub    esp,0xc
c00239c4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00239ca:	01 e8                	add    eax,ebp
c00239cc:	89 03                	mov    DWORD PTR [ebx],eax
c00239ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239d0:	68 00 04 00 00       	push   0x400
c00239d5:	6a 00                	push   0x0
c00239d7:	50                   	push   eax
c00239d8:	e8 73 cd fd ff       	call   c0000750 <memset>
c00239dd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00239e3:	89 fa                	mov    edx,edi
c00239e5:	01 e8                	add    eax,ebp
c00239e7:	c1 e7 0d             	shl    edi,0xd
c00239ea:	89 03                	mov    DWORD PTR [ebx],eax
c00239ec:	c1 e2 08             	shl    edx,0x8
c00239ef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00239f6:	81 c2 00 80 00 00    	add    edx,0x8000
c00239fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a00:	89 d0                	mov    eax,edx
c0023a02:	83 c4 1c             	add    esp,0x1c
c0023a05:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a0b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a0e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a11:	68 00 01 00 00       	push   0x100
c0023a16:	6a 00                	push   0x0
c0023a18:	50                   	push   eax
c0023a19:	e8 32 cd fd ff       	call   c0000750 <memset>
c0023a1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a22:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a28:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a32:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a35:	83 c4 10             	add    esp,0x10
c0023a38:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a3f:	31 ff                	xor    edi,edi
c0023a41:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a47:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a51:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a57:	83 c5 20             	add    ebp,0x20
c0023a5a:	01 f8                	add    eax,edi
c0023a5c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a5f:	52                   	push   edx
c0023a60:	68 00 01 00 00       	push   0x100
c0023a65:	6a 00                	push   0x0
c0023a67:	50                   	push   eax
c0023a68:	e8 e3 cc fd ff       	call   c0000750 <memset>
c0023a6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023a71:	83 c4 10             	add    esp,0x10
c0023a74:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023a7a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023a81:	01 f8                	add    eax,edi
c0023a83:	81 c7 00 01 00 00    	add    edi,0x100
c0023a89:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a8c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023a92:	75 b3                	jne    c0023a47 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023a94:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023a98:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023a9c:	83 c4 1c             	add    esp,0x1c
c0023a9f:	5b                   	pop    ebx
c0023aa0:	5e                   	pop    esi
c0023aa1:	5f                   	pop    edi
c0023aa2:	5d                   	pop    ebp
c0023aa3:	e9 b0 fe ff ff       	jmp    c0023958 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023aa8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023aa8:	55                   	push   ebp
c0023aa9:	57                   	push   edi
c0023aaa:	56                   	push   esi
c0023aab:	53                   	push   ebx
c0023aac:	31 db                	xor    ebx,ebx
c0023aae:	83 ec 0c             	sub    esp,0xc
c0023ab1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ab5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ab9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023abc:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ac2:	74 7a                	je     c0023b3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ac4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023ac8:	89 d8                	mov    eax,ebx
c0023aca:	c1 e0 07             	shl    eax,0x7
c0023acd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ad4:	55                   	push   ebp
c0023ad5:	56                   	push   esi
c0023ad6:	e8 35 fe ff ff       	call   c0023910 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023adb:	5a                   	pop    edx
c0023adc:	83 f8 01             	cmp    eax,0x1
c0023adf:	59                   	pop    ecx
c0023ae0:	75 21                	jne    c0023b03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023ae2:	50                   	push   eax
c0023ae3:	53                   	push   ebx
c0023ae4:	55                   	push   ebp
c0023ae5:	56                   	push   esi
c0023ae6:	e8 b7 fe ff ff       	call   c00239a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023aeb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023af2:	e8 a5 ba fe ff       	call   c000f59c <malloc>
c0023af7:	89 c5                	mov    ebp,eax
c0023af9:	89 04 24             	mov    DWORD PTR [esp],eax
c0023afc:	e8 03 0d 00 00       	call   c0024804 <SATA::SATA()>
c0023b01:	eb 24                	jmp    c0023b27 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023b03:	83 f8 04             	cmp    eax,0x4
c0023b06:	75 36                	jne    c0023b3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b08:	51                   	push   ecx
c0023b09:	53                   	push   ebx
c0023b0a:	55                   	push   ebp
c0023b0b:	56                   	push   esi
c0023b0c:	e8 91 fe ff ff       	call   c00239a2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b11:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b18:	e8 7f ba fe ff       	call   c000f59c <malloc>
c0023b1d:	89 c5                	mov    ebp,eax
c0023b1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b22:	e8 53 10 00 00       	call   c0024b7a <SATAPI::SATAPI()>
c0023b27:	58                   	pop    eax
c0023b28:	5a                   	pop    edx
c0023b29:	55                   	push   ebp
c0023b2a:	56                   	push   esi
c0023b2b:	e8 2e fe fe ff       	call   c001395e <Device::addChild(Device*)>
c0023b30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023b33:	56                   	push   esi
c0023b34:	6a 00                	push   0x0
c0023b36:	53                   	push   ebx
c0023b37:	55                   	push   ebp
c0023b38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023b3b:	83 c4 20             	add    esp,0x20
c0023b3e:	d1 ef                	shr    edi,1
c0023b40:	43                   	inc    ebx
c0023b41:	83 fb 20             	cmp    ebx,0x20
c0023b44:	0f 85 72 ff ff ff    	jne    c0023abc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023b4a:	83 c4 0c             	add    esp,0xc
c0023b4d:	5b                   	pop    ebx
c0023b4e:	5e                   	pop    esi
c0023b4f:	5f                   	pop    edi
c0023b50:	5d                   	pop    ebp
c0023b51:	c3                   	ret    

c0023b52 <SATABus::open(int, int, void*)>:
c0023b52:	83 ec 14             	sub    esp,0x14
c0023b55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b59:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023b5f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023b65:	52                   	push   edx
c0023b66:	50                   	push   eax
c0023b67:	e8 3c ff ff ff       	call   c0023aa8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023b6c:	31 c0                	xor    eax,eax
c0023b6e:	83 c4 1c             	add    esp,0x1c
c0023b71:	c3                   	ret    

c0023b72 <ATA::close(int, int, void*)>:
c0023b72:	83 ec 0c             	sub    esp,0xc
c0023b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b7f:	85 c0                	test   eax,eax
c0023b81:	74 0c                	je     c0023b8f <ATA::close(int, int, void*)+0x1d>
c0023b83:	83 ec 0c             	sub    esp,0xc
c0023b86:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b88:	50                   	push   eax
c0023b89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	31 c0                	xor    eax,eax
c0023b91:	83 c4 0c             	add    esp,0xc
c0023b94:	c3                   	ret    
c0023b95:	90                   	nop

c0023b96 <ATA::powerSaving(PowerSavingLevel)>:
c0023b96:	c3                   	ret    
c0023b97:	90                   	nop

c0023b98 <ATA::ATA()>:
c0023b98:	83 ec 0c             	sub    esp,0xc
c0023b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b9f:	83 ec 04             	sub    esp,0x4
c0023ba2:	68 00 02 00 00       	push   0x200
c0023ba7:	68 b1 be 02 c0       	push   0xc002beb1
c0023bac:	50                   	push   eax
c0023bad:	e8 e2 01 ff ff       	call   c0013d94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023bb2:	83 c4 10             	add    esp,0x10
c0023bb5:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0023bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbe:	89 10                	mov    DWORD PTR [eax],edx
c0023bc0:	90                   	nop
c0023bc1:	83 c4 0c             	add    esp,0xc
c0023bc4:	c3                   	ret    
c0023bc5:	90                   	nop

c0023bc6 <ATA::flush(bool)>:
c0023bc6:	53                   	push   ebx
c0023bc7:	83 ec 08             	sub    esp,0x8
c0023bca:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023bd3:	19 c0                	sbb    eax,eax
c0023bd5:	83 e0 fd             	and    eax,0xfffffffd
c0023bd8:	05 ea 00 00 00       	add    eax,0xea
c0023bdd:	50                   	push   eax
c0023bde:	6a 07                	push   0x7
c0023be0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023be7:	50                   	push   eax
c0023be8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bee:	e8 53 f1 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bf3:	83 c4 0c             	add    esp,0xc
c0023bf6:	6a 00                	push   0x0
c0023bf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bff:	50                   	push   eax
c0023c00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c06:	e8 dd fb ff ff       	call   c00237e8 <IDE::polling(unsigned char, unsigned int)>
c0023c0b:	83 c4 18             	add    esp,0x18
c0023c0e:	5b                   	pop    ebx
c0023c0f:	c3                   	ret    

c0023c10 <ATA::readyForCommand()>:
c0023c10:	56                   	push   esi
c0023c11:	53                   	push   ebx
c0023c12:	31 db                	xor    ebx,ebx
c0023c14:	50                   	push   eax
c0023c15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c19:	50                   	push   eax
c0023c1a:	6a 0c                	push   0xc
c0023c1c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c23:	50                   	push   eax
c0023c24:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c2a:	e8 d7 f1 ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c0023c2f:	83 c4 10             	add    esp,0x10
c0023c32:	a8 88                	test   al,0x88
c0023c34:	74 23                	je     c0023c59 <ATA::readyForCommand()+0x49>
c0023c36:	43                   	inc    ebx
c0023c37:	83 fb 63             	cmp    ebx,0x63
c0023c3a:	7e dd                	jle    c0023c19 <ATA::readyForCommand()+0x9>
c0023c3c:	51                   	push   ecx
c0023c3d:	51                   	push   ecx
c0023c3e:	6a 00                	push   0x0
c0023c40:	68 40 42 0f 00       	push   0xf4240
c0023c45:	e8 79 9e ff ff       	call   c001dac3 <nanoSleep(unsigned long long)>
c0023c4a:	83 c4 10             	add    esp,0x10
c0023c4d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023c53:	75 c4                	jne    c0023c19 <ATA::readyForCommand()+0x9>
c0023c55:	31 c0                	xor    eax,eax
c0023c57:	eb 02                	jmp    c0023c5b <ATA::readyForCommand()+0x4b>
c0023c59:	b0 01                	mov    al,0x1
c0023c5b:	5a                   	pop    edx
c0023c5c:	5b                   	pop    ebx
c0023c5d:	5e                   	pop    esi
c0023c5e:	c3                   	ret    
c0023c5f:	90                   	nop

c0023c60 <ATA::access(unsigned long long, int, void*, bool)>:
c0023c60:	55                   	push   ebp
c0023c61:	57                   	push   edi
c0023c62:	56                   	push   esi
c0023c63:	53                   	push   ebx
c0023c64:	83 ec 2c             	sub    esp,0x2c
c0023c67:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023c6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023c6f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023c73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c77:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023c7b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023c7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023c83:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c8d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023c93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c97:	c1 e0 06             	shl    eax,0x6
c0023c9a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023ca2:	74 5d                	je     c0023d01 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023ca4:	89 fa                	mov    edx,edi
c0023ca6:	89 f0                	mov    eax,esi
c0023ca8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023cac:	c1 ea 1c             	shr    edx,0x1c
c0023caf:	89 d1                	mov    ecx,edx
c0023cb1:	09 c1                	or     ecx,eax
c0023cb3:	74 25                	je     c0023cda <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023cb5:	31 ed                	xor    ebp,ebp
c0023cb7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023cbe:	89 fa                	mov    edx,edi
c0023cc0:	89 f0                	mov    eax,esi
c0023cc2:	0f ad d0             	shrd   eax,edx,cl
c0023cc5:	d3 ea                	shr    edx,cl
c0023cc7:	f6 c1 20             	test   cl,0x20
c0023cca:	74 02                	je     c0023cce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023ccc:	89 d0                	mov    eax,edx
c0023cce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023cd2:	45                   	inc    ebp
c0023cd3:	83 fd 06             	cmp    ebp,0x6
c0023cd6:	75 df                	jne    c0023cb7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023cd8:	eb 76                	jmp    c0023d50 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023cda:	89 f0                	mov    eax,esi
c0023cdc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ce1:	89 fa                	mov    edx,edi
c0023ce3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023cea:	0f ac d0 10          	shrd   eax,edx,0x10
c0023cee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023cf3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023cf7:	c1 ee 18             	shr    esi,0x18
c0023cfa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023cff:	eb 56                	jmp    c0023d57 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d01:	6a 00                	push   0x0
c0023d03:	6a 3f                	push   0x3f
c0023d05:	57                   	push   edi
c0023d06:	56                   	push   esi
c0023d07:	e8 28 29 00 00       	call   c0026634 <__umoddi3>
c0023d0c:	83 c4 10             	add    esp,0x10
c0023d0f:	40                   	inc    eax
c0023d10:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023d14:	6a 00                	push   0x0
c0023d16:	68 f0 03 00 00       	push   0x3f0
c0023d1b:	57                   	push   edi
c0023d1c:	56                   	push   esi
c0023d1d:	e8 12 28 00 00       	call   c0026534 <__udivdi3>
c0023d22:	83 c4 10             	add    esp,0x10
c0023d25:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d2a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d31:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d36:	6a 00                	push   0x0
c0023d38:	6a 3f                	push   0x3f
c0023d3a:	57                   	push   edi
c0023d3b:	56                   	push   esi
c0023d3c:	e8 f3 27 00 00       	call   c0026534 <__udivdi3>
c0023d41:	83 c4 10             	add    esp,0x10
c0023d44:	89 c6                	mov    esi,eax
c0023d46:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023d4b:	83 e6 0f             	and    esi,0xf
c0023d4e:	eb 07                	jmp    c0023d57 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d50:	31 f6                	xor    esi,esi
c0023d52:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023d57:	bf 01 00 00 00       	mov    edi,0x1
c0023d5c:	50                   	push   eax
c0023d5d:	6a 00                	push   0x0
c0023d5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d66:	50                   	push   eax
c0023d67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023d6b:	e8 e2 f1 ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c0023d70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d73:	e8 98 fe ff ff       	call   c0023c10 <ATA::readyForCommand()>
c0023d78:	83 c4 10             	add    esp,0x10
c0023d7b:	84 c0                	test   al,al
c0023d7d:	0f 84 5a 02 00 00    	je     c0023fdd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023d83:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023d89:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023d8f:	c1 e0 04             	shl    eax,0x4
c0023d92:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023d99:	09 c6                	or     esi,eax
c0023d9b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023da0:	75 05                	jne    c0023da7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023da2:	83 ce a0             	or     esi,0xffffffa0
c0023da5:	eb 03                	jmp    c0023daa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023da7:	83 ce e0             	or     esi,0xffffffe0
c0023daa:	89 f0                	mov    eax,esi
c0023dac:	0f b6 f0             	movzx  esi,al
c0023daf:	56                   	push   esi
c0023db0:	6a 06                	push   0x6
c0023db2:	51                   	push   ecx
c0023db3:	52                   	push   edx
c0023db4:	e8 8d ef ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023db9:	83 c4 10             	add    esp,0x10
c0023dbc:	6a 00                	push   0x0
c0023dbe:	6a 01                	push   0x1
c0023dc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dc7:	50                   	push   eax
c0023dc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dce:	e8 73 ef ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ddb:	75 6e                	jne    c0023e4b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023ddd:	6a 00                	push   0x0
c0023ddf:	6a 08                	push   0x8
c0023de1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023de8:	50                   	push   eax
c0023de9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023def:	e8 52 ef ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023df4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023df9:	50                   	push   eax
c0023dfa:	6a 09                	push   0x9
c0023dfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e03:	50                   	push   eax
c0023e04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e0a:	e8 37 ef ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e0f:	83 c4 20             	add    esp,0x20
c0023e12:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023e17:	50                   	push   eax
c0023e18:	6a 0a                	push   0xa
c0023e1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e21:	50                   	push   eax
c0023e22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e28:	e8 19 ef ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023e32:	50                   	push   eax
c0023e33:	6a 0b                	push   0xb
c0023e35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e3c:	50                   	push   eax
c0023e3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e43:	e8 fe ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e48:	83 c4 20             	add    esp,0x20
c0023e4b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023e50:	50                   	push   eax
c0023e51:	6a 02                	push   0x2
c0023e53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e5a:	50                   	push   eax
c0023e5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e61:	e8 e0 ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e66:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023e6b:	50                   	push   eax
c0023e6c:	6a 03                	push   0x3
c0023e6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e75:	50                   	push   eax
c0023e76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e7c:	e8 c5 ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e81:	83 c4 20             	add    esp,0x20
c0023e84:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023e89:	50                   	push   eax
c0023e8a:	6a 04                	push   0x4
c0023e8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e93:	50                   	push   eax
c0023e94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e9a:	e8 a7 ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023ea4:	50                   	push   eax
c0023ea5:	6a 05                	push   0x5
c0023ea7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eae:	50                   	push   eax
c0023eaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb5:	e8 8c ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eba:	83 c4 20             	add    esp,0x20
c0023ebd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ec2:	0f 94 c0             	sete   al
c0023ec5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023eca:	74 09                	je     c0023ed5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023ecc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023ed3:	eb 07                	jmp    c0023edc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023ed5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023edc:	0f b6 c0             	movzx  eax,al
c0023edf:	50                   	push   eax
c0023ee0:	6a 07                	push   0x7
c0023ee2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee9:	50                   	push   eax
c0023eea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ef0:	e8 51 ee ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023ef9:	83 c4 10             	add    esp,0x10
c0023efc:	85 f6                	test   esi,esi
c0023efe:	0f 84 ba 00 00 00    	je     c0023fbe <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f04:	50                   	push   eax
c0023f05:	6a 01                	push   0x1
c0023f07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f0e:	50                   	push   eax
c0023f0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f15:	e8 ce f8 ff ff       	call   c00237e8 <IDE::polling(unsigned char, unsigned int)>
c0023f1a:	83 c4 10             	add    esp,0x10
c0023f1d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f23:	84 c0                	test   al,al
c0023f25:	74 2c                	je     c0023f53 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f27:	0f b6 f8             	movzx  edi,al
c0023f2a:	0f b6 d2             	movzx  edx,dl
c0023f2d:	57                   	push   edi
c0023f2e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023f35:	50                   	push   eax
c0023f36:	52                   	push   edx
c0023f37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f3d:	e8 f6 f7 ff ff       	call   c0023738 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f42:	c7 04 24 0c be 02 c0 	mov    DWORD PTR [esp],0xc002be0c
c0023f49:	e8 d7 e5 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0023f4e:	e9 87 00 00 00       	jmp    c0023fda <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023f53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023f58:	74 33                	je     c0023f8d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023f5a:	31 ed                	xor    ebp,ebp
c0023f5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023f60:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023f64:	50                   	push   eax
c0023f65:	50                   	push   eax
c0023f66:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f6d:	50                   	push   eax
c0023f6e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f74:	e8 bb ed ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c0023f79:	89 c2                	mov    edx,eax
c0023f7b:	89 f8                	mov    eax,edi
c0023f7d:	66 ef                	out    dx,ax
c0023f7f:	45                   	inc    ebp
c0023f80:	83 c4 10             	add    esp,0x10
c0023f83:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023f89:	75 d1                	jne    c0023f5c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023f8b:	eb 23                	jmp    c0023fb0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023f8d:	0f b6 d2             	movzx  edx,dl
c0023f90:	51                   	push   ecx
c0023f91:	51                   	push   ecx
c0023f92:	52                   	push   edx
c0023f93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f99:	e8 96 ed ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c0023f9e:	b9 00 01 00 00       	mov    ecx,0x100
c0023fa3:	89 c2                	mov    edx,eax
c0023fa5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023fa9:	fc                   	cld    
c0023faa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023fad:	83 c4 10             	add    esp,0x10
c0023fb0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023fb8:	4e                   	dec    esi
c0023fb9:	e9 3e ff ff ff       	jmp    c0023efc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023fbe:	31 ff                	xor    edi,edi
c0023fc0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fc5:	74 16                	je     c0023fdd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023fc7:	50                   	push   eax
c0023fc8:	50                   	push   eax
c0023fc9:	31 c0                	xor    eax,eax
c0023fcb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023fd0:	0f 94 c0             	sete   al
c0023fd3:	50                   	push   eax
c0023fd4:	53                   	push   ebx
c0023fd5:	e8 ec fb ff ff       	call   c0023bc6 <ATA::flush(bool)>
c0023fda:	83 c4 10             	add    esp,0x10
c0023fdd:	83 c4 2c             	add    esp,0x2c
c0023fe0:	89 f8                	mov    eax,edi
c0023fe2:	5b                   	pop    ebx
c0023fe3:	5e                   	pop    esi
c0023fe4:	5f                   	pop    edi
c0023fe5:	5d                   	pop    ebp
c0023fe6:	c3                   	ret    
c0023fe7:	90                   	nop

c0023fe8 <ATA::read(unsigned long long, int, void*)>:
c0023fe8:	57                   	push   edi
c0023fe9:	b8 04 00 00 00       	mov    eax,0x4
c0023fee:	56                   	push   esi
c0023fef:	53                   	push   ebx
c0023ff0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ff4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023ff8:	8d 7a ff             	lea    edi,[edx-0x1]
c0023ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023fff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024003:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024009:	77 25                	ja     c0024030 <ATA::read(unsigned long long, int, void*)+0x48>
c002400b:	b8 06 00 00 00       	mov    eax,0x6
c0024010:	85 f6                	test   esi,esi
c0024012:	74 1c                	je     c0024030 <ATA::read(unsigned long long, int, void*)+0x48>
c0024014:	50                   	push   eax
c0024015:	50                   	push   eax
c0024016:	6a 00                	push   0x0
c0024018:	56                   	push   esi
c0024019:	52                   	push   edx
c002401a:	53                   	push   ebx
c002401b:	51                   	push   ecx
c002401c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024020:	e8 3b fc ff ff       	call   c0023c60 <ATA::access(unsigned long long, int, void*, bool)>
c0024025:	83 c4 20             	add    esp,0x20
c0024028:	85 c0                	test   eax,eax
c002402a:	0f 95 c0             	setne  al
c002402d:	0f b6 c0             	movzx  eax,al
c0024030:	5b                   	pop    ebx
c0024031:	5e                   	pop    esi
c0024032:	5f                   	pop    edi
c0024033:	c3                   	ret    

c0024034 <ATA::write(unsigned long long, int, void*)>:
c0024034:	57                   	push   edi
c0024035:	b8 04 00 00 00       	mov    eax,0x4
c002403a:	56                   	push   esi
c002403b:	53                   	push   ebx
c002403c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024040:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024044:	8d 7a ff             	lea    edi,[edx-0x1]
c0024047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002404b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002404f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024055:	77 25                	ja     c002407c <ATA::write(unsigned long long, int, void*)+0x48>
c0024057:	b8 06 00 00 00       	mov    eax,0x6
c002405c:	85 f6                	test   esi,esi
c002405e:	74 1c                	je     c002407c <ATA::write(unsigned long long, int, void*)+0x48>
c0024060:	50                   	push   eax
c0024061:	50                   	push   eax
c0024062:	6a 01                	push   0x1
c0024064:	56                   	push   esi
c0024065:	52                   	push   edx
c0024066:	53                   	push   ebx
c0024067:	51                   	push   ecx
c0024068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002406c:	e8 ef fb ff ff       	call   c0023c60 <ATA::access(unsigned long long, int, void*, bool)>
c0024071:	83 c4 20             	add    esp,0x20
c0024074:	85 c0                	test   eax,eax
c0024076:	0f 95 c0             	setne  al
c0024079:	0f b6 c0             	movzx  eax,al
c002407c:	5b                   	pop    ebx
c002407d:	5e                   	pop    esi
c002407e:	5f                   	pop    edi
c002407f:	c3                   	ret    

c0024080 <ATA::detectCHS()>:
c0024080:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024084:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002408a:	c1 e0 06             	shl    eax,0x6
c002408d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024093:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002409d:	c7 44 24 04 17 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002be17
c00240a5:	e9 b5 5b ff ff       	jmp    c0019c5f <Krnl::panic(char const*)>

c00240aa <ATA::open(int, int, void*)>:
c00240aa:	53                   	push   ebx
c00240ab:	83 ec 08             	sub    esp,0x8
c00240ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00240c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00240c6:	c1 e0 06             	shl    eax,0x6
c00240c9:	01 d0                	add    eax,edx
c00240cb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00240d2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00240d8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00240df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00240e9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00240ef:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00240f6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00240fd:	75 0c                	jne    c002410b <ATA::open(int, int, void*)+0x61>
c00240ff:	83 ec 0c             	sub    esp,0xc
c0024102:	53                   	push   ebx
c0024103:	e8 78 ff ff ff       	call   c0024080 <ATA::detectCHS()>
c0024108:	83 c4 10             	add    esp,0x10
c002410b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024111:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024117:	c1 e0 06             	shl    eax,0x6
c002411a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024121:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002412b:	d1 e8                	shr    eax,1
c002412d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024133:	6a 04                	push   0x4
c0024135:	6a 0c                	push   0xc
c0024137:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002413e:	50                   	push   eax
c002413f:	52                   	push   edx
c0024140:	e8 01 ec ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024145:	90                   	nop
c0024146:	90                   	nop
c0024147:	6a 00                	push   0x0
c0024149:	6a 0c                	push   0xc
c002414b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024152:	50                   	push   eax
c0024153:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024159:	e8 e8 eb ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415e:	83 c4 14             	add    esp,0x14
c0024161:	53                   	push   ebx
c0024162:	e8 95 fc fe ff       	call   c0013dfc <PhysicalDisk::startCache()>
c0024167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002416a:	e8 dd 1e ff ff       	call   c001604c <createPartitionsForDisk(PhysicalDisk*)>
c002416f:	31 c0                	xor    eax,eax
c0024171:	83 c4 18             	add    esp,0x18
c0024174:	5b                   	pop    ebx
c0024175:	c3                   	ret    

c0024176 <ATAPI::write(unsigned long long, int, void*)>:
c0024176:	b8 03 00 00 00       	mov    eax,0x3
c002417b:	c3                   	ret    

c002417c <ATAPI::close(int, int, void*)>:
c002417c:	83 ec 0c             	sub    esp,0xc
c002417f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024183:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024189:	85 c0                	test   eax,eax
c002418b:	74 0c                	je     c0024199 <ATAPI::close(int, int, void*)+0x1d>
c002418d:	83 ec 0c             	sub    esp,0xc
c0024190:	8b 10                	mov    edx,DWORD PTR [eax]
c0024192:	50                   	push   eax
c0024193:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024196:	83 c4 10             	add    esp,0x10
c0024199:	31 c0                	xor    eax,eax
c002419b:	83 c4 0c             	add    esp,0xc
c002419e:	c3                   	ret    
c002419f:	90                   	nop

c00241a0 <ATAPI::ATAPI()>:
c00241a0:	83 ec 0c             	sub    esp,0xc
c00241a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241a7:	83 ec 04             	sub    esp,0x4
c00241aa:	68 00 08 00 00       	push   0x800
c00241af:	68 51 bf 02 c0       	push   0xc002bf51
c00241b4:	50                   	push   eax
c00241b5:	e8 da fb fe ff       	call   c0013d94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00241ba:	83 c4 10             	add    esp,0x10
c00241bd:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c00241c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241c6:	89 10                	mov    DWORD PTR [eax],edx
c00241c8:	90                   	nop
c00241c9:	83 c4 0c             	add    esp,0xc
c00241cc:	c3                   	ret    
c00241cd:	90                   	nop

c00241ce <ATAPI::readyForCommand()>:
c00241ce:	56                   	push   esi
c00241cf:	53                   	push   ebx
c00241d0:	31 db                	xor    ebx,ebx
c00241d2:	50                   	push   eax
c00241d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00241d7:	50                   	push   eax
c00241d8:	6a 0c                	push   0xc
c00241da:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00241e1:	50                   	push   eax
c00241e2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00241e8:	e8 19 ec ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00241ed:	83 c4 10             	add    esp,0x10
c00241f0:	a8 88                	test   al,0x88
c00241f2:	74 23                	je     c0024217 <ATAPI::readyForCommand()+0x49>
c00241f4:	43                   	inc    ebx
c00241f5:	83 fb 63             	cmp    ebx,0x63
c00241f8:	7e dd                	jle    c00241d7 <ATAPI::readyForCommand()+0x9>
c00241fa:	51                   	push   ecx
c00241fb:	51                   	push   ecx
c00241fc:	6a 00                	push   0x0
c00241fe:	68 40 42 0f 00       	push   0xf4240
c0024203:	e8 bb 98 ff ff       	call   c001dac3 <nanoSleep(unsigned long long)>
c0024208:	83 c4 10             	add    esp,0x10
c002420b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024211:	75 c4                	jne    c00241d7 <ATAPI::readyForCommand()+0x9>
c0024213:	31 c0                	xor    eax,eax
c0024215:	eb 02                	jmp    c0024219 <ATAPI::readyForCommand()+0x4b>
c0024217:	b0 01                	mov    al,0x1
c0024219:	5a                   	pop    edx
c002421a:	5b                   	pop    ebx
c002421b:	5e                   	pop    esi
c002421c:	c3                   	ret    
c002421d:	90                   	nop

c002421e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002421e:	55                   	push   ebp
c002421f:	57                   	push   edi
c0024220:	56                   	push   esi
c0024221:	53                   	push   ebx
c0024222:	83 ec 20             	sub    esp,0x20
c0024225:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024229:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002422d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024231:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024235:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024239:	6a 01                	push   0x1
c002423b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024242:	50                   	push   eax
c0024243:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024249:	e8 04 ed ff ff       	call   c0022f52 <IDE::enableIRQs(unsigned char, bool)>
c002424e:	5e                   	pop    esi
c002424f:	58                   	pop    eax
c0024250:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024257:	50                   	push   eax
c0024258:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002425e:	e8 bd ea ff ff       	call   c0022d20 <IDE::prepareInterrupt(unsigned char)>
c0024263:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024266:	e8 63 ff ff ff       	call   c00241ce <ATAPI::readyForCommand()>
c002426b:	83 c4 10             	add    esp,0x10
c002426e:	84 c0                	test   al,al
c0024270:	75 0a                	jne    c002427c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024272:	bb 01 00 00 00       	mov    ebx,0x1
c0024277:	e9 57 02 00 00       	jmp    c00244d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002427c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024282:	c1 e0 04             	shl    eax,0x4
c0024285:	0f b6 c0             	movzx  eax,al
c0024288:	50                   	push   eax
c0024289:	6a 06                	push   0x6
c002428b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024292:	50                   	push   eax
c0024293:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024299:	e8 a8 ea ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429e:	6a 00                	push   0x0
c00242a0:	6a 01                	push   0x1
c00242a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242a9:	50                   	push   eax
c00242aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242b0:	e8 91 ea ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b5:	83 c4 20             	add    esp,0x20
c00242b8:	0f b6 c3             	movzx  eax,bl
c00242bb:	0f b6 df             	movzx  ebx,bh
c00242be:	50                   	push   eax
c00242bf:	6a 04                	push   0x4
c00242c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242c8:	50                   	push   eax
c00242c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242cf:	e8 72 ea ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d4:	53                   	push   ebx
c00242d5:	6a 05                	push   0x5
c00242d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242de:	50                   	push   eax
c00242df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242e5:	e8 5c ea ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ea:	83 c4 20             	add    esp,0x20
c00242ed:	68 a0 00 00 00       	push   0xa0
c00242f2:	6a 07                	push   0x7
c00242f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242fb:	50                   	push   eax
c00242fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024302:	e8 3f ea ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024307:	83 c4 0c             	add    esp,0xc
c002430a:	6a 01                	push   0x1
c002430c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024313:	50                   	push   eax
c0024314:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002431a:	e8 c9 f4 ff ff       	call   c00237e8 <IDE::polling(unsigned char, unsigned int)>
c002431f:	83 c4 10             	add    esp,0x10
c0024322:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024328:	84 c0                	test   al,al
c002432a:	74 23                	je     c002434f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002432c:	0f b6 d8             	movzx  ebx,al
c002432f:	0f b6 d2             	movzx  edx,dl
c0024332:	53                   	push   ebx
c0024333:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002433a:	50                   	push   eax
c002433b:	52                   	push   edx
c002433c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024342:	e8 f1 f3 ff ff       	call   c0023738 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024347:	83 c4 10             	add    esp,0x10
c002434a:	e9 84 01 00 00       	jmp    c00244d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002434f:	0f b6 d2             	movzx  edx,dl
c0024352:	53                   	push   ebx
c0024353:	53                   	push   ebx
c0024354:	52                   	push   edx
c0024355:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002435b:	e8 d4 e9 ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c0024360:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024364:	b9 06 00 00 00       	mov    ecx,0x6
c0024369:	89 c2                	mov    edx,eax
c002436b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002436e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024372:	83 c4 10             	add    esp,0x10
c0024375:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002437b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024382:	85 db                	test   ebx,ebx
c0024384:	0f 84 ec 00 00 00    	je     c0024476 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002438a:	51                   	push   ecx
c002438b:	51                   	push   ecx
c002438c:	52                   	push   edx
c002438d:	50                   	push   eax
c002438e:	e8 21 eb ff ff       	call   c0022eb4 <IDE::waitInterrupt(unsigned char)>
c0024393:	83 c4 10             	add    esp,0x10
c0024396:	84 c0                	test   al,al
c0024398:	0f 84 d4 fe ff ff    	je     c0024272 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002439e:	56                   	push   esi
c002439f:	56                   	push   esi
c00243a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243a7:	50                   	push   eax
c00243a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ae:	e8 6d e9 ff ff       	call   c0022d20 <IDE::prepareInterrupt(unsigned char)>
c00243b3:	83 c4 0c             	add    esp,0xc
c00243b6:	6a 04                	push   0x4
c00243b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243bf:	50                   	push   eax
c00243c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243c6:	e8 3b ea ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00243cb:	83 c4 0c             	add    esp,0xc
c00243ce:	89 c6                	mov    esi,eax
c00243d0:	6a 05                	push   0x5
c00243d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243d9:	50                   	push   eax
c00243da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243e0:	e8 21 ea ff ff       	call   c0022e06 <IDE::read(unsigned char, unsigned char)>
c00243e5:	89 f1                	mov    ecx,esi
c00243e7:	0f b6 c0             	movzx  eax,al
c00243ea:	0f b6 f1             	movzx  esi,cl
c00243ed:	c1 e0 08             	shl    eax,0x8
c00243f0:	09 c6                	or     esi,eax
c00243f2:	d1 fe                	sar    esi,1
c00243f4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024400:	74 41                	je     c0024443 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024402:	31 c9                	xor    ecx,ecx
c0024404:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002440a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024411:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024415:	75 0a                	jne    c0024421 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024417:	01 c9                	add    ecx,ecx
c0024419:	01 cd                	add    ebp,ecx
c002441b:	4b                   	dec    ebx
c002441c:	e9 54 ff ff ff       	jmp    c0024375 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024421:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024426:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002442a:	51                   	push   ecx
c002442b:	51                   	push   ecx
c002442c:	52                   	push   edx
c002442d:	50                   	push   eax
c002442e:	e8 01 e9 ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c0024433:	89 c2                	mov    edx,eax
c0024435:	89 f0                	mov    eax,esi
c0024437:	66 ef                	out    dx,ax
c0024439:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002443d:	83 c4 10             	add    esp,0x10
c0024440:	41                   	inc    ecx
c0024441:	eb c1                	jmp    c0024404 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024443:	31 f6                	xor    esi,esi
c0024445:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002444b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024452:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024456:	75 06                	jne    c002445e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024458:	01 f6                	add    esi,esi
c002445a:	01 f5                	add    ebp,esi
c002445c:	eb bd                	jmp    c002441b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002445e:	51                   	push   ecx
c002445f:	51                   	push   ecx
c0024460:	52                   	push   edx
c0024461:	50                   	push   eax
c0024462:	e8 cd e8 ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c0024467:	89 c2                	mov    edx,eax
c0024469:	66 ed                	in     ax,dx
c002446b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024470:	83 c4 10             	add    esp,0x10
c0024473:	46                   	inc    esi
c0024474:	eb cf                	jmp    c0024445 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024476:	51                   	push   ecx
c0024477:	51                   	push   ecx
c0024478:	52                   	push   edx
c0024479:	50                   	push   eax
c002447a:	e8 35 ea ff ff       	call   c0022eb4 <IDE::waitInterrupt(unsigned char)>
c002447f:	83 c4 10             	add    esp,0x10
c0024482:	84 c0                	test   al,al
c0024484:	0f 84 e8 fd ff ff    	je     c0024272 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002448a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002448f:	52                   	push   edx
c0024490:	52                   	push   edx
c0024491:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024498:	50                   	push   eax
c0024499:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002449f:	e8 7c e8 ff ff       	call   c0022d20 <IDE::prepareInterrupt(unsigned char)>
c00244a4:	83 c4 10             	add    esp,0x10
c00244a7:	50                   	push   eax
c00244a8:	50                   	push   eax
c00244a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b0:	50                   	push   eax
c00244b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244b7:	e8 78 e8 ff ff       	call   c0022d34 <IDE::getBase(unsigned char)>
c00244bc:	8d 50 07             	lea    edx,[eax+0x7]
c00244bf:	ec                   	in     al,dx
c00244c0:	83 c4 10             	add    esp,0x10
c00244c3:	a8 88                	test   al,0x88
c00244c5:	74 0a                	je     c00244d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00244c7:	4b                   	dec    ebx
c00244c8:	75 dd                	jne    c00244a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00244ca:	bb 02 00 00 00       	mov    ebx,0x2
c00244cf:	eb 02                	jmp    c00244d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244d1:	31 db                	xor    ebx,ebx
c00244d3:	83 c4 1c             	add    esp,0x1c
c00244d6:	89 d8                	mov    eax,ebx
c00244d8:	5b                   	pop    ebx
c00244d9:	5e                   	pop    esi
c00244da:	5f                   	pop    edi
c00244db:	5d                   	pop    ebp
c00244dc:	c3                   	ret    
c00244dd:	90                   	nop

c00244de <ATAPI::diskRemoved()>:
c00244de:	83 ec 18             	sub    esp,0x18
c00244e1:	68 5d bf 02 c0       	push   0xc002bf5d
c00244e6:	e8 3a e0 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00244eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244ef:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00244f6:	83 c4 1c             	add    esp,0x1c
c00244f9:	c3                   	ret    

c00244fa <ATAPI::eject()>:
c00244fa:	57                   	push   edi
c00244fb:	b9 03 00 00 00       	mov    ecx,0x3
c0024500:	53                   	push   ebx
c0024501:	83 ec 14             	sub    esp,0x14
c0024504:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024508:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002450c:	fc                   	cld    
c002450d:	31 c0                	xor    eax,eax
c002450f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024511:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024516:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002451b:	50                   	push   eax
c002451c:	50                   	push   eax
c002451d:	6a 00                	push   0x0
c002451f:	6a 00                	push   0x0
c0024521:	6a 00                	push   0x0
c0024523:	6a 02                	push   0x2
c0024525:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024529:	50                   	push   eax
c002452a:	53                   	push   ebx
c002452b:	e8 ee fc ff ff       	call   c002421e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024530:	83 c4 14             	add    esp,0x14
c0024533:	53                   	push   ebx
c0024534:	e8 a5 ff ff ff       	call   c00244de <ATAPI::diskRemoved()>
c0024539:	83 c4 24             	add    esp,0x24
c002453c:	31 c0                	xor    eax,eax
c002453e:	5b                   	pop    ebx
c002453f:	5f                   	pop    edi
c0024540:	c3                   	ret    
c0024541:	90                   	nop

c0024542 <ATAPI::diskInserted()>:
c0024542:	53                   	push   ebx
c0024543:	83 ec 14             	sub    esp,0x14
c0024546:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002454a:	68 74 bf 02 c0       	push   0xc002bf74
c002454f:	e8 d1 df fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0024554:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002455b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002455e:	e8 99 f8 fe ff       	call   c0013dfc <PhysicalDisk::startCache()>
c0024563:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024567:	83 c4 18             	add    esp,0x18
c002456a:	5b                   	pop    ebx
c002456b:	e9 dc 1a ff ff       	jmp    c001604c <createPartitionsForDisk(PhysicalDisk*)>

c0024570 <ATAPI::detectMedia()>:
c0024570:	56                   	push   esi
c0024571:	53                   	push   ebx
c0024572:	83 ec 28             	sub    esp,0x28
c0024575:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024579:	6a 0c                	push   0xc
c002457b:	6a 00                	push   0x0
c002457d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024581:	56                   	push   esi
c0024582:	e8 c9 c1 fd ff       	call   c0000750 <memset>
c0024587:	58                   	pop    eax
c0024588:	5a                   	pop    edx
c0024589:	6a 00                	push   0x0
c002458b:	6a 00                	push   0x0
c002458d:	6a 00                	push   0x0
c002458f:	6a 00                	push   0x0
c0024591:	56                   	push   esi
c0024592:	53                   	push   ebx
c0024593:	e8 86 fc ff ff       	call   c002421e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024598:	83 c4 1c             	add    esp,0x1c
c002459b:	6a 0c                	push   0xc
c002459d:	6a 00                	push   0x0
c002459f:	56                   	push   esi
c00245a0:	e8 ab c1 fd ff       	call   c0000750 <memset>
c00245a5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00245aa:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00245af:	59                   	pop    ecx
c00245b0:	58                   	pop    eax
c00245b1:	6a 01                	push   0x1
c00245b3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00245b7:	50                   	push   eax
c00245b8:	6a 00                	push   0x0
c00245ba:	6a 12                	push   0x12
c00245bc:	56                   	push   esi
c00245bd:	53                   	push   ebx
c00245be:	e8 5b fc ff ff       	call   c002421e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245c3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00245c7:	83 c4 20             	add    esp,0x20
c00245ca:	83 e0 7f             	and    eax,0x7f
c00245cd:	3c 70                	cmp    al,0x70
c00245cf:	74 15                	je     c00245e6 <ATAPI::detectMedia()+0x76>
c00245d1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245d8:	75 0c                	jne    c00245e6 <ATAPI::detectMedia()+0x76>
c00245da:	83 ec 0c             	sub    esp,0xc
c00245dd:	53                   	push   ebx
c00245de:	e8 5f ff ff ff       	call   c0024542 <ATAPI::diskInserted()>
c00245e3:	83 c4 10             	add    esp,0x10
c00245e6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00245ea:	83 e0 0f             	and    eax,0xf
c00245ed:	3c 02                	cmp    al,0x2
c00245ef:	75 1b                	jne    c002460c <ATAPI::detectMedia()+0x9c>
c00245f1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00245f6:	75 2d                	jne    c0024625 <ATAPI::detectMedia()+0xb5>
c00245f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245ff:	74 24                	je     c0024625 <ATAPI::detectMedia()+0xb5>
c0024601:	83 ec 0c             	sub    esp,0xc
c0024604:	53                   	push   ebx
c0024605:	e8 d4 fe ff ff       	call   c00244de <ATAPI::diskRemoved()>
c002460a:	eb 16                	jmp    c0024622 <ATAPI::detectMedia()+0xb2>
c002460c:	84 c0                	test   al,al
c002460e:	75 15                	jne    c0024625 <ATAPI::detectMedia()+0xb5>
c0024610:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024617:	75 0c                	jne    c0024625 <ATAPI::detectMedia()+0xb5>
c0024619:	83 ec 0c             	sub    esp,0xc
c002461c:	53                   	push   ebx
c002461d:	e8 20 ff ff ff       	call   c0024542 <ATAPI::diskInserted()>
c0024622:	83 c4 10             	add    esp,0x10
c0024625:	83 c4 24             	add    esp,0x24
c0024628:	5b                   	pop    ebx
c0024629:	5e                   	pop    esi
c002462a:	c3                   	ret    
c002462b:	90                   	nop

c002462c <ATAPI::open(int, int, void*)>:
c002462c:	53                   	push   ebx
c002462d:	83 ec 08             	sub    esp,0x8
c0024630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024634:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024638:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002463c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024642:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024648:	c1 e0 06             	shl    eax,0x6
c002464b:	01 d0                	add    eax,edx
c002464d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024654:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002465a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024661:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002466b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024671:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024678:	6a 04                	push   0x4
c002467a:	6a 0c                	push   0xc
c002467c:	51                   	push   ecx
c002467d:	52                   	push   edx
c002467e:	e8 c3 e6 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024683:	90                   	nop
c0024684:	90                   	nop
c0024685:	6a 00                	push   0x0
c0024687:	6a 0c                	push   0xc
c0024689:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024690:	50                   	push   eax
c0024691:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024697:	e8 aa e6 ff ff       	call   c0022d46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002469c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00246a3:	83 c4 14             	add    esp,0x14
c00246a6:	53                   	push   ebx
c00246a7:	e8 c4 fe ff ff       	call   c0024570 <ATAPI::detectMedia()>
c00246ac:	31 c0                	xor    eax,eax
c00246ae:	83 c4 18             	add    esp,0x18
c00246b1:	5b                   	pop    ebx
c00246b2:	c3                   	ret    
c00246b3:	90                   	nop

c00246b4 <ATAPI::read(unsigned long long, int, void*)>:
c00246b4:	55                   	push   ebp
c00246b5:	57                   	push   edi
c00246b6:	56                   	push   esi
c00246b7:	53                   	push   ebx
c00246b8:	83 ec 1c             	sub    esp,0x1c
c00246bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246c3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00246c7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00246ce:	74 41                	je     c0024711 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00246d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246d4:	b9 03 00 00 00       	mov    ecx,0x3
c00246d9:	fc                   	cld    
c00246da:	31 c0                	xor    eax,eax
c00246dc:	86 fb                	xchg   bl,bh
c00246de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246e0:	c1 c3 10             	rol    ebx,0x10
c00246e3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00246e8:	89 e8                	mov    eax,ebp
c00246ea:	86 fb                	xchg   bl,bh
c00246ec:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00246f0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00246f4:	50                   	push   eax
c00246f5:	50                   	push   eax
c00246f6:	55                   	push   ebp
c00246f7:	c1 e5 0b             	shl    ebp,0xb
c00246fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00246fe:	6a 00                	push   0x0
c0024700:	55                   	push   ebp
c0024701:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024705:	50                   	push   eax
c0024706:	56                   	push   esi
c0024707:	e8 12 fb ff ff       	call   c002421e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002470c:	83 c4 20             	add    esp,0x20
c002470f:	eb 1a                	jmp    c002472b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024711:	83 ec 0c             	sub    esp,0xc
c0024714:	56                   	push   esi
c0024715:	e8 56 fe ff ff       	call   c0024570 <ATAPI::detectMedia()>
c002471a:	83 c4 10             	add    esp,0x10
c002471d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024724:	75 aa                	jne    c00246d0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024726:	b8 02 00 00 00       	mov    eax,0x2
c002472b:	83 c4 1c             	add    esp,0x1c
c002472e:	5b                   	pop    ebx
c002472f:	5e                   	pop    esi
c0024730:	5f                   	pop    edi
c0024731:	5d                   	pop    ebp
c0024732:	c3                   	ret    
c0024733:	90                   	nop

c0024734 <SATA::close(int, int, void*)>:
c0024734:	83 ec 0c             	sub    esp,0xc
c0024737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024741:	85 c0                	test   eax,eax
c0024743:	74 0c                	je     c0024751 <SATA::close(int, int, void*)+0x1d>
c0024745:	83 ec 0c             	sub    esp,0xc
c0024748:	8b 10                	mov    edx,DWORD PTR [eax]
c002474a:	50                   	push   eax
c002474b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002474e:	83 c4 10             	add    esp,0x10
c0024751:	31 c0                	xor    eax,eax
c0024753:	83 c4 0c             	add    esp,0xc
c0024756:	c3                   	ret    
c0024757:	90                   	nop

c0024758 <SATA::powerSaving(PowerSavingLevel)>:
c0024758:	c3                   	ret    
c0024759:	90                   	nop

c002475a <SATA::open(int, int, void*)>:
c002475a:	56                   	push   esi
c002475b:	53                   	push   ebx
c002475c:	50                   	push   eax
c002475d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024765:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002476f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024775:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002477f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024783:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002478d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024793:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002479a:	e8 a1 b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c002479f:	89 c6                	mov    esi,eax
c00247a1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00247a7:	81 c6 00 10 00 00    	add    esi,0x1000
c00247ad:	e8 8e b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c00247b2:	39 c6                	cmp    esi,eax
c00247b4:	74 10                	je     c00247c6 <SATA::open(int, int, void*)+0x6c>
c00247b6:	83 ec 0c             	sub    esp,0xc
c00247b9:	68 9c be 02 c0       	push   0xc002be9c
c00247be:	e8 9c 54 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00247c3:	83 c4 10             	add    esp,0x10
c00247c6:	83 ec 0c             	sub    esp,0xc
c00247c9:	6a 02                	push   0x2
c00247cb:	e8 d1 c9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00247d0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247d6:	6a 03                	push   0x3
c00247d8:	50                   	push   eax
c00247d9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00247df:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c00247e5:	e8 74 d1 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00247ea:	83 c4 14             	add    esp,0x14
c00247ed:	53                   	push   ebx
c00247ee:	e8 09 f6 fe ff       	call   c0013dfc <PhysicalDisk::startCache()>
c00247f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247f6:	e8 51 18 ff ff       	call   c001604c <createPartitionsForDisk(PhysicalDisk*)>
c00247fb:	83 c4 14             	add    esp,0x14
c00247fe:	31 c0                	xor    eax,eax
c0024800:	5b                   	pop    ebx
c0024801:	5e                   	pop    esi
c0024802:	c3                   	ret    
c0024803:	90                   	nop

c0024804 <SATA::SATA()>:
c0024804:	83 ec 0c             	sub    esp,0xc
c0024807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480b:	83 ec 04             	sub    esp,0x4
c002480e:	68 00 02 00 00       	push   0x200
c0024813:	68 b0 be 02 c0       	push   0xc002beb0
c0024818:	50                   	push   eax
c0024819:	e8 76 f5 fe ff       	call   c0013d94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002481e:	83 c4 10             	add    esp,0x10
c0024821:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c0024826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002482a:	89 10                	mov    DWORD PTR [eax],edx
c002482c:	90                   	nop
c002482d:	83 c4 0c             	add    esp,0xc
c0024830:	c3                   	ret    
c0024831:	90                   	nop

c0024832 <SATA::access(unsigned long long, int, void*, bool)>:
c0024832:	55                   	push   ebp
c0024833:	57                   	push   edi
c0024834:	56                   	push   esi
c0024835:	53                   	push   ebx
c0024836:	83 ec 2c             	sub    esp,0x2c
c0024839:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002483d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024841:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024845:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024849:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002484d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024852:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024856:	7e 10                	jle    c0024868 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024858:	83 ec 0c             	sub    esp,0xc
c002485b:	68 c0 be 02 c0       	push   0xc002bec0
c0024860:	e8 fa 53 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024865:	83 c4 10             	add    esp,0x10
c0024868:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002486e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024874:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002487a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002487e:	89 d0                	mov    eax,edx
c0024880:	c1 e0 07             	shl    eax,0x7
c0024883:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024887:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024891:	51                   	push   ecx
c0024892:	8d 42 02             	lea    eax,[edx+0x2]
c0024895:	51                   	push   ecx
c0024896:	c1 e0 07             	shl    eax,0x7
c0024899:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002489d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00248a1:	50                   	push   eax
c00248a2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00248a8:	e8 1b f0 ff ff       	call   c00238c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00248ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00248b1:	83 c4 10             	add    esp,0x10
c00248b4:	b8 01 00 00 00       	mov    eax,0x1
c00248b9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00248be:	0f 84 cb 01 00 00    	je     c0024a8f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00248c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00248c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248cc:	c1 e0 09             	shl    eax,0x9
c00248cf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00248d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00248d8:	74 0e                	je     c00248e8 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00248da:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00248e0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00248e4:	89 c1                	mov    ecx,eax
c00248e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00248e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00248ec:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00248f2:	8d 42 02             	lea    eax,[edx+0x2]
c00248f5:	c1 e0 07             	shl    eax,0x7
c00248f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00248fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00248fe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024904:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002490a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002490e:	c1 e1 05             	shl    ecx,0x5
c0024911:	01 c8                	add    eax,ecx
c0024913:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024917:	83 e1 01             	and    ecx,0x1
c002491a:	89 ce                	mov    esi,ecx
c002491c:	8a 08                	mov    cl,BYTE PTR [eax]
c002491e:	c1 e6 06             	shl    esi,0x6
c0024921:	83 e1 bf             	and    ecx,0xffffffbf
c0024924:	09 f1                	or     ecx,esi
c0024926:	88 08                	mov    BYTE PTR [eax],cl
c0024928:	8b 08                	mov    ecx,DWORD PTR [eax]
c002492a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024930:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024936:	89 08                	mov    DWORD PTR [eax],ecx
c0024938:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002493e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024944:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002494a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002494d:	50                   	push   eax
c002494e:	68 90 00 00 00       	push   0x90
c0024953:	6a 00                	push   0x0
c0024955:	56                   	push   esi
c0024956:	e8 f5 bd fd ff       	call   c0000750 <memset>
c002495b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024961:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024965:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002496b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002496f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024973:	83 c4 10             	add    esp,0x10
c0024976:	48                   	dec    eax
c0024977:	25 ff ff 3f 00       	and    eax,0x3fffff
c002497c:	89 c1                	mov    ecx,eax
c002497e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024984:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024989:	09 c8                	or     eax,ecx
c002498b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024991:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024994:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002499b:	66 25 00 7f          	and    ax,0x7f00
c002499f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249a3:	66 0d 27 80          	or     ax,0x8027
c00249a7:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00249ac:	66 89 06             	mov    WORD PTR [esi],ax
c00249af:	19 c0                	sbb    eax,eax
c00249b1:	83 e0 f0             	and    eax,0xfffffff0
c00249b4:	83 c0 35             	add    eax,0x35
c00249b7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00249ba:	89 e8                	mov    eax,ebp
c00249bc:	c1 e8 10             	shr    eax,0x10
c00249bf:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00249c2:	89 e8                	mov    eax,ebp
c00249c4:	c1 e8 18             	shr    eax,0x18
c00249c7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00249ca:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00249ce:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00249d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249d5:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00249d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249dc:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00249e0:	89 d6                	mov    esi,edx
c00249e2:	31 c0                	xor    eax,eax
c00249e4:	c1 e6 07             	shl    esi,0x7
c00249e7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00249eb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00249f1:	80 e1 88             	and    cl,0x88
c00249f4:	74 0a                	je     c0024a00 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00249f6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00249fb:	74 0a                	je     c0024a07 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00249fd:	40                   	inc    eax
c00249fe:	eb eb                	jmp    c00249eb <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024a00:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a05:	75 0a                	jne    c0024a11 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024a07:	83 ec 0c             	sub    esp,0xc
c0024a0a:	68 f9 be 02 c0       	push   0xc002bef9
c0024a0f:	eb 56                	jmp    c0024a67 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024a11:	b8 01 00 00 00       	mov    eax,0x1
c0024a16:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024a1a:	c1 e2 07             	shl    edx,0x7
c0024a1d:	d3 e0                	shl    eax,cl
c0024a1f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024a23:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024a29:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024a2f:	85 c8                	test   eax,ecx
c0024a31:	74 20                	je     c0024a53 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024a33:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024a39:	0f ba e1 1e          	bt     ecx,0x1e
c0024a3d:	73 ea                	jae    c0024a29 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024a3f:	83 ec 0c             	sub    esp,0xc
c0024a42:	68 07 bf 02 c0       	push   0xc002bf07
c0024a47:	e8 13 52 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024a4c:	83 c4 10             	add    esp,0x10
c0024a4f:	31 c0                	xor    eax,eax
c0024a51:	eb 3c                	jmp    c0024a8f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a53:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024a59:	0f ba e0 1e          	bt     eax,0x1e
c0024a5d:	73 17                	jae    c0024a76 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024a5f:	83 ec 0c             	sub    esp,0xc
c0024a62:	68 07 bf 02 c0       	push   0xc002bf07
c0024a67:	e8 f3 51 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024a6c:	83 c4 10             	add    esp,0x10
c0024a6f:	b8 01 00 00 00       	mov    eax,0x1
c0024a74:	eb 19                	jmp    c0024a8f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a76:	31 c0                	xor    eax,eax
c0024a78:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a7d:	75 10                	jne    c0024a8f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a7f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024a85:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024a89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024a8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024a8f:	83 c4 2c             	add    esp,0x2c
c0024a92:	5b                   	pop    ebx
c0024a93:	5e                   	pop    esi
c0024a94:	5f                   	pop    edi
c0024a95:	5d                   	pop    ebp
c0024a96:	c3                   	ret    
c0024a97:	90                   	nop

c0024a98 <SATA::read(unsigned long long, int, void*)>:
c0024a98:	57                   	push   edi
c0024a99:	b8 04 00 00 00       	mov    eax,0x4
c0024a9e:	56                   	push   esi
c0024a9f:	53                   	push   ebx
c0024aa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aa4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024aa8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024aab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024aaf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ab3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ab9:	77 25                	ja     c0024ae0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024abb:	b8 06 00 00 00       	mov    eax,0x6
c0024ac0:	85 f6                	test   esi,esi
c0024ac2:	74 1c                	je     c0024ae0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ac4:	50                   	push   eax
c0024ac5:	50                   	push   eax
c0024ac6:	6a 00                	push   0x0
c0024ac8:	56                   	push   esi
c0024ac9:	52                   	push   edx
c0024aca:	53                   	push   ebx
c0024acb:	51                   	push   ecx
c0024acc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ad0:	e8 5d fd ff ff       	call   c0024832 <SATA::access(unsigned long long, int, void*, bool)>
c0024ad5:	83 c4 20             	add    esp,0x20
c0024ad8:	85 c0                	test   eax,eax
c0024ada:	0f 95 c0             	setne  al
c0024add:	0f b6 c0             	movzx  eax,al
c0024ae0:	5b                   	pop    ebx
c0024ae1:	5e                   	pop    esi
c0024ae2:	5f                   	pop    edi
c0024ae3:	c3                   	ret    

c0024ae4 <SATA::write(unsigned long long, int, void*)>:
c0024ae4:	55                   	push   ebp
c0024ae5:	b8 04 00 00 00       	mov    eax,0x4
c0024aea:	57                   	push   edi
c0024aeb:	56                   	push   esi
c0024aec:	53                   	push   ebx
c0024aed:	83 ec 0c             	sub    esp,0xc
c0024af0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024af4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024af8:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024afb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024aff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b03:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024b09:	77 3d                	ja     c0024b48 <SATA::write(unsigned long long, int, void*)+0x64>
c0024b0b:	b8 06 00 00 00       	mov    eax,0x6
c0024b10:	85 ed                	test   ebp,ebp
c0024b12:	74 34                	je     c0024b48 <SATA::write(unsigned long long, int, void*)+0x64>
c0024b14:	c1 e3 09             	shl    ebx,0x9
c0024b17:	01 eb                	add    ebx,ebp
c0024b19:	89 d6                	mov    esi,edx
c0024b1b:	89 cf                	mov    edi,ecx
c0024b1d:	83 c6 01             	add    esi,0x1
c0024b20:	83 d7 00             	adc    edi,0x0
c0024b23:	50                   	push   eax
c0024b24:	50                   	push   eax
c0024b25:	6a 01                	push   0x1
c0024b27:	55                   	push   ebp
c0024b28:	81 c5 00 02 00 00    	add    ebp,0x200
c0024b2e:	6a 01                	push   0x1
c0024b30:	51                   	push   ecx
c0024b31:	52                   	push   edx
c0024b32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b36:	e8 f7 fc ff ff       	call   c0024832 <SATA::access(unsigned long long, int, void*, bool)>
c0024b3b:	83 c4 20             	add    esp,0x20
c0024b3e:	89 f2                	mov    edx,esi
c0024b40:	89 f9                	mov    ecx,edi
c0024b42:	39 dd                	cmp    ebp,ebx
c0024b44:	75 d3                	jne    c0024b19 <SATA::write(unsigned long long, int, void*)+0x35>
c0024b46:	31 c0                	xor    eax,eax
c0024b48:	83 c4 0c             	add    esp,0xc
c0024b4b:	5b                   	pop    ebx
c0024b4c:	5e                   	pop    esi
c0024b4d:	5f                   	pop    edi
c0024b4e:	5d                   	pop    ebp
c0024b4f:	c3                   	ret    

c0024b50 <SATAPI::write(unsigned long long, int, void*)>:
c0024b50:	b8 03 00 00 00       	mov    eax,0x3
c0024b55:	c3                   	ret    

c0024b56 <SATAPI::close(int, int, void*)>:
c0024b56:	83 ec 0c             	sub    esp,0xc
c0024b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b5d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b63:	85 c0                	test   eax,eax
c0024b65:	74 0c                	je     c0024b73 <SATAPI::close(int, int, void*)+0x1d>
c0024b67:	83 ec 0c             	sub    esp,0xc
c0024b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b6c:	50                   	push   eax
c0024b6d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b70:	83 c4 10             	add    esp,0x10
c0024b73:	31 c0                	xor    eax,eax
c0024b75:	83 c4 0c             	add    esp,0xc
c0024b78:	c3                   	ret    
c0024b79:	90                   	nop

c0024b7a <SATAPI::SATAPI()>:
c0024b7a:	83 ec 0c             	sub    esp,0xc
c0024b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b81:	83 ec 04             	sub    esp,0x4
c0024b84:	68 00 08 00 00       	push   0x800
c0024b89:	68 50 bf 02 c0       	push   0xc002bf50
c0024b8e:	50                   	push   eax
c0024b8f:	e8 00 f2 fe ff       	call   c0013d94 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b94:	83 c4 10             	add    esp,0x10
c0024b97:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c0024b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ba0:	89 10                	mov    DWORD PTR [eax],edx
c0024ba2:	90                   	nop
c0024ba3:	83 c4 0c             	add    esp,0xc
c0024ba6:	c3                   	ret    
c0024ba7:	90                   	nop

c0024ba8 <SATAPI::diskRemoved()>:
c0024ba8:	83 ec 18             	sub    esp,0x18
c0024bab:	68 5c bf 02 c0       	push   0xc002bf5c
c0024bb0:	e8 70 d9 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0024bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bb9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024bc0:	83 c4 1c             	add    esp,0x1c
c0024bc3:	c3                   	ret    

c0024bc4 <SATAPI::diskInserted()>:
c0024bc4:	53                   	push   ebx
c0024bc5:	83 ec 14             	sub    esp,0x14
c0024bc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024bcc:	68 73 bf 02 c0       	push   0xc002bf73
c0024bd1:	e8 4f d9 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0024bd6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024bdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024be0:	e8 17 f2 fe ff       	call   c0013dfc <PhysicalDisk::startCache()>
c0024be5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024be9:	83 c4 18             	add    esp,0x18
c0024bec:	5b                   	pop    ebx
c0024bed:	e9 5a 14 ff ff       	jmp    c001604c <createPartitionsForDisk(PhysicalDisk*)>

c0024bf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024bf2:	55                   	push   ebp
c0024bf3:	57                   	push   edi
c0024bf4:	56                   	push   esi
c0024bf5:	53                   	push   ebx
c0024bf6:	83 ec 34             	sub    esp,0x34
c0024bf9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024bfd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024c01:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024c05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c09:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c0d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c1d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024c23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c27:	c1 e0 07             	shl    eax,0x7
c0024c2a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c32:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c40:	8d 58 02             	lea    ebx,[eax+0x2]
c0024c43:	c1 e3 07             	shl    ebx,0x7
c0024c46:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024c4a:	53                   	push   ebx
c0024c4b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c51:	e8 72 ec ff ff       	call   c00238c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c5a:	83 c4 10             	add    esp,0x10
c0024c5d:	b8 01 00 00 00       	mov    eax,0x1
c0024c62:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c67:	0f 84 85 01 00 00    	je     c0024df2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024c6d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c75:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c7b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c85:	c1 e1 05             	shl    ecx,0x5
c0024c88:	01 c8                	add    eax,ecx
c0024c8a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c8c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024c92:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024c98:	89 08                	mov    DWORD PTR [eax],ecx
c0024c9a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ca0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024ca6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024cac:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024caf:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024cb2:	50                   	push   eax
c0024cb3:	68 90 00 00 00       	push   0x90
c0024cb8:	6a 00                	push   0x0
c0024cba:	53                   	push   ebx
c0024cbb:	e8 90 ba fd ff       	call   c0000750 <memset>
c0024cc0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024cc4:	b9 0c 00 00 00       	mov    ecx,0xc
c0024cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ccb:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024cd1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024cd5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024cdb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024cdf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ce3:	48                   	dec    eax
c0024ce4:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ce9:	89 c1                	mov    ecx,eax
c0024ceb:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cf1:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024cf6:	09 c8                	or     eax,ecx
c0024cf8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024cfe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d01:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d08:	66 25 00 7f          	and    ax,0x7f00
c0024d0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024d10:	66 0d 27 80          	or     ax,0x8027
c0024d14:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024d18:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d1b:	89 d0                	mov    eax,edx
c0024d1d:	c1 ea 18             	shr    edx,0x18
c0024d20:	c1 e8 10             	shr    eax,0x10
c0024d23:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d26:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d29:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024d2d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d34:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d37:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024d3b:	83 c4 10             	add    esp,0x10
c0024d3e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d42:	31 c0                	xor    eax,eax
c0024d44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024d48:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024d4e:	80 e2 88             	and    dl,0x88
c0024d51:	74 0a                	je     c0024d5d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024d53:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d58:	74 0a                	je     c0024d64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024d5a:	40                   	inc    eax
c0024d5b:	eb eb                	jmp    c0024d48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024d5d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d62:	75 0f                	jne    c0024d73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024d64:	83 ec 0c             	sub    esp,0xc
c0024d67:	68 f9 be 02 c0       	push   0xc002bef9
c0024d6c:	e8 ee 4e ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024d71:	eb 3f                	jmp    c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024d73:	ba 01 00 00 00       	mov    edx,0x1
c0024d78:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d80:	d3 e2                	shl    edx,cl
c0024d82:	c1 e0 07             	shl    eax,0x7
c0024d85:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024d8b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d8f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024d95:	85 ca                	test   edx,ecx
c0024d97:	74 23                	je     c0024dbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024d99:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024d9f:	0f ba e1 1e          	bt     ecx,0x1e
c0024da3:	73 ea                	jae    c0024d8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024da5:	83 ec 0c             	sub    esp,0xc
c0024da8:	68 8b bf 02 c0       	push   0xc002bf8b
c0024dad:	e8 73 d7 fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0024db2:	83 c4 10             	add    esp,0x10
c0024db5:	b8 01 00 00 00       	mov    eax,0x1
c0024dba:	eb 36                	jmp    c0024df2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024dbc:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024dc2:	0f ba e0 1e          	bt     eax,0x1e
c0024dc6:	73 0a                	jae    c0024dd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024dc8:	83 ec 0c             	sub    esp,0xc
c0024dcb:	68 9e bf 02 c0       	push   0xc002bf9e
c0024dd0:	eb db                	jmp    c0024dad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024dd2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024dd7:	74 17                	je     c0024df0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024dd9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024dde:	74 10                	je     c0024df0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024de0:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024de6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024dea:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024df0:	31 c0                	xor    eax,eax
c0024df2:	83 c4 2c             	add    esp,0x2c
c0024df5:	5b                   	pop    ebx
c0024df6:	5e                   	pop    esi
c0024df7:	5f                   	pop    edi
c0024df8:	5d                   	pop    ebp
c0024df9:	c3                   	ret    

c0024dfa <SATAPI::eject()>:
c0024dfa:	57                   	push   edi
c0024dfb:	b9 03 00 00 00       	mov    ecx,0x3
c0024e00:	53                   	push   ebx
c0024e01:	83 ec 14             	sub    esp,0x14
c0024e04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024e08:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024e0c:	fc                   	cld    
c0024e0d:	31 c0                	xor    eax,eax
c0024e0f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e11:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024e16:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024e1b:	50                   	push   eax
c0024e1c:	6a 00                	push   0x0
c0024e1e:	6a 00                	push   0x0
c0024e20:	6a 00                	push   0x0
c0024e22:	6a 00                	push   0x0
c0024e24:	6a 02                	push   0x2
c0024e26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e2a:	50                   	push   eax
c0024e2b:	53                   	push   ebx
c0024e2c:	e8 c1 fd ff ff       	call   c0024bf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e31:	83 c4 14             	add    esp,0x14
c0024e34:	53                   	push   ebx
c0024e35:	e8 6e fd ff ff       	call   c0024ba8 <SATAPI::diskRemoved()>
c0024e3a:	83 c4 24             	add    esp,0x24
c0024e3d:	31 c0                	xor    eax,eax
c0024e3f:	5b                   	pop    ebx
c0024e40:	5f                   	pop    edi
c0024e41:	c3                   	ret    

c0024e42 <SATAPI::detectMedia()>:
c0024e42:	56                   	push   esi
c0024e43:	53                   	push   ebx
c0024e44:	83 ec 28             	sub    esp,0x28
c0024e47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e4b:	6a 0c                	push   0xc
c0024e4d:	6a 00                	push   0x0
c0024e4f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e53:	56                   	push   esi
c0024e54:	e8 f7 b8 fd ff       	call   c0000750 <memset>
c0024e59:	83 c4 0c             	add    esp,0xc
c0024e5c:	6a 00                	push   0x0
c0024e5e:	6a 00                	push   0x0
c0024e60:	6a 00                	push   0x0
c0024e62:	6a 00                	push   0x0
c0024e64:	6a 00                	push   0x0
c0024e66:	56                   	push   esi
c0024e67:	53                   	push   ebx
c0024e68:	e8 85 fd ff ff       	call   c0024bf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e6d:	83 c4 1c             	add    esp,0x1c
c0024e70:	6a 0c                	push   0xc
c0024e72:	6a 00                	push   0x0
c0024e74:	56                   	push   esi
c0024e75:	e8 d6 b8 fd ff       	call   c0000750 <memset>
c0024e7a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e7f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e84:	83 c4 0c             	add    esp,0xc
c0024e87:	6a 01                	push   0x1
c0024e89:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024e8d:	50                   	push   eax
c0024e8e:	6a 00                	push   0x0
c0024e90:	6a 00                	push   0x0
c0024e92:	6a 12                	push   0x12
c0024e94:	56                   	push   esi
c0024e95:	53                   	push   ebx
c0024e96:	e8 57 fd ff ff       	call   c0024bf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e9b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e9f:	83 c4 20             	add    esp,0x20
c0024ea2:	83 e0 7f             	and    eax,0x7f
c0024ea5:	3c 70                	cmp    al,0x70
c0024ea7:	74 15                	je     c0024ebe <SATAPI::detectMedia()+0x7c>
c0024ea9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024eb0:	75 0c                	jne    c0024ebe <SATAPI::detectMedia()+0x7c>
c0024eb2:	83 ec 0c             	sub    esp,0xc
c0024eb5:	53                   	push   ebx
c0024eb6:	e8 09 fd ff ff       	call   c0024bc4 <SATAPI::diskInserted()>
c0024ebb:	83 c4 10             	add    esp,0x10
c0024ebe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ec2:	83 e0 0f             	and    eax,0xf
c0024ec5:	3c 02                	cmp    al,0x2
c0024ec7:	75 1b                	jne    c0024ee4 <SATAPI::detectMedia()+0xa2>
c0024ec9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ece:	75 2d                	jne    c0024efd <SATAPI::detectMedia()+0xbb>
c0024ed0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ed7:	74 24                	je     c0024efd <SATAPI::detectMedia()+0xbb>
c0024ed9:	83 ec 0c             	sub    esp,0xc
c0024edc:	53                   	push   ebx
c0024edd:	e8 c6 fc ff ff       	call   c0024ba8 <SATAPI::diskRemoved()>
c0024ee2:	eb 16                	jmp    c0024efa <SATAPI::detectMedia()+0xb8>
c0024ee4:	84 c0                	test   al,al
c0024ee6:	75 15                	jne    c0024efd <SATAPI::detectMedia()+0xbb>
c0024ee8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024eef:	75 0c                	jne    c0024efd <SATAPI::detectMedia()+0xbb>
c0024ef1:	83 ec 0c             	sub    esp,0xc
c0024ef4:	53                   	push   ebx
c0024ef5:	e8 ca fc ff ff       	call   c0024bc4 <SATAPI::diskInserted()>
c0024efa:	83 c4 10             	add    esp,0x10
c0024efd:	83 c4 24             	add    esp,0x24
c0024f00:	5b                   	pop    ebx
c0024f01:	5e                   	pop    esi
c0024f02:	c3                   	ret    
c0024f03:	90                   	nop

c0024f04 <SATAPI::open(int, int, void*)>:
c0024f04:	56                   	push   esi
c0024f05:	53                   	push   ebx
c0024f06:	50                   	push   eax
c0024f07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f0f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024f19:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f1f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f2d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f37:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f3d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f44:	e8 f7 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f49:	89 c6                	mov    esi,eax
c0024f4b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f51:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f57:	e8 e4 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f5c:	39 c6                	cmp    esi,eax
c0024f5e:	74 10                	je     c0024f70 <SATAPI::open(int, int, void*)+0x6c>
c0024f60:	83 ec 0c             	sub    esp,0xc
c0024f63:	68 b3 bf 02 c0       	push   0xc002bfb3
c0024f68:	e8 f2 4c ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	83 ec 0c             	sub    esp,0xc
c0024f73:	6a 02                	push   0x2
c0024f75:	e8 27 c2 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0024f7a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024f80:	6a 03                	push   0x3
c0024f82:	50                   	push   eax
c0024f83:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024f89:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0024f8f:	e8 ca c9 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024f94:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024f9b:	83 c4 14             	add    esp,0x14
c0024f9e:	53                   	push   ebx
c0024f9f:	e8 9e fe ff ff       	call   c0024e42 <SATAPI::detectMedia()>
c0024fa4:	83 c4 14             	add    esp,0x14
c0024fa7:	31 c0                	xor    eax,eax
c0024fa9:	5b                   	pop    ebx
c0024faa:	5e                   	pop    esi
c0024fab:	c3                   	ret    

c0024fac <SATAPI::read(unsigned long long, int, void*)>:
c0024fac:	55                   	push   ebp
c0024fad:	57                   	push   edi
c0024fae:	56                   	push   esi
c0024faf:	53                   	push   ebx
c0024fb0:	83 ec 1c             	sub    esp,0x1c
c0024fb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024fb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fbb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024fbf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024fc6:	74 19                	je     c0024fe1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024fc8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024fcd:	7e 2e                	jle    c0024ffd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fcf:	83 ec 0c             	sub    esp,0xc
c0024fd2:	68 c9 bf 02 c0       	push   0xc002bfc9
c0024fd7:	e8 83 4c ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0024fdc:	83 c4 10             	add    esp,0x10
c0024fdf:	eb 1c                	jmp    c0024ffd <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fe1:	83 ec 0c             	sub    esp,0xc
c0024fe4:	55                   	push   ebp
c0024fe5:	e8 58 fe ff ff       	call   c0024e42 <SATAPI::detectMedia()>
c0024fea:	83 c4 10             	add    esp,0x10
c0024fed:	b8 02 00 00 00       	mov    eax,0x2
c0024ff2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024ff9:	75 cd                	jne    c0024fc8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024ffb:	eb 49                	jmp    c0025046 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024ffd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025001:	b9 03 00 00 00       	mov    ecx,0x3
c0025006:	fc                   	cld    
c0025007:	31 c0                	xor    eax,eax
c0025009:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002500b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025010:	89 d8                	mov    eax,ebx
c0025012:	86 e0                	xchg   al,ah
c0025014:	c1 c0 10             	rol    eax,0x10
c0025017:	86 e0                	xchg   al,ah
c0025019:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002501d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025021:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025025:	50                   	push   eax
c0025026:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002502a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002502e:	56                   	push   esi
c002502f:	53                   	push   ebx
c0025030:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025034:	c1 e0 0b             	shl    eax,0xb
c0025037:	50                   	push   eax
c0025038:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002503c:	50                   	push   eax
c002503d:	55                   	push   ebp
c002503e:	e8 af fb ff ff       	call   c0024bf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025043:	83 c4 20             	add    esp,0x20
c0025046:	83 c4 1c             	add    esp,0x1c
c0025049:	5b                   	pop    ebx
c002504a:	5e                   	pop    esi
c002504b:	5f                   	pop    edi
c002504c:	5d                   	pop    ebp
c002504d:	c3                   	ret    

c002504e <AVX::open(int, int, void*)>:
c002504e:	83 ec 0c             	sub    esp,0xc
c0025051:	e8 42 11 00 00       	call   c0026198 <avxInit>
c0025056:	b8 00 00 00 00       	mov    eax,0x0
c002505b:	83 c4 0c             	add    esp,0xc
c002505e:	c3                   	ret    
c002505f:	90                   	nop

c0025060 <AVX::close(int, int, void*)>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	e8 31 11 00 00       	call   c0026199 <avxClose>
c0025068:	b8 00 00 00 00       	mov    eax,0x0
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	c3                   	ret    
c0025071:	90                   	nop

c0025072 <AVX::available()>:
c0025072:	83 ec 0c             	sub    esp,0xc
c0025075:	e8 16 11 00 00       	call   c0026190 <avxDetect>
c002507a:	85 c0                	test   eax,eax
c002507c:	0f 95 c0             	setne  al
c002507f:	83 c4 0c             	add    esp,0xc
c0025082:	c3                   	ret    
c0025083:	90                   	nop

c0025084 <AVX::save(void*)>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002508b:	83 ec 0c             	sub    esp,0xc
c002508e:	50                   	push   eax
c002508f:	e8 02 11 00 00       	call   c0026196 <avxSave>
c0025094:	83 c4 10             	add    esp,0x10
c0025097:	90                   	nop
c0025098:	83 c4 0c             	add    esp,0xc
c002509b:	c3                   	ret    

c002509c <AVX::load(void*)>:
c002509c:	83 ec 0c             	sub    esp,0xc
c002509f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250a3:	83 ec 0c             	sub    esp,0xc
c00250a6:	50                   	push   eax
c00250a7:	e8 eb 10 00 00       	call   c0026197 <avxLoad>
c00250ac:	83 c4 10             	add    esp,0x10
c00250af:	90                   	nop
c00250b0:	83 c4 0c             	add    esp,0xc
c00250b3:	c3                   	ret    

c00250b4 <AVX::AVX()>:
c00250b4:	83 ec 0c             	sub    esp,0xc
c00250b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250bb:	83 ec 08             	sub    esp,0x8
c00250be:	68 2c c0 02 c0       	push   0xc002c02c
c00250c3:	50                   	push   eax
c00250c4:	e8 a9 ed fe ff       	call   c0013e72 <FPU::FPU(char const*)>
c00250c9:	83 c4 10             	add    esp,0x10
c00250cc:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c00250d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d5:	89 10                	mov    DWORD PTR [eax],edx
c00250d7:	90                   	nop
c00250d8:	83 c4 0c             	add    esp,0xc
c00250db:	c3                   	ret    

c00250dc <MMX::available()>:
c00250dc:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00250e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00250e7:	83 e0 20             	and    eax,0x20
c00250ea:	84 c0                	test   al,al
c00250ec:	0f 95 c0             	setne  al
c00250ef:	c3                   	ret    

c00250f0 <MMX::open(int, int, void*)>:
c00250f0:	83 ec 0c             	sub    esp,0xc
c00250f3:	e8 2a 11 00 00       	call   c0026222 <x87Init>
c00250f8:	b8 00 00 00 00       	mov    eax,0x0
c00250fd:	83 c4 0c             	add    esp,0xc
c0025100:	c3                   	ret    
c0025101:	90                   	nop

c0025102 <MMX::close(int, int, void*)>:
c0025102:	83 ec 0c             	sub    esp,0xc
c0025105:	e8 32 11 00 00       	call   c002623c <x87Close>
c002510a:	b8 00 00 00 00       	mov    eax,0x0
c002510f:	83 c4 0c             	add    esp,0xc
c0025112:	c3                   	ret    
c0025113:	90                   	nop

c0025114 <MMX::save(void*)>:
c0025114:	83 ec 0c             	sub    esp,0xc
c0025117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002511b:	83 ec 0c             	sub    esp,0xc
c002511e:	50                   	push   eax
c002511f:	e8 ed 10 00 00       	call   c0026211 <x87Save>
c0025124:	83 c4 10             	add    esp,0x10
c0025127:	90                   	nop
c0025128:	83 c4 0c             	add    esp,0xc
c002512b:	c3                   	ret    

c002512c <MMX::load(void*)>:
c002512c:	83 ec 0c             	sub    esp,0xc
c002512f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025133:	83 ec 0c             	sub    esp,0xc
c0025136:	50                   	push   eax
c0025137:	e8 de 10 00 00       	call   c002621a <x87Load>
c002513c:	83 c4 10             	add    esp,0x10
c002513f:	90                   	nop
c0025140:	83 c4 0c             	add    esp,0xc
c0025143:	c3                   	ret    

c0025144 <MMX::MMX()>:
c0025144:	83 ec 0c             	sub    esp,0xc
c0025147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514b:	83 ec 08             	sub    esp,0x8
c002514e:	68 6c c0 02 c0       	push   0xc002c06c
c0025153:	50                   	push   eax
c0025154:	e8 19 ed fe ff       	call   c0013e72 <FPU::FPU(char const*)>
c0025159:	83 c4 10             	add    esp,0x10
c002515c:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	89 10                	mov    DWORD PTR [eax],edx
c0025167:	90                   	nop
c0025168:	83 c4 0c             	add    esp,0xc
c002516b:	c3                   	ret    

c002516c <SSE::open(int, int, void*)>:
c002516c:	83 ec 0c             	sub    esp,0xc
c002516f:	e8 60 10 00 00       	call   c00261d4 <sseInit>
c0025174:	b8 00 00 00 00       	mov    eax,0x0
c0025179:	83 c4 0c             	add    esp,0xc
c002517c:	c3                   	ret    
c002517d:	90                   	nop

c002517e <SSE::close(int, int, void*)>:
c002517e:	83 ec 0c             	sub    esp,0xc
c0025181:	e8 5e 10 00 00       	call   c00261e4 <sseClose>
c0025186:	b8 00 00 00 00       	mov    eax,0x0
c002518b:	83 c4 0c             	add    esp,0xc
c002518e:	c3                   	ret    
c002518f:	90                   	nop

c0025190 <SSE::available()>:
c0025190:	83 ec 1c             	sub    esp,0x1c
c0025193:	e8 18 10 00 00       	call   c00261b0 <absolutelyNoChanceInHell>
c0025198:	85 c0                	test   eax,eax
c002519a:	0f 95 c0             	setne  al
c002519d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00251a1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00251a5:	83 c4 1c             	add    esp,0x1c
c00251a8:	c3                   	ret    
c00251a9:	90                   	nop

c00251aa <SSE::save(void*)>:
c00251aa:	83 ec 0c             	sub    esp,0xc
c00251ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251b1:	83 ec 0c             	sub    esp,0xc
c00251b4:	50                   	push   eax
c00251b5:	e8 0e 10 00 00       	call   c00261c8 <sseSave>
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	90                   	nop
c00251be:	83 c4 0c             	add    esp,0xc
c00251c1:	c3                   	ret    

c00251c2 <SSE::load(void*)>:
c00251c2:	83 ec 0c             	sub    esp,0xc
c00251c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251c9:	83 ec 0c             	sub    esp,0xc
c00251cc:	50                   	push   eax
c00251cd:	e8 fc 0f 00 00       	call   c00261ce <sseLoad>
c00251d2:	83 c4 10             	add    esp,0x10
c00251d5:	90                   	nop
c00251d6:	83 c4 0c             	add    esp,0xc
c00251d9:	c3                   	ret    

c00251da <SSE::SSE()>:
c00251da:	83 ec 0c             	sub    esp,0xc
c00251dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e1:	83 ec 08             	sub    esp,0x8
c00251e4:	68 ac c0 02 c0       	push   0xc002c0ac
c00251e9:	50                   	push   eax
c00251ea:	e8 83 ec fe ff       	call   c0013e72 <FPU::FPU(char const*)>
c00251ef:	83 c4 10             	add    esp,0x10
c00251f2:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c00251f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251fb:	89 10                	mov    DWORD PTR [eax],edx
c00251fd:	90                   	nop
c00251fe:	83 c4 0c             	add    esp,0xc
c0025201:	c3                   	ret    

c0025202 <x87::open(int, int, void*)>:
c0025202:	83 ec 0c             	sub    esp,0xc
c0025205:	e8 18 10 00 00       	call   c0026222 <x87Init>
c002520a:	b8 00 00 00 00       	mov    eax,0x0
c002520f:	83 c4 0c             	add    esp,0xc
c0025212:	c3                   	ret    
c0025213:	90                   	nop

c0025214 <x87::close(int, int, void*)>:
c0025214:	83 ec 0c             	sub    esp,0xc
c0025217:	e8 20 10 00 00       	call   c002623c <x87Close>
c002521c:	b8 00 00 00 00       	mov    eax,0x0
c0025221:	83 c4 0c             	add    esp,0xc
c0025224:	c3                   	ret    
c0025225:	90                   	nop

c0025226 <x87::available()>:
c0025226:	83 ec 0c             	sub    esp,0xc
c0025229:	e8 c8 0f 00 00       	call   c00261f6 <x87Detect>
c002522e:	85 c0                	test   eax,eax
c0025230:	0f 95 c0             	setne  al
c0025233:	83 c4 0c             	add    esp,0xc
c0025236:	c3                   	ret    
c0025237:	90                   	nop

c0025238 <x87::save(void*)>:
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002523f:	83 ec 0c             	sub    esp,0xc
c0025242:	50                   	push   eax
c0025243:	e8 c9 0f 00 00       	call   c0026211 <x87Save>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	90                   	nop
c002524c:	83 c4 0c             	add    esp,0xc
c002524f:	c3                   	ret    

c0025250 <x87::load(void*)>:
c0025250:	83 ec 0c             	sub    esp,0xc
c0025253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025257:	83 ec 0c             	sub    esp,0xc
c002525a:	50                   	push   eax
c002525b:	e8 ba 0f 00 00       	call   c002621a <x87Load>
c0025260:	83 c4 10             	add    esp,0x10
c0025263:	90                   	nop
c0025264:	83 c4 0c             	add    esp,0xc
c0025267:	c3                   	ret    

c0025268 <x87::x87()>:
c0025268:	83 ec 0c             	sub    esp,0xc
c002526b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002526f:	83 ec 08             	sub    esp,0x8
c0025272:	68 ec c0 02 c0       	push   0xc002c0ec
c0025277:	50                   	push   eax
c0025278:	e8 f5 eb fe ff       	call   c0013e72 <FPU::FPU(char const*)>
c002527d:	83 c4 10             	add    esp,0x10
c0025280:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0025285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025289:	89 10                	mov    DWORD PTR [eax],edx
c002528b:	90                   	nop
c002528c:	83 c4 0c             	add    esp,0xc
c002528f:	c3                   	ret    

c0025290 <APIC::disable()>:
c0025290:	90                   	nop
c0025291:	c3                   	ret    

c0025292 <APIC::close(int, int, void*)>:
c0025292:	55                   	push   ebp
c0025293:	89 e5                	mov    ebp,esp
c0025295:	83 ec 08             	sub    esp,0x8
c0025298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002529b:	8b 00                	mov    eax,DWORD PTR [eax]
c002529d:	83 c0 3c             	add    eax,0x3c
c00252a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00252a2:	83 ec 0c             	sub    esp,0xc
c00252a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252a8:	ff d0                	call   eax
c00252aa:	83 c4 10             	add    esp,0x10
c00252ad:	b8 00 00 00 00       	mov    eax,0x0
c00252b2:	c9                   	leave  
c00252b3:	c3                   	ret    

c00252b4 <IOAPIC::close(int, int, void*)>:
c00252b4:	b8 00 00 00 00       	mov    eax,0x0
c00252b9:	c3                   	ret    

c00252ba <APIC::io_wait()>:
c00252ba:	eb 00                	jmp    c00252bc <APIC::io_wait()+0x2>
c00252bc:	eb 00                	jmp    c00252be <APIC::io_wait()+0x4>
c00252be:	90                   	nop
c00252bf:	c3                   	ret    

c00252c0 <APIC::getBase()>:
c00252c0:	55                   	push   ebp
c00252c1:	89 e5                	mov    ebp,esp
c00252c3:	83 ec 18             	sub    esp,0x18
c00252c6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00252cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252d1:	83 e0 08             	and    eax,0x8
c00252d4:	84 c0                	test   al,al
c00252d6:	75 07                	jne    c00252df <APIC::getBase()+0x1f>
c00252d8:	b8 00 00 00 00       	mov    eax,0x0
c00252dd:	eb 21                	jmp    c0025300 <APIC::getBase()+0x40>
c00252df:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00252e4:	83 ec 08             	sub    esp,0x8
c00252e7:	6a 1b                	push   0x1b
c00252e9:	50                   	push   eax
c00252ea:	e8 51 98 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00252ef:	83 c4 10             	add    esp,0x10
c00252f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00252f5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00252f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00252fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025300:	c9                   	leave  
c0025301:	c3                   	ret    

c0025302 <APIC::eoi(unsigned char)>:
c0025302:	55                   	push   ebp
c0025303:	89 e5                	mov    ebp,esp
c0025305:	83 ec 28             	sub    esp,0x28
c0025308:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002530b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002530e:	83 ec 0c             	sub    esp,0xc
c0025311:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025314:	e8 a7 ff ff ff       	call   c00252c0 <APIC::getBase()>
c0025319:	83 c4 10             	add    esp,0x10
c002531c:	05 b0 00 00 00       	add    eax,0xb0
c0025321:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025324:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025327:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002532d:	90                   	nop
c002532e:	c9                   	leave  
c002532f:	c3                   	ret    

c0025330 <APIC::open(int, int, void*)>:
c0025330:	55                   	push   ebp
c0025331:	89 e5                	mov    ebp,esp
c0025333:	57                   	push   edi
c0025334:	56                   	push   esi
c0025335:	53                   	push   ebx
c0025336:	83 ec 2c             	sub    esp,0x2c
c0025339:	83 ec 0c             	sub    esp,0xc
c002533c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002533f:	e8 7c ff ff ff       	call   c00252c0 <APIC::getBase()>
c0025344:	83 c4 10             	add    esp,0x10
c0025347:	89 c2                	mov    edx,eax
c0025349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002534c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025352:	0f b6 f8             	movzx  edi,al
c0025355:	89 d0                	mov    eax,edx
c0025357:	ba 00 00 00 00       	mov    edx,0x0
c002535c:	89 c1                	mov    ecx,eax
c002535e:	80 e5 ff             	and    ch,0xff
c0025361:	89 cb                	mov    ebx,ecx
c0025363:	0f b6 f2             	movzx  esi,dl
c0025366:	89 d8                	mov    eax,ebx
c0025368:	89 f2                	mov    edx,esi
c002536a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002536d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025370:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025374:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025378:	83 e0 00             	and    eax,0x0
c002537b:	09 d0                	or     eax,edx
c002537d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025384:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002538a:	8d 50 01             	lea    edx,[eax+0x1]
c002538d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025390:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025396:	0f b6 d0             	movzx  edx,al
c0025399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002539c:	83 c2 08             	add    edx,0x8
c002539f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00253a3:	0f b6 c9             	movzx  ecx,cl
c00253a6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00253ac:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253b6:	e8 05 ff ff ff       	call   c00252c0 <APIC::getBase()>
c00253bb:	83 c4 10             	add    esp,0x10
c00253be:	05 f0 00 00 00       	add    eax,0xf0
c00253c3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00253c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00253cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00253ce:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00253d5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00253dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253df:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00253e2:	89 10                	mov    DWORD PTR [eax],edx
c00253e4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00253eb:	a1 70 fe 02 c0       	mov    eax,ds:0xc002fe70
c00253f0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00253f3:	7d 7c                	jge    c0025471 <APIC::open(int, int, void*)+0x141>
c00253f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253f8:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c00253ff:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025402:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025405:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c002540c:	c1 e8 08             	shr    eax,0x8
c002540f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025413:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025416:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c002541d:	c1 e8 18             	shr    eax,0x18
c0025420:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025423:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025427:	75 40                	jne    c0025469 <APIC::open(int, int, void*)+0x139>
c0025429:	83 ec 0c             	sub    esp,0xc
c002542c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002542f:	e8 8c fe ff ff       	call   c00252c0 <APIC::getBase()>
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002543b:	75 07                	jne    c0025444 <APIC::open(int, int, void*)+0x114>
c002543d:	ba 60 03 00 00       	mov    edx,0x360
c0025442:	eb 05                	jmp    c0025449 <APIC::open(int, int, void*)+0x119>
c0025444:	ba 50 03 00 00       	mov    edx,0x350
c0025449:	01 d0                	add    eax,edx
c002544b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002544e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025451:	8b 00                	mov    eax,DWORD PTR [eax]
c0025453:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025456:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002545d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025461:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025464:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025467:	89 10                	mov    DWORD PTR [eax],edx
c0025469:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002546c:	e9 7a ff ff ff       	jmp    c00253eb <APIC::open(int, int, void*)+0xbb>
c0025471:	b8 00 00 00 00       	mov    eax,0x0
c0025476:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025479:	5b                   	pop    ebx
c002547a:	5e                   	pop    esi
c002547b:	5f                   	pop    edi
c002547c:	5d                   	pop    ebp
c002547d:	c3                   	ret    

c002547e <IOAPIC::IOAPIC()>:
c002547e:	83 ec 0c             	sub    esp,0xc
c0025481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025485:	83 ec 08             	sub    esp,0x8
c0025488:	68 2c c1 02 c0       	push   0xc002c12c
c002548d:	50                   	push   eax
c002548e:	e8 cf e6 fe ff       	call   c0013b62 <Device::Device(char const*)>
c0025493:	83 c4 10             	add    esp,0x10
c0025496:	ba 54 c2 02 c0       	mov    edx,0xc002c254
c002549b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549f:	89 10                	mov    DWORD PTR [eax],edx
c00254a1:	90                   	nop
c00254a2:	83 c4 0c             	add    esp,0xc
c00254a5:	c3                   	ret    

c00254a6 <APIC::APIC()>:
c00254a6:	53                   	push   ebx
c00254a7:	83 ec 18             	sub    esp,0x18
c00254aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254ae:	83 ec 08             	sub    esp,0x8
c00254b1:	68 34 c1 02 c0       	push   0xc002c134
c00254b6:	50                   	push   eax
c00254b7:	e8 10 ee fe ff       	call   c00142cc <InterruptController::InterruptController(char const*)>
c00254bc:	83 c4 10             	add    esp,0x10
c00254bf:	ba 0c c2 02 c0       	mov    edx,0xc002c20c
c00254c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254c8:	89 10                	mov    DWORD PTR [eax],edx
c00254ca:	a0 40 19 03 c0       	mov    al,ds:0xc0031940
c00254cf:	83 f0 01             	xor    eax,0x1
c00254d2:	84 c0                	test   al,al
c00254d4:	0f 84 a1 00 00 00    	je     c002557b <APIC::APIC()+0xd5>
c00254da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00254df:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00254e4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00254e8:	0f 83 86 00 00 00    	jae    c0025574 <APIC::APIC()+0xce>
c00254ee:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00254f6:	83 ec 0c             	sub    esp,0xc
c00254f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00254fd:	e8 9a a0 fe ff       	call   c000f59c <malloc>
c0025502:	83 c4 10             	add    esp,0x10
c0025505:	89 c3                	mov    ebx,eax
c0025507:	83 ec 0c             	sub    esp,0xc
c002550a:	53                   	push   ebx
c002550b:	e8 6e ff ff ff       	call   c002547e <IOAPIC::IOAPIC()>
c0025510:	83 c4 10             	add    esp,0x10
c0025513:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025517:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002551c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025520:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0025527:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c002552c:	40                   	inc    eax
c002552d:	a3 00 19 03 c0       	mov    ds:0xc0031900,eax
c0025532:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025537:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002553d:	83 ec 08             	sub    esp,0x8
c0025540:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025544:	50                   	push   eax
c0025545:	e8 14 e4 fe ff       	call   c001395e <Device::addChild(Device*)>
c002554a:	83 c4 10             	add    esp,0x10
c002554d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025551:	8b 00                	mov    eax,DWORD PTR [eax]
c0025553:	83 c0 08             	add    eax,0x8
c0025556:	8b 00                	mov    eax,DWORD PTR [eax]
c0025558:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002555d:	6a 00                	push   0x0
c002555f:	6a 00                	push   0x0
c0025561:	52                   	push   edx
c0025562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025566:	ff d0                	call   eax
c0025568:	83 c4 10             	add    esp,0x10
c002556b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002556f:	e9 6b ff ff ff       	jmp    c00254df <APIC::APIC()+0x39>
c0025574:	c6 05 40 19 03 c0 01 	mov    BYTE PTR ds:0xc0031940,0x1
c002557b:	90                   	nop
c002557c:	83 c4 18             	add    esp,0x18
c002557f:	5b                   	pop    ebx
c0025580:	c3                   	ret    
c0025581:	90                   	nop

c0025582 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025582:	55                   	push   ebp
c0025583:	89 e5                	mov    ebp,esp
c0025585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025588:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002558e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025591:	72 1d                	jb     c00255b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025596:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002559f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00255a5:	01 d0                	add    eax,edx
c00255a7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00255aa:	73 04                	jae    c00255b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00255ac:	b0 01                	mov    al,0x1
c00255ae:	eb 02                	jmp    c00255b2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00255b0:	b0 00                	mov    al,0x0
c00255b2:	5d                   	pop    ebp
c00255b3:	c3                   	ret    

c00255b4 <IOAPIC::read(int)>:
c00255b4:	55                   	push   ebp
c00255b5:	89 e5                	mov    ebp,esp
c00255b7:	83 ec 10             	sub    esp,0x10
c00255ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00255c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00255c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255c9:	0f b6 d0             	movzx  edx,al
c00255cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255cf:	89 10                	mov    DWORD PTR [eax],edx
c00255d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255d4:	83 c0 10             	add    eax,0x10
c00255d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00255d9:	c9                   	leave  
c00255da:	c3                   	ret    
c00255db:	90                   	nop

c00255dc <IOAPIC::open(int, int, void*)>:
c00255dc:	55                   	push   ebp
c00255dd:	89 e5                	mov    ebp,esp
c00255df:	57                   	push   edi
c00255e0:	56                   	push   esi
c00255e1:	53                   	push   ebx
c00255e2:	83 ec 0c             	sub    esp,0xc
c00255e5:	83 ec 0c             	sub    esp,0xc
c00255e8:	68 5f c1 02 c0       	push   0xc002c15f
c00255ed:	e8 33 cf fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c00255f2:	83 c4 10             	add    esp,0x10
c00255f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00255fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025604:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002560a:	8b 14 85 60 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd00a0]
c0025611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025614:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002561d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025623:	8b 14 85 e0 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0020]
c002562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002562d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025636:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002563f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025645:	0f b6 f8             	movzx  edi,al
c0025648:	89 d0                	mov    eax,edx
c002564a:	ba 00 00 00 00       	mov    edx,0x0
c002564f:	89 c1                	mov    ecx,eax
c0025651:	80 e5 ff             	and    ch,0xff
c0025654:	89 cb                	mov    ebx,ecx
c0025656:	0f b6 f2             	movzx  esi,dl
c0025659:	89 d8                	mov    eax,ebx
c002565b:	89 f2                	mov    edx,esi
c002565d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025660:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025663:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025667:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002566b:	83 e0 00             	and    eax,0x0
c002566e:	09 d0                	or     eax,edx
c0025670:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025677:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002567d:	8d 50 01             	lea    edx,[eax+0x1]
c0025680:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025683:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025689:	0f b6 d0             	movzx  edx,al
c002568c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002568f:	83 c2 08             	add    edx,0x8
c0025692:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025696:	0f b6 c9             	movzx  ecx,cl
c0025699:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002569f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256a3:	83 ec 08             	sub    esp,0x8
c00256a6:	6a 01                	push   0x1
c00256a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ab:	e8 04 ff ff ff       	call   c00255b4 <IOAPIC::read(int)>
c00256b0:	83 c4 10             	add    esp,0x10
c00256b3:	c1 f8 10             	sar    eax,0x10
c00256b6:	0f b6 c0             	movzx  eax,al
c00256b9:	8d 50 01             	lea    edx,[eax+0x1]
c00256bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00256c5:	b8 00 00 00 00       	mov    eax,0x0
c00256ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256cd:	5b                   	pop    ebx
c00256ce:	5e                   	pop    esi
c00256cf:	5f                   	pop    edi
c00256d0:	5d                   	pop    ebp
c00256d1:	c3                   	ret    

c00256d2 <IOAPIC::write(int, int)>:
c00256d2:	55                   	push   ebp
c00256d3:	89 e5                	mov    ebp,esp
c00256d5:	83 ec 10             	sub    esp,0x10
c00256d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256e7:	0f b6 d0             	movzx  edx,al
c00256ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256ed:	89 10                	mov    DWORD PTR [eax],edx
c00256ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256f2:	8d 50 10             	lea    edx,[eax+0x10]
c00256f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256f8:	89 02                	mov    DWORD PTR [edx],eax
c00256fa:	90                   	nop
c00256fb:	c9                   	leave  
c00256fc:	c3                   	ret    
c00256fd:	90                   	nop

c00256fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00256fe:	55                   	push   ebp
c00256ff:	89 e5                	mov    ebp,esp
c0025701:	53                   	push   ebx
c0025702:	83 ec 2c             	sub    esp,0x2c
c0025705:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025708:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002570b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002570e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025711:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025714:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025717:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002571a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002571d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025720:	88 d8                	mov    al,bl
c0025722:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025725:	88 c8                	mov    al,cl
c0025727:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002572a:	88 d0                	mov    al,dl
c002572c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002572f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025733:	83 c0 08             	add    eax,0x8
c0025736:	01 c0                	add    eax,eax
c0025738:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002573b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002573f:	83 c0 08             	add    eax,0x8
c0025742:	01 c0                	add    eax,eax
c0025744:	40                   	inc    eax
c0025745:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025748:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002574b:	50                   	push   eax
c002574c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002574f:	e8 60 fe ff ff       	call   c00255b4 <IOAPIC::read(int)>
c0025754:	83 c4 08             	add    esp,0x8
c0025757:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002575a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025761:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025764:	c1 e0 18             	shl    eax,0x18
c0025767:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002576a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002576d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025770:	52                   	push   edx
c0025771:	50                   	push   eax
c0025772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025775:	e8 58 ff ff ff       	call   c00256d2 <IOAPIC::write(int, int)>
c002577a:	83 c4 0c             	add    esp,0xc
c002577d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025780:	50                   	push   eax
c0025781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025784:	e8 2b fe ff ff       	call   c00255b4 <IOAPIC::read(int)>
c0025789:	83 c4 08             	add    esp,0x8
c002578c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002578f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025796:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002579d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00257a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00257a8:	74 09                	je     c00257b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00257aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00257b1:	eb 07                	jmp    c00257ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00257b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00257ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00257be:	74 09                	je     c00257c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00257c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00257c7:	eb 07                	jmp    c00257d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00257c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00257d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00257d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00257db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00257de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00257e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257e4:	52                   	push   edx
c00257e5:	50                   	push   eax
c00257e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e9:	e8 e4 fe ff ff       	call   c00256d2 <IOAPIC::write(int, int)>
c00257ee:	83 c4 0c             	add    esp,0xc
c00257f1:	90                   	nop
c00257f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00257f5:	c9                   	leave  
c00257f6:	c3                   	ret    
c00257f7:	90                   	nop

c00257f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00257f8:	55                   	push   ebp
c00257f9:	89 e5                	mov    ebp,esp
c00257fb:	57                   	push   edi
c00257fc:	56                   	push   esi
c00257fd:	53                   	push   ebx
c00257fe:	83 ec 2c             	sub    esp,0x2c
c0025801:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025804:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025807:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002580b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002580f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025813:	74 5a                	je     c002586f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025815:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025819:	7f 44                	jg     c002585f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002581b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002581e:	05 00 c8 02 c0       	add    eax,0xc002c800
c0025823:	8a 00                	mov    al,BYTE PTR [eax]
c0025825:	0f b6 c0             	movzx  eax,al
c0025828:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002582b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002582e:	66 8b 84 00 00 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0100]
c0025836:	0f b7 c0             	movzx  eax,ax
c0025839:	83 e0 02             	and    eax,0x2
c002583c:	85 c0                	test   eax,eax
c002583e:	74 04                	je     c0025844 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025840:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025844:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025847:	66 8b 84 00 00 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0100]
c002584f:	0f b7 c0             	movzx  eax,ax
c0025852:	83 e0 08             	and    eax,0x8
c0025855:	85 c0                	test   eax,eax
c0025857:	74 16                	je     c002586f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025859:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002585d:	eb 10                	jmp    c002586f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002585f:	83 ec 0c             	sub    esp,0xc
c0025862:	68 70 c1 02 c0       	push   0xc002c170
c0025867:	e8 f3 43 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002586c:	83 c4 10             	add    esp,0x10
c002586f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025873:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c0025878:	83 ec 08             	sub    esp,0x8
c002587b:	50                   	push   eax
c002587c:	68 a8 c1 02 c0       	push   0xc002c1a8
c0025881:	e8 9f cc fe ff       	call   c0012525 <Dbg::kprintf(char const*, ...)>
c0025886:	83 c4 10             	add    esp,0x10
c0025889:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025890:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c0025895:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025898:	7d 67                	jge    c0025901 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002589a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002589d:	8b 04 85 20 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6e0]
c00258a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258a7:	83 ec 08             	sub    esp,0x8
c00258aa:	52                   	push   edx
c00258ab:	50                   	push   eax
c00258ac:	e8 d1 fc ff ff       	call   c0025582 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00258b1:	83 c4 10             	add    esp,0x10
c00258b4:	84 c0                	test   al,al
c00258b6:	74 44                	je     c00258fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00258b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258bb:	8b 1c 85 20 19 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce6e0]
c00258c2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00258c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258c9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00258cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258d0:	83 c0 20             	add    eax,0x20
c00258d3:	0f b6 f0             	movzx  esi,al
c00258d6:	b8 00 00 00 00       	mov    eax,0x0
c00258db:	99                   	cdq    
c00258dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00258df:	0f b6 c9             	movzx  ecx,cl
c00258e2:	83 ec 04             	sub    esp,0x4
c00258e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00258e8:	57                   	push   edi
c00258e9:	56                   	push   esi
c00258ea:	52                   	push   edx
c00258eb:	50                   	push   eax
c00258ec:	51                   	push   ecx
c00258ed:	53                   	push   ebx
c00258ee:	e8 0b fe ff ff       	call   c00256fe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00258f3:	83 c4 20             	add    esp,0x20
c00258f6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00258fa:	eb 05                	jmp    c0025901 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00258fc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00258ff:	eb 8f                	jmp    c0025890 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025901:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025904:	83 f0 01             	xor    eax,0x1
c0025907:	84 c0                	test   al,al
c0025909:	74 10                	je     c002591b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002590b:	83 ec 0c             	sub    esp,0xc
c002590e:	68 bf c1 02 c0       	push   0xc002c1bf
c0025913:	e8 47 43 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0025918:	83 c4 10             	add    esp,0x10
c002591b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002591f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025926:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002592a:	7f 65                	jg     c0025991 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002592c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025932:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025939:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002593c:	01 ca                	add    edx,ecx
c002593e:	83 c2 54             	add    edx,0x54
c0025941:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025945:	85 c0                	test   eax,eax
c0025947:	75 43                	jne    c002598c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002594f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025956:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025959:	01 ca                	add    edx,ecx
c002595b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002595e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025961:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025968:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002596b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025972:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025975:	01 ca                	add    edx,ecx
c0025977:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002597d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025980:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025984:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025987:	83 e8 20             	sub    eax,0x20
c002598a:	eb 1a                	jmp    c00259a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002598c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002598f:	eb 95                	jmp    c0025926 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	68 cc c1 02 c0       	push   0xc002c1cc
c0025999:	e8 c1 42 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002599e:	83 c4 10             	add    esp,0x10
c00259a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00259a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259a9:	5b                   	pop    ebx
c00259aa:	5e                   	pop    esi
c00259ab:	5f                   	pop    edi
c00259ac:	5d                   	pop    ebp
c00259ad:	c3                   	ret    

c00259ae <PIC::disable()>:
c00259ae:	55                   	push   ebp
c00259af:	89 e5                	mov    ebp,esp
c00259b1:	83 ec 10             	sub    esp,0x10
c00259b4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00259ba:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00259be:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00259c1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00259c5:	ee                   	out    dx,al
c00259c6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00259cc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00259d0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00259d3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00259d7:	ee                   	out    dx,al
c00259d8:	90                   	nop
c00259d9:	c9                   	leave  
c00259da:	c3                   	ret    
c00259db:	90                   	nop

c00259dc <PIC::close(int, int, void*)>:
c00259dc:	55                   	push   ebp
c00259dd:	89 e5                	mov    ebp,esp
c00259df:	83 ec 08             	sub    esp,0x8
c00259e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259e7:	83 c0 3c             	add    eax,0x3c
c00259ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ec:	83 ec 0c             	sub    esp,0xc
c00259ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f2:	ff d0                	call   eax
c00259f4:	83 c4 10             	add    esp,0x10
c00259f7:	b8 00 00 00 00       	mov    eax,0x0
c00259fc:	c9                   	leave  
c00259fd:	c3                   	ret    

c00259fe <PIC::PIC()>:
c00259fe:	83 ec 0c             	sub    esp,0xc
c0025a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a05:	83 ec 08             	sub    esp,0x8
c0025a08:	68 78 c2 02 c0       	push   0xc002c278
c0025a0d:	50                   	push   eax
c0025a0e:	e8 b9 e8 fe ff       	call   c00142cc <InterruptController::InterruptController(char const*)>
c0025a13:	83 c4 10             	add    esp,0x10
c0025a16:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0025a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a1f:	89 10                	mov    DWORD PTR [eax],edx
c0025a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a2b:	0f b6 d0             	movzx  edx,al
c0025a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a32:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a43:	0f b6 d0             	movzx  edx,al
c0025a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a4a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a59:	8d 50 01             	lea    edx,[eax+0x1]
c0025a5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a60:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a66:	0f b6 d0             	movzx  edx,al
c0025a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a6d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025a71:	83 e1 3f             	and    ecx,0x3f
c0025a74:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a82:	0f b6 d0             	movzx  edx,al
c0025a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a89:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a9a:	0f b6 d0             	movzx  edx,al
c0025a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ab0:	8d 50 01             	lea    edx,[eax+0x1]
c0025ab3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ab7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025abd:	0f b6 d0             	movzx  edx,al
c0025ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ac8:	83 e1 3f             	and    ecx,0x3f
c0025acb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025acf:	90                   	nop
c0025ad0:	83 c4 0c             	add    esp,0xc
c0025ad3:	c3                   	ret    

c0025ad4 <PIC::ioWait()>:
c0025ad4:	eb 00                	jmp    c0025ad6 <PIC::ioWait()+0x2>
c0025ad6:	eb 00                	jmp    c0025ad8 <PIC::ioWait()+0x4>
c0025ad8:	90                   	nop
c0025ad9:	c3                   	ret    

c0025ada <PIC::getIRQReg(int)>:
c0025ada:	55                   	push   ebp
c0025adb:	89 e5                	mov    ebp,esp
c0025add:	83 ec 10             	sub    esp,0x10
c0025ae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ae3:	0f b6 c0             	movzx  eax,al
c0025ae6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025aec:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025aef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025af2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025af6:	ee                   	out    dx,al
c0025af7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025afa:	0f b6 c0             	movzx  eax,al
c0025afd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b03:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025b06:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025b09:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025b0d:	ee                   	out    dx,al
c0025b0e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025b14:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025b18:	89 c2                	mov    edx,eax
c0025b1a:	ec                   	in     al,dx
c0025b1b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025b1e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b21:	0f b6 c0             	movzx  eax,al
c0025b24:	c1 e0 08             	shl    eax,0x8
c0025b27:	89 c1                	mov    ecx,eax
c0025b29:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025b2f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025b33:	89 c2                	mov    edx,eax
c0025b35:	ec                   	in     al,dx
c0025b36:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025b39:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b3c:	0f b6 c0             	movzx  eax,al
c0025b3f:	09 c8                	or     eax,ecx
c0025b41:	c9                   	leave  
c0025b42:	c3                   	ret    
c0025b43:	90                   	nop

c0025b44 <PIC::eoi(unsigned char)>:
c0025b44:	55                   	push   ebp
c0025b45:	89 e5                	mov    ebp,esp
c0025b47:	83 ec 14             	sub    esp,0x14
c0025b4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b4d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025b50:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b54:	75 1e                	jne    c0025b74 <PIC::eoi(unsigned char)+0x30>
c0025b56:	6a 0b                	push   0xb
c0025b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b5b:	e8 7a ff ff ff       	call   c0025ada <PIC::getIRQReg(int)>
c0025b60:	83 c4 08             	add    esp,0x8
c0025b63:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025b67:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025b6b:	25 80 00 00 00       	and    eax,0x80
c0025b70:	85 c0                	test   eax,eax
c0025b72:	74 5f                	je     c0025bd3 <PIC::eoi(unsigned char)+0x8f>
c0025b74:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025b78:	75 2d                	jne    c0025ba7 <PIC::eoi(unsigned char)+0x63>
c0025b7a:	6a 0b                	push   0xb
c0025b7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b7f:	e8 56 ff ff ff       	call   c0025ada <PIC::getIRQReg(int)>
c0025b84:	83 c4 08             	add    esp,0x8
c0025b87:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025b8b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b8e:	66 85 c0             	test   ax,ax
c0025b91:	78 14                	js     c0025ba7 <PIC::eoi(unsigned char)+0x63>
c0025b93:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025b99:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025b9d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ba0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ba4:	ee                   	out    dx,al
c0025ba5:	eb 2d                	jmp    c0025bd4 <PIC::eoi(unsigned char)+0x90>
c0025ba7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025bab:	76 12                	jbe    c0025bbf <PIC::eoi(unsigned char)+0x7b>
c0025bad:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025bb3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025bb7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bba:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bbe:	ee                   	out    dx,al
c0025bbf:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bc5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025bc9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bcc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bd0:	ee                   	out    dx,al
c0025bd1:	eb 01                	jmp    c0025bd4 <PIC::eoi(unsigned char)+0x90>
c0025bd3:	90                   	nop
c0025bd4:	c9                   	leave  
c0025bd5:	c3                   	ret    

c0025bd6 <PIC::remap()>:
c0025bd6:	55                   	push   ebp
c0025bd7:	89 e5                	mov    ebp,esp
c0025bd9:	83 ec 48             	sub    esp,0x48
c0025bdc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025be3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025bea:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025bf0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025bf3:	89 c2                	mov    edx,eax
c0025bf5:	ec                   	in     al,dx
c0025bf6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025bf9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025bfc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025bff:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025c05:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025c08:	89 c2                	mov    edx,eax
c0025c0a:	ec                   	in     al,dx
c0025c0b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025c0e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025c11:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025c14:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025c1a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025c1e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025c21:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025c24:	ee                   	out    dx,al
c0025c25:	83 ec 0c             	sub    esp,0xc
c0025c28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c2b:	e8 a4 fe ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025c30:	83 c4 10             	add    esp,0x10
c0025c33:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025c39:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025c3d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025c40:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c43:	ee                   	out    dx,al
c0025c44:	83 ec 0c             	sub    esp,0xc
c0025c47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c4a:	e8 85 fe ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025c4f:	83 c4 10             	add    esp,0x10
c0025c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c55:	0f b6 c0             	movzx  eax,al
c0025c58:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025c5e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025c61:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025c64:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025c67:	ee                   	out    dx,al
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c6e:	e8 61 fe ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025c73:	83 c4 10             	add    esp,0x10
c0025c76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c79:	0f b6 c0             	movzx  eax,al
c0025c7c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025c82:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025c85:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025c88:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025c8b:	ee                   	out    dx,al
c0025c8c:	83 ec 0c             	sub    esp,0xc
c0025c8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c92:	e8 3d fe ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025c97:	83 c4 10             	add    esp,0x10
c0025c9a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025ca0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025ca4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025ca7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025caa:	ee                   	out    dx,al
c0025cab:	83 ec 0c             	sub    esp,0xc
c0025cae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cb1:	e8 1e fe ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025cb6:	83 c4 10             	add    esp,0x10
c0025cb9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025cbf:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025cc3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025cc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cc9:	ee                   	out    dx,al
c0025cca:	83 ec 0c             	sub    esp,0xc
c0025ccd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cd0:	e8 ff fd ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025cd5:	83 c4 10             	add    esp,0x10
c0025cd8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025cde:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ce2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ce5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ce8:	ee                   	out    dx,al
c0025ce9:	83 ec 0c             	sub    esp,0xc
c0025cec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cef:	e8 e0 fd ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025cf4:	83 c4 10             	add    esp,0x10
c0025cf7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025cfd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025d01:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025d04:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d07:	ee                   	out    dx,al
c0025d08:	83 ec 0c             	sub    esp,0xc
c0025d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d0e:	e8 c1 fd ff ff       	call   c0025ad4 <PIC::ioWait()>
c0025d13:	83 c4 10             	add    esp,0x10
c0025d16:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025d1a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025d20:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025d23:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025d26:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d29:	ee                   	out    dx,al
c0025d2a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025d2e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025d34:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025d37:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025d3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d3d:	ee                   	out    dx,al
c0025d3e:	90                   	nop
c0025d3f:	c9                   	leave  
c0025d40:	c3                   	ret    
c0025d41:	90                   	nop

c0025d42 <PIC::open(int, int, void*)>:
c0025d42:	55                   	push   ebp
c0025d43:	89 e5                	mov    ebp,esp
c0025d45:	83 ec 18             	sub    esp,0x18
c0025d48:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025d4e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025d52:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d55:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d59:	ee                   	out    dx,al
c0025d5a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025d60:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025d64:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d67:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d6b:	ee                   	out    dx,al
c0025d6c:	83 ec 0c             	sub    esp,0xc
c0025d6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d72:	e8 5f fe ff ff       	call   c0025bd6 <PIC::remap()>
c0025d77:	83 c4 10             	add    esp,0x10
c0025d7a:	b8 00 00 00 00       	mov    eax,0x0
c0025d7f:	c9                   	leave  
c0025d80:	c3                   	ret    
c0025d81:	90                   	nop

c0025d82 <APICTimer::close(int, int, void*)>:
c0025d82:	b8 00 00 00 00       	mov    eax,0x0
c0025d87:	c3                   	ret    

c0025d88 <apicTimerHandler(regs*, void*)>:
c0025d88:	83 ec 0c             	sub    esp,0xc
c0025d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d91:	99                   	cdq    
c0025d92:	52                   	push   edx
c0025d93:	50                   	push   eax
c0025d94:	6a 00                	push   0x0
c0025d96:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025d9b:	e8 94 07 00 00       	call   c0026534 <__udivdi3>
c0025da0:	83 c4 10             	add    esp,0x10
c0025da3:	83 ec 08             	sub    esp,0x8
c0025da6:	52                   	push   edx
c0025da7:	50                   	push   eax
c0025da8:	e8 44 06 ff ff       	call   c00163f1 <timerHandler(unsigned long long)>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	90                   	nop
c0025db1:	83 c4 0c             	add    esp,0xc
c0025db4:	c3                   	ret    
c0025db5:	90                   	nop

c0025db6 <APICTimer::write(int)>:
c0025db6:	53                   	push   ebx
c0025db7:	83 ec 28             	sub    esp,0x28
c0025dba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025dbe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025dc2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025dc8:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025dcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025dd3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025dd9:	83 ec 0c             	sub    esp,0xc
c0025ddc:	50                   	push   eax
c0025ddd:	e8 de f4 ff ff       	call   c00252c0 <APIC::getBase()>
c0025de2:	83 c4 10             	add    esp,0x10
c0025de5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025de9:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0025dee:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0025df4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025df8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e00:	05 e0 03 00 00       	add    eax,0x3e0
c0025e05:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e0f:	05 80 03 00 00       	add    eax,0x380
c0025e14:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025e1a:	fb                   	sti    
c0025e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e23:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025e28:	83 d2 00             	adc    edx,0x0
c0025e2b:	89 c1                	mov    ecx,eax
c0025e2d:	89 d3                	mov    ebx,edx
c0025e2f:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0025e34:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0025e3a:	39 c8                	cmp    eax,ecx
c0025e3c:	89 d0                	mov    eax,edx
c0025e3e:	19 d8                	sbb    eax,ebx
c0025e40:	73 02                	jae    c0025e44 <APICTimer::write(int)+0x8e>
c0025e42:	eb d7                	jmp    c0025e1b <APICTimer::write(int)+0x65>
c0025e44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e48:	05 20 03 00 00       	add    eax,0x320
c0025e4d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e57:	05 90 03 00 00       	add    eax,0x390
c0025e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e5e:	f7 d0                	not    eax
c0025e60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e6c:	ba 00 00 00 00       	mov    edx,0x0
c0025e71:	f7 f3                	div    ebx
c0025e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025e77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e7b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e81:	0d 00 00 02 00       	or     eax,0x20000
c0025e86:	89 c2                	mov    edx,eax
c0025e88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e8c:	05 20 03 00 00       	add    eax,0x320
c0025e91:	89 10                	mov    DWORD PTR [eax],edx
c0025e93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e97:	05 e0 03 00 00       	add    eax,0x3e0
c0025e9c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ea2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ea6:	05 80 03 00 00       	add    eax,0x380
c0025eab:	89 c2                	mov    edx,eax
c0025ead:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025eb1:	89 02                	mov    DWORD PTR [edx],eax
c0025eb3:	90                   	nop
c0025eb4:	83 c4 28             	add    esp,0x28
c0025eb7:	5b                   	pop    ebx
c0025eb8:	c3                   	ret    
c0025eb9:	90                   	nop

c0025eba <APICTimer::open(int, int, void*)>:
c0025eba:	57                   	push   edi
c0025ebb:	56                   	push   esi
c0025ebc:	53                   	push   ebx
c0025ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ec3:	83 c0 24             	add    eax,0x24
c0025ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ec8:	83 ec 08             	sub    esp,0x8
c0025ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ecf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ed3:	ff d0                	call   eax
c0025ed5:	83 c4 10             	add    esp,0x10
c0025ed8:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025edd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ee3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ee9:	83 ec 0c             	sub    esp,0xc
c0025eec:	50                   	push   eax
c0025eed:	e8 ce f3 ff ff       	call   c00252c0 <APIC::getBase()>
c0025ef2:	83 c4 10             	add    esp,0x10
c0025ef5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f05:	0f b6 f8             	movzx  edi,al
c0025f08:	89 d0                	mov    eax,edx
c0025f0a:	ba 00 00 00 00       	mov    edx,0x0
c0025f0f:	89 c1                	mov    ecx,eax
c0025f11:	80 e5 ff             	and    ch,0xff
c0025f14:	89 cb                	mov    ebx,ecx
c0025f16:	0f b6 f2             	movzx  esi,dl
c0025f19:	89 d8                	mov    eax,ebx
c0025f1b:	89 f2                	mov    edx,esi
c0025f1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f21:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f24:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f28:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f2c:	83 e0 00             	and    eax,0x0
c0025f2f:	09 d0                	or     eax,edx
c0025f31:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f3f:	8d 50 01             	lea    edx,[eax+0x1]
c0025f42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f46:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f4c:	0f b6 d0             	movzx  edx,al
c0025f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f53:	83 c2 08             	add    edx,0x8
c0025f56:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f5a:	0f b6 c9             	movzx  ecx,cl
c0025f5d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025f63:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f6f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f7d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025f83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f87:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025f8d:	83 ec 0c             	sub    esp,0xc
c0025f90:	51                   	push   ecx
c0025f91:	6a 01                	push   0x1
c0025f93:	68 88 5d 02 c0       	push   0xc0025d88
c0025f98:	52                   	push   edx
c0025f99:	50                   	push   eax
c0025f9a:	e8 37 d9 fe ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025f9f:	83 c4 20             	add    esp,0x20
c0025fa2:	89 c2                	mov    edx,eax
c0025fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025fae:	b8 00 00 00 00       	mov    eax,0x0
c0025fb3:	5b                   	pop    ebx
c0025fb4:	5e                   	pop    esi
c0025fb5:	5f                   	pop    edi
c0025fb6:	c3                   	ret    
c0025fb7:	90                   	nop

c0025fb8 <APICTimer::APICTimer()>:
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	83 ec 08             	sub    esp,0x8
c0025fc2:	68 e4 c2 02 c0       	push   0xc002c2e4
c0025fc7:	50                   	push   eax
c0025fc8:	e8 95 03 ff ff       	call   c0016362 <Timer::Timer(char const*)>
c0025fcd:	83 c4 10             	add    esp,0x10
c0025fd0:	ba f8 c2 02 c0       	mov    edx,0xc002c2f8
c0025fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd9:	89 10                	mov    DWORD PTR [eax],edx
c0025fdb:	90                   	nop
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	c3                   	ret    

c0025fe0 <PIT::write(int)>:
c0025fe0:	83 ec 10             	sub    esp,0x10
c0025fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025feb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025ff5:	a3 44 19 03 c0       	mov    ds:0xc0031944,eax
c0025ffa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025fff:	99                   	cdq    
c0026000:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026008:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002600f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026014:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026018:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002601d:	ee                   	out    dx,al
c002601e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026022:	0f b6 c0             	movzx  eax,al
c0026025:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002602c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026030:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026034:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026039:	ee                   	out    dx,al
c002603a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002603e:	c1 f8 08             	sar    eax,0x8
c0026041:	0f b6 c0             	movzx  eax,al
c0026044:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002604b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002604f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026053:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026058:	ee                   	out    dx,al
c0026059:	90                   	nop
c002605a:	83 c4 10             	add    esp,0x10
c002605d:	c3                   	ret    

c002605e <pitHandler(regs*, void*)>:
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c0026066:	99                   	cdq    
c0026067:	52                   	push   edx
c0026068:	50                   	push   eax
c0026069:	6a 00                	push   0x0
c002606b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026070:	e8 bf 04 00 00       	call   c0026534 <__udivdi3>
c0026075:	83 c4 10             	add    esp,0x10
c0026078:	83 ec 08             	sub    esp,0x8
c002607b:	52                   	push   edx
c002607c:	50                   	push   eax
c002607d:	e8 6f 03 ff ff       	call   c00163f1 <timerHandler(unsigned long long)>
c0026082:	83 c4 10             	add    esp,0x10
c0026085:	90                   	nop
c0026086:	83 c4 0c             	add    esp,0xc
c0026089:	c3                   	ret    

c002608a <PIT::open(int, int, void*)>:
c002608a:	83 ec 0c             	sub    esp,0xc
c002608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026091:	8b 00                	mov    eax,DWORD PTR [eax]
c0026093:	83 c0 24             	add    eax,0x24
c0026096:	8b 00                	mov    eax,DWORD PTR [eax]
c0026098:	83 ec 08             	sub    esp,0x8
c002609b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002609f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260a3:	ff d0                	call   eax
c00260a5:	83 c4 10             	add    esp,0x10
c00260a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ac:	83 ec 0c             	sub    esp,0xc
c00260af:	6a 00                	push   0x0
c00260b1:	6a 01                	push   0x1
c00260b3:	68 5e 60 02 c0       	push   0xc002605e
c00260b8:	6a 00                	push   0x0
c00260ba:	50                   	push   eax
c00260bb:	e8 16 d8 fe ff       	call   c00138d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260c0:	83 c4 20             	add    esp,0x20
c00260c3:	89 c2                	mov    edx,eax
c00260c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260cf:	b8 00 00 00 00       	mov    eax,0x0
c00260d4:	83 c4 0c             	add    esp,0xc
c00260d7:	c3                   	ret    

c00260d8 <PIT::close(int, int, void*)>:
c00260d8:	83 ec 0c             	sub    esp,0xc
c00260db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260df:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00260e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ed:	6a 01                	push   0x1
c00260ef:	68 5e 60 02 c0       	push   0xc002605e
c00260f4:	6a 00                	push   0x0
c00260f6:	50                   	push   eax
c00260f7:	e8 24 d8 fe ff       	call   c0013920 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00260fc:	83 c4 10             	add    esp,0x10
c00260ff:	b8 00 00 00 00       	mov    eax,0x0
c0026104:	83 c4 0c             	add    esp,0xc
c0026107:	c3                   	ret    

c0026108 <PIT::PIT()>:
c0026108:	83 ec 0c             	sub    esp,0xc
c002610b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610f:	83 ec 08             	sub    esp,0x8
c0026112:	68 20 c3 02 c0       	push   0xc002c320
c0026117:	50                   	push   eax
c0026118:	e8 45 02 ff ff       	call   c0016362 <Timer::Timer(char const*)>
c002611d:	83 c4 10             	add    esp,0x10
c0026120:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0026125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026129:	89 10                	mov    DWORD PTR [eax],edx
c002612b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026135:	0f b6 d0             	movzx  edx,al
c0026138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026147:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002614d:	0f b6 d0             	movzx  edx,al
c0026150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026154:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026163:	8d 50 01             	lea    edx,[eax+0x1]
c0026166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002616a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026170:	0f b6 d0             	movzx  edx,al
c0026173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026177:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002617b:	83 e1 3f             	and    ecx,0x3f
c002617e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026182:	90                   	nop
c0026183:	83 c4 0c             	add    esp,0xc
c0026186:	c3                   	ret    
c0026187:	66 90                	xchg   ax,ax
c0026189:	66 90                	xchg   ax,ax
c002618b:	66 90                	xchg   ax,ax
c002618d:	66 90                	xchg   ax,ax
c002618f:	90                   	nop

c0026190 <avxDetect>:
c0026190:	b8 00 00 00 00       	mov    eax,0x0
c0026195:	c3                   	ret    

c0026196 <avxSave>:
c0026196:	c3                   	ret    

c0026197 <avxLoad>:
c0026197:	c3                   	ret    

c0026198 <avxInit>:
c0026198:	c3                   	ret    

c0026199 <avxClose>:
c0026199:	c3                   	ret    

c002619a <wouldSheSayYes>:
c002619a:	c3                   	ret    
c002619b:	49                   	dec    ecx
c002619c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00261a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00261a4:	75 20                	jne    c00261c6 <sseDetect.noSSE+0x1>
c00261a6:	4e                   	dec    esi
c00261a7:	79 61                	jns    c002620a <x87Detect+0x14>
c00261a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00261ae:	66 90                	xchg   ax,ax

c00261b0 <absolutelyNoChanceInHell>:
c00261b0:	b8 01 00 00 00       	mov    eax,0x1
c00261b5:	0f a2                	cpuid  
c00261b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00261bd:	74 06                	je     c00261c5 <sseDetect.noSSE>
c00261bf:	b8 01 00 00 00       	mov    eax,0x1
c00261c4:	c3                   	ret    

c00261c5 <sseDetect.noSSE>:
c00261c5:	31 c0                	xor    eax,eax
c00261c7:	c3                   	ret    

c00261c8 <sseSave>:
c00261c8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00261cd:	c3                   	ret    

c00261ce <sseLoad>:
c00261ce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00261d3:	c3                   	ret    

c00261d4 <sseInit>:
c00261d4:	e8 49 00 00 00       	call   c0026222 <x87Init>
c00261d9:	0f 20 e0             	mov    eax,cr4
c00261dc:	66 0d 00 06          	or     ax,0x600
c00261e0:	0f 22 e0             	mov    cr4,eax
c00261e3:	c3                   	ret    

c00261e4 <sseClose>:
c00261e4:	c3                   	ret    
c00261e5:	66 90                	xchg   ax,ax
c00261e7:	66 90                	xchg   ax,ax
c00261e9:	66 90                	xchg   ax,ax
c00261eb:	66 90                	xchg   ax,ax
c00261ed:	66 90                	xchg   ax,ax
c00261ef:	90                   	nop

c00261f0 <value_37F>:
c00261f0:	7f 03                	jg     c00261f5 <value_37A+0x1>

c00261f2 <value_37E>:
c00261f2:	7e 03                	jle    c00261f7 <x87Detect+0x1>

c00261f4 <value_37A>:
c00261f4:	7a 03                	jp     c00261f9 <x87Detect+0x3>

c00261f6 <x87Detect>:
c00261f6:	b8 01 00 00 00       	mov    eax,0x1
c00261fb:	0f a2                	cpuid  
c00261fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026203:	74 06                	je     c002620b <x87Detect.nox87>
c0026205:	b8 01 00 00 00       	mov    eax,0x1
c002620a:	c3                   	ret    

c002620b <x87Detect.nox87>:
c002620b:	b8 00 00 00 00       	mov    eax,0x0
c0026210:	c3                   	ret    

c0026211 <x87Save>:
c0026211:	55                   	push   ebp
c0026212:	89 e5                	mov    ebp,esp
c0026214:	9b dd 75 08          	fsave  [ebp+0x8]
c0026218:	c9                   	leave  
c0026219:	c3                   	ret    

c002621a <x87Load>:
c002621a:	55                   	push   ebp
c002621b:	89 e5                	mov    ebp,esp
c002621d:	dd 65 08             	frstor [ebp+0x8]
c0026220:	c9                   	leave  
c0026221:	c3                   	ret    

c0026222 <x87Init>:
c0026222:	9b db e3             	finit  
c0026225:	0f 20 c0             	mov    eax,cr0
c0026228:	66 25 fb ff          	and    ax,0xfffb
c002622c:	66 0d 22 00          	or     ax,0x22
c0026230:	0f 22 c0             	mov    cr0,eax
c0026233:	0f 06                	clts   
c0026235:	d9 2d f4 61 02 c0    	fldcw  WORD PTR ds:0xc00261f4
c002623b:	c3                   	ret    

c002623c <x87Close>:
c002623c:	c3                   	ret    
c002623d:	66 90                	xchg   ax,ax
c002623f:	90                   	nop

c0026240 <__do_global_ctors_aux>:
c0026240:	a1 34 8e 02 c0       	mov    eax,ds:0xc0028e34
c0026245:	83 f8 ff             	cmp    eax,0xffffffff
c0026248:	74 1a                	je     c0026264 <__do_global_ctors_aux+0x24>
c002624a:	55                   	push   ebp
c002624b:	89 e5                	mov    ebp,esp
c002624d:	53                   	push   ebx
c002624e:	52                   	push   edx
c002624f:	bb 34 8e 02 c0       	mov    ebx,0xc0028e34
c0026254:	ff d0                	call   eax
c0026256:	83 eb 04             	sub    ebx,0x4
c0026259:	8b 03                	mov    eax,DWORD PTR [ebx]
c002625b:	83 f8 ff             	cmp    eax,0xffffffff
c002625e:	75 f4                	jne    c0026254 <__do_global_ctors_aux+0x14>
c0026260:	58                   	pop    eax
c0026261:	5b                   	pop    ebx
c0026262:	5d                   	pop    ebp
c0026263:	c3                   	ret    
c0026264:	c3                   	ret    
c0026265:	66 90                	xchg   ax,ax
c0026267:	90                   	nop

c0026268 <__divdi3>:
c0026268:	55                   	push   ebp
c0026269:	57                   	push   edi
c002626a:	56                   	push   esi
c002626b:	53                   	push   ebx
c002626c:	83 ec 1c             	sub    esp,0x1c
c002626f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026273:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026277:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002627a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002627e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026282:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026286:	85 db                	test   ebx,ebx
c0026288:	0f 88 8e 00 00 00    	js     c002631c <__divdi3+0xb4>
c002628e:	89 dd                	mov    ebp,ebx
c0026290:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026298:	89 d3                	mov    ebx,edx
c002629a:	85 d2                	test   edx,edx
c002629c:	79 0d                	jns    c00262ab <__divdi3+0x43>
c002629e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00262a2:	f7 d8                	neg    eax
c00262a4:	83 d2 00             	adc    edx,0x0
c00262a7:	f7 da                	neg    edx
c00262a9:	89 d3                	mov    ebx,edx
c00262ab:	89 c7                	mov    edi,eax
c00262ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262b0:	85 db                	test   ebx,ebx
c00262b2:	75 48                	jne    c00262fc <__divdi3+0x94>
c00262b4:	39 ef                	cmp    edi,ebp
c00262b6:	76 24                	jbe    c00262dc <__divdi3+0x74>
c00262b8:	89 ea                	mov    edx,ebp
c00262ba:	f7 f7                	div    edi
c00262bc:	89 c1                	mov    ecx,eax
c00262be:	31 f6                	xor    esi,esi
c00262c0:	89 c8                	mov    eax,ecx
c00262c2:	89 f2                	mov    edx,esi
c00262c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262c8:	85 c9                	test   ecx,ecx
c00262ca:	74 07                	je     c00262d3 <__divdi3+0x6b>
c00262cc:	f7 d8                	neg    eax
c00262ce:	83 d2 00             	adc    edx,0x0
c00262d1:	f7 da                	neg    edx
c00262d3:	83 c4 1c             	add    esp,0x1c
c00262d6:	5b                   	pop    ebx
c00262d7:	5e                   	pop    esi
c00262d8:	5f                   	pop    edi
c00262d9:	5d                   	pop    ebp
c00262da:	c3                   	ret    
c00262db:	90                   	nop
c00262dc:	85 ff                	test   edi,edi
c00262de:	75 0b                	jne    c00262eb <__divdi3+0x83>
c00262e0:	b8 01 00 00 00       	mov    eax,0x1
c00262e5:	31 d2                	xor    edx,edx
c00262e7:	f7 f3                	div    ebx
c00262e9:	89 c7                	mov    edi,eax
c00262eb:	31 d2                	xor    edx,edx
c00262ed:	89 e8                	mov    eax,ebp
c00262ef:	f7 f7                	div    edi
c00262f1:	89 c6                	mov    esi,eax
c00262f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262f6:	f7 f7                	div    edi
c00262f8:	89 c1                	mov    ecx,eax
c00262fa:	eb c4                	jmp    c00262c0 <__divdi3+0x58>
c00262fc:	39 eb                	cmp    ebx,ebp
c00262fe:	77 3c                	ja     c002633c <__divdi3+0xd4>
c0026300:	0f bd f3             	bsr    esi,ebx
c0026303:	83 f6 1f             	xor    esi,0x1f
c0026306:	75 40                	jne    c0026348 <__divdi3+0xe0>
c0026308:	39 eb                	cmp    ebx,ebp
c002630a:	72 09                	jb     c0026315 <__divdi3+0xad>
c002630c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002630f:	0f 87 97 00 00 00    	ja     c00263ac <__divdi3+0x144>
c0026315:	b9 01 00 00 00       	mov    ecx,0x1
c002631a:	eb a4                	jmp    c00262c0 <__divdi3+0x58>
c002631c:	f7 d9                	neg    ecx
c002631e:	83 d3 00             	adc    ebx,0x0
c0026321:	f7 db                	neg    ebx
c0026323:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026326:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002632a:	89 dd                	mov    ebp,ebx
c002632c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026334:	e9 5f ff ff ff       	jmp    c0026298 <__divdi3+0x30>
c0026339:	8d 76 00             	lea    esi,[esi+0x0]
c002633c:	31 f6                	xor    esi,esi
c002633e:	31 c9                	xor    ecx,ecx
c0026340:	e9 7b ff ff ff       	jmp    c00262c0 <__divdi3+0x58>
c0026345:	8d 76 00             	lea    esi,[esi+0x0]
c0026348:	b8 20 00 00 00       	mov    eax,0x20
c002634d:	29 f0                	sub    eax,esi
c002634f:	89 f1                	mov    ecx,esi
c0026351:	d3 e3                	shl    ebx,cl
c0026353:	89 fa                	mov    edx,edi
c0026355:	88 c1                	mov    cl,al
c0026357:	d3 ea                	shr    edx,cl
c0026359:	09 da                	or     edx,ebx
c002635b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002635f:	89 f1                	mov    ecx,esi
c0026361:	d3 e7                	shl    edi,cl
c0026363:	89 eb                	mov    ebx,ebp
c0026365:	88 c1                	mov    cl,al
c0026367:	d3 eb                	shr    ebx,cl
c0026369:	89 f1                	mov    ecx,esi
c002636b:	d3 e5                	shl    ebp,cl
c002636d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026370:	88 c1                	mov    cl,al
c0026372:	d3 ea                	shr    edx,cl
c0026374:	09 d5                	or     ebp,edx
c0026376:	89 e8                	mov    eax,ebp
c0026378:	89 da                	mov    edx,ebx
c002637a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002637e:	89 d3                	mov    ebx,edx
c0026380:	89 c5                	mov    ebp,eax
c0026382:	f7 e7                	mul    edi
c0026384:	39 d3                	cmp    ebx,edx
c0026386:	72 18                	jb     c00263a0 <__divdi3+0x138>
c0026388:	74 0a                	je     c0026394 <__divdi3+0x12c>
c002638a:	89 e9                	mov    ecx,ebp
c002638c:	31 f6                	xor    esi,esi
c002638e:	e9 2d ff ff ff       	jmp    c00262c0 <__divdi3+0x58>
c0026393:	90                   	nop
c0026394:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026397:	89 f1                	mov    ecx,esi
c0026399:	d3 e7                	shl    edi,cl
c002639b:	39 c7                	cmp    edi,eax
c002639d:	73 eb                	jae    c002638a <__divdi3+0x122>
c002639f:	90                   	nop
c00263a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00263a3:	31 f6                	xor    esi,esi
c00263a5:	e9 16 ff ff ff       	jmp    c00262c0 <__divdi3+0x58>
c00263aa:	66 90                	xchg   ax,ax
c00263ac:	31 c9                	xor    ecx,ecx
c00263ae:	e9 0d ff ff ff       	jmp    c00262c0 <__divdi3+0x58>
c00263b3:	90                   	nop

c00263b4 <__moddi3>:
c00263b4:	55                   	push   ebp
c00263b5:	57                   	push   edi
c00263b6:	56                   	push   esi
c00263b7:	53                   	push   ebx
c00263b8:	83 ec 2c             	sub    esp,0x2c
c00263bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00263bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00263c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00263c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00263cb:	85 db                	test   ebx,ebx
c00263cd:	0f 88 85 00 00 00    	js     c0026458 <__moddi3+0xa4>
c00263d3:	89 de                	mov    esi,ebx
c00263d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00263dd:	89 d7                	mov    edi,edx
c00263df:	85 d2                	test   edx,edx
c00263e1:	79 09                	jns    c00263ec <__moddi3+0x38>
c00263e3:	f7 d8                	neg    eax
c00263e5:	83 d2 00             	adc    edx,0x0
c00263e8:	f7 da                	neg    edx
c00263ea:	89 d7                	mov    edi,edx
c00263ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263f0:	89 cd                	mov    ebp,ecx
c00263f2:	85 ff                	test   edi,edi
c00263f4:	75 52                	jne    c0026448 <__moddi3+0x94>
c00263f6:	89 c3                	mov    ebx,eax
c00263f8:	39 f0                	cmp    eax,esi
c00263fa:	76 24                	jbe    c0026420 <__moddi3+0x6c>
c00263fc:	89 c8                	mov    eax,ecx
c00263fe:	89 f2                	mov    edx,esi
c0026400:	f7 f3                	div    ebx
c0026402:	89 d6                	mov    esi,edx
c0026404:	89 f0                	mov    eax,esi
c0026406:	31 d2                	xor    edx,edx
c0026408:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002640c:	85 c9                	test   ecx,ecx
c002640e:	74 07                	je     c0026417 <__moddi3+0x63>
c0026410:	f7 d8                	neg    eax
c0026412:	83 d2 00             	adc    edx,0x0
c0026415:	f7 da                	neg    edx
c0026417:	83 c4 2c             	add    esp,0x2c
c002641a:	5b                   	pop    ebx
c002641b:	5e                   	pop    esi
c002641c:	5f                   	pop    edi
c002641d:	5d                   	pop    ebp
c002641e:	c3                   	ret    
c002641f:	90                   	nop
c0026420:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026424:	85 db                	test   ebx,ebx
c0026426:	75 0d                	jne    c0026435 <__moddi3+0x81>
c0026428:	b8 01 00 00 00       	mov    eax,0x1
c002642d:	31 d2                	xor    edx,edx
c002642f:	f7 f7                	div    edi
c0026431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026435:	89 f0                	mov    eax,esi
c0026437:	31 d2                	xor    edx,edx
c0026439:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002643d:	f7 f7                	div    edi
c002643f:	89 e8                	mov    eax,ebp
c0026441:	f7 f7                	div    edi
c0026443:	89 d6                	mov    esi,edx
c0026445:	eb bd                	jmp    c0026404 <__moddi3+0x50>
c0026447:	90                   	nop
c0026448:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002644c:	39 f7                	cmp    edi,esi
c002644e:	76 20                	jbe    c0026470 <__moddi3+0xbc>
c0026450:	89 c8                	mov    eax,ecx
c0026452:	89 f2                	mov    edx,esi
c0026454:	eb b2                	jmp    c0026408 <__moddi3+0x54>
c0026456:	66 90                	xchg   ax,ax
c0026458:	f7 d9                	neg    ecx
c002645a:	83 d3 00             	adc    ebx,0x0
c002645d:	f7 db                	neg    ebx
c002645f:	89 de                	mov    esi,ebx
c0026461:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026469:	e9 6f ff ff ff       	jmp    c00263dd <__moddi3+0x29>
c002646e:	66 90                	xchg   ax,ax
c0026470:	0f bd c7             	bsr    eax,edi
c0026473:	83 f0 1f             	xor    eax,0x1f
c0026476:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002647a:	75 24                	jne    c00264a0 <__moddi3+0xec>
c002647c:	39 f7                	cmp    edi,esi
c002647e:	72 06                	jb     c0026486 <__moddi3+0xd2>
c0026480:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026484:	77 0c                	ja     c0026492 <__moddi3+0xde>
c0026486:	89 e9                	mov    ecx,ebp
c0026488:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002648c:	19 fe                	sbb    esi,edi
c002648e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026496:	89 f2                	mov    edx,esi
c0026498:	e9 6b ff ff ff       	jmp    c0026408 <__moddi3+0x54>
c002649d:	8d 76 00             	lea    esi,[esi+0x0]
c00264a0:	b8 20 00 00 00       	mov    eax,0x20
c00264a5:	89 c2                	mov    edx,eax
c00264a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00264ab:	29 da                	sub    edx,ebx
c00264ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00264b1:	88 d9                	mov    cl,bl
c00264b3:	d3 e7                	shl    edi,cl
c00264b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264b9:	88 d1                	mov    cl,dl
c00264bb:	d3 e8                	shr    eax,cl
c00264bd:	09 c7                	or     edi,eax
c00264bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00264c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264c7:	89 d8                	mov    eax,ebx
c00264c9:	88 d9                	mov    cl,bl
c00264cb:	d3 e7                	shl    edi,cl
c00264cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00264d1:	89 f3                	mov    ebx,esi
c00264d3:	88 d1                	mov    cl,dl
c00264d5:	d3 eb                	shr    ebx,cl
c00264d7:	89 c7                	mov    edi,eax
c00264d9:	88 c1                	mov    cl,al
c00264db:	d3 e6                	shl    esi,cl
c00264dd:	89 e8                	mov    eax,ebp
c00264df:	88 d1                	mov    cl,dl
c00264e1:	d3 e8                	shr    eax,cl
c00264e3:	09 f0                	or     eax,esi
c00264e5:	89 f9                	mov    ecx,edi
c00264e7:	d3 e5                	shl    ebp,cl
c00264e9:	89 da                	mov    edx,ebx
c00264eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00264ef:	89 d3                	mov    ebx,edx
c00264f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00264f5:	89 c6                	mov    esi,eax
c00264f7:	89 d1                	mov    ecx,edx
c00264f9:	39 d3                	cmp    ebx,edx
c00264fb:	72 27                	jb     c0026524 <__moddi3+0x170>
c00264fd:	74 21                	je     c0026520 <__moddi3+0x16c>
c00264ff:	29 f5                	sub    ebp,esi
c0026501:	19 cb                	sbb    ebx,ecx
c0026503:	89 de                	mov    esi,ebx
c0026505:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026509:	d3 e6                	shl    esi,cl
c002650b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002650f:	89 f9                	mov    ecx,edi
c0026511:	d3 ed                	shr    ebp,cl
c0026513:	09 ee                	or     esi,ebp
c0026515:	89 f0                	mov    eax,esi
c0026517:	d3 eb                	shr    ebx,cl
c0026519:	89 da                	mov    edx,ebx
c002651b:	e9 e8 fe ff ff       	jmp    c0026408 <__moddi3+0x54>
c0026520:	39 c5                	cmp    ebp,eax
c0026522:	73 db                	jae    c00264ff <__moddi3+0x14b>
c0026524:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026528:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002652c:	89 d1                	mov    ecx,edx
c002652e:	89 c6                	mov    esi,eax
c0026530:	eb cd                	jmp    c00264ff <__moddi3+0x14b>
c0026532:	66 90                	xchg   ax,ax

c0026534 <__udivdi3>:
c0026534:	55                   	push   ebp
c0026535:	57                   	push   edi
c0026536:	56                   	push   esi
c0026537:	53                   	push   ebx
c0026538:	83 ec 1c             	sub    esp,0x1c
c002653b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002653f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026543:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026547:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002654b:	85 d2                	test   edx,edx
c002654d:	75 41                	jne    c0026590 <__udivdi3+0x5c>
c002654f:	39 f7                	cmp    edi,esi
c0026551:	76 15                	jbe    c0026568 <__udivdi3+0x34>
c0026553:	89 e8                	mov    eax,ebp
c0026555:	89 f2                	mov    edx,esi
c0026557:	f7 f7                	div    edi
c0026559:	31 db                	xor    ebx,ebx
c002655b:	89 da                	mov    edx,ebx
c002655d:	83 c4 1c             	add    esp,0x1c
c0026560:	5b                   	pop    ebx
c0026561:	5e                   	pop    esi
c0026562:	5f                   	pop    edi
c0026563:	5d                   	pop    ebp
c0026564:	c3                   	ret    
c0026565:	8d 76 00             	lea    esi,[esi+0x0]
c0026568:	89 f9                	mov    ecx,edi
c002656a:	85 ff                	test   edi,edi
c002656c:	75 0b                	jne    c0026579 <__udivdi3+0x45>
c002656e:	b8 01 00 00 00       	mov    eax,0x1
c0026573:	31 d2                	xor    edx,edx
c0026575:	f7 f7                	div    edi
c0026577:	89 c1                	mov    ecx,eax
c0026579:	31 d2                	xor    edx,edx
c002657b:	89 f0                	mov    eax,esi
c002657d:	f7 f1                	div    ecx
c002657f:	89 c3                	mov    ebx,eax
c0026581:	89 e8                	mov    eax,ebp
c0026583:	f7 f1                	div    ecx
c0026585:	89 da                	mov    edx,ebx
c0026587:	83 c4 1c             	add    esp,0x1c
c002658a:	5b                   	pop    ebx
c002658b:	5e                   	pop    esi
c002658c:	5f                   	pop    edi
c002658d:	5d                   	pop    ebp
c002658e:	c3                   	ret    
c002658f:	90                   	nop
c0026590:	39 f2                	cmp    edx,esi
c0026592:	77 1c                	ja     c00265b0 <__udivdi3+0x7c>
c0026594:	0f bd da             	bsr    ebx,edx
c0026597:	83 f3 1f             	xor    ebx,0x1f
c002659a:	75 24                	jne    c00265c0 <__udivdi3+0x8c>
c002659c:	39 f2                	cmp    edx,esi
c002659e:	72 08                	jb     c00265a8 <__udivdi3+0x74>
c00265a0:	39 ef                	cmp    edi,ebp
c00265a2:	0f 87 84 00 00 00    	ja     c002662c <__udivdi3+0xf8>
c00265a8:	b8 01 00 00 00       	mov    eax,0x1
c00265ad:	eb ac                	jmp    c002655b <__udivdi3+0x27>
c00265af:	90                   	nop
c00265b0:	31 db                	xor    ebx,ebx
c00265b2:	31 c0                	xor    eax,eax
c00265b4:	89 da                	mov    edx,ebx
c00265b6:	83 c4 1c             	add    esp,0x1c
c00265b9:	5b                   	pop    ebx
c00265ba:	5e                   	pop    esi
c00265bb:	5f                   	pop    edi
c00265bc:	5d                   	pop    ebp
c00265bd:	c3                   	ret    
c00265be:	66 90                	xchg   ax,ax
c00265c0:	b8 20 00 00 00       	mov    eax,0x20
c00265c5:	29 d8                	sub    eax,ebx
c00265c7:	88 d9                	mov    cl,bl
c00265c9:	d3 e2                	shl    edx,cl
c00265cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00265cf:	89 fa                	mov    edx,edi
c00265d1:	88 c1                	mov    cl,al
c00265d3:	d3 ea                	shr    edx,cl
c00265d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265d9:	09 d1                	or     ecx,edx
c00265db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00265df:	88 d9                	mov    cl,bl
c00265e1:	d3 e7                	shl    edi,cl
c00265e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265e7:	89 f7                	mov    edi,esi
c00265e9:	88 c1                	mov    cl,al
c00265eb:	d3 ef                	shr    edi,cl
c00265ed:	88 d9                	mov    cl,bl
c00265ef:	d3 e6                	shl    esi,cl
c00265f1:	89 ea                	mov    edx,ebp
c00265f3:	88 c1                	mov    cl,al
c00265f5:	d3 ea                	shr    edx,cl
c00265f7:	09 d6                	or     esi,edx
c00265f9:	89 f0                	mov    eax,esi
c00265fb:	89 fa                	mov    edx,edi
c00265fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026601:	89 d7                	mov    edi,edx
c0026603:	89 c6                	mov    esi,eax
c0026605:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026609:	39 d7                	cmp    edi,edx
c002660b:	72 13                	jb     c0026620 <__udivdi3+0xec>
c002660d:	74 09                	je     c0026618 <__udivdi3+0xe4>
c002660f:	89 f0                	mov    eax,esi
c0026611:	31 db                	xor    ebx,ebx
c0026613:	e9 43 ff ff ff       	jmp    c002655b <__udivdi3+0x27>
c0026618:	88 d9                	mov    cl,bl
c002661a:	d3 e5                	shl    ebp,cl
c002661c:	39 c5                	cmp    ebp,eax
c002661e:	73 ef                	jae    c002660f <__udivdi3+0xdb>
c0026620:	8d 46 ff             	lea    eax,[esi-0x1]
c0026623:	31 db                	xor    ebx,ebx
c0026625:	e9 31 ff ff ff       	jmp    c002655b <__udivdi3+0x27>
c002662a:	66 90                	xchg   ax,ax
c002662c:	31 c0                	xor    eax,eax
c002662e:	e9 28 ff ff ff       	jmp    c002655b <__udivdi3+0x27>
c0026633:	90                   	nop

c0026634 <__umoddi3>:
c0026634:	55                   	push   ebp
c0026635:	57                   	push   edi
c0026636:	56                   	push   esi
c0026637:	53                   	push   ebx
c0026638:	83 ec 1c             	sub    esp,0x1c
c002663b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002663f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026643:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026647:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002664b:	89 da                	mov    edx,ebx
c002664d:	85 c0                	test   eax,eax
c002664f:	75 37                	jne    c0026688 <__umoddi3+0x54>
c0026651:	39 df                	cmp    edi,ebx
c0026653:	76 13                	jbe    c0026668 <__umoddi3+0x34>
c0026655:	89 f0                	mov    eax,esi
c0026657:	f7 f7                	div    edi
c0026659:	89 d0                	mov    eax,edx
c002665b:	31 d2                	xor    edx,edx
c002665d:	83 c4 1c             	add    esp,0x1c
c0026660:	5b                   	pop    ebx
c0026661:	5e                   	pop    esi
c0026662:	5f                   	pop    edi
c0026663:	5d                   	pop    ebp
c0026664:	c3                   	ret    
c0026665:	8d 76 00             	lea    esi,[esi+0x0]
c0026668:	89 fd                	mov    ebp,edi
c002666a:	85 ff                	test   edi,edi
c002666c:	75 0b                	jne    c0026679 <__umoddi3+0x45>
c002666e:	b8 01 00 00 00       	mov    eax,0x1
c0026673:	31 d2                	xor    edx,edx
c0026675:	f7 f7                	div    edi
c0026677:	89 c5                	mov    ebp,eax
c0026679:	89 d8                	mov    eax,ebx
c002667b:	31 d2                	xor    edx,edx
c002667d:	f7 f5                	div    ebp
c002667f:	89 f0                	mov    eax,esi
c0026681:	f7 f5                	div    ebp
c0026683:	89 d0                	mov    eax,edx
c0026685:	eb d4                	jmp    c002665b <__umoddi3+0x27>
c0026687:	90                   	nop
c0026688:	89 f1                	mov    ecx,esi
c002668a:	39 d8                	cmp    eax,ebx
c002668c:	76 0a                	jbe    c0026698 <__umoddi3+0x64>
c002668e:	89 f0                	mov    eax,esi
c0026690:	83 c4 1c             	add    esp,0x1c
c0026693:	5b                   	pop    ebx
c0026694:	5e                   	pop    esi
c0026695:	5f                   	pop    edi
c0026696:	5d                   	pop    ebp
c0026697:	c3                   	ret    
c0026698:	0f bd e8             	bsr    ebp,eax
c002669b:	83 f5 1f             	xor    ebp,0x1f
c002669e:	75 1c                	jne    c00266bc <__umoddi3+0x88>
c00266a0:	39 d8                	cmp    eax,ebx
c00266a2:	72 04                	jb     c00266a8 <__umoddi3+0x74>
c00266a4:	39 f7                	cmp    edi,esi
c00266a6:	77 08                	ja     c00266b0 <__umoddi3+0x7c>
c00266a8:	89 da                	mov    edx,ebx
c00266aa:	29 fe                	sub    esi,edi
c00266ac:	19 c2                	sbb    edx,eax
c00266ae:	89 f1                	mov    ecx,esi
c00266b0:	89 c8                	mov    eax,ecx
c00266b2:	83 c4 1c             	add    esp,0x1c
c00266b5:	5b                   	pop    ebx
c00266b6:	5e                   	pop    esi
c00266b7:	5f                   	pop    edi
c00266b8:	5d                   	pop    ebp
c00266b9:	c3                   	ret    
c00266ba:	66 90                	xchg   ax,ax
c00266bc:	ba 20 00 00 00       	mov    edx,0x20
c00266c1:	29 ea                	sub    edx,ebp
c00266c3:	89 e9                	mov    ecx,ebp
c00266c5:	d3 e0                	shl    eax,cl
c00266c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266cb:	89 f8                	mov    eax,edi
c00266cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00266d1:	88 d1                	mov    cl,dl
c00266d3:	d3 e8                	shr    eax,cl
c00266d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266d9:	09 c1                	or     ecx,eax
c00266db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266df:	89 e9                	mov    ecx,ebp
c00266e1:	d3 e7                	shl    edi,cl
c00266e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266e7:	89 d8                	mov    eax,ebx
c00266e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266ed:	88 d1                	mov    cl,dl
c00266ef:	d3 e8                	shr    eax,cl
c00266f1:	89 c7                	mov    edi,eax
c00266f3:	89 e9                	mov    ecx,ebp
c00266f5:	d3 e3                	shl    ebx,cl
c00266f7:	89 f0                	mov    eax,esi
c00266f9:	88 d1                	mov    cl,dl
c00266fb:	d3 e8                	shr    eax,cl
c00266fd:	09 d8                	or     eax,ebx
c00266ff:	89 e9                	mov    ecx,ebp
c0026701:	d3 e6                	shl    esi,cl
c0026703:	89 f3                	mov    ebx,esi
c0026705:	89 fa                	mov    edx,edi
c0026707:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002670b:	89 d1                	mov    ecx,edx
c002670d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026711:	89 c6                	mov    esi,eax
c0026713:	89 d7                	mov    edi,edx
c0026715:	39 d1                	cmp    ecx,edx
c0026717:	72 27                	jb     c0026740 <__umoddi3+0x10c>
c0026719:	74 21                	je     c002673c <__umoddi3+0x108>
c002671b:	89 ca                	mov    edx,ecx
c002671d:	29 f3                	sub    ebx,esi
c002671f:	19 fa                	sbb    edx,edi
c0026721:	89 d0                	mov    eax,edx
c0026723:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026727:	d3 e0                	shl    eax,cl
c0026729:	89 e9                	mov    ecx,ebp
c002672b:	d3 eb                	shr    ebx,cl
c002672d:	09 d8                	or     eax,ebx
c002672f:	d3 ea                	shr    edx,cl
c0026731:	83 c4 1c             	add    esp,0x1c
c0026734:	5b                   	pop    ebx
c0026735:	5e                   	pop    esi
c0026736:	5f                   	pop    edi
c0026737:	5d                   	pop    ebp
c0026738:	c3                   	ret    
c0026739:	8d 76 00             	lea    esi,[esi+0x0]
c002673c:	39 c3                	cmp    ebx,eax
c002673e:	73 db                	jae    c002671b <__umoddi3+0xe7>
c0026740:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026744:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026748:	89 d7                	mov    edi,edx
c002674a:	89 c6                	mov    esi,eax
c002674c:	eb cd                	jmp    c002671b <__umoddi3+0xe7>

c002674e <__addsf3>:
c002674e:	55                   	push   ebp
c002674f:	89 e5                	mov    ebp,esp
c0026751:	57                   	push   edi
c0026752:	56                   	push   esi
c0026753:	53                   	push   ebx
c0026754:	83 ec 08             	sub    esp,0x8
c0026757:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002675a:	89 fa                	mov    edx,edi
c002675c:	89 f8                	mov    eax,edi
c002675e:	c1 f8 17             	sar    eax,0x17
c0026761:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026764:	c1 e2 08             	shl    edx,0x8
c0026767:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002676d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026770:	89 de                	mov    esi,ebx
c0026772:	c1 fe 17             	sar    esi,0x17
c0026775:	c1 e3 08             	shl    ebx,0x8
c0026778:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002677e:	31 f0                	xor    eax,esi
c0026780:	0f 88 3b 01 00 00    	js     c00268c1 <__addsf3+0x173>
c0026786:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026789:	29 f1                	sub    ecx,esi
c002678b:	85 c9                	test   ecx,ecx
c002678d:	7e 54                	jle    c00267e3 <__addsf3+0x95>
c002678f:	89 f0                	mov    eax,esi
c0026791:	84 c0                	test   al,al
c0026793:	75 10                	jne    c00267a5 <__addsf3+0x57>
c0026795:	85 db                	test   ebx,ebx
c0026797:	0f 84 aa 02 00 00    	je     c0026a47 <__addsf3+0x2f9>
c002679d:	49                   	dec    ecx
c002679e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267a1:	74 38                	je     c00267db <__addsf3+0x8d>
c00267a3:	eb 13                	jmp    c00267b8 <__addsf3+0x6a>
c00267a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00267a8:	f7 d0                	not    eax
c00267aa:	84 c0                	test   al,al
c00267ac:	0f 84 95 02 00 00    	je     c0026a47 <__addsf3+0x2f9>
c00267b2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00267b8:	83 f9 1f             	cmp    ecx,0x1f
c00267bb:	0f 8f 86 02 00 00    	jg     c0026a47 <__addsf3+0x2f9>
c00267c1:	89 de                	mov    esi,ebx
c00267c3:	d3 ee                	shr    esi,cl
c00267c5:	b8 20 00 00 00       	mov    eax,0x20
c00267ca:	29 c8                	sub    eax,ecx
c00267cc:	89 c1                	mov    ecx,eax
c00267ce:	d3 e3                	shl    ebx,cl
c00267d0:	31 c0                	xor    eax,eax
c00267d2:	85 db                	test   ebx,ebx
c00267d4:	0f 95 c0             	setne  al
c00267d7:	09 f0                	or     eax,esi
c00267d9:	01 d0                	add    eax,edx
c00267db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00267de:	e9 b6 00 00 00       	jmp    c0026899 <__addsf3+0x14b>
c00267e3:	74 5c                	je     c0026841 <__addsf3+0xf3>
c00267e5:	89 f1                	mov    ecx,esi
c00267e7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00267ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267ed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00267f1:	75 14                	jne    c0026807 <__addsf3+0xb9>
c00267f3:	85 d2                	test   edx,edx
c00267f5:	0f 84 4c 02 00 00    	je     c0026a47 <__addsf3+0x2f9>
c00267fb:	49                   	dec    ecx
c00267fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267ff:	0f 84 94 00 00 00    	je     c0026899 <__addsf3+0x14b>
c0026805:	eb 12                	jmp    c0026819 <__addsf3+0xcb>
c0026807:	89 f0                	mov    eax,esi
c0026809:	f7 d0                	not    eax
c002680b:	84 c0                	test   al,al
c002680d:	0f 84 34 02 00 00    	je     c0026a47 <__addsf3+0x2f9>
c0026813:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026819:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002681c:	83 f9 1f             	cmp    ecx,0x1f
c002681f:	0f 8f 22 02 00 00    	jg     c0026a47 <__addsf3+0x2f9>
c0026825:	89 d7                	mov    edi,edx
c0026827:	d3 ef                	shr    edi,cl
c0026829:	b8 20 00 00 00       	mov    eax,0x20
c002682e:	29 c8                	sub    eax,ecx
c0026830:	89 c1                	mov    ecx,eax
c0026832:	d3 e2                	shl    edx,cl
c0026834:	31 c0                	xor    eax,eax
c0026836:	85 d2                	test   edx,edx
c0026838:	0f 95 c0             	setne  al
c002683b:	09 f8                	or     eax,edi
c002683d:	01 d8                	add    eax,ebx
c002683f:	eb 58                	jmp    c0026899 <__addsf3+0x14b>
c0026841:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026844:	8d 70 01             	lea    esi,[eax+0x1]
c0026847:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002684d:	75 32                	jne    c0026881 <__addsf3+0x133>
c002684f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026853:	75 1f                	jne    c0026874 <__addsf3+0x126>
c0026855:	85 d2                	test   edx,edx
c0026857:	0f 84 e0 01 00 00    	je     c0026a3d <__addsf3+0x2ef>
c002685d:	85 db                	test   ebx,ebx
c002685f:	0f 84 e2 01 00 00    	je     c0026a47 <__addsf3+0x2f9>
c0026865:	89 d0                	mov    eax,edx
c0026867:	01 d8                	add    eax,ebx
c0026869:	0f 89 a9 01 00 00    	jns    c0026a18 <__addsf3+0x2ca>
c002686f:	e9 9d 01 00 00       	jmp    c0026a11 <__addsf3+0x2c3>
c0026874:	85 d2                	test   edx,edx
c0026876:	0f 85 cb 01 00 00    	jne    c0026a47 <__addsf3+0x2f9>
c002687c:	e9 bc 01 00 00       	jmp    c0026a3d <__addsf3+0x2ef>
c0026881:	31 c0                	xor    eax,eax
c0026883:	89 f1                	mov    ecx,esi
c0026885:	f7 d1                	not    ecx
c0026887:	84 c9                	test   cl,cl
c0026889:	0f 84 90 01 00 00    	je     c0026a1f <__addsf3+0x2d1>
c002688f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026892:	d1 e8                	shr    eax,1
c0026894:	e9 86 01 00 00       	jmp    c0026a1f <__addsf3+0x2d1>
c0026899:	85 c0                	test   eax,eax
c002689b:	0f 89 7e 01 00 00    	jns    c0026a1f <__addsf3+0x2d1>
c00268a1:	46                   	inc    esi
c00268a2:	89 f2                	mov    edx,esi
c00268a4:	f7 d2                	not    edx
c00268a6:	84 d2                	test   dl,dl
c00268a8:	0f 84 6f 01 00 00    	je     c0026a1d <__addsf3+0x2cf>
c00268ae:	89 c2                	mov    edx,eax
c00268b0:	83 e2 01             	and    edx,0x1
c00268b3:	d1 e8                	shr    eax,1
c00268b5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00268ba:	09 d0                	or     eax,edx
c00268bc:	e9 5e 01 00 00       	jmp    c0026a1f <__addsf3+0x2d1>
c00268c1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00268c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268c8:	89 f0                	mov    eax,esi
c00268ca:	0f b6 c0             	movzx  eax,al
c00268cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00268d0:	29 c1                	sub    ecx,eax
c00268d2:	85 c9                	test   ecx,ecx
c00268d4:	7e 55                	jle    c002692b <__addsf3+0x1dd>
c00268d6:	85 c0                	test   eax,eax
c00268d8:	75 11                	jne    c00268eb <__addsf3+0x19d>
c00268da:	85 db                	test   ebx,ebx
c00268dc:	0f 84 65 01 00 00    	je     c0026a47 <__addsf3+0x2f9>
c00268e2:	49                   	dec    ecx
c00268e3:	75 19                	jne    c00268fe <__addsf3+0x1b0>
c00268e5:	89 d0                	mov    eax,edx
c00268e7:	29 d8                	sub    eax,ebx
c00268e9:	eb 38                	jmp    c0026923 <__addsf3+0x1d5>
c00268eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268ee:	f7 d0                	not    eax
c00268f0:	84 c0                	test   al,al
c00268f2:	0f 84 4f 01 00 00    	je     c0026a47 <__addsf3+0x2f9>
c00268f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268fe:	83 f9 1f             	cmp    ecx,0x1f
c0026901:	0f 8f 40 01 00 00    	jg     c0026a47 <__addsf3+0x2f9>
c0026907:	89 de                	mov    esi,ebx
c0026909:	d3 ee                	shr    esi,cl
c002690b:	b8 20 00 00 00       	mov    eax,0x20
c0026910:	29 c8                	sub    eax,ecx
c0026912:	89 c1                	mov    ecx,eax
c0026914:	d3 e3                	shl    ebx,cl
c0026916:	31 c0                	xor    eax,eax
c0026918:	85 db                	test   ebx,ebx
c002691a:	0f 95 c0             	setne  al
c002691d:	09 f0                	or     eax,esi
c002691f:	29 c2                	sub    edx,eax
c0026921:	89 d0                	mov    eax,edx
c0026923:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026926:	e9 af 00 00 00       	jmp    c00269da <__addsf3+0x28c>
c002692b:	74 5c                	je     c0026989 <__addsf3+0x23b>
c002692d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026930:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026933:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026937:	75 14                	jne    c002694d <__addsf3+0x1ff>
c0026939:	85 d2                	test   edx,edx
c002693b:	0f 84 06 01 00 00    	je     c0026a47 <__addsf3+0x2f9>
c0026941:	48                   	dec    eax
c0026942:	75 1b                	jne    c002695f <__addsf3+0x211>
c0026944:	89 d8                	mov    eax,ebx
c0026946:	29 d0                	sub    eax,edx
c0026948:	e9 8d 00 00 00       	jmp    c00269da <__addsf3+0x28c>
c002694d:	89 f1                	mov    ecx,esi
c002694f:	f7 d1                	not    ecx
c0026951:	84 c9                	test   cl,cl
c0026953:	0f 84 ee 00 00 00    	je     c0026a47 <__addsf3+0x2f9>
c0026959:	81 ca 00 00 00 80    	or     edx,0x80000000
c002695f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026962:	83 f8 1f             	cmp    eax,0x1f
c0026965:	0f 8f dc 00 00 00    	jg     c0026a47 <__addsf3+0x2f9>
c002696b:	89 d7                	mov    edi,edx
c002696d:	88 c1                	mov    cl,al
c002696f:	d3 ef                	shr    edi,cl
c0026971:	b9 20 00 00 00       	mov    ecx,0x20
c0026976:	29 c1                	sub    ecx,eax
c0026978:	d3 e2                	shl    edx,cl
c002697a:	31 c0                	xor    eax,eax
c002697c:	85 d2                	test   edx,edx
c002697e:	0f 95 c0             	setne  al
c0026981:	09 f8                	or     eax,edi
c0026983:	29 c3                	sub    ebx,eax
c0026985:	89 d8                	mov    eax,ebx
c0026987:	eb 51                	jmp    c00269da <__addsf3+0x28c>
c0026989:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002698c:	40                   	inc    eax
c002698d:	a8 fe                	test   al,0xfe
c002698f:	75 3d                	jne    c00269ce <__addsf3+0x280>
c0026991:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026995:	0f 85 a7 00 00 00    	jne    c0026a42 <__addsf3+0x2f4>
c002699b:	85 d2                	test   edx,edx
c002699d:	75 12                	jne    c00269b1 <__addsf3+0x263>
c002699f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269a2:	85 db                	test   ebx,ebx
c00269a4:	0f 85 9d 00 00 00    	jne    c0026a47 <__addsf3+0x2f9>
c00269aa:	31 ff                	xor    edi,edi
c00269ac:	e9 96 00 00 00       	jmp    c0026a47 <__addsf3+0x2f9>
c00269b1:	85 db                	test   ebx,ebx
c00269b3:	0f 84 8e 00 00 00    	je     c0026a47 <__addsf3+0x2f9>
c00269b9:	89 d0                	mov    eax,edx
c00269bb:	29 d8                	sub    eax,ebx
c00269bd:	79 06                	jns    c00269c5 <__addsf3+0x277>
c00269bf:	89 d8                	mov    eax,ebx
c00269c1:	29 d0                	sub    eax,edx
c00269c3:	eb 5a                	jmp    c0026a1f <__addsf3+0x2d1>
c00269c5:	bf 00 00 00 00       	mov    edi,0x0
c00269ca:	74 7b                	je     c0026a47 <__addsf3+0x2f9>
c00269cc:	eb 4a                	jmp    c0026a18 <__addsf3+0x2ca>
c00269ce:	89 d0                	mov    eax,edx
c00269d0:	29 d8                	sub    eax,ebx
c00269d2:	79 12                	jns    c00269e6 <__addsf3+0x298>
c00269d4:	89 d8                	mov    eax,ebx
c00269d6:	29 d0                	sub    eax,edx
c00269d8:	eb 09                	jmp    c00269e3 <__addsf3+0x295>
c00269da:	85 c0                	test   eax,eax
c00269dc:	79 41                	jns    c0026a1f <__addsf3+0x2d1>
c00269de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269e3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00269e6:	31 f6                	xor    esi,esi
c00269e8:	85 c0                	test   eax,eax
c00269ea:	74 33                	je     c0026a1f <__addsf3+0x2d1>
c00269ec:	0f bd c8             	bsr    ecx,eax
c00269ef:	83 f1 1f             	xor    ecx,0x1f
c00269f2:	d3 e0                	shl    eax,cl
c00269f4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00269f8:	39 ca                	cmp    edx,ecx
c00269fa:	7f 10                	jg     c0026a0c <__addsf3+0x2be>
c00269fc:	29 d1                	sub    ecx,edx
c00269fe:	41                   	inc    ecx
c00269ff:	d3 e8                	shr    eax,cl
c0026a01:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a04:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026a0a:	eb 13                	jmp    c0026a1f <__addsf3+0x2d1>
c0026a0c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a0f:	29 ce                	sub    esi,ecx
c0026a11:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a16:	eb 07                	jmp    c0026a1f <__addsf3+0x2d1>
c0026a18:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a1b:	eb 02                	jmp    c0026a1f <__addsf3+0x2d1>
c0026a1d:	31 c0                	xor    eax,eax
c0026a1f:	89 c2                	mov    edx,eax
c0026a21:	c1 ea 08             	shr    edx,0x8
c0026a24:	a8 7f                	test   al,0x7f
c0026a26:	0f 95 c1             	setne  cl
c0026a29:	09 d1                	or     ecx,edx
c0026a2b:	83 e1 01             	and    ecx,0x1
c0026a2e:	c1 e8 07             	shr    eax,0x7
c0026a31:	21 c8                	and    eax,ecx
c0026a33:	c1 e6 17             	shl    esi,0x17
c0026a36:	09 d6                	or     esi,edx
c0026a38:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026a3b:	eb 0a                	jmp    c0026a47 <__addsf3+0x2f9>
c0026a3d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a40:	eb 05                	jmp    c0026a47 <__addsf3+0x2f9>
c0026a42:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026a47:	89 f8                	mov    eax,edi
c0026a49:	5a                   	pop    edx
c0026a4a:	59                   	pop    ecx
c0026a4b:	5b                   	pop    ebx
c0026a4c:	5e                   	pop    esi
c0026a4d:	5f                   	pop    edi
c0026a4e:	5d                   	pop    ebp
c0026a4f:	c3                   	ret    

c0026a50 <__subsf3>:
c0026a50:	55                   	push   ebp
c0026a51:	89 e5                	mov    ebp,esp
c0026a53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a56:	05 00 00 00 80       	add    eax,0x80000000
c0026a5b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a5e:	5d                   	pop    ebp
c0026a5f:	e9 ea fc ff ff       	jmp    c002674e <__addsf3>

c0026a64 <__negsf2>:
c0026a64:	55                   	push   ebp
c0026a65:	89 e5                	mov    ebp,esp
c0026a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a6a:	05 00 00 00 80       	add    eax,0x80000000
c0026a6f:	5d                   	pop    ebp
c0026a70:	c3                   	ret    

c0026a71 <__mulsf3>:
c0026a71:	55                   	push   ebp
c0026a72:	89 e5                	mov    ebp,esp
c0026a74:	57                   	push   edi
c0026a75:	56                   	push   esi
c0026a76:	53                   	push   ebx
c0026a77:	83 ec 1c             	sub    esp,0x1c
c0026a7a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026a7d:	89 f0                	mov    eax,esi
c0026a7f:	89 f1                	mov    ecx,esi
c0026a81:	c1 f9 17             	sar    ecx,0x17
c0026a84:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026a87:	c1 e0 08             	shl    eax,0x8
c0026a8a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026a8f:	89 c1                	mov    ecx,eax
c0026a91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a94:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026a97:	89 c7                	mov    edi,eax
c0026a99:	c1 ff 17             	sar    edi,0x17
c0026a9c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026aa0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026aa3:	89 f8                	mov    eax,edi
c0026aa5:	0f b6 c0             	movzx  eax,al
c0026aa8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026aab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026aaf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ab2:	42                   	inc    edx
c0026ab3:	80 e2 fe             	and    dl,0xfe
c0026ab6:	75 7b                	jne    c0026b33 <__mulsf3+0xc2>
c0026ab8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026abc:	74 54                	je     c0026b12 <__mulsf3+0xa1>
c0026abe:	85 c9                	test   ecx,ecx
c0026ac0:	0f 85 64 01 00 00    	jne    c0026c2a <__mulsf3+0x1b9>
c0026ac6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ac9:	80 e2 fe             	and    dl,0xfe
c0026acc:	75 1f                	jne    c0026aed <__mulsf3+0x7c>
c0026ace:	85 c0                	test   eax,eax
c0026ad0:	b8 00 00 00 00       	mov    eax,0x0
c0026ad5:	74 29                	je     c0026b00 <__mulsf3+0x8f>
c0026ad7:	53                   	push   ebx
c0026ad8:	53                   	push   ebx
c0026ad9:	50                   	push   eax
c0026ada:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026add:	e8 96 05 00 00       	call   c0027078 <__nesf2>
c0026ae2:	83 c4 10             	add    esp,0x10
c0026ae5:	85 c0                	test   eax,eax
c0026ae7:	0f 85 3a 01 00 00    	jne    c0026c27 <__mulsf3+0x1b6>
c0026aed:	85 ff                	test   edi,edi
c0026aef:	0f 89 35 01 00 00    	jns    c0026c2a <__mulsf3+0x1b9>
c0026af5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026afb:	e9 2a 01 00 00       	jmp    c0026c2a <__mulsf3+0x1b9>
c0026b00:	51                   	push   ecx
c0026b01:	51                   	push   ecx
c0026b02:	50                   	push   eax
c0026b03:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b06:	e8 6d 05 00 00       	call   c0027078 <__nesf2>
c0026b0b:	83 c4 10             	add    esp,0x10
c0026b0e:	85 c0                	test   eax,eax
c0026b10:	eb 15                	jmp    c0026b27 <__mulsf3+0xb6>
c0026b12:	85 c9                	test   ecx,ecx
c0026b14:	74 0b                	je     c0026b21 <__mulsf3+0xb0>
c0026b16:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026b19:	01 c9                	add    ecx,ecx
c0026b1b:	78 16                	js     c0026b33 <__mulsf3+0xc2>
c0026b1d:	89 d3                	mov    ebx,edx
c0026b1f:	eb f5                	jmp    c0026b16 <__mulsf3+0xa5>
c0026b21:	89 f8                	mov    eax,edi
c0026b23:	f7 d0                	not    eax
c0026b25:	84 c0                	test   al,al
c0026b27:	75 c4                	jne    c0026aed <__mulsf3+0x7c>
c0026b29:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026b2e:	e9 f7 00 00 00       	jmp    c0026c2a <__mulsf3+0x1b9>
c0026b33:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b36:	c1 e6 08             	shl    esi,0x8
c0026b39:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026b3f:	8d 57 01             	lea    edx,[edi+0x1]
c0026b42:	80 e2 fe             	and    dl,0xfe
c0026b45:	75 63                	jne    c0026baa <__mulsf3+0x139>
c0026b47:	85 c0                	test   eax,eax
c0026b49:	74 2f                	je     c0026b7a <__mulsf3+0x109>
c0026b4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b4f:	0f 89 d2 00 00 00    	jns    c0026c27 <__mulsf3+0x1b6>
c0026b55:	52                   	push   edx
c0026b56:	52                   	push   edx
c0026b57:	6a 00                	push   0x0
c0026b59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b5c:	e8 dc 04 00 00       	call   c002703d <__eqsf2>
c0026b61:	83 c4 10             	add    esp,0x10
c0026b64:	85 c0                	test   eax,eax
c0026b66:	0f 85 bb 00 00 00    	jne    c0026c27 <__mulsf3+0x1b6>
c0026b6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b6f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026b75:	e9 b0 00 00 00       	jmp    c0026c2a <__mulsf3+0x1b9>
c0026b7a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026b7d:	50                   	push   eax
c0026b7e:	50                   	push   eax
c0026b7f:	6a 00                	push   0x0
c0026b81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b84:	e8 b4 04 00 00       	call   c002703d <__eqsf2>
c0026b89:	83 c4 10             	add    esp,0x10
c0026b8c:	85 c0                	test   eax,eax
c0026b8e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026b91:	75 0c                	jne    c0026b9f <__mulsf3+0x12e>
c0026b93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b97:	0f 89 8a 00 00 00    	jns    c0026c27 <__mulsf3+0x1b6>
c0026b9d:	eb cd                	jmp    c0026b6c <__mulsf3+0xfb>
c0026b9f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026ba2:	01 f6                	add    esi,esi
c0026ba4:	78 04                	js     c0026baa <__mulsf3+0x139>
c0026ba6:	89 c3                	mov    ebx,eax
c0026ba8:	eb f5                	jmp    c0026b9f <__mulsf3+0x12e>
c0026baa:	89 c8                	mov    eax,ecx
c0026bac:	0d 00 00 00 80       	or     eax,0x80000000
c0026bb1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026bb7:	f7 e6                	mul    esi
c0026bb9:	85 c0                	test   eax,eax
c0026bbb:	0f 95 c0             	setne  al
c0026bbe:	0f b6 c0             	movzx  eax,al
c0026bc1:	09 c2                	or     edx,eax
c0026bc3:	78 03                	js     c0026bc8 <__mulsf3+0x157>
c0026bc5:	01 d2                	add    edx,edx
c0026bc7:	4b                   	dec    ebx
c0026bc8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026bce:	7f 22                	jg     c0026bf2 <__mulsf3+0x181>
c0026bd0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026bd6:	85 db                	test   ebx,ebx
c0026bd8:	7f 23                	jg     c0026bfd <__mulsf3+0x18c>
c0026bda:	83 fb e9             	cmp    ebx,0xffffffe9
c0026bdd:	7c 1a                	jl     c0026bf9 <__mulsf3+0x188>
c0026bdf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026be5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bea:	29 d9                	sub    ecx,ebx
c0026bec:	d3 ea                	shr    edx,cl
c0026bee:	31 db                	xor    ebx,ebx
c0026bf0:	eb 0b                	jmp    c0026bfd <__mulsf3+0x18c>
c0026bf2:	bb ff 00 00 00       	mov    ebx,0xff
c0026bf7:	eb 02                	jmp    c0026bfb <__mulsf3+0x18a>
c0026bf9:	31 db                	xor    ebx,ebx
c0026bfb:	31 d2                	xor    edx,edx
c0026bfd:	89 d0                	mov    eax,edx
c0026bff:	c1 e8 08             	shr    eax,0x8
c0026c02:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026c05:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026c0b:	09 fb                	or     ebx,edi
c0026c0d:	c1 e3 17             	shl    ebx,0x17
c0026c10:	09 c3                	or     ebx,eax
c0026c12:	f6 c2 7f             	test   dl,0x7f
c0026c15:	0f 95 c1             	setne  cl
c0026c18:	09 c8                	or     eax,ecx
c0026c1a:	83 e0 01             	and    eax,0x1
c0026c1d:	c1 ea 07             	shr    edx,0x7
c0026c20:	21 c2                	and    edx,eax
c0026c22:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026c25:	eb 03                	jmp    c0026c2a <__mulsf3+0x1b9>
c0026c27:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026c2a:	89 f0                	mov    eax,esi
c0026c2c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c2f:	5b                   	pop    ebx
c0026c30:	5e                   	pop    esi
c0026c31:	5f                   	pop    edi
c0026c32:	5d                   	pop    ebp
c0026c33:	c3                   	ret    

c0026c34 <__divsf3>:
c0026c34:	55                   	push   ebp
c0026c35:	89 e5                	mov    ebp,esp
c0026c37:	57                   	push   edi
c0026c38:	56                   	push   esi
c0026c39:	53                   	push   ebx
c0026c3a:	83 ec 1c             	sub    esp,0x1c
c0026c3d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c40:	89 d8                	mov    eax,ebx
c0026c42:	89 d9                	mov    ecx,ebx
c0026c44:	c1 f9 17             	sar    ecx,0x17
c0026c47:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c4a:	c1 e0 08             	shl    eax,0x8
c0026c4d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c52:	89 c1                	mov    ecx,eax
c0026c54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c57:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c5a:	89 c7                	mov    edi,eax
c0026c5c:	c1 ff 17             	sar    edi,0x17
c0026c5f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c66:	89 f8                	mov    eax,edi
c0026c68:	0f b6 c0             	movzx  eax,al
c0026c6b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c6e:	29 c6                	sub    esi,eax
c0026c70:	83 c6 7f             	add    esi,0x7f
c0026c73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c76:	42                   	inc    edx
c0026c77:	80 e2 fe             	and    dl,0xfe
c0026c7a:	0f 85 9c 00 00 00    	jne    c0026d1c <__divsf3+0xe8>
c0026c80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c84:	74 33                	je     c0026cb9 <__divsf3+0x85>
c0026c86:	85 c9                	test   ecx,ecx
c0026c88:	0f 85 c7 01 00 00    	jne    c0026e55 <__divsf3+0x221>
c0026c8e:	8d 57 01             	lea    edx,[edi+0x1]
c0026c91:	80 e2 fe             	and    dl,0xfe
c0026c94:	75 2f                	jne    c0026cc5 <__divsf3+0x91>
c0026c96:	85 c0                	test   eax,eax
c0026c98:	74 2b                	je     c0026cc5 <__divsf3+0x91>
c0026c9a:	51                   	push   ecx
c0026c9b:	51                   	push   ecx
c0026c9c:	6a 00                	push   0x0
c0026c9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ca1:	e8 d2 03 00 00       	call   c0027078 <__nesf2>
c0026ca6:	83 c4 10             	add    esp,0x10
c0026ca9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cac:	85 c0                	test   eax,eax
c0026cae:	0f 85 a1 01 00 00    	jne    c0026e55 <__divsf3+0x221>
c0026cb4:	e9 92 01 00 00       	jmp    c0026e4b <__divsf3+0x217>
c0026cb9:	85 c9                	test   ecx,ecx
c0026cbb:	75 1b                	jne    c0026cd8 <__divsf3+0xa4>
c0026cbd:	8d 57 01             	lea    edx,[edi+0x1]
c0026cc0:	80 e2 fe             	and    dl,0xfe
c0026cc3:	74 1e                	je     c0026ce3 <__divsf3+0xaf>
c0026cc5:	85 ff                	test   edi,edi
c0026cc7:	0f 89 88 01 00 00    	jns    c0026e55 <__divsf3+0x221>
c0026ccd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026cd3:	e9 7d 01 00 00       	jmp    c0026e55 <__divsf3+0x221>
c0026cd8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026cdb:	01 c9                	add    ecx,ecx
c0026cdd:	78 3d                	js     c0026d1c <__divsf3+0xe8>
c0026cdf:	89 d6                	mov    esi,edx
c0026ce1:	eb f5                	jmp    c0026cd8 <__divsf3+0xa4>
c0026ce3:	85 c0                	test   eax,eax
c0026ce5:	b8 00 00 00 00       	mov    eax,0x0
c0026cea:	74 18                	je     c0026d04 <__divsf3+0xd0>
c0026cec:	52                   	push   edx
c0026ced:	52                   	push   edx
c0026cee:	50                   	push   eax
c0026cef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cf2:	e8 81 03 00 00       	call   c0027078 <__nesf2>
c0026cf7:	83 c4 10             	add    esp,0x10
c0026cfa:	85 c0                	test   eax,eax
c0026cfc:	0f 85 50 01 00 00    	jne    c0026e52 <__divsf3+0x21e>
c0026d02:	eb c1                	jmp    c0026cc5 <__divsf3+0x91>
c0026d04:	56                   	push   esi
c0026d05:	56                   	push   esi
c0026d06:	50                   	push   eax
c0026d07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d0a:	e8 69 03 00 00       	call   c0027078 <__nesf2>
c0026d0f:	83 c4 10             	add    esp,0x10
c0026d12:	85 c0                	test   eax,eax
c0026d14:	0f 84 31 01 00 00    	je     c0026e4b <__divsf3+0x217>
c0026d1a:	eb a9                	jmp    c0026cc5 <__divsf3+0x91>
c0026d1c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026d1f:	c1 e3 08             	shl    ebx,0x8
c0026d22:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d28:	8d 57 01             	lea    edx,[edi+0x1]
c0026d2b:	80 e2 fe             	and    dl,0xfe
c0026d2e:	75 71                	jne    c0026da1 <__divsf3+0x16d>
c0026d30:	85 c0                	test   eax,eax
c0026d32:	ba 00 00 00 00       	mov    edx,0x0
c0026d37:	74 2f                	je     c0026d68 <__divsf3+0x134>
c0026d39:	51                   	push   ecx
c0026d3a:	51                   	push   ecx
c0026d3b:	52                   	push   edx
c0026d3c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d3f:	e8 f9 02 00 00       	call   c002703d <__eqsf2>
c0026d44:	83 c4 10             	add    esp,0x10
c0026d47:	85 c0                	test   eax,eax
c0026d49:	0f 85 03 01 00 00    	jne    c0026e52 <__divsf3+0x21e>
c0026d4f:	31 d2                	xor    edx,edx
c0026d51:	89 d3                	mov    ebx,edx
c0026d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d56:	31 f8                	xor    eax,edi
c0026d58:	0f 89 f7 00 00 00    	jns    c0026e55 <__divsf3+0x221>
c0026d5e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026d63:	e9 ed 00 00 00       	jmp    c0026e55 <__divsf3+0x221>
c0026d68:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d6b:	50                   	push   eax
c0026d6c:	50                   	push   eax
c0026d6d:	52                   	push   edx
c0026d6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d71:	e8 c7 02 00 00       	call   c002703d <__eqsf2>
c0026d76:	83 c4 10             	add    esp,0x10
c0026d79:	85 c0                	test   eax,eax
c0026d7b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d7e:	75 16                	jne    c0026d96 <__divsf3+0x162>
c0026d80:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d83:	31 fb                	xor    ebx,edi
c0026d85:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026d8b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026d91:	e9 bf 00 00 00       	jmp    c0026e55 <__divsf3+0x221>
c0026d96:	8d 46 01             	lea    eax,[esi+0x1]
c0026d99:	01 db                	add    ebx,ebx
c0026d9b:	78 04                	js     c0026da1 <__divsf3+0x16d>
c0026d9d:	89 c6                	mov    esi,eax
c0026d9f:	eb f5                	jmp    c0026d96 <__divsf3+0x162>
c0026da1:	89 c8                	mov    eax,ecx
c0026da3:	0d 00 00 00 80       	or     eax,0x80000000
c0026da8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dae:	31 d2                	xor    edx,edx
c0026db0:	39 d8                	cmp    eax,ebx
c0026db2:	72 07                	jb     c0026dbb <__divsf3+0x187>
c0026db4:	29 d8                	sub    eax,ebx
c0026db6:	ba 01 00 00 00       	mov    edx,0x1
c0026dbb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026dc2:	01 d2                	add    edx,edx
c0026dc4:	89 c1                	mov    ecx,eax
c0026dc6:	01 c0                	add    eax,eax
c0026dc8:	85 c9                	test   ecx,ecx
c0026dca:	78 04                	js     c0026dd0 <__divsf3+0x19c>
c0026dcc:	39 c3                	cmp    ebx,eax
c0026dce:	77 05                	ja     c0026dd5 <__divsf3+0x1a1>
c0026dd0:	29 d8                	sub    eax,ebx
c0026dd2:	83 ca 01             	or     edx,0x1
c0026dd5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026dd8:	75 e8                	jne    c0026dc2 <__divsf3+0x18e>
c0026dda:	85 c0                	test   eax,eax
c0026ddc:	0f 95 c0             	setne  al
c0026ddf:	0f b6 c0             	movzx  eax,al
c0026de2:	c1 e2 06             	shl    edx,0x6
c0026de5:	09 c2                	or     edx,eax
c0026de7:	78 03                	js     c0026dec <__divsf3+0x1b8>
c0026de9:	01 d2                	add    edx,edx
c0026deb:	4e                   	dec    esi
c0026dec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026df2:	7f 22                	jg     c0026e16 <__divsf3+0x1e2>
c0026df4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026dfa:	85 f6                	test   esi,esi
c0026dfc:	7f 23                	jg     c0026e21 <__divsf3+0x1ed>
c0026dfe:	83 fe e9             	cmp    esi,0xffffffe9
c0026e01:	7c 1a                	jl     c0026e1d <__divsf3+0x1e9>
c0026e03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e09:	b9 01 00 00 00       	mov    ecx,0x1
c0026e0e:	29 f1                	sub    ecx,esi
c0026e10:	d3 ea                	shr    edx,cl
c0026e12:	31 f6                	xor    esi,esi
c0026e14:	eb 0b                	jmp    c0026e21 <__divsf3+0x1ed>
c0026e16:	be ff 00 00 00       	mov    esi,0xff
c0026e1b:	eb 02                	jmp    c0026e1f <__divsf3+0x1eb>
c0026e1d:	31 f6                	xor    esi,esi
c0026e1f:	31 d2                	xor    edx,edx
c0026e21:	89 d0                	mov    eax,edx
c0026e23:	c1 e8 08             	shr    eax,0x8
c0026e26:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e29:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e2f:	09 fe                	or     esi,edi
c0026e31:	c1 e6 17             	shl    esi,0x17
c0026e34:	09 c6                	or     esi,eax
c0026e36:	f6 c2 7f             	test   dl,0x7f
c0026e39:	0f 95 c1             	setne  cl
c0026e3c:	09 c8                	or     eax,ecx
c0026e3e:	83 e0 01             	and    eax,0x1
c0026e41:	c1 ea 07             	shr    edx,0x7
c0026e44:	21 c2                	and    edx,eax
c0026e46:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026e49:	eb 0a                	jmp    c0026e55 <__divsf3+0x221>
c0026e4b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026e50:	eb 03                	jmp    c0026e55 <__divsf3+0x221>
c0026e52:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e55:	89 d8                	mov    eax,ebx
c0026e57:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e5a:	5b                   	pop    ebx
c0026e5b:	5e                   	pop    esi
c0026e5c:	5f                   	pop    edi
c0026e5d:	5d                   	pop    ebp
c0026e5e:	c3                   	ret    

c0026e5f <__floatsisf>:
c0026e5f:	55                   	push   ebp
c0026e60:	89 e5                	mov    ebp,esp
c0026e62:	53                   	push   ebx
c0026e63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e66:	85 d2                	test   edx,edx
c0026e68:	7e 2b                	jle    c0026e95 <__floatsisf+0x36>
c0026e6a:	0f bd ca             	bsr    ecx,edx
c0026e6d:	83 f1 1f             	xor    ecx,0x1f
c0026e70:	d3 e2                	shl    edx,cl
c0026e72:	89 d0                	mov    eax,edx
c0026e74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e79:	89 c3                	mov    ebx,eax
c0026e7b:	c1 eb 08             	shr    ebx,0x8
c0026e7e:	80 e2 7f             	and    dl,0x7f
c0026e81:	0f 95 c2             	setne  dl
c0026e84:	09 da                	or     edx,ebx
c0026e86:	83 e2 01             	and    edx,0x1
c0026e89:	c1 e8 07             	shr    eax,0x7
c0026e8c:	21 c2                	and    edx,eax
c0026e8e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026e93:	eb 32                	jmp    c0026ec7 <__floatsisf+0x68>
c0026e95:	b8 00 00 00 00       	mov    eax,0x0
c0026e9a:	74 34                	je     c0026ed0 <__floatsisf+0x71>
c0026e9c:	f7 da                	neg    edx
c0026e9e:	0f bd ca             	bsr    ecx,edx
c0026ea1:	83 f1 1f             	xor    ecx,0x1f
c0026ea4:	d3 e2                	shl    edx,cl
c0026ea6:	89 d0                	mov    eax,edx
c0026ea8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ead:	89 c3                	mov    ebx,eax
c0026eaf:	c1 eb 08             	shr    ebx,0x8
c0026eb2:	80 e2 7f             	and    dl,0x7f
c0026eb5:	0f 95 c2             	setne  dl
c0026eb8:	09 da                	or     edx,ebx
c0026eba:	83 e2 01             	and    edx,0x1
c0026ebd:	c1 e8 07             	shr    eax,0x7
c0026ec0:	21 c2                	and    edx,eax
c0026ec2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026ec7:	29 c8                	sub    eax,ecx
c0026ec9:	c1 e0 17             	shl    eax,0x17
c0026ecc:	09 d8                	or     eax,ebx
c0026ece:	01 d0                	add    eax,edx
c0026ed0:	5b                   	pop    ebx
c0026ed1:	5d                   	pop    ebp
c0026ed2:	c3                   	ret    

c0026ed3 <__floatunsisf>:
c0026ed3:	55                   	push   ebp
c0026ed4:	89 e5                	mov    ebp,esp
c0026ed6:	53                   	push   ebx
c0026ed7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026eda:	31 c0                	xor    eax,eax
c0026edc:	85 d2                	test   edx,edx
c0026ede:	74 32                	je     c0026f12 <__floatunsisf+0x3f>
c0026ee0:	0f bd ca             	bsr    ecx,edx
c0026ee3:	83 f1 1f             	xor    ecx,0x1f
c0026ee6:	d3 e2                	shl    edx,cl
c0026ee8:	89 d0                	mov    eax,edx
c0026eea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eef:	89 c3                	mov    ebx,eax
c0026ef1:	c1 eb 08             	shr    ebx,0x8
c0026ef4:	80 e2 7f             	and    dl,0x7f
c0026ef7:	0f 95 c2             	setne  dl
c0026efa:	09 da                	or     edx,ebx
c0026efc:	83 e2 01             	and    edx,0x1
c0026eff:	c1 e8 07             	shr    eax,0x7
c0026f02:	21 c2                	and    edx,eax
c0026f04:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f09:	29 c8                	sub    eax,ecx
c0026f0b:	c1 e0 17             	shl    eax,0x17
c0026f0e:	09 d8                	or     eax,ebx
c0026f10:	01 d0                	add    eax,edx
c0026f12:	5b                   	pop    ebx
c0026f13:	5d                   	pop    ebp
c0026f14:	c3                   	ret    

c0026f15 <__fixsfsi>:
c0026f15:	55                   	push   ebp
c0026f16:	89 e5                	mov    ebp,esp
c0026f18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f1b:	89 d1                	mov    ecx,edx
c0026f1d:	c1 e1 08             	shl    ecx,0x8
c0026f20:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026f26:	c1 fa 17             	sar    edx,0x17
c0026f29:	78 1c                	js     c0026f47 <__fixsfsi+0x32>
c0026f2b:	83 ea 7f             	sub    edx,0x7f
c0026f2e:	31 c0                	xor    eax,eax
c0026f30:	83 fa 1e             	cmp    edx,0x1e
c0026f33:	77 40                	ja     c0026f75 <__fixsfsi+0x60>
c0026f35:	89 c8                	mov    eax,ecx
c0026f37:	0d 00 00 00 80       	or     eax,0x80000000
c0026f3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f41:	29 d1                	sub    ecx,edx
c0026f43:	d3 e8                	shr    eax,cl
c0026f45:	eb 2e                	jmp    c0026f75 <__fixsfsi+0x60>
c0026f47:	31 c0                	xor    eax,eax
c0026f49:	81 c2 81 00 00 00    	add    edx,0x81
c0026f4f:	78 24                	js     c0026f75 <__fixsfsi+0x60>
c0026f51:	83 fa 1e             	cmp    edx,0x1e
c0026f54:	7e 09                	jle    c0026f5f <__fixsfsi+0x4a>
c0026f56:	83 fa 1f             	cmp    edx,0x1f
c0026f59:	75 18                	jne    c0026f73 <__fixsfsi+0x5e>
c0026f5b:	85 c9                	test   ecx,ecx
c0026f5d:	75 14                	jne    c0026f73 <__fixsfsi+0x5e>
c0026f5f:	89 c8                	mov    eax,ecx
c0026f61:	0d 00 00 00 80       	or     eax,0x80000000
c0026f66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f6b:	29 d1                	sub    ecx,edx
c0026f6d:	d3 e8                	shr    eax,cl
c0026f6f:	f7 d8                	neg    eax
c0026f71:	eb 02                	jmp    c0026f75 <__fixsfsi+0x60>
c0026f73:	31 c0                	xor    eax,eax
c0026f75:	5d                   	pop    ebp
c0026f76:	c3                   	ret    

c0026f77 <__fixunssfsi>:
c0026f77:	55                   	push   ebp
c0026f78:	89 e5                	mov    ebp,esp
c0026f7a:	53                   	push   ebx
c0026f7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f7e:	89 d3                	mov    ebx,edx
c0026f80:	c1 fb 17             	sar    ebx,0x17
c0026f83:	83 eb 7f             	sub    ebx,0x7f
c0026f86:	31 c0                	xor    eax,eax
c0026f88:	83 fb 1f             	cmp    ebx,0x1f
c0026f8b:	77 18                	ja     c0026fa5 <__fixunssfsi+0x2e>
c0026f8d:	89 d0                	mov    eax,edx
c0026f8f:	c1 e0 08             	shl    eax,0x8
c0026f92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f97:	0d 00 00 00 80       	or     eax,0x80000000
c0026f9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026fa1:	29 d9                	sub    ecx,ebx
c0026fa3:	d3 e8                	shr    eax,cl
c0026fa5:	5b                   	pop    ebx
c0026fa6:	5d                   	pop    ebp
c0026fa7:	c3                   	ret    

c0026fa8 <__cmpsf2>:
c0026fa8:	55                   	push   ebp
c0026fa9:	89 e5                	mov    ebp,esp
c0026fab:	57                   	push   edi
c0026fac:	56                   	push   esi
c0026fad:	53                   	push   ebx
c0026fae:	83 ec 24             	sub    esp,0x24
c0026fb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fb7:	e8 4f 10 00 00       	call   c002800b <__truncdfsf2>
c0026fbc:	5a                   	pop    edx
c0026fbd:	59                   	pop    ecx
c0026fbe:	89 c3                	mov    ebx,eax
c0026fc0:	c1 e8 17             	shr    eax,0x17
c0026fc3:	0f b6 f0             	movzx  esi,al
c0026fc6:	89 d8                	mov    eax,ebx
c0026fc8:	c1 e8 1f             	shr    eax,0x1f
c0026fcb:	31 c6                	xor    esi,eax
c0026fcd:	c1 e3 08             	shl    ebx,0x8
c0026fd0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026fd3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026fd6:	e8 30 10 00 00       	call   c002800b <__truncdfsf2>
c0026fdb:	83 c4 10             	add    esp,0x10
c0026fde:	89 c1                	mov    ecx,eax
c0026fe0:	c1 e9 17             	shr    ecx,0x17
c0026fe3:	0f b6 c9             	movzx  ecx,cl
c0026fe6:	89 c7                	mov    edi,eax
c0026fe8:	c1 ef 1f             	shr    edi,0x1f
c0026feb:	89 ca                	mov    edx,ecx
c0026fed:	31 fa                	xor    edx,edi
c0026fef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026ff2:	c1 e0 08             	shl    eax,0x8
c0026ff5:	89 c2                	mov    edx,eax
c0026ff7:	89 d8                	mov    eax,ebx
c0026ff9:	09 d0                	or     eax,edx
c0026ffb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027000:	09 f0                	or     eax,esi
c0027002:	75 08                	jne    c002700c <__cmpsf2+0x64>
c0027004:	31 c0                	xor    eax,eax
c0027006:	39 f9                	cmp    ecx,edi
c0027008:	75 0c                	jne    c0027016 <__cmpsf2+0x6e>
c002700a:	eb 29                	jmp    c0027035 <__cmpsf2+0x8d>
c002700c:	b8 01 00 00 00       	mov    eax,0x1
c0027011:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027014:	7f 1f                	jg     c0027035 <__cmpsf2+0x8d>
c0027016:	83 c8 ff             	or     eax,0xffffffff
c0027019:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002701c:	7c 17                	jl     c0027035 <__cmpsf2+0x8d>
c002701e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027024:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002702a:	b8 01 00 00 00       	mov    eax,0x1
c002702f:	39 d3                	cmp    ebx,edx
c0027031:	77 02                	ja     c0027035 <__cmpsf2+0x8d>
c0027033:	19 c0                	sbb    eax,eax
c0027035:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027038:	5b                   	pop    ebx
c0027039:	5e                   	pop    esi
c002703a:	5f                   	pop    edi
c002703b:	5d                   	pop    ebp
c002703c:	c3                   	ret    

c002703d <__eqsf2>:
c002703d:	55                   	push   ebp
c002703e:	89 e5                	mov    ebp,esp
c0027040:	83 ec 24             	sub    esp,0x24
c0027043:	6a 01                	push   0x1
c0027045:	83 ec 0c             	sub    esp,0xc
c0027048:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002704b:	e8 df 10 00 00       	call   c002812f <__extendsfdf2>
c0027050:	83 c4 10             	add    esp,0x10
c0027053:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027056:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027059:	52                   	push   edx
c002705a:	50                   	push   eax
c002705b:	50                   	push   eax
c002705c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002705f:	e8 cb 10 00 00       	call   c002812f <__extendsfdf2>
c0027064:	59                   	pop    ecx
c0027065:	59                   	pop    ecx
c0027066:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027069:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002706c:	52                   	push   edx
c002706d:	50                   	push   eax
c002706e:	e8 35 ff ff ff       	call   c0026fa8 <__cmpsf2>
c0027073:	83 c4 20             	add    esp,0x20
c0027076:	c9                   	leave  
c0027077:	c3                   	ret    

c0027078 <__nesf2>:
c0027078:	eb c3                	jmp    c002703d <__eqsf2>

c002707a <__gtsf2>:
c002707a:	55                   	push   ebp
c002707b:	89 e5                	mov    ebp,esp
c002707d:	83 ec 24             	sub    esp,0x24
c0027080:	6a ff                	push   0xffffffff
c0027082:	83 ec 0c             	sub    esp,0xc
c0027085:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027088:	e8 a2 10 00 00       	call   c002812f <__extendsfdf2>
c002708d:	83 c4 10             	add    esp,0x10
c0027090:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027093:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027096:	52                   	push   edx
c0027097:	50                   	push   eax
c0027098:	50                   	push   eax
c0027099:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002709c:	e8 8e 10 00 00       	call   c002812f <__extendsfdf2>
c00270a1:	59                   	pop    ecx
c00270a2:	59                   	pop    ecx
c00270a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270a9:	52                   	push   edx
c00270aa:	50                   	push   eax
c00270ab:	e8 f8 fe ff ff       	call   c0026fa8 <__cmpsf2>
c00270b0:	83 c4 20             	add    esp,0x20
c00270b3:	c9                   	leave  
c00270b4:	c3                   	ret    

c00270b5 <__gesf2>:
c00270b5:	eb c3                	jmp    c002707a <__gtsf2>

c00270b7 <__ltsf2>:
c00270b7:	eb 84                	jmp    c002703d <__eqsf2>

c00270b9 <__lesf2>:
c00270b9:	eb 82                	jmp    c002703d <__eqsf2>

c00270bb <__adddf3>:
c00270bb:	55                   	push   ebp
c00270bc:	89 e5                	mov    ebp,esp
c00270be:	57                   	push   edi
c00270bf:	56                   	push   esi
c00270c0:	53                   	push   ebx
c00270c1:	83 ec 24             	sub    esp,0x24
c00270c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00270c7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00270ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00270cd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00270d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00270d6:	89 c8                	mov    eax,ecx
c00270d8:	89 ce                	mov    esi,ecx
c00270da:	c1 fe 14             	sar    esi,0x14
c00270dd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00270e0:	89 fb                	mov    ebx,edi
c00270e2:	89 fa                	mov    edx,edi
c00270e4:	c1 e2 0b             	shl    edx,0xb
c00270e7:	c1 e0 0b             	shl    eax,0xb
c00270ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00270ef:	c1 eb 15             	shr    ebx,0x15
c00270f2:	09 d8                	or     eax,ebx
c00270f4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00270f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00270fa:	c1 fe 14             	sar    esi,0x14
c00270fd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027100:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027103:	89 f3                	mov    ebx,esi
c0027105:	c1 e3 0b             	shl    ebx,0xb
c0027108:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002710b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002710e:	c1 e3 0b             	shl    ebx,0xb
c0027111:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027117:	c1 ee 15             	shr    esi,0x15
c002711a:	09 f3                	or     ebx,esi
c002711c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002711f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027122:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027125:	0f 88 5f 02 00 00    	js     c002738a <__adddf3+0x2cf>
c002712b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002712e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027131:	85 db                	test   ebx,ebx
c0027133:	0f 8e c7 00 00 00    	jle    c0027200 <__adddf3+0x145>
c0027139:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027140:	75 1a                	jne    c002715c <__adddf3+0xa1>
c0027142:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027145:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027148:	0f 84 b2 05 00 00    	je     c0027700 <__adddf3+0x645>
c002714e:	4b                   	dec    ebx
c002714f:	75 23                	jne    c0027174 <__adddf3+0xb9>
c0027151:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027154:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027157:	e9 99 00 00 00       	jmp    c00271f5 <__adddf3+0x13a>
c002715c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002715f:	f7 d6                	not    esi
c0027161:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027167:	0f 84 93 05 00 00    	je     c0027700 <__adddf3+0x645>
c002716d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027174:	83 fb 1f             	cmp    ebx,0x1f
c0027177:	7e 42                	jle    c00271bb <__adddf3+0x100>
c0027179:	83 fb 3f             	cmp    ebx,0x3f
c002717c:	0f 8f 7e 05 00 00    	jg     c0027700 <__adddf3+0x645>
c0027182:	83 e3 1f             	and    ebx,0x1f
c0027185:	89 d9                	mov    ecx,ebx
c0027187:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002718a:	d3 ef                	shr    edi,cl
c002718c:	31 db                	xor    ebx,ebx
c002718e:	85 c9                	test   ecx,ecx
c0027190:	74 15                	je     c00271a7 <__adddf3+0xec>
c0027192:	be 20 00 00 00       	mov    esi,0x20
c0027197:	29 ce                	sub    esi,ecx
c0027199:	89 f1                	mov    ecx,esi
c002719b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002719e:	d3 e6                	shl    esi,cl
c00271a0:	31 db                	xor    ebx,ebx
c00271a2:	85 f6                	test   esi,esi
c00271a4:	0f 95 c3             	setne  bl
c00271a7:	31 c9                	xor    ecx,ecx
c00271a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ad:	0f 95 c1             	setne  cl
c00271b0:	09 cf                	or     edi,ecx
c00271b2:	09 fb                	or     ebx,edi
c00271b4:	01 da                	add    edx,ebx
c00271b6:	83 d0 00             	adc    eax,0x0
c00271b9:	eb 3a                	jmp    c00271f5 <__adddf3+0x13a>
c00271bb:	bf 20 00 00 00       	mov    edi,0x20
c00271c0:	29 df                	sub    edi,ebx
c00271c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271c8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271cb:	d3 e6                	shl    esi,cl
c00271cd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271d0:	88 d9                	mov    cl,bl
c00271d2:	d3 ef                	shr    edi,cl
c00271d4:	09 fe                	or     esi,edi
c00271d6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271d9:	88 d9                	mov    cl,bl
c00271db:	d3 ef                	shr    edi,cl
c00271dd:	89 fb                	mov    ebx,edi
c00271df:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271e2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271e5:	d3 e7                	shl    edi,cl
c00271e7:	85 ff                	test   edi,edi
c00271e9:	0f 95 c1             	setne  cl
c00271ec:	0f b6 c9             	movzx  ecx,cl
c00271ef:	09 ce                	or     esi,ecx
c00271f1:	01 f2                	add    edx,esi
c00271f3:	11 d8                	adc    eax,ebx
c00271f5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00271f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271fb:	e9 52 01 00 00       	jmp    c0027352 <__adddf3+0x297>
c0027200:	0f 84 d5 00 00 00    	je     c00272db <__adddf3+0x220>
c0027206:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027209:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002720c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002720f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027212:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027219:	75 20                	jne    c002723b <__adddf3+0x180>
c002721b:	89 d6                	mov    esi,edx
c002721d:	09 c6                	or     esi,eax
c002721f:	0f 84 db 04 00 00    	je     c0027700 <__adddf3+0x645>
c0027225:	4b                   	dec    ebx
c0027226:	75 29                	jne    c0027251 <__adddf3+0x196>
c0027228:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002722b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002722e:	01 d1                	add    ecx,edx
c0027230:	11 c6                	adc    esi,eax
c0027232:	89 f0                	mov    eax,esi
c0027234:	89 ca                	mov    edx,ecx
c0027236:	e9 17 01 00 00       	jmp    c0027352 <__adddf3+0x297>
c002723b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002723e:	f7 d6                	not    esi
c0027240:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027246:	0f 84 b4 04 00 00    	je     c0027700 <__adddf3+0x645>
c002724c:	0d 00 00 00 80       	or     eax,0x80000000
c0027251:	83 fb 1f             	cmp    ebx,0x1f
c0027254:	7e 48                	jle    c002729e <__adddf3+0x1e3>
c0027256:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027259:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002725c:	83 fb 3f             	cmp    ebx,0x3f
c002725f:	0f 8f 9b 04 00 00    	jg     c0027700 <__adddf3+0x645>
c0027265:	83 e3 1f             	and    ebx,0x1f
c0027268:	89 d9                	mov    ecx,ebx
c002726a:	89 c7                	mov    edi,eax
c002726c:	d3 ef                	shr    edi,cl
c002726e:	31 db                	xor    ebx,ebx
c0027270:	85 c9                	test   ecx,ecx
c0027272:	74 12                	je     c0027286 <__adddf3+0x1cb>
c0027274:	be 20 00 00 00       	mov    esi,0x20
c0027279:	29 ce                	sub    esi,ecx
c002727b:	89 f1                	mov    ecx,esi
c002727d:	d3 e0                	shl    eax,cl
c002727f:	31 db                	xor    ebx,ebx
c0027281:	85 c0                	test   eax,eax
c0027283:	0f 95 c3             	setne  bl
c0027286:	31 c0                	xor    eax,eax
c0027288:	85 d2                	test   edx,edx
c002728a:	0f 95 c0             	setne  al
c002728d:	09 c7                	or     edi,eax
c002728f:	09 fb                	or     ebx,edi
c0027291:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027294:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027297:	01 da                	add    edx,ebx
c0027299:	83 d6 00             	adc    esi,0x0
c002729c:	eb 39                	jmp    c00272d7 <__adddf3+0x21c>
c002729e:	be 20 00 00 00       	mov    esi,0x20
c00272a3:	29 de                	sub    esi,ebx
c00272a5:	89 c7                	mov    edi,eax
c00272a7:	89 f1                	mov    ecx,esi
c00272a9:	d3 e7                	shl    edi,cl
c00272ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00272ae:	89 d7                	mov    edi,edx
c00272b0:	88 d9                	mov    cl,bl
c00272b2:	d3 ef                	shr    edi,cl
c00272b4:	89 f9                	mov    ecx,edi
c00272b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272b9:	09 cf                	or     edi,ecx
c00272bb:	88 d9                	mov    cl,bl
c00272bd:	d3 e8                	shr    eax,cl
c00272bf:	89 f1                	mov    ecx,esi
c00272c1:	d3 e2                	shl    edx,cl
c00272c3:	85 d2                	test   edx,edx
c00272c5:	0f 95 c2             	setne  dl
c00272c8:	0f b6 d2             	movzx  edx,dl
c00272cb:	09 d7                	or     edi,edx
c00272cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272d3:	01 fa                	add    edx,edi
c00272d5:	11 c6                	adc    esi,eax
c00272d7:	89 f0                	mov    eax,esi
c00272d9:	eb 77                	jmp    c0027352 <__adddf3+0x297>
c00272db:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272de:	46                   	inc    esi
c00272df:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272e2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00272e8:	75 41                	jne    c002732b <__adddf3+0x270>
c00272ea:	89 d3                	mov    ebx,edx
c00272ec:	09 c3                	or     ebx,eax
c00272ee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272f5:	75 27                	jne    c002731e <__adddf3+0x263>
c00272f7:	85 db                	test   ebx,ebx
c00272f9:	0f 84 fb 03 00 00    	je     c00276fa <__adddf3+0x63f>
c00272ff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027302:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027305:	0f 84 f5 03 00 00    	je     c0027700 <__adddf3+0x645>
c002730b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002730e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027311:	85 c0                	test   eax,eax
c0027313:	0f 89 91 03 00 00    	jns    c00276aa <__adddf3+0x5ef>
c0027319:	e9 85 03 00 00       	jmp    c00276a3 <__adddf3+0x5e8>
c002731e:	85 db                	test   ebx,ebx
c0027320:	0f 85 da 03 00 00    	jne    c0027700 <__adddf3+0x645>
c0027326:	e9 cf 03 00 00       	jmp    c00276fa <__adddf3+0x63f>
c002732b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002732e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027331:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027334:	f7 d1                	not    ecx
c0027336:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002733c:	0f 84 70 03 00 00    	je     c00276b2 <__adddf3+0x5f7>
c0027342:	d1 ea                	shr    edx,1
c0027344:	89 c1                	mov    ecx,eax
c0027346:	c1 e1 1f             	shl    ecx,0x1f
c0027349:	09 ca                	or     edx,ecx
c002734b:	d1 e8                	shr    eax,1
c002734d:	e9 6f 03 00 00       	jmp    c00276c1 <__adddf3+0x606>
c0027352:	85 c0                	test   eax,eax
c0027354:	0f 89 67 03 00 00    	jns    c00276c1 <__adddf3+0x606>
c002735a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002735d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027360:	f7 d1                	not    ecx
c0027362:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027368:	0f 84 44 03 00 00    	je     c00276b2 <__adddf3+0x5f7>
c002736e:	89 d1                	mov    ecx,edx
c0027370:	d1 e9                	shr    ecx,1
c0027372:	83 e2 01             	and    edx,0x1
c0027375:	09 ca                	or     edx,ecx
c0027377:	89 c1                	mov    ecx,eax
c0027379:	c1 e1 1f             	shl    ecx,0x1f
c002737c:	09 ca                	or     edx,ecx
c002737e:	d1 e8                	shr    eax,1
c0027380:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027385:	e9 37 03 00 00       	jmp    c00276c1 <__adddf3+0x606>
c002738a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002738d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027393:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027396:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027399:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002739f:	29 de                	sub    esi,ebx
c00273a1:	85 f6                	test   esi,esi
c00273a3:	0f 8e bd 00 00 00    	jle    c0027466 <__adddf3+0x3ab>
c00273a9:	85 db                	test   ebx,ebx
c00273ab:	75 17                	jne    c00273c4 <__adddf3+0x309>
c00273ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00273b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00273b3:	0f 84 47 03 00 00    	je     c0027700 <__adddf3+0x645>
c00273b9:	4e                   	dec    esi
c00273ba:	75 20                	jne    c00273dc <__adddf3+0x321>
c00273bc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00273bf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00273c2:	eb 5b                	jmp    c002741f <__adddf3+0x364>
c00273c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273c7:	f7 d3                	not    ebx
c00273c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273cf:	0f 84 2b 03 00 00    	je     c0027700 <__adddf3+0x645>
c00273d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00273dc:	83 fe 1f             	cmp    esi,0x1f
c00273df:	7e 49                	jle    c002742a <__adddf3+0x36f>
c00273e1:	83 fe 3f             	cmp    esi,0x3f
c00273e4:	0f 8f 16 03 00 00    	jg     c0027700 <__adddf3+0x645>
c00273ea:	83 e6 1f             	and    esi,0x1f
c00273ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273f0:	89 f1                	mov    ecx,esi
c00273f2:	d3 ef                	shr    edi,cl
c00273f4:	31 db                	xor    ebx,ebx
c00273f6:	85 f6                	test   esi,esi
c00273f8:	74 13                	je     c002740d <__adddf3+0x352>
c00273fa:	b9 20 00 00 00       	mov    ecx,0x20
c00273ff:	29 f1                	sub    ecx,esi
c0027401:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027404:	d3 e6                	shl    esi,cl
c0027406:	31 db                	xor    ebx,ebx
c0027408:	85 f6                	test   esi,esi
c002740a:	0f 95 c3             	setne  bl
c002740d:	31 c9                	xor    ecx,ecx
c002740f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027413:	0f 95 c1             	setne  cl
c0027416:	09 cf                	or     edi,ecx
c0027418:	09 fb                	or     ebx,edi
c002741a:	29 da                	sub    edx,ebx
c002741c:	83 d8 00             	sbb    eax,0x0
c002741f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027422:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027425:	e9 aa 01 00 00       	jmp    c00275d4 <__adddf3+0x519>
c002742a:	bf 20 00 00 00       	mov    edi,0x20
c002742f:	29 f7                	sub    edi,esi
c0027431:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027434:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027437:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002743a:	d3 e3                	shl    ebx,cl
c002743c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002743f:	89 f1                	mov    ecx,esi
c0027441:	d3 ef                	shr    edi,cl
c0027443:	09 fb                	or     ebx,edi
c0027445:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027448:	89 f1                	mov    ecx,esi
c002744a:	d3 ef                	shr    edi,cl
c002744c:	89 fe                	mov    esi,edi
c002744e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027451:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027454:	d3 e7                	shl    edi,cl
c0027456:	85 ff                	test   edi,edi
c0027458:	0f 95 c1             	setne  cl
c002745b:	0f b6 c9             	movzx  ecx,cl
c002745e:	09 cb                	or     ebx,ecx
c0027460:	29 da                	sub    edx,ebx
c0027462:	19 f0                	sbb    eax,esi
c0027464:	eb b9                	jmp    c002741f <__adddf3+0x364>
c0027466:	0f 84 cd 00 00 00    	je     c0027539 <__adddf3+0x47e>
c002746c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002746f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027472:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027475:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027479:	75 1b                	jne    c0027496 <__adddf3+0x3db>
c002747b:	89 d6                	mov    esi,edx
c002747d:	09 c6                	or     esi,eax
c002747f:	0f 84 7b 02 00 00    	je     c0027700 <__adddf3+0x645>
c0027485:	4b                   	dec    ebx
c0027486:	75 24                	jne    c00274ac <__adddf3+0x3f1>
c0027488:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002748b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002748e:	29 d1                	sub    ecx,edx
c0027490:	19 c6                	sbb    esi,eax
c0027492:	89 ca                	mov    edx,ecx
c0027494:	eb 61                	jmp    c00274f7 <__adddf3+0x43c>
c0027496:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027499:	f7 d6                	not    esi
c002749b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274a1:	0f 84 59 02 00 00    	je     c0027700 <__adddf3+0x645>
c00274a7:	0d 00 00 00 80       	or     eax,0x80000000
c00274ac:	83 fb 1f             	cmp    ebx,0x1f
c00274af:	7e 4d                	jle    c00274fe <__adddf3+0x443>
c00274b1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274b7:	83 fb 3f             	cmp    ebx,0x3f
c00274ba:	0f 8f 40 02 00 00    	jg     c0027700 <__adddf3+0x645>
c00274c0:	83 e3 1f             	and    ebx,0x1f
c00274c3:	89 d9                	mov    ecx,ebx
c00274c5:	89 c7                	mov    edi,eax
c00274c7:	d3 ef                	shr    edi,cl
c00274c9:	31 db                	xor    ebx,ebx
c00274cb:	85 c9                	test   ecx,ecx
c00274cd:	74 12                	je     c00274e1 <__adddf3+0x426>
c00274cf:	be 20 00 00 00       	mov    esi,0x20
c00274d4:	29 ce                	sub    esi,ecx
c00274d6:	89 f1                	mov    ecx,esi
c00274d8:	d3 e0                	shl    eax,cl
c00274da:	31 db                	xor    ebx,ebx
c00274dc:	85 c0                	test   eax,eax
c00274de:	0f 95 c3             	setne  bl
c00274e1:	31 c0                	xor    eax,eax
c00274e3:	85 d2                	test   edx,edx
c00274e5:	0f 95 c0             	setne  al
c00274e8:	09 c7                	or     edi,eax
c00274ea:	09 fb                	or     ebx,edi
c00274ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274ef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274f2:	29 da                	sub    edx,ebx
c00274f4:	83 de 00             	sbb    esi,0x0
c00274f7:	89 f0                	mov    eax,esi
c00274f9:	e9 d6 00 00 00       	jmp    c00275d4 <__adddf3+0x519>
c00274fe:	be 20 00 00 00       	mov    esi,0x20
c0027503:	29 de                	sub    esi,ebx
c0027505:	89 c7                	mov    edi,eax
c0027507:	89 f1                	mov    ecx,esi
c0027509:	d3 e7                	shl    edi,cl
c002750b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002750e:	89 d7                	mov    edi,edx
c0027510:	88 d9                	mov    cl,bl
c0027512:	d3 ef                	shr    edi,cl
c0027514:	89 f9                	mov    ecx,edi
c0027516:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027519:	09 cf                	or     edi,ecx
c002751b:	88 d9                	mov    cl,bl
c002751d:	d3 e8                	shr    eax,cl
c002751f:	89 f1                	mov    ecx,esi
c0027521:	d3 e2                	shl    edx,cl
c0027523:	85 d2                	test   edx,edx
c0027525:	0f 95 c2             	setne  dl
c0027528:	0f b6 d2             	movzx  edx,dl
c002752b:	09 d7                	or     edi,edx
c002752d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027530:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027533:	29 fa                	sub    edx,edi
c0027535:	19 c6                	sbb    esi,eax
c0027537:	eb be                	jmp    c00274f7 <__adddf3+0x43c>
c0027539:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002753c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002753f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027545:	75 6a                	jne    c00275b1 <__adddf3+0x4f6>
c0027547:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002754b:	75 58                	jne    c00275a5 <__adddf3+0x4ea>
c002754d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027550:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027553:	89 d6                	mov    esi,edx
c0027555:	09 c6                	or     esi,eax
c0027557:	75 17                	jne    c0027570 <__adddf3+0x4b5>
c0027559:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002755c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002755f:	85 db                	test   ebx,ebx
c0027561:	0f 85 99 01 00 00    	jne    c0027700 <__adddf3+0x645>
c0027567:	31 ff                	xor    edi,edi
c0027569:	31 c9                	xor    ecx,ecx
c002756b:	e9 90 01 00 00       	jmp    c0027700 <__adddf3+0x645>
c0027570:	85 db                	test   ebx,ebx
c0027572:	0f 84 88 01 00 00    	je     c0027700 <__adddf3+0x645>
c0027578:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002757b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002757e:	85 c0                	test   eax,eax
c0027580:	79 10                	jns    c0027592 <__adddf3+0x4d7>
c0027582:	31 c9                	xor    ecx,ecx
c0027584:	f7 da                	neg    edx
c0027586:	0f 95 c1             	setne  cl
c0027589:	01 c8                	add    eax,ecx
c002758b:	f7 d8                	neg    eax
c002758d:	e9 2f 01 00 00       	jmp    c00276c1 <__adddf3+0x606>
c0027592:	31 ff                	xor    edi,edi
c0027594:	31 c9                	xor    ecx,ecx
c0027596:	89 c3                	mov    ebx,eax
c0027598:	09 d3                	or     ebx,edx
c002759a:	0f 84 60 01 00 00    	je     c0027700 <__adddf3+0x645>
c00275a0:	e9 05 01 00 00       	jmp    c00276aa <__adddf3+0x5ef>
c00275a5:	31 ff                	xor    edi,edi
c00275a7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00275ac:	e9 4f 01 00 00       	jmp    c0027700 <__adddf3+0x645>
c00275b1:	89 c1                	mov    ecx,eax
c00275b3:	89 d0                	mov    eax,edx
c00275b5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00275b8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00275bb:	89 ca                	mov    edx,ecx
c00275bd:	85 c9                	test   ecx,ecx
c00275bf:	79 2c                	jns    c00275ed <__adddf3+0x532>
c00275c1:	31 c9                	xor    ecx,ecx
c00275c3:	f7 d8                	neg    eax
c00275c5:	0f 95 c1             	setne  cl
c00275c8:	01 ca                	add    edx,ecx
c00275ca:	f7 da                	neg    edx
c00275cc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00275cf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275d2:	eb 19                	jmp    c00275ed <__adddf3+0x532>
c00275d4:	85 c0                	test   eax,eax
c00275d6:	0f 89 e5 00 00 00    	jns    c00276c1 <__adddf3+0x606>
c00275dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275e1:	89 c1                	mov    ecx,eax
c00275e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00275e9:	89 d0                	mov    eax,edx
c00275eb:	89 ca                	mov    edx,ecx
c00275ed:	85 d2                	test   edx,edx
c00275ef:	74 59                	je     c002764a <__adddf3+0x58f>
c00275f1:	0f bd da             	bsr    ebx,edx
c00275f4:	83 f3 1f             	xor    ebx,0x1f
c00275f7:	88 d9                	mov    cl,bl
c00275f9:	d3 e2                	shl    edx,cl
c00275fb:	bf 20 00 00 00       	mov    edi,0x20
c0027600:	89 f9                	mov    ecx,edi
c0027602:	29 d9                	sub    ecx,ebx
c0027604:	89 c6                	mov    esi,eax
c0027606:	d3 ee                	shr    esi,cl
c0027608:	09 d6                	or     esi,edx
c002760a:	88 d9                	mov    cl,bl
c002760c:	d3 e0                	shl    eax,cl
c002760e:	89 c2                	mov    edx,eax
c0027610:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027613:	25 ff 07 00 00       	and    eax,0x7ff
c0027618:	39 d8                	cmp    eax,ebx
c002761a:	7f 22                	jg     c002763e <__adddf3+0x583>
c002761c:	29 c3                	sub    ebx,eax
c002761e:	43                   	inc    ebx
c002761f:	88 d9                	mov    cl,bl
c0027621:	d3 ea                	shr    edx,cl
c0027623:	29 df                	sub    edi,ebx
c0027625:	89 f9                	mov    ecx,edi
c0027627:	89 f0                	mov    eax,esi
c0027629:	d3 e0                	shl    eax,cl
c002762b:	09 c2                	or     edx,eax
c002762d:	89 f0                	mov    eax,esi
c002762f:	88 d9                	mov    cl,bl
c0027631:	d3 e8                	shr    eax,cl
c0027633:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027636:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002763c:	eb 6f                	jmp    c00276ad <__adddf3+0x5f2>
c002763e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027641:	29 d8                	sub    eax,ebx
c0027643:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027646:	89 f0                	mov    eax,esi
c0027648:	eb 59                	jmp    c00276a3 <__adddf3+0x5e8>
c002764a:	85 c0                	test   eax,eax
c002764c:	74 6a                	je     c00276b8 <__adddf3+0x5fd>
c002764e:	0f bd c8             	bsr    ecx,eax
c0027651:	83 f1 1f             	xor    ecx,0x1f
c0027654:	d3 e0                	shl    eax,cl
c0027656:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027659:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002765f:	83 c1 20             	add    ecx,0x20
c0027662:	39 cb                	cmp    ebx,ecx
c0027664:	7f 35                	jg     c002769b <__adddf3+0x5e0>
c0027666:	29 d9                	sub    ecx,ebx
c0027668:	8d 71 01             	lea    esi,[ecx+0x1]
c002766b:	83 fe 1f             	cmp    esi,0x1f
c002766e:	7e 09                	jle    c0027679 <__adddf3+0x5be>
c0027670:	83 e9 1f             	sub    ecx,0x1f
c0027673:	d3 e8                	shr    eax,cl
c0027675:	89 c3                	mov    ebx,eax
c0027677:	eb 11                	jmp    c002768a <__adddf3+0x5cf>
c0027679:	b9 20 00 00 00       	mov    ecx,0x20
c002767e:	29 f1                	sub    ecx,esi
c0027680:	89 c3                	mov    ebx,eax
c0027682:	d3 e3                	shl    ebx,cl
c0027684:	89 f1                	mov    ecx,esi
c0027686:	d3 e8                	shr    eax,cl
c0027688:	89 c2                	mov    edx,eax
c002768a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002768d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027692:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027695:	89 d0                	mov    eax,edx
c0027697:	89 da                	mov    edx,ebx
c0027699:	eb 26                	jmp    c00276c1 <__adddf3+0x606>
c002769b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002769e:	29 cf                	sub    edi,ecx
c00276a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276a8:	eb 17                	jmp    c00276c1 <__adddf3+0x606>
c00276aa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276ad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276b0:	eb 0f                	jmp    c00276c1 <__adddf3+0x606>
c00276b2:	31 d2                	xor    edx,edx
c00276b4:	31 c0                	xor    eax,eax
c00276b6:	eb 09                	jmp    c00276c1 <__adddf3+0x606>
c00276b8:	89 c2                	mov    edx,eax
c00276ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00276c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276c4:	c1 e1 14             	shl    ecx,0x14
c00276c7:	89 c3                	mov    ebx,eax
c00276c9:	c1 eb 0b             	shr    ebx,0xb
c00276cc:	09 d9                	or     ecx,ebx
c00276ce:	89 d3                	mov    ebx,edx
c00276d0:	c1 eb 0b             	shr    ebx,0xb
c00276d3:	c1 e0 15             	shl    eax,0x15
c00276d6:	09 d8                	or     eax,ebx
c00276d8:	89 c7                	mov    edi,eax
c00276da:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00276e0:	0f 95 c0             	setne  al
c00276e3:	89 c6                	mov    esi,eax
c00276e5:	09 f3                	or     ebx,esi
c00276e7:	83 e3 01             	and    ebx,0x1
c00276ea:	c1 ea 0a             	shr    edx,0xa
c00276ed:	21 da                	and    edx,ebx
c00276ef:	89 f8                	mov    eax,edi
c00276f1:	01 d0                	add    eax,edx
c00276f3:	83 d1 00             	adc    ecx,0x0
c00276f6:	89 c7                	mov    edi,eax
c00276f8:	eb 06                	jmp    c0027700 <__adddf3+0x645>
c00276fa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027700:	89 f8                	mov    eax,edi
c0027702:	89 ca                	mov    edx,ecx
c0027704:	83 c4 24             	add    esp,0x24
c0027707:	5b                   	pop    ebx
c0027708:	5e                   	pop    esi
c0027709:	5f                   	pop    edi
c002770a:	5d                   	pop    ebp
c002770b:	c3                   	ret    

c002770c <__subdf3>:
c002770c:	55                   	push   ebp
c002770d:	89 e5                	mov    ebp,esp
c002770f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027712:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027715:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002771b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002771e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027721:	5d                   	pop    ebp
c0027722:	e9 94 f9 ff ff       	jmp    c00270bb <__adddf3>

c0027727 <__negdf2>:
c0027727:	55                   	push   ebp
c0027728:	89 e5                	mov    ebp,esp
c002772a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002772d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027730:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027736:	5d                   	pop    ebp
c0027737:	c3                   	ret    

c0027738 <__muldf3>:
c0027738:	55                   	push   ebp
c0027739:	89 e5                	mov    ebp,esp
c002773b:	57                   	push   edi
c002773c:	56                   	push   esi
c002773d:	53                   	push   ebx
c002773e:	83 ec 24             	sub    esp,0x24
c0027741:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027744:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027747:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002774a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002774d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027750:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027753:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027756:	89 c8                	mov    eax,ecx
c0027758:	c1 f8 14             	sar    eax,0x14
c002775b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002775e:	89 f8                	mov    eax,edi
c0027760:	89 fb                	mov    ebx,edi
c0027762:	c1 e3 0b             	shl    ebx,0xb
c0027765:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027768:	c1 e1 0b             	shl    ecx,0xb
c002776b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027771:	c1 e8 15             	shr    eax,0x15
c0027774:	09 c1                	or     ecx,eax
c0027776:	89 d6                	mov    esi,edx
c0027778:	89 d0                	mov    eax,edx
c002777a:	c1 f8 14             	sar    eax,0x14
c002777d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027780:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027783:	89 c3                	mov    ebx,eax
c0027785:	c1 e3 0b             	shl    ebx,0xb
c0027788:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002778b:	c1 e6 0b             	shl    esi,0xb
c002778e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027794:	c1 e8 15             	shr    eax,0x15
c0027797:	09 c6                	or     esi,eax
c0027799:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002779c:	25 ff 07 00 00       	and    eax,0x7ff
c00277a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00277a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277a7:	25 ff 07 00 00       	and    eax,0x7ff
c00277ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00277af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00277b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00277b5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00277bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277bf:	40                   	inc    eax
c00277c0:	a9 fe 07 00 00       	test   eax,0x7fe
c00277c5:	0f 85 8d 00 00 00    	jne    c0027858 <__muldf3+0x120>
c00277cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277ce:	09 c8                	or     eax,ecx
c00277d0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00277d4:	74 44                	je     c002781a <__muldf3+0xe2>
c00277d6:	85 c0                	test   eax,eax
c00277d8:	0f 85 31 02 00 00    	jne    c0027a0f <__muldf3+0x2d7>
c00277de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277e1:	40                   	inc    eax
c00277e2:	a9 fe 07 00 00       	test   eax,0x7fe
c00277e7:	75 13                	jne    c00277fc <__muldf3+0xc4>
c00277e9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277ec:	09 f1                	or     ecx,esi
c00277ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277f2:	74 22                	je     c0027816 <__muldf3+0xde>
c00277f4:	85 c9                	test   ecx,ecx
c00277f6:	0f 85 0d 02 00 00    	jne    c0027a09 <__muldf3+0x2d1>
c00277fc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027800:	0f 89 09 02 00 00    	jns    c0027a0f <__muldf3+0x2d7>
c0027806:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027809:	05 00 00 00 80       	add    eax,0x80000000
c002780e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027811:	e9 f9 01 00 00       	jmp    c0027a0f <__muldf3+0x2d7>
c0027816:	85 c9                	test   ecx,ecx
c0027818:	eb 2e                	jmp    c0027848 <__muldf3+0x110>
c002781a:	85 c0                	test   eax,eax
c002781c:	74 20                	je     c002783e <__muldf3+0x106>
c002781e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027821:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027824:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027827:	c1 ef 1f             	shr    edi,0x1f
c002782a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002782d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027830:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027833:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027836:	09 f9                	or     ecx,edi
c0027838:	78 1e                	js     c0027858 <__muldf3+0x120>
c002783a:	89 c3                	mov    ebx,eax
c002783c:	eb e0                	jmp    c002781e <__muldf3+0xe6>
c002783e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027841:	f7 d0                	not    eax
c0027843:	a9 ff 07 00 00       	test   eax,0x7ff
c0027848:	75 b2                	jne    c00277fc <__muldf3+0xc4>
c002784a:	31 ff                	xor    edi,edi
c002784c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027853:	e9 b7 01 00 00       	jmp    c0027a0f <__muldf3+0x2d7>
c0027858:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002785b:	40                   	inc    eax
c002785c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027861:	75 57                	jne    c00278ba <__muldf3+0x182>
c0027863:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027866:	09 f0                	or     eax,esi
c0027868:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002786c:	74 23                	je     c0027891 <__muldf3+0x159>
c002786e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027872:	0f 89 91 01 00 00    	jns    c0027a09 <__muldf3+0x2d1>
c0027878:	85 c0                	test   eax,eax
c002787a:	0f 85 89 01 00 00    	jne    c0027a09 <__muldf3+0x2d1>
c0027880:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027883:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027889:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002788c:	e9 7e 01 00 00       	jmp    c0027a0f <__muldf3+0x2d7>
c0027891:	85 c0                	test   eax,eax
c0027893:	75 0c                	jne    c00278a1 <__muldf3+0x169>
c0027895:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027899:	0f 89 6a 01 00 00    	jns    c0027a09 <__muldf3+0x2d1>
c002789f:	eb df                	jmp    c0027880 <__muldf3+0x148>
c00278a1:	01 f6                	add    esi,esi
c00278a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278a6:	c1 ea 1f             	shr    edx,0x1f
c00278a9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278ac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00278af:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278b2:	09 d6                	or     esi,edx
c00278b4:	78 04                	js     c00278ba <__muldf3+0x182>
c00278b6:	89 c3                	mov    ebx,eax
c00278b8:	eb e7                	jmp    c00278a1 <__muldf3+0x169>
c00278ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00278c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278c6:	89 c8                	mov    eax,ecx
c00278c8:	f7 e6                	mul    esi
c00278ca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00278cd:	89 c7                	mov    edi,eax
c00278cf:	89 c8                	mov    eax,ecx
c00278d1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00278d7:	89 c1                	mov    ecx,eax
c00278d9:	89 f0                	mov    eax,esi
c00278db:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00278de:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00278e1:	89 c6                	mov    esi,eax
c00278e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278e6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00278ec:	31 c0                	xor    eax,eax
c00278ee:	01 f1                	add    ecx,esi
c00278f0:	0f 92 c0             	setb   al
c00278f3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00278f6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00278f9:	83 d6 00             	adc    esi,0x0
c00278fc:	01 c7                	add    edi,eax
c00278fe:	83 d6 00             	adc    esi,0x0
c0027901:	01 ca                	add    edx,ecx
c0027903:	0f 92 c1             	setb   cl
c0027906:	0f b6 c9             	movzx  ecx,cl
c0027909:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002790c:	83 d6 00             	adc    esi,0x0
c002790f:	01 cf                	add    edi,ecx
c0027911:	83 d6 00             	adc    esi,0x0
c0027914:	31 c9                	xor    ecx,ecx
c0027916:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027919:	0f 95 c1             	setne  cl
c002791c:	09 cf                	or     edi,ecx
c002791e:	85 f6                	test   esi,esi
c0027920:	78 0c                	js     c002792e <__muldf3+0x1f6>
c0027922:	01 f6                	add    esi,esi
c0027924:	89 f8                	mov    eax,edi
c0027926:	c1 e8 1f             	shr    eax,0x1f
c0027929:	09 c6                	or     esi,eax
c002792b:	01 ff                	add    edi,edi
c002792d:	4b                   	dec    ebx
c002792e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027934:	0f 8f 85 00 00 00    	jg     c00279bf <__muldf3+0x287>
c002793a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027940:	85 db                	test   ebx,ebx
c0027942:	0f 8f 84 00 00 00    	jg     c00279cc <__muldf3+0x294>
c0027948:	83 fb cc             	cmp    ebx,0xffffffcc
c002794b:	7c 79                	jl     c00279c6 <__muldf3+0x28e>
c002794d:	ba 01 00 00 00       	mov    edx,0x1
c0027952:	29 da                	sub    edx,ebx
c0027954:	81 ce 00 00 00 80    	or     esi,0x80000000
c002795a:	83 fa 1f             	cmp    edx,0x1f
c002795d:	7e 30                	jle    c002798f <__muldf3+0x257>
c002795f:	83 fa 20             	cmp    edx,0x20
c0027962:	75 0b                	jne    c002796f <__muldf3+0x237>
c0027964:	31 c0                	xor    eax,eax
c0027966:	85 ff                	test   edi,edi
c0027968:	0f 95 c0             	setne  al
c002796b:	89 c7                	mov    edi,eax
c002796d:	eb 1a                	jmp    c0027989 <__muldf3+0x251>
c002796f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027972:	89 f0                	mov    eax,esi
c0027974:	d3 e0                	shl    eax,cl
c0027976:	09 f8                	or     eax,edi
c0027978:	0f 95 c0             	setne  al
c002797b:	0f b6 c0             	movzx  eax,al
c002797e:	89 c7                	mov    edi,eax
c0027980:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027985:	29 d9                	sub    ecx,ebx
c0027987:	d3 ee                	shr    esi,cl
c0027989:	09 f7                	or     edi,esi
c002798b:	31 db                	xor    ebx,ebx
c002798d:	eb 3b                	jmp    c00279ca <__muldf3+0x292>
c002798f:	83 c3 1f             	add    ebx,0x1f
c0027992:	89 f0                	mov    eax,esi
c0027994:	88 d9                	mov    cl,bl
c0027996:	d3 e0                	shl    eax,cl
c0027998:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002799b:	89 f8                	mov    eax,edi
c002799d:	88 d1                	mov    cl,dl
c002799f:	d3 e8                	shr    eax,cl
c00279a1:	89 c1                	mov    ecx,eax
c00279a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279a6:	09 c8                	or     eax,ecx
c00279a8:	88 d9                	mov    cl,bl
c00279aa:	d3 e7                	shl    edi,cl
c00279ac:	31 db                	xor    ebx,ebx
c00279ae:	85 ff                	test   edi,edi
c00279b0:	0f 95 c3             	setne  bl
c00279b3:	89 df                	mov    edi,ebx
c00279b5:	09 c7                	or     edi,eax
c00279b7:	88 d1                	mov    cl,dl
c00279b9:	d3 ee                	shr    esi,cl
c00279bb:	31 db                	xor    ebx,ebx
c00279bd:	eb 0d                	jmp    c00279cc <__muldf3+0x294>
c00279bf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00279c4:	eb 02                	jmp    c00279c8 <__muldf3+0x290>
c00279c6:	31 db                	xor    ebx,ebx
c00279c8:	31 ff                	xor    edi,edi
c00279ca:	31 f6                	xor    esi,esi
c00279cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279cf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00279d2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279d7:	09 c3                	or     ebx,eax
c00279d9:	c1 e3 14             	shl    ebx,0x14
c00279dc:	89 f0                	mov    eax,esi
c00279de:	c1 e8 0b             	shr    eax,0xb
c00279e1:	09 c3                	or     ebx,eax
c00279e3:	89 f8                	mov    eax,edi
c00279e5:	c1 e8 0b             	shr    eax,0xb
c00279e8:	c1 e6 15             	shl    esi,0x15
c00279eb:	09 c6                	or     esi,eax
c00279ed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00279f3:	0f 95 c1             	setne  cl
c00279f6:	09 c8                	or     eax,ecx
c00279f8:	83 e0 01             	and    eax,0x1
c00279fb:	c1 ef 0a             	shr    edi,0xa
c00279fe:	21 c7                	and    edi,eax
c0027a00:	01 f7                	add    edi,esi
c0027a02:	83 d3 00             	adc    ebx,0x0
c0027a05:	89 da                	mov    edx,ebx
c0027a07:	eb 03                	jmp    c0027a0c <__muldf3+0x2d4>
c0027a09:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a0c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027a0f:	89 f8                	mov    eax,edi
c0027a11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027a14:	83 c4 24             	add    esp,0x24
c0027a17:	5b                   	pop    ebx
c0027a18:	5e                   	pop    esi
c0027a19:	5f                   	pop    edi
c0027a1a:	5d                   	pop    ebp
c0027a1b:	c3                   	ret    

c0027a1c <__divdf3>:
c0027a1c:	55                   	push   ebp
c0027a1d:	89 e5                	mov    ebp,esp
c0027a1f:	57                   	push   edi
c0027a20:	56                   	push   esi
c0027a21:	53                   	push   ebx
c0027a22:	83 ec 2c             	sub    esp,0x2c
c0027a25:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a2e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a31:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027a34:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a37:	89 ce                	mov    esi,ecx
c0027a39:	89 c8                	mov    eax,ecx
c0027a3b:	c1 f8 14             	sar    eax,0x14
c0027a3e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a41:	89 f8                	mov    eax,edi
c0027a43:	89 fb                	mov    ebx,edi
c0027a45:	c1 e3 0b             	shl    ebx,0xb
c0027a48:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027a4b:	c1 e6 0b             	shl    esi,0xb
c0027a4e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a54:	c1 e8 15             	shr    eax,0x15
c0027a57:	09 c6                	or     esi,eax
c0027a59:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027a5c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a5f:	89 c2                	mov    edx,eax
c0027a61:	c1 fa 14             	sar    edx,0x14
c0027a64:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a67:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a6a:	89 de                	mov    esi,ebx
c0027a6c:	c1 e6 0b             	shl    esi,0xb
c0027a6f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027a72:	c1 e0 0b             	shl    eax,0xb
c0027a75:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a7a:	c1 eb 15             	shr    ebx,0x15
c0027a7d:	09 d8                	or     eax,ebx
c0027a7f:	89 c2                	mov    edx,eax
c0027a81:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a84:	25 ff 07 00 00       	and    eax,0x7ff
c0027a89:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027a8c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a8f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a95:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027a98:	29 d8                	sub    eax,ebx
c0027a9a:	05 ff 03 00 00       	add    eax,0x3ff
c0027a9f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027aa2:	46                   	inc    esi
c0027aa3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027aa9:	0f 85 a5 00 00 00    	jne    c0027b54 <__divdf3+0x138>
c0027aaf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ab2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ab5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ab9:	74 2a                	je     c0027ae5 <__divdf3+0xc9>
c0027abb:	85 f6                	test   esi,esi
c0027abd:	0f 85 cc 02 00 00    	jne    c0027d8f <__divdf3+0x373>
c0027ac3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac6:	40                   	inc    eax
c0027ac7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027acc:	75 26                	jne    c0027af4 <__divdf3+0xd8>
c0027ace:	85 db                	test   ebx,ebx
c0027ad0:	74 22                	je     c0027af4 <__divdf3+0xd8>
c0027ad2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ad5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ad8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027adb:	09 d0                	or     eax,edx
c0027add:	0f 85 ac 02 00 00    	jne    c0027d8f <__divdf3+0x373>
c0027ae3:	eb 63                	jmp    c0027b48 <__divdf3+0x12c>
c0027ae5:	85 f6                	test   esi,esi
c0027ae7:	75 22                	jne    c0027b0b <__divdf3+0xef>
c0027ae9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aec:	40                   	inc    eax
c0027aed:	a9 fe 07 00 00       	test   eax,0x7fe
c0027af2:	74 36                	je     c0027b2a <__divdf3+0x10e>
c0027af4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027af8:	0f 89 91 02 00 00    	jns    c0027d8f <__divdf3+0x373>
c0027afe:	89 f8                	mov    eax,edi
c0027b00:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b06:	e9 80 02 00 00       	jmp    c0027d8b <__divdf3+0x36f>
c0027b0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b0e:	01 f6                	add    esi,esi
c0027b10:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b13:	c1 ef 1f             	shr    edi,0x1f
c0027b16:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b19:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027b1c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027b1f:	09 f7                	or     edi,esi
c0027b21:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027b24:	78 2e                	js     c0027b54 <__divdf3+0x138>
c0027b26:	89 c8                	mov    eax,ecx
c0027b28:	eb e1                	jmp    c0027b0b <__divdf3+0xef>
c0027b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b2d:	09 d0                	or     eax,edx
c0027b2f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b33:	74 0f                	je     c0027b44 <__divdf3+0x128>
c0027b35:	85 c0                	test   eax,eax
c0027b37:	74 bb                	je     c0027af4 <__divdf3+0xd8>
c0027b39:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b3c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b3f:	e9 4b 02 00 00       	jmp    c0027d8f <__divdf3+0x373>
c0027b44:	85 c0                	test   eax,eax
c0027b46:	75 ac                	jne    c0027af4 <__divdf3+0xd8>
c0027b48:	31 ff                	xor    edi,edi
c0027b4a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b4f:	e9 3b 02 00 00       	jmp    c0027d8f <__divdf3+0x373>
c0027b54:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b57:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027b5a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027b60:	75 6b                	jne    c0027bcd <__divdf3+0x1b1>
c0027b62:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b65:	09 d6                	or     esi,edx
c0027b67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b6b:	74 28                	je     c0027b95 <__divdf3+0x179>
c0027b6d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b70:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b73:	85 f6                	test   esi,esi
c0027b75:	0f 85 14 02 00 00    	jne    c0027d8f <__divdf3+0x373>
c0027b7b:	31 ff                	xor    edi,edi
c0027b7d:	31 c9                	xor    ecx,ecx
c0027b7f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b82:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b85:	0f 89 04 02 00 00    	jns    c0027d8f <__divdf3+0x373>
c0027b8b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027b90:	e9 fa 01 00 00       	jmp    c0027d8f <__divdf3+0x373>
c0027b95:	85 f6                	test   esi,esi
c0027b97:	75 1b                	jne    c0027bb4 <__divdf3+0x198>
c0027b99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b9c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b9f:	25 00 00 00 80       	and    eax,0x80000000
c0027ba4:	31 c9                	xor    ecx,ecx
c0027ba6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027bab:	89 cf                	mov    edi,ecx
c0027bad:	89 c1                	mov    ecx,eax
c0027baf:	e9 db 01 00 00       	jmp    c0027d8f <__divdf3+0x373>
c0027bb4:	01 d2                	add    edx,edx
c0027bb6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027bb9:	c1 eb 1f             	shr    ebx,0x1f
c0027bbc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bbf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027bc2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027bc5:	09 da                	or     edx,ebx
c0027bc7:	78 04                	js     c0027bcd <__divdf3+0x1b1>
c0027bc9:	89 c8                	mov    eax,ecx
c0027bcb:	eb e7                	jmp    c0027bb4 <__divdf3+0x198>
c0027bcd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bd0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bd6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bdc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027bdf:	39 d6                	cmp    esi,edx
c0027be1:	77 0d                	ja     c0027bf0 <__divdf3+0x1d4>
c0027be3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027be6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027be9:	72 1b                	jb     c0027c06 <__divdf3+0x1ea>
c0027beb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027bee:	75 16                	jne    c0027c06 <__divdf3+0x1ea>
c0027bf0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027bf3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027bf6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027bf9:	83 de 00             	sbb    esi,0x0
c0027bfc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027bff:	ba 01 00 00 00       	mov    edx,0x1
c0027c04:	eb 02                	jmp    c0027c08 <__divdf3+0x1ec>
c0027c06:	31 d2                	xor    edx,edx
c0027c08:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027c0f:	31 ff                	xor    edi,edi
c0027c11:	01 ff                	add    edi,edi
c0027c13:	89 d1                	mov    ecx,edx
c0027c15:	c1 e9 1f             	shr    ecx,0x1f
c0027c18:	09 cf                	or     edi,ecx
c0027c1a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027c1d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027c20:	89 da                	mov    edx,ebx
c0027c22:	89 f3                	mov    ebx,esi
c0027c24:	8d 34 36             	lea    esi,[esi+esi*1]
c0027c27:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c2a:	c1 e9 1f             	shr    ecx,0x1f
c0027c2d:	09 ce                	or     esi,ecx
c0027c2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c32:	01 c9                	add    ecx,ecx
c0027c34:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027c37:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c3a:	85 db                	test   ebx,ebx
c0027c3c:	78 29                	js     c0027c67 <__divdf3+0x24b>
c0027c3e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027c41:	72 07                	jb     c0027c4a <__divdf3+0x22e>
c0027c43:	75 3c                	jne    c0027c81 <__divdf3+0x265>
c0027c45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c48:	77 37                	ja     c0027c81 <__divdf3+0x265>
c0027c4a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c4d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027c50:	31 d2                	xor    edx,edx
c0027c52:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027c55:	0f 97 c2             	seta   dl
c0027c58:	29 d6                	sub    esi,edx
c0027c5a:	89 d9                	mov    ecx,ebx
c0027c5c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027c5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027c65:	eb 17                	jmp    c0027c7e <__divdf3+0x262>
c0027c67:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c6a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c70:	0f 97 c1             	seta   cl
c0027c73:	0f b6 c9             	movzx  ecx,cl
c0027c76:	29 ce                	sub    esi,ecx
c0027c78:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027c7b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027c7e:	83 ca 01             	or     edx,0x1
c0027c81:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027c84:	75 8b                	jne    c0027c11 <__divdf3+0x1f5>
c0027c86:	c1 e7 09             	shl    edi,0x9
c0027c89:	89 d1                	mov    ecx,edx
c0027c8b:	c1 e9 17             	shr    ecx,0x17
c0027c8e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c91:	09 f3                	or     ebx,esi
c0027c93:	0f 95 c3             	setne  bl
c0027c96:	0f b6 db             	movzx  ebx,bl
c0027c99:	c1 e2 09             	shl    edx,0x9
c0027c9c:	09 d3                	or     ebx,edx
c0027c9e:	89 ca                	mov    edx,ecx
c0027ca0:	09 fa                	or     edx,edi
c0027ca2:	78 0c                	js     c0027cb0 <__divdf3+0x294>
c0027ca4:	01 d2                	add    edx,edx
c0027ca6:	89 d9                	mov    ecx,ebx
c0027ca8:	c1 e9 1f             	shr    ecx,0x1f
c0027cab:	09 ca                	or     edx,ecx
c0027cad:	01 db                	add    ebx,ebx
c0027caf:	48                   	dec    eax
c0027cb0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027cb5:	0f 8f 83 00 00 00    	jg     c0027d3e <__divdf3+0x322>
c0027cbb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027cc1:	85 c0                	test   eax,eax
c0027cc3:	0f 8f 82 00 00 00    	jg     c0027d4b <__divdf3+0x32f>
c0027cc9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ccc:	7c 77                	jl     c0027d45 <__divdf3+0x329>
c0027cce:	be 01 00 00 00       	mov    esi,0x1
c0027cd3:	29 c6                	sub    esi,eax
c0027cd5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cdb:	83 fe 1f             	cmp    esi,0x1f
c0027cde:	7e 2f                	jle    c0027d0f <__divdf3+0x2f3>
c0027ce0:	83 fe 20             	cmp    esi,0x20
c0027ce3:	75 0a                	jne    c0027cef <__divdf3+0x2d3>
c0027ce5:	85 db                	test   ebx,ebx
c0027ce7:	0f 95 c3             	setne  bl
c0027cea:	0f b6 db             	movzx  ebx,bl
c0027ced:	eb 1a                	jmp    c0027d09 <__divdf3+0x2ed>
c0027cef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027cf2:	89 d7                	mov    edi,edx
c0027cf4:	d3 e7                	shl    edi,cl
c0027cf6:	89 f9                	mov    ecx,edi
c0027cf8:	09 d9                	or     ecx,ebx
c0027cfa:	0f 95 c3             	setne  bl
c0027cfd:	0f b6 db             	movzx  ebx,bl
c0027d00:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d05:	29 c1                	sub    ecx,eax
c0027d07:	d3 ea                	shr    edx,cl
c0027d09:	09 d3                	or     ebx,edx
c0027d0b:	31 c0                	xor    eax,eax
c0027d0d:	eb 3a                	jmp    c0027d49 <__divdf3+0x32d>
c0027d0f:	83 c0 1f             	add    eax,0x1f
c0027d12:	89 d7                	mov    edi,edx
c0027d14:	88 c1                	mov    cl,al
c0027d16:	d3 e7                	shl    edi,cl
c0027d18:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d1b:	89 df                	mov    edi,ebx
c0027d1d:	89 f1                	mov    ecx,esi
c0027d1f:	d3 ef                	shr    edi,cl
c0027d21:	89 f9                	mov    ecx,edi
c0027d23:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d26:	09 cf                	or     edi,ecx
c0027d28:	88 c1                	mov    cl,al
c0027d2a:	d3 e3                	shl    ebx,cl
c0027d2c:	85 db                	test   ebx,ebx
c0027d2e:	0f 95 c3             	setne  bl
c0027d31:	0f b6 db             	movzx  ebx,bl
c0027d34:	09 fb                	or     ebx,edi
c0027d36:	89 f1                	mov    ecx,esi
c0027d38:	d3 ea                	shr    edx,cl
c0027d3a:	31 c0                	xor    eax,eax
c0027d3c:	eb 0d                	jmp    c0027d4b <__divdf3+0x32f>
c0027d3e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027d43:	eb 02                	jmp    c0027d47 <__divdf3+0x32b>
c0027d45:	31 c0                	xor    eax,eax
c0027d47:	31 db                	xor    ebx,ebx
c0027d49:	31 d2                	xor    edx,edx
c0027d4b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027d4e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027d51:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027d57:	09 c8                	or     eax,ecx
c0027d59:	c1 e0 14             	shl    eax,0x14
c0027d5c:	89 d1                	mov    ecx,edx
c0027d5e:	c1 e9 0b             	shr    ecx,0xb
c0027d61:	09 c8                	or     eax,ecx
c0027d63:	89 c6                	mov    esi,eax
c0027d65:	89 d9                	mov    ecx,ebx
c0027d67:	c1 e9 0b             	shr    ecx,0xb
c0027d6a:	c1 e2 15             	shl    edx,0x15
c0027d6d:	09 ca                	or     edx,ecx
c0027d6f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027d75:	0f 95 c0             	setne  al
c0027d78:	09 c1                	or     ecx,eax
c0027d7a:	83 e1 01             	and    ecx,0x1
c0027d7d:	c1 eb 0a             	shr    ebx,0xa
c0027d80:	21 cb                	and    ebx,ecx
c0027d82:	01 d3                	add    ebx,edx
c0027d84:	89 d8                	mov    eax,ebx
c0027d86:	83 d6 00             	adc    esi,0x0
c0027d89:	89 f2                	mov    edx,esi
c0027d8b:	89 c7                	mov    edi,eax
c0027d8d:	89 d1                	mov    ecx,edx
c0027d8f:	89 f8                	mov    eax,edi
c0027d91:	89 ca                	mov    edx,ecx
c0027d93:	83 c4 2c             	add    esp,0x2c
c0027d96:	5b                   	pop    ebx
c0027d97:	5e                   	pop    esi
c0027d98:	5f                   	pop    edi
c0027d99:	5d                   	pop    ebp
c0027d9a:	c3                   	ret    

c0027d9b <__floatsidf>:
c0027d9b:	55                   	push   ebp
c0027d9c:	89 e5                	mov    ebp,esp
c0027d9e:	56                   	push   esi
c0027d9f:	53                   	push   ebx
c0027da0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027da3:	85 db                	test   ebx,ebx
c0027da5:	7e 15                	jle    c0027dbc <__floatsidf+0x21>
c0027da7:	0f bd cb             	bsr    ecx,ebx
c0027daa:	83 f1 1f             	xor    ecx,0x1f
c0027dad:	d3 e3                	shl    ebx,cl
c0027daf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027db5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027dba:	eb 21                	jmp    c0027ddd <__floatsidf+0x42>
c0027dbc:	b8 00 00 00 00       	mov    eax,0x0
c0027dc1:	ba 00 00 00 00       	mov    edx,0x0
c0027dc6:	74 2a                	je     c0027df2 <__floatsidf+0x57>
c0027dc8:	f7 db                	neg    ebx
c0027dca:	0f bd cb             	bsr    ecx,ebx
c0027dcd:	83 f1 1f             	xor    ecx,0x1f
c0027dd0:	d3 e3                	shl    ebx,cl
c0027dd2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027dd8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ddd:	29 c8                	sub    eax,ecx
c0027ddf:	c1 e0 14             	shl    eax,0x14
c0027de2:	89 c1                	mov    ecx,eax
c0027de4:	89 de                	mov    esi,ebx
c0027de6:	c1 ee 0b             	shr    esi,0xb
c0027de9:	09 f1                	or     ecx,esi
c0027deb:	89 ca                	mov    edx,ecx
c0027ded:	c1 e3 15             	shl    ebx,0x15
c0027df0:	89 d8                	mov    eax,ebx
c0027df2:	5b                   	pop    ebx
c0027df3:	5e                   	pop    esi
c0027df4:	5d                   	pop    ebp
c0027df5:	c3                   	ret    

c0027df6 <__floatunsidf>:
c0027df6:	55                   	push   ebp
c0027df7:	89 e5                	mov    ebp,esp
c0027df9:	56                   	push   esi
c0027dfa:	53                   	push   ebx
c0027dfb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027dfe:	85 db                	test   ebx,ebx
c0027e00:	74 2a                	je     c0027e2c <__floatunsidf+0x36>
c0027e02:	0f bd cb             	bsr    ecx,ebx
c0027e05:	83 f1 1f             	xor    ecx,0x1f
c0027e08:	d3 e3                	shl    ebx,cl
c0027e0a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e10:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e15:	29 c8                	sub    eax,ecx
c0027e17:	c1 e0 14             	shl    eax,0x14
c0027e1a:	89 c1                	mov    ecx,eax
c0027e1c:	89 de                	mov    esi,ebx
c0027e1e:	c1 ee 0b             	shr    esi,0xb
c0027e21:	09 f1                	or     ecx,esi
c0027e23:	89 ca                	mov    edx,ecx
c0027e25:	c1 e3 15             	shl    ebx,0x15
c0027e28:	89 d8                	mov    eax,ebx
c0027e2a:	eb 04                	jmp    c0027e30 <__floatunsidf+0x3a>
c0027e2c:	31 c0                	xor    eax,eax
c0027e2e:	31 d2                	xor    edx,edx
c0027e30:	5b                   	pop    ebx
c0027e31:	5e                   	pop    esi
c0027e32:	5d                   	pop    ebp
c0027e33:	c3                   	ret    

c0027e34 <__fixdfsi>:
c0027e34:	55                   	push   ebp
c0027e35:	89 e5                	mov    ebp,esp
c0027e37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e3a:	89 d1                	mov    ecx,edx
c0027e3c:	c1 e1 0b             	shl    ecx,0xb
c0027e3f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e48:	c1 e8 15             	shr    eax,0x15
c0027e4b:	09 c1                	or     ecx,eax
c0027e4d:	c1 fa 14             	sar    edx,0x14
c0027e50:	78 1f                	js     c0027e71 <__fixdfsi+0x3d>
c0027e52:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027e58:	31 c0                	xor    eax,eax
c0027e5a:	83 fa 1e             	cmp    edx,0x1e
c0027e5d:	77 40                	ja     c0027e9f <__fixdfsi+0x6b>
c0027e5f:	89 c8                	mov    eax,ecx
c0027e61:	0d 00 00 00 80       	or     eax,0x80000000
c0027e66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e6b:	29 d1                	sub    ecx,edx
c0027e6d:	d3 e8                	shr    eax,cl
c0027e6f:	eb 2e                	jmp    c0027e9f <__fixdfsi+0x6b>
c0027e71:	31 c0                	xor    eax,eax
c0027e73:	81 c2 01 04 00 00    	add    edx,0x401
c0027e79:	78 24                	js     c0027e9f <__fixdfsi+0x6b>
c0027e7b:	83 fa 1e             	cmp    edx,0x1e
c0027e7e:	7e 09                	jle    c0027e89 <__fixdfsi+0x55>
c0027e80:	83 fa 1f             	cmp    edx,0x1f
c0027e83:	75 18                	jne    c0027e9d <__fixdfsi+0x69>
c0027e85:	85 c9                	test   ecx,ecx
c0027e87:	75 14                	jne    c0027e9d <__fixdfsi+0x69>
c0027e89:	89 c8                	mov    eax,ecx
c0027e8b:	0d 00 00 00 80       	or     eax,0x80000000
c0027e90:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e95:	29 d1                	sub    ecx,edx
c0027e97:	d3 e8                	shr    eax,cl
c0027e99:	f7 d8                	neg    eax
c0027e9b:	eb 02                	jmp    c0027e9f <__fixdfsi+0x6b>
c0027e9d:	31 c0                	xor    eax,eax
c0027e9f:	5d                   	pop    ebp
c0027ea0:	c3                   	ret    

c0027ea1 <__fixunsdfsi>:
c0027ea1:	55                   	push   ebp
c0027ea2:	89 e5                	mov    ebp,esp
c0027ea4:	53                   	push   ebx
c0027ea5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027ea8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027eab:	89 d3                	mov    ebx,edx
c0027ead:	c1 fb 14             	sar    ebx,0x14
c0027eb0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027eb6:	31 c0                	xor    eax,eax
c0027eb8:	83 fb 1f             	cmp    ebx,0x1f
c0027ebb:	77 1d                	ja     c0027eda <__fixunsdfsi+0x39>
c0027ebd:	89 d0                	mov    eax,edx
c0027ebf:	c1 e0 0b             	shl    eax,0xb
c0027ec2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ec7:	c1 e9 15             	shr    ecx,0x15
c0027eca:	09 c8                	or     eax,ecx
c0027ecc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ed1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ed6:	29 d9                	sub    ecx,ebx
c0027ed8:	d3 e8                	shr    eax,cl
c0027eda:	5b                   	pop    ebx
c0027edb:	5d                   	pop    ebp
c0027edc:	c3                   	ret    

c0027edd <__cmpdf2>:
c0027edd:	55                   	push   ebp
c0027ede:	89 e5                	mov    ebp,esp
c0027ee0:	57                   	push   edi
c0027ee1:	56                   	push   esi
c0027ee2:	53                   	push   ebx
c0027ee3:	83 ec 0c             	sub    esp,0xc
c0027ee6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ee9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027eec:	89 ca                	mov    edx,ecx
c0027eee:	c1 ea 14             	shr    edx,0x14
c0027ef1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027ef7:	89 cb                	mov    ebx,ecx
c0027ef9:	c1 fb 1f             	sar    ebx,0x1f
c0027efc:	31 da                	xor    edx,ebx
c0027efe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f01:	89 df                	mov    edi,ebx
c0027f03:	c1 e7 0b             	shl    edi,0xb
c0027f06:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f09:	c1 e1 0b             	shl    ecx,0xb
c0027f0c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f12:	c1 eb 15             	shr    ebx,0x15
c0027f15:	09 d9                	or     ecx,ebx
c0027f17:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027f1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f1d:	89 ce                	mov    esi,ecx
c0027f1f:	c1 ee 14             	shr    esi,0x14
c0027f22:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f28:	89 cb                	mov    ebx,ecx
c0027f2a:	c1 fb 1f             	sar    ebx,0x1f
c0027f2d:	31 de                	xor    esi,ebx
c0027f2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027f32:	89 df                	mov    edi,ebx
c0027f34:	c1 e7 0b             	shl    edi,0xb
c0027f37:	c1 e1 0b             	shl    ecx,0xb
c0027f3a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f40:	c1 eb 15             	shr    ebx,0x15
c0027f43:	09 d9                	or     ecx,ebx
c0027f45:	89 d3                	mov    ebx,edx
c0027f47:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f4d:	43                   	inc    ebx
c0027f4e:	83 fb 01             	cmp    ebx,0x1
c0027f51:	77 08                	ja     c0027f5b <__cmpdf2+0x7e>
c0027f53:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f56:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027f59:	75 68                	jne    c0027fc3 <__cmpdf2+0xe6>
c0027f5b:	89 f3                	mov    ebx,esi
c0027f5d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f63:	43                   	inc    ebx
c0027f64:	83 fb 01             	cmp    ebx,0x1
c0027f67:	77 06                	ja     c0027f6f <__cmpdf2+0x92>
c0027f69:	89 fb                	mov    ebx,edi
c0027f6b:	09 cb                	or     ebx,ecx
c0027f6d:	75 54                	jne    c0027fc3 <__cmpdf2+0xe6>
c0027f6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f72:	09 f8                	or     eax,edi
c0027f74:	09 c8                	or     eax,ecx
c0027f76:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027f79:	75 12                	jne    c0027f8d <__cmpdf2+0xb0>
c0027f7b:	8d 42 01             	lea    eax,[edx+0x1]
c0027f7e:	83 f8 01             	cmp    eax,0x1
c0027f81:	77 0a                	ja     c0027f8d <__cmpdf2+0xb0>
c0027f83:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027f86:	31 c0                	xor    eax,eax
c0027f88:	83 fb 01             	cmp    ebx,0x1
c0027f8b:	76 36                	jbe    c0027fc3 <__cmpdf2+0xe6>
c0027f8d:	b8 01 00 00 00       	mov    eax,0x1
c0027f92:	39 f2                	cmp    edx,esi
c0027f94:	7f 2d                	jg     c0027fc3 <__cmpdf2+0xe6>
c0027f96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027f9b:	7c 26                	jl     c0027fc3 <__cmpdf2+0xe6>
c0027f9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fa0:	77 07                	ja     c0027fa9 <__cmpdf2+0xcc>
c0027fa2:	72 16                	jb     c0027fba <__cmpdf2+0xdd>
c0027fa4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027fa7:	76 0a                	jbe    c0027fb3 <__cmpdf2+0xd6>
c0027fa9:	89 d0                	mov    eax,edx
c0027fab:	c1 f8 1f             	sar    eax,0x1f
c0027fae:	83 c8 01             	or     eax,0x1
c0027fb1:	eb 10                	jmp    c0027fc3 <__cmpdf2+0xe6>
c0027fb3:	b8 00 00 00 00       	mov    eax,0x0
c0027fb8:	73 09                	jae    c0027fc3 <__cmpdf2+0xe6>
c0027fba:	89 d0                	mov    eax,edx
c0027fbc:	c1 f8 1f             	sar    eax,0x1f
c0027fbf:	83 e0 02             	and    eax,0x2
c0027fc2:	48                   	dec    eax
c0027fc3:	83 c4 0c             	add    esp,0xc
c0027fc6:	5b                   	pop    ebx
c0027fc7:	5e                   	pop    esi
c0027fc8:	5f                   	pop    edi
c0027fc9:	5d                   	pop    ebp
c0027fca:	c3                   	ret    

c0027fcb <__eqdf2>:
c0027fcb:	55                   	push   ebp
c0027fcc:	89 e5                	mov    ebp,esp
c0027fce:	50                   	push   eax
c0027fcf:	6a 01                	push   0x1
c0027fd1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027fd4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027fd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fdd:	e8 fb fe ff ff       	call   c0027edd <__cmpdf2>
c0027fe2:	83 c4 18             	add    esp,0x18
c0027fe5:	c9                   	leave  
c0027fe6:	c3                   	ret    

c0027fe7 <__nedf2>:
c0027fe7:	eb e2                	jmp    c0027fcb <__eqdf2>

c0027fe9 <__gtdf2>:
c0027fe9:	55                   	push   ebp
c0027fea:	89 e5                	mov    ebp,esp
c0027fec:	50                   	push   eax
c0027fed:	6a ff                	push   0xffffffff
c0027fef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027ff2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027ff5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ff8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ffb:	e8 dd fe ff ff       	call   c0027edd <__cmpdf2>
c0028000:	83 c4 18             	add    esp,0x18
c0028003:	c9                   	leave  
c0028004:	c3                   	ret    

c0028005 <__gedf2>:
c0028005:	eb e2                	jmp    c0027fe9 <__gtdf2>

c0028007 <__ltdf2>:
c0028007:	eb c2                	jmp    c0027fcb <__eqdf2>

c0028009 <__ledf2>:
c0028009:	eb c0                	jmp    c0027fcb <__eqdf2>

c002800b <__truncdfsf2>:
c002800b:	55                   	push   ebp
c002800c:	89 e5                	mov    ebp,esp
c002800e:	57                   	push   edi
c002800f:	56                   	push   esi
c0028010:	53                   	push   ebx
c0028011:	83 ec 0c             	sub    esp,0xc
c0028014:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028017:	89 d1                	mov    ecx,edx
c0028019:	c1 f9 14             	sar    ecx,0x14
c002801c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002801f:	89 df                	mov    edi,ebx
c0028021:	c1 e7 0b             	shl    edi,0xb
c0028024:	89 d0                	mov    eax,edx
c0028026:	c1 e0 0b             	shl    eax,0xb
c0028029:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002802e:	c1 eb 15             	shr    ebx,0x15
c0028031:	09 d8                	or     eax,ebx
c0028033:	89 cb                	mov    ebx,ecx
c0028035:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028041:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028047:	0f 86 9e 00 00 00    	jbe    c00280eb <__truncdfsf2+0xe0>
c002804d:	85 db                	test   ebx,ebx
c002804f:	75 0a                	jne    c002805b <__truncdfsf2+0x50>
c0028051:	c1 fa 17             	sar    edx,0x17
c0028054:	30 d2                	xor    dl,dl
c0028056:	e9 84 00 00 00       	jmp    c00280df <__truncdfsf2+0xd4>
c002805b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028061:	83 fe 83             	cmp    esi,0xffffff83
c0028064:	7d 4b                	jge    c00280b1 <__truncdfsf2+0xa6>
c0028066:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002806b:	29 f1                	sub    ecx,esi
c002806d:	83 f9 1f             	cmp    ecx,0x1f
c0028070:	7f 6b                	jg     c00280dd <__truncdfsf2+0xd2>
c0028072:	0d 00 00 00 80       	or     eax,0x80000000
c0028077:	89 c3                	mov    ebx,eax
c0028079:	d3 eb                	shr    ebx,cl
c002807b:	be 01 00 00 00       	mov    esi,0x1
c0028080:	d3 e6                	shl    esi,cl
c0028082:	4e                   	dec    esi
c0028083:	21 f0                	and    eax,esi
c0028085:	09 f8                	or     eax,edi
c0028087:	0f 95 c0             	setne  al
c002808a:	0f b6 c0             	movzx  eax,al
c002808d:	09 c3                	or     ebx,eax
c002808f:	89 d9                	mov    ecx,ebx
c0028091:	c1 e9 08             	shr    ecx,0x8
c0028094:	f6 c3 7f             	test   bl,0x7f
c0028097:	0f 95 c0             	setne  al
c002809a:	09 c8                	or     eax,ecx
c002809c:	83 e0 01             	and    eax,0x1
c002809f:	c1 eb 07             	shr    ebx,0x7
c00280a2:	21 c3                	and    ebx,eax
c00280a4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00280aa:	09 d1                	or     ecx,edx
c00280ac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00280af:	eb 76                	jmp    c0028127 <__truncdfsf2+0x11c>
c00280b1:	83 c6 80             	add    esi,0xffffff80
c00280b4:	7e 1d                	jle    c00280d3 <__truncdfsf2+0xc8>
c00280b6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00280bc:	75 0b                	jne    c00280c9 <__truncdfsf2+0xbe>
c00280be:	09 f8                	or     eax,edi
c00280c0:	74 09                	je     c00280cb <__truncdfsf2+0xc0>
c00280c2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00280c7:	eb 02                	jmp    c00280cb <__truncdfsf2+0xc0>
c00280c9:	31 c0                	xor    eax,eax
c00280cb:	c1 fa 17             	sar    edx,0x17
c00280ce:	80 ca ff             	or     dl,0xff
c00280d1:	eb 0e                	jmp    c00280e1 <__truncdfsf2+0xd6>
c00280d3:	c1 fa 1f             	sar    edx,0x1f
c00280d6:	c1 e2 08             	shl    edx,0x8
c00280d9:	09 ca                	or     edx,ecx
c00280db:	eb 04                	jmp    c00280e1 <__truncdfsf2+0xd6>
c00280dd:	31 d2                	xor    edx,edx
c00280df:	31 c0                	xor    eax,eax
c00280e1:	c1 e2 17             	shl    edx,0x17
c00280e4:	c1 e8 08             	shr    eax,0x8
c00280e7:	09 d0                	or     eax,edx
c00280e9:	eb 3c                	jmp    c0028127 <__truncdfsf2+0x11c>
c00280eb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00280f1:	89 ca                	mov    edx,ecx
c00280f3:	c1 fa 0b             	sar    edx,0xb
c00280f6:	c1 e2 08             	shl    edx,0x8
c00280f9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00280fc:	31 db                	xor    ebx,ebx
c00280fe:	85 ff                	test   edi,edi
c0028100:	0f 95 c3             	setne  bl
c0028103:	09 d8                	or     eax,ebx
c0028105:	89 c3                	mov    ebx,eax
c0028107:	c1 eb 08             	shr    ebx,0x8
c002810a:	a8 7f                	test   al,0x7f
c002810c:	0f 95 c2             	setne  dl
c002810f:	89 d6                	mov    esi,edx
c0028111:	09 de                	or     esi,ebx
c0028113:	83 e6 01             	and    esi,0x1
c0028116:	c1 e8 07             	shr    eax,0x7
c0028119:	21 f0                	and    eax,esi
c002811b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002811e:	09 ca                	or     edx,ecx
c0028120:	c1 e2 17             	shl    edx,0x17
c0028123:	09 da                	or     edx,ebx
c0028125:	01 d0                	add    eax,edx
c0028127:	83 c4 0c             	add    esp,0xc
c002812a:	5b                   	pop    ebx
c002812b:	5e                   	pop    esi
c002812c:	5f                   	pop    edi
c002812d:	5d                   	pop    ebp
c002812e:	c3                   	ret    

c002812f <__extendsfdf2>:
c002812f:	55                   	push   ebp
c0028130:	89 e5                	mov    ebp,esp
c0028132:	57                   	push   edi
c0028133:	56                   	push   esi
c0028134:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028137:	89 d1                	mov    ecx,edx
c0028139:	c1 f9 17             	sar    ecx,0x17
c002813c:	c1 e2 08             	shl    edx,0x8
c002813f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028145:	89 c8                	mov    eax,ecx
c0028147:	80 e4 f8             	and    ah,0xf8
c002814a:	8d 71 01             	lea    esi,[ecx+0x1]
c002814d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028153:	75 27                	jne    c002817c <__extendsfdf2+0x4d>
c0028155:	81 e1 ff 00 00 00    	and    ecx,0xff
c002815b:	75 18                	jne    c0028175 <__extendsfdf2+0x46>
c002815d:	85 d2                	test   edx,edx
c002815f:	74 20                	je     c0028181 <__extendsfdf2+0x52>
c0028161:	41                   	inc    ecx
c0028162:	01 d2                	add    edx,edx
c0028164:	79 fb                	jns    c0028161 <__extendsfdf2+0x32>
c0028166:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002816c:	29 c8                	sub    eax,ecx
c002816e:	05 81 03 00 00       	add    eax,0x381
c0028173:	eb 0c                	jmp    c0028181 <__extendsfdf2+0x52>
c0028175:	05 00 07 00 00       	add    eax,0x700
c002817a:	eb 05                	jmp    c0028181 <__extendsfdf2+0x52>
c002817c:	05 80 03 00 00       	add    eax,0x380
c0028181:	c1 e0 14             	shl    eax,0x14
c0028184:	89 c1                	mov    ecx,eax
c0028186:	89 d0                	mov    eax,edx
c0028188:	c1 e8 0b             	shr    eax,0xb
c002818b:	09 c1                	or     ecx,eax
c002818d:	c1 e2 15             	shl    edx,0x15
c0028190:	89 d0                	mov    eax,edx
c0028192:	89 ca                	mov    edx,ecx
c0028194:	5e                   	pop    esi
c0028195:	5f                   	pop    edi
c0028196:	5d                   	pop    ebp
c0028197:	c3                   	ret    
c0028198:	66 90                	xchg   ax,ax
c002819a:	66 90                	xchg   ax,ax
c002819c:	66 90                	xchg   ax,ax
c002819e:	66 90                	xchg   ax,ax

c00281a0 <fabs>:
c00281a0:	83 ec 0c             	sub    esp,0xc
c00281a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00281aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00281b7:	dd 04 24             	fld    QWORD PTR [esp]
c00281ba:	83 c4 0c             	add    esp,0xc
c00281bd:	c3                   	ret    
c00281be:	66 90                	xchg   ax,ax

c00281c0 <lrint>:
c00281c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00281c4:	83 ec 04             	sub    esp,0x4
c00281c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00281ca:	58                   	pop    eax
c00281cb:	c3                   	ret    

c00281cc <lrintf>:
c00281cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00281d0:	83 ec 04             	sub    esp,0x4
c00281d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00281d6:	58                   	pop    eax
c00281d7:	c3                   	ret    

Disassembly of section .init:

c00281d8 <_init>:
c00281d8:	55                   	push   ebp
c00281d9:	89 e5                	mov    ebp,esp
c00281db:	e8 38 7f fd ff       	call   c0000118 <frame_dummy>
c00281e0:	e8 5b e0 ff ff       	call   c0026240 <__do_global_ctors_aux>
c00281e5:	5d                   	pop    ebp
c00281e6:	c3                   	ret    

Disassembly of section .fini:

c00281e7 <_fini>:
c00281e7:	55                   	push   ebp
c00281e8:	89 e5                	mov    ebp,esp
c00281ea:	e8 b9 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00281ef:	5d                   	pop    ebp
c00281f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00281f2 <Computer::~Computer()>:
c00281f2:	83 ec 0c             	sub    esp,0xc
c00281f5:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c00281fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281fe:	89 10                	mov    DWORD PTR [eax],edx
c0028200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028204:	83 ec 0c             	sub    esp,0xc
c0028207:	50                   	push   eax
c0028208:	e8 1f b6 fe ff       	call   c001382c <Device::~Device()>
c002820d:	83 c4 10             	add    esp,0x10
c0028210:	90                   	nop
c0028211:	83 c4 0c             	add    esp,0xc
c0028214:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028216 <Computer::~Computer()>:
c0028216:	83 ec 0c             	sub    esp,0xc
c0028219:	83 ec 0c             	sub    esp,0xc
c002821c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028220:	e8 cd ff ff ff       	call   c00281f2 <Computer::~Computer()>
c0028225:	83 c4 10             	add    esp,0x10
c0028228:	83 ec 08             	sub    esp,0x8
c002822b:	68 ec 01 00 00       	push   0x1ec
c0028230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028234:	e8 14 a2 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028239:	83 c4 10             	add    esp,0x10
c002823c:	83 c4 0c             	add    esp,0xc
c002823f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028240 <idleCommon()>:
c0028240:	83 ec 0c             	sub    esp,0xc
c0028243:	fa                   	cli    
c0028244:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c002824a:	e8 9a 55 ff ff       	call   c001d7e9 <schedule()>
c002824f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0028254:	48                   	dec    eax
c0028255:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c002825a:	75 01                	jne    c002825d <idleCommon()+0x1d>
c002825c:	fb                   	sti    
c002825d:	83 c4 0c             	add    esp,0xc
c0028260:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028262 <LinkedList<UnixFile>::~LinkedList()>:
c0028262:	90                   	nop
c0028263:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028264 <LinkedList<UnixFile>::LinkedList()>:
c0028264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002826e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002827d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028288:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002828e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028292:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002829d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282a4:	90                   	nop
c00282a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00282a6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00282a6:	83 ec 0c             	sub    esp,0xc
c00282a9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00282ae:	75 10                	jne    c00282c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00282b0:	83 ec 0c             	sub    esp,0xc
c00282b3:	68 58 9f 02 c0       	push   0xc0029f58
c00282b8:	e8 a2 19 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00282bd:	83 c4 10             	add    esp,0x10
c00282c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00282c6:	85 c0                	test   eax,eax
c00282c8:	74 34                	je     c00282fe <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282d1:	85 c0                	test   eax,eax
c00282d3:	74 29                	je     c00282fe <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282fc:	eb 65                	jmp    c0028363 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00282fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028302:	8b 00                	mov    eax,DWORD PTR [eax]
c0028304:	85 c0                	test   eax,eax
c0028306:	75 4b                	jne    c0028353 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002830f:	85 c0                	test   eax,eax
c0028311:	75 40                	jne    c0028353 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028317:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002831b:	89 10                	mov    DWORD PTR [eax],edx
c002831d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028321:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028325:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002832c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002832f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002833d:	85 c0                	test   eax,eax
c002833f:	74 22                	je     c0028363 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028341:	83 ec 0c             	sub    esp,0xc
c0028344:	68 7a 9f 02 c0       	push   0xc0029f7a
c0028349:	e8 11 19 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002834e:	83 c4 10             	add    esp,0x10
c0028351:	eb 10                	jmp    c0028363 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028353:	83 ec 0c             	sub    esp,0xc
c0028356:	68 84 9f 02 c0       	push   0xc0029f84
c002835b:	e8 ff 18 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028360:	83 c4 10             	add    esp,0x10
c0028363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028367:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002836a:	8d 50 01             	lea    edx,[eax+0x1]
c002836d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028371:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028374:	90                   	nop
c0028375:	83 c4 0c             	add    esp,0xc
c0028378:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002837a <LinkedList<UnixFile>::getFirstElement()>:
c002837a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002837e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028380:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028382 <LinkedList<UnixFile>::removeFirst()>:
c0028382:	83 ec 0c             	sub    esp,0xc
c0028385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028389:	8b 00                	mov    eax,DWORD PTR [eax]
c002838b:	85 c0                	test   eax,eax
c002838d:	75 12                	jne    c00283a1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002838f:	83 ec 0c             	sub    esp,0xc
c0028392:	68 90 9f 02 c0       	push   0xc0029f90
c0028397:	e8 c3 18 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002839c:	83 c4 10             	add    esp,0x10
c002839f:	eb 7e                	jmp    c002841f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00283a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283ab:	85 c0                	test   eax,eax
c00283ad:	74 10                	je     c00283bf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00283af:	83 ec 0c             	sub    esp,0xc
c00283b2:	68 db 9f 02 c0       	push   0xc0029fdb
c00283b7:	e8 a3 18 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00283bc:	83 c4 10             	add    esp,0x10
c00283bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00283c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283c8:	85 c0                	test   eax,eax
c00283ca:	75 33                	jne    c00283ff <LinkedList<UnixFile>::removeFirst()+0x7d>
c00283cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283e8:	83 f8 01             	cmp    eax,0x1
c00283eb:	74 21                	je     c002840e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283ed:	83 ec 0c             	sub    esp,0xc
c00283f0:	68 b4 9f 02 c0       	push   0xc0029fb4
c00283f5:	e8 65 18 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00283fa:	83 c4 10             	add    esp,0x10
c00283fd:	eb 0f                	jmp    c002840e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028403:	8b 00                	mov    eax,DWORD PTR [eax]
c0028405:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840c:	89 10                	mov    DWORD PTR [eax],edx
c002840e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028412:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028415:	8d 50 ff             	lea    edx,[eax-0x1]
c0028418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002841f:	83 c4 0c             	add    esp,0xc
c0028422:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028424 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028428:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002842b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002842c <DriverlessDevice::~DriverlessDevice()>:
c002842c:	ba dc a6 02 c0       	mov    edx,0xc002a6dc
c0028431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028435:	89 10                	mov    DWORD PTR [eax],edx
c0028437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002843b:	50                   	push   eax
c002843c:	e8 eb b3 fe ff       	call   c001382c <Device::~Device()>
c0028441:	83 c4 04             	add    esp,0x4
c0028444:	90                   	nop
c0028445:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028446 <DriverlessDevice::~DriverlessDevice()>:
c0028446:	83 ec 0c             	sub    esp,0xc
c0028449:	83 ec 0c             	sub    esp,0xc
c002844c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028450:	e8 d7 ff ff ff       	call   c002842c <DriverlessDevice::~DriverlessDevice()>
c0028455:	83 c4 10             	add    esp,0x10
c0028458:	83 ec 08             	sub    esp,0x8
c002845b:	68 58 01 00 00       	push   0x158
c0028460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028464:	e8 e4 9f fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028469:	83 c4 10             	add    esp,0x10
c002846c:	83 c4 0c             	add    esp,0xc
c002846f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028470 <LinkedList<Device>::addElement(Device*)>:
c0028470:	83 ec 0c             	sub    esp,0xc
c0028473:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028478:	75 10                	jne    c002848a <LinkedList<Device>::addElement(Device*)+0x1a>
c002847a:	83 ec 0c             	sub    esp,0xc
c002847d:	68 58 9f 02 c0       	push   0xc0029f58
c0028482:	e8 d8 17 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028487:	83 c4 10             	add    esp,0x10
c002848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028490:	85 c0                	test   eax,eax
c0028492:	74 3a                	je     c00284ce <LinkedList<Device>::addElement(Device*)+0x5e>
c0028494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002849b:	85 c0                	test   eax,eax
c002849d:	74 2f                	je     c00284ce <LinkedList<Device>::addElement(Device*)+0x5e>
c002849f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284aa:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00284b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284c2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284cc:	eb 68                	jmp    c0028536 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d4:	85 c0                	test   eax,eax
c00284d6:	75 4e                	jne    c0028526 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284df:	85 c0                	test   eax,eax
c00284e1:	75 43                	jne    c0028526 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284eb:	89 10                	mov    DWORD PTR [eax],edx
c00284ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ff:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028510:	85 c0                	test   eax,eax
c0028512:	74 22                	je     c0028536 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028514:	83 ec 0c             	sub    esp,0xc
c0028517:	68 7a 9f 02 c0       	push   0xc0029f7a
c002851c:	e8 3e 17 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028521:	83 c4 10             	add    esp,0x10
c0028524:	eb 10                	jmp    c0028536 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028526:	83 ec 0c             	sub    esp,0xc
c0028529:	68 84 9f 02 c0       	push   0xc0029f84
c002852e:	e8 2c 17 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028533:	83 c4 10             	add    esp,0x10
c0028536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002853d:	8d 50 01             	lea    edx,[eax+0x1]
c0028540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028544:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028547:	90                   	nop
c0028548:	83 c4 0c             	add    esp,0xc
c002854b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002854c <LinkedList<Device>::LinkedList()>:
c002854c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028550:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002855a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002856c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028570:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002857a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028585:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002858c:	90                   	nop
c002858d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002858e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028592:	8b 00                	mov    eax,DWORD PTR [eax]
c0028594:	85 c0                	test   eax,eax
c0028596:	75 0e                	jne    c00285a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002859c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002859f:	85 c0                	test   eax,eax
c00285a1:	75 03                	jne    c00285a6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00285a3:	b0 01                	mov    al,0x1
c00285a5:	c3                   	ret    
c00285a6:	b0 00                	mov    al,0x0
c00285a8:	90                   	nop
c00285a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00285aa <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00285aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00285b2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00285b2:	83 ec 0c             	sub    esp,0xc
c00285b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00285bb:	85 c0                	test   eax,eax
c00285bd:	75 15                	jne    c00285d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	68 90 9f 02 c0       	push   0xc0029f90
c00285c7:	e8 93 16 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00285cc:	83 c4 10             	add    esp,0x10
c00285cf:	e9 88 00 00 00       	jmp    c002865c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00285d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285de:	85 c0                	test   eax,eax
c00285e0:	0f 95 c0             	setne  al
c00285e3:	84 c0                	test   al,al
c00285e5:	74 10                	je     c00285f7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00285e7:	83 ec 0c             	sub    esp,0xc
c00285ea:	68 db 9f 02 c0       	push   0xc0029fdb
c00285ef:	e8 6b 16 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00285f4:	83 c4 10             	add    esp,0x10
c00285f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00285fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028600:	85 c0                	test   eax,eax
c0028602:	0f 94 c0             	sete   al
c0028605:	84 c0                	test   al,al
c0028607:	74 33                	je     c002863c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002861e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028622:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028625:	83 f8 01             	cmp    eax,0x1
c0028628:	74 21                	je     c002864b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002862a:	83 ec 0c             	sub    esp,0xc
c002862d:	68 b4 9f 02 c0       	push   0xc0029fb4
c0028632:	e8 28 16 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028637:	83 c4 10             	add    esp,0x10
c002863a:	eb 0f                	jmp    c002864b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028640:	8b 00                	mov    eax,DWORD PTR [eax]
c0028642:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028649:	89 10                	mov    DWORD PTR [eax],edx
c002864b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028652:	8d 50 ff             	lea    edx,[eax-0x1]
c0028655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028659:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002865c:	83 c4 0c             	add    esp,0xc
c002865f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028660 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028660:	83 ec 0c             	sub    esp,0xc
c0028663:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028668:	75 10                	jne    c002867a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002866a:	83 ec 0c             	sub    esp,0xc
c002866d:	68 58 9f 02 c0       	push   0xc0029f58
c0028672:	e8 e8 15 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028677:	83 c4 10             	add    esp,0x10
c002867a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028680:	85 c0                	test   eax,eax
c0028682:	74 34                	je     c00286b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002868b:	85 c0                	test   eax,eax
c002868d:	74 29                	je     c00286b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028693:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028696:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002869a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002869d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286af:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286b6:	eb 65                	jmp    c002871d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00286be:	85 c0                	test   eax,eax
c00286c0:	75 4b                	jne    c002870d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286c9:	85 c0                	test   eax,eax
c00286cb:	75 40                	jne    c002870d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 10                	mov    DWORD PTR [eax],edx
c00286d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f7:	85 c0                	test   eax,eax
c00286f9:	74 22                	je     c002871d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286fb:	83 ec 0c             	sub    esp,0xc
c00286fe:	68 7a 9f 02 c0       	push   0xc0029f7a
c0028703:	e8 57 15 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028708:	83 c4 10             	add    esp,0x10
c002870b:	eb 10                	jmp    c002871d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002870d:	83 ec 0c             	sub    esp,0xc
c0028710:	68 84 9f 02 c0       	push   0xc0029f84
c0028715:	e8 45 15 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c002871a:	83 c4 10             	add    esp,0x10
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028724:	8d 50 01             	lea    edx,[eax+0x1]
c0028727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872e:	90                   	nop
c002872f:	83 c4 0c             	add    esp,0xc
c0028732:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028734 <ACPI::~ACPI()>:
c0028734:	83 ec 0c             	sub    esp,0xc
c0028737:	ba 40 af 02 c0       	mov    edx,0xc002af40
c002873c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028740:	89 10                	mov    DWORD PTR [eax],edx
c0028742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028746:	83 ec 0c             	sub    esp,0xc
c0028749:	50                   	push   eax
c002874a:	e8 dd b0 fe ff       	call   c001382c <Device::~Device()>
c002874f:	83 c4 10             	add    esp,0x10
c0028752:	90                   	nop
c0028753:	83 c4 0c             	add    esp,0xc
c0028756:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028758 <ACPI::~ACPI()>:
c0028758:	83 ec 0c             	sub    esp,0xc
c002875b:	83 ec 0c             	sub    esp,0xc
c002875e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028762:	e8 cd ff ff ff       	call   c0028734 <ACPI::~ACPI()>
c0028767:	83 c4 10             	add    esp,0x10
c002876a:	83 ec 08             	sub    esp,0x8
c002876d:	68 64 12 00 00       	push   0x1264
c0028772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028776:	e8 d2 9c fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c002877b:	83 c4 10             	add    esp,0x10
c002877e:	83 c4 0c             	add    esp,0xc
c0028781:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028782 <LinkedList<Device>::~LinkedList()>:
c0028782:	90                   	nop
c0028783:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028784 <LinkedList<Device>::isEmpty()>:
c0028784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028788:	8b 00                	mov    eax,DWORD PTR [eax]
c002878a:	85 c0                	test   eax,eax
c002878c:	75 0e                	jne    c002879c <LinkedList<Device>::isEmpty()+0x18>
c002878e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028792:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028795:	85 c0                	test   eax,eax
c0028797:	75 03                	jne    c002879c <LinkedList<Device>::isEmpty()+0x18>
c0028799:	b0 01                	mov    al,0x1
c002879b:	c3                   	ret    
c002879c:	b0 00                	mov    al,0x0
c002879e:	90                   	nop
c002879f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00287a0 <LinkedList<Device>::getFirstElement()>:
c00287a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00287a8 <LinkedList<Device>::removeFirst()>:
c00287a8:	83 ec 0c             	sub    esp,0xc
c00287ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287af:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b1:	85 c0                	test   eax,eax
c00287b3:	75 15                	jne    c00287ca <LinkedList<Device>::removeFirst()+0x22>
c00287b5:	83 ec 0c             	sub    esp,0xc
c00287b8:	68 90 9f 02 c0       	push   0xc0029f90
c00287bd:	e8 9d 14 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00287c2:	83 c4 10             	add    esp,0x10
c00287c5:	e9 87 00 00 00       	jmp    c0028851 <LinkedList<Device>::removeFirst()+0xa9>
c00287ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00287d7:	85 c0                	test   eax,eax
c00287d9:	74 10                	je     c00287eb <LinkedList<Device>::removeFirst()+0x43>
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 db 9f 02 c0       	push   0xc0029fdb
c00287e3:	e8 77 14 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00287f1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00287f7:	85 c0                	test   eax,eax
c00287f9:	75 33                	jne    c002882e <LinkedList<Device>::removeFirst()+0x86>
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028817:	83 f8 01             	cmp    eax,0x1
c002881a:	74 24                	je     c0028840 <LinkedList<Device>::removeFirst()+0x98>
c002881c:	83 ec 0c             	sub    esp,0xc
c002881f:	68 b4 9f 02 c0       	push   0xc0029fb4
c0028824:	e8 36 14 ff ff       	call   c0019c5f <Krnl::panic(char const*)>
c0028829:	83 c4 10             	add    esp,0x10
c002882c:	eb 12                	jmp    c0028840 <LinkedList<Device>::removeFirst()+0x98>
c002882e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028832:	8b 00                	mov    eax,DWORD PTR [eax]
c0028834:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883e:	89 10                	mov    DWORD PTR [eax],edx
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028847:	8d 50 ff             	lea    edx,[eax-0x1]
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028851:	83 c4 0c             	add    esp,0xc
c0028854:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028856 <CPU::~CPU()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	89 10                	mov    DWORD PTR [eax],edx
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	50                   	push   eax
c002886c:	e8 bb af fe ff       	call   c001382c <Device::~Device()>
c0028871:	83 c4 10             	add    esp,0x10
c0028874:	90                   	nop
c0028875:	83 c4 0c             	add    esp,0xc
c0028878:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002887a <CPU::~CPU()>:
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028884:	e8 cd ff ff ff       	call   c0028856 <CPU::~CPU()>
c0028889:	83 c4 10             	add    esp,0x10
c002888c:	83 ec 08             	sub    esp,0x8
c002888f:	68 98 11 00 00       	push   0x1198
c0028894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028898:	e8 b0 9b fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	83 c4 0c             	add    esp,0xc
c00288a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288a4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288a4:	90                   	nop
c00288a5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288a6 <ThreadControlBlock::ThreadControlBlock()>:
c00288a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00288bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00288c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288cb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00288d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00288dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00288e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00288ed:	90                   	nop
c00288ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00288f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00288f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028909:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028914:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002891a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002891e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028925:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028929:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028930:	90                   	nop
c0028931:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028932 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028936:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028939:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002893a <Vm::_FPUState::_FPUState()>:
c002893a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002893e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028945:	90                   	nop
c0028946:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028948 <PCI::~PCI()>:
c0028948:	83 ec 0c             	sub    esp,0xc
c002894b:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0028950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028954:	89 10                	mov    DWORD PTR [eax],edx
c0028956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895a:	83 ec 0c             	sub    esp,0xc
c002895d:	50                   	push   eax
c002895e:	e8 99 a8 fe ff       	call   c00131fc <Bus::~Bus()>
c0028963:	83 c4 10             	add    esp,0x10
c0028966:	90                   	nop
c0028967:	83 c4 0c             	add    esp,0xc
c002896a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002896c <PCI::~PCI()>:
c002896c:	83 ec 0c             	sub    esp,0xc
c002896f:	83 ec 0c             	sub    esp,0xc
c0028972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028976:	e8 cd ff ff ff       	call   c0028948 <PCI::~PCI()>
c002897b:	83 c4 10             	add    esp,0x10
c002897e:	83 ec 08             	sub    esp,0x8
c0028981:	68 5c 01 00 00       	push   0x15c
c0028986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002898a:	e8 be 9a fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c002898f:	83 c4 10             	add    esp,0x10
c0028992:	83 c4 0c             	add    esp,0xc
c0028995:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028996 <IDE::~IDE()>:
c0028996:	83 ec 0c             	sub    esp,0xc
c0028999:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	89 10                	mov    DWORD PTR [eax],edx
c00289a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a8:	83 ec 0c             	sub    esp,0xc
c00289ab:	50                   	push   eax
c00289ac:	e8 91 b3 fe ff       	call   c0013d42 <HardDiskController::~HardDiskController()>
c00289b1:	83 c4 10             	add    esp,0x10
c00289b4:	90                   	nop
c00289b5:	83 c4 0c             	add    esp,0xc
c00289b8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00289ba <IDE::~IDE()>:
c00289ba:	83 ec 0c             	sub    esp,0xc
c00289bd:	83 ec 0c             	sub    esp,0xc
c00289c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289c4:	e8 cd ff ff ff       	call   c0028996 <IDE::~IDE()>
c00289c9:	83 c4 10             	add    esp,0x10
c00289cc:	83 ec 08             	sub    esp,0x8
c00289cf:	68 70 02 00 00       	push   0x270
c00289d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d8:	e8 70 9a fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c00289dd:	83 c4 10             	add    esp,0x10
c00289e0:	83 c4 0c             	add    esp,0xc
c00289e3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00289e4 <SATABus::~SATABus()>:
c00289e4:	83 ec 0c             	sub    esp,0xc
c00289e7:	ba e8 bd 02 c0       	mov    edx,0xc002bde8
c00289ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f0:	89 10                	mov    DWORD PTR [eax],edx
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	83 ec 0c             	sub    esp,0xc
c00289f9:	50                   	push   eax
c00289fa:	e8 43 b3 fe ff       	call   c0013d42 <HardDiskController::~HardDiskController()>
c00289ff:	83 c4 10             	add    esp,0x10
c0028a02:	90                   	nop
c0028a03:	83 c4 0c             	add    esp,0xc
c0028a06:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a08 <SATABus::~SATABus()>:
c0028a08:	83 ec 0c             	sub    esp,0xc
c0028a0b:	83 ec 0c             	sub    esp,0xc
c0028a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a12:	e8 cd ff ff ff       	call   c00289e4 <SATABus::~SATABus()>
c0028a17:	83 c4 10             	add    esp,0x10
c0028a1a:	83 ec 08             	sub    esp,0x8
c0028a1d:	68 64 01 00 00       	push   0x164
c0028a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a26:	e8 22 9a fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028a2b:	83 c4 10             	add    esp,0x10
c0028a2e:	83 c4 0c             	add    esp,0xc
c0028a31:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a32 <ATA::~ATA()>:
c0028a32:	83 ec 0c             	sub    esp,0xc
c0028a35:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	89 10                	mov    DWORD PTR [eax],edx
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	83 ec 0c             	sub    esp,0xc
c0028a47:	50                   	push   eax
c0028a48:	e8 d7 b3 fe ff       	call   c0013e24 <PhysicalDisk::~PhysicalDisk()>
c0028a4d:	83 c4 10             	add    esp,0x10
c0028a50:	90                   	nop
c0028a51:	83 c4 0c             	add    esp,0xc
c0028a54:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a56 <ATA::~ATA()>:
c0028a56:	83 ec 0c             	sub    esp,0xc
c0028a59:	83 ec 0c             	sub    esp,0xc
c0028a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a60:	e8 cd ff ff ff       	call   c0028a32 <ATA::~ATA()>
c0028a65:	83 c4 10             	add    esp,0x10
c0028a68:	83 ec 08             	sub    esp,0x8
c0028a6b:	68 7c 01 00 00       	push   0x17c
c0028a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a74:	e8 d4 99 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028a79:	83 c4 10             	add    esp,0x10
c0028a7c:	83 c4 0c             	add    esp,0xc
c0028a7f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028a80 <ATAPI::~ATAPI()>:
c0028a80:	83 ec 0c             	sub    esp,0xc
c0028a83:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c0028a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8c:	89 10                	mov    DWORD PTR [eax],edx
c0028a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a92:	83 ec 0c             	sub    esp,0xc
c0028a95:	50                   	push   eax
c0028a96:	e8 89 b3 fe ff       	call   c0013e24 <PhysicalDisk::~PhysicalDisk()>
c0028a9b:	83 c4 10             	add    esp,0x10
c0028a9e:	90                   	nop
c0028a9f:	83 c4 0c             	add    esp,0xc
c0028aa2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028aa4 <ATAPI::~ATAPI()>:
c0028aa4:	83 ec 0c             	sub    esp,0xc
c0028aa7:	83 ec 0c             	sub    esp,0xc
c0028aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aae:	e8 cd ff ff ff       	call   c0028a80 <ATAPI::~ATAPI()>
c0028ab3:	83 c4 10             	add    esp,0x10
c0028ab6:	83 ec 08             	sub    esp,0x8
c0028ab9:	68 80 01 00 00       	push   0x180
c0028abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac2:	e8 86 99 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	83 c4 0c             	add    esp,0xc
c0028acd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ace <SATA::~SATA()>:
c0028ace:	83 ec 0c             	sub    esp,0xc
c0028ad1:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c0028ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ada:	89 10                	mov    DWORD PTR [eax],edx
c0028adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae0:	83 ec 0c             	sub    esp,0xc
c0028ae3:	50                   	push   eax
c0028ae4:	e8 3b b3 fe ff       	call   c0013e24 <PhysicalDisk::~PhysicalDisk()>
c0028ae9:	83 c4 10             	add    esp,0x10
c0028aec:	90                   	nop
c0028aed:	83 c4 0c             	add    esp,0xc
c0028af0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028af2 <SATA::~SATA()>:
c0028af2:	83 ec 0c             	sub    esp,0xc
c0028af5:	83 ec 0c             	sub    esp,0xc
c0028af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028afc:	e8 cd ff ff ff       	call   c0028ace <SATA::~SATA()>
c0028b01:	83 c4 10             	add    esp,0x10
c0028b04:	83 ec 08             	sub    esp,0x8
c0028b07:	68 7c 01 00 00       	push   0x17c
c0028b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b10:	e8 38 99 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028b15:	83 c4 10             	add    esp,0x10
c0028b18:	83 c4 0c             	add    esp,0xc
c0028b1b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b1c <SATAPI::~SATAPI()>:
c0028b1c:	83 ec 0c             	sub    esp,0xc
c0028b1f:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	89 10                	mov    DWORD PTR [eax],edx
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	83 ec 0c             	sub    esp,0xc
c0028b31:	50                   	push   eax
c0028b32:	e8 ed b2 fe ff       	call   c0013e24 <PhysicalDisk::~PhysicalDisk()>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	90                   	nop
c0028b3b:	83 c4 0c             	add    esp,0xc
c0028b3e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b40 <SATAPI::~SATAPI()>:
c0028b40:	83 ec 0c             	sub    esp,0xc
c0028b43:	83 ec 0c             	sub    esp,0xc
c0028b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b4a:	e8 cd ff ff ff       	call   c0028b1c <SATAPI::~SATAPI()>
c0028b4f:	83 c4 10             	add    esp,0x10
c0028b52:	83 ec 08             	sub    esp,0x8
c0028b55:	68 80 01 00 00       	push   0x180
c0028b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b5e:	e8 ea 98 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028b63:	83 c4 10             	add    esp,0x10
c0028b66:	83 c4 0c             	add    esp,0xc
c0028b69:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028b6a <AVX::~AVX()>:
c0028b6a:	83 ec 0c             	sub    esp,0xc
c0028b6d:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c0028b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b76:	89 10                	mov    DWORD PTR [eax],edx
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	83 ec 0c             	sub    esp,0xc
c0028b7f:	50                   	push   eax
c0028b80:	e8 23 b3 fe ff       	call   c0013ea8 <FPU::~FPU()>
c0028b85:	83 c4 10             	add    esp,0x10
c0028b88:	90                   	nop
c0028b89:	83 c4 0c             	add    esp,0xc
c0028b8c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028b8e <AVX::~AVX()>:
c0028b8e:	83 ec 0c             	sub    esp,0xc
c0028b91:	83 ec 0c             	sub    esp,0xc
c0028b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b98:	e8 cd ff ff ff       	call   c0028b6a <AVX::~AVX()>
c0028b9d:	83 c4 10             	add    esp,0x10
c0028ba0:	83 ec 08             	sub    esp,0x8
c0028ba3:	68 58 01 00 00       	push   0x158
c0028ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bac:	e8 9c 98 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028bb1:	83 c4 10             	add    esp,0x10
c0028bb4:	83 c4 0c             	add    esp,0xc
c0028bb7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028bb8 <MMX::~MMX()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	89 10                	mov    DWORD PTR [eax],edx
c0028bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	50                   	push   eax
c0028bce:	e8 d5 b2 fe ff       	call   c0013ea8 <FPU::~FPU()>
c0028bd3:	83 c4 10             	add    esp,0x10
c0028bd6:	90                   	nop
c0028bd7:	83 c4 0c             	add    esp,0xc
c0028bda:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028bdc <MMX::~MMX()>:
c0028bdc:	83 ec 0c             	sub    esp,0xc
c0028bdf:	83 ec 0c             	sub    esp,0xc
c0028be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be6:	e8 cd ff ff ff       	call   c0028bb8 <MMX::~MMX()>
c0028beb:	83 c4 10             	add    esp,0x10
c0028bee:	83 ec 08             	sub    esp,0x8
c0028bf1:	68 58 01 00 00       	push   0x158
c0028bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bfa:	e8 4e 98 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028bff:	83 c4 10             	add    esp,0x10
c0028c02:	83 c4 0c             	add    esp,0xc
c0028c05:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c06 <SSE::~SSE()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0028c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c12:	89 10                	mov    DWORD PTR [eax],edx
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	50                   	push   eax
c0028c1c:	e8 87 b2 fe ff       	call   c0013ea8 <FPU::~FPU()>
c0028c21:	83 c4 10             	add    esp,0x10
c0028c24:	90                   	nop
c0028c25:	83 c4 0c             	add    esp,0xc
c0028c28:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c2a <SSE::~SSE()>:
c0028c2a:	83 ec 0c             	sub    esp,0xc
c0028c2d:	83 ec 0c             	sub    esp,0xc
c0028c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c34:	e8 cd ff ff ff       	call   c0028c06 <SSE::~SSE()>
c0028c39:	83 c4 10             	add    esp,0x10
c0028c3c:	83 ec 08             	sub    esp,0x8
c0028c3f:	68 58 01 00 00       	push   0x158
c0028c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c48:	e8 00 98 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	83 c4 0c             	add    esp,0xc
c0028c53:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c54 <x87::~x87()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0028c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c60:	89 10                	mov    DWORD PTR [eax],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	50                   	push   eax
c0028c6a:	e8 39 b2 fe ff       	call   c0013ea8 <FPU::~FPU()>
c0028c6f:	83 c4 10             	add    esp,0x10
c0028c72:	90                   	nop
c0028c73:	83 c4 0c             	add    esp,0xc
c0028c76:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028c78 <x87::~x87()>:
c0028c78:	83 ec 0c             	sub    esp,0xc
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c82:	e8 cd ff ff ff       	call   c0028c54 <x87::~x87()>
c0028c87:	83 c4 10             	add    esp,0x10
c0028c8a:	83 ec 08             	sub    esp,0x8
c0028c8d:	68 58 01 00 00       	push   0x158
c0028c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c96:	e8 b2 97 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028c9b:	83 c4 10             	add    esp,0x10
c0028c9e:	83 c4 0c             	add    esp,0xc
c0028ca1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ca2 <IOAPIC::~IOAPIC()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	ba 54 c2 02 c0       	mov    edx,0xc002c254
c0028caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cae:	89 10                	mov    DWORD PTR [eax],edx
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	50                   	push   eax
c0028cb8:	e8 6f ab fe ff       	call   c001382c <Device::~Device()>
c0028cbd:	83 c4 10             	add    esp,0x10
c0028cc0:	90                   	nop
c0028cc1:	83 c4 0c             	add    esp,0xc
c0028cc4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028cc6 <IOAPIC::~IOAPIC()>:
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	83 ec 0c             	sub    esp,0xc
c0028ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd0:	e8 cd ff ff ff       	call   c0028ca2 <IOAPIC::~IOAPIC()>
c0028cd5:	83 c4 10             	add    esp,0x10
c0028cd8:	83 ec 08             	sub    esp,0x8
c0028cdb:	68 68 01 00 00       	push   0x168
c0028ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce4:	e8 64 97 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	83 c4 0c             	add    esp,0xc
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028cf0 <APIC::~APIC()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	ba 0c c2 02 c0       	mov    edx,0xc002c20c
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	89 10                	mov    DWORD PTR [eax],edx
c0028cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	50                   	push   eax
c0028d06:	e8 67 b6 fe ff       	call   c0014372 <InterruptController::~InterruptController()>
c0028d0b:	83 c4 10             	add    esp,0x10
c0028d0e:	90                   	nop
c0028d0f:	83 c4 0c             	add    esp,0xc
c0028d12:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d14 <APIC::~APIC()>:
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	83 ec 0c             	sub    esp,0xc
c0028d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1e:	e8 cd ff ff ff       	call   c0028cf0 <APIC::~APIC()>
c0028d23:	83 c4 10             	add    esp,0x10
c0028d26:	83 ec 08             	sub    esp,0x8
c0028d29:	68 58 21 00 00       	push   0x2158
c0028d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d32:	e8 16 97 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	83 c4 0c             	add    esp,0xc
c0028d3d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d3e <PIC::~PIC()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0028d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4a:	89 10                	mov    DWORD PTR [eax],edx
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	50                   	push   eax
c0028d54:	e8 19 b6 fe ff       	call   c0014372 <InterruptController::~InterruptController()>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	90                   	nop
c0028d5d:	83 c4 0c             	add    esp,0xc
c0028d60:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028d62 <PIC::~PIC()>:
c0028d62:	83 ec 0c             	sub    esp,0xc
c0028d65:	83 ec 0c             	sub    esp,0xc
c0028d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6c:	e8 cd ff ff ff       	call   c0028d3e <PIC::~PIC()>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	83 ec 08             	sub    esp,0x8
c0028d77:	68 58 21 00 00       	push   0x2158
c0028d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d80:	e8 c8 96 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	83 c4 0c             	add    esp,0xc
c0028d8b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028d8c <APICTimer::~APICTimer()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	ba f8 c2 02 c0       	mov    edx,0xc002c2f8
c0028d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d98:	89 10                	mov    DWORD PTR [eax],edx
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	50                   	push   eax
c0028da2:	e8 f1 d5 fe ff       	call   c0016398 <Timer::~Timer()>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	90                   	nop
c0028dab:	83 c4 0c             	add    esp,0xc
c0028dae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028db0 <APICTimer::~APICTimer()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	83 ec 0c             	sub    esp,0xc
c0028db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dba:	e8 cd ff ff ff       	call   c0028d8c <APICTimer::~APICTimer()>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	83 ec 08             	sub    esp,0x8
c0028dc5:	68 60 01 00 00       	push   0x160
c0028dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dce:	e8 7a 96 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	83 c4 0c             	add    esp,0xc
c0028dd9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028dda <PIT::~PIT()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0028de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de6:	89 10                	mov    DWORD PTR [eax],edx
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	50                   	push   eax
c0028df0:	e8 a3 d5 fe ff       	call   c0016398 <Timer::~Timer()>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	90                   	nop
c0028df9:	83 c4 0c             	add    esp,0xc
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028dfe <PIT::~PIT()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	83 ec 0c             	sub    esp,0xc
c0028e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e08:	e8 cd ff ff ff       	call   c0028dda <PIT::~PIT()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	83 ec 08             	sub    esp,0x8
c0028e13:	68 5c 01 00 00       	push   0x15c
c0028e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1c:	e8 2c 96 fe ff       	call   c001244d <operator delete(void*, unsigned long)>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	83 c4 0c             	add    esp,0xc
c0028e27:	c3                   	ret    
