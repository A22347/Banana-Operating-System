
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d9 29 02 00       	call   c00229fe <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 36 02 c0       	mov    ebx,0xc0023682
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 36 02 c0    	cmp    ebx,0xc0023690
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 7a 02 c0       	mov    eax,0xc0027ad8
c0000049:	3d d8 7a 02 c0       	cmp    eax,0xc0027ad8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 7a 02 c0       	push   0xc0027ad8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 7a 02 c0       	mov    eax,0xc0027ad8
c0000075:	2d d8 7a 02 c0       	sub    eax,0xc0027ad8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 7a 02 c0       	push   0xc0027ad8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027c60,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 36 02 c0       	mov    ebx,0xc0023698
c00000bb:	81 eb 94 36 02 c0    	sub    ebx,0xc0023694
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 36 02 c0       	mov    esi,0xc0023694
c00000ca:	a1 64 7c 02 c0       	mov    eax,ds:0xc0027c64
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 7c 02 c0       	mov    ds:0xc0027c64,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 7c 02 c0       	mov    eax,ds:0xc0027c64
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 7a 02 c0       	push   0xc0027ad8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027c60,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 7c 02 c0       	push   0xc0027c68
c000012c:	68 d8 7a 02 c0       	push   0xc0027ad8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 fc 7c 01 00       	call   c0017fd4 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 78 c7 00 00       	call   c000ca68 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 da 7c 01 00       	call   c0017fd4 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 a3 81 01 00       	call   c00184bc <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 e6 87 01 00       	call   c0018b08 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 b0 80 02 c0 	lgdtd  ds:0xc00280b0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 fe e5 00 00       	call   c000eb15 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 80 7c 02 c0       	mov    ds:0xc0027c80,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 80 7c 02 c0    	mov    DWORD PTR ds:0xc0027c80,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 80 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027c80
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 36 02 c0 02 	test   BYTE PTR [edx-0x3ffdc960],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc960],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 36 02 c0 08 	test   BYTE PTR [edx-0x3ffdc960],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 36 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc960],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc960],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d a0 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ca0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d a0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ca0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 a4 7c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd835c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 a4 7c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd835c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d a0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ca0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d dc 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027cdc
c0000d6c:	c7 42 0c d4 7c 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027cd4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 dc 7c 02 c0    	mov    DWORD PTR ds:0xc0027cdc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 cc 7c 02 c0    	mov    DWORD PTR ds:0xc0027ccc,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 a0 7c 02 c0 02 	test   BYTE PTR ds:0xc0027ca0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d a0 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027ca0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 a4 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd835c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 a4 7c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd835c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 d4 7c 02 c0 	lea    edx,[eax*8-0x3ffd832c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d e0 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ce0
c00010ee:	81 fb d4 7c 02 c0    	cmp    ebx,0xc0027cd4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d d4 7c 02 c0       	cmp    eax,0xc0027cd4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d d0 7c 02 c0    	cmp    DWORD PTR ds:0xc0027cd0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 dc 7c 02 c0       	mov    ds:0xc0027cdc,eax
c000112a:	a3 e0 7c 02 c0       	mov    ds:0xc0027ce0,eax
c000112f:	a3 d0 7c 02 c0       	mov    ds:0xc0027cd0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 d4 7c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027cd4
c000113d:	c7 40 0c d4 7c 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027cd4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 e0 7c 02 c0       	mov    ds:0xc0027ce0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 d4 7c 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027cd4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 98 7c 02 c0 	lea    ebp,[edx*4-0x3ffd8368]
c000118e:	8b 14 95 a0 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8360]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 a0 7c 02 c0 	lea    ecx,[edx*4-0x3ffd8360]
c00011a9:	8b 14 95 a0 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8360]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd d4 7f 02 c0 	or     DWORD PTR [edi*4-0x3ffd802c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 d4 7c 02 c0 	lea    eax,[eax*8-0x3ffd832c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d dc 7c 02 c0    	mov    DWORD PTR ds:0xc0027cdc,ecx
c0001263:	89 0d e0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ce0,ecx
c0001269:	c7 41 08 d4 7c 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027cd4
c0001270:	c7 41 0c d4 7c 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027cd4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd cc 7c 02 c0 	lea    edx,[ecx*8-0x3ffd8334]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d d4 7f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd802c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d d4 7f 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd802c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 cc 7c 02 c0 	lea    edx,[eax*4-0x3ffd8334]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d d4 7f 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd802c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d dc 7c 02 c0    	mov    DWORD PTR ds:0xc0027cdc,edi
c0001336:	89 3d e0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ce0,edi
c000133c:	c7 47 08 d4 7c 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027cd4
c0001343:	c7 47 0c d4 7c 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027cd4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d d0 7c 02 c0    	mov    DWORD PTR ds:0xc0027cd0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 cc 7c 02 c0       	mov    eax,ds:0xc0027ccc
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d cc 7c 02 c0    	mov    DWORD PTR ds:0xc0027ccc,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba a0 7c 02 c0       	mov    edx,0xc0027ca0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d a0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ca0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d f4 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ff4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 f4 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ff4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d f4 7f 02 c0    	mov    DWORD PTR ds:0xc0027ff4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d cc 7c 02 c0    	mov    DWORD PTR ds:0xc0027ccc,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d a0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ca0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 fc 7f 02 c0    	push   DWORD PTR ds:0xc0027ffc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d a0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ca0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 fc 7f 02 c0       	mov    eax,ds:0xc0027ffc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d cc 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ccc,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 cc 7c 02 c0       	mov    eax,ds:0xc0027ccc
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 a4 7c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd835c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 d4 7c 02 c0       	mov    eax,0xc0027cd4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d cc 7f 02 c0       	cmp    eax,0xc0027fcc
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 08 80 02 c0       	mov    eax,ds:0xc0028008
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 f0 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027ff0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 04 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028004
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 14 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028014
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 a0 7c 02 c0       	mov    eax,0xc0027ca0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 37 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc85c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 a0 7c 02 c0       	mov    eax,ds:0xc0027ca0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 a0 7c 02 c0       	mov    ds:0xc0027ca0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d e4 7f 02 c0    	mov    DWORD PTR ds:0xc0027fe4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d e8 7f 02 c0    	mov    DWORD PTR ds:0xc0027fe8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ec 7f 02 c0    	mov    DWORD PTR ds:0xc0027fec,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 f4 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ff4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd68a0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 e6 9c 01 00       	jmp    c001b80c <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd68a0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 18 9d 01 00       	jmp    c001b854 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd68a0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 41 9d 01 00       	jmp    c001b89c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 a6 09 02 00       	call   c00227e4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 38 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc740]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 38 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc740]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 38 02 c0       	mov    edx,0xc00238e0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 2c 64 02 c0       	mov    edx,0xc002642c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 38 02 c0       	mov    edx,0xc00238ec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 40 80 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7fc0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 20 80 02 c0    	mov    ax,ds:0xc0028020
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 20 80 02 c0    	mov    ds:0xc0028020,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 a3 f7 01 00       	call   c00227e4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 38 02 c0       	mov    eax,0xc00238f2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 38 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc7c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 38 02 c0       	mov    eax,0xc00238fb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc740]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 6e e1 01 00       	call   c00227e4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 38 02 c0       	mov    edx,0xc00238d0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 37 02 c0       	mov    edx,0xc00237d0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 40 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7fc0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 40 80 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7fc0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 35 cb 01 00       	call   c00227e4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 1b cb 01 00       	call   c00227e4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 38 02 c0       	mov    eax,0xc0023817
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 38 02 c0       	mov    eax,0xc0023810
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 b4 b6 01 00       	call   c00227e4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 40 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fc0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 38 02 c0       	mov    esi,0xc0023800
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 28 b0 01 00       	call   c00227e4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 38 02 c0       	mov    edx,0xc00238e0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 39 02 c0       	mov    edx,0xc0023902
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 39 02 c0       	mov    edx,0xc002390e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 39 02 c0       	mov    edx,0xc0023922
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 3c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023c40
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023c40
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 3a 02 c0       	mov    eax,0xc0023a40
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6c0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00088b3:	ff 05 c4 95 02 c0    	inc    DWORD PTR ds:0xc00295c4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 95 02 c0 00 	cmp    DWORD PTR ds:0xc00295c0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c00088dd:	e8 46 fe 00 00       	call   c0018728 <schedule()>
c00088e2:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 d0 81 02 c0       	mov    eax,ds:0xc00281d0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 3d 02 c0       	push   0xc0023d40
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 a8 80 02 c0       	mov    eax,0xc00280a8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 3d 02 c0       	push   0xc0023d49
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 e4 27 02 c0       	mov    eax,0xc00227e4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 3d 02 c0       	push   0xc0023d53
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 18 25 02 c0       	mov    eax,0xc0022518
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 3d 02 c0       	push   0xc0023d5c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 e4 28 02 c0       	mov    eax,0xc00228e4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 3d 02 c0       	push   0xc0023d66
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 64 26 02 c0       	mov    eax,0xc0022664
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 3d 02 c0       	push   0xc0023d6f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ac 80 02 c0       	mov    eax,0xc00280ac
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 3d 02 c0       	push   0xc0023d7c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ad 80 02 c0       	mov    eax,0xc00280ad
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 7f 59 00 00       	call   c000e3c4 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 3d 02 c0       	push   0xc0023d89
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 3d 02 c0 	mov    DWORD PTR [esp],0xc0023da0
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0008aa2:	68 b9 3d 02 c0       	push   0xc0023db9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 55 f8 00 00       	call   c0018304 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 48 fa 00 00       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 50 8f 01 c0       	push   0xc0018f50
c0008acd:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0008ad3:	e8 34 fa 00 00       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 95 02 c0       	mov    ds:0xc00295a8,eax
c0008ae0:	68 60 3f 02 c0       	push   0xc0023f60
c0008ae5:	c6 05 ad 80 02 c0 01 	mov    BYTE PTR ds:0xc00280ad,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 35 08 01 00       	call   c001932b <Vm::initialise8086()>
c0008af6:	e8 97 45 00 00       	call   c000d092 <Fs::initVFS()>
c0008afb:	c7 04 24 c6 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dc6
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 60 3f 02 c0       	push   0xc0023f60
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 42 e0 00 00       	call   c0016b72 <Sys::loadSyscalls()>
c0008b30:	e8 85 bd 00 00       	call   c00148ba <Krnl::loadSystemEnv()>
c0008b35:	e8 30 c3 00 00       	call   c0014e6a <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 e0 3d 02 c0       	push   0xc0023de0
c0008b44:	68 e9 3d 02 c0       	push   0xc0023de9
c0008b49:	e8 e7 cd 00 00       	call   c0015935 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 26 51 00 00       	call   c000dc7c <User::loadClockSettings(int)>
c0008b56:	c7 04 24 84 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f84
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 11 58 00 00       	call   c000e384 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 f1 3d 02 c0 	mov    DWORD PTR [esp],0xc0023df1
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 9e b8 00 00       	call   c0014422 <Krnl::startCPUs()>
c0008b84:	c7 04 24 0b 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e0b
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 1c 3e 02 c0       	push   0xc0023e1c
c0008b9f:	e8 9e f1 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 c6 f3 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 66 fd 00 00       	call   c0018920 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 38 3e 02 c0       	push   0xc0023e38
c0008bcf:	50                   	push   eax
c0008bd0:	e8 69 58 00 00       	call   c000e43e <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 34 40 02 c0       	mov    edx,0xc0024034
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 c1 80 02 c0 04 	test   BYTE PTR ds:0xc00280c1,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 3d 97 01 00       	call   c00224a6 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 22 a5 00 00       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 fb a4 00 00       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 d9 a4 00 00       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 b7 a4 00 00       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 c0 80 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00280c0,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 c5 a3 00 00       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 a0 a3 00 00       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 a7 95 01 00       	call   c0022460 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 64 95 01 00       	call   c0022440 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 bc a3 00 00       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 41 3e 02 c0       	push   0xc0023e41
c0008f4c:	e8 72 ba 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 47 3e 02 c0       	push   0xc0023e47
c0008f84:	e8 3a ba 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 c3 98 00 00       	jmp    c0012894 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 a4 3f 02 c0       	push   0xc0023fa4
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 c0 80 02 c0 04 	test   BYTE PTR ds:0xc00280c0,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 80 74 02 c0 	sete   BYTE PTR ds:0xc0027480
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 4d 3e 02 c0       	push   0xc0023e4d
c000903d:	e8 b9 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 63 3e 02 c0       	push   0xc0023e63
c000904e:	e8 a8 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 77 3e 02 c0       	push   0xc0023e77
c000905c:	e8 9a 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 8a 3e 02 c0       	push   0xc0023e8a
c000906d:	e8 89 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 a1 3e 02 c0       	push   0xc0023ea1
c000907b:	e8 7b 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 b7 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eb7
c0009087:	e8 6f 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 c9 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec9
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 9e 90 00 00       	call   c001214c <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 e3 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ee3
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 6c 51 00 00       	call   c000e23a <Device::addChild(Device*)>
c00090ce:	c7 04 24 c8 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fc8
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 e8 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe8
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 fd 3e 02 c0 	mov    DWORD PTR [esp],0xc0023efd
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 f1 3d 02 c0 	mov    DWORD PTR [esp],0xc0023df1
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 58 a2 00 00       	call   c001337e <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 05 51 00 00       	call   c000e23a <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 08 40 02 c0       	push   0xc0024008
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 7b 56 00 00       	call   c000e7d6 <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 c8 50 00 00       	call   c000e23a <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 0e 3f 02 c0       	push   0xc0023f0e
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 80 f4 00 00       	call   c0018620 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 29 3f 02 c0       	push   0xc0023f29
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 0c 3b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 3a 3f 02 c0       	push   0xc0023f3a
c000920c:	e8 b2 b7 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 47 3f 02 c0       	push   0xc0023f47
c0009221:	e8 9d b7 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 51 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f51
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 86 b7 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 b2 80 02 c0       	mov    ds:0xc00280b2,eax
c00092f9:	66 89 15 b0 80 02 c0 	mov    WORD PTR ds:0xc00280b0,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0009410:	48                   	dec    eax
c0009411:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 ff 95 01 00       	call   c0022a66 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 f6 95 01 00       	call   c0022a66 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 b8 80 02 c0 ff 07 	mov    WORD PTR ds:0xc00280b8,0x7ff
c0009565:	a3 ba 80 02 c0       	mov    ds:0xc00280ba,eax
c000956a:	0f 01 1d b8 80 02 c0 	lidtd  ds:0xc00280b8
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c000985c:	e8 1d 29 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 99 1a 00 00       	call   c000b318 <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 ce 1a 00 00       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 58 40 02 c0       	push   0xc0024058
c00098e9:	e8 0d 34 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 0c 73 02 c0       	mov    eax,ds:0xc002730c
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 d0 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281d0
c0009918:	8b 3d 0c 73 02 c0    	mov    edi,DWORD PTR ds:0xc002730c
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 4c 27 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 0c 73 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002730c,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 0c 73 02 c0       	mov    eax,ds:0xc002730c
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 84 40 02 c0       	push   0xc0024084
c0009964:	e8 92 33 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 76 40 02 c0       	push   0xc0024076
c0009983:	e8 3b b0 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 7b 40 02 c0       	push   0xc002407b
c0009999:	e8 25 b0 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00099b9:	48                   	dec    eax
c00099ba:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c00099d7:	e8 a2 27 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c00099ed:	e8 36 24 00 00       	call   c000be28 <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 c0 80 02 c0       	mov    ds:0xc00280c0,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 b4 40 02 c0       	push   0xc00240b4
c0009b30:	e8 c6 31 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 20 73 02 c0 	movzx  eax,BYTE PTR ds:0xc0027320
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 20 73 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ce0]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 56 73 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8caa],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 55 73 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8cab]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 20 73 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ce0]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 c0 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c0
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 50 41 02 c0       	push   0xc0024150
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 7e 1f 00 00       	call   c000bb94 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 20 20 00 00       	call   c000bc50 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 d0 81 02 c0    	mov    DWORD PTR ds:0xc00281d0,esi
c0009c39:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d a8 80 02 c0    	mov    DWORD PTR ds:0xc00280a8,ebx
c0009c78:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6b 22 00 00       	call   c000bf00 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 ff 40 02 c0       	push   0xc00240ff
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 3e 41 02 c0       	push   0xc002413e
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 2b 41 02 c0       	push   0xc002412b
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 21 41 02 c0       	push   0xc0024121
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 16 41 02 c0       	push   0xc0024116
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 0b 41 02 c0       	push   0xc002410b
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 ed 40 02 c0       	push   0xc00240ed
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 c0 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c0
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 20 73 02 c0 	movzx  eax,BYTE PTR ds:0xc0027320
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 de 40 02 c0       	push   0xc00240de
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 cb 40 02 c0       	push   0xc00240cb
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 6f 41 02 c0       	push   0xc002416f
c0009eb0:	e8 46 2e 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb dc 80 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7f24],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 5c 6f 02 c0       	push   0xc0026f5c
c0009f03:	e8 f3 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 58 42 02 c0 	mov    DWORD PTR [esp],0xc0024258
c0009f0f:	e8 af aa 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 dc 80 02 c0    	lea    edx,[ebp-0x3ffd7f24]
c0009f51:	8d 84 05 dd 80 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7f23]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d d4 80 02 c0    	add    DWORD PTR ds:0xc00280d4,edi
c0009f69:	68 88 41 02 c0       	push   0xc0024188
c0009f6e:	e8 88 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 3a 6f 02 c0       	push   0xc0026f3a
c0009f86:	e8 70 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 58 42 02 c0 	mov    DWORD PTR [esp],0xc0024258
c0009f92:	e8 2c aa 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 9f 41 02 c0       	push   0xc002419f
c0009fb7:	e8 3f 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 d4 80 02 c0    	sub    DWORD PTR ds:0xc00280d4,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 dc 80 02 c0       	add    eax,0xc00280dc
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 64 74 02 c0    	add    eax,DWORD PTR ds:0xc0027464
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 64 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027464
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 b5 41 02 c0       	push   0xc00241b5
c000a051:	e8 a5 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d d4 80 02 c0    	dec    DWORD PTR ds:0xc00280d4
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 df 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241df
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 20 a9 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 c8 41 02 c0       	push   0xc00241c8
c000a0ac:	e8 4a 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 c8 80 02 c0    	mov    esi,DWORD PTR ds:0xc00280c8
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d c8 80 02 c0    	mov    DWORD PTR ds:0xc00280c8,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 c8 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280c8,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 ec 80 02 c0 01 	xor    BYTE PTR ds:0xc00280ec,0x1
c000a10d:	68 80 42 02 c0       	push   0xc0024280
c000a112:	e8 e4 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 5f 28 00 00       	call   c000c98a <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 a4 42 02 c0       	push   0xc00242a4
c000a13a:	e8 84 a8 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d c8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280c8
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 d4 80 02 c0       	mov    eax,ds:0xc00280d4
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 c8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c8
c000a169:	a3 d4 80 02 c0       	mov    ds:0xc00280d4,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 d8 80 02 c0    	push   DWORD PTR ds:0xc00280d8
c000a178:	50                   	push   eax
c000a179:	68 f5 41 02 c0       	push   0xc00241f5
c000a17e:	e8 78 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a183:	a1 c8 80 02 c0       	mov    eax,ds:0xc00280c8
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d cc 80 02 c0    	cmp    DWORD PTR ds:0xc00280cc,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d cc 80 02 c0    	mov    DWORD PTR ds:0xc00280cc,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 dc 80 02 c0       	push   0xc00280dc
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 13 42 02 c0       	push   0xc0024213
c000a276:	e8 80 2a 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 d4 42 02 c0       	push   0xc00242d4
c000a30a:	e8 ec 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 f8 42 02 c0       	push   0xc00242f8
c000a396:	e8 60 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 d8 80 02 c0    	add    eax,DWORD PTR ds:0xc00280d8
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 d8 80 02 c0       	mov    ds:0xc00280d8,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 39 42 02 c0       	push   0xc0024239
c000a3cc:	e8 2a 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 2b 42 02 c0       	push   0xc002422b
c000a43b:	e8 83 a5 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 d8 80 02 c0 03 	add    DWORD PTR ds:0xc00280d8,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 d8 80 02 c0       	mov    eax,ds:0xc00280d8
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 d8 80 02 c0       	mov    ds:0xc00280d8,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 d8 80 02 c0       	mov    eax,ds:0xc00280d8
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 d8 80 02 c0       	mov    ds:0xc00280d8,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 d8 80 02 c0       	mov    eax,ds:0xc00280d8
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 d8 80 02 c0       	mov    ds:0xc00280d8,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 64 43 02 c0       	mov    edx,0xc0024364
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 41 12 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 be 26 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c000a592:	e8 91 e1 00 00       	call   c0018728 <schedule()>
c000a597:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000a59c:	48                   	dec    eax
c000a59d:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 b5 82 01 00       	call   c00228e4 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 21 43 02 c0       	push   0xc0024321
c000a644:	e8 7a a3 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 3d 43 02 c0       	push   0xc002433d
c000a705:	e8 b9 a2 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 60 0e 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 64 43 02 c0       	mov    edx,0xc0024364
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba ec 43 02 c0       	mov    edx,0xc00243ec
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 cd 0f 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 b4 01 00 00       	push   0x1b4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 47 24 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 99 58 00 00       	call   c0010087 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 20 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028120
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 20 81 02 c0       	mov    ds:0xc0028120,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 00 81 02 c0       	push   0xc0028100
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 24 81 02 c0    	cmp    DWORD PTR ds:0xc0028124,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d a0 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8b60]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d a0 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8b60]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 58 73 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8ca8]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 30 73 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8cd0]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d 24 81 02 c0    	cmp    DWORD PTR ds:0xc0028124,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d 24 81 02 c0    	cmp    DWORD PTR ds:0xc0028124,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 78 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024378
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 9d 9e 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c000ab26:	a1 24 81 02 c0       	mov    eax,ds:0xc0028124
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d 24 81 02 c0    	mov    DWORD PTR ds:0xc0028124,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 20 81 02 c0       	mov    eax,ds:0xc0028120
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 20 81 02 c0       	mov    ds:0xc0028120,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 d8 81 02 c0       	mov    eax,ds:0xc00281d8
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 a0 2f 00 00       	jmp    c000dc0e <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d 24 81 02 c0    	cmp    DWORD PTR ds:0xc0028124,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be 86 43 02 c0       	mov    esi,0xc0024386
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 44 05 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba ec 43 02 c0       	mov    edx,0xc00243ec
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb 00 81 02 c0       	mov    ebx,0xc0028100
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 df 08 00 00       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 59 0f 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	6a 30                	push   0x30
c000b18b:	6a 00                	push   0x0
c000b18d:	50                   	push   eax
c000b18e:	e8 f1 54 ff ff       	call   c0000684 <memset>
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	05 32 01 00 00       	add    eax,0x132
c000b19f:	83 ec 04             	sub    esp,0x4
c000b1a2:	68 80 00 00 00       	push   0x80
c000b1a7:	6a 00                	push   0x0
c000b1a9:	50                   	push   eax
c000b1aa:	e8 d5 54 ff ff       	call   c0000684 <memset>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	90                   	nop
c000b1b3:	5b                   	pop    ebx
c000b1b4:	5e                   	pop    esi
c000b1b5:	5f                   	pop    edi
c000b1b6:	c3                   	ret    
c000b1b7:	90                   	nop

c000b1b8 <VgaText::receiveKey(unsigned char)>:
c000b1b8:	55                   	push   ebp
c000b1b9:	57                   	push   edi
c000b1ba:	56                   	push   esi
c000b1bb:	53                   	push   ebx
c000b1bc:	83 ec 1c             	sub    esp,0x1c
c000b1bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c7:	84 db                	test   bl,bl
c000b1c9:	0f 84 c6 00 00 00    	je     c000b295 <VgaText::receiveKey(unsigned char)+0xdd>
c000b1cf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d5:	80 fb 08             	cmp    bl,0x8
c000b1d8:	75 2c                	jne    c000b206 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	57                   	push   edi
c000b1de:	e8 bd 54 ff ff       	call   c00006a0 <strlen>
c000b1e3:	83 c4 10             	add    esp,0x10
c000b1e6:	85 c0                	test   eax,eax
c000b1e8:	74 41                	je     c000b22b <VgaText::receiveKey(unsigned char)+0x73>
c000b1ea:	50                   	push   eax
c000b1eb:	50                   	push   eax
c000b1ec:	6a 08                	push   0x8
c000b1ee:	56                   	push   esi
c000b1ef:	e8 f0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f7:	e8 a4 54 ff ff       	call   c00006a0 <strlen>
c000b1fc:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b204:	eb 22                	jmp    c000b228 <VgaText::receiveKey(unsigned char)+0x70>
c000b206:	0f be c3             	movsx  eax,bl
c000b209:	52                   	push   edx
c000b20a:	52                   	push   edx
c000b20b:	50                   	push   eax
c000b20c:	56                   	push   esi
c000b20d:	e8 d2 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b212:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b216:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21b:	59                   	pop    ecx
c000b21c:	5d                   	pop    ebp
c000b21d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b221:	50                   	push   eax
c000b222:	57                   	push   edi
c000b223:	e8 58 56 ff ff       	call   c0000880 <strcat>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b232:	75 05                	jne    c000b239 <VgaText::receiveKey(unsigned char)+0x81>
c000b234:	80 fb 0a             	cmp    bl,0xa
c000b237:	75 50                	jne    c000b289 <VgaText::receiveKey(unsigned char)+0xd1>
c000b239:	83 ec 0c             	sub    esp,0xc
c000b23c:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b242:	53                   	push   ebx
c000b243:	e8 58 54 ff ff       	call   c00006a0 <strlen>
c000b248:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24b:	89 c5                	mov    ebp,eax
c000b24d:	e8 4e 54 ff ff       	call   c00006a0 <strlen>
c000b252:	83 c4 10             	add    esp,0x10
c000b255:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b259:	3d 80 00 00 00       	cmp    eax,0x80
c000b25e:	76 10                	jbe    c000b270 <VgaText::receiveKey(unsigned char)+0xb8>
c000b260:	83 ec 0c             	sub    esp,0xc
c000b263:	68 97 43 02 c0       	push   0xc0024397
c000b268:	e8 56 97 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	50                   	push   eax
c000b271:	50                   	push   eax
c000b272:	57                   	push   edi
c000b273:	53                   	push   ebx
c000b274:	e8 07 56 ff ff       	call   c0000880 <strcat>
c000b279:	83 c4 0c             	add    esp,0xc
c000b27c:	6a 30                	push   0x30
c000b27e:	6a 00                	push   0x0
c000b280:	57                   	push   edi
c000b281:	e8 fe 53 ff ff       	call   c0000684 <memset>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	83 ec 0c             	sub    esp,0xc
c000b28c:	56                   	push   esi
c000b28d:	e8 72 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	83 c4 1c             	add    esp,0x1c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <VgaText::write(unsigned long long, void*, int*)>:
c000b29e:	55                   	push   ebp
c000b29f:	57                   	push   edi
c000b2a0:	56                   	push   esi
c000b2a1:	53                   	push   ebx
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2a9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2b8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bb:	39 eb                	cmp    ebx,ebp
c000b2bd:	74 13                	je     c000b2d2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2bf:	43                   	inc    ebx
c000b2c0:	50                   	push   eax
c000b2c1:	50                   	push   eax
c000b2c2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2c6:	50                   	push   eax
c000b2c7:	56                   	push   esi
c000b2c8:	e8 17 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	eb e9                	jmp    c000b2bb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d2:	83 ec 0c             	sub    esp,0xc
c000b2d5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2dc:	56                   	push   esi
c000b2dd:	e8 22 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2e6:	89 38                	mov    DWORD PTR [eax],edi
c000b2e8:	83 c4 1c             	add    esp,0x1c
c000b2eb:	31 c0                	xor    eax,eax
c000b2ed:	5b                   	pop    ebx
c000b2ee:	5e                   	pop    esi
c000b2ef:	5f                   	pop    edi
c000b2f0:	5d                   	pop    ebp
c000b2f1:	c3                   	ret    

c000b2f2 <newTerminal(char*)>:
c000b2f2:	83 ec 28             	sub    esp,0x28
c000b2f5:	68 b4 01 00 00       	push   0x1b4
c000b2fa:	e8 10 e7 ff ff       	call   c0009a0f <malloc>
c000b2ff:	5a                   	pop    edx
c000b300:	59                   	pop    ecx
c000b301:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b305:	50                   	push   eax
c000b306:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30a:	e8 2d fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b313:	83 c4 2c             	add    esp,0x2c
c000b316:	c3                   	ret    
c000b317:	90                   	nop

c000b318 <TSS::TSS()>:
c000b318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b31c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b323:	90                   	nop
c000b324:	c3                   	ret    
c000b325:	90                   	nop
c000b326:	66 90                	xchg   ax,ax

c000b328 <TSS::setESP(unsigned long)>:
c000b328:	55                   	push   ebp
c000b329:	89 e5                	mov    ebp,esp
c000b32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b337:	90                   	nop
c000b338:	5d                   	pop    ebp
c000b339:	c3                   	ret    
c000b33a:	66 90                	xchg   ax,ax

c000b33c <TSS::flush()>:
c000b33c:	55                   	push   ebp
c000b33d:	89 e5                	mov    ebp,esp
c000b33f:	83 ec 10             	sub    esp,0x10
c000b342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b345:	8b 00                	mov    eax,DWORD PTR [eax]
c000b347:	83 c8 03             	or     eax,0x3
c000b34a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b34e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b352:	66 89 d0             	mov    ax,dx
c000b355:	0f 00 d8             	ltr    ax
c000b358:	90                   	nop
c000b359:	c9                   	leave  
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <TSS::setup(unsigned long, unsigned long)>:
c000b35c:	55                   	push   ebp
c000b35d:	89 e5                	mov    ebp,esp
c000b35f:	83 ec 18             	sub    esp,0x18
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	6a 68                	push   0x68
c000b367:	e8 a3 e6 ff ff       	call   c0009a0f <malloc>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	89 c2                	mov    edx,eax
c000b371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37d:	83 ec 04             	sub    esp,0x4
c000b380:	6a 68                	push   0x68
c000b382:	6a 00                	push   0x0
c000b384:	50                   	push   eax
c000b385:	e8 fa 52 ff ff       	call   c0000684 <memset>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b393:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b39c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3db:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3e7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b402:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b40e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b417:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b421:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b424:	0f 20 da             	mov    edx,cr3
c000b427:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b42d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b436:	83 ec 08             	sub    esp,0x8
c000b439:	50                   	push   eax
c000b43a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b43d:	50                   	push   eax
c000b43e:	e8 27 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	6a 68                	push   0x68
c000b44b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b44e:	50                   	push   eax
c000b44f:	e8 32 de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b454:	83 c4 10             	add    esp,0x10
c000b457:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b45e:	83 e0 0f             	and    eax,0xf
c000b461:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b464:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b467:	83 c8 40             	or     eax,0x40
c000b46a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b46d:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000b472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b478:	05 78 01 00 00       	add    eax,0x178
c000b47d:	83 ec 04             	sub    esp,0x4
c000b480:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b483:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b486:	50                   	push   eax
c000b487:	e8 2e de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	89 c2                	mov    edx,eax
c000b491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b494:	89 10                	mov    DWORD PTR [eax],edx
c000b496:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000b49b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a1:	05 78 01 00 00       	add    eax,0x178
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	50                   	push   eax
c000b4aa:	e8 35 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4b7:	c9                   	leave  
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ca:	75 08                	jne    c000b4d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4cc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d2:	eb 38                	jmp    c000b50c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4d9:	75 17                	jne    c000b4f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4ef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f2:	89 c1                	mov    ecx,eax
c000b4f4:	83 e1 fd             	and    ecx,0xfffffffd
c000b4f7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4fd:	74 cd                	je     c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4ff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b504:	83 e0 ef             	and    eax,0xffffffef
c000b507:	83 f8 08             	cmp    eax,0x8
c000b50a:	76 c0                	jbe    c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	c3                   	ret    
c000b50f:	90                   	nop

c000b510 <ReservedFilename::isAtty()>:
c000b510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b514:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b517:	31 c0                	xor    eax,eax
c000b519:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b51f:	74 09                	je     c000b52a <ReservedFilename::isAtty()+0x1a>
c000b521:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b527:	0f 94 c0             	sete   al
c000b52a:	c3                   	ret    
c000b52b:	90                   	nop

c000b52c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b537:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b540:	75 08                	jne    c000b54a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b542:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b548:	eb 3d                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b54f:	75 17                	jne    c000b568 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b556:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b559:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b55f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b561:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b565:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b568:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b56d:	75 04                	jne    c000b573 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b56f:	89 0a                	mov    DWORD PTR [edx],ecx
c000b571:	eb 14                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b573:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b578:	74 c8                	je     c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b57f:	83 e0 ef             	and    eax,0xffffffef
c000b582:	83 f8 08             	cmp    eax,0x8
c000b585:	76 bb                	jbe    c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b587:	31 c0                	xor    eax,eax
c000b589:	c3                   	ret    

c000b58a <UnixFile::getFileDescriptor()>:
c000b58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b591:	c3                   	ret    

c000b592 <UnixFile::UnixFile(int)>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 28             	sub    esp,0x28
c000b596:	ba b4 44 02 c0       	mov    edx,0xc00244b4
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	89 10                	mov    DWORD PTR [eax],edx
c000b5a1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5a9:	0f 8f 8c 01 00 00    	jg     c000b73b <UnixFile::UnixFile(int)+0x1a9>
c000b5af:	a1 e0 74 02 c0       	mov    eax,ds:0xc00274e0
c000b5b4:	8d 50 01             	lea    edx,[eax+0x1]
c000b5b7:	89 15 e0 74 02 c0    	mov    DWORD PTR ds:0xc00274e0,edx
c000b5bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c4:	83 ec 08             	sub    esp,0x8
c000b5c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cb:	68 b8 81 02 c0       	push   0xc00281b8
c000b5d0:	e8 f7 74 01 00       	call   c0022acc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	a0 b4 81 02 c0       	mov    al,ds:0xc00281b4
c000b5dd:	83 f0 01             	xor    eax,0x1
c000b5e0:	84 c0                	test   al,al
c000b5e2:	0f 84 54 01 00 00    	je     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b5e8:	c6 05 b4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281b4,0x1
c000b5ef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5f7:	83 ec 0c             	sub    esp,0xc
c000b5fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5fe:	e8 0c e4 ff ff       	call   c0009a0f <malloc>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 c3                	mov    ebx,eax
c000b608:	83 ec 08             	sub    esp,0x8
c000b60b:	68 03 ff ff 0f       	push   0xfffff03
c000b610:	53                   	push   ebx
c000b611:	e8 2c 01 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 1d ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,ebx
c000b61f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62e:	e8 dc e3 ff ff       	call   c0009a0f <malloc>
c000b633:	83 c4 10             	add    esp,0x10
c000b636:	89 c3                	mov    ebx,eax
c000b638:	83 ec 08             	sub    esp,0x8
c000b63b:	68 01 ff ff 0f       	push   0xfffff01
c000b640:	53                   	push   ebx
c000b641:	e8 fc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	89 1d b0 81 02 c0    	mov    DWORD PTR ds:0xc00281b0,ebx
c000b64f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b657:	83 ec 0c             	sub    esp,0xc
c000b65a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b65e:	e8 ac e3 ff ff       	call   c0009a0f <malloc>
c000b663:	83 c4 10             	add    esp,0x10
c000b666:	89 c3                	mov    ebx,eax
c000b668:	83 ec 08             	sub    esp,0x8
c000b66b:	68 00 ff ff 0f       	push   0xfffff00
c000b670:	53                   	push   ebx
c000b671:	e8 cc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	89 1d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,ebx
c000b67f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b68e:	e8 7c e3 ff ff       	call   c0009a0f <malloc>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	89 c3                	mov    ebx,eax
c000b698:	83 ec 08             	sub    esp,0x8
c000b69b:	68 02 ff ff 0f       	push   0xfffff02
c000b6a0:	53                   	push   ebx
c000b6a1:	e8 9c 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6a6:	83 c4 10             	add    esp,0x10
c000b6a9:	89 1d a8 81 02 c0    	mov    DWORD PTR ds:0xc00281a8,ebx
c000b6af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6bc:	7f 7e                	jg     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b6be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6cd:	e8 3d e3 ff ff       	call   c0009a0f <malloc>
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	89 c3                	mov    ebx,eax
c000b6d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6db:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e0:	83 ec 08             	sub    esp,0x8
c000b6e3:	50                   	push   eax
c000b6e4:	53                   	push   ebx
c000b6e5:	e8 58 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f1:	89 1c 85 80 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7e80],ebx
c000b6f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 03 e3 ff ff       	call   c0009a0f <malloc>
c000b70c:	83 c4 10             	add    esp,0x10
c000b70f:	89 c3                	mov    ebx,eax
c000b711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b715:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71a:	83 ec 08             	sub    esp,0x8
c000b71d:	50                   	push   eax
c000b71e:	53                   	push   ebx
c000b71f:	e8 1e 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b724:	83 c4 10             	add    esp,0x10
c000b727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72b:	89 1c 85 40 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ec0],ebx
c000b732:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b736:	e9 7c ff ff ff       	jmp    c000b6b7 <UnixFile::UnixFile(int)+0x125>
c000b73b:	90                   	nop
c000b73c:	83 c4 28             	add    esp,0x28
c000b73f:	5b                   	pop    ebx
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <ReservedFilename::ReservedFilename(int)>:
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b749:	83 ec 08             	sub    esp,0x8
c000b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b750:	50                   	push   eax
c000b751:	e8 3c fe ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	ba d0 44 02 c0       	mov    edx,0xc00244d0
c000b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b762:	89 10                	mov    DWORD PTR [eax],edx
c000b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b76c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b76f:	90                   	nop
c000b770:	83 c4 0c             	add    esp,0xc
c000b773:	c3                   	ret    

c000b774 <UnixFile::~UnixFile()>:
c000b774:	83 ec 1c             	sub    esp,0x1c
c000b777:	ba b4 44 02 c0       	mov    edx,0xc00244b4
c000b77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b780:	89 10                	mov    DWORD PTR [eax],edx
c000b782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b789:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b78e:	7f 73                	jg     c000b803 <UnixFile::~UnixFile()+0x8f>
c000b790:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	68 b8 81 02 c0       	push   0xc00281b8
c000b7a0:	e8 fb 73 01 00       	call   c0022ba0 <LinkedList<UnixFile>::getFirstElement()>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ac:	83 ec 0c             	sub    esp,0xc
c000b7af:	68 b8 81 02 c0       	push   0xc00281b8
c000b7b4:	e8 ef 73 01 00       	call   c0022ba8 <LinkedList<UnixFile>::removeFirst()>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c4:	74 40                	je     c000b806 <UnixFile::~UnixFile()+0x92>
c000b7c6:	83 ec 08             	sub    esp,0x8
c000b7c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7cd:	68 b8 81 02 c0       	push   0xc00281b8
c000b7d2:	e8 f5 72 01 00       	call   c0022acc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7de:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ea:	0f 94 c0             	sete   al
c000b7ed:	84 c0                	test   al,al
c000b7ef:	74 a7                	je     c000b798 <UnixFile::~UnixFile()+0x24>
c000b7f1:	83 ec 0c             	sub    esp,0xc
c000b7f4:	68 8c 44 02 c0       	push   0xc002448c
c000b7f9:	e8 c5 91 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000b7fe:	83 c4 10             	add    esp,0x10
c000b801:	eb 95                	jmp    c000b798 <UnixFile::~UnixFile()+0x24>
c000b803:	90                   	nop
c000b804:	eb 01                	jmp    c000b807 <UnixFile::~UnixFile()+0x93>
c000b806:	90                   	nop
c000b807:	90                   	nop
c000b808:	83 c4 1c             	add    esp,0x1c
c000b80b:	c3                   	ret    

c000b80c <UnixFile::~UnixFile()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	83 ec 0c             	sub    esp,0xc
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	e8 59 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	83 ec 08             	sub    esp,0x8
c000b821:	6a 0c                	push   0xc
c000b823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b827:	e8 ee 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b82c:	83 c4 10             	add    esp,0x10
c000b82f:	83 c4 0c             	add    esp,0xc
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <ReservedFilename::~ReservedFilename()>:
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	ba d0 44 02 c0       	mov    edx,0xc00244d0
c000b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b840:	89 10                	mov    DWORD PTR [eax],edx
c000b842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b846:	83 ec 0c             	sub    esp,0xc
c000b849:	50                   	push   eax
c000b84a:	e8 25 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b84f:	83 c4 10             	add    esp,0x10
c000b852:	90                   	nop
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <ReservedFilename::~ReservedFilename()>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	83 ec 0c             	sub    esp,0xc
c000b85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b862:	e8 cd ff ff ff       	call   c000b834 <ReservedFilename::~ReservedFilename()>
c000b867:	83 c4 10             	add    esp,0x10
c000b86a:	83 ec 08             	sub    esp,0x8
c000b86d:	6a 0c                	push   0xc
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	e8 a2 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	83 c4 0c             	add    esp,0xc
c000b87e:	c3                   	ret    

c000b87f <getFromFileDescriptor(int)>:
c000b87f:	53                   	push   ebx
c000b880:	83 ec 08             	sub    esp,0x8
c000b883:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b887:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b88d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b893:	7f 2c                	jg     c000b8c1 <getFromFileDescriptor(int)+0x42>
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 b8 81 02 c0       	push   0xc00281b8
c000b89d:	e8 fe 72 01 00       	call   c0022ba0 <LinkedList<UnixFile>::getFirstElement()>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	85 c0                	test   eax,eax
c000b8a7:	75 04                	jne    c000b8ad <getFromFileDescriptor(int)+0x2e>
c000b8a9:	31 c0                	xor    eax,eax
c000b8ab:	eb 6e                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b0:	74 69                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8b2:	52                   	push   edx
c000b8b3:	52                   	push   edx
c000b8b4:	50                   	push   eax
c000b8b5:	68 b8 81 02 c0       	push   0xc00281b8
c000b8ba:	e8 8b 73 01 00       	call   c0022c4a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8bf:	eb e1                	jmp    c000b8a2 <getFromFileDescriptor(int)+0x23>
c000b8c1:	a1 ac 81 02 c0       	mov    eax,ds:0xc00281ac
c000b8c6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8cc:	74 4d                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ce:	a1 b0 81 02 c0       	mov    eax,ds:0xc00281b0
c000b8d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8d9:	74 40                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8db:	a1 a8 81 02 c0       	mov    eax,ds:0xc00281a8
c000b8e0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8e6:	74 33                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8e8:	a1 a4 81 02 c0       	mov    eax,ds:0xc00281a4
c000b8ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f3:	74 26                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8f5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8fb:	83 f8 08             	cmp    eax,0x8
c000b8fe:	77 09                	ja     c000b909 <getFromFileDescriptor(int)+0x8a>
c000b900:	8b 04 85 80 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7e80]
c000b907:	eb 12                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b909:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b90f:	83 fb 08             	cmp    ebx,0x8
c000b912:	77 95                	ja     c000b8a9 <getFromFileDescriptor(int)+0x2a>
c000b914:	8b 04 9d 40 81 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7ec0]
c000b91b:	83 c4 08             	add    esp,0x8
c000b91e:	5b                   	pop    ebx
c000b91f:	c3                   	ret    

c000b920 <__static_initialization_and_destruction_0(int, int)>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b928:	75 34                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b932:	75 2a                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	68 b8 81 02 c0       	push   0xc00281b8
c000b93c:	e8 49 71 01 00       	call   c0022a8a <LinkedList<UnixFile>::LinkedList()>
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	83 ec 04             	sub    esp,0x4
c000b947:	68 08 73 02 c0       	push   0xc0027308
c000b94c:	68 b8 81 02 c0       	push   0xc00281b8
c000b951:	68 88 2a 02 c0       	push   0xc0022a88
c000b956:	e8 39 12 00 00       	call   c000cb94 <__cxa_atexit>
c000b95b:	83 c4 10             	add    esp,0x10
c000b95e:	90                   	nop
c000b95f:	83 c4 0c             	add    esp,0xc
c000b962:	c3                   	ret    

c000b963 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b963:	83 ec 0c             	sub    esp,0xc
c000b966:	83 ec 08             	sub    esp,0x8
c000b969:	68 ff ff 00 00       	push   0xffff
c000b96e:	6a 01                	push   0x1
c000b970:	e8 ab ff ff ff       	call   c000b920 <__static_initialization_and_destruction_0(int, int)>
c000b975:	83 c4 10             	add    esp,0x10
c000b978:	83 c4 0c             	add    esp,0xc
c000b97b:	c3                   	ret    

c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b97c:	53                   	push   ebx
c000b97d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b981:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b985:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98b:	89 c8                	mov    eax,ecx
c000b98d:	d1 e8                	shr    eax,1
c000b98f:	03 05 e8 74 02 c0    	add    eax,DWORD PTR ds:0xc00274e8
c000b995:	83 e1 01             	and    ecx,0x1
c000b998:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99a:	75 09                	jne    c000b9a5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b99c:	83 e2 f0             	and    edx,0xfffffff0
c000b99f:	09 da                	or     edx,ebx
c000b9a1:	88 10                	mov    BYTE PTR [eax],dl
c000b9a3:	5b                   	pop    ebx
c000b9a4:	c3                   	ret    
c000b9a5:	c1 e3 04             	shl    ebx,0x4
c000b9a8:	83 e2 0f             	and    edx,0xf
c000b9ab:	09 da                	or     edx,ebx
c000b9ad:	88 10                	mov    BYTE PTR [eax],dl
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    

c000b9b1 <Virt::getPageState(unsigned long)>:
c000b9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b5:	8b 0d e8 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274e8
c000b9bb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c1:	89 d0                	mov    eax,edx
c000b9c3:	d1 e8                	shr    eax,1
c000b9c5:	83 e2 01             	and    edx,0x1
c000b9c8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cb:	75 04                	jne    c000b9d1 <Virt::getPageState(unsigned long)+0x20>
c000b9cd:	83 e0 0f             	and    eax,0xf
c000b9d0:	c3                   	ret    
c000b9d1:	c0 e8 04             	shr    al,0x4
c000b9d4:	c3                   	ret    

c000b9d5 <Virt::allocateKernelVirtualPages(int)>:
c000b9d5:	55                   	push   ebp
c000b9d6:	31 ed                	xor    ebp,ebp
c000b9d8:	57                   	push   edi
c000b9d9:	56                   	push   esi
c000b9da:	53                   	push   ebx
c000b9db:	31 db                	xor    ebx,ebx
c000b9dd:	83 ec 1c             	sub    esp,0x1c
c000b9e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e4:	8b 3d e4 74 02 c0    	mov    edi,DWORD PTR ds:0xc00274e4
c000b9ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9ef:	57                   	push   edi
c000b9f0:	e8 bc ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000b9f5:	5a                   	pop    edx
c000b9f6:	84 c0                	test   al,al
c000b9f8:	75 3a                	jne    c000ba34 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fa:	85 db                	test   ebx,ebx
c000b9fc:	75 02                	jne    c000ba00 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9fe:	89 fd                	mov    ebp,edi
c000ba00:	43                   	inc    ebx
c000ba01:	39 f3                	cmp    ebx,esi
c000ba03:	74 5a                	je     c000ba5f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba05:	47                   	inc    edi
c000ba06:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba0c:	76 31                	jbe    c000ba3f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba0e:	c7 05 e4 74 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00274e4,0xc8000
c000ba18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba1d:	75 28                	jne    c000ba47 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba24:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba29:	57                   	push   edi
c000ba2a:	e8 82 ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000ba2f:	5a                   	pop    edx
c000ba30:	84 c0                	test   al,al
c000ba32:	74 c6                	je     c000b9fa <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba34:	31 db                	xor    ebx,ebx
c000ba36:	47                   	inc    edi
c000ba37:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba3d:	77 cf                	ja     c000ba0e <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba3f:	89 3d e4 74 02 c0    	mov    DWORD PTR ds:0xc00274e4,edi
c000ba45:	eb a8                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba47:	83 ec 0c             	sub    esp,0xc
c000ba4a:	68 e4 44 02 c0       	push   0xc00244e4
c000ba4f:	e8 6f 8f 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000ba54:	8b 3d e4 74 02 c0    	mov    edi,DWORD PTR ds:0xc00274e4
c000ba5a:	83 c4 10             	add    esp,0x10
c000ba5d:	eb 90                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba5f:	89 2d e4 74 02 c0    	mov    DWORD PTR ds:0xc00274e4,ebp
c000ba65:	4b                   	dec    ebx
c000ba66:	74 5f                	je     c000bac7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba68:	85 f6                	test   esi,esi
c000ba6a:	74 3d                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba6c:	89 e8                	mov    eax,ebp
c000ba6e:	31 db                	xor    ebx,ebx
c000ba70:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba73:	eb 14                	jmp    c000ba89 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba75:	6a 01                	push   0x1
c000ba77:	43                   	inc    ebx
c000ba78:	50                   	push   eax
c000ba79:	e8 fe fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7e:	58                   	pop    eax
c000ba7f:	39 f3                	cmp    ebx,esi
c000ba81:	5a                   	pop    edx
c000ba82:	74 25                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba84:	a1 e4 74 02 c0       	mov    eax,ds:0xc00274e4
c000ba89:	8d 50 01             	lea    edx,[eax+0x1]
c000ba8c:	85 db                	test   ebx,ebx
c000ba8e:	89 15 e4 74 02 c0    	mov    DWORD PTR ds:0xc00274e4,edx
c000ba94:	74 20                	je     c000bab6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba96:	39 df                	cmp    edi,ebx
c000ba98:	75 db                	jne    c000ba75 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9a:	6a 03                	push   0x3
c000ba9c:	43                   	inc    ebx
c000ba9d:	50                   	push   eax
c000ba9e:	e8 d9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa3:	59                   	pop    ecx
c000baa4:	39 f3                	cmp    ebx,esi
c000baa6:	58                   	pop    eax
c000baa7:	75 db                	jne    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baa9:	83 c4 1c             	add    esp,0x1c
c000baac:	89 e8                	mov    eax,ebp
c000baae:	5b                   	pop    ebx
c000baaf:	c1 e0 0c             	shl    eax,0xc
c000bab2:	5e                   	pop    esi
c000bab3:	5f                   	pop    edi
c000bab4:	5d                   	pop    ebp
c000bab5:	c3                   	ret    
c000bab6:	6a 02                	push   0x2
c000bab8:	bb 01 00 00 00       	mov    ebx,0x1
c000babd:	50                   	push   eax
c000babe:	e8 b9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac3:	58                   	pop    eax
c000bac4:	5a                   	pop    edx
c000bac5:	eb bd                	jmp    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bac7:	6a 04                	push   0x4
c000bac9:	8d 45 01             	lea    eax,[ebp+0x1]
c000bacc:	55                   	push   ebp
c000bacd:	a3 e4 74 02 c0       	mov    ds:0xc00274e4,eax
c000bad2:	e8 a5 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bad7:	59                   	pop    ecx
c000bad8:	89 e8                	mov    eax,ebp
c000bada:	5b                   	pop    ebx
c000badb:	c1 e0 0c             	shl    eax,0xc
c000bade:	83 c4 1c             	add    esp,0x1c
c000bae1:	5b                   	pop    ebx
c000bae2:	5e                   	pop    esi
c000bae3:	5f                   	pop    edi
c000bae4:	5d                   	pop    ebp
c000bae5:	c3                   	ret    

c000bae6 <Virt::freeSwapfilePage(unsigned long)>:
c000bae6:	53                   	push   ebx
c000bae7:	8b 15 cc 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281cc
c000baed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf1:	b8 01 00 00 00       	mov    eax,0x1
c000baf6:	89 cb                	mov    ebx,ecx
c000baf8:	d3 e0                	shl    eax,cl
c000bafa:	c1 eb 05             	shr    ebx,0x5
c000bafd:	f7 d0                	not    eax
c000baff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb02:	5b                   	pop    ebx
c000bb03:	c3                   	ret    

c000bb04 <Virt::swapIDToSector(unsigned long)>:
c000bb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb08:	0f af 05 ec 74 02 c0 	imul   eax,DWORD PTR ds:0xc00274ec
c000bb0f:	03 05 f4 74 02 c0    	add    eax,DWORD PTR ds:0xc00274f4
c000bb15:	c3                   	ret    

c000bb16 <Virt::allocateSwapfilePage()>:
c000bb16:	55                   	push   ebp
c000bb17:	31 d2                	xor    edx,edx
c000bb19:	57                   	push   edi
c000bb1a:	56                   	push   esi
c000bb1b:	53                   	push   ebx
c000bb1c:	83 ec 0c             	sub    esp,0xc
c000bb1f:	8b 0d ec 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274ec
c000bb25:	a1 f0 74 02 c0       	mov    eax,ds:0xc00274f0
c000bb2a:	f7 f1                	div    ecx
c000bb2c:	39 0d f0 74 02 c0    	cmp    DWORD PTR ds:0xc00274f0,ecx
c000bb32:	72 2d                	jb     c000bb61 <Virt::allocateSwapfilePage()+0x4b>
c000bb34:	8b 35 cc 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281cc
c000bb3a:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb3c:	f6 c2 01             	test   dl,0x1
c000bb3f:	74 3c                	je     c000bb7d <Virt::allocateSwapfilePage()+0x67>
c000bb41:	31 c9                	xor    ecx,ecx
c000bb43:	bf 01 00 00 00       	mov    edi,0x1
c000bb48:	eb 12                	jmp    c000bb5c <Virt::allocateSwapfilePage()+0x46>
c000bb4a:	89 fd                	mov    ebp,edi
c000bb4c:	89 ca                	mov    edx,ecx
c000bb4e:	d3 e5                	shl    ebp,cl
c000bb50:	c1 ea 05             	shr    edx,0x5
c000bb53:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb56:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb58:	85 ea                	test   edx,ebp
c000bb5a:	74 2a                	je     c000bb86 <Virt::allocateSwapfilePage()+0x70>
c000bb5c:	41                   	inc    ecx
c000bb5d:	39 c8                	cmp    eax,ecx
c000bb5f:	77 e9                	ja     c000bb4a <Virt::allocateSwapfilePage()+0x34>
c000bb61:	83 ec 0c             	sub    esp,0xc
c000bb64:	68 9c 46 02 c0       	push   0xc002469c
c000bb69:	e8 55 8e 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	31 c9                	xor    ecx,ecx
c000bb73:	83 c4 0c             	add    esp,0xc
c000bb76:	89 c8                	mov    eax,ecx
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	89 f3                	mov    ebx,esi
c000bb7f:	bd 01 00 00 00       	mov    ebp,0x1
c000bb84:	31 c9                	xor    ecx,ecx
c000bb86:	09 ea                	or     edx,ebp
c000bb88:	89 c8                	mov    eax,ecx
c000bb8a:	89 13                	mov    DWORD PTR [ebx],edx
c000bb8c:	83 c4 0c             	add    esp,0xc
c000bb8f:	5b                   	pop    ebx
c000bb90:	5e                   	pop    esi
c000bb91:	5f                   	pop    edi
c000bb92:	5d                   	pop    ebp
c000bb93:	c3                   	ret    

c000bb94 <Virt::virtualMemorySetup()>:
c000bb94:	53                   	push   ebx
c000bb95:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9a:	6a 0f                	push   0xf
c000bb9c:	53                   	push   ebx
c000bb9d:	43                   	inc    ebx
c000bb9e:	e8 d9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba3:	58                   	pop    eax
c000bba4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbaa:	5a                   	pop    edx
c000bbab:	75 ed                	jne    c000bb9a <Virt::virtualMemorySetup()+0x6>
c000bbad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb2:	6a 00                	push   0x0
c000bbb4:	53                   	push   ebx
c000bbb5:	43                   	inc    ebx
c000bbb6:	e8 c1 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbb:	59                   	pop    ecx
c000bbbc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc2:	58                   	pop    eax
c000bbc3:	75 ed                	jne    c000bbb2 <Virt::virtualMemorySetup()+0x1e>
c000bbc5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbca:	6a 0f                	push   0xf
c000bbcc:	53                   	push   ebx
c000bbcd:	43                   	inc    ebx
c000bbce:	e8 a9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd3:	58                   	pop    eax
c000bbd4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbda:	5a                   	pop    edx
c000bbdb:	75 ed                	jne    c000bbca <Virt::virtualMemorySetup()+0x36>
c000bbdd:	5b                   	pop    ebx
c000bbde:	c3                   	ret    

c000bbdf <Virt::setupPageSwapping(int)>:
c000bbdf:	53                   	push   ebx
c000bbe0:	83 ec 0c             	sub    esp,0xc
c000bbe3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbe7:	a1 68 86 02 c0       	mov    eax,ds:0xc0028668
c000bbec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf4:	53                   	push   ebx
c000bbf5:	c1 e3 0b             	shl    ebx,0xb
c000bbf8:	68 b3 46 02 c0       	push   0xc00246b3
c000bbfd:	50                   	push   eax
c000bbfe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc01:	89 1d f0 74 02 c0    	mov    DWORD PTR ds:0xc00274f0,ebx
c000bc07:	c6 05 f8 74 02 c0 43 	mov    BYTE PTR ds:0xc00274f8,0x43
c000bc0e:	c1 eb 08             	shr    ebx,0x8
c000bc11:	a3 f4 74 02 c0       	mov    ds:0xc00274f4,eax
c000bc16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc19:	c7 05 ec 74 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00274ec,0x8
c000bc23:	e8 e7 dd ff ff       	call   c0009a0f <malloc>
c000bc28:	83 c4 0c             	add    esp,0xc
c000bc2b:	89 c1                	mov    ecx,eax
c000bc2d:	a3 cc 81 02 c0       	mov    ds:0xc00281cc,eax
c000bc32:	31 d2                	xor    edx,edx
c000bc34:	a1 f0 74 02 c0       	mov    eax,ds:0xc00274f0
c000bc39:	f7 35 ec 74 02 c0    	div    DWORD PTR ds:0xc00274ec
c000bc3f:	c1 e8 05             	shr    eax,0x5
c000bc42:	50                   	push   eax
c000bc43:	6a 00                	push   0x0
c000bc45:	51                   	push   ecx
c000bc46:	e8 39 4a ff ff       	call   c0000684 <memset>
c000bc4b:	83 c4 18             	add    esp,0x18
c000bc4e:	5b                   	pop    ebx
c000bc4f:	c3                   	ret    

c000bc50 <VAS::VAS()>:
c000bc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6a:	a3 d0 81 02 c0       	mov    ds:0xc00281d0,eax
c000bc6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc73:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc82:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc89:	90                   	nop
c000bc8a:	c3                   	ret    
c000bc8b:	90                   	nop

c000bc8c <VAS::VAS(VAS*)>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca5:	83 ec 0c             	sub    esp,0xc
c000bca8:	68 04 45 02 c0       	push   0xc0024504
c000bcad:	e8 11 8d 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000bcb2:	83 c4 10             	add    esp,0x10
c000bcb5:	90                   	nop
c000bcb6:	83 c4 0c             	add    esp,0xc
c000bcb9:	c3                   	ret    

c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcbe:	89 c2                	mov    edx,eax
c000bcc0:	c1 e8 0a             	shr    eax,0xa
c000bcc3:	c1 ea 16             	shr    edx,0x16
c000bcc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccb:	19 c9                	sbb    ecx,ecx
c000bccd:	c1 e2 0c             	shl    edx,0xc
c000bcd0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcd6:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce2:	01 d0                	add    eax,edx
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop

c000bce6 <VAS::getPageTableEntry(unsigned long)>:
c000bce6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcea:	89 ca                	mov    edx,ecx
c000bcec:	c1 e9 0a             	shr    ecx,0xa
c000bcef:	c1 ea 16             	shr    edx,0x16
c000bcf2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcf8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcfe:	c1 e0 0c             	shl    eax,0xc
c000bd01:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd04:	c3                   	ret    

c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	be 01 00 00 00       	mov    esi,0x1
c000bd0c:	53                   	push   ebx
c000bd0d:	83 ec 10             	sub    esp,0x10
c000bd10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd14:	c1 eb 0c             	shr    ebx,0xc
c000bd17:	eb 3f                	jmp    c000bd58 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd19:	83 ec 08             	sub    esp,0x8
c000bd1c:	57                   	push   edi
c000bd1d:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c000bd23:	e8 be ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd28:	83 c4 10             	add    esp,0x10
c000bd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd31:	f6 c4 04             	test   ah,0x4
c000bd34:	75 5f                	jne    c000bd95 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd36:	80 fa 04             	cmp    dl,0x4
c000bd39:	74 78                	je     c000bdb3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3b:	80 fa 02             	cmp    dl,0x2
c000bd3e:	0f 84 88 00 00 00    	je     c000bdcc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd44:	80 fa 03             	cmp    dl,0x3
c000bd47:	0f 84 ad 00 00 00    	je     c000bdfa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd4d:	fe ca                	dec    dl
c000bd4f:	0f 84 92 00 00 00    	je     c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd55:	43                   	inc    ebx
c000bd56:	31 f6                	xor    esi,esi
c000bd58:	53                   	push   ebx
c000bd59:	89 df                	mov    edi,ebx
c000bd5b:	e8 51 fc ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000bd60:	c1 e7 0c             	shl    edi,0xc
c000bd63:	59                   	pop    ecx
c000bd64:	84 c0                	test   al,al
c000bd66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6a:	75 ad                	jne    c000bd19 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd6c:	83 ec 0c             	sub    esp,0xc
c000bd6f:	68 ca 46 02 c0       	push   0xc00246ca
c000bd74:	e8 4a 8c 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000bd79:	58                   	pop    eax
c000bd7a:	5a                   	pop    edx
c000bd7b:	57                   	push   edi
c000bd7c:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c000bd82:	e8 5f ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd8c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd90:	f6 c4 04             	test   ah,0x4
c000bd93:	74 c0                	je     c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd95:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd9e:	83 ec 0c             	sub    esp,0xc
c000bda1:	50                   	push   eax
c000bda2:	e8 9c e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdae:	80 fa 04             	cmp    dl,0x4
c000bdb1:	75 88                	jne    c000bd3b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb3:	89 f0                	mov    eax,esi
c000bdb5:	84 c0                	test   al,al
c000bdb7:	75 47                	jne    c000be00 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdb9:	c7 44 24 20 28 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024528
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	5b                   	pop    ebx
c000bdc5:	5e                   	pop    esi
c000bdc6:	5f                   	pop    edi
c000bdc7:	e9 f7 8b 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c000bdcc:	89 f0                	mov    eax,esi
c000bdce:	84 c0                	test   al,al
c000bdd0:	75 15                	jne    c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	68 e6 46 02 c0       	push   0xc00246e6
c000bdda:	e8 e4 8b 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	e9 6e ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bde7:	83 ec 08             	sub    esp,0x8
c000bdea:	6a 00                	push   0x0
c000bdec:	53                   	push   ebx
c000bded:	e8 8a fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	e9 5b ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfa:	89 f0                	mov    eax,esi
c000bdfc:	84 c0                	test   al,al
c000bdfe:	75 15                	jne    c000be15 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be00:	83 ec 08             	sub    esp,0x8
c000be03:	6a 00                	push   0x0
c000be05:	53                   	push   ebx
c000be06:	e8 71 fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	83 c4 10             	add    esp,0x10
c000be11:	5b                   	pop    ebx
c000be12:	5e                   	pop    esi
c000be13:	5f                   	pop    edi
c000be14:	c3                   	ret    
c000be15:	c7 44 24 20 02 47 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024702
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	5b                   	pop    ebx
c000be21:	5e                   	pop    esi
c000be22:	5f                   	pop    edi
c000be23:	e9 9b 8b 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>

c000be28 <VAS::freeAllocatedPages(unsigned long)>:
c000be28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be30:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be34:	74 09                	je     c000be3f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3a:	e9 c6 fe ff ff       	jmp    c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000be3f:	c7 44 24 04 4c 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc002454c
c000be47:	e9 af 0e 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000be4c <VAS::virtualToPhysical(unsigned long)>:
c000be4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	e8 8d fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be59:	5a                   	pop    edx
c000be5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000be5c:	59                   	pop    ecx
c000be5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be62:	c3                   	ret    
c000be63:	90                   	nop

c000be64 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be64:	55                   	push   ebp
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be6c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be74:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be78:	85 db                	test   ebx,ebx
c000be7a:	7e 22                	jle    c000be9e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be7c:	c1 e3 0c             	shl    ebx,0xc
c000be7f:	01 f3                	add    ebx,esi
c000be81:	56                   	push   esi
c000be82:	81 c6 00 10 00 00    	add    esi,0x1000
c000be88:	55                   	push   ebp
c000be89:	e8 58 fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be8e:	5a                   	pop    edx
c000be8f:	59                   	pop    ecx
c000be90:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be92:	21 f9                	and    ecx,edi
c000be94:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be98:	39 f3                	cmp    ebx,esi
c000be9a:	89 08                	mov    DWORD PTR [eax],ecx
c000be9c:	75 e3                	jne    c000be81 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be9e:	5b                   	pop    ebx
c000be9f:	5e                   	pop    esi
c000bea0:	5f                   	pop    edi
c000bea1:	5d                   	pop    ebp
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea4:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000bea9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beaf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beb6:	75 01                	jne    c000beb9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000beb8:	c3                   	ret    
c000beb9:	68 80 00 00 00       	push   0x80
c000bebe:	6a ff                	push   0xffffffff
c000bec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	e8 93 ff ff ff       	call   c000be64 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed1:	83 c4 14             	add    esp,0x14
c000bed4:	c3                   	ret    
c000bed5:	90                   	nop

c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bed6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bedf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bee9:	19 c0                	sbb    eax,eax
c000beeb:	83 ca 03             	or     edx,0x3
c000beee:	83 e0 fc             	and    eax,0xfffffffc
c000bef1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bef8:	0f 20 d8             	mov    eax,cr3
c000befb:	0f 22 d8             	mov    cr3,eax
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <VAS::~VAS()>:
c000bf00:	83 ec 2c             	sub    esp,0x2c
c000bf03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0b:	fa                   	cli    
c000bf0c:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000bf11:	40                   	inc    eax
c000bf12:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000bf17:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf21:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2b:	6a 01                	push   0x1
c000bf2d:	50                   	push   eax
c000bf2e:	e8 a3 ff ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c000bf33:	83 c4 0c             	add    esp,0xc
c000bf36:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf3e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf46:	0f 8f d4 00 00 00    	jg     c000c020 <VAS::~VAS()+0x120>
c000bf4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf57:	c1 e2 02             	shl    edx,0x2
c000bf5a:	01 d0                	add    eax,edx
c000bf5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf66:	83 e0 01             	and    eax,0x1
c000bf69:	0f 84 a8 00 00 00    	je     c000c017 <VAS::~VAS()+0x117>
c000bf6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf77:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf7f:	7f 72                	jg     c000bff3 <VAS::~VAS()+0xf3>
c000bf81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf85:	c1 e0 0a             	shl    eax,0xa
c000bf88:	89 c2                	mov    edx,eax
c000bf8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf8e:	01 d0                	add    eax,edx
c000bf90:	c1 e0 0c             	shl    eax,0xc
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfab:	6a 01                	push   0x1
c000bfad:	50                   	push   eax
c000bfae:	e8 07 fd ff ff       	call   c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc8:	25 01 04 00 00       	and    eax,0x401
c000bfcd:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd2:	75 19                	jne    c000bfed <VAS::~VAS()+0xed>
c000bfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfdd:	83 ec 0c             	sub    esp,0xc
c000bfe0:	50                   	push   eax
c000bfe1:	e8 5d e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfe6:	83 c4 10             	add    esp,0x10
c000bfe9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff1:	eb 84                	jmp    c000bf77 <VAS::~VAS()+0x77>
c000bff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff7:	25 00 04 00 00       	and    eax,0x400
c000bffc:	74 19                	je     c000c017 <VAS::~VAS()+0x117>
c000bffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c002:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c007:	83 ec 0c             	sub    esp,0xc
c000c00a:	50                   	push   eax
c000c00b:	e8 33 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c010:	83 c4 10             	add    esp,0x10
c000c013:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c017:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01b:	e9 1e ff ff ff       	jmp    c000bf3e <VAS::~VAS()+0x3e>
c000c020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c024:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	50                   	push   eax
c000c02b:	e8 d5 fc ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c030:	83 c4 10             	add    esp,0x10
c000c033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c037:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	50                   	push   eax
c000c03e:	e8 00 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c043:	83 c4 10             	add    esp,0x10
c000c046:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c04e:	c1 e0 02             	shl    eax,0x2
c000c051:	83 ec 08             	sub    esp,0x8
c000c054:	50                   	push   eax
c000c055:	68 70 45 02 c0       	push   0xc0024570
c000c05a:	e8 9c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c067:	48                   	dec    eax
c000c068:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000c06d:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c072:	85 c0                	test   eax,eax
c000c074:	75 01                	jne    c000c077 <VAS::~VAS()+0x177>
c000c076:	fb                   	sti    
c000c077:	90                   	nop
c000c078:	83 c4 2c             	add    esp,0x2c
c000c07b:	c3                   	ret    

c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c07c:	55                   	push   ebp
c000c07d:	57                   	push   edi
c000c07e:	56                   	push   esi
c000c07f:	53                   	push   ebx
c000c080:	83 ec 1c             	sub    esp,0x1c
c000c083:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c087:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c091:	77 08                	ja     c000c09b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c093:	0f 20 d8             	mov    eax,cr3
c000c096:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c099:	75 47                	jne    c000c0e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c09f:	09 d8                	or     eax,ebx
c000c0a1:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0a6:	75 57                	jne    c000c0ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0a8:	89 de                	mov    esi,ebx
c000c0aa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0ad:	c1 ee 16             	shr    esi,0x16
c000c0b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bb:	74 54                	je     c000c111 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cb:	c1 e6 0c             	shl    esi,0xc
c000c0ce:	c1 eb 0a             	shr    ebx,0xa
c000c0d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0da:	83 c4 1c             	add    esp,0x1c
c000c0dd:	5b                   	pop    ebx
c000c0de:	5e                   	pop    esi
c000c0df:	5f                   	pop    edi
c000c0e0:	5d                   	pop    ebp
c000c0e1:	c3                   	ret    
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	68 90 45 02 c0       	push   0xc0024590
c000c0ea:	e8 0c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c0ef:	83 c4 10             	add    esp,0x10
c000c0f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0f6:	09 d8                	or     eax,ebx
c000c0f8:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0fd:	74 a9                	je     c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	68 f8 45 02 c0       	push   0xc00245f8
c000c107:	e8 b7 88 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	eb 97                	jmp    c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c111:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c115:	e8 ac df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	89 c5                	mov    ebp,eax
c000c11f:	8b 0d d0 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281d0
c000c125:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c129:	6a 01                	push   0x1
c000c12b:	e8 a5 f8 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c130:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c137:	6a 01                	push   0x1
c000c139:	50                   	push   eax
c000c13a:	55                   	push   ebp
c000c13b:	81 cd 07 04 00 00    	or     ebp,0x407
c000c141:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c145:	51                   	push   ecx
c000c146:	e8 27 02 00 00       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14b:	83 c4 1c             	add    esp,0x1c
c000c14e:	68 00 10 00 00       	push   0x1000
c000c153:	6a 00                	push   0x0
c000c155:	50                   	push   eax
c000c156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15a:	e8 25 45 ff ff       	call   c0000684 <memset>
c000c15f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c163:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c166:	e8 9a fb ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c16f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c178:	e9 40 ff ff ff       	jmp    c000c0bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c17d:	90                   	nop

c000c17e <VAS::allocatePages(int, int)>:
c000c17e:	55                   	push   ebp
c000c17f:	57                   	push   edi
c000c180:	56                   	push   esi
c000c181:	53                   	push   ebx
c000c182:	83 ec 1c             	sub    esp,0x1c
c000c185:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c189:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c18e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c194:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19a:	83 e0 01             	and    eax,0x1
c000c19d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a5:	0f 85 cc 00 00 00    	jne    c000c277 <VAS::allocatePages(int, int)+0xf9>
c000c1ab:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b2:	85 c0                	test   eax,eax
c000c1b4:	0f 84 a1 00 00 00    	je     c000c25b <VAS::allocatePages(int, int)+0xdd>
c000c1ba:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c2:	c1 e6 0c             	shl    esi,0xc
c000c1c5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1c9:	85 c0                	test   eax,eax
c000c1cb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1ce:	7e 33                	jle    c000c203 <VAS::allocatePages(int, int)+0x85>
c000c1d0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d8:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1de:	e8 e3 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e3:	55                   	push   ebp
c000c1e4:	53                   	push   ebx
c000c1e5:	50                   	push   eax
c000c1e6:	57                   	push   edi
c000c1e7:	e8 90 fe ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f4:	74 03                	je     c000c1f9 <VAS::allocatePages(int, int)+0x7b>
c000c1f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 db                	jne    c000c1de <VAS::allocatePages(int, int)+0x60>
c000c203:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c208:	75 12                	jne    c000c21c <VAS::allocatePages(int, int)+0x9e>
c000c20a:	0f 20 d8             	mov    eax,cr3
c000c20d:	0f 22 d8             	mov    cr3,eax
c000c210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c214:	83 c4 1c             	add    esp,0x1c
c000c217:	5b                   	pop    ebx
c000c218:	5e                   	pop    esi
c000c219:	5f                   	pop    edi
c000c21a:	5d                   	pop    ebp
c000c21b:	c3                   	ret    
c000c21c:	c1 ee 0a             	shr    esi,0xa
c000c21f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c223:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c229:	c1 eb 0a             	shr    ebx,0xa
c000c22c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c232:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c238:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c23e:	39 c3                	cmp    ebx,eax
c000c240:	77 ce                	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c242:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c245:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24b:	39 d8                	cmp    eax,ebx
c000c24d:	73 f3                	jae    c000c242 <VAS::allocatePages(int, int)+0xc4>
c000c24f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c253:	83 c4 1c             	add    esp,0x1c
c000c256:	5b                   	pop    ebx
c000c257:	5e                   	pop    esi
c000c258:	5f                   	pop    edi
c000c259:	5d                   	pop    ebp
c000c25a:	c3                   	ret    
c000c25b:	83 ec 0c             	sub    esp,0xc
c000c25e:	68 1c 46 02 c0       	push   0xc002461c
c000c263:	e8 5b 87 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000c268:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	e9 43 ff ff ff       	jmp    c000c1ba <VAS::allocatePages(int, int)+0x3c>
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c27e:	e8 52 f7 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c28f:	0f 87 9b 00 00 00    	ja     c000c330 <VAS::allocatePages(int, int)+0x1b2>
c000c295:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c299:	85 d2                	test   edx,edx
c000c29b:	7e 3c                	jle    c000c2d9 <VAS::allocatePages(int, int)+0x15b>
c000c29d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2a9:	c1 e5 0c             	shl    ebp,0xc
c000c2ac:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b2:	01 dd                	add    ebp,ebx
c000c2b4:	e8 0d de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2b9:	56                   	push   esi
c000c2ba:	53                   	push   ebx
c000c2bb:	50                   	push   eax
c000c2bc:	57                   	push   edi
c000c2bd:	e8 ba fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c2:	83 c4 10             	add    esp,0x10
c000c2c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ca:	74 03                	je     c000c2cf <VAS::allocatePages(int, int)+0x151>
c000c2cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d5:	39 dd                	cmp    ebp,ebx
c000c2d7:	75 db                	jne    c000c2b4 <VAS::allocatePages(int, int)+0x136>
c000c2d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2de:	0f 84 26 ff ff ff    	je     c000c20a <VAS::allocatePages(int, int)+0x8c>
c000c2e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2ec:	89 d3                	mov    ebx,edx
c000c2ee:	c1 e0 0c             	shl    eax,0xc
c000c2f1:	c1 eb 0a             	shr    ebx,0xa
c000c2f4:	01 d0                	add    eax,edx
c000c2f6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2fc:	c1 e8 0a             	shr    eax,0xa
c000c2ff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c305:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30a:	2d 00 00 40 00       	sub    eax,0x400000
c000c30f:	39 c3                	cmp    ebx,eax
c000c311:	0f 87 f9 fe ff ff    	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c317:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c320:	39 d8                	cmp    eax,ebx
c000c322:	73 f3                	jae    c000c317 <VAS::allocatePages(int, int)+0x199>
c000c324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c328:	83 c4 1c             	add    esp,0x1c
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    
c000c330:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c335:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c342:	0f 84 4d ff ff ff    	je     c000c295 <VAS::allocatePages(int, int)+0x117>
c000c348:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c350:	e9 40 ff ff ff       	jmp    c000c295 <VAS::allocatePages(int, int)+0x117>
c000c355:	90                   	nop

c000c356 <VAS::setCPUSpecific(unsigned long)>:
c000c356:	83 ec 0c             	sub    esp,0xc
c000c359:	6a 05                	push   0x5
c000c35b:	68 00 00 40 c2       	push   0xc2400000
c000c360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	e8 0f fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c36d:	83 c4 1c             	add    esp,0x1c
c000c370:	c3                   	ret    
c000c371:	90                   	nop

c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c372:	55                   	push   ebp
c000c373:	57                   	push   edi
c000c374:	56                   	push   esi
c000c375:	53                   	push   ebx
c000c376:	83 ec 1c             	sub    esp,0x1c
c000c379:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c37e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c388:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c38c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c392:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c396:	83 e0 01             	and    eax,0x1
c000c399:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c39d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a1:	85 c0                	test   eax,eax
c000c3a3:	7e 39                	jle    c000c3de <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a9:	89 f3                	mov    ebx,esi
c000c3ab:	c1 e0 0c             	shl    eax,0xc
c000c3ae:	01 f0                	add    eax,esi
c000c3b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b4:	55                   	push   ebp
c000c3b5:	53                   	push   ebx
c000c3b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ba:	29 f0                	sub    eax,esi
c000c3bc:	01 d8                	add    eax,ebx
c000c3be:	50                   	push   eax
c000c3bf:	57                   	push   edi
c000c3c0:	e8 b7 fc ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3cd:	74 03                	je     c000c3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3cf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3d8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3dc:	75 d6                	jne    c000c3b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e3:	75 10                	jne    c000c3f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e5:	0f 20 d8             	mov    eax,cr3
c000c3e8:	0f 22 d8             	mov    cr3,eax
c000c3eb:	83 c4 1c             	add    esp,0x1c
c000c3ee:	89 f0                	mov    eax,esi
c000c3f0:	5b                   	pop    ebx
c000c3f1:	5e                   	pop    esi
c000c3f2:	5f                   	pop    edi
c000c3f3:	5d                   	pop    ebp
c000c3f4:	c3                   	ret    
c000c3f5:	89 f3                	mov    ebx,esi
c000c3f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3fb:	c1 eb 0a             	shr    ebx,0xa
c000c3fe:	c1 e0 0c             	shl    eax,0xc
c000c401:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c407:	01 f0                	add    eax,esi
c000c409:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c40f:	c1 e8 0a             	shr    eax,0xa
c000c412:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c417:	2d 00 00 40 00       	sub    eax,0x400000
c000c41c:	39 c3                	cmp    ebx,eax
c000c41e:	77 cb                	ja     c000c3eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c420:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c423:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c429:	39 d8                	cmp    eax,ebx
c000c42b:	73 f3                	jae    c000c420 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c42d:	83 c4 1c             	add    esp,0x1c
c000c430:	89 f0                	mov    eax,esi
c000c432:	5b                   	pop    ebx
c000c433:	5e                   	pop    esi
c000c434:	5f                   	pop    edi
c000c435:	5d                   	pop    ebp
c000c436:	c3                   	ret    
c000c437:	90                   	nop

c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c438:	55                   	push   ebp
c000c439:	57                   	push   edi
c000c43a:	56                   	push   esi
c000c43b:	53                   	push   ebx
c000c43c:	83 ec 1c             	sub    esp,0x1c
c000c43f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c443:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c447:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c44f:	a9 ff 0f 00 00       	test   eax,0xfff
c000c454:	75 4a                	jne    c000c4a0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c456:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c45d:	c1 eb 16             	shr    ebx,0x16
c000c460:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c467:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46b:	74 4d                	je     c000c4ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c46d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c471:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c475:	c1 e8 0a             	shr    eax,0xa
c000c478:	80 fa 01             	cmp    dl,0x1
c000c47b:	19 d2                	sbb    edx,edx
c000c47d:	c1 e3 0c             	shl    ebx,0xc
c000c480:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c484:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48a:	25 fc 0f 00 00       	and    eax,0xffc
c000c48f:	01 d8                	add    eax,ebx
c000c491:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c498:	83 c4 1c             	add    esp,0x1c
c000c49b:	5b                   	pop    ebx
c000c49c:	5e                   	pop    esi
c000c49d:	5f                   	pop    edi
c000c49e:	5d                   	pop    ebp
c000c49f:	c3                   	ret    
c000c4a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	68 48 46 02 c0       	push   0xc0024648
c000c4ac:	e8 12 85 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4b8:	eb 9c                	jmp    c000c456 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4be:	e8 03 dc ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c3:	83 ec 0c             	sub    esp,0xc
c000c4c6:	89 c5                	mov    ebp,eax
c000c4c8:	8b 0d d0 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281d0
c000c4ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d2:	6a 01                	push   0x1
c000c4d4:	e8 fc f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c4d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e0:	6a 01                	push   0x1
c000c4e2:	50                   	push   eax
c000c4e3:	55                   	push   ebp
c000c4e4:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4ee:	51                   	push   ecx
c000c4ef:	e8 7e fe ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f4:	83 c4 1c             	add    esp,0x1c
c000c4f7:	68 00 10 00 00       	push   0x1000
c000c4fc:	6a 00                	push   0x0
c000c4fe:	50                   	push   eax
c000c4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c503:	e8 7c 41 ff ff       	call   c0000684 <memset>
c000c508:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c50c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c50f:	e8 f1 f7 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c514:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c51d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c521:	e9 47 ff ff ff       	jmp    c000c46d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c526 <VAS::VAS(bool)>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 28             	sub    esp,0x28
c000c52a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c52e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c53d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c54c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c550:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c553:	e8 6e db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c558:	89 c2                	mov    edx,eax
c000c55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c561:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c000c567:	83 ec 0c             	sub    esp,0xc
c000c56a:	6a 01                	push   0x1
c000c56c:	e8 64 f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	89 c2                	mov    edx,eax
c000c576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c57d:	83 ec 0c             	sub    esp,0xc
c000c580:	6a 03                	push   0x3
c000c582:	6a 01                	push   0x1
c000c584:	52                   	push   edx
c000c585:	50                   	push   eax
c000c586:	53                   	push   ebx
c000c587:	e8 e6 fd ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c58c:	83 c4 20             	add    esp,0x20
c000c58f:	89 c2                	mov    edx,eax
c000c591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c595:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c598:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5a8:	7f 1c                	jg     c000c5c6 <VAS::VAS(bool)+0xa0>
c000c5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b5:	c1 e2 02             	shl    edx,0x2
c000c5b8:	01 d0                	add    eax,edx
c000c5ba:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c4:	eb da                	jmp    c000c5a0 <VAS::VAS(bool)+0x7a>
c000c5c6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5ce:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5d6:	7f 7a                	jg     c000c652 <VAS::VAS(bool)+0x12c>
c000c5d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5dc:	2d 00 02 00 00       	sub    eax,0x200
c000c5e1:	c1 e0 0c             	shl    eax,0xc
c000c5e4:	83 c8 03             	or     eax,0x3
c000c5e7:	89 c2                	mov    edx,eax
c000c5e9:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c5ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fa:	83 e0 10             	and    eax,0x10
c000c5fd:	84 c0                	test   al,al
c000c5ff:	74 07                	je     c000c608 <VAS::VAS(bool)+0xe2>
c000c601:	b8 00 01 00 00       	mov    eax,0x100
c000c606:	eb 05                	jmp    c000c60d <VAS::VAS(bool)+0xe7>
c000c608:	b8 00 00 00 00       	mov    eax,0x0
c000c60d:	09 d0                	or     eax,edx
c000c60f:	89 c1                	mov    ecx,eax
c000c611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c615:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c618:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c61c:	c1 e2 02             	shl    edx,0x2
c000c61f:	01 d0                	add    eax,edx
c000c621:	89 ca                	mov    edx,ecx
c000c623:	89 10                	mov    DWORD PTR [eax],edx
c000c625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c629:	2d 40 03 00 00       	sub    eax,0x340
c000c62e:	83 f8 7f             	cmp    eax,0x7f
c000c631:	77 16                	ja     c000c649 <VAS::VAS(bool)+0x123>
c000c633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c637:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c63e:	c1 e2 02             	shl    edx,0x2
c000c641:	01 d0                	add    eax,edx
c000c643:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c649:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c64d:	e9 7c ff ff ff       	jmp    c000c5ce <VAS::VAS(bool)+0xa8>
c000c652:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c657:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c65d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c663:	83 e0 10             	and    eax,0x10
c000c666:	84 c0                	test   al,al
c000c668:	74 07                	je     c000c671 <VAS::VAS(bool)+0x14b>
c000c66a:	b8 03 41 00 00       	mov    eax,0x4103
c000c66f:	eb 05                	jmp    c000c676 <VAS::VAS(bool)+0x150>
c000c671:	b8 03 40 00 00       	mov    eax,0x4003
c000c676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c67d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c683:	89 02                	mov    DWORD PTR [edx],eax
c000c685:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c68a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c690:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c696:	83 ec 08             	sub    esp,0x8
c000c699:	50                   	push   eax
c000c69a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c69e:	e8 b3 fc ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6aa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6ad:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c6b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6be:	83 e0 10             	and    eax,0x10
c000c6c1:	84 c0                	test   al,al
c000c6c3:	74 07                	je     c000c6cc <VAS::VAS(bool)+0x1a6>
c000c6c5:	b8 00 01 00 00       	mov    eax,0x100
c000c6ca:	eb 05                	jmp    c000c6d1 <VAS::VAS(bool)+0x1ab>
c000c6cc:	b8 00 00 00 00       	mov    eax,0x0
c000c6d1:	09 c2                	or     edx,eax
c000c6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6da:	05 fc 0f 00 00       	add    eax,0xffc
c000c6df:	83 ca 03             	or     edx,0x3
c000c6e2:	89 10                	mov    DWORD PTR [eax],edx
c000c6e4:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c6e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6ef:	83 ec 0c             	sub    esp,0xc
c000c6f2:	50                   	push   eax
c000c6f3:	e8 42 1e 00 00       	call   c000e53a <Device::getName()>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	83 ec 08             	sub    esp,0x8
c000c6fe:	68 1c 47 02 c0       	push   0xc002471c
c000c703:	50                   	push   eax
c000c704:	e8 c3 40 ff ff       	call   c00007cc <strcmp>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	85 c0                	test   eax,eax
c000c70e:	0f 94 c0             	sete   al
c000c711:	84 c0                	test   al,al
c000c713:	0f 84 87 00 00 00    	je     c000c7a0 <VAS::VAS(bool)+0x27a>
c000c719:	fa                   	cli    
c000c71a:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c71f:	40                   	inc    eax
c000c720:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000c725:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c72a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c730:	05 7c 09 00 00       	add    eax,0x97c
c000c735:	83 ec 0c             	sub    esp,0xc
c000c738:	50                   	push   eax
c000c739:	e8 c0 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c73e:	83 c4 10             	add    esp,0x10
c000c741:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c746:	89 c3                	mov    ebx,eax
c000c748:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000c74d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c753:	05 7c 09 00 00       	add    eax,0x97c
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	50                   	push   eax
c000c75c:	e8 9d cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	83 ec 08             	sub    esp,0x8
c000c767:	50                   	push   eax
c000c768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c76c:	e8 75 f5 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	8b 00                	mov    eax,DWORD PTR [eax]
c000c776:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77b:	6a 11                	push   0x11
c000c77d:	53                   	push   ebx
c000c77e:	50                   	push   eax
c000c77f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c783:	e8 f4 f8 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c788:	83 c4 10             	add    esp,0x10
c000c78b:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c790:	48                   	dec    eax
c000c791:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000c796:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c79b:	85 c0                	test   eax,eax
c000c79d:	75 01                	jne    c000c7a0 <VAS::VAS(bool)+0x27a>
c000c79f:	fb                   	sti    
c000c7a0:	90                   	nop
c000c7a1:	83 c4 28             	add    esp,0x28
c000c7a4:	5b                   	pop    ebx
c000c7a5:	c3                   	ret    

c000c7a6 <VAS::evict(unsigned long)>:
c000c7a6:	55                   	push   ebp
c000c7a7:	57                   	push   edi
c000c7a8:	56                   	push   esi
c000c7a9:	53                   	push   ebx
c000c7aa:	83 ec 1c             	sub    esp,0x1c
c000c7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b9:	e8 58 f3 ff ff       	call   c000bb16 <Virt::allocateSwapfilePage()>
c000c7be:	89 c7                	mov    edi,eax
c000c7c0:	a1 ec 74 02 c0       	mov    eax,ds:0xc00274ec
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	7e 3d                	jle    c000c806 <VAS::evict(unsigned long)+0x60>
c000c7c9:	89 ee                	mov    esi,ebp
c000c7cb:	31 db                	xor    ebx,ebx
c000c7cd:	83 ec 0c             	sub    esp,0xc
c000c7d0:	57                   	push   edi
c000c7d1:	e8 2e f3 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c7d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7d9:	01 d8                	add    eax,ebx
c000c7db:	6a 01                	push   0x1
c000c7dd:	31 d2                	xor    edx,edx
c000c7df:	43                   	inc    ebx
c000c7e0:	52                   	push   edx
c000c7e1:	81 c6 00 02 00 00    	add    esi,0x200
c000c7e7:	50                   	push   eax
c000c7e8:	0f be 05 f8 74 02 c0 	movsx  eax,BYTE PTR ds:0xc00274f8
c000c7ef:	ff 34 85 5c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7aa4]
c000c7f6:	e8 c5 3d 00 00       	call   c00105c0 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7fb:	83 c4 20             	add    esp,0x20
c000c7fe:	39 1d ec 74 02 c0    	cmp    DWORD PTR ds:0xc00274ec,ebx
c000c804:	7f c7                	jg     c000c7cd <VAS::evict(unsigned long)+0x27>
c000c806:	83 ec 08             	sub    esp,0x8
c000c809:	c1 e7 0b             	shl    edi,0xb
c000c80c:	55                   	push   ebp
c000c80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c811:	e8 d0 f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c816:	8b 10                	mov    edx,DWORD PTR [eax]
c000c818:	89 d3                	mov    ebx,edx
c000c81a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c820:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c826:	09 d7                	or     edi,edx
c000c828:	89 38                	mov    DWORD PTR [eax],edi
c000c82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c82d:	ff 05 c8 81 02 c0    	inc    DWORD PTR ds:0xc00281c8
c000c833:	e8 0b d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c838:	0f 20 d8             	mov    eax,cr3
c000c83b:	0f 22 d8             	mov    cr3,eax
c000c83e:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c000c844:	55                   	push   ebp
c000c845:	53                   	push   ebx
c000c846:	68 6c 46 02 c0       	push   0xc002466c
c000c84b:	e8 ab 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c850:	a1 c4 81 02 c0       	mov    eax,ds:0xc00281c4
c000c855:	c7 44 24 50 2a 47 02 c0 	mov    DWORD PTR [esp+0x50],0xc002472a
c000c85d:	8d 50 01             	lea    edx,[eax+0x1]
c000c860:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c864:	89 15 c4 81 02 c0    	mov    DWORD PTR ds:0xc00281c4,edx
c000c86a:	83 c4 3c             	add    esp,0x3c
c000c86d:	5b                   	pop    ebx
c000c86e:	5e                   	pop    esi
c000c86f:	5f                   	pop    edi
c000c870:	5d                   	pop    ebp
c000c871:	e9 85 04 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c876:	55                   	push   ebp
c000c877:	57                   	push   edi
c000c878:	56                   	push   esi
c000c879:	53                   	push   ebx
c000c87a:	83 ec 14             	sub    esp,0x14
c000c87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c881:	68 3b 47 02 c0       	push   0xc002473b
c000c886:	e8 70 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c88b:	83 c4 10             	add    esp,0x10
c000c88e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c892:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c898:	74 20                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89a:	83 ec 08             	sub    esp,0x8
c000c89d:	55                   	push   ebp
c000c89e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a2:	e8 3f f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 c3                	mov    ebx,eax
c000c8ac:	85 c0                	test   eax,eax
c000c8ae:	74 0a                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b0:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b2:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8b8:	74 0a                	je     c000c8c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8ba:	31 c0                	xor    eax,eax
c000c8bc:	83 c4 0c             	add    esp,0xc
c000c8bf:	5b                   	pop    ebx
c000c8c0:	5e                   	pop    esi
c000c8c1:	5f                   	pop    edi
c000c8c2:	5d                   	pop    ebp
c000c8c3:	c3                   	ret    
c000c8c4:	e8 fd d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8c9:	c1 ef 0b             	shr    edi,0xb
c000c8cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8ce:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d4:	09 c2                	or     edx,eax
c000c8d6:	81 ca 01 08 00 00    	or     edx,0x801
c000c8dc:	89 13                	mov    DWORD PTR [ebx],edx
c000c8de:	8b 0d ec 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274ec
c000c8e4:	85 c9                	test   ecx,ecx
c000c8e6:	7e 3d                	jle    c000c925 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8e8:	89 ee                	mov    esi,ebp
c000c8ea:	31 db                	xor    ebx,ebx
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	57                   	push   edi
c000c8f0:	e8 0f f2 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c8f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8f8:	01 d8                	add    eax,ebx
c000c8fa:	6a 01                	push   0x1
c000c8fc:	31 d2                	xor    edx,edx
c000c8fe:	43                   	inc    ebx
c000c8ff:	52                   	push   edx
c000c900:	81 c6 00 02 00 00    	add    esi,0x200
c000c906:	50                   	push   eax
c000c907:	0f be 05 f8 74 02 c0 	movsx  eax,BYTE PTR ds:0xc00274f8
c000c90e:	ff 34 85 5c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7aa4]
c000c915:	e8 3a 3c 00 00       	call   c0010554 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91a:	83 c4 20             	add    esp,0x20
c000c91d:	39 1d ec 74 02 c0    	cmp    DWORD PTR ds:0xc00274ec,ebx
c000c923:	7f c7                	jg     c000c8ec <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c925:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c000c92a:	48                   	dec    eax
c000c92b:	52                   	push   edx
c000c92c:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c000c931:	50                   	push   eax
c000c932:	55                   	push   ebp
c000c933:	68 4e 47 02 c0       	push   0xc002474e
c000c938:	e8 be 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c93d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c940:	e8 a1 f1 ff ff       	call   c000bae6 <Virt::freeSwapfilePage(unsigned long)>
c000c945:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	48                   	dec    eax
c000c94e:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000c953:	85 c0                	test   eax,eax
c000c955:	74 1d                	je     c000c974 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c957:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95b:	25 ff 0f 00 00       	and    eax,0xfff
c000c960:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c965:	77 10                	ja     c000c977 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c967:	0f 20 d8             	mov    eax,cr3
c000c96a:	0f 22 d8             	mov    cr3,eax
c000c96d:	b0 01                	mov    al,0x1
c000c96f:	e9 48 ff ff ff       	jmp    c000c8bc <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c974:	fb                   	sti    
c000c975:	eb e0                	jmp    c000c957 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c977:	83 ec 0c             	sub    esp,0xc
c000c97a:	68 63 47 02 c0       	push   0xc0024763
c000c97f:	e8 77 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb de                	jmp    c000c967 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c989:	90                   	nop

c000c98a <VAS::scanForEviction()>:
c000c98a:	57                   	push   edi
c000c98b:	31 ff                	xor    edi,edi
c000c98d:	56                   	push   esi
c000c98e:	53                   	push   ebx
c000c98f:	83 ec 10             	sub    esp,0x10
c000c992:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c996:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c999:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c99f:	75 0e                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9a1:	89 da                	mov    edx,ebx
c000c9a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9a6:	c1 ea 16             	shr    edx,0x16
c000c9a9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ad:	74 4e                	je     c000c9fd <VAS::scanForEviction()+0x73>
c000c9af:	53                   	push   ebx
c000c9b0:	56                   	push   esi
c000c9b1:	e8 30 f3 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c9b6:	5a                   	pop    edx
c000c9b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9b9:	59                   	pop    ecx
c000c9ba:	89 d1                	mov    ecx,edx
c000c9bc:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9c8:	74 3e                	je     c000ca08 <VAS::scanForEviction()+0x7e>
c000c9ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9d6:	76 2b                	jbe    c000ca03 <VAS::scanForEviction()+0x79>
c000c9d8:	47                   	inc    edi
c000c9d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e0:	83 ff 03             	cmp    edi,0x3
c000c9e3:	74 32                	je     c000ca17 <VAS::scanForEviction()+0x8d>
c000c9e5:	31 db                	xor    ebx,ebx
c000c9e7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9ed:	75 c0                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9ef:	89 da                	mov    edx,ebx
c000c9f1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f4:	c1 ea 16             	shr    edx,0x16
c000c9f7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9fb:	75 b2                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9fd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca03:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca06:	eb 91                	jmp    c000c999 <VAS::scanForEviction()+0xf>
c000ca08:	f6 c2 20             	test   dl,0x20
c000ca0b:	74 13                	je     c000ca20 <VAS::scanForEviction()+0x96>
c000ca0d:	83 e2 df             	and    edx,0xffffffdf
c000ca10:	89 10                	mov    DWORD PTR [eax],edx
c000ca12:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca15:	eb b3                	jmp    c000c9ca <VAS::scanForEviction()+0x40>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	31 c0                	xor    eax,eax
c000ca1c:	5b                   	pop    ebx
c000ca1d:	5e                   	pop    esi
c000ca1e:	5f                   	pop    edi
c000ca1f:	c3                   	ret    
c000ca20:	83 ec 08             	sub    esp,0x8
c000ca23:	89 d0                	mov    eax,edx
c000ca25:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca2e:	53                   	push   ebx
c000ca2f:	68 73 47 02 c0       	push   0xc0024773
c000ca34:	e8 c2 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca39:	58                   	pop    eax
c000ca3a:	5a                   	pop    edx
c000ca3b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca3e:	56                   	push   esi
c000ca3f:	e8 62 fd ff ff       	call   c000c7a6 <VAS::evict(unsigned long)>
c000ca44:	59                   	pop    ecx
c000ca45:	5b                   	pop    ebx
c000ca46:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca49:	68 87 47 02 c0       	push   0xc0024787
c000ca4e:	e8 a8 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca53:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5a:	83 c4 10             	add    esp,0x10
c000ca5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	5b                   	pop    ebx
c000ca65:	5e                   	pop    esi
c000ca66:	5f                   	pop    edi
c000ca67:	c3                   	ret    

c000ca68 <mapVASFirstTime>:
c000ca68:	55                   	push   ebp
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 0c             	sub    esp,0xc
c000ca6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca77:	4a                   	dec    edx
c000ca78:	0f 84 fe 00 00 00    	je     c000cb7c <mapVASFirstTime+0x114>
c000ca7e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca81:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca84:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca89:	c1 e5 15             	shl    ebp,0x15
c000ca8c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca91:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca97:	29 eb                	sub    ebx,ebp
c000ca99:	29 ef                	sub    edi,ebp
c000ca9b:	83 ec 08             	sub    esp,0x8
c000ca9e:	53                   	push   ebx
c000ca9f:	68 b3 47 02 c0       	push   0xc00247b3
c000caa4:	e8 52 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000caa9:	e8 18 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000caae:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab5:	6a 01                	push   0x1
c000cab7:	53                   	push   ebx
c000cab8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cabe:	50                   	push   eax
c000cabf:	56                   	push   esi
c000cac0:	e8 ad f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 fb                	cmp    ebx,edi
c000caca:	75 cf                	jne    c000ca9b <mapVASFirstTime+0x33>
c000cacc:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad1:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cad6:	29 eb                	sub    ebx,ebp
c000cad8:	29 ef                	sub    edi,ebp
c000cada:	83 ec 08             	sub    esp,0x8
c000cadd:	53                   	push   ebx
c000cade:	68 cf 47 02 c0       	push   0xc00247cf
c000cae3:	e8 13 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cae8:	58                   	pop    eax
c000cae9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caed:	5a                   	pop    edx
c000caee:	19 c0                	sbb    eax,eax
c000caf0:	83 e0 04             	and    eax,0x4
c000caf3:	05 03 04 00 00       	add    eax,0x403
c000caf8:	50                   	push   eax
c000caf9:	68 e3 47 02 c0       	push   0xc00247e3
c000cafe:	e8 f8 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb03:	e8 be d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb08:	59                   	pop    ecx
c000cb09:	89 c5                	mov    ebp,eax
c000cb0b:	58                   	pop    eax
c000cb0c:	55                   	push   ebp
c000cb0d:	68 f1 47 02 c0       	push   0xc00247f1
c000cb12:	e8 e4 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb17:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1b:	19 d2                	sbb    edx,edx
c000cb1d:	83 e2 04             	and    edx,0x4
c000cb20:	81 c2 03 04 00 00    	add    edx,0x403
c000cb26:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb29:	6a 01                	push   0x1
c000cb2b:	53                   	push   ebx
c000cb2c:	55                   	push   ebp
c000cb2d:	56                   	push   esi
c000cb2e:	e8 3f f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb33:	83 c4 18             	add    esp,0x18
c000cb36:	53                   	push   ebx
c000cb37:	56                   	push   esi
c000cb38:	e8 a9 f1 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000cb3d:	5a                   	pop    edx
c000cb3e:	59                   	pop    ecx
c000cb3f:	ff 30                	push   DWORD PTR [eax]
c000cb41:	68 0d 48 02 c0       	push   0xc002480d
c000cb46:	e8 b0 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb4b:	0f 20 d8             	mov    eax,cr3
c000cb4e:	83 c4 0c             	add    esp,0xc
c000cb51:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb57:	56                   	push   esi
c000cb58:	50                   	push   eax
c000cb59:	68 18 48 02 c0       	push   0xc0024818
c000cb5e:	e8 98 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	39 df                	cmp    edi,ebx
c000cb68:	0f 85 6c ff ff ff    	jne    c000cada <mapVASFirstTime+0x72>
c000cb6e:	0f 20 d8             	mov    eax,cr3
c000cb71:	0f 22 d8             	mov    cr3,eax
c000cb74:	83 c4 0c             	add    esp,0xc
c000cb77:	5b                   	pop    ebx
c000cb78:	5e                   	pop    esi
c000cb79:	5f                   	pop    edi
c000cb7a:	5d                   	pop    ebp
c000cb7b:	c3                   	ret    
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	68 9a 47 02 c0       	push   0xc002479a
c000cb84:	e8 72 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	83 c4 0c             	add    esp,0xc
c000cb8f:	5b                   	pop    ebx
c000cb90:	5e                   	pop    esi
c000cb91:	5f                   	pop    edi
c000cb92:	5d                   	pop    ebp
c000cb93:	c3                   	ret    

c000cb94 <__cxa_atexit>:
c000cb94:	31 c0                	xor    eax,eax
c000cb96:	c3                   	ret    

c000cb97 <__cxa_finalize>:
c000cb97:	c3                   	ret    

c000cb98 <__stack_chk_fail>:
c000cb98:	55                   	push   ebp
c000cb99:	89 e5                	mov    ebp,esp
c000cb9b:	83 ec 14             	sub    esp,0x14
c000cb9e:	68 30 48 02 c0       	push   0xc0024830
c000cba3:	e8 53 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cba8:	58                   	pop    eax
c000cba9:	5a                   	pop    edx
c000cbaa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbad:	68 80 48 02 c0       	push   0xc0024880
c000cbb2:	e8 44 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbb7:	59                   	pop    ecx
c000cbb8:	58                   	pop    eax
c000cbb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbbc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbbf:	68 80 48 02 c0       	push   0xc0024880
c000cbc4:	e8 32 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbc9:	5a                   	pop    edx
c000cbca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbcd:	59                   	pop    ecx
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd3:	68 80 48 02 c0       	push   0xc0024880
c000cbd8:	e8 1e 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbdd:	5a                   	pop    edx
c000cbde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe1:	59                   	pop    ecx
c000cbe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbe9:	68 80 48 02 c0       	push   0xc0024880
c000cbee:	e8 08 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbf3:	c7 04 24 88 48 02 c0 	mov    DWORD PTR [esp],0xc0024888
c000cbfa:	e8 c4 7d 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	c9                   	leave  
c000cc03:	c3                   	ret    

c000cc04 <__cxa_pure_virtual>:
c000cc04:	83 ec 18             	sub    esp,0x18
c000cc07:	68 a0 48 02 c0       	push   0xc00248a0
c000cc0c:	e8 b2 7d 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000cc11:	83 c4 1c             	add    esp,0x1c
c000cc14:	c3                   	ret    

c000cc15 <operator new[](unsigned long)>:
c000cc15:	e9 f5 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1a <operator delete(void*, unsigned long)>:
c000cc1a:	e9 10 ce ff ff       	jmp    c0009a2f <rfree>

c000cc1f <operator delete[](void*)>:
c000cc1f:	e9 0b ce ff ff       	jmp    c0009a2f <rfree>

c000cc24 <operator delete[](void*, unsigned long)>:
c000cc24:	e9 06 ce ff ff       	jmp    c0009a2f <rfree>

c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc29:	55                   	push   ebp
c000cc2a:	b9 11 00 00 00       	mov    ecx,0x11
c000cc2f:	57                   	push   edi
c000cc30:	56                   	push   esi
c000cc31:	be 86 43 02 c0       	mov    esi,0xc0024386
c000cc36:	53                   	push   ebx
c000cc37:	83 ec 20             	sub    esp,0x20
c000cc3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc42:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc46:	fc                   	cld    
c000cc47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc49:	89 ee                	mov    esi,ebp
c000cc4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc4f:	eb 02                	jmp    c000cc53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc51:	89 c6                	mov    esi,eax
c000cc53:	31 d2                	xor    edx,edx
c000cc55:	41                   	inc    ecx
c000cc56:	89 f0                	mov    eax,esi
c000cc58:	f7 f3                	div    ebx
c000cc5a:	39 de                	cmp    esi,ebx
c000cc5c:	73 f3                	jae    c000cc51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc5e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc61:	eb 02                	jmp    c000cc65 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc63:	89 c5                	mov    ebp,eax
c000cc65:	31 d2                	xor    edx,edx
c000cc67:	49                   	dec    ecx
c000cc68:	89 e8                	mov    eax,ebp
c000cc6a:	f7 f3                	div    ebx
c000cc6c:	39 dd                	cmp    ebp,ebx
c000cc6e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc72:	88 11                	mov    BYTE PTR [ecx],dl
c000cc74:	73 ed                	jae    c000cc63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7a:	83 c4 20             	add    esp,0x20
c000cc7d:	5b                   	pop    ebx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    

c000cc82 <Dbg::logc(char)>:
c000cc82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc86:	f6 05 c0 80 02 c0 10 	test   BYTE PTR ds:0xc00280c0,0x10
c000cc8d:	75 12                	jne    c000cca1 <Dbg::logc(char)+0x1f>
c000cc8f:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc94:	ec                   	in     al,dx
c000cc95:	a8 20                	test   al,0x20
c000cc97:	74 fb                	je     c000cc94 <Dbg::logc(char)+0x12>
c000cc99:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc9e:	88 c8                	mov    al,cl
c000cca0:	ee                   	out    dx,al
c000cca1:	c3                   	ret    

c000cca2 <Dbg::logs(char*)>:
c000cca2:	53                   	push   ebx
c000cca3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cca7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccaa:	84 c0                	test   al,al
c000ccac:	74 0f                	je     c000ccbd <Dbg::logs(char*)+0x1b>
c000ccae:	50                   	push   eax
c000ccaf:	43                   	inc    ebx
c000ccb0:	e8 cd ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ccb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccb8:	5a                   	pop    edx
c000ccb9:	84 c0                	test   al,al
c000ccbb:	75 f1                	jne    c000ccae <Dbg::logs(char*)+0xc>
c000ccbd:	5b                   	pop    ebx
c000ccbe:	c3                   	ret    

c000ccbf <Dbg::logWriteInt(unsigned int)>:
c000ccbf:	83 ec 10             	sub    esp,0x10
c000ccc2:	6a 0a                	push   0xa
c000ccc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ccc8:	50                   	push   eax
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 57 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd2:	50                   	push   eax
c000ccd3:	e8 ca ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccd8:	83 c4 20             	add    esp,0x20
c000ccdb:	c3                   	ret    

c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>:
c000ccdc:	83 ec 10             	sub    esp,0x10
c000ccdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cce7:	50                   	push   eax
c000cce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccec:	e8 38 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf1:	50                   	push   eax
c000ccf2:	e8 ab ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccf7:	83 c4 20             	add    esp,0x20
c000ccfa:	c3                   	ret    

c000ccfb <Dbg::kprintf(char const*, ...)>:
c000ccfb:	55                   	push   ebp
c000ccfc:	57                   	push   edi
c000ccfd:	56                   	push   esi
c000ccfe:	53                   	push   ebx
c000ccff:	83 ec 0c             	sub    esp,0xc
c000cd02:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd06:	f6 05 c0 80 02 c0 10 	test   BYTE PTR ds:0xc00280c0,0x10
c000cd0d:	74 08                	je     c000cd17 <Dbg::kprintf(char const*, ...)+0x1c>
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	5b                   	pop    ebx
c000cd13:	5e                   	pop    esi
c000cd14:	5f                   	pop    edi
c000cd15:	5d                   	pop    ebp
c000cd16:	c3                   	ret    
c000cd17:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1b:	31 db                	xor    ebx,ebx
c000cd1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd21:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd24:	84 c0                	test   al,al
c000cd26:	74 e7                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd28:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2b:	3c 25                	cmp    al,0x25
c000cd2d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd30:	75 44                	jne    c000cd76 <Dbg::kprintf(char const*, ...)+0x7b>
c000cd32:	83 c3 02             	add    ebx,0x2
c000cd35:	8a 07                	mov    al,BYTE PTR [edi]
c000cd37:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3a:	83 e8 25             	sub    eax,0x25
c000cd3d:	3c 53                	cmp    al,0x53
c000cd3f:	0f 87 c9 00 00 00    	ja     c000ce0e <Dbg::kprintf(char const*, ...)+0x113>
c000cd45:	0f b6 c0             	movzx  eax,al
c000cd48:	ff 24 85 b4 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb74c]
c000cd4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd53:	89 c8                	mov    eax,ecx
c000cd55:	83 c1 04             	add    ecx,0x4
c000cd58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd5c:	ff 30                	push   DWORD PTR [eax]
c000cd5e:	e8 5c ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cd63:	5f                   	pop    edi
c000cd64:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd68:	84 c0                	test   al,al
c000cd6a:	74 a3                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd6c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd6f:	3c 25                	cmp    al,0x25
c000cd71:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd74:	74 bc                	je     c000cd32 <Dbg::kprintf(char const*, ...)+0x37>
c000cd76:	50                   	push   eax
c000cd77:	89 eb                	mov    ebx,ebp
c000cd79:	e8 04 ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cd7e:	89 fd                	mov    ebp,edi
c000cd80:	58                   	pop    eax
c000cd81:	eb e1                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd87:	89 c8                	mov    eax,ecx
c000cd89:	83 c1 04             	add    ecx,0x4
c000cd8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd90:	ff 30                	push   DWORD PTR [eax]
c000cd92:	e8 0b ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000cd97:	58                   	pop    eax
c000cd98:	eb ca                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd9e:	89 d0                	mov    eax,edx
c000cda0:	83 c2 04             	add    edx,0x4
c000cda3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda7:	ff 30                	push   DWORD PTR [eax]
c000cda9:	e8 11 ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cdae:	58                   	pop    eax
c000cdaf:	eb b3                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb5:	89 d0                	mov    eax,edx
c000cdb7:	83 c2 04             	add    edx,0x4
c000cdba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc1:	50                   	push   eax
c000cdc2:	e8 bb fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cdc7:	58                   	pop    eax
c000cdc8:	eb 9a                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdce:	89 c8                	mov    eax,ecx
c000cdd0:	83 c1 04             	add    ecx,0x4
c000cdd3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cdd7:	6a 10                	push   0x10
c000cdd9:	ff 30                	push   DWORD PTR [eax]
c000cddb:	e8 fc fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cde0:	59                   	pop    ecx
c000cde1:	5f                   	pop    edi
c000cde2:	eb 80                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cde4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cde8:	89 d0                	mov    eax,edx
c000cdea:	83 c2 08             	add    edx,0x8
c000cded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf1:	6a 10                	push   0x10
c000cdf3:	ff 30                	push   DWORD PTR [eax]
c000cdf5:	e8 e2 fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfa:	58                   	pop    eax
c000cdfb:	5a                   	pop    edx
c000cdfc:	e9 63 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce01:	6a 25                	push   0x25
c000ce03:	e8 7a fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce08:	58                   	pop    eax
c000ce09:	e9 56 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce0e:	6a 25                	push   0x25
c000ce10:	e8 6d fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce15:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce18:	50                   	push   eax
c000ce19:	e8 64 fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce1e:	5a                   	pop    edx
c000ce1f:	59                   	pop    ecx
c000ce20:	e9 3f ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce25:	90                   	nop

c000ce26 <File::read(unsigned long long, void*, int*)>:
c000ce26:	53                   	push   ebx
c000ce27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce36:	3c 19                	cmp    al,0x19
c000ce38:	77 35                	ja     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce3a:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000ce41:	85 c0                	test   eax,eax
c000ce43:	74 2a                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 20                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce53:	74 21                	je     c000ce76 <File::read(unsigned long long, void*, int*)+0x50>
c000ce55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce69:	5b                   	pop    ebx
c000ce6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce6d:	ff e0                	jmp    eax
c000ce6f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce74:	eb 05                	jmp    c000ce7b <File::read(unsigned long long, void*, int*)+0x55>
c000ce76:	b8 05 00 00 00       	mov    eax,0x5
c000ce7b:	5b                   	pop    ebx
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <File::write(unsigned long long, void*, int*)>:
c000ce7e:	53                   	push   ebx
c000ce7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce8e:	3c 19                	cmp    al,0x19
c000ce90:	77 35                	ja     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce92:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000ce99:	85 c0                	test   eax,eax
c000ce9b:	74 2a                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea3:	85 c0                	test   eax,eax
c000cea5:	74 20                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000cea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceab:	74 21                	je     c000cece <File::write(unsigned long long, void*, int*)+0x50>
c000cead:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec1:	5b                   	pop    ebx
c000cec2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec5:	ff e0                	jmp    eax
c000cec7:	b8 0b 00 00 00       	mov    eax,0xb
c000cecc:	eb 05                	jmp    c000ced3 <File::write(unsigned long long, void*, int*)+0x55>
c000cece:	b8 05 00 00 00       	mov    eax,0x5
c000ced3:	5b                   	pop    ebx
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <Directory::read(unsigned long long, void*, int*)>:
c000ced6:	53                   	push   ebx
c000ced7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cedf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cee6:	3c 19                	cmp    al,0x19
c000cee8:	77 35                	ja     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceea:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000cef1:	85 c0                	test   eax,eax
c000cef3:	74 2a                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cefb:	85 c0                	test   eax,eax
c000cefd:	74 20                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf03:	74 21                	je     c000cf26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf19:	5b                   	pop    ebx
c000cf1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf1d:	ff e0                	jmp    eax
c000cf1f:	b8 0b 00 00 00       	mov    eax,0xb
c000cf24:	eb 05                	jmp    c000cf2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf26:	b8 05 00 00 00       	mov    eax,0x5
c000cf2b:	5b                   	pop    ebx
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <Directory::write(unsigned long long, void*, int*)>:
c000cf2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf39:	b8 0b 00 00 00       	mov    eax,0xb
c000cf3e:	80 fa 19             	cmp    dl,0x19
c000cf41:	77 18                	ja     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf43:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000cf4a:	85 d2                	test   edx,edx
c000cf4c:	74 0d                	je     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf55:	19 c0                	sbb    eax,eax
c000cf57:	83 e0 0a             	and    eax,0xa
c000cf5a:	40                   	inc    eax
c000cf5b:	c3                   	ret    

c000cf5c <File::isAtty()>:
c000cf5c:	31 c0                	xor    eax,eax
c000cf5e:	c3                   	ret    
c000cf5f:	90                   	nop

c000cf60 <Directory::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf64:	b8 0a 00 00 00       	mov    eax,0xa
c000cf69:	c3                   	ret    

c000cf6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6a:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6f:	c3                   	ret    

c000cf70 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf70:	31 c0                	xor    eax,eax
c000cf72:	31 d2                	xor    edx,edx
c000cf74:	c3                   	ret    
c000cf75:	90                   	nop

c000cf76 <File::~File()>:
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	89 10                	mov    DWORD PTR [eax],edx
c000cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	50                   	push   eax
c000cf8c:	e8 e3 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	90                   	nop
c000cf95:	83 c4 0c             	add    esp,0xc
c000cf98:	c3                   	ret    
c000cf99:	90                   	nop

c000cf9a <File::~File()>:
c000cf9a:	83 ec 0c             	sub    esp,0xc
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa4:	e8 cd ff ff ff       	call   c000cf76 <File::~File()>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	83 ec 08             	sub    esp,0x8
c000cfaf:	68 14 01 00 00       	push   0x114
c000cfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb8:	e8 5d fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	83 c4 0c             	add    esp,0xc
c000cfc3:	c3                   	ret    

c000cfc4 <Directory::~Directory()>:
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c000cfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd0:	89 10                	mov    DWORD PTR [eax],edx
c000cfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	50                   	push   eax
c000cfda:	e8 95 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	90                   	nop
c000cfe3:	83 c4 0c             	add    esp,0xc
c000cfe6:	c3                   	ret    
c000cfe7:	90                   	nop

c000cfe8 <Directory::~Directory()>:
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	83 ec 0c             	sub    esp,0xc
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	e8 cd ff ff ff       	call   c000cfc4 <Directory::~Directory()>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	83 ec 08             	sub    esp,0x8
c000cffd:	68 14 01 00 00       	push   0x114
c000d002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d006:	e8 0f fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	83 c4 0c             	add    esp,0xc
c000d011:	c3                   	ret    

c000d012 <Filesystem::Filesystem()>:
c000d012:	ba 88 4a 02 c0       	mov    edx,0xc0024a88
c000d017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01b:	89 10                	mov    DWORD PTR [eax],edx
c000d01d:	8b 15 d4 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281d4
c000d023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d027:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02e:	a3 d4 81 02 c0       	mov    ds:0xc00281d4,eax
c000d033:	90                   	nop
c000d034:	c3                   	ret    
c000d035:	90                   	nop

c000d036 <Filesystem::~Filesystem()>:
c000d036:	ba 88 4a 02 c0       	mov    edx,0xc0024a88
c000d03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d03f:	89 10                	mov    DWORD PTR [eax],edx
c000d041:	90                   	nop
c000d042:	c3                   	ret    
c000d043:	90                   	nop

c000d044 <Filesystem::~Filesystem()>:
c000d044:	83 ec 0c             	sub    esp,0xc
c000d047:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04b:	e8 e6 ff ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c000d050:	83 c4 04             	add    esp,0x4
c000d053:	83 ec 08             	sub    esp,0x8
c000d056:	6a 08                	push   0x8
c000d058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d05c:	e8 b9 fb ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	83 c4 0c             	add    esp,0xc
c000d067:	c3                   	ret    

c000d068 <Fs::getcwd(Process*, char*, int)>:
c000d068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d06c:	31 c0                	xor    eax,eax
c000d06e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d071:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d075:	7d 15                	jge    c000d08c <Fs::getcwd(Process*, char*, int)+0x24>
c000d077:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d082:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d085:	84 c9                	test   cl,cl
c000d087:	74 06                	je     c000d08f <Fs::getcwd(Process*, char*, int)+0x27>
c000d089:	40                   	inc    eax
c000d08a:	eb e2                	jmp    c000d06e <Fs::getcwd(Process*, char*, int)+0x6>
c000d08c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d08f:	31 c0                	xor    eax,eax
c000d091:	c3                   	ret    

c000d092 <Fs::initVFS()>:
c000d092:	83 ec 18             	sub    esp,0x18
c000d095:	6a 08                	push   0x8
c000d097:	e8 73 c9 ff ff       	call   c0009a0f <malloc>
c000d09c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d09f:	e8 08 e9 00 00       	call   c001b9ac <FAT::FAT()>
c000d0a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0ab:	e8 5f c9 ff ff       	call   c0009a0f <malloc>
c000d0b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b3:	e8 5c fb 00 00       	call   c001cc14 <ISO9660::ISO9660()>
c000d0b8:	83 c4 1c             	add    esp,0x1c
c000d0bb:	c3                   	ret    

c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0bc:	55                   	push   ebp
c000d0bd:	57                   	push   edi
c000d0be:	56                   	push   esi
c000d0bf:	53                   	push   ebx
c000d0c0:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0db:	68 00 04 00 00       	push   0x400
c000d0e0:	6a 00                	push   0x0
c000d0e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0e6:	56                   	push   esi
c000d0e7:	e8 98 35 ff ff       	call   c0000684 <memset>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f3:	75 0b                	jne    c000d100 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f5:	50                   	push   eax
c000d0f6:	50                   	push   eax
c000d0f7:	57                   	push   edi
c000d0f8:	56                   	push   esi
c000d0f9:	e8 42 36 ff ff       	call   c0000740 <strcpy>
c000d0fe:	eb 41                	jmp    c000d141 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d100:	8a 07                	mov    al,BYTE PTR [edi]
c000d102:	3c 5c                	cmp    al,0x5c
c000d104:	74 04                	je     c000d10a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d106:	3c 2f                	cmp    al,0x2f
c000d108:	75 18                	jne    c000d122 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d10d:	3c 60                	cmp    al,0x60
c000d10f:	7e 03                	jle    c000d114 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d111:	83 e8 20             	sub    eax,0x20
c000d114:	88 04 24             	mov    BYTE PTR [esp],al
c000d117:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d11e:	50                   	push   eax
c000d11f:	50                   	push   eax
c000d120:	eb 18                	jmp    c000d13a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	55                   	push   ebp
c000d125:	56                   	push   esi
c000d126:	e8 15 36 ff ff       	call   c0000740 <strcpy>
c000d12b:	5a                   	pop    edx
c000d12c:	59                   	pop    ecx
c000d12d:	68 42 61 02 c0       	push   0xc0026142
c000d132:	56                   	push   esi
c000d133:	e8 48 37 ff ff       	call   c0000880 <strcat>
c000d138:	5d                   	pop    ebp
c000d139:	58                   	pop    eax
c000d13a:	57                   	push   edi
c000d13b:	56                   	push   esi
c000d13c:	e8 3f 37 ff ff       	call   c0000880 <strcat>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d147:	3c 60                	cmp    al,0x60
c000d149:	7e 03                	jle    c000d14e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14b:	83 e8 20             	sub    eax,0x20
c000d14e:	88 04 24             	mov    BYTE PTR [esp],al
c000d151:	88 03                	mov    BYTE PTR [ebx],al
c000d153:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d160:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d164:	bf 03 00 00 00       	mov    edi,0x3
c000d169:	b8 03 00 00 00       	mov    eax,0x3
c000d16e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d171:	84 d2                	test   dl,dl
c000d173:	0f 84 91 00 00 00    	je     c000d20a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d179:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d17c:	80 fa 5c             	cmp    dl,0x5c
c000d17f:	74 05                	je     c000d186 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d181:	80 fa 2f             	cmp    dl,0x2f
c000d184:	75 12                	jne    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d186:	89 c5                	mov    ebp,eax
c000d188:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d18d:	74 09                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18f:	40                   	inc    eax
c000d190:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d194:	89 cf                	mov    edi,ecx
c000d196:	eb d6                	jmp    c000d16e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d198:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d19d:	75 5b                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d19f:	80 fa 2e             	cmp    dl,0x2e
c000d1a2:	75 56                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1a8:	74 19                	je     c000d1c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1af:	74 53                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b1:	89 f9                	mov    ecx,edi
c000d1b3:	41                   	inc    ecx
c000d1b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1b7:	80 fa 2f             	cmp    dl,0x2f
c000d1ba:	74 f7                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1bc:	80 fa 5c             	cmp    dl,0x5c
c000d1bf:	74 f2                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c1:	eb d1                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1c8:	74 3a                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ca:	83 f8 03             	cmp    eax,0x3
c000d1cd:	74 c5                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1cf:	41                   	inc    ecx
c000d1d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d3:	80 fa 2f             	cmp    dl,0x2f
c000d1d6:	74 f7                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1d8:	80 fa 5c             	cmp    dl,0x5c
c000d1db:	74 f2                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dd:	48                   	dec    eax
c000d1de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e2:	75 06                	jne    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1e8:	eb f3                	jmp    c000d1dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1ee:	74 07                	je     c000d1f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f4:	48                   	dec    eax
c000d1f5:	eb f3                	jmp    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1f7:	40                   	inc    eax
c000d1f8:	eb 9a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fa:	80 fa 2f             	cmp    dl,0x2f
c000d1fd:	74 95                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1ff:	80 fa 5c             	cmp    dl,0x5c
c000d202:	74 90                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d204:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d207:	40                   	inc    eax
c000d208:	eb 8a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	53                   	push   ebx
c000d212:	e8 89 34 ff ff       	call   c00006a0 <strlen>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d21f:	75 26                	jne    c000d247 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d221:	83 ec 0c             	sub    esp,0xc
c000d224:	53                   	push   ebx
c000d225:	e8 76 34 ff ff       	call   c00006a0 <strlen>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d232:	74 26                	je     c000d25a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	53                   	push   ebx
c000d238:	e8 63 34 ff ff       	call   c00006a0 <strlen>
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d245:	eb c7                	jmp    c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d247:	83 ec 0c             	sub    esp,0xc
c000d24a:	53                   	push   ebx
c000d24b:	e8 50 34 ff ff       	call   c00006a0 <strlen>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d258:	74 c7                	je     c000d221 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d260:	5b                   	pop    ebx
c000d261:	5e                   	pop    esi
c000d262:	5f                   	pop    edi
c000d263:	5d                   	pop    ebp
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <File::File(char const*, Process*)>:
c000d266:	83 ec 0c             	sub    esp,0xc
c000d269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26d:	83 ec 08             	sub    esp,0x8
c000d270:	6a 00                	push   0x0
c000d272:	50                   	push   eax
c000d273:	e8 1a e3 ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000d280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d284:	89 10                	mov    DWORD PTR [eax],edx
c000d286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	83 c0 0d             	add    eax,0xd
c000d297:	83 ec 04             	sub    esp,0x4
c000d29a:	52                   	push   edx
c000d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29f:	50                   	push   eax
c000d2a0:	e8 17 fe ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2af:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2ce:	0f b6 c0             	movzx  eax,al
c000d2d1:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000d2d8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2de:	85 c0                	test   eax,eax
c000d2e0:	75 40                	jne    c000d322 <File::File(char const*, Process*)+0xbc>
c000d2e2:	83 ec 0c             	sub    esp,0xc
c000d2e5:	68 2c 4a 02 c0       	push   0xc0024a2c
c000d2ea:	e8 0c fa ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2fc:	0f b6 c0             	movzx  eax,al
c000d2ff:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000d306:	83 ec 0c             	sub    esp,0xc
c000d309:	50                   	push   eax
c000d30a:	e8 43 31 00 00       	call   c0010452 <LogicalDisk::mount()>
c000d30f:	83 c4 10             	add    esp,0x10
c000d312:	83 ec 0c             	sub    esp,0xc
c000d315:	68 a5 6b 02 c0       	push   0xc0026ba5
c000d31a:	e8 dc f9 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d31f:	83 c4 10             	add    esp,0x10
c000d322:	90                   	nop
c000d323:	83 c4 0c             	add    esp,0xc
c000d326:	c3                   	ret    
c000d327:	90                   	nop

c000d328 <File::open(FileOpenMode)>:
c000d328:	53                   	push   ebx
c000d329:	b8 0b 00 00 00       	mov    eax,0xb
c000d32e:	83 ec 08             	sub    esp,0x8
c000d331:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d335:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d33c:	80 fa 19             	cmp    dl,0x19
c000d33f:	77 40                	ja     c000d381 <File::open(FileOpenMode)+0x59>
c000d341:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000d348:	85 d2                	test   edx,edx
c000d34a:	74 35                	je     c000d381 <File::open(FileOpenMode)+0x59>
c000d34c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d352:	85 d2                	test   edx,edx
c000d354:	74 2b                	je     c000d381 <File::open(FileOpenMode)+0x59>
c000d356:	b8 06 00 00 00       	mov    eax,0x6
c000d35b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d35f:	75 20                	jne    c000d381 <File::open(FileOpenMode)+0x59>
c000d361:	8b 02                	mov    eax,DWORD PTR [edx]
c000d363:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36d:	51                   	push   ecx
c000d36e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d371:	51                   	push   ecx
c000d372:	52                   	push   edx
c000d373:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d376:	83 c4 10             	add    esp,0x10
c000d379:	85 c0                	test   eax,eax
c000d37b:	75 04                	jne    c000d381 <File::open(FileOpenMode)+0x59>
c000d37d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d381:	83 c4 08             	add    esp,0x8
c000d384:	5b                   	pop    ebx
c000d385:	c3                   	ret    

c000d386 <File::close()>:
c000d386:	53                   	push   ebx
c000d387:	b8 0b 00 00 00       	mov    eax,0xb
c000d38c:	83 ec 08             	sub    esp,0x8
c000d38f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d393:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d39a:	80 fa 19             	cmp    dl,0x19
c000d39d:	77 41                	ja     c000d3e0 <File::close()+0x5a>
c000d39f:	8b 1c 95 60 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd79a0]
c000d3a6:	85 db                	test   ebx,ebx
c000d3a8:	74 36                	je     c000d3e0 <File::close()+0x5a>
c000d3aa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3b1:	74 2d                	je     c000d3e0 <File::close()+0x5a>
c000d3b3:	b8 05 00 00 00       	mov    eax,0x5
c000d3b8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3bc:	74 22                	je     c000d3e0 <File::close()+0x5a>
c000d3be:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3c2:	8b 04 95 60 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd79a0]
c000d3c9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3cf:	53                   	push   ebx
c000d3d0:	53                   	push   ebx
c000d3d1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3d9:	50                   	push   eax
c000d3da:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	83 c4 08             	add    esp,0x8
c000d3e3:	5b                   	pop    ebx
c000d3e4:	c3                   	ret    
c000d3e5:	90                   	nop

c000d3e6 <File::seek(unsigned long long)>:
c000d3e6:	56                   	push   esi
c000d3e7:	53                   	push   ebx
c000d3e8:	b8 0b 00 00 00       	mov    eax,0xb
c000d3ed:	51                   	push   ecx
c000d3ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3f6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d3fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d401:	80 fa 19             	cmp    dl,0x19
c000d404:	77 31                	ja     c000d437 <File::seek(unsigned long long)+0x51>
c000d406:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000d40d:	85 d2                	test   edx,edx
c000d40f:	74 26                	je     c000d437 <File::seek(unsigned long long)+0x51>
c000d411:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d417:	85 d2                	test   edx,edx
c000d419:	74 1c                	je     c000d437 <File::seek(unsigned long long)+0x51>
c000d41b:	b8 05 00 00 00       	mov    eax,0x5
c000d420:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d424:	74 11                	je     c000d437 <File::seek(unsigned long long)+0x51>
c000d426:	8b 02                	mov    eax,DWORD PTR [edx]
c000d428:	53                   	push   ebx
c000d429:	51                   	push   ecx
c000d42a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d430:	52                   	push   edx
c000d431:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	5a                   	pop    edx
c000d438:	5b                   	pop    ebx
c000d439:	5e                   	pop    esi
c000d43a:	c3                   	ret    
c000d43b:	90                   	nop

c000d43c <File::tell(unsigned long long*)>:
c000d43c:	83 ec 0c             	sub    esp,0xc
c000d43f:	b8 0b 00 00 00       	mov    eax,0xb
c000d444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d448:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d44f:	80 fa 19             	cmp    dl,0x19
c000d452:	77 34                	ja     c000d488 <File::tell(unsigned long long*)+0x4c>
c000d454:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000d45b:	85 d2                	test   edx,edx
c000d45d:	74 29                	je     c000d488 <File::tell(unsigned long long*)+0x4c>
c000d45f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d465:	85 d2                	test   edx,edx
c000d467:	74 1f                	je     c000d488 <File::tell(unsigned long long*)+0x4c>
c000d469:	b8 05 00 00 00       	mov    eax,0x5
c000d46e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d472:	74 14                	je     c000d488 <File::tell(unsigned long long*)+0x4c>
c000d474:	50                   	push   eax
c000d475:	8b 02                	mov    eax,DWORD PTR [edx]
c000d477:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d47b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d481:	52                   	push   edx
c000d482:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d485:	83 c4 10             	add    esp,0x10
c000d488:	83 c4 0c             	add    esp,0xc
c000d48b:	c3                   	ret    

c000d48c <File::rewind()>:
c000d48c:	83 ec 10             	sub    esp,0x10
c000d48f:	6a 00                	push   0x0
c000d491:	6a 00                	push   0x0
c000d493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d497:	e8 4a ff ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c000d49c:	83 c4 1c             	add    esp,0x1c
c000d49f:	c3                   	ret    

c000d4a0 <File::unlink()>:
c000d4a0:	83 ec 0c             	sub    esp,0xc
c000d4a3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4b3:	80 f9 19             	cmp    cl,0x19
c000d4b6:	77 2f                	ja     c000d4e7 <File::unlink()+0x47>
c000d4b8:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d4bf:	85 c9                	test   ecx,ecx
c000d4c1:	74 24                	je     c000d4e7 <File::unlink()+0x47>
c000d4c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4c9:	85 c9                	test   ecx,ecx
c000d4cb:	74 1a                	je     c000d4e7 <File::unlink()+0x47>
c000d4cd:	b8 06 00 00 00       	mov    eax,0x6
c000d4d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4d6:	75 0f                	jne    c000d4e7 <File::unlink()+0x47>
c000d4d8:	83 c2 0d             	add    edx,0xd
c000d4db:	50                   	push   eax
c000d4dc:	50                   	push   eax
c000d4dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4df:	52                   	push   edx
c000d4e0:	51                   	push   ecx
c000d4e1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4e4:	83 c4 10             	add    esp,0x10
c000d4e7:	83 c4 0c             	add    esp,0xc
c000d4ea:	c3                   	ret    
c000d4eb:	90                   	nop

c000d4ec <File::rename(char const*)>:
c000d4ec:	83 ec 0c             	sub    esp,0xc
c000d4ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d4f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4ff:	80 f9 19             	cmp    cl,0x19
c000d502:	77 32                	ja     c000d536 <File::rename(char const*)+0x4a>
c000d504:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d50b:	85 c9                	test   ecx,ecx
c000d50d:	74 27                	je     c000d536 <File::rename(char const*)+0x4a>
c000d50f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d515:	85 c9                	test   ecx,ecx
c000d517:	74 1d                	je     c000d536 <File::rename(char const*)+0x4a>
c000d519:	b8 06 00 00 00       	mov    eax,0x6
c000d51e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d522:	75 12                	jne    c000d536 <File::rename(char const*)+0x4a>
c000d524:	83 c2 0d             	add    edx,0xd
c000d527:	50                   	push   eax
c000d528:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d52a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d52e:	52                   	push   edx
c000d52f:	51                   	push   ecx
c000d530:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d533:	83 c4 10             	add    esp,0x10
c000d536:	83 c4 0c             	add    esp,0xc
c000d539:	c3                   	ret    

c000d53a <File::chfatattr(unsigned char, unsigned char)>:
c000d53a:	57                   	push   edi
c000d53b:	b8 0b 00 00 00       	mov    eax,0xb
c000d540:	56                   	push   esi
c000d541:	53                   	push   ebx
c000d542:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d546:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d54a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d551:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d555:	80 f9 19             	cmp    cl,0x19
c000d558:	77 37                	ja     c000d591 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d55a:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d561:	85 c9                	test   ecx,ecx
c000d563:	74 2c                	je     c000d591 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d565:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d56b:	85 c9                	test   ecx,ecx
c000d56d:	74 22                	je     c000d591 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d56f:	b8 06 00 00 00       	mov    eax,0x6
c000d574:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d578:	75 17                	jne    c000d591 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d57c:	89 f0                	mov    eax,esi
c000d57e:	83 c2 0d             	add    edx,0xd
c000d581:	0f b6 f0             	movzx  esi,al
c000d584:	0f b6 db             	movzx  ebx,bl
c000d587:	56                   	push   esi
c000d588:	53                   	push   ebx
c000d589:	52                   	push   edx
c000d58a:	51                   	push   ecx
c000d58b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d58e:	83 c4 10             	add    esp,0x10
c000d591:	5b                   	pop    ebx
c000d592:	5e                   	pop    esi
c000d593:	5f                   	pop    edi
c000d594:	c3                   	ret    
c000d595:	90                   	nop

c000d596 <File::exists()>:
c000d596:	83 ec 0c             	sub    esp,0xc
c000d599:	31 c0                	xor    eax,eax
c000d59b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d59f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5a6:	80 f9 19             	cmp    cl,0x19
c000d5a9:	77 24                	ja     c000d5cf <File::exists()+0x39>
c000d5ab:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d5b2:	85 c9                	test   ecx,ecx
c000d5b4:	74 19                	je     c000d5cf <File::exists()+0x39>
c000d5b6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5bc:	85 c9                	test   ecx,ecx
c000d5be:	74 0f                	je     c000d5cf <File::exists()+0x39>
c000d5c0:	83 c2 0d             	add    edx,0xd
c000d5c3:	50                   	push   eax
c000d5c4:	50                   	push   eax
c000d5c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5c7:	52                   	push   edx
c000d5c8:	51                   	push   ecx
c000d5c9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5cc:	83 c4 10             	add    esp,0x10
c000d5cf:	83 c4 0c             	add    esp,0xc
c000d5d2:	c3                   	ret    
c000d5d3:	90                   	nop

c000d5d4 <File::stat(unsigned long long*, bool*)>:
c000d5d4:	56                   	push   esi
c000d5d5:	53                   	push   ebx
c000d5d6:	50                   	push   eax
c000d5d7:	b8 0b 00 00 00       	mov    eax,0xb
c000d5dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5ef:	80 f9 19             	cmp    cl,0x19
c000d5f2:	77 3d                	ja     c000d631 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5f4:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d5fb:	85 c9                	test   ecx,ecx
c000d5fd:	74 32                	je     c000d631 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d605:	85 c9                	test   ecx,ecx
c000d607:	74 28                	je     c000d631 <File::stat(unsigned long long*, bool*)+0x5d>
c000d609:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d60b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d60f:	74 13                	je     c000d624 <File::stat(unsigned long long*, bool*)+0x50>
c000d611:	83 ec 04             	sub    esp,0x4
c000d614:	56                   	push   esi
c000d615:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d61b:	51                   	push   ecx
c000d61c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d61f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d622:	eb 0a                	jmp    c000d62e <File::stat(unsigned long long*, bool*)+0x5a>
c000d624:	53                   	push   ebx
c000d625:	83 c2 0d             	add    edx,0xd
c000d628:	56                   	push   esi
c000d629:	52                   	push   edx
c000d62a:	51                   	push   ecx
c000d62b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d62e:	83 c4 10             	add    esp,0x10
c000d631:	5a                   	pop    edx
c000d632:	5b                   	pop    ebx
c000d633:	5e                   	pop    esi
c000d634:	c3                   	ret    

c000d635 <Fs::setcwd(Process*, char*)>:
c000d635:	55                   	push   ebp
c000d636:	57                   	push   edi
c000d637:	56                   	push   esi
c000d638:	53                   	push   ebx
c000d639:	81 ec 20 02 00 00    	sub    esp,0x220
c000d63f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d646:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d64c:	57                   	push   edi
c000d64d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d654:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d658:	56                   	push   esi
c000d659:	e8 5e fa ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d65e:	89 34 24             	mov    DWORD PTR [esp],esi
c000d661:	e8 3a 30 ff ff       	call   c00006a0 <strlen>
c000d666:	83 c4 10             	add    esp,0x10
c000d669:	83 f8 02             	cmp    eax,0x2
c000d66c:	77 43                	ja     c000d6b1 <Fs::setcwd(Process*, char*)+0x7c>
c000d66e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d673:	83 eb 41             	sub    ebx,0x41
c000d676:	8b 04 9d 60 86 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd79a0]
c000d67d:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d684:	75 45                	jne    c000d6cb <Fs::setcwd(Process*, char*)+0x96>
c000d686:	83 ec 0c             	sub    esp,0xc
c000d689:	68 04 4a 02 c0       	push   0xc0024a04
c000d68e:	e8 68 f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d693:	5a                   	pop    edx
c000d694:	ff 34 9d 60 86 02 c0 	push   DWORD PTR [ebx*4-0x3ffd79a0]
c000d69b:	e8 b2 2d 00 00       	call   c0010452 <LogicalDisk::mount()>
c000d6a0:	c7 04 24 a5 6b 02 c0 	mov    DWORD PTR [esp],0xc0026ba5
c000d6a7:	e8 4f f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d6ac:	83 c4 10             	add    esp,0x10
c000d6af:	eb 1a                	jmp    c000d6cb <Fs::setcwd(Process*, char*)+0x96>
c000d6b1:	83 ec 0c             	sub    esp,0xc
c000d6b4:	56                   	push   esi
c000d6b5:	e8 e6 2f ff ff       	call   c00006a0 <strlen>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	83 f8 03             	cmp    eax,0x3
c000d6c0:	75 42                	jne    c000d704 <Fs::setcwd(Process*, char*)+0xcf>
c000d6c2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d6c7:	75 3b                	jne    c000d704 <Fs::setcwd(Process*, char*)+0xcf>
c000d6c9:	eb a3                	jmp    c000d66e <Fs::setcwd(Process*, char*)+0x39>
c000d6cb:	b8 03 00 00 00       	mov    eax,0x3
c000d6d0:	83 fb 19             	cmp    ebx,0x19
c000d6d3:	0f 87 c6 00 00 00    	ja     c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d6d9:	8b 14 9d 60 86 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd79a0]
c000d6e0:	b8 05 00 00 00       	mov    eax,0x5
c000d6e5:	85 d2                	test   edx,edx
c000d6e7:	0f 84 b2 00 00 00    	je     c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d6ed:	b8 06 00 00 00       	mov    eax,0x6
c000d6f2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6f9:	0f 85 92 00 00 00    	jne    c000d791 <Fs::setcwd(Process*, char*)+0x15c>
c000d6ff:	e9 9b 00 00 00       	jmp    c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d704:	83 ec 0c             	sub    esp,0xc
c000d707:	68 14 01 00 00       	push   0x114
c000d70c:	e8 fe c2 ff ff       	call   c0009a0f <malloc>
c000d711:	83 c4 0c             	add    esp,0xc
c000d714:	89 c3                	mov    ebx,eax
c000d716:	55                   	push   ebp
c000d717:	56                   	push   esi
c000d718:	50                   	push   eax
c000d719:	e8 48 fb ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000d71e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d723:	83 c4 0c             	add    esp,0xc
c000d726:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d72a:	50                   	push   eax
c000d72b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d72f:	50                   	push   eax
c000d730:	53                   	push   ebx
c000d731:	e8 9e fe ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	83 f8 02             	cmp    eax,0x2
c000d73c:	74 04                	je     c000d742 <Fs::setcwd(Process*, char*)+0x10d>
c000d73e:	85 c0                	test   eax,eax
c000d740:	74 1c                	je     c000d75e <Fs::setcwd(Process*, char*)+0x129>
c000d742:	b8 01 00 00 00       	mov    eax,0x1
c000d747:	85 db                	test   ebx,ebx
c000d749:	74 54                	je     c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d74b:	83 ec 0c             	sub    esp,0xc
c000d74e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d750:	53                   	push   ebx
c000d751:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	b8 01 00 00 00       	mov    eax,0x1
c000d75c:	eb 41                	jmp    c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d75e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d763:	75 1c                	jne    c000d781 <Fs::setcwd(Process*, char*)+0x14c>
c000d765:	b8 02 00 00 00       	mov    eax,0x2
c000d76a:	85 db                	test   ebx,ebx
c000d76c:	74 31                	je     c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d76e:	83 ec 0c             	sub    esp,0xc
c000d771:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d773:	53                   	push   ebx
c000d774:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	b8 02 00 00 00       	mov    eax,0x2
c000d77f:	eb 1e                	jmp    c000d79f <Fs::setcwd(Process*, char*)+0x16a>
c000d781:	85 db                	test   ebx,ebx
c000d783:	74 0c                	je     c000d791 <Fs::setcwd(Process*, char*)+0x15c>
c000d785:	83 ec 0c             	sub    esp,0xc
c000d788:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d78a:	53                   	push   ebx
c000d78b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d78e:	83 c4 10             	add    esp,0x10
c000d791:	50                   	push   eax
c000d792:	50                   	push   eax
c000d793:	56                   	push   esi
c000d794:	57                   	push   edi
c000d795:	e8 a6 2f ff ff       	call   c0000740 <strcpy>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	31 c0                	xor    eax,eax
c000d79f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d7a5:	5b                   	pop    ebx
c000d7a6:	5e                   	pop    esi
c000d7a7:	5f                   	pop    edi
c000d7a8:	5d                   	pop    ebp
c000d7a9:	c3                   	ret    

c000d7aa <Directory::Directory(char const*, Process*)>:
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b1:	83 ec 08             	sub    esp,0x8
c000d7b4:	6a 00                	push   0x0
c000d7b6:	50                   	push   eax
c000d7b7:	e8 d6 dd ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	ba 0c 4b 02 c0       	mov    edx,0xc0024b0c
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	89 10                	mov    DWORD PTR [eax],edx
c000d7ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d8:	83 c0 0d             	add    eax,0xd
c000d7db:	83 ec 04             	sub    esp,0x4
c000d7de:	52                   	push   edx
c000d7df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e3:	50                   	push   eax
c000d7e4:	e8 d3 f8 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d7f3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d812:	0f b6 c0             	movzx  eax,al
c000d815:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000d81c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d822:	85 c0                	test   eax,eax
c000d824:	75 40                	jne    c000d866 <Directory::Directory(char const*, Process*)+0xbc>
c000d826:	83 ec 0c             	sub    esp,0xc
c000d829:	68 54 4a 02 c0       	push   0xc0024a54
c000d82e:	e8 c8 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d840:	0f b6 c0             	movzx  eax,al
c000d843:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c000d84a:	83 ec 0c             	sub    esp,0xc
c000d84d:	50                   	push   eax
c000d84e:	e8 ff 2b 00 00       	call   c0010452 <LogicalDisk::mount()>
c000d853:	83 c4 10             	add    esp,0x10
c000d856:	83 ec 0c             	sub    esp,0xc
c000d859:	68 a5 6b 02 c0       	push   0xc0026ba5
c000d85e:	e8 98 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	90                   	nop
c000d867:	83 c4 0c             	add    esp,0xc
c000d86a:	c3                   	ret    
c000d86b:	90                   	nop

c000d86c <Directory::open()>:
c000d86c:	53                   	push   ebx
c000d86d:	b8 0b 00 00 00       	mov    eax,0xb
c000d872:	83 ec 08             	sub    esp,0x8
c000d875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d879:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d880:	80 fa 19             	cmp    dl,0x19
c000d883:	77 3d                	ja     c000d8c2 <Directory::open()+0x56>
c000d885:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000d88c:	85 d2                	test   edx,edx
c000d88e:	74 32                	je     c000d8c2 <Directory::open()+0x56>
c000d890:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d896:	85 d2                	test   edx,edx
c000d898:	74 28                	je     c000d8c2 <Directory::open()+0x56>
c000d89a:	b8 06 00 00 00       	mov    eax,0x6
c000d89f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d8a3:	75 1d                	jne    c000d8c2 <Directory::open()+0x56>
c000d8a5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d8ab:	50                   	push   eax
c000d8ac:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8ae:	51                   	push   ecx
c000d8af:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d8b2:	51                   	push   ecx
c000d8b3:	52                   	push   edx
c000d8b4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d8b7:	83 c4 10             	add    esp,0x10
c000d8ba:	85 c0                	test   eax,eax
c000d8bc:	75 04                	jne    c000d8c2 <Directory::open()+0x56>
c000d8be:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d8c2:	83 c4 08             	add    esp,0x8
c000d8c5:	5b                   	pop    ebx
c000d8c6:	c3                   	ret    
c000d8c7:	90                   	nop

c000d8c8 <Directory::close()>:
c000d8c8:	53                   	push   ebx
c000d8c9:	b8 0b 00 00 00       	mov    eax,0xb
c000d8ce:	83 ec 08             	sub    esp,0x8
c000d8d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8d5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d8dc:	80 fa 19             	cmp    dl,0x19
c000d8df:	77 41                	ja     c000d922 <Directory::close()+0x5a>
c000d8e1:	8b 1c 95 60 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd79a0]
c000d8e8:	85 db                	test   ebx,ebx
c000d8ea:	74 36                	je     c000d922 <Directory::close()+0x5a>
c000d8ec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d8f3:	74 2d                	je     c000d922 <Directory::close()+0x5a>
c000d8f5:	b8 05 00 00 00       	mov    eax,0x5
c000d8fa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d8fe:	74 22                	je     c000d922 <Directory::close()+0x5a>
c000d900:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d904:	8b 04 95 60 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd79a0]
c000d90b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d911:	53                   	push   ebx
c000d912:	53                   	push   ebx
c000d913:	8b 10                	mov    edx,DWORD PTR [eax]
c000d915:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d91b:	50                   	push   eax
c000d91c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d91f:	83 c4 10             	add    esp,0x10
c000d922:	83 c4 08             	add    esp,0x8
c000d925:	5b                   	pop    ebx
c000d926:	c3                   	ret    
c000d927:	90                   	nop

c000d928 <Directory::unlink()>:
c000d928:	83 ec 0c             	sub    esp,0xc
c000d92b:	b8 0b 00 00 00       	mov    eax,0xb
c000d930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d934:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d93b:	80 f9 19             	cmp    cl,0x19
c000d93e:	77 2f                	ja     c000d96f <Directory::unlink()+0x47>
c000d940:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d947:	85 c9                	test   ecx,ecx
c000d949:	74 24                	je     c000d96f <Directory::unlink()+0x47>
c000d94b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d951:	85 c9                	test   ecx,ecx
c000d953:	74 1a                	je     c000d96f <Directory::unlink()+0x47>
c000d955:	b8 06 00 00 00       	mov    eax,0x6
c000d95a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d95e:	75 0f                	jne    c000d96f <Directory::unlink()+0x47>
c000d960:	83 c2 0d             	add    edx,0xd
c000d963:	50                   	push   eax
c000d964:	50                   	push   eax
c000d965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d967:	52                   	push   edx
c000d968:	51                   	push   ecx
c000d969:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	83 c4 0c             	add    esp,0xc
c000d972:	c3                   	ret    
c000d973:	90                   	nop

c000d974 <Directory::rename(char const*)>:
c000d974:	83 ec 0c             	sub    esp,0xc
c000d977:	b8 0b 00 00 00       	mov    eax,0xb
c000d97c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d980:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d987:	80 f9 19             	cmp    cl,0x19
c000d98a:	77 32                	ja     c000d9be <Directory::rename(char const*)+0x4a>
c000d98c:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d993:	85 c9                	test   ecx,ecx
c000d995:	74 27                	je     c000d9be <Directory::rename(char const*)+0x4a>
c000d997:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d99d:	85 c9                	test   ecx,ecx
c000d99f:	74 1d                	je     c000d9be <Directory::rename(char const*)+0x4a>
c000d9a1:	b8 06 00 00 00       	mov    eax,0x6
c000d9a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9aa:	75 12                	jne    c000d9be <Directory::rename(char const*)+0x4a>
c000d9ac:	83 c2 0d             	add    edx,0xd
c000d9af:	50                   	push   eax
c000d9b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9b6:	52                   	push   edx
c000d9b7:	51                   	push   ecx
c000d9b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	83 c4 0c             	add    esp,0xc
c000d9c1:	c3                   	ret    

c000d9c2 <Directory::exists()>:
c000d9c2:	83 ec 0c             	sub    esp,0xc
c000d9c5:	31 c0                	xor    eax,eax
c000d9c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9d2:	80 f9 19             	cmp    cl,0x19
c000d9d5:	77 24                	ja     c000d9fb <Directory::exists()+0x39>
c000d9d7:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000d9de:	85 c9                	test   ecx,ecx
c000d9e0:	74 19                	je     c000d9fb <Directory::exists()+0x39>
c000d9e2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9e8:	85 c9                	test   ecx,ecx
c000d9ea:	74 0f                	je     c000d9fb <Directory::exists()+0x39>
c000d9ec:	83 c2 0d             	add    edx,0xd
c000d9ef:	50                   	push   eax
c000d9f0:	50                   	push   eax
c000d9f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9f3:	52                   	push   edx
c000d9f4:	51                   	push   ecx
c000d9f5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	83 c4 0c             	add    esp,0xc
c000d9fe:	c3                   	ret    
c000d9ff:	90                   	nop

c000da00 <Directory::read(dirent*)>:
c000da00:	83 ec 1c             	sub    esp,0x1c
c000da03:	b8 0b 00 00 00       	mov    eax,0xb
c000da08:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da0c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000da13:	80 fa 19             	cmp    dl,0x19
c000da16:	77 30                	ja     c000da48 <Directory::read(dirent*)+0x48>
c000da18:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000da1f:	85 d2                	test   edx,edx
c000da21:	74 25                	je     c000da48 <Directory::read(dirent*)+0x48>
c000da23:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da2a:	74 1c                	je     c000da48 <Directory::read(dirent*)+0x48>
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da31:	8d 54 24 18          	lea    edx,[esp+0x18]
c000da35:	52                   	push   edx
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	6a 00                	push   0x0
c000da3c:	68 10 01 00 00       	push   0x110
c000da41:	51                   	push   ecx
c000da42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da45:	83 c4 20             	add    esp,0x20
c000da48:	83 c4 1c             	add    esp,0x1c
c000da4b:	c3                   	ret    

c000da4c <Directory::create()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	b8 0b 00 00 00       	mov    eax,0xb
c000da54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da5f:	80 f9 19             	cmp    cl,0x19
c000da62:	77 2f                	ja     c000da93 <Directory::create()+0x47>
c000da64:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c000da6b:	85 c9                	test   ecx,ecx
c000da6d:	74 24                	je     c000da93 <Directory::create()+0x47>
c000da6f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da75:	85 c9                	test   ecx,ecx
c000da77:	74 1a                	je     c000da93 <Directory::create()+0x47>
c000da79:	b8 06 00 00 00       	mov    eax,0x6
c000da7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da82:	75 0f                	jne    c000da93 <Directory::create()+0x47>
c000da84:	83 c2 0d             	add    edx,0xd
c000da87:	50                   	push   eax
c000da88:	50                   	push   eax
c000da89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da8b:	52                   	push   edx
c000da8c:	51                   	push   ecx
c000da8d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000da90:	83 c4 10             	add    esp,0x10
c000da93:	83 c4 0c             	add    esp,0xc
c000da96:	c3                   	ret    
c000da97:	90                   	nop

c000da98 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000da98:	b8 0a 00 00 00       	mov    eax,0xa
c000da9d:	c3                   	ret    
c000da9e:	66 90                	xchg   ax,ax

c000daa0 <Bus::Bus(char const*)>:
c000daa0:	83 ec 0c             	sub    esp,0xc
c000daa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa7:	83 ec 08             	sub    esp,0x8
c000daaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daae:	50                   	push   eax
c000daaf:	e8 8a 09 00 00       	call   c000e43e <Device::Device(char const*)>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	ba 28 4b 02 c0       	mov    edx,0xc0024b28
c000dabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac0:	89 10                	mov    DWORD PTR [eax],edx
c000dac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dad0:	90                   	nop
c000dad1:	83 c4 0c             	add    esp,0xc
c000dad4:	c3                   	ret    
c000dad5:	90                   	nop
c000dad6:	66 90                	xchg   ax,ax

c000dad8 <Bus::~Bus()>:
c000dad8:	83 ec 0c             	sub    esp,0xc
c000dadb:	ba 28 4b 02 c0       	mov    edx,0xc0024b28
c000dae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae4:	89 10                	mov    DWORD PTR [eax],edx
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	83 ec 0c             	sub    esp,0xc
c000daed:	50                   	push   eax
c000daee:	e8 15 06 00 00       	call   c000e108 <Device::~Device()>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	90                   	nop
c000daf7:	83 c4 0c             	add    esp,0xc
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <Bus::~Bus()>:
c000dafc:	83 ec 0c             	sub    esp,0xc
c000daff:	83 ec 0c             	sub    esp,0xc
c000db02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db06:	e8 cd ff ff ff       	call   c000dad8 <Bus::~Bus()>
c000db0b:	83 c4 10             	add    esp,0x10
c000db0e:	83 ec 08             	sub    esp,0x8
c000db11:	68 58 01 00 00       	push   0x158
c000db16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1a:	e8 fb f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	83 c4 0c             	add    esp,0xc
c000db25:	c3                   	ret    
c000db26:	66 90                	xchg   ax,ax

c000db28 <Buzzer::Buzzer(char const*)>:
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2f:	83 ec 08             	sub    esp,0x8
c000db32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db36:	50                   	push   eax
c000db37:	e8 02 09 00 00       	call   c000e43e <Device::Device(char const*)>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	ba 54 4b 02 c0       	mov    edx,0xc0024b54
c000db44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db48:	89 10                	mov    DWORD PTR [eax],edx
c000db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000db58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000db66:	90                   	nop
c000db67:	83 c4 0c             	add    esp,0xc
c000db6a:	c3                   	ret    
c000db6b:	90                   	nop

c000db6c <Buzzer::~Buzzer()>:
c000db6c:	83 ec 0c             	sub    esp,0xc
c000db6f:	ba 54 4b 02 c0       	mov    edx,0xc0024b54
c000db74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db78:	89 10                	mov    DWORD PTR [eax],edx
c000db7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 81 05 00 00       	call   c000e108 <Device::~Device()>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	90                   	nop
c000db8b:	83 c4 0c             	add    esp,0xc
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <Buzzer::~Buzzer()>:
c000db90:	83 ec 0c             	sub    esp,0xc
c000db93:	83 ec 0c             	sub    esp,0xc
c000db96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9a:	e8 cd ff ff ff       	call   c000db6c <Buzzer::~Buzzer()>
c000db9f:	83 c4 10             	add    esp,0x10
c000dba2:	83 ec 08             	sub    esp,0x8
c000dba5:	68 5c 01 00 00       	push   0x15c
c000dbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbae:	e8 67 f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dbb3:	83 c4 10             	add    esp,0x10
c000dbb6:	83 c4 0c             	add    esp,0xc
c000dbb9:	c3                   	ret    

c000dbba <Buzzer::stop()>:
c000dbba:	83 ec 14             	sub    esp,0x14
c000dbbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc3:	6a 00                	push   0x0
c000dbc5:	50                   	push   eax
c000dbc6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbc9:	83 c4 1c             	add    esp,0x1c
c000dbcc:	c3                   	ret    

c000dbcd <beepThread(void*)>:
c000dbcd:	53                   	push   ebx
c000dbce:	83 ec 08             	sub    esp,0x8
c000dbd1:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000dbd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbda:	48                   	dec    eax
c000dbdb:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000dbe0:	75 02                	jne    c000dbe4 <beepThread(void*)+0x17>
c000dbe2:	fb                   	sti    
c000dbe3:	90                   	nop
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dbee:	50                   	push   eax
c000dbef:	e8 2c ae 00 00       	call   c0018a20 <milliTenthSleep(unsigned int)>
c000dbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbf7:	e8 be ff ff ff       	call   c000dbba <Buzzer::stop()>
c000dbfc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dc04:	83 c4 18             	add    esp,0x18
c000dc07:	5b                   	pop    ebx
c000dc08:	e9 13 ad 00 00       	jmp    c0018920 <blockTask(TaskState)>
c000dc0d:	90                   	nop

c000dc0e <Buzzer::beep(int, int, bool)>:
c000dc0e:	57                   	push   edi
c000dc0f:	56                   	push   esi
c000dc10:	53                   	push   ebx
c000dc11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dc1d:	50                   	push   eax
c000dc1e:	50                   	push   eax
c000dc1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc25:	53                   	push   ebx
c000dc26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc29:	83 c4 10             	add    esp,0x10
c000dc2c:	89 f8                	mov    eax,edi
c000dc2e:	84 c0                	test   al,al
c000dc30:	74 1e                	je     c000dc50 <Buzzer::beep(int, int, bool)+0x42>
c000dc32:	83 ec 0c             	sub    esp,0xc
c000dc35:	6b f6 0a             	imul   esi,esi,0xa
c000dc38:	56                   	push   esi
c000dc39:	e8 e2 ad 00 00       	call   c0018a20 <milliTenthSleep(unsigned int)>
c000dc3e:	83 c4 10             	add    esp,0x10
c000dc41:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc45:	5b                   	pop    ebx
c000dc46:	5e                   	pop    esi
c000dc47:	5f                   	pop    edi
c000dc48:	e9 6d ff ff ff       	jmp    c000dbba <Buzzer::stop()>
c000dc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc50:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dc56:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000dc5b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dc63:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc67:	c7 44 24 14 cd db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dbcd
c000dc6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc73:	5b                   	pop    ebx
c000dc74:	5e                   	pop    esi
c000dc75:	5f                   	pop    edi
c000dc76:	e9 91 a8 00 00       	jmp    c001850c <Process::createThread(void (*)(void*), void*, int)>
c000dc7b:	90                   	nop

c000dc7c <User::loadClockSettings(int)>:
c000dc7c:	53                   	push   ebx
c000dc7d:	83 ec 14             	sub    esp,0x14
c000dc80:	68 14 01 00 00       	push   0x114
c000dc85:	e8 85 bd ff ff       	call   c0009a0f <malloc>
c000dc8a:	83 c4 0c             	add    esp,0xc
c000dc8d:	89 c3                	mov    ebx,eax
c000dc8f:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c000dc95:	68 7c 4b 02 c0       	push   0xc0024b7c
c000dc9a:	50                   	push   eax
c000dc9b:	e8 c6 f5 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000dca0:	58                   	pop    eax
c000dca1:	5a                   	pop    edx
c000dca2:	6a 01                	push   0x1
c000dca4:	53                   	push   ebx
c000dca5:	e8 7e f6 ff ff       	call   c000d328 <File::open(FileOpenMode)>
c000dcaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dcad:	e8 d4 f6 ff ff       	call   c000d386 <File::close()>
c000dcb2:	83 c4 10             	add    esp,0x10
c000dcb5:	85 db                	test   ebx,ebx
c000dcb7:	74 0f                	je     c000dcc8 <User::loadClockSettings(int)+0x4c>
c000dcb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dcbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dcc2:	83 c4 08             	add    esp,0x8
c000dcc5:	5b                   	pop    ebx
c000dcc6:	ff e0                	jmp    eax
c000dcc8:	83 c4 08             	add    esp,0x8
c000dccb:	5b                   	pop    ebx
c000dccc:	c3                   	ret    
c000dccd:	90                   	nop

c000dcce <Clock::Clock(char const*)>:
c000dcce:	83 ec 0c             	sub    esp,0xc
c000dcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd5:	83 ec 08             	sub    esp,0x8
c000dcd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcdc:	50                   	push   eax
c000dcdd:	e8 5c 07 00 00       	call   c000e43e <Device::Device(char const*)>
c000dce2:	83 c4 10             	add    esp,0x10
c000dce5:	ba a4 4b 02 c0       	mov    edx,0xc0024ba4
c000dcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcee:	89 10                	mov    DWORD PTR [eax],edx
c000dcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dcfe:	90                   	nop
c000dcff:	83 c4 0c             	add    esp,0xc
c000dd02:	c3                   	ret    
c000dd03:	90                   	nop

c000dd04 <Clock::~Clock()>:
c000dd04:	83 ec 0c             	sub    esp,0xc
c000dd07:	ba a4 4b 02 c0       	mov    edx,0xc0024ba4
c000dd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd10:	89 10                	mov    DWORD PTR [eax],edx
c000dd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd16:	83 ec 0c             	sub    esp,0xc
c000dd19:	50                   	push   eax
c000dd1a:	e8 e9 03 00 00       	call   c000e108 <Device::~Device()>
c000dd1f:	83 c4 10             	add    esp,0x10
c000dd22:	90                   	nop
c000dd23:	83 c4 0c             	add    esp,0xc
c000dd26:	c3                   	ret    
c000dd27:	90                   	nop

c000dd28 <Clock::~Clock()>:
c000dd28:	83 ec 0c             	sub    esp,0xc
c000dd2b:	83 ec 0c             	sub    esp,0xc
c000dd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd32:	e8 cd ff ff ff       	call   c000dd04 <Clock::~Clock()>
c000dd37:	83 c4 10             	add    esp,0x10
c000dd3a:	83 ec 08             	sub    esp,0x8
c000dd3d:	68 58 01 00 00       	push   0x158
c000dd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd46:	e8 cf ee ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	83 c4 0c             	add    esp,0xc
c000dd51:	c3                   	ret    

c000dd52 <Clock::timeInSecondsLocal()>:
c000dd52:	53                   	push   ebx
c000dd53:	83 ec 14             	sub    esp,0x14
c000dd56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd5c:	50                   	push   eax
c000dd5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd60:	0f b6 0d dc 81 02 c0 	movzx  ecx,BYTE PTR ds:0xc00281dc
c000dd67:	03 0d e0 81 02 c0    	add    ecx,DWORD PTR ds:0xc00281e0
c000dd6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd73:	89 cb                	mov    ebx,ecx
c000dd75:	c1 fb 1f             	sar    ebx,0x1f
c000dd78:	01 c8                	add    eax,ecx
c000dd7a:	11 da                	adc    edx,ebx
c000dd7c:	83 c4 10             	add    esp,0x10
c000dd7f:	31 c9                	xor    ecx,ecx
c000dd81:	80 3d dd 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281dd,0x0
c000dd88:	74 05                	je     c000dd8f <Clock::timeInSecondsLocal()+0x3d>
c000dd8a:	b9 08 07 00 00       	mov    ecx,0x708
c000dd8f:	31 db                	xor    ebx,ebx
c000dd91:	01 c8                	add    eax,ecx
c000dd93:	11 da                	adc    edx,ebx
c000dd95:	83 c4 08             	add    esp,0x8
c000dd98:	5b                   	pop    ebx
c000dd99:	c3                   	ret    

c000dd9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dd9a:	57                   	push   edi
c000dd9b:	56                   	push   esi
c000dd9c:	53                   	push   ebx
c000dd9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dda1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dda5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dda7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ddab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ddae:	0f b6 05 dc 81 02 c0 	movzx  eax,BYTE PTR ds:0xc00281dc
c000ddb5:	03 05 e0 81 02 c0    	add    eax,DWORD PTR ds:0xc00281e0
c000ddbb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ddc1:	99                   	cdq    
c000ddc2:	29 c6                	sub    esi,eax
c000ddc4:	19 d7                	sbb    edi,edx
c000ddc6:	89 f0                	mov    eax,esi
c000ddc8:	89 fa                	mov    edx,edi
c000ddca:	31 f6                	xor    esi,esi
c000ddcc:	80 3d dd 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281dd,0x0
c000ddd3:	74 05                	je     c000ddda <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ddd5:	be 08 07 00 00       	mov    esi,0x708
c000ddda:	31 ff                	xor    edi,edi
c000dddc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dde0:	29 f0                	sub    eax,esi
c000dde2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dde6:	19 fa                	sbb    edx,edi
c000dde8:	89 d8                	mov    eax,ebx
c000ddea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ddee:	5b                   	pop    ebx
c000ddef:	5e                   	pop    esi
c000ddf0:	5f                   	pop    edi
c000ddf1:	ff e0                	jmp    eax

c000ddf3 <datetimeToSeconds(datetime_t)>:
c000ddf3:	55                   	push   ebp
c000ddf4:	57                   	push   edi
c000ddf5:	56                   	push   esi
c000ddf6:	53                   	push   ebx
c000ddf7:	83 ec 14             	sub    esp,0x14
c000ddfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ddfe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000de02:	89 d3                	mov    ebx,edx
c000de04:	0f b6 c6             	movzx  eax,dh
c000de07:	c1 eb 10             	shr    ebx,0x10
c000de0a:	48                   	dec    eax
c000de0b:	66 81 eb 6c 07       	sub    bx,0x76c
c000de10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000de14:	0f b6 f5             	movzx  esi,ch
c000de17:	89 cf                	mov    edi,ecx
c000de19:	6b f6 3c             	imul   esi,esi,0x3c
c000de1c:	c1 ef 10             	shr    edi,0x10
c000de1f:	0f b6 c9             	movzx  ecx,cl
c000de22:	89 f8                	mov    eax,edi
c000de24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de2a:	0f b6 f8             	movzx  edi,al
c000de2d:	0f b6 d2             	movzx  edx,dl
c000de30:	01 fe                	add    esi,edi
c000de32:	01 f1                	add    ecx,esi
c000de34:	0f b7 f3             	movzx  esi,bx
c000de37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000de3b:	c1 f9 1f             	sar    ecx,0x1f
c000de3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000de43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000de4c:	8b 0c 8d e0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb420]
c000de53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000de57:	76 29                	jbe    c000de82 <datetimeToSeconds(datetime_t)+0x8f>
c000de59:	f6 c3 03             	test   bl,0x3
c000de5c:	75 24                	jne    c000de82 <datetimeToSeconds(datetime_t)+0x8f>
c000de5e:	31 d2                	xor    edx,edx
c000de60:	bf 64 00 00 00       	mov    edi,0x64
c000de65:	89 d8                	mov    eax,ebx
c000de67:	66 f7 f7             	div    di
c000de6a:	66 85 d2             	test   dx,dx
c000de6d:	75 12                	jne    c000de81 <datetimeToSeconds(datetime_t)+0x8e>
c000de6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000de75:	bf 90 01 00 00       	mov    edi,0x190
c000de7a:	99                   	cdq    
c000de7b:	f7 ff                	idiv   edi
c000de7d:	85 d2                	test   edx,edx
c000de7f:	75 01                	jne    c000de82 <datetimeToSeconds(datetime_t)+0x8f>
c000de81:	41                   	inc    ecx
c000de82:	66 83 fb 46          	cmp    bx,0x46
c000de86:	76 45                	jbe    c000decd <datetimeToSeconds(datetime_t)+0xda>
c000de88:	bb 46 00 00 00       	mov    ebx,0x46
c000de8d:	bf 64 00 00 00       	mov    edi,0x64
c000de92:	bd 90 01 00 00       	mov    ebp,0x190
c000de97:	b8 6d 01 00 00       	mov    eax,0x16d
c000de9c:	f6 c3 03             	test   bl,0x3
c000de9f:	75 23                	jne    c000dec4 <datetimeToSeconds(datetime_t)+0xd1>
c000dea1:	89 d8                	mov    eax,ebx
c000dea3:	99                   	cdq    
c000dea4:	f7 ff                	idiv   edi
c000dea6:	b8 6e 01 00 00       	mov    eax,0x16e
c000deab:	85 d2                	test   edx,edx
c000dead:	75 15                	jne    c000dec4 <datetimeToSeconds(datetime_t)+0xd1>
c000deaf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000deb5:	99                   	cdq    
c000deb6:	f7 fd                	idiv   ebp
c000deb8:	83 fa 01             	cmp    edx,0x1
c000debb:	19 c0                	sbb    eax,eax
c000debd:	f7 d0                	not    eax
c000debf:	05 6e 01 00 00       	add    eax,0x16e
c000dec4:	01 c1                	add    ecx,eax
c000dec6:	43                   	inc    ebx
c000dec7:	39 f3                	cmp    ebx,esi
c000dec9:	7c cc                	jl     c000de97 <datetimeToSeconds(datetime_t)+0xa4>
c000decb:	eb 35                	jmp    c000df02 <datetimeToSeconds(datetime_t)+0x10f>
c000decd:	74 33                	je     c000df02 <datetimeToSeconds(datetime_t)+0x10f>
c000decf:	b8 45 00 00 00       	mov    eax,0x45
c000ded4:	89 c2                	mov    edx,eax
c000ded6:	83 e2 03             	and    edx,0x3
c000ded9:	39 f0                	cmp    eax,esi
c000dedb:	7e 0f                	jle    c000deec <datetimeToSeconds(datetime_t)+0xf9>
c000dedd:	83 fa 01             	cmp    edx,0x1
c000dee0:	19 d2                	sbb    edx,edx
c000dee2:	48                   	dec    eax
c000dee3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000deea:	eb e8                	jmp    c000ded4 <datetimeToSeconds(datetime_t)+0xe1>
c000deec:	b8 6d 01 00 00       	mov    eax,0x16d
c000def1:	85 d2                	test   edx,edx
c000def3:	75 0b                	jne    c000df00 <datetimeToSeconds(datetime_t)+0x10d>
c000def5:	66 83 fb 01          	cmp    bx,0x1
c000def9:	19 c0                	sbb    eax,eax
c000defb:	05 6e 01 00 00       	add    eax,0x16e
c000df00:	29 c1                	sub    ecx,eax
c000df02:	b8 80 51 01 00       	mov    eax,0x15180
c000df07:	f7 e9                	imul   ecx
c000df09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000df0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000df11:	83 c4 14             	add    esp,0x14
c000df14:	5b                   	pop    ebx
c000df15:	5e                   	pop    esi
c000df16:	5f                   	pop    edi
c000df17:	5d                   	pop    ebp
c000df18:	c3                   	ret    
c000df19:	90                   	nop

c000df1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000df1a:	57                   	push   edi
c000df1b:	56                   	push   esi
c000df1c:	53                   	push   ebx
c000df1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df21:	8b 06                	mov    eax,DWORD PTR [esi]
c000df23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000df26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df2e:	e8 c0 fe ff ff       	call   c000ddf3 <datetimeToSeconds(datetime_t)>
c000df33:	59                   	pop    ecx
c000df34:	0f b6 0d dc 81 02 c0 	movzx  ecx,BYTE PTR ds:0xc00281dc
c000df3b:	5b                   	pop    ebx
c000df3c:	03 0d e0 81 02 c0    	add    ecx,DWORD PTR ds:0xc00281e0
c000df42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000df48:	89 cb                	mov    ebx,ecx
c000df4a:	c1 fb 1f             	sar    ebx,0x1f
c000df4d:	29 c8                	sub    eax,ecx
c000df4f:	19 da                	sbb    edx,ebx
c000df51:	31 c9                	xor    ecx,ecx
c000df53:	80 3d dd 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281dd,0x0
c000df5a:	74 05                	je     c000df61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000df5c:	b9 08 07 00 00       	mov    ecx,0x708
c000df61:	31 db                	xor    ebx,ebx
c000df63:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000df67:	29 c8                	sub    eax,ecx
c000df69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df6d:	19 da                	sbb    edx,ebx
c000df6f:	89 f8                	mov    eax,edi
c000df71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df75:	5b                   	pop    ebx
c000df76:	5e                   	pop    esi
c000df77:	5f                   	pop    edi
c000df78:	ff e0                	jmp    eax

c000df7a <secondsToDatetime(unsigned long long)>:
c000df7a:	55                   	push   ebp
c000df7b:	57                   	push   edi
c000df7c:	56                   	push   esi
c000df7d:	53                   	push   ebx
c000df7e:	83 ec 1c             	sub    esp,0x1c
c000df81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000df89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000df8d:	6a 00                	push   0x0
c000df8f:	68 80 51 01 00       	push   0x15180
c000df94:	55                   	push   ebp
c000df95:	57                   	push   edi
c000df96:	e8 49 48 01 00       	call   c00227e4 <__udivdi3>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dfa4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfa8:	6a 00                	push   0x0
c000dfaa:	68 80 51 01 00       	push   0x15180
c000dfaf:	55                   	push   ebp
c000dfb0:	57                   	push   edi
c000dfb1:	bf 10 0e 00 00       	mov    edi,0xe10
c000dfb6:	e8 29 49 01 00       	call   c00228e4 <__umoddi3>
c000dfbb:	83 c4 10             	add    esp,0x10
c000dfbe:	99                   	cdq    
c000dfbf:	f7 ff                	idiv   edi
c000dfc1:	bf 3c 00 00 00       	mov    edi,0x3c
c000dfc6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dfc9:	89 d0                	mov    eax,edx
c000dfcb:	99                   	cdq    
c000dfcc:	f7 ff                	idiv   edi
c000dfce:	85 db                	test   ebx,ebx
c000dfd0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dfd3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dfd6:	79 11                	jns    c000dfe9 <secondsToDatetime(unsigned long long)+0x6f>
c000dfd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dfdc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dfe2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dfe7:	eb 07                	jmp    c000dff0 <secondsToDatetime(unsigned long long)+0x76>
c000dfe9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dfee:	89 d8                	mov    eax,ebx
c000dff0:	bf b4 05 00 00       	mov    edi,0x5b4
c000dff5:	99                   	cdq    
c000dff6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dffb:	f7 f9                	idiv   ecx
c000dffd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e006:	31 d2                	xor    edx,edx
c000e008:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e010:	01 c3                	add    ebx,eax
c000e012:	89 d8                	mov    eax,ebx
c000e014:	f7 f1                	div    ecx
c000e016:	31 d2                	xor    edx,edx
c000e018:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e01b:	89 d8                	mov    eax,ebx
c000e01d:	f7 f7                	div    edi
c000e01f:	31 d2                	xor    edx,edx
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 d8                	mov    eax,ebx
c000e025:	f7 f5                	div    ebp
c000e027:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e02c:	29 c1                	sub    ecx,eax
c000e02e:	31 d2                	xor    edx,edx
c000e030:	89 c8                	mov    eax,ecx
c000e032:	f7 f5                	div    ebp
c000e034:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e039:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e03d:	31 d2                	xor    edx,edx
c000e03f:	89 c8                	mov    eax,ecx
c000e041:	f7 f5                	div    ebp
c000e043:	31 d2                	xor    edx,edx
c000e045:	01 c3                	add    ebx,eax
c000e047:	89 c8                	mov    eax,ecx
c000e049:	f7 f7                	div    edi
c000e04b:	bf 99 00 00 00       	mov    edi,0x99
c000e050:	29 c3                	sub    ebx,eax
c000e052:	31 d2                	xor    edx,edx
c000e054:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e05c:	29 c3                	sub    ebx,eax
c000e05e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e061:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e064:	bb 05 00 00 00       	mov    ebx,0x5
c000e069:	83 c1 02             	add    ecx,0x2
c000e06c:	89 c8                	mov    eax,ecx
c000e06e:	f7 f7                	div    edi
c000e070:	31 d2                	xor    edx,edx
c000e072:	89 c7                	mov    edi,eax
c000e074:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e07a:	83 c0 02             	add    eax,0x2
c000e07d:	f7 f3                	div    ebx
c000e07f:	89 eb                	mov    ebx,ebp
c000e081:	29 c3                	sub    ebx,eax
c000e083:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e089:	88 1e                	mov    BYTE PTR [esi],bl
c000e08b:	19 c0                	sbb    eax,eax
c000e08d:	31 d2                	xor    edx,edx
c000e08f:	83 e0 0c             	and    eax,0xc
c000e092:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e096:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e09e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e0a2:	83 f9 01             	cmp    ecx,0x1
c000e0a5:	0f 96 c2             	setbe  dl
c000e0a8:	41                   	inc    ecx
c000e0a9:	01 d0                	add    eax,edx
c000e0ab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e0ae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e0b2:	83 c4 1c             	add    esp,0x1c
c000e0b5:	89 f0                	mov    eax,esi
c000e0b7:	5b                   	pop    ebx
c000e0b8:	5e                   	pop    esi
c000e0b9:	5f                   	pop    edi
c000e0ba:	5d                   	pop    ebp
c000e0bb:	c2 04 00             	ret    0x4

c000e0be <Clock::timeInDatetimeLocal()>:
c000e0be:	53                   	push   ebx
c000e0bf:	83 ec 14             	sub    esp,0x14
c000e0c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0ca:	e8 83 fc ff ff       	call   c000dd52 <Clock::timeInSecondsLocal()>
c000e0cf:	83 c4 0c             	add    esp,0xc
c000e0d2:	52                   	push   edx
c000e0d3:	50                   	push   eax
c000e0d4:	53                   	push   ebx
c000e0d5:	e8 a0 fe ff ff       	call   c000df7a <secondsToDatetime(unsigned long long)>
c000e0da:	89 d8                	mov    eax,ebx
c000e0dc:	83 c4 14             	add    esp,0x14
c000e0df:	5b                   	pop    ebx
c000e0e0:	c2 04 00             	ret    0x4
c000e0e3:	90                   	nop

c000e0e4 <Device::hibernate()>:
c000e0e4:	c3                   	ret    
c000e0e5:	90                   	nop

c000e0e6 <Device::wake()>:
c000e0e6:	c3                   	ret    
c000e0e7:	90                   	nop

c000e0e8 <Device::detect()>:
c000e0e8:	c3                   	ret    
c000e0e9:	90                   	nop

c000e0ea <Device::disableLegacy()>:
c000e0ea:	c3                   	ret    
c000e0eb:	90                   	nop

c000e0ec <Device::powerSaving(PowerSavingLevel)>:
c000e0ec:	c3                   	ret    
c000e0ed:	90                   	nop

c000e0ee <DriverlessDevice::close(int, int, void*)>:
c000e0ee:	31 c0                	xor    eax,eax
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <DriverlessDevice::detect()>:
c000e0f2:	c3                   	ret    
c000e0f3:	90                   	nop

c000e0f4 <DriverlessDevice::open(int, int, void*)>:
c000e0f4:	83 ec 18             	sub    esp,0x18
c000e0f7:	68 10 4c 02 c0       	push   0xc0024c10
c000e0fc:	e8 c2 68 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000e101:	83 c8 ff             	or     eax,0xffffffff
c000e104:	83 c4 1c             	add    esp,0x1c
c000e107:	c3                   	ret    

c000e108 <Device::~Device()>:
c000e108:	ba 70 4c 02 c0       	mov    edx,0xc0024c70
c000e10d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e111:	89 10                	mov    DWORD PTR [eax],edx
c000e113:	90                   	nop
c000e114:	c3                   	ret    
c000e115:	90                   	nop

c000e116 <Device::~Device()>:
c000e116:	83 ec 0c             	sub    esp,0xc
c000e119:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e11d:	e8 e6 ff ff ff       	call   c000e108 <Device::~Device()>
c000e122:	83 c4 04             	add    esp,0x4
c000e125:	83 ec 08             	sub    esp,0x8
c000e128:	68 58 01 00 00       	push   0x158
c000e12d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e131:	e8 e4 ea ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e136:	83 c4 10             	add    esp,0x10
c000e139:	83 c4 0c             	add    esp,0xc
c000e13c:	c3                   	ret    
c000e13d:	90                   	nop

c000e13e <Device::findAndLoadDriver()>:
c000e13e:	c7 44 24 04 2e 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c2e
c000e146:	e9 b0 eb ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c000e14b:	90                   	nop

c000e14c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e14c:	57                   	push   edi
c000e14d:	b9 09 00 00 00       	mov    ecx,0x9
c000e152:	56                   	push   esi
c000e153:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e157:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e15b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e165:	81 c7 18 01 00 00    	add    edi,0x118
c000e16b:	fc                   	cld    
c000e16c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e16e:	5e                   	pop    esi
c000e16f:	5f                   	pop    edi
c000e170:	c3                   	ret    
c000e171:	90                   	nop

c000e172 <Device::preOpenACPI(void*, char*, char*)>:
c000e172:	57                   	push   edi
c000e173:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e178:	56                   	push   esi
c000e179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e17d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e181:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e18b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e191:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e197:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e19b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e19d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e1a2:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e1a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e1ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1ae:	5e                   	pop    esi
c000e1af:	5f                   	pop    edi
c000e1b0:	c3                   	ret    
c000e1b1:	90                   	nop

c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e1bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e1c2:	75 0b                	jne    c000e1cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e1cd:	eb 1e                	jmp    c000e1ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e1cf:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000e1d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e1da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e1e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e1e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e1ed:	ff e0                	jmp    eax
c000e1ef:	90                   	nop

c000e1f0 <Device::getParent()>:
c000e1f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1f4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e1fa:	c3                   	ret    
c000e1fb:	90                   	nop

c000e1fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e200:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e205:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e20c:	75 0b                	jne    c000e219 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e20e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e210:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e214:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e217:	eb 1e                	jmp    c000e237 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e219:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000e21e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e224:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e22a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e22c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e230:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e234:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e237:	ff e0                	jmp    eax
c000e239:	90                   	nop

c000e23a <Device::addChild(Device*)>:
c000e23a:	53                   	push   ebx
c000e23b:	83 ec 08             	sub    esp,0x8
c000e23e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e246:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e24c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e252:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e254:	85 d2                	test   edx,edx
c000e256:	74 04                	je     c000e25c <Device::addChild(Device*)+0x22>
c000e258:	89 d3                	mov    ebx,edx
c000e25a:	eb f6                	jmp    c000e252 <Device::addChild(Device*)+0x18>
c000e25c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e25f:	83 ec 0c             	sub    esp,0xc
c000e262:	6a 08                	push   0x8
c000e264:	e8 a6 b7 ff ff       	call   c0009a0f <malloc>
c000e269:	89 03                	mov    DWORD PTR [ebx],eax
c000e26b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e271:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e278:	83 c4 18             	add    esp,0x18
c000e27b:	5b                   	pop    ebx
c000e27c:	c3                   	ret    
c000e27d:	90                   	nop

c000e27e <Device::removeAllChildren()>:
c000e27e:	56                   	push   esi
c000e27f:	53                   	push   ebx
c000e280:	52                   	push   edx
c000e281:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e285:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e28b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e28e:	74 17                	je     c000e2a7 <Device::removeAllChildren()+0x29>
c000e290:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e293:	85 c0                	test   eax,eax
c000e295:	74 0c                	je     c000e2a3 <Device::removeAllChildren()+0x25>
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e29c:	50                   	push   eax
c000e29d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2a5:	eb e4                	jmp    c000e28b <Device::removeAllChildren()+0xd>
c000e2a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2c0:	58                   	pop    eax
c000e2c1:	5b                   	pop    ebx
c000e2c2:	5e                   	pop    esi
c000e2c3:	c3                   	ret    

c000e2c4 <Device::hibernateAll()>:
c000e2c4:	53                   	push   ebx
c000e2c5:	83 ec 14             	sub    esp,0x14
c000e2c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2ce:	53                   	push   ebx
c000e2cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e2d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2d8:	83 c4 10             	add    esp,0x10
c000e2db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2de:	74 0f                	je     c000e2ef <Device::hibernateAll()+0x2b>
c000e2e0:	83 ec 0c             	sub    esp,0xc
c000e2e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e6:	e8 d9 ff ff ff       	call   c000e2c4 <Device::hibernateAll()>
c000e2eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2ed:	eb e9                	jmp    c000e2d8 <Device::hibernateAll()+0x14>
c000e2ef:	83 c4 08             	add    esp,0x8
c000e2f2:	5b                   	pop    ebx
c000e2f3:	c3                   	ret    

c000e2f4 <Device::wakeAll()>:
c000e2f4:	53                   	push   ebx
c000e2f5:	83 ec 14             	sub    esp,0x14
c000e2f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2fe:	53                   	push   ebx
c000e2ff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e302:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e308:	83 c4 10             	add    esp,0x10
c000e30b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e30e:	74 0f                	je     c000e31f <Device::wakeAll()+0x2b>
c000e310:	83 ec 0c             	sub    esp,0xc
c000e313:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e316:	e8 d9 ff ff ff       	call   c000e2f4 <Device::wakeAll()>
c000e31b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e31d:	eb e9                	jmp    c000e308 <Device::wakeAll()+0x14>
c000e31f:	83 c4 08             	add    esp,0x8
c000e322:	5b                   	pop    ebx
c000e323:	c3                   	ret    

c000e324 <Device::detectAll()>:
c000e324:	53                   	push   ebx
c000e325:	83 ec 14             	sub    esp,0x14
c000e328:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e32c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e32e:	53                   	push   ebx
c000e32f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e332:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e33e:	74 0f                	je     c000e34f <Device::detectAll()+0x2b>
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e346:	e8 d9 ff ff ff       	call   c000e324 <Device::detectAll()>
c000e34b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e34d:	eb e9                	jmp    c000e338 <Device::detectAll()+0x14>
c000e34f:	83 c4 08             	add    esp,0x8
c000e352:	5b                   	pop    ebx
c000e353:	c3                   	ret    

c000e354 <Device::disableLegacyAll()>:
c000e354:	53                   	push   ebx
c000e355:	83 ec 14             	sub    esp,0x14
c000e358:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e35c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e35e:	53                   	push   ebx
c000e35f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e362:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e368:	83 c4 10             	add    esp,0x10
c000e36b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e36e:	74 0f                	je     c000e37f <Device::disableLegacyAll()+0x2b>
c000e370:	83 ec 0c             	sub    esp,0xc
c000e373:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e376:	e8 d9 ff ff ff       	call   c000e354 <Device::disableLegacyAll()>
c000e37b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e37d:	eb e9                	jmp    c000e368 <Device::disableLegacyAll()+0x14>
c000e37f:	83 c4 08             	add    esp,0x8
c000e382:	5b                   	pop    ebx
c000e383:	c3                   	ret    

c000e384 <Device::loadDriversForAll()>:
c000e384:	53                   	push   ebx
c000e385:	83 ec 08             	sub    esp,0x8
c000e388:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e38c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e393:	75 0c                	jne    c000e3a1 <Device::loadDriversForAll()+0x1d>
c000e395:	83 ec 0c             	sub    esp,0xc
c000e398:	53                   	push   ebx
c000e399:	e8 a0 fd ff ff       	call   c000e13e <Device::findAndLoadDriver()>
c000e39e:	83 c4 10             	add    esp,0x10
c000e3a1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3aa:	74 12                	je     c000e3be <Device::loadDriversForAll()+0x3a>
c000e3ac:	83 ec 0c             	sub    esp,0xc
c000e3af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3b2:	e8 cd ff ff ff       	call   c000e384 <Device::loadDriversForAll()>
c000e3b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3b9:	83 c4 10             	add    esp,0x10
c000e3bc:	eb e9                	jmp    c000e3a7 <Device::loadDriversForAll()+0x23>
c000e3be:	83 c4 08             	add    esp,0x8
c000e3c1:	5b                   	pop    ebx
c000e3c2:	c3                   	ret    
c000e3c3:	90                   	nop

c000e3c4 <Device::closeAll()>:
c000e3c4:	53                   	push   ebx
c000e3c5:	83 ec 08             	sub    esp,0x8
c000e3c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3ce:	6a 00                	push   0x0
c000e3d0:	6a 00                	push   0x0
c000e3d2:	6a 00                	push   0x0
c000e3d4:	53                   	push   ebx
c000e3d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e3d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3de:	83 c4 10             	add    esp,0x10
c000e3e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3e4:	74 0f                	je     c000e3f5 <Device::closeAll()+0x31>
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3ec:	e8 d3 ff ff ff       	call   c000e3c4 <Device::closeAll()>
c000e3f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3f3:	eb e9                	jmp    c000e3de <Device::closeAll()+0x1a>
c000e3f5:	83 c4 08             	add    esp,0x8
c000e3f8:	5b                   	pop    ebx
c000e3f9:	c3                   	ret    

c000e3fa <Device::powerSavingAll(PowerSavingLevel)>:
c000e3fa:	56                   	push   esi
c000e3fb:	53                   	push   ebx
c000e3fc:	83 ec 0c             	sub    esp,0xc
c000e3ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e403:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e407:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e409:	56                   	push   esi
c000e40a:	53                   	push   ebx
c000e40b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e40e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e414:	83 c4 10             	add    esp,0x10
c000e417:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e41a:	74 0f                	je     c000e42b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e41c:	52                   	push   edx
c000e41d:	52                   	push   edx
c000e41e:	56                   	push   esi
c000e41f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e422:	e8 d3 ff ff ff       	call   c000e3fa <Device::powerSavingAll(PowerSavingLevel)>
c000e427:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e429:	eb e9                	jmp    c000e414 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e42b:	58                   	pop    eax
c000e42c:	5b                   	pop    ebx
c000e42d:	5e                   	pop    esi
c000e42e:	c3                   	ret    
c000e42f:	90                   	nop

c000e430 <Device::setName(char const*)>:
c000e430:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e438:	e9 03 23 ff ff       	jmp    c0000740 <strcpy>
c000e43d:	90                   	nop

c000e43e <Device::Device(char const*)>:
c000e43e:	83 ec 1c             	sub    esp,0x1c
c000e441:	ba 70 4c 02 c0       	mov    edx,0xc0024c70
c000e446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44a:	89 10                	mov    DWORD PTR [eax],edx
c000e44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e450:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e46c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e484:	83 ec 08             	sub    esp,0x8
c000e487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e48f:	e8 9c ff ff ff       	call   c000e430 <Device::setName(char const*)>
c000e494:	83 c4 10             	add    esp,0x10
c000e497:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e49f:	83 ec 0c             	sub    esp,0xc
c000e4a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4a6:	e8 64 b5 ff ff       	call   c0009a0f <malloc>
c000e4ab:	83 c4 10             	add    esp,0x10
c000e4ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e4bf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4c9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ea:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4f5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e500:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e50e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e51c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e52a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e534:	90                   	nop
c000e535:	83 c4 1c             	add    esp,0x1c
c000e538:	c3                   	ret    
c000e539:	90                   	nop

c000e53a <Device::getName()>:
c000e53a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e53e:	05 d0 00 00 00       	add    eax,0xd0
c000e543:	c3                   	ret    

c000e544 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e544:	83 ec 0c             	sub    esp,0xc
c000e547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54b:	83 ec 08             	sub    esp,0x8
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	50                   	push   eax
c000e553:	e8 e6 fe ff ff       	call   c000e43e <Device::Device(char const*)>
c000e558:	83 c4 10             	add    esp,0x10
c000e55b:	ba 9c 4c 02 c0       	mov    edx,0xc0024c9c
c000e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e564:	89 10                	mov    DWORD PTR [eax],edx
c000e566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e574:	90                   	nop
c000e575:	83 c4 0c             	add    esp,0xc
c000e578:	c3                   	ret    
c000e579:	90                   	nop

c000e57a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e57a:	57                   	push   edi
c000e57b:	56                   	push   esi
c000e57c:	53                   	push   ebx
c000e57d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e581:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e585:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e589:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e58f:	75 0c                	jne    c000e59d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e591:	52                   	push   edx
c000e592:	52                   	push   edx
c000e593:	53                   	push   ebx
c000e594:	56                   	push   esi
c000e595:	e8 fc 46 01 00       	call   c0022c96 <LinkedList<Device>::addElement(Device*)>
c000e59a:	83 c4 10             	add    esp,0x10
c000e59d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5a6:	74 12                	je     c000e5ba <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e5a8:	50                   	push   eax
c000e5a9:	57                   	push   edi
c000e5aa:	56                   	push   esi
c000e5ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ae:	e8 c7 ff ff ff       	call   c000e57a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b5:	83 c4 10             	add    esp,0x10
c000e5b8:	eb e9                	jmp    c000e5a3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e5ba:	5b                   	pop    ebx
c000e5bb:	5e                   	pop    esi
c000e5bc:	5f                   	pop    edi
c000e5bd:	c3                   	ret    

c000e5be <getDevicesOfType(DeviceType)>:
c000e5be:	53                   	push   ebx
c000e5bf:	83 ec 14             	sub    esp,0x14
c000e5c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5c6:	53                   	push   ebx
c000e5c7:	e8 a6 47 01 00       	call   c0022d72 <LinkedList<Device>::LinkedList()>
c000e5cc:	83 c4 0c             	add    esp,0xc
c000e5cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5d3:	53                   	push   ebx
c000e5d4:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c000e5da:	e8 9b ff ff ff       	call   c000e57a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5df:	89 d8                	mov    eax,ebx
c000e5e1:	83 c4 18             	add    esp,0x18
c000e5e4:	5b                   	pop    ebx
c000e5e5:	c2 04 00             	ret    0x4

c000e5e8 <HardDiskController::HardDiskController(char const*)>:
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ef:	83 ec 08             	sub    esp,0x8
c000e5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f6:	50                   	push   eax
c000e5f7:	e8 42 fe ff ff       	call   c000e43e <Device::Device(char const*)>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	ba c8 4c 02 c0       	mov    edx,0xc0024cc8
c000e604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e608:	89 10                	mov    DWORD PTR [eax],edx
c000e60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e618:	90                   	nop
c000e619:	83 c4 0c             	add    esp,0xc
c000e61c:	c3                   	ret    
c000e61d:	90                   	nop
c000e61e:	66 90                	xchg   ax,ax

c000e620 <HardDiskController::~HardDiskController()>:
c000e620:	83 ec 0c             	sub    esp,0xc
c000e623:	ba c8 4c 02 c0       	mov    edx,0xc0024cc8
c000e628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62c:	89 10                	mov    DWORD PTR [eax],edx
c000e62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	50                   	push   eax
c000e636:	e8 cd fa ff ff       	call   c000e108 <Device::~Device()>
c000e63b:	83 c4 10             	add    esp,0x10
c000e63e:	90                   	nop
c000e63f:	83 c4 0c             	add    esp,0xc
c000e642:	c3                   	ret    
c000e643:	90                   	nop

c000e644 <HardDiskController::~HardDiskController()>:
c000e644:	83 ec 0c             	sub    esp,0xc
c000e647:	83 ec 0c             	sub    esp,0xc
c000e64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64e:	e8 cd ff ff ff       	call   c000e620 <HardDiskController::~HardDiskController()>
c000e653:	83 c4 10             	add    esp,0x10
c000e656:	83 ec 08             	sub    esp,0x8
c000e659:	68 58 01 00 00       	push   0x158
c000e65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e662:	e8 b3 e5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e667:	83 c4 10             	add    esp,0x10
c000e66a:	83 c4 0c             	add    esp,0xc
c000e66d:	c3                   	ret    

c000e66e <PhysicalDisk::eject()>:
c000e66e:	83 c8 ff             	or     eax,0xffffffff
c000e671:	c3                   	ret    

c000e672 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e679:	83 ec 08             	sub    esp,0x8
c000e67c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e680:	50                   	push   eax
c000e681:	e8 b8 fd ff ff       	call   c000e43e <Device::Device(char const*)>
c000e686:	83 c4 10             	add    esp,0x10
c000e689:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c000e68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e692:	89 10                	mov    DWORD PTR [eax],edx
c000e694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e698:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ae:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ca:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6d4:	90                   	nop
c000e6d5:	83 c4 0c             	add    esp,0xc
c000e6d8:	c3                   	ret    
c000e6d9:	90                   	nop

c000e6da <PhysicalDisk::startCache()>:
c000e6da:	56                   	push   esi
c000e6db:	53                   	push   ebx
c000e6dc:	83 ec 10             	sub    esp,0x10
c000e6df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6e3:	6a 44                	push   0x44
c000e6e5:	e8 25 b3 ff ff       	call   c0009a0f <malloc>
c000e6ea:	89 c6                	mov    esi,eax
c000e6ec:	58                   	pop    eax
c000e6ed:	5a                   	pop    edx
c000e6ee:	53                   	push   ebx
c000e6ef:	56                   	push   esi
c000e6f0:	e8 73 26 00 00       	call   c0010d68 <VCache::VCache(PhysicalDisk*)>
c000e6f5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e6fb:	83 c4 14             	add    esp,0x14
c000e6fe:	5b                   	pop    ebx
c000e6ff:	5e                   	pop    esi
c000e700:	c3                   	ret    
c000e701:	90                   	nop

c000e702 <PhysicalDisk::~PhysicalDisk()>:
c000e702:	83 ec 0c             	sub    esp,0xc
c000e705:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c000e70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70e:	89 10                	mov    DWORD PTR [eax],edx
c000e710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	50                   	push   eax
c000e718:	e8 eb f9 ff ff       	call   c000e108 <Device::~Device()>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	90                   	nop
c000e721:	83 c4 0c             	add    esp,0xc
c000e724:	c3                   	ret    
c000e725:	90                   	nop

c000e726 <PhysicalDisk::~PhysicalDisk()>:
c000e726:	83 ec 0c             	sub    esp,0xc
c000e729:	83 ec 0c             	sub    esp,0xc
c000e72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e730:	e8 cd ff ff ff       	call   c000e702 <PhysicalDisk::~PhysicalDisk()>
c000e735:	83 c4 10             	add    esp,0x10
c000e738:	83 ec 08             	sub    esp,0x8
c000e73b:	68 6c 01 00 00       	push   0x16c
c000e740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e744:	e8 d1 e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e749:	83 c4 10             	add    esp,0x10
c000e74c:	83 c4 0c             	add    esp,0xc
c000e74f:	c3                   	ret    

c000e750 <FPU::FPU(char const*)>:
c000e750:	83 ec 0c             	sub    esp,0xc
c000e753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e757:	83 ec 08             	sub    esp,0x8
c000e75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75e:	50                   	push   eax
c000e75f:	e8 da fc ff ff       	call   c000e43e <Device::Device(char const*)>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	ba 38 4d 02 c0       	mov    edx,0xc0024d38
c000e76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e770:	89 10                	mov    DWORD PTR [eax],edx
c000e772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e776:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e780:	90                   	nop
c000e781:	83 c4 0c             	add    esp,0xc
c000e784:	c3                   	ret    
c000e785:	90                   	nop
c000e786:	66 90                	xchg   ax,ax

c000e788 <FPU::~FPU()>:
c000e788:	83 ec 0c             	sub    esp,0xc
c000e78b:	ba 38 4d 02 c0       	mov    edx,0xc0024d38
c000e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e794:	89 10                	mov    DWORD PTR [eax],edx
c000e796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79a:	83 ec 0c             	sub    esp,0xc
c000e79d:	50                   	push   eax
c000e79e:	e8 65 f9 ff ff       	call   c000e108 <Device::~Device()>
c000e7a3:	83 c4 10             	add    esp,0x10
c000e7a6:	90                   	nop
c000e7a7:	83 c4 0c             	add    esp,0xc
c000e7aa:	c3                   	ret    
c000e7ab:	90                   	nop

c000e7ac <FPU::~FPU()>:
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b6:	e8 cd ff ff ff       	call   c000e788 <FPU::~FPU()>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	83 ec 08             	sub    esp,0x8
c000e7c1:	68 58 01 00 00       	push   0x158
c000e7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ca:	e8 4b e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e7cf:	83 c4 10             	add    esp,0x10
c000e7d2:	83 c4 0c             	add    esp,0xc
c000e7d5:	c3                   	ret    

c000e7d6 <setupFPU()>:
c000e7d6:	53                   	push   ebx
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	8b 15 a8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280a8
c000e7e0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e7e7:	74 1b                	je     c000e804 <setupFPU()+0x2e>
c000e7e9:	83 ec 0c             	sub    esp,0xc
c000e7ec:	68 58 01 00 00       	push   0x158
c000e7f1:	e8 19 b2 ff ff       	call   c0009a0f <malloc>
c000e7f6:	89 c3                	mov    ebx,eax
c000e7f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7fb:	e8 7c 2b 01 00       	call   c002137c <AVX::AVX()>
c000e800:	eb 62                	jmp    c000e864 <setupFPU()+0x8e>
c000e802:	66 90                	xchg   ax,ax
c000e804:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e80a:	84 c0                	test   al,al
c000e80c:	79 1a                	jns    c000e828 <setupFPU()+0x52>
c000e80e:	83 ec 0c             	sub    esp,0xc
c000e811:	68 58 01 00 00       	push   0x158
c000e816:	e8 f4 b1 ff ff       	call   c0009a0f <malloc>
c000e81b:	89 c3                	mov    ebx,eax
c000e81d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e820:	e8 87 2c 01 00       	call   c00214ac <SSE::SSE()>
c000e825:	eb 3d                	jmp    c000e864 <setupFPU()+0x8e>
c000e827:	90                   	nop
c000e828:	a8 20                	test   al,0x20
c000e82a:	74 1c                	je     c000e848 <setupFPU()+0x72>
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	68 58 01 00 00       	push   0x158
c000e834:	e8 d6 b1 ff ff       	call   c0009a0f <malloc>
c000e839:	89 c3                	mov    ebx,eax
c000e83b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e83e:	e8 cd 2b 01 00       	call   c0021410 <MMX::MMX()>
c000e843:	eb 1f                	jmp    c000e864 <setupFPU()+0x8e>
c000e845:	8d 76 00             	lea    esi,[esi+0x0]
c000e848:	a8 10                	test   al,0x10
c000e84a:	74 20                	je     c000e86c <setupFPU()+0x96>
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	68 58 01 00 00       	push   0x158
c000e854:	e8 b6 b1 ff ff       	call   c0009a0f <malloc>
c000e859:	89 c3                	mov    ebx,eax
c000e85b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e85e:	e8 dd 2c 01 00       	call   c0021540 <x87::x87()>
c000e863:	90                   	nop
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	eb 27                	jmp    c000e890 <setupFPU()+0xba>
c000e869:	8d 76 00             	lea    esi,[esi+0x0]
c000e86c:	83 e0 ef             	and    eax,0xffffffef
c000e86f:	83 ec 0c             	sub    esp,0xc
c000e872:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e878:	68 24 4d 02 c0       	push   0xc0024d24
c000e87d:	e8 79 e4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000e882:	0f 20 c0             	mov    eax,cr0
c000e885:	83 c8 04             	or     eax,0x4
c000e888:	0f 22 c0             	mov    cr0,eax
c000e88b:	31 db                	xor    ebx,ebx
c000e88d:	83 c4 10             	add    esp,0x10
c000e890:	89 d8                	mov    eax,ebx
c000e892:	83 c4 08             	add    esp,0x8
c000e895:	5b                   	pop    ebx
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e89c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8a0:	c1 e0 04             	shl    eax,0x4
c000e8a3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e8a7:	8d 50 10             	lea    edx,[eax+0x10]
c000e8aa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e8b0:	74 08                	je     c000e8ba <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e8b2:	83 c0 04             	add    eax,0x4
c000e8b5:	39 d0                	cmp    eax,edx
c000e8b7:	75 f1                	jne    c000e8aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e8b9:	c3                   	ret    
c000e8ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8c4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e8ce:	eb e2                	jmp    c000e8b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e8d0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e8d0:	57                   	push   edi
c000e8d1:	31 c0                	xor    eax,eax
c000e8d3:	56                   	push   esi
c000e8d4:	53                   	push   ebx
c000e8d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e8e1:	89 da                	mov    edx,ebx
c000e8e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e8e7:	c1 e2 04             	shl    edx,0x4
c000e8ea:	01 ca                	add    edx,ecx
c000e8ec:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e8f4:	74 16                	je     c000e90c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e8f6:	40                   	inc    eax
c000e8f7:	83 f8 04             	cmp    eax,0x4
c000e8fa:	75 f0                	jne    c000e8ec <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e8fc:	c7 44 24 10 68 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d68
c000e904:	5b                   	pop    ebx
c000e905:	5e                   	pop    esi
c000e906:	5f                   	pop    edi
c000e907:	e9 b7 60 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c000e90c:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e90f:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e912:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e918:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e91e:	5b                   	pop    ebx
c000e91f:	5e                   	pop    esi
c000e920:	5f                   	pop    edi
c000e921:	c3                   	ret    

c000e922 <doubleFault(regs*, void*)>:
c000e922:	55                   	push   ebp
c000e923:	89 e5                	mov    ebp,esp
c000e925:	83 ec 08             	sub    esp,0x8
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	68 75 4d 02 c0       	push   0xc0024d75
c000e930:	e8 8e 60 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	90                   	nop
c000e939:	c9                   	leave  
c000e93a:	c3                   	ret    
c000e93b:	90                   	nop

c000e93c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e93c:	56                   	push   esi
c000e93d:	53                   	push   ebx
c000e93e:	50                   	push   eax
c000e93f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e943:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e947:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e94c:	75 35                	jne    c000e983 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e94e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e951:	31 d2                	xor    edx,edx
c000e953:	89 c1                	mov    ecx,eax
c000e955:	c1 e1 04             	shl    ecx,0x4
c000e958:	01 f1                	add    ecx,esi
c000e95a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e962:	74 3e                	je     c000e9a2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e964:	42                   	inc    edx
c000e965:	83 fa 04             	cmp    edx,0x4
c000e968:	75 f0                	jne    c000e95a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e96a:	83 ec 0c             	sub    esp,0xc
c000e96d:	68 8f 4d 02 c0       	push   0xc0024d8f
c000e972:	e8 4c 60 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000e977:	83 c4 10             	add    esp,0x10
c000e97a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e97f:	5a                   	pop    edx
c000e980:	5b                   	pop    ebx
c000e981:	5e                   	pop    esi
c000e982:	c3                   	ret    
c000e983:	83 ec 0c             	sub    esp,0xc
c000e986:	56                   	push   esi
c000e987:	e8 ae fb ff ff       	call   c000e53a <Device::getName()>
c000e98c:	83 c4 10             	add    esp,0x10
c000e98f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e992:	75 ba                	jne    c000e94e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e994:	83 fb 0f             	cmp    ebx,0xf
c000e997:	7f 29                	jg     c000e9c2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e999:	0f b6 9b a0 77 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8860]
c000e9a0:	eb ac                	jmp    c000e94e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9a2:	8d 04 82             	lea    eax,[edx+eax*4]
c000e9a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9a9:	8d 04 86             	lea    eax,[esi+eax*4]
c000e9ac:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e9b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9b6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e9bc:	89 d8                	mov    eax,ebx
c000e9be:	5a                   	pop    edx
c000e9bf:	5b                   	pop    ebx
c000e9c0:	5e                   	pop    esi
c000e9c1:	c3                   	ret    
c000e9c2:	83 ec 0c             	sub    esp,0xc
c000e9c5:	68 82 4d 02 c0       	push   0xc0024d82
c000e9ca:	e8 f4 5f 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	e9 77 ff ff ff       	jmp    c000e94e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9d7:	90                   	nop

c000e9d8 <InterruptController::clearAllHandlers(int, bool)>:
c000e9d8:	56                   	push   esi
c000e9d9:	53                   	push   ebx
c000e9da:	52                   	push   edx
c000e9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9e3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e9e8:	75 61                	jne    c000ea4b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e9ea:	8d 46 20             	lea    eax,[esi+0x20]
c000e9ed:	c1 e6 04             	shl    esi,0x4
c000e9f0:	c1 e0 04             	shl    eax,0x4
c000e9f3:	01 de                	add    esi,ebx
c000e9f5:	01 d8                	add    eax,ebx
c000e9f7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ea01:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ea0b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ea15:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ea1f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ea29:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ea33:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ea3d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ea47:	58                   	pop    eax
c000ea48:	5b                   	pop    ebx
c000ea49:	5e                   	pop    esi
c000ea4a:	c3                   	ret    
c000ea4b:	83 ec 0c             	sub    esp,0xc
c000ea4e:	53                   	push   ebx
c000ea4f:	e8 e6 fa ff ff       	call   c000e53a <Device::getName()>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea5a:	75 8e                	jne    c000e9ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea5c:	83 fe 0f             	cmp    esi,0xf
c000ea5f:	7f 09                	jg     c000ea6a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ea61:	0f b6 b6 a0 77 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8860]
c000ea68:	eb 80                	jmp    c000e9ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea6a:	83 ec 0c             	sub    esp,0xc
c000ea6d:	68 9c 4d 02 c0       	push   0xc0024d9c
c000ea72:	e8 4c 5f 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000ea77:	83 c4 10             	add    esp,0x10
c000ea7a:	e9 6b ff ff ff       	jmp    c000e9ea <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea7f:	90                   	nop

c000ea80 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ea80:	56                   	push   esi
c000ea81:	53                   	push   ebx
c000ea82:	52                   	push   edx
c000ea83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ea8b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea90:	75 3a                	jne    c000eacc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ea92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea96:	8d 50 20             	lea    edx,[eax+0x20]
c000ea99:	c1 e2 04             	shl    edx,0x4
c000ea9c:	8d 04 16             	lea    eax,[esi+edx*1]
c000ea9f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eaa3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eaa9:	74 0b                	je     c000eab6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eaab:	83 c0 04             	add    eax,0x4
c000eaae:	39 d0                	cmp    eax,edx
c000eab0:	75 f1                	jne    c000eaa3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eab2:	58                   	pop    eax
c000eab3:	5b                   	pop    ebx
c000eab4:	5e                   	pop    esi
c000eab5:	c3                   	ret    
c000eab6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eac0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eaca:	eb df                	jmp    c000eaab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000eacc:	83 ec 0c             	sub    esp,0xc
c000eacf:	56                   	push   esi
c000ead0:	e8 65 fa ff ff       	call   c000e53a <Device::getName()>
c000ead5:	83 c4 10             	add    esp,0x10
c000ead8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eadb:	75 b5                	jne    c000ea92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eadd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eae2:	7f 11                	jg     c000eaf5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eae8:	0f b6 80 a0 77 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8860]
c000eaef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaf3:	eb 9d                	jmp    c000ea92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eaf5:	83 ec 0c             	sub    esp,0xc
c000eaf8:	68 a9 4d 02 c0       	push   0xc0024da9
c000eafd:	e8 c1 5e 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	eb 8b                	jmp    c000ea92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000eb07 <nmiHandler(regs*, void*)>:
c000eb07:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000eb0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eb10:	e9 c3 a6 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000eb15 <int_handler>:
c000eb15:	55                   	push   ebp
c000eb16:	57                   	push   edi
c000eb17:	56                   	push   esi
c000eb18:	53                   	push   ebx
c000eb19:	83 ec 0c             	sub    esp,0xc
c000eb1c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eb20:	80 3d 84 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b84,0x0
c000eb27:	74 0b                	je     c000eb34 <int_handler+0x1f>
c000eb29:	fa                   	cli    
c000eb2a:	f4                   	hlt    
c000eb2b:	80 3d 84 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b84,0x0
c000eb32:	75 f5                	jne    c000eb29 <int_handler+0x14>
c000eb34:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000eb39:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eb3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb42:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eb48:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb4b:	83 f8 17             	cmp    eax,0x17
c000eb4e:	77 13                	ja     c000eb63 <int_handler+0x4e>
c000eb50:	83 ec 08             	sub    esp,0x8
c000eb53:	8b 17                	mov    edx,DWORD PTR [edi]
c000eb55:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb58:	0f b6 c0             	movzx  eax,al
c000eb5b:	50                   	push   eax
c000eb5c:	57                   	push   edi
c000eb5d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	83 c3 15             	add    ebx,0x15
c000eb66:	c1 e3 04             	shl    ebx,0x4
c000eb69:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eb6d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eb74:	31 db                	xor    ebx,ebx
c000eb76:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eb7a:	85 c0                	test   eax,eax
c000eb7c:	74 13                	je     c000eb91 <int_handler+0x7c>
c000eb7e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eb81:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eb85:	74 1c                	je     c000eba3 <int_handler+0x8e>
c000eb87:	83 ec 08             	sub    esp,0x8
c000eb8a:	52                   	push   edx
c000eb8b:	56                   	push   esi
c000eb8c:	ff d0                	call   eax
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	43                   	inc    ebx
c000eb92:	83 fb 04             	cmp    ebx,0x4
c000eb95:	75 df                	jne    c000eb76 <int_handler+0x61>
c000eb97:	83 c4 0c             	add    esp,0xc
c000eb9a:	31 c0                	xor    eax,eax
c000eb9c:	5b                   	pop    ebx
c000eb9d:	31 d2                	xor    edx,edx
c000eb9f:	5e                   	pop    esi
c000eba0:	5f                   	pop    edi
c000eba1:	5d                   	pop    ebp
c000eba2:	c3                   	ret    
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	52                   	push   edx
c000eba7:	56                   	push   esi
c000eba8:	ff d0                	call   eax
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	83 c4 0c             	add    esp,0xc
c000ebb0:	5b                   	pop    ebx
c000ebb1:	5e                   	pop    esi
c000ebb2:	5f                   	pop    edi
c000ebb3:	5d                   	pop    ebp
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop

c000ebb6 <InterruptController::InterruptController(char const*)>:
c000ebb6:	83 ec 1c             	sub    esp,0x1c
c000ebb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc4:	50                   	push   eax
c000ebc5:	e8 74 f8 ff ff       	call   c000e43e <Device::Device(char const*)>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	ba 60 50 02 c0       	mov    edx,0xc0025060
c000ebd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebd6:	89 10                	mov    DWORD PTR [eax],edx
c000ebd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebdc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ebe6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ebee:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ebf6:	7f 5e                	jg     c000ec56 <InterruptController::InterruptController(char const*)+0xa0>
c000ebf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec00:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ec05:	7f 49                	jg     c000ec50 <InterruptController::InterruptController(char const*)+0x9a>
c000ec07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec1a:	01 ca                	add    edx,ecx
c000ec1c:	83 c2 54             	add    edx,0x54
c000ec1f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec2f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec3a:	01 ca                	add    edx,ecx
c000ec3c:	81 c2 54 04 00 00    	add    edx,0x454
c000ec42:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec4a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ec4e:	eb b0                	jmp    c000ec00 <InterruptController::InterruptController(char const*)+0x4a>
c000ec50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec54:	eb 98                	jmp    c000ebee <InterruptController::InterruptController(char const*)+0x38>
c000ec56:	90                   	nop
c000ec57:	83 c4 1c             	add    esp,0x1c
c000ec5a:	c3                   	ret    
c000ec5b:	90                   	nop

c000ec5c <InterruptController::~InterruptController()>:
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	ba 60 50 02 c0       	mov    edx,0xc0025060
c000ec64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec68:	89 10                	mov    DWORD PTR [eax],edx
c000ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6e:	83 ec 0c             	sub    esp,0xc
c000ec71:	50                   	push   eax
c000ec72:	e8 91 f4 ff ff       	call   c000e108 <Device::~Device()>
c000ec77:	83 c4 10             	add    esp,0x10
c000ec7a:	90                   	nop
c000ec7b:	83 c4 0c             	add    esp,0xc
c000ec7e:	c3                   	ret    
c000ec7f:	90                   	nop

c000ec80 <InterruptController::~InterruptController()>:
c000ec80:	83 ec 0c             	sub    esp,0xc
c000ec83:	83 ec 0c             	sub    esp,0xc
c000ec86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec8a:	e8 cd ff ff ff       	call   c000ec5c <InterruptController::~InterruptController()>
c000ec8f:	83 c4 10             	add    esp,0x10
c000ec92:	83 ec 08             	sub    esp,0x8
c000ec95:	68 58 21 00 00       	push   0x2158
c000ec9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec9e:	e8 77 df ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	83 c4 0c             	add    esp,0xc
c000eca9:	c3                   	ret    

c000ecaa <displayDebugInfo(regs*)>:
c000ecaa:	55                   	push   ebp
c000ecab:	57                   	push   edi
c000ecac:	56                   	push   esi
c000ecad:	53                   	push   ebx
c000ecae:	83 ec 24             	sub    esp,0x24
c000ecb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ecb5:	0f 20 c2             	mov    edx,cr0
c000ecb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ecbc:	0f 20 d7             	mov    edi,cr2
c000ecbf:	0f 20 de             	mov    esi,cr3
c000ecc2:	0f 20 e5             	mov    ebp,cr4
c000ecc5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ecc8:	68 b6 4d 02 c0       	push   0xc0024db6
c000eccd:	e8 29 e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecd2:	59                   	pop    ecx
c000ecd3:	58                   	pop    eax
c000ecd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ecd7:	68 c1 4d 02 c0       	push   0xc0024dc1
c000ecdc:	e8 1a e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ece1:	58                   	pop    eax
c000ece2:	5a                   	pop    edx
c000ece3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ece6:	68 cc 4d 02 c0       	push   0xc0024dcc
c000eceb:	e8 0b e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecf0:	59                   	pop    ecx
c000ecf1:	58                   	pop    eax
c000ecf2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ecf5:	68 d7 4d 02 c0       	push   0xc0024dd7
c000ecfa:	e8 fc df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecff:	58                   	pop    eax
c000ed00:	5a                   	pop    edx
c000ed01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ed04:	68 e2 4d 02 c0       	push   0xc0024de2
c000ed09:	e8 ed df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed0e:	59                   	pop    ecx
c000ed0f:	58                   	pop    eax
c000ed10:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ed13:	68 ed 4d 02 c0       	push   0xc0024ded
c000ed18:	e8 de df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed1d:	58                   	pop    eax
c000ed1e:	5a                   	pop    edx
c000ed1f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed22:	68 f8 4d 02 c0       	push   0xc0024df8
c000ed27:	e8 cf df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed2c:	59                   	pop    ecx
c000ed2d:	58                   	pop    eax
c000ed2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ed31:	68 03 4e 02 c0       	push   0xc0024e03
c000ed36:	e8 c0 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed3b:	58                   	pop    eax
c000ed3c:	5a                   	pop    edx
c000ed3d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed40:	68 0e 4e 02 c0       	push   0xc0024e0e
c000ed45:	e8 b1 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed4a:	59                   	pop    ecx
c000ed4b:	58                   	pop    eax
c000ed4c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed4f:	68 1d 4e 02 c0       	push   0xc0024e1d
c000ed54:	e8 a2 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed59:	58                   	pop    eax
c000ed5a:	5a                   	pop    edx
c000ed5b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed5e:	68 28 4e 02 c0       	push   0xc0024e28
c000ed63:	e8 93 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed68:	59                   	pop    ecx
c000ed69:	58                   	pop    eax
c000ed6a:	57                   	push   edi
c000ed6b:	68 33 4e 02 c0       	push   0xc0024e33
c000ed70:	e8 86 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed75:	58                   	pop    eax
c000ed76:	5a                   	pop    edx
c000ed77:	56                   	push   esi
c000ed78:	68 3e 4e 02 c0       	push   0xc0024e3e
c000ed7d:	e8 79 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed82:	59                   	pop    ecx
c000ed83:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ed88:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed8e:	e8 76 bd ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ed93:	58                   	pop    eax
c000ed94:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ed97:	5a                   	pop    edx
c000ed98:	c1 e0 05             	shl    eax,0x5
c000ed9b:	05 00 75 02 c0       	add    eax,0xc0027500
c000eda0:	50                   	push   eax
c000eda1:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eda6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edac:	e8 65 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edb1:	59                   	pop    ecx
c000edb2:	58                   	pop    eax
c000edb3:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000edb8:	68 49 4e 02 c0       	push   0xc0024e49
c000edbd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc3:	e8 4e c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edc8:	58                   	pop    eax
c000edc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edce:	5a                   	pop    edx
c000edcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000edd2:	83 c0 0c             	add    eax,0xc
c000edd5:	50                   	push   eax
c000edd6:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eddb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede1:	e8 30 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ede6:	59                   	pop    ecx
c000ede7:	58                   	pop    eax
c000ede8:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eded:	68 52 4e 02 c0       	push   0xc0024e52
c000edf2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edf8:	e8 19 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edfd:	58                   	pop    eax
c000edfe:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee03:	5a                   	pop    edx
c000ee04:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee0d:	e8 be c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee12:	59                   	pop    ecx
c000ee13:	58                   	pop    eax
c000ee14:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee19:	68 5a 4e 02 c0       	push   0xc0024e5a
c000ee1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee24:	e8 ed c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee29:	58                   	pop    eax
c000ee2a:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee2f:	5a                   	pop    edx
c000ee30:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee33:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee39:	e8 92 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee3e:	59                   	pop    ecx
c000ee3f:	58                   	pop    eax
c000ee40:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee45:	68 62 4e 02 c0       	push   0xc0024e62
c000ee4a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee50:	e8 c1 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee55:	58                   	pop    eax
c000ee56:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee5b:	5a                   	pop    edx
c000ee5c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee5f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee65:	e8 66 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee6a:	59                   	pop    ecx
c000ee6b:	58                   	pop    eax
c000ee6c:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee71:	68 6a 4e 02 c0       	push   0xc0024e6a
c000ee76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee7c:	e8 95 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee81:	58                   	pop    eax
c000ee82:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee87:	5a                   	pop    edx
c000ee88:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ee8b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee91:	e8 3a c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee96:	59                   	pop    ecx
c000ee97:	58                   	pop    eax
c000ee98:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ee9d:	68 72 4e 02 c0       	push   0xc0024e72
c000eea2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eea8:	e8 69 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eead:	58                   	pop    eax
c000eeae:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eeb3:	5a                   	pop    edx
c000eeb4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eeb7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eebd:	e8 0e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eec2:	59                   	pop    ecx
c000eec3:	58                   	pop    eax
c000eec4:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eec9:	68 7a 4e 02 c0       	push   0xc0024e7a
c000eece:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed4:	e8 3d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eed9:	58                   	pop    eax
c000eeda:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eedf:	5a                   	pop    edx
c000eee0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eee3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eee9:	e8 e2 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eeee:	59                   	pop    ecx
c000eeef:	58                   	pop    eax
c000eef0:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000eef5:	68 82 4e 02 c0       	push   0xc0024e82
c000eefa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef00:	e8 11 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef05:	58                   	pop    eax
c000ef06:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef0b:	5a                   	pop    edx
c000ef0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef10:	52                   	push   edx
c000ef11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef17:	e8 b4 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef1c:	59                   	pop    ecx
c000ef1d:	58                   	pop    eax
c000ef1e:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef23:	68 8b 4e 02 c0       	push   0xc0024e8b
c000ef28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef2e:	e8 e3 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef33:	58                   	pop    eax
c000ef34:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef39:	5a                   	pop    edx
c000ef3a:	57                   	push   edi
c000ef3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef41:	e8 8a c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef46:	59                   	pop    ecx
c000ef47:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef4c:	5f                   	pop    edi
c000ef4d:	68 93 4e 02 c0       	push   0xc0024e93
c000ef52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef58:	e8 b9 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef5d:	58                   	pop    eax
c000ef5e:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef63:	5a                   	pop    edx
c000ef64:	56                   	push   esi
c000ef65:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef6b:	e8 60 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef70:	59                   	pop    ecx
c000ef71:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef76:	5e                   	pop    esi
c000ef77:	68 9b 4e 02 c0       	push   0xc0024e9b
c000ef7c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef82:	e8 8f c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef87:	5f                   	pop    edi
c000ef88:	58                   	pop    eax
c000ef89:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000ef8e:	55                   	push   ebp
c000ef8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef95:	e8 36 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef9a:	58                   	pop    eax
c000ef9b:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000efa0:	5a                   	pop    edx
c000efa1:	68 a3 4e 02 c0       	push   0xc0024ea3
c000efa6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efac:	e8 65 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efb1:	0f 21 c0             	mov    eax,db0
c000efb4:	59                   	pop    ecx
c000efb5:	5e                   	pop    esi
c000efb6:	50                   	push   eax
c000efb7:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000efbc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc2:	e8 09 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efc7:	5f                   	pop    edi
c000efc8:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000efcd:	5d                   	pop    ebp
c000efce:	68 ac 4e 02 c0       	push   0xc0024eac
c000efd3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd9:	e8 38 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efde:	0f 21 c8             	mov    eax,db1
c000efe1:	5a                   	pop    edx
c000efe2:	59                   	pop    ecx
c000efe3:	50                   	push   eax
c000efe4:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000efe9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efef:	e8 dc bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eff4:	5e                   	pop    esi
c000eff5:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000effa:	5f                   	pop    edi
c000effb:	68 b4 4e 02 c0       	push   0xc0024eb4
c000f000:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f006:	e8 0b c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f00b:	0f 21 d0             	mov    eax,db2
c000f00e:	5d                   	pop    ebp
c000f00f:	5a                   	pop    edx
c000f010:	50                   	push   eax
c000f011:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f016:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f01c:	e8 af bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f021:	59                   	pop    ecx
c000f022:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f027:	5e                   	pop    esi
c000f028:	68 bc 4e 02 c0       	push   0xc0024ebc
c000f02d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f033:	e8 de bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f038:	0f 21 d8             	mov    eax,db3
c000f03b:	5f                   	pop    edi
c000f03c:	5d                   	pop    ebp
c000f03d:	50                   	push   eax
c000f03e:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f043:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f049:	e8 82 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f04e:	58                   	pop    eax
c000f04f:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f054:	5a                   	pop    edx
c000f055:	68 c4 4e 02 c0       	push   0xc0024ec4
c000f05a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f060:	e8 b1 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f065:	0f 21 f0             	mov    eax,db6
c000f068:	59                   	pop    ecx
c000f069:	5e                   	pop    esi
c000f06a:	50                   	push   eax
c000f06b:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f070:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f076:	e8 55 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f07b:	5f                   	pop    edi
c000f07c:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f081:	5d                   	pop    ebp
c000f082:	68 cc 4e 02 c0       	push   0xc0024ecc
c000f087:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f08d:	e8 84 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f092:	0f 21 f8             	mov    eax,db7
c000f095:	5a                   	pop    edx
c000f096:	59                   	pop    ecx
c000f097:	50                   	push   eax
c000f098:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f09d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0a3:	e8 28 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0a8:	5e                   	pop    esi
c000f0a9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0ac:	e8 40 8c 00 00       	call   c0017cf1 <Thr::getDriverNameFromAddress(unsigned long)>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	85 c0                	test   eax,eax
c000f0b6:	74 7d                	je     c000f135 <displayDebugInfo(regs*)+0x48b>
c000f0b8:	89 c6                	mov    esi,eax
c000f0ba:	50                   	push   eax
c000f0bb:	50                   	push   eax
c000f0bc:	56                   	push   esi
c000f0bd:	68 d4 4e 02 c0       	push   0xc0024ed4
c000f0c2:	e8 34 dc ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f0c7:	5a                   	pop    edx
c000f0c8:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f0cd:	59                   	pop    ecx
c000f0ce:	68 e2 4e 02 c0       	push   0xc0024ee2
c000f0d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d9:	e8 38 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0de:	5f                   	pop    edi
c000f0df:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f0e4:	5d                   	pop    ebp
c000f0e5:	56                   	push   esi
c000f0e6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0ec:	e8 25 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0f1:	58                   	pop    eax
c000f0f2:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f0f7:	5a                   	pop    edx
c000f0f8:	68 ee 4e 02 c0       	push   0xc0024eee
c000f0fd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f103:	e8 0e bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f108:	59                   	pop    ecx
c000f109:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000f10e:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f114:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f117:	e8 0c 8c 00 00       	call   c0017d28 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f11c:	5b                   	pop    ebx
c000f11d:	5d                   	pop    ebp
c000f11e:	50                   	push   eax
c000f11f:	57                   	push   edi
c000f120:	e8 ab be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f125:	58                   	pop    eax
c000f126:	5a                   	pop    edx
c000f127:	56                   	push   esi
c000f128:	68 fa 4e 02 c0       	push   0xc0024efa
c000f12d:	e8 c9 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f132:	83 c4 10             	add    esp,0x10
c000f135:	fa                   	cli    
c000f136:	f4                   	hlt    
c000f137:	eb fe                	jmp    c000f137 <displayDebugInfo(regs*)+0x48d>

c000f139 <x87EmulHandler(regs*, void*)>:
c000f139:	83 ec 0c             	sub    esp,0xc
c000f13c:	0f 20 c2             	mov    edx,cr0
c000f13f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f144:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f148:	75 4b                	jne    c000f195 <x87EmulHandler(regs*, void*)+0x5c>
c000f14a:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f14f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f155:	85 c0                	test   eax,eax
c000f157:	74 05                	je     c000f15e <x87EmulHandler(regs*, void*)+0x25>
c000f159:	83 e2 08             	and    edx,0x8
c000f15c:	75 17                	jne    c000f175 <x87EmulHandler(regs*, void*)+0x3c>
c000f15e:	83 ec 0c             	sub    esp,0xc
c000f161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f165:	e8 34 b0 00 00       	call   c001a19e <Vm::x87Handler(regs*)>
c000f16a:	83 c4 10             	add    esp,0x10
c000f16d:	84 c0                	test   al,al
c000f16f:	74 24                	je     c000f195 <x87EmulHandler(regs*, void*)+0x5c>
c000f171:	83 c4 0c             	add    esp,0xc
c000f174:	c3                   	ret    
c000f175:	83 ec 0c             	sub    esp,0xc
c000f178:	68 20 4f 02 c0       	push   0xc0024f20
c000f17d:	e8 79 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f182:	0f 06                	clts   
c000f184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f189:	83 c4 10             	add    esp,0x10
c000f18c:	a3 e8 81 02 c0       	mov    ds:0xc00281e8,eax
c000f191:	83 c4 0c             	add    esp,0xc
c000f194:	c3                   	ret    
c000f195:	83 ec 0c             	sub    esp,0xc
c000f198:	68 0a 4f 02 c0       	push   0xc0024f0a
c000f19d:	e8 59 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1a2:	5a                   	pop    edx
c000f1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1a7:	e8 fe fa ff ff       	call   c000ecaa <displayDebugInfo(regs*)>

c000f1ac <gpFault(regs*, void*)>:
c000f1ac:	53                   	push   ebx
c000f1ad:	83 ec 14             	sub    esp,0x14
c000f1b0:	c7 05 e4 81 02 c0 5a 96 01 c0 	mov    DWORD PTR ds:0xc00281e4,0xc001965a
c000f1ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f1be:	53                   	push   ebx
c000f1bf:	e8 96 a4 00 00       	call   c001965a <Vm::faultHandler(regs*)>
c000f1c4:	83 c4 10             	add    esp,0x10
c000f1c7:	84 c0                	test   al,al
c000f1c9:	74 05                	je     c000f1d0 <gpFault(regs*, void*)+0x24>
c000f1cb:	83 c4 08             	add    esp,0x8
c000f1ce:	5b                   	pop    ebx
c000f1cf:	c3                   	ret    
c000f1d0:	83 ec 0c             	sub    esp,0xc
c000f1d3:	68 2d 4f 02 c0       	push   0xc0024f2d
c000f1d8:	e8 1e db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1e0:	e8 c5 fa ff ff       	call   c000ecaa <displayDebugInfo(regs*)>

c000f1e5 <pgFault(regs*, void*)>:
c000f1e5:	53                   	push   ebx
c000f1e6:	83 ec 10             	sub    esp,0x10
c000f1e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f1ed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1f0:	68 48 4f 02 c0       	push   0xc0024f48
c000f1f5:	e8 01 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1fa:	0f 20 d0             	mov    eax,cr2
c000f1fd:	5a                   	pop    edx
c000f1fe:	59                   	pop    ecx
c000f1ff:	50                   	push   eax
c000f200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f205:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f208:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f20e:	e8 63 d6 ff ff       	call   c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f213:	83 c4 10             	add    esp,0x10
c000f216:	84 c0                	test   al,al
c000f218:	74 05                	je     c000f21f <pgFault(regs*, void*)+0x3a>
c000f21a:	83 c4 08             	add    esp,0x8
c000f21d:	5b                   	pop    ebx
c000f21e:	c3                   	ret    
c000f21f:	83 ec 0c             	sub    esp,0xc
c000f222:	68 5d 4f 02 c0       	push   0xc0024f5d
c000f227:	e8 cf da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f22c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f22f:	e8 76 fa ff ff       	call   c000ecaa <displayDebugInfo(regs*)>

c000f234 <otherISRHandler(regs*, void*)>:
c000f234:	53                   	push   ebx
c000f235:	83 ec 0c             	sub    esp,0xc
c000f238:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f23c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f23f:	50                   	push   eax
c000f240:	50                   	push   eax
c000f241:	68 6a 4f 02 c0       	push   0xc0024f6a
c000f246:	e8 b0 da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f24b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f24e:	e8 57 fa ff ff       	call   c000ecaa <displayDebugInfo(regs*)>

c000f253 <opcodeFault(regs*, void*)>:
c000f253:	55                   	push   ebp
c000f254:	89 e5                	mov    ebp,esp
c000f256:	56                   	push   esi
c000f257:	53                   	push   ebx
c000f258:	83 ec 30             	sub    esp,0x30
c000f25b:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f260:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f266:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f26c:	84 c0                	test   al,al
c000f26e:	74 24                	je     c000f294 <opcodeFault(regs*, void*)+0x41>
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	68 88 4f 02 c0       	push   0xc0024f88
c000f278:	e8 7e da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f283:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f286:	8d 50 19             	lea    edx,[eax+0x19]
c000f289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f28c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f28f:	e9 7b 03 00 00       	jmp    c000f60f <opcodeFault(regs*, void*)+0x3bc>
c000f294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f297:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f29d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f2af:	3c f0                	cmp    al,0xf0
c000f2b1:	75 17                	jne    c000f2ca <opcodeFault(regs*, void*)+0x77>
c000f2b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2bc:	8d 50 01             	lea    edx,[eax+0x1]
c000f2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2c5:	e9 d6 00 00 00       	jmp    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f2ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f2cf:	3c f2                	cmp    al,0xf2
c000f2d1:	74 09                	je     c000f2dc <opcodeFault(regs*, void*)+0x89>
c000f2d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d8:	3c f3                	cmp    al,0xf3
c000f2da:	75 1b                	jne    c000f2f7 <opcodeFault(regs*, void*)+0xa4>
c000f2dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2e9:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2f2:	e9 a9 00 00 00       	jmp    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f2f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f2fc:	3c 66                	cmp    al,0x66
c000f2fe:	75 1b                	jne    c000f31b <opcodeFault(regs*, void*)+0xc8>
c000f300:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f304:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f30d:	8d 50 01             	lea    edx,[eax+0x1]
c000f310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f313:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f316:	e9 85 00 00 00       	jmp    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f31b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f31e:	8a 00                	mov    al,BYTE PTR [eax]
c000f320:	3c 67                	cmp    al,0x67
c000f322:	75 18                	jne    c000f33c <opcodeFault(regs*, void*)+0xe9>
c000f324:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f328:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f32e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f331:	8d 50 01             	lea    edx,[eax+0x1]
c000f334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f337:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f33a:	eb 64                	jmp    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f33c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f33f:	8a 00                	mov    al,BYTE PTR [eax]
c000f341:	3c 2e                	cmp    al,0x2e
c000f343:	74 09                	je     c000f34e <opcodeFault(regs*, void*)+0xfb>
c000f345:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f348:	8a 00                	mov    al,BYTE PTR [eax]
c000f34a:	3c 3e                	cmp    al,0x3e
c000f34c:	75 18                	jne    c000f366 <opcodeFault(regs*, void*)+0x113>
c000f34e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f352:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f358:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f35b:	8d 50 01             	lea    edx,[eax+0x1]
c000f35e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f361:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f364:	eb 3a                	jmp    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f366:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f369:	8a 00                	mov    al,BYTE PTR [eax]
c000f36b:	3c 36                	cmp    al,0x36
c000f36d:	74 1b                	je     c000f38a <opcodeFault(regs*, void*)+0x137>
c000f36f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f372:	8a 00                	mov    al,BYTE PTR [eax]
c000f374:	3c 26                	cmp    al,0x26
c000f376:	74 12                	je     c000f38a <opcodeFault(regs*, void*)+0x137>
c000f378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37b:	8a 00                	mov    al,BYTE PTR [eax]
c000f37d:	3c 64                	cmp    al,0x64
c000f37f:	74 09                	je     c000f38a <opcodeFault(regs*, void*)+0x137>
c000f381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f384:	8a 00                	mov    al,BYTE PTR [eax]
c000f386:	3c 65                	cmp    al,0x65
c000f388:	75 16                	jne    c000f3a0 <opcodeFault(regs*, void*)+0x14d>
c000f38a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f38e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f394:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f397:	8d 50 01             	lea    edx,[eax+0x1]
c000f39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f39d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a3:	8a 00                	mov    al,BYTE PTR [eax]
c000f3a5:	3c 0f                	cmp    al,0xf
c000f3a7:	0f 85 8d 01 00 00    	jne    c000f53a <opcodeFault(regs*, void*)+0x2e7>
c000f3ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b0:	40                   	inc    eax
c000f3b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b3:	3c c7                	cmp    al,0xc7
c000f3b5:	0f 85 7f 01 00 00    	jne    c000f53a <opcodeFault(regs*, void*)+0x2e7>
c000f3bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3c4:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3cd:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f3d0:	50                   	push   eax
c000f3d1:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f3d4:	50                   	push   eax
c000f3d5:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f3d8:	50                   	push   eax
c000f3d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f3dc:	e8 fb 4c 00 00       	call   c00140dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f3e1:	83 c4 10             	add    esp,0x10
c000f3e4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f3e7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f3ea:	83 f0 01             	xor    eax,0x1
c000f3ed:	84 c0                	test   al,al
c000f3ef:	0f 84 45 01 00 00    	je     c000f53a <opcodeFault(regs*, void*)+0x2e7>
c000f3f5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f3f8:	3c 01                	cmp    al,0x1
c000f3fa:	0f 85 3a 01 00 00    	jne    c000f53a <opcodeFault(regs*, void*)+0x2e7>
c000f400:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f403:	83 f0 01             	xor    eax,0x1
c000f406:	84 c0                	test   al,al
c000f408:	0f 84 2c 01 00 00    	je     c000f53a <opcodeFault(regs*, void*)+0x2e7>
c000f40e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f411:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f414:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f417:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f41e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f421:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f424:	89 c2                	mov    edx,eax
c000f426:	b8 00 00 00 00       	mov    eax,0x0
c000f42b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f42e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f434:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f437:	ba 00 00 00 00       	mov    edx,0x0
c000f43c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f43f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f445:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f448:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f44b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f452:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f455:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f458:	89 c2                	mov    edx,eax
c000f45a:	b8 00 00 00 00       	mov    eax,0x0
c000f45f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f462:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f468:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f46b:	ba 00 00 00 00       	mov    edx,0x0
c000f470:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f473:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f476:	fa                   	cli    
c000f477:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000f47c:	40                   	inc    eax
c000f47d:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000f482:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f485:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f488:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48a:	89 c1                	mov    ecx,eax
c000f48c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f48f:	89 cb                	mov    ebx,ecx
c000f491:	89 d0                	mov    eax,edx
c000f493:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f496:	89 c6                	mov    esi,eax
c000f498:	89 f0                	mov    eax,esi
c000f49a:	09 d8                	or     eax,ebx
c000f49c:	85 c0                	test   eax,eax
c000f49e:	75 21                	jne    c000f4c1 <opcodeFault(regs*, void*)+0x26e>
c000f4a0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f4a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4a6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4a9:	89 01                	mov    DWORD PTR [ecx],eax
c000f4ab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4b4:	83 c8 40             	or     eax,0x40
c000f4b7:	89 c2                	mov    edx,eax
c000f4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4bf:	eb 3e                	jmp    c000f4ff <opcodeFault(regs*, void*)+0x2ac>
c000f4c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f4c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f4c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f4cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f4d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4de:	89 d0                	mov    eax,edx
c000f4e0:	31 d2                	xor    edx,edx
c000f4e2:	89 c3                	mov    ebx,eax
c000f4e4:	89 d6                	mov    esi,edx
c000f4e6:	89 da                	mov    edx,ebx
c000f4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4eb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4f4:	83 e0 bf             	and    eax,0xffffffbf
c000f4f7:	89 c2                	mov    edx,eax
c000f4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4fc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4ff:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000f504:	48                   	dec    eax
c000f505:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000f50a:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000f50f:	85 c0                	test   eax,eax
c000f511:	75 01                	jne    c000f514 <opcodeFault(regs*, void*)+0x2c1>
c000f513:	fb                   	sti    
c000f514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f517:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f51a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f51d:	01 c2                	add    edx,eax
c000f51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f522:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f525:	83 ec 0c             	sub    esp,0xc
c000f528:	68 ab 4f 02 c0       	push   0xc0024fab
c000f52d:	e8 c9 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	e9 d5 00 00 00       	jmp    c000f60f <opcodeFault(regs*, void*)+0x3bc>
c000f53a:	83 ec 0c             	sub    esp,0xc
c000f53d:	68 be 4f 02 c0       	push   0xc0024fbe
c000f542:	e8 b4 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f547:	83 c4 10             	add    esp,0x10
c000f54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f54d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f553:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f556:	c1 e0 04             	shl    eax,0x4
c000f559:	01 d0                	add    eax,edx
c000f55b:	83 c0 03             	add    eax,0x3
c000f55e:	8a 00                	mov    al,BYTE PTR [eax]
c000f560:	0f b6 d8             	movzx  ebx,al
c000f563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f566:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f56c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f56f:	c1 e0 04             	shl    eax,0x4
c000f572:	01 d0                	add    eax,edx
c000f574:	83 c0 02             	add    eax,0x2
c000f577:	8a 00                	mov    al,BYTE PTR [eax]
c000f579:	0f b6 c8             	movzx  ecx,al
c000f57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f57f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f585:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f588:	c1 e0 04             	shl    eax,0x4
c000f58b:	01 d0                	add    eax,edx
c000f58d:	40                   	inc    eax
c000f58e:	8a 00                	mov    al,BYTE PTR [eax]
c000f590:	0f b6 d0             	movzx  edx,al
c000f593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f596:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f59c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f59f:	c1 e0 04             	shl    eax,0x4
c000f5a2:	01 f0                	add    eax,esi
c000f5a4:	8a 00                	mov    al,BYTE PTR [eax]
c000f5a6:	0f b6 c0             	movzx  eax,al
c000f5a9:	83 ec 0c             	sub    esp,0xc
c000f5ac:	53                   	push   ebx
c000f5ad:	51                   	push   ecx
c000f5ae:	52                   	push   edx
c000f5af:	50                   	push   eax
c000f5b0:	68 d0 4f 02 c0       	push   0xc0024fd0
c000f5b5:	e8 41 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5c3:	83 c0 03             	add    eax,0x3
c000f5c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c8:	0f b6 d8             	movzx  ebx,al
c000f5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5d1:	83 c0 02             	add    eax,0x2
c000f5d4:	8a 00                	mov    al,BYTE PTR [eax]
c000f5d6:	0f b6 c8             	movzx  ecx,al
c000f5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5df:	40                   	inc    eax
c000f5e0:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e2:	0f b6 d0             	movzx  edx,al
c000f5e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5eb:	8a 00                	mov    al,BYTE PTR [eax]
c000f5ed:	0f b6 c0             	movzx  eax,al
c000f5f0:	83 ec 0c             	sub    esp,0xc
c000f5f3:	53                   	push   ebx
c000f5f4:	51                   	push   ecx
c000f5f5:	52                   	push   edx
c000f5f6:	50                   	push   eax
c000f5f7:	68 f8 4f 02 c0       	push   0xc0024ff8
c000f5fc:	e8 fa d6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f601:	83 c4 20             	add    esp,0x20
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f60a:	e8 9b f6 ff ff       	call   c000ecaa <displayDebugInfo(regs*)>
c000f60f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f612:	5b                   	pop    ebx
c000f613:	5e                   	pop    esi
c000f614:	5d                   	pop    ebp
c000f615:	c3                   	ret    

c000f616 <displayProgramFault(char const*)>:
c000f616:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f61b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f61e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f624:	85 c0                	test   eax,eax
c000f626:	74 15                	je     c000f63d <displayProgramFault(char const*)+0x27>
c000f628:	83 ec 0c             	sub    esp,0xc
c000f62b:	6a 04                	push   0x4
c000f62d:	6a 0f                	push   0xf
c000f62f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f633:	50                   	push   eax
c000f634:	e8 d9 b6 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f639:	83 c4 1c             	add    esp,0x1c
c000f63c:	c3                   	ret    
c000f63d:	c3                   	ret    

c000f63e <setupInterruptController()>:
c000f63e:	55                   	push   ebp
c000f63f:	89 e5                	mov    ebp,esp
c000f641:	53                   	push   ebx
c000f642:	83 ec 24             	sub    esp,0x24
c000f645:	b8 00 00 00 00       	mov    eax,0x0
c000f64a:	85 c0                	test   eax,eax
c000f64c:	0f 95 c0             	setne  al
c000f64f:	84 c0                	test   al,al
c000f651:	74 5b                	je     c000f6ae <setupInterruptController()+0x70>
c000f653:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f65a:	83 ec 0c             	sub    esp,0xc
c000f65d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f660:	e8 aa a3 ff ff       	call   c0009a0f <malloc>
c000f665:	83 c4 10             	add    esp,0x10
c000f668:	89 c3                	mov    ebx,eax
c000f66a:	83 ec 0c             	sub    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	e8 0b 21 01 00       	call   c002177e <APIC::APIC()>
c000f673:	83 c4 10             	add    esp,0x10
c000f676:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f679:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f67c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f67f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f681:	83 c0 08             	add    eax,0x8
c000f684:	8b 00                	mov    eax,DWORD PTR [eax]
c000f686:	6a 00                	push   0x0
c000f688:	6a 00                	push   0x0
c000f68a:	6a 00                	push   0x0
c000f68c:	52                   	push   edx
c000f68d:	ff d0                	call   eax
c000f68f:	83 c4 10             	add    esp,0x10
c000f692:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f69d:	50                   	push   eax
c000f69e:	e8 97 eb ff ff       	call   c000e23a <Device::addChild(Device*)>
c000f6a3:	83 c4 10             	add    esp,0x10
c000f6a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f6a9:	e9 79 03 00 00       	jmp    c000fa27 <setupInterruptController()+0x3e9>
c000f6ae:	a0 c0 89 02 c0       	mov    al,ds:0xc00289c0
c000f6b3:	84 c0                	test   al,al
c000f6b5:	75 14                	jne    c000f6cb <setupInterruptController()+0x8d>
c000f6b7:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f6bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f6c2:	83 e2 fe             	and    edx,0xfffffffe
c000f6c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f6cb:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f6d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f6d6:	83 e0 01             	and    eax,0x1
c000f6d9:	84 c0                	test   al,al
c000f6db:	0f 95 c0             	setne  al
c000f6de:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f6e1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f6e8:	83 ec 0c             	sub    esp,0xc
c000f6eb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f6ee:	e8 1c a3 ff ff       	call   c0009a0f <malloc>
c000f6f3:	83 c4 10             	add    esp,0x10
c000f6f6:	89 c3                	mov    ebx,eax
c000f6f8:	83 ec 0c             	sub    esp,0xc
c000f6fb:	53                   	push   ebx
c000f6fc:	e8 d5 25 01 00       	call   c0021cd6 <PIC::PIC()>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f707:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f70a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f70d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70f:	83 c0 08             	add    eax,0x8
c000f712:	8b 00                	mov    eax,DWORD PTR [eax]
c000f714:	6a 00                	push   0x0
c000f716:	6a 00                	push   0x0
c000f718:	6a 00                	push   0x0
c000f71a:	52                   	push   edx
c000f71b:	ff d0                	call   eax
c000f71d:	83 c4 10             	add    esp,0x10
c000f720:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f724:	74 73                	je     c000f799 <setupInterruptController()+0x15b>
c000f726:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f729:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f72c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f72e:	83 c0 0c             	add    eax,0xc
c000f731:	8b 00                	mov    eax,DWORD PTR [eax]
c000f733:	6a 00                	push   0x0
c000f735:	6a 00                	push   0x0
c000f737:	6a 00                	push   0x0
c000f739:	52                   	push   edx
c000f73a:	ff d0                	call   eax
c000f73c:	83 c4 10             	add    esp,0x10
c000f73f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f743:	74 15                	je     c000f75a <setupInterruptController()+0x11c>
c000f745:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f748:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74a:	83 c0 04             	add    eax,0x4
c000f74d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74f:	83 ec 0c             	sub    esp,0xc
c000f752:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f755:	ff d0                	call   eax
c000f757:	83 c4 10             	add    esp,0x10
c000f75a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f761:	83 ec 0c             	sub    esp,0xc
c000f764:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f767:	e8 a3 a2 ff ff       	call   c0009a0f <malloc>
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	89 c3                	mov    ebx,eax
c000f771:	83 ec 0c             	sub    esp,0xc
c000f774:	53                   	push   ebx
c000f775:	e8 04 20 01 00       	call   c002177e <APIC::APIC()>
c000f77a:	83 c4 10             	add    esp,0x10
c000f77d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f780:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f783:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f786:	8b 00                	mov    eax,DWORD PTR [eax]
c000f788:	83 c0 08             	add    eax,0x8
c000f78b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78d:	6a 00                	push   0x0
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	52                   	push   edx
c000f794:	ff d0                	call   eax
c000f796:	83 c4 10             	add    esp,0x10
c000f799:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c000f79e:	83 ec 08             	sub    esp,0x8
c000f7a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a4:	50                   	push   eax
c000f7a5:	e8 90 ea ff ff       	call   c000e23a <Device::addChild(Device*)>
c000f7aa:	83 c4 10             	add    esp,0x10
c000f7ad:	c7 05 e8 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281e8,0x0
c000f7b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7bc:	83 c0 24             	add    eax,0x24
c000f7bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c1:	6a 00                	push   0x0
c000f7c3:	68 34 f2 00 c0       	push   0xc000f234
c000f7c8:	6a 00                	push   0x0
c000f7ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7cd:	ff d0                	call   eax
c000f7cf:	83 c4 10             	add    esp,0x10
c000f7d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7d7:	83 c0 24             	add    eax,0x24
c000f7da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7dc:	6a 00                	push   0x0
c000f7de:	68 34 f2 00 c0       	push   0xc000f234
c000f7e3:	6a 01                	push   0x1
c000f7e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7e8:	ff d0                	call   eax
c000f7ea:	83 c4 10             	add    esp,0x10
c000f7ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f2:	83 c0 24             	add    eax,0x24
c000f7f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f7:	6a 00                	push   0x0
c000f7f9:	68 07 eb 00 c0       	push   0xc000eb07
c000f7fe:	6a 02                	push   0x2
c000f800:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f803:	ff d0                	call   eax
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80d:	83 c0 24             	add    eax,0x24
c000f810:	8b 00                	mov    eax,DWORD PTR [eax]
c000f812:	6a 00                	push   0x0
c000f814:	68 34 f2 00 c0       	push   0xc000f234
c000f819:	6a 03                	push   0x3
c000f81b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f81e:	ff d0                	call   eax
c000f820:	83 c4 10             	add    esp,0x10
c000f823:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f826:	8b 00                	mov    eax,DWORD PTR [eax]
c000f828:	83 c0 24             	add    eax,0x24
c000f82b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82d:	6a 00                	push   0x0
c000f82f:	68 34 f2 00 c0       	push   0xc000f234
c000f834:	6a 04                	push   0x4
c000f836:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f839:	ff d0                	call   eax
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f841:	8b 00                	mov    eax,DWORD PTR [eax]
c000f843:	83 c0 24             	add    eax,0x24
c000f846:	8b 00                	mov    eax,DWORD PTR [eax]
c000f848:	6a 00                	push   0x0
c000f84a:	68 34 f2 00 c0       	push   0xc000f234
c000f84f:	6a 05                	push   0x5
c000f851:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f854:	ff d0                	call   eax
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f85c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f85e:	83 c0 24             	add    eax,0x24
c000f861:	8b 00                	mov    eax,DWORD PTR [eax]
c000f863:	6a 00                	push   0x0
c000f865:	68 53 f2 00 c0       	push   0xc000f253
c000f86a:	6a 06                	push   0x6
c000f86c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f86f:	ff d0                	call   eax
c000f871:	83 c4 10             	add    esp,0x10
c000f874:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f877:	8b 00                	mov    eax,DWORD PTR [eax]
c000f879:	83 c0 24             	add    eax,0x24
c000f87c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87e:	6a 00                	push   0x0
c000f880:	68 39 f1 00 c0       	push   0xc000f139
c000f885:	6a 07                	push   0x7
c000f887:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88a:	ff d0                	call   eax
c000f88c:	83 c4 10             	add    esp,0x10
c000f88f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f892:	8b 00                	mov    eax,DWORD PTR [eax]
c000f894:	83 c0 24             	add    eax,0x24
c000f897:	8b 00                	mov    eax,DWORD PTR [eax]
c000f899:	6a 00                	push   0x0
c000f89b:	68 22 e9 00 c0       	push   0xc000e922
c000f8a0:	6a 08                	push   0x8
c000f8a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a5:	ff d0                	call   eax
c000f8a7:	83 c4 10             	add    esp,0x10
c000f8aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8af:	83 c0 24             	add    eax,0x24
c000f8b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b4:	6a 00                	push   0x0
c000f8b6:	68 34 f2 00 c0       	push   0xc000f234
c000f8bb:	6a 09                	push   0x9
c000f8bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c0:	ff d0                	call   eax
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ca:	83 c0 24             	add    eax,0x24
c000f8cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8cf:	6a 00                	push   0x0
c000f8d1:	68 34 f2 00 c0       	push   0xc000f234
c000f8d6:	6a 0a                	push   0xa
c000f8d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8db:	ff d0                	call   eax
c000f8dd:	83 c4 10             	add    esp,0x10
c000f8e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e5:	83 c0 24             	add    eax,0x24
c000f8e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ea:	6a 00                	push   0x0
c000f8ec:	68 34 f2 00 c0       	push   0xc000f234
c000f8f1:	6a 0b                	push   0xb
c000f8f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8f6:	ff d0                	call   eax
c000f8f8:	83 c4 10             	add    esp,0x10
c000f8fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f900:	83 c0 24             	add    eax,0x24
c000f903:	8b 00                	mov    eax,DWORD PTR [eax]
c000f905:	6a 00                	push   0x0
c000f907:	68 34 f2 00 c0       	push   0xc000f234
c000f90c:	6a 0c                	push   0xc
c000f90e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f911:	ff d0                	call   eax
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f919:	8b 00                	mov    eax,DWORD PTR [eax]
c000f91b:	83 c0 24             	add    eax,0x24
c000f91e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f920:	6a 00                	push   0x0
c000f922:	68 ac f1 00 c0       	push   0xc000f1ac
c000f927:	6a 0d                	push   0xd
c000f929:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f92c:	ff d0                	call   eax
c000f92e:	83 c4 10             	add    esp,0x10
c000f931:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f934:	8b 00                	mov    eax,DWORD PTR [eax]
c000f936:	83 c0 24             	add    eax,0x24
c000f939:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93b:	6a 00                	push   0x0
c000f93d:	68 e5 f1 00 c0       	push   0xc000f1e5
c000f942:	6a 0e                	push   0xe
c000f944:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f947:	ff d0                	call   eax
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f94f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f951:	83 c0 24             	add    eax,0x24
c000f954:	8b 00                	mov    eax,DWORD PTR [eax]
c000f956:	6a 00                	push   0x0
c000f958:	68 34 f2 00 c0       	push   0xc000f234
c000f95d:	6a 0f                	push   0xf
c000f95f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f962:	ff d0                	call   eax
c000f964:	83 c4 10             	add    esp,0x10
c000f967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f96a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96c:	83 c0 24             	add    eax,0x24
c000f96f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f971:	6a 00                	push   0x0
c000f973:	68 34 f2 00 c0       	push   0xc000f234
c000f978:	6a 10                	push   0x10
c000f97a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f97d:	ff d0                	call   eax
c000f97f:	83 c4 10             	add    esp,0x10
c000f982:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f985:	8b 00                	mov    eax,DWORD PTR [eax]
c000f987:	83 c0 24             	add    eax,0x24
c000f98a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98c:	6a 00                	push   0x0
c000f98e:	68 34 f2 00 c0       	push   0xc000f234
c000f993:	6a 11                	push   0x11
c000f995:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f998:	ff d0                	call   eax
c000f99a:	83 c4 10             	add    esp,0x10
c000f99d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a2:	83 c0 24             	add    eax,0x24
c000f9a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a7:	6a 00                	push   0x0
c000f9a9:	68 34 f2 00 c0       	push   0xc000f234
c000f9ae:	6a 12                	push   0x12
c000f9b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9b3:	ff d0                	call   eax
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9bd:	83 c0 24             	add    eax,0x24
c000f9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c2:	6a 00                	push   0x0
c000f9c4:	68 34 f2 00 c0       	push   0xc000f234
c000f9c9:	6a 13                	push   0x13
c000f9cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9ce:	ff d0                	call   eax
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d8:	83 c0 24             	add    eax,0x24
c000f9db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9dd:	6a 00                	push   0x0
c000f9df:	68 34 f2 00 c0       	push   0xc000f234
c000f9e4:	6a 14                	push   0x14
c000f9e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9e9:	ff d0                	call   eax
c000f9eb:	83 c4 10             	add    esp,0x10
c000f9ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f3:	83 c0 24             	add    eax,0x24
c000f9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f8:	6a 00                	push   0x0
c000f9fa:	68 34 f2 00 c0       	push   0xc000f234
c000f9ff:	6a 1e                	push   0x1e
c000fa01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa04:	ff d0                	call   eax
c000fa06:	83 c4 10             	add    esp,0x10
c000fa09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0e:	83 c0 24             	add    eax,0x24
c000fa11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa13:	6a 00                	push   0x0
c000fa15:	68 67 6d 01 c0       	push   0xc0016d67
c000fa1a:	6a 60                	push   0x60
c000fa1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa1f:	ff d0                	call   eax
c000fa21:	83 c4 10             	add    esp,0x10
c000fa24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa27:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa2a:	c9                   	leave  
c000fa2b:	c3                   	ret    

c000fa2c <InterruptController::convertLegacyIRQNumber(int)>:
c000fa2c:	55                   	push   ebp
c000fa2d:	89 e5                	mov    ebp,esp
c000fa2f:	83 ec 08             	sub    esp,0x8
c000fa32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa35:	83 ec 0c             	sub    esp,0xc
c000fa38:	50                   	push   eax
c000fa39:	e8 fc ea ff ff       	call   c000e53a <Device::getName()>
c000fa3e:	83 c4 10             	add    esp,0x10
c000fa41:	8a 00                	mov    al,BYTE PTR [eax]
c000fa43:	3c 41                	cmp    al,0x41
c000fa45:	0f 94 c0             	sete   al
c000fa48:	84 c0                	test   al,al
c000fa4a:	74 28                	je     c000fa74 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa4c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fa50:	7f 12                	jg     c000fa64 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fa52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa55:	05 a0 77 02 c0       	add    eax,0xc00277a0
c000fa5a:	8a 00                	mov    al,BYTE PTR [eax]
c000fa5c:	0f b6 c0             	movzx  eax,al
c000fa5f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fa62:	eb 10                	jmp    c000fa74 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	68 20 50 02 c0       	push   0xc0025020
c000fa6c:	e8 52 4f 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa77:	c9                   	leave  
c000fa78:	c3                   	ret    
c000fa79:	90                   	nop

c000fa7a <startGUI(void*)>:
c000fa7a:	55                   	push   ebp
c000fa7b:	89 e5                	mov    ebp,esp
c000fa7d:	53                   	push   ebx
c000fa7e:	83 ec 04             	sub    esp,0x4
c000fa81:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fa86:	48                   	dec    eax
c000fa87:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000fa8c:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fa91:	85 c0                	test   eax,eax
c000fa93:	75 01                	jne    c000fa96 <startGUI(void*)+0x1c>
c000fa95:	fb                   	sti    
c000fa96:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c000fa9c:	83 ec 08             	sub    esp,0x8
c000fa9f:	6a 01                	push   0x1
c000faa1:	68 a0 50 02 c0       	push   0xc00250a0
c000faa6:	e8 97 82 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c000faab:	83 c4 10             	add    esp,0x10
c000faae:	83 ec 08             	sub    esp,0x8
c000fab1:	53                   	push   ebx
c000fab2:	50                   	push   eax
c000fab3:	e8 bb 84 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c000fab8:	83 c4 10             	add    esp,0x10
c000fabb:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c000fac1:	83 ec 08             	sub    esp,0x8
c000fac4:	6a 01                	push   0x1
c000fac6:	68 ba 50 02 c0       	push   0xc00250ba
c000facb:	e8 72 82 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c000fad0:	83 c4 10             	add    esp,0x10
c000fad3:	83 ec 08             	sub    esp,0x8
c000fad6:	53                   	push   ebx
c000fad7:	50                   	push   eax
c000fad8:	e8 96 84 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c000fadd:	83 c4 10             	add    esp,0x10
c000fae0:	90                   	nop
c000fae1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fae4:	c9                   	leave  
c000fae5:	c3                   	ret    

c000fae6 <startGUIVESA(void*)>:
c000fae6:	55                   	push   ebp
c000fae7:	89 e5                	mov    ebp,esp
c000fae9:	53                   	push   ebx
c000faea:	83 ec 04             	sub    esp,0x4
c000faed:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000faf2:	48                   	dec    eax
c000faf3:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000faf8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fafd:	85 c0                	test   eax,eax
c000faff:	75 01                	jne    c000fb02 <startGUIVESA(void*)+0x1c>
c000fb01:	fb                   	sti    
c000fb02:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c000fb08:	83 ec 08             	sub    esp,0x8
c000fb0b:	6a 01                	push   0x1
c000fb0d:	68 d4 50 02 c0       	push   0xc00250d4
c000fb12:	e8 2b 82 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c000fb17:	83 c4 10             	add    esp,0x10
c000fb1a:	83 ec 08             	sub    esp,0x8
c000fb1d:	53                   	push   ebx
c000fb1e:	50                   	push   eax
c000fb1f:	e8 4f 84 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c000fb24:	83 c4 10             	add    esp,0x10
c000fb27:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c000fb2d:	83 ec 08             	sub    esp,0x8
c000fb30:	6a 01                	push   0x1
c000fb32:	68 ba 50 02 c0       	push   0xc00250ba
c000fb37:	e8 06 82 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	83 ec 08             	sub    esp,0x8
c000fb42:	53                   	push   ebx
c000fb43:	50                   	push   eax
c000fb44:	e8 2a 84 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	90                   	nop
c000fb4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb50:	c9                   	leave  
c000fb51:	c3                   	ret    

c000fb52 <sendKeyToTerminal(unsigned char)>:
c000fb52:	55                   	push   ebp
c000fb53:	89 e5                	mov    ebp,esp
c000fb55:	83 ec 28             	sub    esp,0x28
c000fb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fb5e:	a1 24 81 02 c0       	mov    eax,ds:0xc0028124
c000fb63:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fb67:	83 ec 08             	sub    esp,0x8
c000fb6a:	52                   	push   edx
c000fb6b:	50                   	push   eax
c000fb6c:	e8 47 b6 ff ff       	call   c000b1b8 <VgaText::receiveKey(unsigned char)>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fb78:	0f 85 8f 00 00 00    	jne    c000fc0d <sendKeyToTerminal(unsigned char)+0xbb>
c000fb7e:	fa                   	cli    
c000fb7f:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fb84:	40                   	inc    eax
c000fb85:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000fb8a:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c000fb8f:	40                   	inc    eax
c000fb90:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c000fb95:	a1 00 82 02 c0       	mov    eax,ds:0xc0028200
c000fb9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb9d:	c7 05 00 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028200,0x0
c000fba7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbab:	74 1f                	je     c000fbcc <sendKeyToTerminal(unsigned char)+0x7a>
c000fbad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbb0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fbb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fbb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fbbc:	83 ec 0c             	sub    esp,0xc
c000fbbf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbc2:	e8 1d 90 00 00       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	eb db                	jmp    c000fba7 <sendKeyToTerminal(unsigned char)+0x55>
c000fbcc:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c000fbd1:	48                   	dec    eax
c000fbd2:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c000fbd7:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c000fbdc:	85 c0                	test   eax,eax
c000fbde:	75 18                	jne    c000fbf8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fbe0:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c000fbe5:	85 c0                	test   eax,eax
c000fbe7:	74 0f                	je     c000fbf8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fbe9:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c000fbf3:	e8 30 8b 00 00       	call   c0018728 <schedule()>
c000fbf8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fbfd:	48                   	dec    eax
c000fbfe:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c000fc03:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c000fc08:	85 c0                	test   eax,eax
c000fc0a:	75 01                	jne    c000fc0d <sendKeyToTerminal(unsigned char)+0xbb>
c000fc0c:	fb                   	sti    
c000fc0d:	90                   	nop
c000fc0e:	c9                   	leave  
c000fc0f:	c3                   	ret    

c000fc10 <sendKeyboardToken(KeyboardToken)>:
c000fc10:	55                   	push   ebp
c000fc11:	89 e5                	mov    ebp,esp
c000fc13:	83 ec 18             	sub    esp,0x18
c000fc16:	e8 da 51 00 00       	call   c0014df5 <Krnl::userIOReceived()>
c000fc1b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc21:	0f b7 c0             	movzx  eax,ax
c000fc24:	83 f2 01             	xor    edx,0x1
c000fc27:	88 90 20 82 02 c0    	mov    BYTE PTR [eax-0x3ffd7de0],dl
c000fc2d:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c000fc32:	85 c0                	test   eax,eax
c000fc34:	74 24                	je     c000fc5a <sendKeyboardToken(KeyboardToken)+0x4a>
c000fc36:	8b 0d 08 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028208
c000fc3c:	83 ec 04             	sub    esp,0x4
c000fc3f:	68 20 82 02 c0       	push   0xc0028220
c000fc44:	83 ec 08             	sub    esp,0x8
c000fc47:	89 e2                	mov    edx,esp
c000fc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4c:	89 02                	mov    DWORD PTR [edx],eax
c000fc4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fc51:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fc55:	ff d1                	call   ecx
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc5d:	66 3d 03 02          	cmp    ax,0x203
c000fc61:	75 07                	jne    c000fc6a <sendKeyboardToken(KeyboardToken)+0x5a>
c000fc63:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c000fc68:	84 c0                	test   al,al
c000fc6a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fc6e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fc71:	a0 28 86 02 c0       	mov    al,ds:0xc0028628
c000fc76:	38 c2                	cmp    dl,al
c000fc78:	74 1c                	je     c000fc96 <sendKeyboardToken(KeyboardToken)+0x86>
c000fc7a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fc7d:	a2 28 86 02 c0       	mov    ds:0xc0028628,al
c000fc82:	a0 28 86 02 c0       	mov    al,ds:0xc0028628
c000fc87:	0f b6 c0             	movzx  eax,al
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	50                   	push   eax
c000fc8e:	e8 67 ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fc99:	84 c0                	test   al,al
c000fc9b:	0f 84 ae 00 00 00    	je     c000fd4f <sendKeyboardToken(KeyboardToken)+0x13f>
c000fca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca4:	66 3d 10 03          	cmp    ax,0x310
c000fca8:	75 06                	jne    c000fcb0 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fcaa:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fcb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb3:	66 3d 11 03          	cmp    ax,0x311
c000fcb7:	75 06                	jne    c000fcbf <sendKeyboardToken(KeyboardToken)+0xaf>
c000fcb9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fcbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc2:	66 3d 12 03          	cmp    ax,0x312
c000fcc6:	75 06                	jne    c000fcce <sendKeyboardToken(KeyboardToken)+0xbe>
c000fcc8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fcce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd1:	66 3d 13 03          	cmp    ax,0x313
c000fcd5:	75 06                	jne    c000fcdd <sendKeyboardToken(KeyboardToken)+0xcd>
c000fcd7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fcdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce0:	66 3d 14 03          	cmp    ax,0x314
c000fce4:	75 06                	jne    c000fcec <sendKeyboardToken(KeyboardToken)+0xdc>
c000fce6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fcec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcef:	66 3d 15 03          	cmp    ax,0x315
c000fcf3:	75 06                	jne    c000fcfb <sendKeyboardToken(KeyboardToken)+0xeb>
c000fcf5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fcfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcfe:	66 3d 16 03          	cmp    ax,0x316
c000fd02:	75 06                	jne    c000fd0a <sendKeyboardToken(KeyboardToken)+0xfa>
c000fd04:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0d:	66 3d 17 03          	cmp    ax,0x317
c000fd11:	75 06                	jne    c000fd19 <sendKeyboardToken(KeyboardToken)+0x109>
c000fd13:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd1c:	66 3d 18 03          	cmp    ax,0x318
c000fd20:	75 06                	jne    c000fd28 <sendKeyboardToken(KeyboardToken)+0x118>
c000fd22:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd2b:	66 3d 19 03          	cmp    ax,0x319
c000fd2f:	75 06                	jne    c000fd37 <sendKeyboardToken(KeyboardToken)+0x127>
c000fd31:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3a:	66 3d 1a 03          	cmp    ax,0x31a
c000fd3e:	0f 85 c9 00 00 00    	jne    c000fe0d <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd44:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fd4a:	e9 be 00 00 00       	jmp    c000fe0d <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd52:	66 3d 10 03          	cmp    ax,0x310
c000fd56:	75 0a                	jne    c000fd62 <sendKeyboardToken(KeyboardToken)+0x152>
c000fd58:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fd5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd65:	66 3d 11 03          	cmp    ax,0x311
c000fd69:	75 0a                	jne    c000fd75 <sendKeyboardToken(KeyboardToken)+0x165>
c000fd6b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fd71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd78:	66 3d 12 03          	cmp    ax,0x312
c000fd7c:	75 0a                	jne    c000fd88 <sendKeyboardToken(KeyboardToken)+0x178>
c000fd7e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fd84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8b:	66 3d 13 03          	cmp    ax,0x313
c000fd8f:	75 0a                	jne    c000fd9b <sendKeyboardToken(KeyboardToken)+0x18b>
c000fd91:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fd97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9e:	66 3d 14 03          	cmp    ax,0x314
c000fda2:	75 0a                	jne    c000fdae <sendKeyboardToken(KeyboardToken)+0x19e>
c000fda4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fdaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb1:	66 3d 15 03          	cmp    ax,0x315
c000fdb5:	75 0a                	jne    c000fdc1 <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fdb7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fdbd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc4:	66 3d 16 03          	cmp    ax,0x316
c000fdc8:	75 0a                	jne    c000fdd4 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fdca:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fdd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd7:	66 3d 17 03          	cmp    ax,0x317
c000fddb:	75 0a                	jne    c000fde7 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fddd:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fde3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fde7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdea:	66 3d 18 03          	cmp    ax,0x318
c000fdee:	75 0a                	jne    c000fdfa <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fdf0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fdf6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdfd:	66 3d 19 03          	cmp    ax,0x319
c000fe01:	75 0a                	jne    c000fe0d <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fe03:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe10:	66 3d 00 02          	cmp    ax,0x200
c000fe14:	75 2c                	jne    c000fe42 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe16:	a0 20 86 02 c0       	mov    al,ds:0xc0028620
c000fe1b:	83 f0 01             	xor    eax,0x1
c000fe1e:	84 c0                	test   al,al
c000fe20:	74 20                	je     c000fe42 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe22:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000fe27:	6a 01                	push   0x1
c000fe29:	6a 00                	push   0x0
c000fe2b:	68 7a fa 00 c0       	push   0xc000fa7a
c000fe30:	50                   	push   eax
c000fe31:	e8 d6 86 00 00       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	c6 05 20 86 02 c0 01 	mov    BYTE PTR ds:0xc0028620,0x1
c000fe40:	eb 33                	jmp    c000fe75 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe45:	66 3d 01 02          	cmp    ax,0x201
c000fe49:	75 2a                	jne    c000fe75 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe4b:	a0 20 86 02 c0       	mov    al,ds:0xc0028620
c000fe50:	83 f0 01             	xor    eax,0x1
c000fe53:	84 c0                	test   al,al
c000fe55:	74 1e                	je     c000fe75 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe57:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c000fe5c:	6a 01                	push   0x1
c000fe5e:	6a 00                	push   0x0
c000fe60:	68 e6 fa 00 c0       	push   0xc000fae6
c000fe65:	50                   	push   eax
c000fe66:	e8 a1 86 00 00       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	c6 05 20 86 02 c0 01 	mov    BYTE PTR ds:0xc0028620,0x1
c000fe75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe78:	66 3d 1d 03          	cmp    ax,0x31d
c000fe7c:	75 06                	jne    c000fe84 <sendKeyboardToken(KeyboardToken)+0x274>
c000fe7e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fe84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe87:	66 3d 1c 03          	cmp    ax,0x31c
c000fe8b:	75 06                	jne    c000fe93 <sendKeyboardToken(KeyboardToken)+0x283>
c000fe8d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fe93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe96:	66 3d 1b 03          	cmp    ax,0x31b
c000fe9a:	75 06                	jne    c000fea2 <sendKeyboardToken(KeyboardToken)+0x292>
c000fe9c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea5:	66 3d 1e 03          	cmp    ax,0x31e
c000fea9:	75 06                	jne    c000feb1 <sendKeyboardToken(KeyboardToken)+0x2a1>
c000feab:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000feb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb4:	66 3d 1f 03          	cmp    ax,0x31f
c000feb8:	75 06                	jne    c000fec0 <sendKeyboardToken(KeyboardToken)+0x2b0>
c000feba:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec3:	66 3d 1a 03          	cmp    ax,0x31a
c000fec7:	75 06                	jne    c000fecf <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fec9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fecf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fed3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fed6:	83 f0 01             	xor    eax,0x1
c000fed9:	84 c0                	test   al,al
c000fedb:	74 77                	je     c000ff54 <sendKeyboardToken(KeyboardToken)+0x344>
c000fedd:	a0 21 83 02 c0       	mov    al,ds:0xc0028321
c000fee2:	84 c0                	test   al,al
c000fee4:	74 41                	je     c000ff27 <sendKeyboardToken(KeyboardToken)+0x317>
c000fee6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feea:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000feee:	74 2b                	je     c000ff1b <sendKeyboardToken(KeyboardToken)+0x30b>
c000fef0:	8b 15 24 86 02 c0    	mov    edx,DWORD PTR ds:0xc0028624
c000fef6:	89 d0                	mov    eax,edx
c000fef8:	c1 e0 02             	shl    eax,0x2
c000fefb:	01 d0                	add    eax,edx
c000fefd:	01 c0                	add    eax,eax
c000feff:	a3 24 86 02 c0       	mov    ds:0xc0028624,eax
c000ff04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff07:	0f b7 c0             	movzx  eax,ax
c000ff0a:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff0d:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c000ff12:	01 d0                	add    eax,edx
c000ff14:	a3 24 86 02 c0       	mov    ds:0xc0028624,eax
c000ff19:	eb 6d                	jmp    c000ff88 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff1b:	c7 05 24 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028624,0x0
c000ff25:	eb 61                	jmp    c000ff88 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff27:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 18                	je     c000ff48 <sendKeyboardToken(KeyboardToken)+0x338>
c000ff30:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c000ff35:	0f b6 c0             	movzx  eax,al
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	50                   	push   eax
c000ff3c:	e8 11 fc ff ff       	call   c000fb52 <sendKeyToTerminal(unsigned char)>
c000ff41:	83 c4 10             	add    esp,0x10
c000ff44:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff48:	c7 05 24 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028624,0x0
c000ff52:	eb 34                	jmp    c000ff88 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff57:	66 3d 01 01          	cmp    ax,0x101
c000ff5b:	75 2b                	jne    c000ff88 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff5d:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c000ff62:	85 c0                	test   eax,eax
c000ff64:	74 18                	je     c000ff7e <sendKeyboardToken(KeyboardToken)+0x36e>
c000ff66:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c000ff6b:	0f b6 c0             	movzx  eax,al
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	50                   	push   eax
c000ff72:	e8 db fb ff ff       	call   c000fb52 <sendKeyToTerminal(unsigned char)>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff7e:	c7 05 24 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028624,0x0
c000ff88:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff8b:	83 f0 01             	xor    eax,0x1
c000ff8e:	84 c0                	test   al,al
c000ff90:	74 4c                	je     c000ffde <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff92:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff95:	83 f0 01             	xor    eax,0x1
c000ff98:	84 c0                	test   al,al
c000ff9a:	74 42                	je     c000ffde <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff9c:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c000ffa1:	83 f0 01             	xor    eax,0x1
c000ffa4:	84 c0                	test   al,al
c000ffa6:	74 36                	je     c000ffde <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffab:	66 83 f8 1f          	cmp    ax,0x1f
c000ffaf:	76 09                	jbe    c000ffba <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ffb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffb4:	66 83 f8 7e          	cmp    ax,0x7e
c000ffb8:	76 12                	jbe    c000ffcc <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffbd:	66 83 f8 0a          	cmp    ax,0xa
c000ffc1:	74 09                	je     c000ffcc <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc6:	66 83 f8 08          	cmp    ax,0x8
c000ffca:	75 12                	jne    c000ffde <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffcf:	0f b6 c0             	movzx  eax,al
c000ffd2:	83 ec 0c             	sub    esp,0xc
c000ffd5:	50                   	push   eax
c000ffd6:	e8 77 fb ff ff       	call   c000fb52 <sendKeyToTerminal(unsigned char)>
c000ffdb:	83 c4 10             	add    esp,0x10
c000ffde:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ffe1:	83 f0 01             	xor    eax,0x1
c000ffe4:	84 c0                	test   al,al
c000ffe6:	74 4f                	je     c0010037 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffe8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffeb:	83 f0 01             	xor    eax,0x1
c000ffee:	84 c0                	test   al,al
c000fff0:	74 45                	je     c0010037 <sendKeyboardToken(KeyboardToken)+0x427>
c000fff2:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c000fff7:	84 c0                	test   al,al
c000fff9:	74 3c                	je     c0010037 <sendKeyboardToken(KeyboardToken)+0x427>
c000fffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fffe:	66 83 f8 3f          	cmp    ax,0x3f
c0010002:	76 33                	jbe    c0010037 <sendKeyboardToken(KeyboardToken)+0x427>
c0010004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010007:	66 83 f8 7f          	cmp    ax,0x7f
c001000b:	77 2a                	ja     c0010037 <sendKeyboardToken(KeyboardToken)+0x427>
c001000d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010010:	88 c2                	mov    dl,al
c0010012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010015:	66 83 f8 5f          	cmp    ax,0x5f
c0010019:	76 04                	jbe    c001001f <sendKeyboardToken(KeyboardToken)+0x40f>
c001001b:	b0 20                	mov    al,0x20
c001001d:	eb 02                	jmp    c0010021 <sendKeyboardToken(KeyboardToken)+0x411>
c001001f:	b0 00                	mov    al,0x0
c0010021:	29 c2                	sub    edx,eax
c0010023:	88 d0                	mov    al,dl
c0010025:	83 e8 40             	sub    eax,0x40
c0010028:	0f b6 c0             	movzx  eax,al
c001002b:	83 ec 0c             	sub    esp,0xc
c001002e:	50                   	push   eax
c001002f:	e8 1e fb ff ff       	call   c000fb52 <sendKeyToTerminal(unsigned char)>
c0010034:	83 c4 10             	add    esp,0x10
c0010037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003a:	66 3d 00 03          	cmp    ax,0x300
c001003e:	75 0f                	jne    c001004f <sendKeyboardToken(KeyboardToken)+0x43f>
c0010040:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010043:	83 f0 01             	xor    eax,0x1
c0010046:	84 c0                	test   al,al
c0010048:	74 05                	je     c001004f <sendKeyboardToken(KeyboardToken)+0x43f>
c001004a:	e8 1c ab ff ff       	call   c000ab6b <doTerminalCycle()>
c001004f:	90                   	nop
c0010050:	c9                   	leave  
c0010051:	c3                   	ret    

c0010052 <clearInternalKeybuffer(VgaText*)>:
c0010052:	55                   	push   ebp
c0010053:	89 e5                	mov    ebp,esp
c0010055:	83 ec 08             	sub    esp,0x8
c0010058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005b:	05 32 01 00 00       	add    eax,0x132
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	50                   	push   eax
c0010064:	e8 37 06 ff ff       	call   c00006a0 <strlen>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001006f:	81 c2 32 01 00 00    	add    edx,0x132
c0010075:	83 ec 04             	sub    esp,0x4
c0010078:	50                   	push   eax
c0010079:	6a 00                	push   0x0
c001007b:	52                   	push   edx
c001007c:	e8 03 06 ff ff       	call   c0000684 <memset>
c0010081:	83 c4 10             	add    esp,0x10
c0010084:	90                   	nop
c0010085:	c9                   	leave  
c0010086:	c3                   	ret    

c0010087 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010087:	55                   	push   ebp
c0010088:	89 e5                	mov    ebp,esp
c001008a:	83 ec 18             	sub    esp,0x18
c001008d:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c0010092:	85 c0                	test   eax,eax
c0010094:	74 2a                	je     c00100c0 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010096:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001009c:	8b 0d 08 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028208
c00100a2:	83 ec 04             	sub    esp,0x4
c00100a5:	68 20 82 02 c0       	push   0xc0028220
c00100aa:	83 ec 08             	sub    esp,0x8
c00100ad:	89 e2                	mov    edx,esp
c00100af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00100b2:	89 02                	mov    DWORD PTR [edx],eax
c00100b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100b7:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100bb:	ff d1                	call   ecx
c00100bd:	83 c4 10             	add    esp,0x10
c00100c0:	fb                   	sti    
c00100c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00100c8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00100cc:	0f 84 a1 00 00 00    	je     c0010173 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00100d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d5:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00100db:	84 c0                	test   al,al
c00100dd:	75 28                	jne    c0010107 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00100df:	fa                   	cli    
c00100e0:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00100e5:	40                   	inc    eax
c00100e6:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00100eb:	e8 38 86 00 00       	call   c0018728 <schedule()>
c00100f0:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00100f5:	48                   	dec    eax
c00100f6:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00100fb:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0010100:	85 c0                	test   eax,eax
c0010102:	75 ce                	jne    c00100d2 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010104:	fb                   	sti    
c0010105:	eb cb                	jmp    c00100d2 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010107:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001010a:	8d 50 01             	lea    edx,[eax+0x1]
c001010d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010110:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010113:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010119:	88 10                	mov    BYTE PTR [eax],dl
c001011b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011e:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010124:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001012a:	05 32 01 00 00       	add    eax,0x132
c001012f:	83 ec 0c             	sub    esp,0xc
c0010132:	50                   	push   eax
c0010133:	e8 68 05 ff ff       	call   c00006a0 <strlen>
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001013e:	81 c2 32 01 00 00    	add    edx,0x132
c0010144:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010147:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001014a:	81 c2 32 01 00 00    	add    edx,0x132
c0010150:	83 ec 04             	sub    esp,0x4
c0010153:	50                   	push   eax
c0010154:	51                   	push   ecx
c0010155:	52                   	push   edx
c0010156:	e8 61 04 ff ff       	call   c00005bc <memmove>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010161:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010164:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010168:	0f 85 5a ff ff ff    	jne    c00100c8 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001016e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010171:	eb 03                	jmp    c0010176 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010173:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010176:	c9                   	leave  
c0010177:	c3                   	ret    

c0010178 <Keyboard::Keyboard(char const*)>:
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001017f:	83 ec 08             	sub    esp,0x8
c0010182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010186:	50                   	push   eax
c0010187:	e8 b2 e2 ff ff       	call   c000e43e <Device::Device(char const*)>
c001018c:	83 c4 10             	add    esp,0x10
c001018f:	ba f8 50 02 c0       	mov    edx,0xc00250f8
c0010194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010198:	89 10                	mov    DWORD PTR [eax],edx
c001019a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00101a8:	c6 05 04 82 02 c0 01 	mov    BYTE PTR ds:0xc0028204,0x1
c00101af:	90                   	nop
c00101b0:	83 c4 0c             	add    esp,0xc
c00101b3:	c3                   	ret    

c00101b4 <Keyboard::~Keyboard()>:
c00101b4:	83 ec 0c             	sub    esp,0xc
c00101b7:	ba f8 50 02 c0       	mov    edx,0xc00250f8
c00101bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c0:	89 10                	mov    DWORD PTR [eax],edx
c00101c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c6:	83 ec 0c             	sub    esp,0xc
c00101c9:	50                   	push   eax
c00101ca:	e8 39 df ff ff       	call   c000e108 <Device::~Device()>
c00101cf:	83 c4 10             	add    esp,0x10
c00101d2:	90                   	nop
c00101d3:	83 c4 0c             	add    esp,0xc
c00101d6:	c3                   	ret    
c00101d7:	90                   	nop

c00101d8 <Keyboard::~Keyboard()>:
c00101d8:	83 ec 0c             	sub    esp,0xc
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e2:	e8 cd ff ff ff       	call   c00101b4 <Keyboard::~Keyboard()>
c00101e7:	83 c4 10             	add    esp,0x10
c00101ea:	83 ec 08             	sub    esp,0x8
c00101ed:	68 5c 01 00 00       	push   0x15c
c00101f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101f6:	e8 1f ca ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00101fb:	83 c4 10             	add    esp,0x10
c00101fe:	83 c4 0c             	add    esp,0xc
c0010201:	c3                   	ret    

c0010202 <LogicalDisk::close(int, int, void*)>:
c0010202:	83 c8 ff             	or     eax,0xffffffff
c0010205:	c3                   	ret    

c0010206 <LogicalDisk::~LogicalDisk()>:
c0010206:	83 ec 0c             	sub    esp,0xc
c0010209:	ba c8 51 02 c0       	mov    edx,0xc00251c8
c001020e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010212:	89 10                	mov    DWORD PTR [eax],edx
c0010214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	50                   	push   eax
c001021c:	e8 e7 de ff ff       	call   c000e108 <Device::~Device()>
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	90                   	nop
c0010225:	83 c4 0c             	add    esp,0xc
c0010228:	c3                   	ret    
c0010229:	90                   	nop

c001022a <LogicalDisk::~LogicalDisk()>:
c001022a:	83 ec 0c             	sub    esp,0xc
c001022d:	83 ec 0c             	sub    esp,0xc
c0010230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010234:	e8 cd ff ff ff       	call   c0010206 <LogicalDisk::~LogicalDisk()>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	83 ec 08             	sub    esp,0x8
c001023f:	68 74 01 00 00       	push   0x174
c0010244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010248:	e8 cd c9 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001024d:	83 c4 10             	add    esp,0x10
c0010250:	83 c4 0c             	add    esp,0xc
c0010253:	c3                   	ret    

c0010254 <LogicalDisk::open(int, int, void*)>:
c0010254:	83 ec 18             	sub    esp,0x18
c0010257:	68 24 51 02 c0       	push   0xc0025124
c001025c:	e8 62 47 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0010261:	83 c8 ff             	or     eax,0xffffffff
c0010264:	83 c4 1c             	add    esp,0x1c
c0010267:	c3                   	ret    

c0010268 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010268:	53                   	push   ebx
c0010269:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001026d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010275:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001027b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010281:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010287:	77 10                	ja     c0010299 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010289:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001028f:	89 d3                	mov    ebx,edx
c0010291:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010297:	72 05                	jb     c001029e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010299:	83 c8 ff             	or     eax,0xffffffff
c001029c:	89 c2                	mov    edx,eax
c001029e:	5b                   	pop    ebx
c001029f:	c3                   	ret    

c00102a0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00102a0:	56                   	push   esi
c00102a1:	83 c8 ff             	or     eax,0xffffffff
c00102a4:	53                   	push   ebx
c00102a5:	89 c2                	mov    edx,eax
c00102a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00102af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102b3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00102b9:	77 27                	ja     c00102e2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102bb:	89 d8                	mov    eax,ebx
c00102bd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00102c3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00102c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102ce:	89 c2                	mov    edx,eax
c00102d0:	73 10                	jae    c00102e2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102d2:	89 c8                	mov    eax,ecx
c00102d4:	89 da                	mov    edx,ebx
c00102d6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00102dc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00102e2:	5b                   	pop    ebx
c00102e3:	5e                   	pop    esi
c00102e4:	c3                   	ret    
c00102e5:	90                   	nop

c00102e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102e6:	83 ec 1c             	sub    esp,0x1c
c00102e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010300:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001030c:	83 ec 08             	sub    esp,0x8
c001030f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010313:	50                   	push   eax
c0010314:	e8 25 e1 ff ff       	call   c000e43e <Device::Device(char const*)>
c0010319:	83 c4 10             	add    esp,0x10
c001031c:	ba c8 51 02 c0       	mov    edx,0xc00251c8
c0010321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010325:	89 10                	mov    DWORD PTR [eax],edx
c0010327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001032b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010336:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001033d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010341:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001034b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001034f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010353:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010357:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001035d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010363:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010367:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001036a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001036e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010374:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001037a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001037e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010382:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001038c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010396:	90                   	nop
c0010397:	83 c4 1c             	add    esp,0x1c
c001039a:	c3                   	ret    
c001039b:	90                   	nop

c001039c <LogicalDisk::assignDriveLetter()>:
c001039c:	55                   	push   ebp
c001039d:	57                   	push   edi
c001039e:	56                   	push   esi
c001039f:	53                   	push   ebx
c00103a0:	83 ec 14             	sub    esp,0x14
c00103a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103a7:	8b 3d 40 86 02 c0    	mov    edi,DWORD PTR ds:0xc0028640
c00103ad:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00103b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103b7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00103bd:	8b 3d 44 86 02 c0    	mov    edi,DWORD PTR ds:0xc0028644
c00103c3:	3c 01                	cmp    al,0x1
c00103c5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00103c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103cd:	19 c0                	sbb    eax,eax
c00103cf:	83 e0 02             	and    eax,0x2
c00103d2:	83 c0 41             	add    eax,0x41
c00103d5:	0f be e8             	movsx  ebp,al
c00103d8:	3c 43                	cmp    al,0x43
c00103da:	75 10                	jne    c00103ec <LogicalDisk::assignDriveLetter()+0x50>
c00103dc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00103e3:	75 5d                	jne    c0010442 <LogicalDisk::assignDriveLetter()+0xa6>
c00103e5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00103ea:	75 56                	jne    c0010442 <LogicalDisk::assignDriveLetter()+0xa6>
c00103ec:	8d 75 bf             	lea    esi,[ebp-0x41]
c00103ef:	ba 01 00 00 00       	mov    edx,0x1
c00103f4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103f8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00103fc:	d3 e2                	shl    edx,cl
c00103fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010402:	89 d7                	mov    edi,edx
c0010404:	89 d6                	mov    esi,edx
c0010406:	c1 ff 1f             	sar    edi,0x1f
c0010409:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001040d:	21 f9                	and    ecx,edi
c001040f:	09 d1                	or     ecx,edx
c0010411:	75 2f                	jne    c0010442 <LogicalDisk::assignDriveLetter()+0xa6>
c0010413:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010417:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010421:	09 f2                	or     edx,esi
c0010423:	89 15 40 86 02 c0    	mov    DWORD PTR ds:0xc0028640,edx
c0010429:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001042d:	09 fa                	or     edx,edi
c001042f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010433:	89 15 44 86 02 c0    	mov    DWORD PTR ds:0xc0028644,edx
c0010439:	89 1c bd 60 86 02 c0 	mov    DWORD PTR [edi*4-0x3ffd79a0],ebx
c0010440:	eb 08                	jmp    c001044a <LogicalDisk::assignDriveLetter()+0xae>
c0010442:	45                   	inc    ebp
c0010443:	40                   	inc    eax
c0010444:	3c 5b                	cmp    al,0x5b
c0010446:	75 90                	jne    c00103d8 <LogicalDisk::assignDriveLetter()+0x3c>
c0010448:	31 c0                	xor    eax,eax
c001044a:	83 c4 14             	add    esp,0x14
c001044d:	5b                   	pop    ebx
c001044e:	5e                   	pop    esi
c001044f:	5f                   	pop    edi
c0010450:	5d                   	pop    ebp
c0010451:	c3                   	ret    

c0010452 <LogicalDisk::mount()>:
c0010452:	56                   	push   esi
c0010453:	53                   	push   ebx
c0010454:	83 ec 1c             	sub    esp,0x1c
c0010457:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001045b:	8b 1d d4 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d4
c0010461:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010468:	50                   	push   eax
c0010469:	68 48 51 02 c0       	push   0xc0025148
c001046e:	e8 88 c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0010473:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	85 db                	test   ebx,ebx
c0010482:	74 4e                	je     c00104d2 <LogicalDisk::mount()+0x80>
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	68 69 51 02 c0       	push   0xc0025169
c001048c:	e8 6a c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0010491:	83 c4 0c             	add    esp,0xc
c0010494:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001049b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001049d:	83 e8 41             	sub    eax,0x41
c00104a0:	50                   	push   eax
c00104a1:	56                   	push   esi
c00104a2:	53                   	push   ebx
c00104a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00104a6:	83 c4 10             	add    esp,0x10
c00104a9:	84 c0                	test   al,al
c00104ab:	74 20                	je     c00104cd <LogicalDisk::mount()+0x7b>
c00104ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104b1:	83 ec 0c             	sub    esp,0xc
c00104b4:	68 85 51 02 c0       	push   0xc0025185
c00104b9:	e8 3d c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00104be:	83 c4 10             	add    esp,0x10
c00104c1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00104c7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104cb:	eb 07                	jmp    c00104d4 <LogicalDisk::mount()+0x82>
c00104cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104d0:	eb ae                	jmp    c0010480 <LogicalDisk::mount()+0x2e>
c00104d2:	31 c0                	xor    eax,eax
c00104d4:	83 c4 14             	add    esp,0x14
c00104d7:	5b                   	pop    ebx
c00104d8:	5e                   	pop    esi
c00104d9:	c3                   	ret    

c00104da <LogicalDisk::unmount()>:
c00104da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00104e8:	c3                   	ret    
c00104e9:	90                   	nop

c00104ea <LogicalDisk::eject()>:
c00104ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00104f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00104f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00104fa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00104fd:	90                   	nop

c00104fe <LogicalDisk::unassignDriveLetter()>:
c00104fe:	57                   	push   edi
c00104ff:	56                   	push   esi
c0010500:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010504:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001050b:	84 c9                	test   cl,cl
c001050d:	75 0f                	jne    c001051e <LogicalDisk::unassignDriveLetter()+0x20>
c001050f:	c7 44 24 0c 9e 51 02 c0 	mov    DWORD PTR [esp+0xc],0xc002519e
c0010517:	5e                   	pop    esi
c0010518:	5f                   	pop    edi
c0010519:	e9 a5 44 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c001051e:	83 e9 41             	sub    ecx,0x41
c0010521:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010528:	b8 01 00 00 00       	mov    eax,0x1
c001052d:	c7 04 8d 60 86 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd79a0],0x0
c0010538:	d3 e0                	shl    eax,cl
c001053a:	89 c7                	mov    edi,eax
c001053c:	f7 d0                	not    eax
c001053e:	c1 ff 1f             	sar    edi,0x1f
c0010541:	21 05 40 86 02 c0    	and    DWORD PTR ds:0xc0028640,eax
c0010547:	89 fe                	mov    esi,edi
c0010549:	f7 d6                	not    esi
c001054b:	21 35 44 86 02 c0    	and    DWORD PTR ds:0xc0028644,esi
c0010551:	5e                   	pop    esi
c0010552:	5f                   	pop    edi
c0010553:	c3                   	ret    

c0010554 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010554:	57                   	push   edi
c0010555:	56                   	push   esi
c0010556:	53                   	push   ebx
c0010557:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001055b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001055f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010567:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001056d:	77 41                	ja     c00105b0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001056f:	99                   	cdq    
c0010570:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010576:	01 c8                	add    eax,ecx
c0010578:	11 da                	adc    edx,ebx
c001057a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010580:	19 d7                	sbb    edi,edx
c0010582:	72 33                	jb     c00105b7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010584:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001058a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010590:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010594:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010598:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001059e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00105a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105a8:	5b                   	pop    ebx
c00105a9:	5e                   	pop    esi
c00105aa:	5f                   	pop    edi
c00105ab:	e9 e2 0a 00 00       	jmp    c0011092 <VCache::read(unsigned long long, int, void*)>
c00105b0:	b8 05 00 00 00       	mov    eax,0x5
c00105b5:	eb 05                	jmp    c00105bc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00105b7:	b8 07 00 00 00       	mov    eax,0x7
c00105bc:	5b                   	pop    ebx
c00105bd:	5e                   	pop    esi
c00105be:	5f                   	pop    edi
c00105bf:	c3                   	ret    

c00105c0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00105c0:	57                   	push   edi
c00105c1:	56                   	push   esi
c00105c2:	53                   	push   ebx
c00105c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00105cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105d9:	77 41                	ja     c001061c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00105db:	99                   	cdq    
c00105dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105e2:	01 c8                	add    eax,ecx
c00105e4:	11 da                	adc    edx,ebx
c00105e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105ec:	19 d7                	sbb    edi,edx
c00105ee:	72 33                	jb     c0010623 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00105f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00105fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010600:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010604:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001060a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010610:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010614:	5b                   	pop    ebx
c0010615:	5e                   	pop    esi
c0010616:	5f                   	pop    edi
c0010617:	e9 7c 09 00 00       	jmp    c0010f98 <VCache::write(unsigned long long, int, void*)>
c001061c:	b8 05 00 00 00       	mov    eax,0x5
c0010621:	eb 05                	jmp    c0010628 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010623:	b8 07 00 00 00       	mov    eax,0x7
c0010628:	5b                   	pop    ebx
c0010629:	5e                   	pop    esi
c001062a:	5f                   	pop    edi
c001062b:	c3                   	ret    

c001062c <Mouse::Mouse(char const*)>:
c001062c:	83 ec 0c             	sub    esp,0xc
c001062f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010633:	83 ec 08             	sub    esp,0x8
c0010636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063a:	50                   	push   eax
c001063b:	e8 fe dd ff ff       	call   c000e43e <Device::Device(char const*)>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c0010648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064c:	89 10                	mov    DWORD PTR [eax],edx
c001064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010652:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001065c:	90                   	nop
c001065d:	83 c4 0c             	add    esp,0xc
c0010660:	c3                   	ret    
c0010661:	90                   	nop
c0010662:	66 90                	xchg   ax,ax

c0010664 <Mouse::~Mouse()>:
c0010664:	83 ec 0c             	sub    esp,0xc
c0010667:	ba f4 51 02 c0       	mov    edx,0xc00251f4
c001066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010670:	89 10                	mov    DWORD PTR [eax],edx
c0010672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010676:	83 ec 0c             	sub    esp,0xc
c0010679:	50                   	push   eax
c001067a:	e8 89 da ff ff       	call   c000e108 <Device::~Device()>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	90                   	nop
c0010683:	83 c4 0c             	add    esp,0xc
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <Mouse::~Mouse()>:
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	83 ec 0c             	sub    esp,0xc
c001068e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010692:	e8 cd ff ff ff       	call   c0010664 <Mouse::~Mouse()>
c0010697:	83 c4 10             	add    esp,0x10
c001069a:	83 ec 08             	sub    esp,0x8
c001069d:	68 58 01 00 00       	push   0x158
c00106a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a6:	e8 6f c5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	83 c4 0c             	add    esp,0xc
c00106b1:	c3                   	ret    

c00106b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106b2:	55                   	push   ebp
c00106b3:	57                   	push   edi
c00106b4:	56                   	push   esi
c00106b5:	53                   	push   ebx
c00106b6:	81 ec 28 01 00 00    	sub    esp,0x128
c00106bc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00106c3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00106ca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00106d1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00106d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00106dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00106e0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00106e7:	e8 4e de ff ff       	call   c000e53a <Device::getName()>
c00106ec:	5a                   	pop    edx
c00106ed:	59                   	pop    ecx
c00106ee:	50                   	push   eax
c00106ef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00106f3:	55                   	push   ebp
c00106f4:	e8 47 00 ff ff       	call   c0000740 <strcpy>
c00106f9:	5b                   	pop    ebx
c00106fa:	58                   	pop    eax
c00106fb:	68 18 52 02 c0       	push   0xc0025218
c0010700:	55                   	push   ebp
c0010701:	e8 7a 01 ff ff       	call   c0000880 <strcat>
c0010706:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001070d:	e8 fd 92 ff ff       	call   c0009a0f <malloc>
c0010712:	83 c4 0c             	add    esp,0xc
c0010715:	89 c3                	mov    ebx,eax
c0010717:	57                   	push   edi
c0010718:	56                   	push   esi
c0010719:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001071d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010721:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010728:	55                   	push   ebp
c0010729:	50                   	push   eax
c001072a:	e8 b7 fb ff ff       	call   c00102e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001072f:	83 c4 14             	add    esp,0x14
c0010732:	53                   	push   ebx
c0010733:	e8 64 fc ff ff       	call   c001039c <LogicalDisk::assignDriveLetter()>
c0010738:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001073b:	e8 12 fd ff ff       	call   c0010452 <LogicalDisk::mount()>
c0010740:	58                   	pop    eax
c0010741:	5a                   	pop    edx
c0010742:	53                   	push   ebx
c0010743:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001074a:	e8 eb da ff ff       	call   c000e23a <Device::addChild(Device*)>
c001074f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010755:	5b                   	pop    ebx
c0010756:	5e                   	pop    esi
c0010757:	5f                   	pop    edi
c0010758:	5d                   	pop    ebp
c0010759:	c3                   	ret    

c001075a <createPartitionsForDisk(PhysicalDisk*)>:
c001075a:	55                   	push   ebp
c001075b:	57                   	push   edi
c001075c:	56                   	push   esi
c001075d:	53                   	push   ebx
c001075e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010764:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001076b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010771:	3d 00 02 00 00       	cmp    eax,0x200
c0010776:	74 27                	je     c001079f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010778:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001077e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010784:	83 ec 10             	sub    esp,0x10
c0010787:	0f a4 f7 0a          	shld   edi,esi,0xa
c001078b:	99                   	cdq    
c001078c:	c1 e6 0a             	shl    esi,0xa
c001078f:	52                   	push   edx
c0010790:	89 fd                	mov    ebp,edi
c0010792:	50                   	push   eax
c0010793:	55                   	push   ebp
c0010794:	56                   	push   esi
c0010795:	e8 4a 20 01 00       	call   c00227e4 <__udivdi3>
c001079a:	e9 b1 00 00 00       	jmp    c0010850 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001079f:	83 ec 0c             	sub    esp,0xc
c00107a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00107a8:	56                   	push   esi
c00107a9:	6a 01                	push   0x1
c00107ab:	6a 00                	push   0x0
c00107ad:	6a 00                	push   0x0
c00107af:	53                   	push   ebx
c00107b0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00107b3:	83 c4 20             	add    esp,0x20
c00107b6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00107be:	75 0a                	jne    c00107ca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00107c0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00107c8:	74 2c                	je     c00107f6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00107ca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107d0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107dc:	83 ec 10             	sub    esp,0x10
c00107df:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107e3:	89 f7                	mov    edi,esi
c00107e5:	c1 e0 0a             	shl    eax,0xa
c00107e8:	c1 ff 1f             	sar    edi,0x1f
c00107eb:	57                   	push   edi
c00107ec:	56                   	push   esi
c00107ed:	52                   	push   edx
c00107ee:	50                   	push   eax
c00107ef:	e8 f0 1f 01 00       	call   c00227e4 <__udivdi3>
c00107f4:	eb 5a                	jmp    c0010850 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107f6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00107fd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010804:	83 e1 7f             	and    ecx,0x7f
c0010807:	83 e0 7f             	and    eax,0x7f
c001080a:	01 c1                	add    ecx,eax
c001080c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010813:	83 e0 7f             	and    eax,0x7f
c0010816:	01 c1                	add    ecx,eax
c0010818:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001081f:	83 e0 7f             	and    eax,0x7f
c0010822:	00 c1                	add    cl,al
c0010824:	74 41                	je     c0010867 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010826:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001082c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010832:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010838:	83 ec 10             	sub    esp,0x10
c001083b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001083f:	89 f7                	mov    edi,esi
c0010841:	c1 e0 0a             	shl    eax,0xa
c0010844:	c1 ff 1f             	sar    edi,0x1f
c0010847:	57                   	push   edi
c0010848:	56                   	push   esi
c0010849:	52                   	push   edx
c001084a:	50                   	push   eax
c001084b:	e8 94 1f 01 00       	call   c00227e4 <__udivdi3>
c0010850:	83 c4 14             	add    esp,0x14
c0010853:	52                   	push   edx
c0010854:	50                   	push   eax
c0010855:	6a 00                	push   0x0
c0010857:	6a 00                	push   0x0
c0010859:	53                   	push   ebx
c001085a:	e8 53 fe ff ff       	call   c00106b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001085f:	83 c4 20             	add    esp,0x20
c0010862:	e9 79 01 00 00       	jmp    c00109e0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010867:	89 f0                	mov    eax,esi
c0010869:	31 f6                	xor    esi,esi
c001086b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010872:	75 02                	jne    c0010876 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010874:	89 f1                	mov    ecx,esi
c0010876:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001087d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010884:	c1 e2 08             	shl    edx,0x8
c0010887:	c1 e7 10             	shl    edi,0x10
c001088a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010892:	09 fa                	or     edx,edi
c0010894:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001089c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00108a3:	83 c0 10             	add    eax,0x10
c00108a6:	09 fa                	or     edx,edi
c00108a8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00108af:	c1 e7 18             	shl    edi,0x18
c00108b2:	09 fa                	or     edx,edi
c00108b4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00108bb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00108bf:	c1 e7 10             	shl    edi,0x10
c00108c2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00108c9:	c1 e2 08             	shl    edx,0x8
c00108cc:	09 fa                	or     edx,edi
c00108ce:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00108d5:	09 fa                	or     edx,edi
c00108d7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00108de:	c1 e7 18             	shl    edi,0x18
c00108e1:	09 fa                	or     edx,edi
c00108e3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00108e7:	46                   	inc    esi
c00108e8:	83 fe 04             	cmp    esi,0x4
c00108eb:	0f 85 7a ff ff ff    	jne    c001086b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00108f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f5:	83 f0 01             	xor    eax,0x1
c00108f8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00108fc:	75 57                	jne    c0010955 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00108fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010902:	83 f0 01             	xor    eax,0x1
c0010905:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010909:	75 4a                	jne    c0010955 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001090b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001090f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010917:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001091f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010925:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001092b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010931:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010935:	89 f7                	mov    edi,esi
c0010937:	c1 e0 0a             	shl    eax,0xa
c001093a:	c1 ff 1f             	sar    edi,0x1f
c001093d:	57                   	push   edi
c001093e:	56                   	push   esi
c001093f:	52                   	push   edx
c0010940:	50                   	push   eax
c0010941:	e8 9e 1e 01 00       	call   c00227e4 <__udivdi3>
c0010946:	83 c4 10             	add    esp,0x10
c0010949:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001094d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010951:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010955:	84 c9                	test   cl,cl
c0010957:	74 53                	je     c00109ac <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010959:	0f b6 c9             	movzx  ecx,cl
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010964:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010968:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001096c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010974:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010978:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001097c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010988:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001098c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010990:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010994:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010998:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001099c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00109a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00109a4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00109a8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00109ac:	31 ed                	xor    ebp,ebp
c00109ae:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00109b2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00109b6:	89 f8                	mov    eax,edi
c00109b8:	09 f0                	or     eax,esi
c00109ba:	74 1e                	je     c00109da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109bc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00109c0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00109c4:	89 d1                	mov    ecx,edx
c00109c6:	09 c1                	or     ecx,eax
c00109c8:	74 10                	je     c00109da <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	57                   	push   edi
c00109ce:	56                   	push   esi
c00109cf:	52                   	push   edx
c00109d0:	50                   	push   eax
c00109d1:	53                   	push   ebx
c00109d2:	e8 db fc ff ff       	call   c00106b2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00109d7:	83 c4 20             	add    esp,0x20
c00109da:	45                   	inc    ebp
c00109db:	83 fd 04             	cmp    ebp,0x4
c00109de:	75 ce                	jne    c00109ae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00109e0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00109e6:	5b                   	pop    ebx
c00109e7:	5e                   	pop    esi
c00109e8:	5f                   	pop    edi
c00109e9:	5d                   	pop    ebp
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <Serial::Serial(char const*)>:
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f3:	83 ec 08             	sub    esp,0x8
c00109f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fa:	50                   	push   eax
c00109fb:	e8 3e da ff ff       	call   c000e43e <Device::Device(char const*)>
c0010a00:	83 c4 10             	add    esp,0x10
c0010a03:	ba 2c 52 02 c0       	mov    edx,0xc002522c
c0010a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a0c:	89 10                	mov    DWORD PTR [eax],edx
c0010a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a12:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a1c:	90                   	nop
c0010a1d:	83 c4 0c             	add    esp,0xc
c0010a20:	c3                   	ret    
c0010a21:	90                   	nop
c0010a22:	66 90                	xchg   ax,ax

c0010a24 <Serial::~Serial()>:
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	ba 2c 52 02 c0       	mov    edx,0xc002522c
c0010a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a30:	89 10                	mov    DWORD PTR [eax],edx
c0010a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a36:	83 ec 0c             	sub    esp,0xc
c0010a39:	50                   	push   eax
c0010a3a:	e8 c9 d6 ff ff       	call   c000e108 <Device::~Device()>
c0010a3f:	83 c4 10             	add    esp,0x10
c0010a42:	90                   	nop
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	c3                   	ret    
c0010a47:	90                   	nop

c0010a48 <Serial::~Serial()>:
c0010a48:	83 ec 0c             	sub    esp,0xc
c0010a4b:	83 ec 0c             	sub    esp,0xc
c0010a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a52:	e8 cd ff ff ff       	call   c0010a24 <Serial::~Serial()>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	83 ec 08             	sub    esp,0x8
c0010a5d:	68 58 01 00 00       	push   0x158
c0010a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a66:	e8 af c1 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	83 c4 0c             	add    esp,0xc
c0010a71:	c3                   	ret    
c0010a72:	66 90                	xchg   ax,ax

c0010a74 <Timer::Timer(char const*)>:
c0010a74:	83 ec 0c             	sub    esp,0xc
c0010a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7b:	83 ec 08             	sub    esp,0x8
c0010a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a82:	50                   	push   eax
c0010a83:	e8 b6 d9 ff ff       	call   c000e43e <Device::Device(char const*)>
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	ba 70 52 02 c0       	mov    edx,0xc0025270
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010aa4:	90                   	nop
c0010aa5:	83 c4 0c             	add    esp,0xc
c0010aa8:	c3                   	ret    
c0010aa9:	90                   	nop
c0010aaa:	66 90                	xchg   ax,ax

c0010aac <Timer::~Timer()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	ba 70 52 02 c0       	mov    edx,0xc0025270
c0010ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab8:	89 10                	mov    DWORD PTR [eax],edx
c0010aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abe:	83 ec 0c             	sub    esp,0xc
c0010ac1:	50                   	push   eax
c0010ac2:	e8 41 d6 ff ff       	call   c000e108 <Device::~Device()>
c0010ac7:	83 c4 10             	add    esp,0x10
c0010aca:	90                   	nop
c0010acb:	83 c4 0c             	add    esp,0xc
c0010ace:	c3                   	ret    
c0010acf:	90                   	nop

c0010ad0 <Timer::~Timer()>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	83 ec 0c             	sub    esp,0xc
c0010ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ada:	e8 cd ff ff ff       	call   c0010aac <Timer::~Timer()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	83 ec 08             	sub    esp,0x8
c0010ae5:	68 5c 01 00 00       	push   0x15c
c0010aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aee:	e8 27 c1 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010af3:	83 c4 10             	add    esp,0x10
c0010af6:	83 c4 0c             	add    esp,0xc
c0010af9:	c3                   	ret    

c0010afa <Timer::read()>:
c0010afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b04:	c3                   	ret    

c0010b05 <timerHandler(unsigned int)>:
c0010b05:	56                   	push   esi
c0010b06:	53                   	push   ebx
c0010b07:	51                   	push   ecx
c0010b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0c:	01 05 cc 86 02 c0    	add    DWORD PTR ds:0xc00286cc,eax
c0010b12:	80 3d ad 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280ad,0x0
c0010b19:	0f 84 49 01 00 00    	je     c0010c68 <timerHandler(unsigned int)+0x163>
c0010b1f:	fa                   	cli    
c0010b20:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0010b26:	83 ec 0c             	sub    esp,0xc
c0010b29:	ff 05 c4 95 02 c0    	inc    DWORD PTR ds:0xc00295c4
c0010b2f:	68 d8 95 02 c0       	push   0xc00295d8
c0010b34:	e8 7b 22 01 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b39:	83 c4 10             	add    esp,0x10
c0010b3c:	84 c0                	test   al,al
c0010b3e:	0f 85 a0 00 00 00    	jne    c0010be4 <timerHandler(unsigned int)+0xdf>
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	68 d8 95 02 c0       	push   0xc00295d8
c0010b4c:	e8 7f 22 01 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	89 c6                	mov    esi,eax
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	83 ec 0c             	sub    esp,0xc
c0010b5b:	68 d8 95 02 c0       	push   0xc00295d8
c0010b60:	e8 6b 22 01 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b65:	c7 04 24 d8 95 02 c0 	mov    DWORD PTR [esp],0xc00295d8
c0010b6c:	89 c3                	mov    ebx,eax
c0010b6e:	e8 65 22 01 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010b73:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010b76:	83 c4 10             	add    esp,0x10
c0010b79:	3b 05 cc 86 02 c0    	cmp    eax,DWORD PTR ds:0xc00286cc
c0010b7f:	77 23                	ja     c0010ba4 <timerHandler(unsigned int)+0x9f>
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	53                   	push   ebx
c0010b85:	e8 5a 80 00 00       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	39 de                	cmp    esi,ebx
c0010b8f:	75 27                	jne    c0010bb8 <timerHandler(unsigned int)+0xb3>
c0010b91:	83 ec 0c             	sub    esp,0xc
c0010b94:	68 d8 95 02 c0       	push   0xc00295d8
c0010b99:	e8 32 22 01 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b9e:	89 c6                	mov    esi,eax
c0010ba0:	eb 12                	jmp    c0010bb4 <timerHandler(unsigned int)+0xaf>
c0010ba2:	66 90                	xchg   ax,ax
c0010ba4:	52                   	push   edx
c0010ba5:	52                   	push   edx
c0010ba6:	53                   	push   ebx
c0010ba7:	68 d8 95 02 c0       	push   0xc00295d8
c0010bac:	e8 df 22 01 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	90                   	nop
c0010bb8:	83 ec 0c             	sub    esp,0xc
c0010bbb:	68 d8 95 02 c0       	push   0xc00295d8
c0010bc0:	e8 ef 21 01 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010bc5:	83 c4 10             	add    esp,0x10
c0010bc8:	84 c0                	test   al,al
c0010bca:	75 18                	jne    c0010be4 <timerHandler(unsigned int)+0xdf>
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	68 d8 95 02 c0       	push   0xc00295d8
c0010bd4:	e8 f7 21 01 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bd9:	83 c4 10             	add    esp,0x10
c0010bdc:	39 f0                	cmp    eax,esi
c0010bde:	0f 85 74 ff ff ff    	jne    c0010b58 <timerHandler(unsigned int)+0x53>
c0010be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010be9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010bed:	74 41                	je     c0010c30 <timerHandler(unsigned int)+0x12b>
c0010bef:	80 3d ac 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280ac,0x0
c0010bf6:	74 38                	je     c0010c30 <timerHandler(unsigned int)+0x12b>
c0010bf8:	fa                   	cli    
c0010bf9:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0010bff:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c0010c04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c0a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c13:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c16:	72 08                	jb     c0010c20 <timerHandler(unsigned int)+0x11b>
c0010c18:	e8 0b 7b 00 00       	call   c0018728 <schedule()>
c0010c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c20:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0010c25:	48                   	dec    eax
c0010c26:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0010c2b:	75 03                	jne    c0010c30 <timerHandler(unsigned int)+0x12b>
c0010c2d:	fb                   	sti    
c0010c2e:	66 90                	xchg   ax,ax
c0010c30:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0010c35:	48                   	dec    eax
c0010c36:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c0010c3b:	75 1b                	jne    c0010c58 <timerHandler(unsigned int)+0x153>
c0010c3d:	83 3d c0 95 02 c0 00 	cmp    DWORD PTR ds:0xc00295c0,0x0
c0010c44:	74 12                	je     c0010c58 <timerHandler(unsigned int)+0x153>
c0010c46:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c0010c50:	e8 d3 7a 00 00       	call   c0018728 <schedule()>
c0010c55:	8d 76 00             	lea    esi,[esi+0x0]
c0010c58:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0010c5d:	48                   	dec    eax
c0010c5e:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0010c63:	75 03                	jne    c0010c68 <timerHandler(unsigned int)+0x163>
c0010c65:	fb                   	sti    
c0010c66:	66 90                	xchg   ax,ax
c0010c68:	58                   	pop    eax
c0010c69:	5b                   	pop    ebx
c0010c6a:	5e                   	pop    esi
c0010c6b:	c3                   	ret    

c0010c6c <setupTimer(int)>:
c0010c6c:	57                   	push   edi
c0010c6d:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0010c72:	56                   	push   esi
c0010c73:	53                   	push   ebx
c0010c74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c87:	e8 ae d8 ff ff       	call   c000e53a <Device::getName()>
c0010c8c:	83 c4 10             	add    esp,0x10
c0010c8f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c92:	0f 85 94 00 00 00    	jne    c0010d2c <setupTimer(int)+0xc0>
c0010c98:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0010c9d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010ca4:	0f 84 82 00 00 00    	je     c0010d2c <setupTimer(int)+0xc0>
c0010caa:	83 ec 0c             	sub    esp,0xc
c0010cad:	68 5c 01 00 00       	push   0x15c
c0010cb2:	e8 58 8d ff ff       	call   c0009a0f <malloc>
c0010cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cba:	89 c3                	mov    ebx,eax
c0010cbc:	e8 ff 16 01 00       	call   c00223c0 <PIT::PIT()>
c0010cc1:	59                   	pop    ecx
c0010cc2:	5f                   	pop    edi
c0010cc3:	53                   	push   ebx
c0010cc4:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0010cca:	e8 6b d5 ff ff       	call   c000e23a <Device::addChild(Device*)>
c0010ccf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cd1:	6a 00                	push   0x0
c0010cd3:	6a 00                	push   0x0
c0010cd5:	56                   	push   esi
c0010cd6:	53                   	push   ebx
c0010cd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010cda:	83 c4 14             	add    esp,0x14
c0010cdd:	68 60 01 00 00       	push   0x160
c0010ce2:	e8 28 8d ff ff       	call   c0009a0f <malloc>
c0010ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cea:	89 c7                	mov    edi,eax
c0010cec:	e8 83 15 01 00       	call   c0022274 <APICTimer::APICTimer()>
c0010cf1:	6a 00                	push   0x0
c0010cf3:	6a 00                	push   0x0
c0010cf5:	56                   	push   esi
c0010cf6:	57                   	push   edi
c0010cf7:	e8 78 14 01 00       	call   c0022174 <APICTimer::open(int, int, void*)>
c0010cfc:	83 c4 20             	add    esp,0x20
c0010cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d01:	6a 00                	push   0x0
c0010d03:	6a 00                	push   0x0
c0010d05:	6a 00                	push   0x0
c0010d07:	53                   	push   ebx
c0010d08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d0b:	58                   	pop    eax
c0010d0c:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0010d11:	5a                   	pop    edx
c0010d12:	57                   	push   edi
c0010d13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d19:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d1f:	e8 16 d5 ff ff       	call   c000e23a <Device::addChild(Device*)>
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	eb 37                	jmp    c0010d60 <setupTimer(int)+0xf4>
c0010d29:	8d 76 00             	lea    esi,[esi+0x0]
c0010d2c:	83 ec 0c             	sub    esp,0xc
c0010d2f:	68 5c 01 00 00       	push   0x15c
c0010d34:	e8 d6 8c ff ff       	call   c0009a0f <malloc>
c0010d39:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d3c:	89 c3                	mov    ebx,eax
c0010d3e:	e8 7d 16 01 00       	call   c00223c0 <PIT::PIT()>
c0010d43:	58                   	pop    eax
c0010d44:	5a                   	pop    edx
c0010d45:	53                   	push   ebx
c0010d46:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0010d4c:	e8 e9 d4 ff ff       	call   c000e23a <Device::addChild(Device*)>
c0010d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d53:	6a 00                	push   0x0
c0010d55:	6a 00                	push   0x0
c0010d57:	56                   	push   esi
c0010d58:	53                   	push   ebx
c0010d59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d5c:	83 c4 20             	add    esp,0x20
c0010d5f:	90                   	nop
c0010d60:	89 d8                	mov    eax,ebx
c0010d62:	5b                   	pop    ebx
c0010d63:	5e                   	pop    esi
c0010d64:	5f                   	pop    edi
c0010d65:	c3                   	ret    
c0010d66:	66 90                	xchg   ax,ax

c0010d68 <VCache::VCache(PhysicalDisk*)>:
c0010d68:	53                   	push   ebx
c0010d69:	83 ec 18             	sub    esp,0x18
c0010d6c:	ba a0 52 02 c0       	mov    edx,0xc00252a0
c0010d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d75:	89 10                	mov    DWORD PTR [eax],edx
c0010d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d7b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d86:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d91:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010d98:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010d9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010daa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010db5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010dcf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010dd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010df9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010e01:	83 ec 0c             	sub    esp,0xc
c0010e04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e08:	e8 02 8c ff ff       	call   c0009a0f <malloc>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	89 c3                	mov    ebx,eax
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	53                   	push   ebx
c0010e16:	e8 dd 76 00 00       	call   c00184f8 <Mutex::Mutex()>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e22:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e2d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e34:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010e3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e3f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010e45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e50:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010e56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010e5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010e60:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010e63:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e6a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e6e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e72:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e78:	05 00 01 00 00       	add    eax,0x100
c0010e7d:	c1 e0 04             	shl    eax,0x4
c0010e80:	83 ec 0c             	sub    esp,0xc
c0010e83:	50                   	push   eax
c0010e84:	e8 86 8b ff ff       	call   c0009a0f <malloc>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	89 c2                	mov    edx,eax
c0010e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e99:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ea8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010eb2:	c1 e0 06             	shl    eax,0x6
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	50                   	push   eax
c0010eb9:	e8 51 8b ff ff       	call   c0009a0f <malloc>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 c2                	mov    edx,eax
c0010ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ec7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010eca:	90                   	nop
c0010ecb:	83 c4 18             	add    esp,0x18
c0010ece:	5b                   	pop    ebx
c0010ecf:	c3                   	ret    

c0010ed0 <VCache::invalidateReadBuffer()>:
c0010ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010eda:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ede:	c3                   	ret    
c0010edf:	90                   	nop

c0010ee0 <VCache::writeWriteBuffer()>:
c0010ee0:	53                   	push   ebx
c0010ee1:	83 ec 14             	sub    esp,0x14
c0010ee4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010ee8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010eeb:	8b 10                	mov    edx,DWORD PTR [eax]
c0010eed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ef0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ef3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010ef6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010ef9:	50                   	push   eax
c0010efa:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010efd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010f04:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f0b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f0f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f16:	83 c4 28             	add    esp,0x28
c0010f19:	5b                   	pop    ebx
c0010f1a:	c3                   	ret    
c0010f1b:	90                   	nop

c0010f1c <VCache::~VCache()>:
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	ba a0 52 02 c0       	mov    edx,0xc00252a0
c0010f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f28:	89 10                	mov    DWORD PTR [eax],edx
c0010f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010f31:	84 c0                	test   al,al
c0010f33:	74 0f                	je     c0010f44 <VCache::~VCache()+0x28>
c0010f35:	83 ec 0c             	sub    esp,0xc
c0010f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f3c:	e8 9f ff ff ff       	call   c0010ee0 <VCache::writeWriteBuffer()>
c0010f41:	83 c4 10             	add    esp,0x10
c0010f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f48:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	50                   	push   eax
c0010f4f:	e8 cb 8a ff ff       	call   c0009a1f <free>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010f5e:	83 ec 0c             	sub    esp,0xc
c0010f61:	50                   	push   eax
c0010f62:	e8 b8 8a ff ff       	call   c0009a1f <free>
c0010f67:	83 c4 10             	add    esp,0x10
c0010f6a:	90                   	nop
c0010f6b:	83 c4 0c             	add    esp,0xc
c0010f6e:	c3                   	ret    
c0010f6f:	90                   	nop

c0010f70 <VCache::~VCache()>:
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	83 ec 0c             	sub    esp,0xc
c0010f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7a:	e8 9d ff ff ff       	call   c0010f1c <VCache::~VCache()>
c0010f7f:	83 c4 10             	add    esp,0x10
c0010f82:	83 ec 08             	sub    esp,0x8
c0010f85:	6a 44                	push   0x44
c0010f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f8b:	e8 8a bc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	83 c4 0c             	add    esp,0xc
c0010f96:	c3                   	ret    
c0010f97:	90                   	nop

c0010f98 <VCache::write(unsigned long long, int, void*)>:
c0010f98:	55                   	push   ebp
c0010f99:	31 c0                	xor    eax,eax
c0010f9b:	57                   	push   edi
c0010f9c:	56                   	push   esi
c0010f9d:	53                   	push   ebx
c0010f9e:	83 ec 0c             	sub    esp,0xc
c0010fa1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fa5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fa9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fad:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010fb4:	7d 1a                	jge    c0010fd0 <VCache::write(unsigned long long, int, void*)+0x38>
c0010fb6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fb9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fbf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fc3:	0f af c8             	imul   ecx,eax
c0010fc6:	01 ca                	add    edx,ecx
c0010fc8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fca:	40                   	inc    eax
c0010fcb:	eb e3                	jmp    c0010fb0 <VCache::write(unsigned long long, int, void*)+0x18>
c0010fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010fd4:	74 0a                	je     c0010fe0 <VCache::write(unsigned long long, int, void*)+0x48>
c0010fd6:	53                   	push   ebx
c0010fd7:	e8 f4 fe ff ff       	call   c0010ed0 <VCache::invalidateReadBuffer()>
c0010fdc:	58                   	pop    eax
c0010fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fe0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fe4:	74 5e                	je     c0011044 <VCache::write(unsigned long long, int, void*)+0xac>
c0010fe6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010fe9:	89 e8                	mov    eax,ebp
c0010feb:	99                   	cdq    
c0010fec:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010fef:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010ff2:	89 c1                	mov    ecx,eax
c0010ff4:	89 d0                	mov    eax,edx
c0010ff6:	31 f1                	xor    ecx,esi
c0010ff8:	31 f8                	xor    eax,edi
c0010ffa:	09 c1                	or     ecx,eax
c0010ffc:	75 3a                	jne    c0011038 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010ffe:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011003:	75 33                	jne    c0011038 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011005:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011008:	89 ef                	mov    edi,ebp
c001100a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011010:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011014:	0f af f9             	imul   edi,ecx
c0011017:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001101a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001101c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001101f:	40                   	inc    eax
c0011020:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011023:	83 f8 40             	cmp    eax,0x40
c0011026:	75 60                	jne    c0011088 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	53                   	push   ebx
c001102c:	e8 af fe ff ff       	call   c0010ee0 <VCache::writeWriteBuffer()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	eb 52                	jmp    c0011088 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011036:	66 90                	xchg   ax,ax
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	53                   	push   ebx
c001103c:	e8 9f fe ff ff       	call   c0010ee0 <VCache::writeWriteBuffer()>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011047:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c001104c:	7f 22                	jg     c0011070 <VCache::write(unsigned long long, int, void*)+0xd8>
c001104e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011051:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011054:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011058:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001105c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001105f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011062:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011068:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001106c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001106e:	eb 18                	jmp    c0011088 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	8b 10                	mov    edx,DWORD PTR [eax]
c0011075:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001107d:	57                   	push   edi
c001107e:	56                   	push   esi
c001107f:	50                   	push   eax
c0011080:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011083:	83 c4 20             	add    esp,0x20
c0011086:	66 90                	xchg   ax,ax
c0011088:	83 c4 0c             	add    esp,0xc
c001108b:	31 c0                	xor    eax,eax
c001108d:	5b                   	pop    ebx
c001108e:	5e                   	pop    esi
c001108f:	5f                   	pop    edi
c0011090:	5d                   	pop    ebp
c0011091:	c3                   	ret    

c0011092 <VCache::read(unsigned long long, int, void*)>:
c0011092:	55                   	push   ebp
c0011093:	31 c0                	xor    eax,eax
c0011095:	57                   	push   edi
c0011096:	56                   	push   esi
c0011097:	53                   	push   ebx
c0011098:	83 ec 1c             	sub    esp,0x1c
c001109b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001109f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00110a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00110a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110ab:	90                   	nop
c00110ac:	39 e8                	cmp    eax,ebp
c00110ae:	7d 18                	jge    c00110c8 <VCache::read(unsigned long long, int, void*)+0x36>
c00110b0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00110b3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00110b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00110bd:	0f af c8             	imul   ecx,eax
c00110c0:	01 ca                	add    edx,ecx
c00110c2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00110c4:	40                   	inc    eax
c00110c5:	eb e5                	jmp    c00110ac <VCache::read(unsigned long long, int, void*)+0x1a>
c00110c7:	90                   	nop
c00110c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00110cc:	74 0e                	je     c00110dc <VCache::read(unsigned long long, int, void*)+0x4a>
c00110ce:	83 ec 0c             	sub    esp,0xc
c00110d1:	53                   	push   ebx
c00110d2:	e8 09 fe ff ff       	call   c0010ee0 <VCache::writeWriteBuffer()>
c00110d7:	83 c4 10             	add    esp,0x10
c00110da:	66 90                	xchg   ax,ax
c00110dc:	83 fd 01             	cmp    ebp,0x1
c00110df:	0f 85 87 00 00 00    	jne    c001116c <VCache::read(unsigned long long, int, void*)+0xda>
c00110e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110ec:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00110f3:	75 77                	jne    c001116c <VCache::read(unsigned long long, int, void*)+0xda>
c00110f5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00110f8:	89 e9                	mov    ecx,ebp
c00110fa:	f7 d9                	neg    ecx
c00110fc:	89 c8                	mov    eax,ecx
c00110fe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011102:	c1 f8 1f             	sar    eax,0x1f
c0011105:	21 f1                	and    ecx,esi
c0011107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001110b:	89 c8                	mov    eax,ecx
c001110d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011111:	21 f9                	and    ecx,edi
c0011113:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011117:	89 ca                	mov    edx,ecx
c0011119:	74 0d                	je     c0011128 <VCache::read(unsigned long long, int, void*)+0x96>
c001111b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001111e:	75 08                	jne    c0011128 <VCache::read(unsigned long long, int, void*)+0x96>
c0011120:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011123:	74 27                	je     c001114c <VCache::read(unsigned long long, int, void*)+0xba>
c0011125:	8d 76 00             	lea    esi,[esi+0x0]
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001112f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011133:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011136:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011139:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001113b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001113e:	55                   	push   ebp
c001113f:	52                   	push   edx
c0011140:	50                   	push   eax
c0011141:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011145:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011148:	83 c4 20             	add    esp,0x20
c001114b:	90                   	nop
c001114c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001114f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011153:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011159:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001115c:	48                   	dec    eax
c001115d:	21 c6                	and    esi,eax
c001115f:	0f af f1             	imul   esi,ecx
c0011162:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011165:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011167:	eb 23                	jmp    c001118c <VCache::read(unsigned long long, int, void*)+0xfa>
c0011169:	8d 76 00             	lea    esi,[esi+0x0]
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	53                   	push   ebx
c0011170:	e8 5b fd ff ff       	call   c0010ed0 <VCache::invalidateReadBuffer()>
c0011175:	5a                   	pop    edx
c0011176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011179:	8b 10                	mov    edx,DWORD PTR [eax]
c001117b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001117f:	55                   	push   ebp
c0011180:	57                   	push   edi
c0011181:	56                   	push   esi
c0011182:	50                   	push   eax
c0011183:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011186:	83 c4 20             	add    esp,0x20
c0011189:	8d 76 00             	lea    esi,[esi+0x0]
c001118c:	83 c4 1c             	add    esp,0x1c
c001118f:	31 c0                	xor    eax,eax
c0011191:	5b                   	pop    ebx
c0011192:	5e                   	pop    esi
c0011193:	5f                   	pop    edi
c0011194:	5d                   	pop    ebp
c0011195:	c3                   	ret    

c0011196 <Video::putrect(int, int, int, int, unsigned int)>:
c0011196:	55                   	push   ebp
c0011197:	57                   	push   edi
c0011198:	56                   	push   esi
c0011199:	53                   	push   ebx
c001119a:	83 ec 1c             	sub    esp,0x1c
c001119d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00111a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111a5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111a9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00111ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111b5:	01 df                	add    edi,ebx
c00111b7:	39 fb                	cmp    ebx,edi
c00111b9:	7d 1f                	jge    c00111da <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00111bb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00111bf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00111c3:	7d 12                	jge    c00111d7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00111c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00111c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111cb:	53                   	push   ebx
c00111cc:	55                   	push   ebp
c00111cd:	45                   	inc    ebp
c00111ce:	56                   	push   esi
c00111cf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	eb e8                	jmp    c00111bf <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00111d7:	43                   	inc    ebx
c00111d8:	eb dd                	jmp    c00111b7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00111da:	83 c4 1c             	add    esp,0x1c
c00111dd:	5b                   	pop    ebx
c00111de:	5e                   	pop    esi
c00111df:	5f                   	pop    edi
c00111e0:	5d                   	pop    ebp
c00111e1:	c3                   	ret    

c00111e2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00111e2:	55                   	push   ebp
c00111e3:	57                   	push   edi
c00111e4:	31 ff                	xor    edi,edi
c00111e6:	56                   	push   esi
c00111e7:	53                   	push   ebx
c00111e8:	83 ec 1c             	sub    esp,0x1c
c00111eb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00111ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00111f3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00111fa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00111ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011203:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011207:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001120b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001120e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011212:	01 f9                	add    ecx,edi
c0011214:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011218:	7d 2f                	jge    c0011249 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001121a:	31 f6                	xor    esi,esi
c001121c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011220:	01 f2                	add    edx,esi
c0011222:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011226:	7d 1a                	jge    c0011242 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011228:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001122b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001122e:	46                   	inc    esi
c001122f:	51                   	push   ecx
c0011230:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011234:	52                   	push   edx
c0011235:	55                   	push   ebp
c0011236:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011240:	eb da                	jmp    c001121c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011242:	47                   	inc    edi
c0011243:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011247:	eb c5                	jmp    c001120e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011249:	83 c4 1c             	add    esp,0x1c
c001124c:	5b                   	pop    ebx
c001124d:	5e                   	pop    esi
c001124e:	5f                   	pop    edi
c001124f:	5d                   	pop    ebp
c0011250:	c3                   	ret    
c0011251:	90                   	nop

c0011252 <Video::blit(unsigned int*, int, int, int, int)>:
c0011252:	55                   	push   ebp
c0011253:	57                   	push   edi
c0011254:	56                   	push   esi
c0011255:	53                   	push   ebx
c0011256:	83 ec 1c             	sub    esp,0x1c
c0011259:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001125d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011261:	85 c0                	test   eax,eax
c0011263:	79 02                	jns    c0011267 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011265:	31 c0                	xor    eax,eax
c0011267:	c1 e0 02             	shl    eax,0x2
c001126a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001126e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011272:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011276:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001127a:	39 d8                	cmp    eax,ebx
c001127c:	7e 49                	jle    c00112c7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001127e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011284:	7c 41                	jl     c00112c7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011286:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001128a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001128e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011292:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011296:	39 f9                	cmp    ecx,edi
c0011298:	7e 22                	jle    c00112bc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001129a:	83 c5 04             	add    ebp,0x4
c001129d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112a3:	7c 14                	jl     c00112b9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00112a5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00112a7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00112aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112b2:	56                   	push   esi
c00112b3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00112b6:	83 c4 10             	add    esp,0x10
c00112b9:	47                   	inc    edi
c00112ba:	eb d2                	jmp    c001128e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00112bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112c0:	43                   	inc    ebx
c00112c1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00112c5:	eb ab                	jmp    c0011272 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00112c7:	83 c4 1c             	add    esp,0x1c
c00112ca:	5b                   	pop    ebx
c00112cb:	5e                   	pop    esi
c00112cc:	5f                   	pop    edi
c00112cd:	5d                   	pop    ebp
c00112ce:	c3                   	ret    
c00112cf:	90                   	nop

c00112d0 <Video::clearScreen(unsigned int)>:
c00112d0:	57                   	push   edi
c00112d1:	56                   	push   esi
c00112d2:	53                   	push   ebx
c00112d3:	31 db                	xor    ebx,ebx
c00112d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112d9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112df:	7e 1f                	jle    c0011300 <Video::clearScreen(unsigned int)+0x30>
c00112e1:	31 ff                	xor    edi,edi
c00112e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112e9:	7e 12                	jle    c00112fd <Video::clearScreen(unsigned int)+0x2d>
c00112eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00112ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00112f1:	53                   	push   ebx
c00112f2:	57                   	push   edi
c00112f3:	47                   	inc    edi
c00112f4:	56                   	push   esi
c00112f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	eb e6                	jmp    c00112e3 <Video::clearScreen(unsigned int)+0x13>
c00112fd:	43                   	inc    ebx
c00112fe:	eb d9                	jmp    c00112d9 <Video::clearScreen(unsigned int)+0x9>
c0011300:	5b                   	pop    ebx
c0011301:	5e                   	pop    esi
c0011302:	5f                   	pop    edi
c0011303:	c3                   	ret    

c0011304 <Video::putpixel(int, int, unsigned int)>:
c0011304:	c7 44 24 04 a8 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc00252a8
c001130c:	e9 b2 36 00 00       	jmp    c00149c3 <Krnl::panic(char const*)>
c0011311:	90                   	nop

c0011312 <Video::Video(char const*)>:
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011319:	83 ec 08             	sub    esp,0x8
c001131c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011320:	50                   	push   eax
c0011321:	e8 18 d1 ff ff       	call   c000e43e <Device::Device(char const*)>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	ba 18 53 02 c0       	mov    edx,0xc0025318
c001132e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011332:	89 10                	mov    DWORD PTR [eax],edx
c0011334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011338:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011342:	90                   	nop
c0011343:	83 c4 0c             	add    esp,0xc
c0011346:	c3                   	ret    
c0011347:	90                   	nop

c0011348 <Video::~Video()>:
c0011348:	83 ec 0c             	sub    esp,0xc
c001134b:	ba 18 53 02 c0       	mov    edx,0xc0025318
c0011350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011354:	89 10                	mov    DWORD PTR [eax],edx
c0011356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	50                   	push   eax
c001135e:	e8 a5 cd ff ff       	call   c000e108 <Device::~Device()>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	90                   	nop
c0011367:	83 c4 0c             	add    esp,0xc
c001136a:	c3                   	ret    
c001136b:	90                   	nop

c001136c <Video::~Video()>:
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011376:	e8 cd ff ff ff       	call   c0011348 <Video::~Video()>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	83 ec 08             	sub    esp,0x8
c0011381:	68 64 01 00 00       	push   0x164
c0011386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138a:	e8 8b b8 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	83 c4 0c             	add    esp,0xc
c0011395:	c3                   	ret    

c0011396 <Video::isMonochrome()>:
c0011396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <Video::getWidth()>:
c00113a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00113ac:	c3                   	ret    
c00113ad:	90                   	nop

c00113ae <Video::getHeight()>:
c00113ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113b8:	c3                   	ret    
c00113b9:	90                   	nop

c00113ba <Video::drawCursor(int, int, unsigned char*, int)>:
c00113ba:	55                   	push   ebp
c00113bb:	57                   	push   edi
c00113bc:	56                   	push   esi
c00113bd:	53                   	push   ebx
c00113be:	83 ec 2c             	sub    esp,0x2c
c00113c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00113c5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00113c9:	83 f8 01             	cmp    eax,0x1
c00113cc:	19 c9                	sbb    ecx,ecx
c00113ce:	31 db                	xor    ebx,ebx
c00113d0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00113d4:	89 cd                	mov    ebp,ecx
c00113d6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00113de:	f7 d5                	not    ebp
c00113e0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00113e6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00113ea:	01 d8                	add    eax,ebx
c00113ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113f0:	56                   	push   esi
c00113f1:	e8 b8 ff ff ff       	call   c00113ae <Video::getHeight()>
c00113f6:	59                   	pop    ecx
c00113f7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00113fb:	7e 70                	jle    c001146d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00113fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011401:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011405:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001140c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011410:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011417:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001141b:	89 f8                	mov    eax,edi
c001141d:	83 c0 20             	add    eax,0x20
c0011420:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011424:	56                   	push   esi
c0011425:	e8 78 ff ff ff       	call   c00113a2 <Video::getWidth()>
c001142a:	5a                   	pop    edx
c001142b:	39 c7                	cmp    edi,eax
c001142d:	7d 34                	jge    c0011463 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001142f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011434:	74 05                	je     c001143b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011436:	8b 06                	mov    eax,DWORD PTR [esi]
c0011438:	55                   	push   ebp
c0011439:	eb 0d                	jmp    c0011448 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001143b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011440:	74 12                	je     c0011454 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011442:	8b 06                	mov    eax,DWORD PTR [esi]
c0011444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011448:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001144c:	57                   	push   edi
c001144d:	56                   	push   esi
c001144e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011458:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001145c:	47                   	inc    edi
c001145d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011461:	75 c1                	jne    c0011424 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011463:	43                   	inc    ebx
c0011464:	83 fb 20             	cmp    ebx,0x20
c0011467:	0f 85 79 ff ff ff    	jne    c00113e6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001146d:	83 c4 2c             	add    esp,0x2c
c0011470:	5b                   	pop    ebx
c0011471:	5e                   	pop    esi
c0011472:	5f                   	pop    edi
c0011473:	5d                   	pop    ebp
c0011474:	c3                   	ret    
c0011475:	90                   	nop

c0011476 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011476:	55                   	push   ebp
c0011477:	57                   	push   edi
c0011478:	56                   	push   esi
c0011479:	53                   	push   ebx
c001147a:	83 ec 28             	sub    esp,0x28
c001147d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011481:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011485:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011489:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001148d:	c1 e6 08             	shl    esi,0x8
c0011490:	01 c6                	add    esi,eax
c0011492:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011496:	c1 e0 08             	shl    eax,0x8
c0011499:	01 d0                	add    eax,edx
c001149b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001149f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a3:	0f af c6             	imul   eax,esi
c00114a6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00114ad:	50                   	push   eax
c00114ae:	e8 5c 85 ff ff       	call   c0009a0f <malloc>
c00114b3:	83 c4 10             	add    esp,0x10
c00114b6:	89 c7                	mov    edi,eax
c00114b8:	85 c0                	test   eax,eax
c00114ba:	75 10                	jne    c00114cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	68 c9 52 02 c0       	push   0xc00252c9
c00114c4:	e8 fa 34 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00114cf:	ba 12 00 00 00       	mov    edx,0x12
c00114d4:	84 c0                	test   al,al
c00114d6:	74 11                	je     c00114e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00114d8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00114dc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00114e0:	c1 fa 03             	sar    edx,0x3
c00114e3:	0f af d1             	imul   edx,ecx
c00114e6:	83 c2 12             	add    edx,0x12
c00114e9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00114ed:	74 04                	je     c00114f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00114ef:	85 f6                	test   esi,esi
c00114f1:	75 12                	jne    c0011505 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00114f3:	83 ec 0c             	sub    esp,0xc
c00114f6:	68 d9 52 02 c0       	push   0xc00252d9
c00114fb:	e8 fb b7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011500:	e9 b8 00 00 00       	jmp    c00115bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011505:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011509:	80 f9 02             	cmp    cl,0x2
c001150c:	0f 85 96 00 00 00    	jne    c00115a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011512:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011517:	75 0e                	jne    c0011527 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011519:	84 c0                	test   al,al
c001151b:	75 0a                	jne    c0011527 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001151d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011520:	83 e8 18             	sub    eax,0x18
c0011523:	a8 f7                	test   al,0xf7
c0011525:	74 0a                	je     c0011531 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011527:	83 ec 0c             	sub    esp,0xc
c001152a:	68 ee 52 02 c0       	push   0xc00252ee
c001152f:	eb 7f                	jmp    c00115b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011531:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011539:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011541:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011545:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001154d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011551:	75 0c                	jne    c001155f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011553:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011558:	c1 e0 18             	shl    eax,0x18
c001155b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001155f:	45                   	inc    ebp
c0011560:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011565:	c1 e1 10             	shl    ecx,0x10
c0011568:	89 c8                	mov    eax,ecx
c001156a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001156f:	c1 e1 08             	shl    ecx,0x8
c0011572:	09 c1                	or     ecx,eax
c0011574:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011578:	09 c1                	or     ecx,eax
c001157a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001157e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011582:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011586:	c1 f8 03             	sar    eax,0x3
c0011589:	01 c2                	add    edx,eax
c001158b:	89 e8                	mov    eax,ebp
c001158d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011591:	39 c6                	cmp    esi,eax
c0011593:	7f b0                	jg     c0011545 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011595:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011599:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001159d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00115a0:	7e 22                	jle    c00115c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00115a2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00115a6:	eb 99                	jmp    c0011541 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00115a8:	50                   	push   eax
c00115a9:	50                   	push   eax
c00115aa:	51                   	push   ecx
c00115ab:	68 fc 52 02 c0       	push   0xc00252fc
c00115b0:	e8 46 b7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00115b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115b8:	e8 62 84 ff ff       	call   c0009a1f <free>
c00115bd:	83 c4 10             	add    esp,0x10
c00115c0:	31 ff                	xor    edi,edi
c00115c2:	eb 0f                	jmp    c00115d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00115c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115c8:	89 30                	mov    DWORD PTR [eax],esi
c00115ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115ce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00115d1:	89 30                	mov    DWORD PTR [eax],esi
c00115d3:	83 c4 1c             	add    esp,0x1c
c00115d6:	89 f8                	mov    eax,edi
c00115d8:	5b                   	pop    ebx
c00115d9:	5e                   	pop    esi
c00115da:	5f                   	pop    edi
c00115db:	5d                   	pop    ebp
c00115dc:	c3                   	ret    
c00115dd:	90                   	nop

c00115de <Video::putTGA(int, int, unsigned char*, int)>:
c00115de:	55                   	push   ebp
c00115df:	57                   	push   edi
c00115e0:	56                   	push   esi
c00115e1:	53                   	push   ebx
c00115e2:	83 ec 28             	sub    esp,0x28
c00115e5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00115e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115ed:	50                   	push   eax
c00115ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115f2:	50                   	push   eax
c00115f3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115fb:	56                   	push   esi
c00115fc:	e8 75 fe ff ff       	call   c0011476 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011601:	83 c4 20             	add    esp,0x20
c0011604:	85 c0                	test   eax,eax
c0011606:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001160a:	74 35                	je     c0011641 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001160c:	89 c7                	mov    edi,eax
c001160e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011612:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011616:	39 d8                	cmp    eax,ebx
c0011618:	7e 27                	jle    c0011641 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001161a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001161e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011622:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011626:	39 e8                	cmp    eax,ebp
c0011628:	7e 14                	jle    c001163e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001162a:	8b 06                	mov    eax,DWORD PTR [esi]
c001162c:	83 c7 04             	add    edi,0x4
c001162f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011632:	53                   	push   ebx
c0011633:	55                   	push   ebp
c0011634:	45                   	inc    ebp
c0011635:	56                   	push   esi
c0011636:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011639:	83 c4 10             	add    esp,0x10
c001163c:	eb e0                	jmp    c001161e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001163e:	43                   	inc    ebx
c001163f:	eb cd                	jmp    c001160e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011641:	83 c4 1c             	add    esp,0x1c
c0011644:	5b                   	pop    ebx
c0011645:	5e                   	pop    esi
c0011646:	5f                   	pop    edi
c0011647:	5d                   	pop    ebp
c0011648:	c3                   	ret    
c0011649:	66 90                	xchg   ax,ax
c001164b:	90                   	nop

c001164c <ACPI::close(int, int, void*)>:
c001164c:	83 ec 1c             	sub    esp,0x1c
c001164f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011657:	74 0b                	je     c0011664 <ACPI::close(int, int, void*)+0x18>
c0011659:	b8 00 00 00 00       	mov    eax,0x0
c001165e:	e9 99 00 00 00       	jmp    c00116fc <ACPI::close(int, int, void*)+0xb0>
c0011663:	90                   	nop
c0011664:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011669:	75 29                	jne    c0011694 <ACPI::close(int, int, void*)+0x48>
c001166b:	a1 e8 86 02 c0       	mov    eax,ds:0xc00286e8
c0011670:	85 c0                	test   eax,eax
c0011672:	74 08                	je     c001167c <ACPI::close(int, int, void*)+0x30>
c0011674:	a1 e8 86 02 c0       	mov    eax,ds:0xc00286e8
c0011679:	ff d0                	call   eax
c001167b:	90                   	nop
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	68 58 53 02 c0       	push   0xc0025358
c0011684:	e8 3a 33 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011691:	eb 69                	jmp    c00116fc <ACPI::close(int, int, void*)+0xb0>
c0011693:	90                   	nop
c0011694:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011699:	75 59                	jne    c00116f4 <ACPI::close(int, int, void*)+0xa8>
c001169b:	a1 e4 86 02 c0       	mov    eax,ds:0xc00286e4
c00116a0:	85 c0                	test   eax,eax
c00116a2:	74 08                	je     c00116ac <ACPI::close(int, int, void*)+0x60>
c00116a4:	a1 e4 86 02 c0       	mov    eax,ds:0xc00286e4
c00116a9:	ff d0                	call   eax
c00116ab:	90                   	nop
c00116ac:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00116b1:	8d 76 00             	lea    esi,[esi+0x0]
c00116b4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00116b9:	83 e0 02             	and    eax,0x2
c00116bc:	74 1e                	je     c00116dc <ACPI::close(int, int, void*)+0x90>
c00116be:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00116c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116c9:	89 c2                	mov    edx,eax
c00116cb:	ec                   	in     al,dx
c00116cc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00116d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00116d4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116d8:	eb da                	jmp    c00116b4 <ACPI::close(int, int, void*)+0x68>
c00116da:	66 90                	xchg   ax,ax
c00116dc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00116e3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00116e8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00116ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116f0:	ee                   	out    dx,al
c00116f1:	8d 76 00             	lea    esi,[esi+0x0]
c00116f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116f9:	8d 76 00             	lea    esi,[esi+0x0]
c00116fc:	83 c4 1c             	add    esp,0x1c
c00116ff:	c3                   	ret    

c0011700 <findRSDP()>:
c0011700:	83 ec 1c             	sub    esp,0x1c
c0011703:	83 ec 0c             	sub    esp,0xc
c0011706:	68 7b 54 02 c0       	push   0xc002547b
c001170b:	e8 59 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011710:	83 c4 10             	add    esp,0x10
c0011713:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011718:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001171e:	83 e0 04             	and    eax,0x4
c0011721:	84 c0                	test   al,al
c0011723:	75 0b                	jne    c0011730 <findRSDP()+0x30>
c0011725:	b8 00 00 00 00       	mov    eax,0x0
c001172a:	e9 a1 00 00 00       	jmp    c00117d0 <findRSDP()+0xd0>
c001172f:	90                   	nop
c0011730:	a1 d8 80 02 c0       	mov    eax,ds:0xc00280d8
c0011735:	3d ff 07 00 00       	cmp    eax,0x7ff
c001173a:	7f 1c                	jg     c0011758 <findRSDP()+0x58>
c001173c:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011741:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011747:	83 e2 fb             	and    edx,0xfffffffb
c001174a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011750:	b8 00 00 00 00       	mov    eax,0x0
c0011755:	eb 79                	jmp    c00117d0 <findRSDP()+0xd0>
c0011757:	90                   	nop
c0011758:	83 ec 0c             	sub    esp,0xc
c001175b:	68 8b 54 02 c0       	push   0xc002548b
c0011760:	e8 04 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011770:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011778:	77 3e                	ja     c00117b8 <findRSDP()+0xb8>
c001177a:	83 ec 04             	sub    esp,0x4
c001177d:	6a 08                	push   0x8
c001177f:	68 a4 54 02 c0       	push   0xc00254a4
c0011784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011788:	e8 f3 ed fe ff       	call   c0000580 <memcmp>
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	85 c0                	test   eax,eax
c0011792:	0f 94 c0             	sete   al
c0011795:	84 c0                	test   al,al
c0011797:	74 17                	je     c00117b0 <findRSDP()+0xb0>
c0011799:	83 ec 0c             	sub    esp,0xc
c001179c:	68 ad 54 02 c0       	push   0xc00254ad
c00117a1:	e8 c3 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117ad:	eb 21                	jmp    c00117d0 <findRSDP()+0xd0>
c00117af:	90                   	nop
c00117b0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00117b5:	eb b9                	jmp    c0011770 <findRSDP()+0x70>
c00117b7:	90                   	nop
c00117b8:	83 ec 0c             	sub    esp,0xc
c00117bb:	68 bb 54 02 c0       	push   0xc00254bb
c00117c0:	e8 a4 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117c5:	83 c4 10             	add    esp,0x10
c00117c8:	b8 00 00 00 00       	mov    eax,0x0
c00117cd:	8d 76 00             	lea    esi,[esi+0x0]
c00117d0:	83 c4 1c             	add    esp,0x1c
c00117d3:	c3                   	ret    

c00117d4 <loadACPITables(unsigned char*)>:
c00117d4:	57                   	push   edi
c00117d5:	56                   	push   esi
c00117d6:	53                   	push   ebx
c00117d7:	83 ec 60             	sub    esp,0x60
c00117da:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00117df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117e5:	83 e0 04             	and    eax,0x4
c00117e8:	84 c0                	test   al,al
c00117ea:	0f 84 3c 02 00 00    	je     c0011a2c <loadACPITables(unsigned char*)+0x258>
c00117f0:	a0 00 89 02 c0       	mov    al,ds:0xc0028900
c00117f5:	84 c0                	test   al,al
c00117f7:	74 77                	je     c0011870 <loadACPITables(unsigned char*)+0x9c>
c00117f9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117fd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011801:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011808:	83 e8 24             	sub    eax,0x24
c001180b:	c1 e8 03             	shr    eax,0x3
c001180e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011812:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001181a:	66 90                	xchg   ax,ax
c001181c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011820:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011824:	0f 8d b6 00 00 00    	jge    c00118e0 <loadACPITables(unsigned char*)+0x10c>
c001182a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001182e:	83 c0 24             	add    eax,0x24
c0011831:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011835:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011839:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001183d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011841:	c1 e0 03             	shl    eax,0x3
c0011844:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011848:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001184c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001184f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011851:	89 c1                	mov    ecx,eax
c0011853:	a1 ec 86 02 c0       	mov    eax,ds:0xc00286ec
c0011858:	8d 50 01             	lea    edx,[eax+0x1]
c001185b:	89 15 ec 86 02 c0    	mov    DWORD PTR ds:0xc00286ec,edx
c0011861:	89 ca                	mov    edx,ecx
c0011863:	89 14 c5 04 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78fc],edx
c001186a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001186e:	eb ac                	jmp    c001181c <loadACPITables(unsigned char*)+0x48>
c0011870:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011874:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001187c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001187f:	83 e8 24             	sub    eax,0x24
c0011882:	c1 e8 02             	shr    eax,0x2
c0011885:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011889:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011891:	8d 76 00             	lea    esi,[esi+0x0]
c0011894:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011898:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001189c:	7d 42                	jge    c00118e0 <loadACPITables(unsigned char*)+0x10c>
c001189e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118a2:	83 c0 24             	add    eax,0x24
c00118a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00118a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00118ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00118b1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00118b5:	c1 e0 02             	shl    eax,0x2
c00118b8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00118bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00118c2:	a1 ec 86 02 c0       	mov    eax,ds:0xc00286ec
c00118c7:	8d 50 01             	lea    edx,[eax+0x1]
c00118ca:	89 15 ec 86 02 c0    	mov    DWORD PTR ds:0xc00286ec,edx
c00118d0:	89 ca                	mov    edx,ecx
c00118d2:	89 14 c5 04 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78fc],edx
c00118d9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00118dd:	eb b5                	jmp    c0011894 <loadACPITables(unsigned char*)+0xc0>
c00118df:	90                   	nop
c00118e0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00118e8:	a1 ec 86 02 c0       	mov    eax,ds:0xc00286ec
c00118ed:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00118f1:	0f 8d 39 01 00 00    	jge    c0011a30 <loadACPITables(unsigned char*)+0x25c>
c00118f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00118fb:	8b 04 c5 04 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd78fc]
c0011902:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001190e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011912:	25 ff 0f 00 00       	and    eax,0xfff
c0011917:	89 c6                	mov    esi,eax
c0011919:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	6a 01                	push   0x1
c0011924:	e8 ac a0 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011930:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011936:	83 ec 0c             	sub    esp,0xc
c0011939:	6a 01                	push   0x1
c001193b:	6a 01                	push   0x1
c001193d:	50                   	push   eax
c001193e:	52                   	push   edx
c001193f:	53                   	push   ebx
c0011940:	e8 2d aa ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011945:	83 c4 20             	add    esp,0x20
c0011948:	09 f0                	or     eax,esi
c001194a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001194e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011952:	c1 e0 03             	shl    eax,0x3
c0011955:	05 00 87 02 c0       	add    eax,0xc0028700
c001195a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001195e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011966:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001196e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011972:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011976:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001197e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011982:	89 c6                	mov    esi,eax
c0011984:	89 d7                	mov    edi,edx
c0011986:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011988:	89 c8                	mov    eax,ecx
c001198a:	89 fa                	mov    edx,edi
c001198c:	89 f3                	mov    ebx,esi
c001198e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011992:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011996:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001199a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001199e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119a9:	05 00 10 00 00       	add    eax,0x1000
c00119ae:	c1 e8 0c             	shr    eax,0xc
c00119b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119c1:	25 ff 0f 00 00       	and    eax,0xfff
c00119c6:	89 c6                	mov    esi,eax
c00119c8:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119d5:	e8 fb 9f ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119e7:	83 ec 0c             	sub    esp,0xc
c00119ea:	6a 01                	push   0x1
c00119ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00119f0:	50                   	push   eax
c00119f1:	52                   	push   edx
c00119f2:	53                   	push   ebx
c00119f3:	e8 7a a9 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119f8:	83 c4 20             	add    esp,0x20
c00119fb:	09 f0                	or     eax,esi
c00119fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	50                   	push   eax
c0011a09:	e8 f7 a2 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a0e:	83 c4 10             	add    esp,0x10
c0011a11:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a19:	89 14 c5 04 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78fc],edx
c0011a20:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a24:	e9 bf fe ff ff       	jmp    c00118e8 <loadACPITables(unsigned char*)+0x114>
c0011a29:	8d 76 00             	lea    esi,[esi+0x0]
c0011a2c:	90                   	nop
c0011a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a30:	83 c4 60             	add    esp,0x60
c0011a33:	5b                   	pop    ebx
c0011a34:	5e                   	pop    esi
c0011a35:	5f                   	pop    edi
c0011a36:	c3                   	ret    
c0011a37:	90                   	nop

c0011a38 <findRSDT(unsigned char*)>:
c0011a38:	57                   	push   edi
c0011a39:	56                   	push   esi
c0011a3a:	53                   	push   ebx
c0011a3b:	83 ec 50             	sub    esp,0x50
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	68 cf 54 02 c0       	push   0xc00254cf
c0011a46:	e8 1e 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a4b:	83 c4 10             	add    esp,0x10
c0011a4e:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011a53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a59:	83 e0 04             	and    eax,0x4
c0011a5c:	84 c0                	test   al,al
c0011a5e:	75 0c                	jne    c0011a6c <findRSDT(unsigned char*)+0x34>
c0011a60:	b8 00 00 00 00       	mov    eax,0x0
c0011a65:	e9 86 01 00 00       	jmp    c0011bf0 <findRSDT(unsigned char*)+0x1b8>
c0011a6a:	66 90                	xchg   ax,ax
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	68 e1 54 02 c0       	push   0xc00254e1
c0011a74:	e8 f0 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a79:	83 c4 10             	add    esp,0x10
c0011a7c:	89 e0                	mov    eax,esp
c0011a7e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011a82:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011a86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a8a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011a92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011aa2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011aa6:	89 c6                	mov    esi,eax
c0011aa8:	89 d7                	mov    edi,edx
c0011aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011aac:	89 c8                	mov    eax,ecx
c0011aae:	89 fa                	mov    edx,edi
c0011ab0:	89 f3                	mov    ebx,esi
c0011ab2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011ab6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011aba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	68 f3 54 02 c0       	push   0xc00254f3
c0011ac6:	e8 9e 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ad2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ad6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	68 05 55 02 c0       	push   0xc0025505
c0011ae6:	e8 7e 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011af2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011af6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011afe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b02:	83 ec 04             	sub    esp,0x4
c0011b05:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b0d:	68 7c 53 02 c0       	push   0xc002537c
c0011b12:	e8 e4 b1 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b1e:	25 ff 0f 00 00       	and    eax,0xfff
c0011b23:	89 c6                	mov    esi,eax
c0011b25:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c0011b2b:	83 ec 0c             	sub    esp,0xc
c0011b2e:	6a 02                	push   0x2
c0011b30:	e8 a0 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011b35:	83 c4 10             	add    esp,0x10
c0011b38:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b3c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	6a 01                	push   0x1
c0011b47:	6a 02                	push   0x2
c0011b49:	50                   	push   eax
c0011b4a:	52                   	push   edx
c0011b4b:	53                   	push   ebx
c0011b4c:	e8 21 a8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b51:	83 c4 20             	add    esp,0x20
c0011b54:	09 f0                	or     eax,esi
c0011b56:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b5e:	25 ff 0f 00 00       	and    eax,0xfff
c0011b63:	89 c6                	mov    esi,eax
c0011b65:	8b 1d d0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d0
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	6a 02                	push   0x2
c0011b70:	e8 60 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011b7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b82:	83 ec 0c             	sub    esp,0xc
c0011b85:	6a 01                	push   0x1
c0011b87:	6a 02                	push   0x2
c0011b89:	50                   	push   eax
c0011b8a:	52                   	push   edx
c0011b8b:	53                   	push   ebx
c0011b8c:	e8 e1 a7 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b91:	83 c4 20             	add    esp,0x20
c0011b94:	09 f0                	or     eax,esi
c0011b96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b9a:	83 ec 04             	sub    esp,0x4
c0011b9d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ba1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ba5:	68 9c 53 02 c0       	push   0xc002539c
c0011baa:	e8 4c b1 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011bb7:	75 13                	jne    c0011bcc <findRSDT(unsigned char*)+0x194>
c0011bb9:	c6 05 00 89 02 c0 00 	mov    BYTE PTR ds:0xc0028900,0x0
c0011bc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bc4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bc8:	eb 22                	jmp    c0011bec <findRSDT(unsigned char*)+0x1b4>
c0011bca:	66 90                	xchg   ax,ax
c0011bcc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011bd1:	75 11                	jne    c0011be4 <findRSDT(unsigned char*)+0x1ac>
c0011bd3:	c6 05 00 89 02 c0 01 	mov    BYTE PTR ds:0xc0028900,0x1
c0011bda:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011bde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011be2:	eb 08                	jmp    c0011bec <findRSDT(unsigned char*)+0x1b4>
c0011be4:	b8 00 00 00 00       	mov    eax,0x0
c0011be9:	eb 05                	jmp    c0011bf0 <findRSDT(unsigned char*)+0x1b8>
c0011beb:	90                   	nop
c0011bec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011bf0:	83 c4 50             	add    esp,0x50
c0011bf3:	5b                   	pop    ebx
c0011bf4:	5e                   	pop    esi
c0011bf5:	5f                   	pop    edi
c0011bf6:	c3                   	ret    
c0011bf7:	90                   	nop

c0011bf8 <findDataTable(unsigned char*, char*)>:
c0011bf8:	83 ec 1c             	sub    esp,0x1c
c0011bfb:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011c00:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c06:	83 e0 04             	and    eax,0x4
c0011c09:	84 c0                	test   al,al
c0011c0b:	75 07                	jne    c0011c14 <findDataTable(unsigned char*, char*)+0x1c>
c0011c0d:	b8 00 00 00 00       	mov    eax,0x0
c0011c12:	eb 58                	jmp    c0011c6c <findDataTable(unsigned char*, char*)+0x74>
c0011c14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c1c:	a1 ec 86 02 c0       	mov    eax,ds:0xc00286ec
c0011c21:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c25:	7d 3d                	jge    c0011c64 <findDataTable(unsigned char*, char*)+0x6c>
c0011c27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2b:	c1 e0 03             	shl    eax,0x3
c0011c2e:	05 00 87 02 c0       	add    eax,0xc0028700
c0011c33:	83 ec 04             	sub    esp,0x4
c0011c36:	6a 04                	push   0x4
c0011c38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c3c:	50                   	push   eax
c0011c3d:	e8 3e e9 fe ff       	call   c0000580 <memcmp>
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	85 c0                	test   eax,eax
c0011c47:	0f 94 c0             	sete   al
c0011c4a:	84 c0                	test   al,al
c0011c4c:	74 0e                	je     c0011c5c <findDataTable(unsigned char*, char*)+0x64>
c0011c4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c52:	8b 04 c5 04 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd78fc]
c0011c59:	eb 11                	jmp    c0011c6c <findDataTable(unsigned char*, char*)+0x74>
c0011c5b:	90                   	nop
c0011c5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c60:	eb ba                	jmp    c0011c1c <findDataTable(unsigned char*, char*)+0x24>
c0011c62:	66 90                	xchg   ax,ax
c0011c64:	b8 00 00 00 00       	mov    eax,0x0
c0011c69:	8d 76 00             	lea    esi,[esi+0x0]
c0011c6c:	83 c4 1c             	add    esp,0x1c
c0011c6f:	c3                   	ret    

c0011c70 <scanMADT()>:
c0011c70:	53                   	push   ebx
c0011c71:	83 ec 38             	sub    esp,0x38
c0011c74:	83 ec 0c             	sub    esp,0xc
c0011c77:	68 17 55 02 c0       	push   0xc0025517
c0011c7c:	e8 e8 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0011c89:	25 00 04 00 00       	and    eax,0x400
c0011c8e:	74 14                	je     c0011ca4 <scanMADT()+0x34>
c0011c90:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011c95:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c9b:	83 e2 fb             	and    edx,0xfffffffb
c0011c9e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ca4:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011ca9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011caf:	83 e0 04             	and    eax,0x4
c0011cb2:	84 c0                	test   al,al
c0011cb4:	0f 84 82 04 00 00    	je     c001213c <scanMADT()+0x4cc>
c0011cba:	83 ec 0c             	sub    esp,0xc
c0011cbd:	68 24 55 02 c0       	push   0xc0025524
c0011cc2:	e8 a2 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	e8 31 fa ff ff       	call   c0011700 <findRSDP()>
c0011ccf:	a3 0c 89 02 c0       	mov    ds:0xc002890c,eax
c0011cd4:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c0011cd9:	85 c0                	test   eax,eax
c0011cdb:	75 1b                	jne    c0011cf8 <scanMADT()+0x88>
c0011cdd:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011ce2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ce8:	83 e2 fb             	and    edx,0xfffffffb
c0011ceb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011cf1:	e9 4e 04 00 00       	jmp    c0012144 <scanMADT()+0x4d4>
c0011cf6:	66 90                	xchg   ax,ax
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	68 36 55 02 c0       	push   0xc0025536
c0011d00:	e8 64 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	50                   	push   eax
c0011d11:	e8 22 fd ff ff       	call   c0011a38 <findRSDT(unsigned char*)>
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	a3 08 89 02 c0       	mov    ds:0xc0028908,eax
c0011d1e:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c0011d23:	85 c0                	test   eax,eax
c0011d25:	75 19                	jne    c0011d40 <scanMADT()+0xd0>
c0011d27:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011d2c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d32:	83 e2 fb             	and    edx,0xfffffffb
c0011d35:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d3b:	e9 04 04 00 00       	jmp    c0012144 <scanMADT()+0x4d4>
c0011d40:	83 ec 0c             	sub    esp,0xc
c0011d43:	68 46 55 02 c0       	push   0xc0025546
c0011d48:	e8 1c 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c0011d55:	83 ec 0c             	sub    esp,0xc
c0011d58:	50                   	push   eax
c0011d59:	e8 76 fa ff ff       	call   c00117d4 <loadACPITables(unsigned char*)>
c0011d5e:	83 c4 10             	add    esp,0x10
c0011d61:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	68 5e 55 02 c0       	push   0xc002555e
c0011d6e:	50                   	push   eax
c0011d6f:	e8 84 fe ff ff       	call   c0011bf8 <findDataTable(unsigned char*, char*)>
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d7b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011d80:	75 1a                	jne    c0011d9c <scanMADT()+0x12c>
c0011d82:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0011d87:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d8d:	83 e2 fe             	and    edx,0xfffffffe
c0011d90:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d96:	e9 a9 03 00 00       	jmp    c0012144 <scanMADT()+0x4d4>
c0011d9b:	90                   	nop
c0011d9c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011da4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011dab:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011daf:	0f 87 8f 03 00 00    	ja     c0012144 <scanMADT()+0x4d4>
c0011db5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011dbd:	0f 87 81 03 00 00    	ja     c0012144 <scanMADT()+0x4d4>
c0011dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011dcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0011dd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dd6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dda:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dde:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011de2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011de6:	8d 50 01             	lea    edx,[eax+0x1]
c0011de9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ded:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011df1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011df5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011df9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011dfe:	0f 86 3c 03 00 00    	jbe    c0012140 <scanMADT()+0x4d0>
c0011e04:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e09:	75 59                	jne    c0011e64 <scanMADT()+0x1f4>
c0011e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e16:	8a 15 00 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028b00
c0011e1c:	0f b6 d2             	movzx  edx,dl
c0011e1f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e23:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e27:	88 82 40 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd74c0],al
c0011e2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e31:	8d 50 01             	lea    edx,[eax+0x1]
c0011e34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e38:	8a 15 00 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028b00
c0011e3e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e41:	88 0d 00 8b 02 c0    	mov    BYTE PTR ds:0xc0028b00,cl
c0011e47:	0f b6 d2             	movzx  edx,dl
c0011e4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e52:	88 82 20 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd74e0],al
c0011e58:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e5d:	e9 c6 02 00 00       	jmp    c0012128 <scanMADT()+0x4b8>
c0011e62:	66 90                	xchg   ax,ax
c0011e64:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011e69:	0f 85 15 01 00 00    	jne    c0011f84 <scanMADT()+0x314>
c0011e6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e73:	8d 50 01             	lea    edx,[eax+0x1]
c0011e76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e7a:	8a 15 c0 89 02 c0    	mov    dl,BYTE PTR ds:0xc00289c0
c0011e80:	0f b6 d2             	movzx  edx,dl
c0011e83:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e87:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e8b:	88 82 e0 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7620],al
c0011e91:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011e95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e9d:	01 d0                	add    eax,edx
c0011e9f:	83 c0 2c             	add    eax,0x2c
c0011ea2:	8a 00                	mov    al,BYTE PTR [eax]
c0011ea4:	0f b6 d0             	movzx  edx,al
c0011ea7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eab:	8d 48 01             	lea    ecx,[eax+0x1]
c0011eae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eb2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011eb6:	0f b6 c0             	movzx  eax,al
c0011eb9:	c1 e0 08             	shl    eax,0x8
c0011ebc:	89 d1                	mov    ecx,edx
c0011ebe:	09 c1                	or     ecx,eax
c0011ec0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ec4:	8d 50 02             	lea    edx,[eax+0x2]
c0011ec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ecb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ecf:	0f b6 c0             	movzx  eax,al
c0011ed2:	c1 e0 10             	shl    eax,0x10
c0011ed5:	09 c1                	or     ecx,eax
c0011ed7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011edb:	8d 50 03             	lea    edx,[eax+0x3]
c0011ede:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ee2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ee6:	0f b6 c0             	movzx  eax,al
c0011ee9:	c1 e0 18             	shl    eax,0x18
c0011eec:	09 c1                	or     ecx,eax
c0011eee:	89 ca                	mov    edx,ecx
c0011ef0:	a0 c0 89 02 c0       	mov    al,ds:0xc00289c0
c0011ef5:	0f b6 c0             	movzx  eax,al
c0011ef8:	89 14 85 00 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7600],edx
c0011eff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f0c:	01 d0                	add    eax,edx
c0011f0e:	83 c0 2c             	add    eax,0x2c
c0011f11:	8a 00                	mov    al,BYTE PTR [eax]
c0011f13:	0f b6 d0             	movzx  edx,al
c0011f16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f1a:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f21:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f25:	0f b6 c0             	movzx  eax,al
c0011f28:	c1 e0 08             	shl    eax,0x8
c0011f2b:	89 d1                	mov    ecx,edx
c0011f2d:	09 c1                	or     ecx,eax
c0011f2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f33:	8d 50 02             	lea    edx,[eax+0x2]
c0011f36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f3e:	0f b6 c0             	movzx  eax,al
c0011f41:	c1 e0 10             	shl    eax,0x10
c0011f44:	09 c1                	or     ecx,eax
c0011f46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4a:	8d 50 03             	lea    edx,[eax+0x3]
c0011f4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f51:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f55:	0f b6 c0             	movzx  eax,al
c0011f58:	c1 e0 18             	shl    eax,0x18
c0011f5b:	09 c1                	or     ecx,eax
c0011f5d:	89 ca                	mov    edx,ecx
c0011f5f:	a0 c0 89 02 c0       	mov    al,ds:0xc00289c0
c0011f64:	0f b6 c0             	movzx  eax,al
c0011f67:	89 14 85 80 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7580],edx
c0011f6e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f73:	a0 c0 89 02 c0       	mov    al,ds:0xc00289c0
c0011f78:	40                   	inc    eax
c0011f79:	a2 c0 89 02 c0       	mov    ds:0xc00289c0,al
c0011f7e:	e9 a5 01 00 00       	jmp    c0012128 <scanMADT()+0x4b8>
c0011f83:	90                   	nop
c0011f84:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011f89:	0f 85 e9 00 00 00    	jne    c0012078 <scanMADT()+0x408>
c0011f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f93:	8d 50 01             	lea    edx,[eax+0x1]
c0011f96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fa2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011fa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011faa:	8d 50 01             	lea    edx,[eax+0x1]
c0011fad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fb5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fb9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011fbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fc5:	01 d0                	add    eax,edx
c0011fc7:	83 c0 2c             	add    eax,0x2c
c0011fca:	8a 00                	mov    al,BYTE PTR [eax]
c0011fcc:	0f b6 d0             	movzx  edx,al
c0011fcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fda:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fde:	0f b6 c0             	movzx  eax,al
c0011fe1:	c1 e0 08             	shl    eax,0x8
c0011fe4:	89 d1                	mov    ecx,edx
c0011fe6:	09 c1                	or     ecx,eax
c0011fe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fec:	8d 50 02             	lea    edx,[eax+0x2]
c0011fef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ff3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ff7:	0f b6 c0             	movzx  eax,al
c0011ffa:	c1 e0 10             	shl    eax,0x10
c0011ffd:	09 c1                	or     ecx,eax
c0011fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012003:	8d 50 03             	lea    edx,[eax+0x3]
c0012006:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001200a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001200e:	0f b6 c0             	movzx  eax,al
c0012011:	c1 e0 18             	shl    eax,0x18
c0012014:	09 c8                	or     eax,ecx
c0012016:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001201a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001201f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012023:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012027:	01 d0                	add    eax,edx
c0012029:	83 c0 2c             	add    eax,0x2c
c001202c:	8a 00                	mov    al,BYTE PTR [eax]
c001202e:	0f b6 c0             	movzx  eax,al
c0012031:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012035:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012038:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001203c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012040:	0f b6 d2             	movzx  edx,dl
c0012043:	c1 e2 08             	shl    edx,0x8
c0012046:	09 d0                	or     eax,edx
c0012048:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001204d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012052:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0012057:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001205b:	88 90 a0 77 02 c0    	mov    BYTE PTR [eax-0x3ffd8860],dl
c0012061:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0012066:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001206b:	66 89 84 12 a0 89 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7660],ax
c0012073:	e9 b0 00 00 00       	jmp    c0012128 <scanMADT()+0x4b8>
c0012078:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001207d:	0f 85 99 00 00 00    	jne    c001211c <scanMADT()+0x4ac>
c0012083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012087:	8d 50 01             	lea    edx,[eax+0x1]
c001208a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001208e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012092:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012096:	0f b6 c0             	movzx  eax,al
c0012099:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001209d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120a5:	01 d0                	add    eax,edx
c00120a7:	83 c0 2c             	add    eax,0x2c
c00120aa:	8a 00                	mov    al,BYTE PTR [eax]
c00120ac:	0f b6 d0             	movzx  edx,al
c00120af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120b3:	8d 48 01             	lea    ecx,[eax+0x1]
c00120b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120ba:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00120be:	0f b6 c0             	movzx  eax,al
c00120c1:	c1 e0 08             	shl    eax,0x8
c00120c4:	09 d0                	or     eax,edx
c00120c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120ca:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120d3:	8d 50 01             	lea    edx,[eax+0x1]
c00120d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00120da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00120e2:	0f b6 c0             	movzx  eax,al
c00120e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ed:	c1 e0 08             	shl    eax,0x8
c00120f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00120f4:	89 c1                	mov    ecx,eax
c00120f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120fa:	c1 e0 18             	shl    eax,0x18
c00120fd:	89 c3                	mov    ebx,eax
c00120ff:	a1 10 89 02 c0       	mov    eax,ds:0xc0028910
c0012104:	8d 50 01             	lea    edx,[eax+0x1]
c0012107:	89 15 10 89 02 c0    	mov    DWORD PTR ds:0xc0028910,edx
c001210d:	09 d9                	or     ecx,ebx
c001210f:	89 ca                	mov    edx,ecx
c0012111:	89 14 85 20 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd76e0],edx
c0012118:	eb 0e                	jmp    c0012128 <scanMADT()+0x4b8>
c001211a:	66 90                	xchg   ax,ax
c001211c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012121:	75 05                	jne    c0012128 <scanMADT()+0x4b8>
c0012123:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012128:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001212d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012131:	01 d0                	add    eax,edx
c0012133:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012137:	e9 68 fc ff ff       	jmp    c0011da4 <scanMADT()+0x134>
c001213c:	90                   	nop
c001213d:	eb 05                	jmp    c0012144 <scanMADT()+0x4d4>
c001213f:	90                   	nop
c0012140:	90                   	nop
c0012141:	8d 76 00             	lea    esi,[esi+0x0]
c0012144:	83 c4 38             	add    esp,0x38
c0012147:	5b                   	pop    ebx
c0012148:	c3                   	ret    
c0012149:	90                   	nop
c001214a:	66 90                	xchg   ax,ax

c001214c <ACPI::ACPI()>:
c001214c:	83 ec 0c             	sub    esp,0xc
c001214f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012153:	83 ec 08             	sub    esp,0x8
c0012156:	68 63 55 02 c0       	push   0xc0025563
c001215b:	50                   	push   eax
c001215c:	e8 dd c2 ff ff       	call   c000e43e <Device::Device(char const*)>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	ba 24 57 02 c0       	mov    edx,0xc0025724
c0012169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216d:	89 10                	mov    DWORD PTR [eax],edx
c001216f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012173:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001217a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012196:	83 ec 0c             	sub    esp,0xc
c0012199:	68 68 55 02 c0       	push   0xc0025568
c001219e:	e8 c6 78 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	e8 c5 fa ff ff       	call   c0011c70 <scanMADT()>
c00121ab:	90                   	nop
c00121ac:	83 c4 0c             	add    esp,0xc
c00121af:	c3                   	ret    

c00121b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00121b0:	83 ec 2c             	sub    esp,0x2c
c00121b3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00121b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00121bf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00121c3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00121c8:	88 d0                	mov    al,dl
c00121ca:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121ce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121db:	90                   	nop
c00121dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121e6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00121ea:	0f 8d 9c 00 00 00    	jge    c001228c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00121f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121f8:	83 c2 2a             	add    edx,0x2a
c00121fb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00121ff:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012204:	75 7a                	jne    c0012280 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012206:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001220e:	83 c2 2a             	add    edx,0x2a
c0012211:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012215:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012219:	75 65                	jne    c0012280 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001221b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012220:	74 3a                	je     c001225c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012222:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012226:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001222a:	83 c2 2a             	add    edx,0x2a
c001222d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012235:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012238:	39 c2                	cmp    edx,eax
c001223a:	74 10                	je     c001224c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001223c:	83 ec 0c             	sub    esp,0xc
c001223f:	68 bc 53 02 c0       	push   0xc00253bc
c0012244:	e8 7a 27 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0012249:	83 c4 10             	add    esp,0x10
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	68 76 55 02 c0       	push   0xc0025576
c0012254:	e8 6a 27 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0012259:	83 c4 10             	add    esp,0x10
c001225c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012264:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012268:	83 c2 2a             	add    edx,0x2a
c001226b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001226f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012271:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012274:	89 01                	mov    DWORD PTR [ecx],eax
c0012276:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012279:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001227e:	66 90                	xchg   ax,ax
c0012280:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012284:	e9 53 ff ff ff       	jmp    c00121dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012289:	8d 76 00             	lea    esi,[esi+0x0]
c001228c:	90                   	nop
c001228d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012291:	83 c4 2c             	add    esp,0x2c
c0012294:	c2 04 00             	ret    0x4
c0012297:	90                   	nop

c0012298 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012298:	83 ec 1c             	sub    esp,0x1c
c001229b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001229f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00122a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00122ac:	88 c8                	mov    al,cl
c00122ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00122b2:	88 d0                	mov    al,dl
c00122b4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00122b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122bc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122c6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00122c9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00122cd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00122d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00122db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00122df:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00122e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122e6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00122eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122ef:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122f5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00122f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00122fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012300:	83 c2 2a             	add    edx,0x2a
c0012303:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012307:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001230b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012315:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012318:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001231c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012324:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001232a:	8d 50 01             	lea    edx,[eax+0x1]
c001232d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012331:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012341:	3d 00 02 00 00       	cmp    eax,0x200
c0012346:	75 10                	jne    c0012358 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012348:	83 ec 0c             	sub    esp,0xc
c001234b:	68 85 55 02 c0       	push   0xc0025585
c0012350:	e8 6e 26 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0012355:	83 c4 10             	add    esp,0x10
c0012358:	90                   	nop
c0012359:	83 c4 1c             	add    esp,0x1c
c001235c:	c3                   	ret    
c001235d:	90                   	nop
c001235e:	66 90                	xchg   ax,ax

c0012360 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012360:	b8 00 00 00 00       	mov    eax,0x0
c0012365:	c3                   	ret    
c0012366:	66 90                	xchg   ax,ax

c0012368 <ACPI::detectPCI()>:
c0012368:	53                   	push   ebx
c0012369:	83 ec 68             	sub    esp,0x68
c001236c:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012371:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012376:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001237b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012381:	83 e0 04             	and    eax,0x4
c0012384:	84 c0                	test   al,al
c0012386:	74 2c                	je     c00123b4 <ACPI::detectPCI()+0x4c>
c0012388:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c001238d:	83 ec 08             	sub    esp,0x8
c0012390:	68 a2 55 02 c0       	push   0xc00255a2
c0012395:	50                   	push   eax
c0012396:	e8 5d f8 ff ff       	call   c0011bf8 <findDataTable(unsigned char*, char*)>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00123a2:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00123a7:	74 0b                	je     c00123b4 <ACPI::detectPCI()+0x4c>
c00123a9:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123ae:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123b3:	90                   	nop
c00123b4:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00123bc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123c0:	8a 00                	mov    al,BYTE PTR [eax]
c00123c2:	3c 01                	cmp    al,0x1
c00123c4:	75 0e                	jne    c00123d4 <ACPI::detectPCI()+0x6c>
c00123c6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123cb:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123d0:	eb 2a                	jmp    c00123fc <ACPI::detectPCI()+0x94>
c00123d2:	66 90                	xchg   ax,ax
c00123d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123d8:	8a 00                	mov    al,BYTE PTR [eax]
c00123da:	3c 02                	cmp    al,0x2
c00123dc:	75 1e                	jne    c00123fc <ACPI::detectPCI()+0x94>
c00123de:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123e3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00123e8:	74 12                	je     c00123fc <ACPI::detectPCI()+0x94>
c00123ea:	83 ec 0c             	sub    esp,0xc
c00123ed:	68 ec 53 02 c0       	push   0xc00253ec
c00123f2:	e8 cc 25 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c00123f7:	83 c4 10             	add    esp,0x10
c00123fa:	66 90                	xchg   ax,ax
c00123fc:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012400:	83 f0 01             	xor    eax,0x1
c0012403:	84 c0                	test   al,al
c0012405:	74 41                	je     c0012448 <ACPI::detectPCI()+0xe0>
c0012407:	e8 44 dd fe ff       	call   c0000150 <manualPCIProbe>
c001240c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012410:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012415:	75 0d                	jne    c0012424 <ACPI::detectPCI()+0xbc>
c0012417:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001241c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012421:	eb 25                	jmp    c0012448 <ACPI::detectPCI()+0xe0>
c0012423:	90                   	nop
c0012424:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012429:	75 1d                	jne    c0012448 <ACPI::detectPCI()+0xe0>
c001242b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012430:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012435:	74 11                	je     c0012448 <ACPI::detectPCI()+0xe0>
c0012437:	83 ec 0c             	sub    esp,0xc
c001243a:	68 ec 53 02 c0       	push   0xc00253ec
c001243f:	e8 7f 25 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	90                   	nop
c0012448:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001244d:	0f 84 49 03 00 00    	je     c001279c <ACPI::detectPCI()+0x434>
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	68 a7 55 02 c0       	push   0xc00255a7
c001245b:	e8 09 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012460:	83 c4 10             	add    esp,0x10
c0012463:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012468:	0f 84 8e 00 00 00    	je     c00124fc <ACPI::detectPCI()+0x194>
c001246e:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012473:	25 00 08 00 00       	and    eax,0x800
c0012478:	0f 84 16 01 00 00    	je     c0012594 <ACPI::detectPCI()+0x22c>
c001247e:	83 ec 0c             	sub    esp,0xc
c0012481:	68 14 54 02 c0       	push   0xc0025414
c0012486:	e8 de 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001248b:	83 c4 10             	add    esp,0x10
c001248e:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012493:	25 80 00 00 00       	and    eax,0x80
c0012498:	0f 85 f6 00 00 00    	jne    c0012594 <ACPI::detectPCI()+0x22c>
c001249e:	66 90                	xchg   ax,ax
c00124a0:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00124a7:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00124ac:	89 c2                	mov    edx,eax
c00124ae:	ec                   	in     al,dx
c00124af:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00124b3:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00124b7:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00124bb:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00124c0:	74 0a                	je     c00124cc <ACPI::detectPCI()+0x164>
c00124c2:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00124c7:	74 03                	je     c00124cc <ACPI::detectPCI()+0x164>
c00124c9:	eb d5                	jmp    c00124a0 <ACPI::detectPCI()+0x138>
c00124cb:	90                   	nop
c00124cc:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00124d3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00124d8:	89 c2                	mov    edx,eax
c00124da:	ec                   	in     al,dx
c00124db:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00124df:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00124e3:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00124e7:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00124ec:	74 de                	je     c00124cc <ACPI::detectPCI()+0x164>
c00124ee:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00124f3:	0f 85 93 00 00 00    	jne    c001258c <ACPI::detectPCI()+0x224>
c00124f9:	eb d1                	jmp    c00124cc <ACPI::detectPCI()+0x164>
c00124fb:	90                   	nop
c00124fc:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012500:	83 f0 01             	xor    eax,0x1
c0012503:	84 c0                	test   al,al
c0012505:	0f 84 89 00 00 00    	je     c0012594 <ACPI::detectPCI()+0x22c>
c001250b:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012510:	25 00 08 00 00       	and    eax,0x800
c0012515:	74 7d                	je     c0012594 <ACPI::detectPCI()+0x22c>
c0012517:	83 ec 0c             	sub    esp,0xc
c001251a:	68 38 54 02 c0       	push   0xc0025438
c001251f:	e8 45 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012524:	83 c4 10             	add    esp,0x10
c0012527:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c001252c:	25 80 00 00 00       	and    eax,0x80
c0012531:	75 61                	jne    c0012594 <ACPI::detectPCI()+0x22c>
c0012533:	90                   	nop
c0012534:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001253b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012540:	89 c2                	mov    edx,eax
c0012542:	ec                   	in     al,dx
c0012543:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012547:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001254b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001254f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012554:	74 0a                	je     c0012560 <ACPI::detectPCI()+0x1f8>
c0012556:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001255b:	74 03                	je     c0012560 <ACPI::detectPCI()+0x1f8>
c001255d:	eb d5                	jmp    c0012534 <ACPI::detectPCI()+0x1cc>
c001255f:	90                   	nop
c0012560:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012567:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c001256c:	89 c2                	mov    edx,eax
c001256e:	ec                   	in     al,dx
c001256f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012573:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012577:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001257b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012580:	74 de                	je     c0012560 <ACPI::detectPCI()+0x1f8>
c0012582:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012587:	75 07                	jne    c0012590 <ACPI::detectPCI()+0x228>
c0012589:	eb d5                	jmp    c0012560 <ACPI::detectPCI()+0x1f8>
c001258b:	90                   	nop
c001258c:	90                   	nop
c001258d:	eb 05                	jmp    c0012594 <ACPI::detectPCI()+0x22c>
c001258f:	90                   	nop
c0012590:	90                   	nop
c0012591:	8d 76 00             	lea    esi,[esi+0x0]
c0012594:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c001259c:	83 ec 0c             	sub    esp,0xc
c001259f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00125a3:	e8 67 74 ff ff       	call   c0009a0f <malloc>
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	89 c3                	mov    ebx,eax
c00125ad:	83 ec 0c             	sub    esp,0xc
c00125b0:	53                   	push   ebx
c00125b1:	e8 38 ad 00 00       	call   c001d2ee <PCI::PCI()>
c00125b6:	83 c4 10             	add    esp,0x10
c00125b9:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00125bd:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c00125c2:	25 00 08 00 00       	and    eax,0x800
c00125c7:	74 7b                	je     c0012644 <ACPI::detectPCI()+0x2dc>
c00125c9:	83 ec 0c             	sub    esp,0xc
c00125cc:	68 bf 55 02 c0       	push   0xc00255bf
c00125d1:	e8 93 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00125d6:	83 c4 10             	add    esp,0x10
c00125d9:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c00125de:	25 80 00 00 00       	and    eax,0x80
c00125e3:	75 5f                	jne    c0012644 <ACPI::detectPCI()+0x2dc>
c00125e5:	8d 76 00             	lea    esi,[esi+0x0]
c00125e8:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00125ef:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00125f4:	89 c2                	mov    edx,eax
c00125f6:	ec                   	in     al,dx
c00125f7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00125fb:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00125ff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012603:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012608:	74 0a                	je     c0012614 <ACPI::detectPCI()+0x2ac>
c001260a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001260f:	74 03                	je     c0012614 <ACPI::detectPCI()+0x2ac>
c0012611:	eb d5                	jmp    c00125e8 <ACPI::detectPCI()+0x280>
c0012613:	90                   	nop
c0012614:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001261b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012620:	89 c2                	mov    edx,eax
c0012622:	ec                   	in     al,dx
c0012623:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012627:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001262b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001262f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012634:	74 de                	je     c0012614 <ACPI::detectPCI()+0x2ac>
c0012636:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001263b:	75 03                	jne    c0012640 <ACPI::detectPCI()+0x2d8>
c001263d:	eb d5                	jmp    c0012614 <ACPI::detectPCI()+0x2ac>
c001263f:	90                   	nop
c0012640:	90                   	nop
c0012641:	8d 76 00             	lea    esi,[esi+0x0]
c0012644:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012648:	83 ec 08             	sub    esp,0x8
c001264b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001264f:	50                   	push   eax
c0012650:	e8 e5 bb ff ff       	call   c000e23a <Device::addChild(Device*)>
c0012655:	83 c4 10             	add    esp,0x10
c0012658:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c001265d:	25 00 08 00 00       	and    eax,0x800
c0012662:	74 78                	je     c00126dc <ACPI::detectPCI()+0x374>
c0012664:	83 ec 0c             	sub    esp,0xc
c0012667:	68 c5 55 02 c0       	push   0xc00255c5
c001266c:	e8 f8 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012671:	83 c4 10             	add    esp,0x10
c0012674:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012679:	25 80 00 00 00       	and    eax,0x80
c001267e:	75 5c                	jne    c00126dc <ACPI::detectPCI()+0x374>
c0012680:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012687:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001268c:	89 c2                	mov    edx,eax
c001268e:	ec                   	in     al,dx
c001268f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012693:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012697:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001269b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00126a0:	74 0a                	je     c00126ac <ACPI::detectPCI()+0x344>
c00126a2:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00126a7:	74 03                	je     c00126ac <ACPI::detectPCI()+0x344>
c00126a9:	eb d5                	jmp    c0012680 <ACPI::detectPCI()+0x318>
c00126ab:	90                   	nop
c00126ac:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00126b3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00126b8:	89 c2                	mov    edx,eax
c00126ba:	ec                   	in     al,dx
c00126bb:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00126bf:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00126c3:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00126c7:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00126cc:	74 de                	je     c00126ac <ACPI::detectPCI()+0x344>
c00126ce:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00126d3:	75 03                	jne    c00126d8 <ACPI::detectPCI()+0x370>
c00126d5:	eb d5                	jmp    c00126ac <ACPI::detectPCI()+0x344>
c00126d7:	90                   	nop
c00126d8:	90                   	nop
c00126d9:	8d 76 00             	lea    esi,[esi+0x0]
c00126dc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00126e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e2:	83 c0 08             	add    eax,0x8
c00126e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00126ec:	74 0a                	je     c00126f8 <ACPI::detectPCI()+0x390>
c00126ee:	ba 01 00 00 00       	mov    edx,0x1
c00126f3:	eb 0b                	jmp    c0012700 <ACPI::detectPCI()+0x398>
c00126f5:	8d 76 00             	lea    esi,[esi+0x0]
c00126f8:	ba 02 00 00 00       	mov    edx,0x2
c00126fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012700:	6a 00                	push   0x0
c0012702:	6a 00                	push   0x0
c0012704:	52                   	push   edx
c0012705:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012709:	ff d0                	call   eax
c001270b:	83 c4 10             	add    esp,0x10
c001270e:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012713:	25 00 08 00 00       	and    eax,0x800
c0012718:	0f 84 26 01 00 00    	je     c0012844 <ACPI::detectPCI()+0x4dc>
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	68 cb 55 02 c0       	push   0xc00255cb
c0012726:	e8 3e 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0012733:	25 80 00 00 00       	and    eax,0x80
c0012738:	0f 85 06 01 00 00    	jne    c0012844 <ACPI::detectPCI()+0x4dc>
c001273e:	66 90                	xchg   ax,ax
c0012740:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012747:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001274c:	89 c2                	mov    edx,eax
c001274e:	ec                   	in     al,dx
c001274f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012753:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012757:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001275b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012760:	74 0a                	je     c001276c <ACPI::detectPCI()+0x404>
c0012762:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012767:	74 03                	je     c001276c <ACPI::detectPCI()+0x404>
c0012769:	eb d5                	jmp    c0012740 <ACPI::detectPCI()+0x3d8>
c001276b:	90                   	nop
c001276c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012773:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012778:	89 c2                	mov    edx,eax
c001277a:	ec                   	in     al,dx
c001277b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001277f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012783:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012787:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001278c:	74 de                	je     c001276c <ACPI::detectPCI()+0x404>
c001278e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012793:	0f 85 a7 00 00 00    	jne    c0012840 <ACPI::detectPCI()+0x4d8>
c0012799:	eb d1                	jmp    c001276c <ACPI::detectPCI()+0x404>
c001279b:	90                   	nop
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 d1 55 02 c0       	push   0xc00255d1
c00127a4:	e8 52 a5 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	83 ec 0c             	sub    esp,0xc
c00127af:	68 dc 55 02 c0       	push   0xc00255dc
c00127b4:	e8 b0 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00127c4:	83 ec 0c             	sub    esp,0xc
c00127c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127cb:	e8 3f 72 ff ff       	call   c0009a0f <malloc>
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	89 c3                	mov    ebx,eax
c00127d5:	83 ec 0c             	sub    esp,0xc
c00127d8:	53                   	push   ebx
c00127d9:	e8 7a bc 00 00       	call   c001e458 <IDE::IDE()>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00127e5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00127e9:	83 ec 08             	sub    esp,0x8
c00127ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127f0:	50                   	push   eax
c00127f1:	e8 44 ba ff ff       	call   c000e23a <Device::addChild(Device*)>
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127fd:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012807:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001280b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012814:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012818:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012821:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012825:	8b 00                	mov    eax,DWORD PTR [eax]
c0012827:	83 c0 08             	add    eax,0x8
c001282a:	8b 00                	mov    eax,DWORD PTR [eax]
c001282c:	6a 00                	push   0x0
c001282e:	6a 00                	push   0x0
c0012830:	6a 00                	push   0x0
c0012832:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012836:	ff d0                	call   eax
c0012838:	83 c4 10             	add    esp,0x10
c001283b:	eb 07                	jmp    c0012844 <ACPI::detectPCI()+0x4dc>
c001283d:	8d 76 00             	lea    esi,[esi+0x0]
c0012840:	90                   	nop
c0012841:	8d 76 00             	lea    esi,[esi+0x0]
c0012844:	90                   	nop
c0012845:	83 c4 68             	add    esp,0x68
c0012848:	5b                   	pop    ebx
c0012849:	c3                   	ret    
c001284a:	66 90                	xchg   ax,ax

c001284c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001284c:	83 ec 1c             	sub    esp,0x1c
c001284f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012853:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012856:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001285a:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001285f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012864:	83 ec 08             	sub    esp,0x8
c0012867:	52                   	push   edx
c0012868:	50                   	push   eax
c0012869:	e8 70 67 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c001286e:	83 c4 10             	add    esp,0x10
c0012871:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012875:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001287a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001287f:	83 ec 04             	sub    esp,0x4
c0012882:	6a 01                	push   0x1
c0012884:	52                   	push   edx
c0012885:	50                   	push   eax
c0012886:	e8 2f 69 ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c001288b:	83 c4 10             	add    esp,0x10
c001288e:	90                   	nop
c001288f:	83 c4 1c             	add    esp,0x1c
c0012892:	c3                   	ret    
c0012893:	90                   	nop

c0012894 <ACPI::sleep()>:
c0012894:	83 ec 0c             	sub    esp,0xc
c0012897:	83 ec 0c             	sub    esp,0xc
c001289a:	68 f1 55 02 c0       	push   0xc00255f1
c001289f:	e8 57 a4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00128a4:	83 c4 10             	add    esp,0x10
c00128a7:	a1 e0 86 02 c0       	mov    eax,ds:0xc00286e0
c00128ac:	85 c0                	test   eax,eax
c00128ae:	74 18                	je     c00128c8 <ACPI::sleep()+0x34>
c00128b0:	83 ec 0c             	sub    esp,0xc
c00128b3:	68 fe 55 02 c0       	push   0xc00255fe
c00128b8:	e8 3e a4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00128bd:	83 c4 10             	add    esp,0x10
c00128c0:	a1 e0 86 02 c0       	mov    eax,ds:0xc00286e0
c00128c5:	ff d0                	call   eax
c00128c7:	90                   	nop
c00128c8:	90                   	nop
c00128c9:	83 c4 0c             	add    esp,0xc
c00128cc:	c3                   	ret    
c00128cd:	90                   	nop
c00128ce:	66 90                	xchg   ax,ax

c00128d0 <ACPI::open(int, int, void*)>:
c00128d0:	57                   	push   edi
c00128d1:	56                   	push   esi
c00128d2:	53                   	push   ebx
c00128d3:	81 ec 70 01 00 00    	sub    esp,0x170
c00128d9:	83 ec 0c             	sub    esp,0xc
c00128dc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00128e3:	e8 80 fa ff ff       	call   c0012368 <ACPI::detectPCI()>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	68 5c 54 02 c0       	push   0xc002545c
c00128f3:	e8 71 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00128f8:	83 c4 10             	add    esp,0x10
c00128fb:	83 ec 0c             	sub    esp,0xc
c00128fe:	68 18 56 02 c0       	push   0xc0025618
c0012903:	e8 c3 49 00 00       	call   c00172cb <Thr::loadKernelSymbolTable(char const*)>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012913:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001291e:	83 ec 0c             	sub    esp,0xc
c0012921:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012928:	e8 e2 70 ff ff       	call   c0009a0f <malloc>
c001292d:	83 c4 10             	add    esp,0x10
c0012930:	89 c3                	mov    ebx,eax
c0012932:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0012937:	83 ec 04             	sub    esp,0x4
c001293a:	50                   	push   eax
c001293b:	68 36 56 02 c0       	push   0xc0025636
c0012940:	53                   	push   ebx
c0012941:	e8 20 a9 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012946:	83 c4 10             	add    esp,0x10
c0012949:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	6a 01                	push   0x1
c0012955:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001295c:	e8 c7 a9 ff ff       	call   c000d328 <File::open(FileOpenMode)>
c0012961:	83 c4 10             	add    esp,0x10
c0012964:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001296b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012973:	75 17                	jne    c001298c <ACPI::open(int, int, void*)+0xbc>
c0012975:	83 ec 0c             	sub    esp,0xc
c0012978:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001297f:	e8 02 aa ff ff       	call   c000d386 <File::close()>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	eb 0b                	jmp    c0012994 <ACPI::open(int, int, void*)+0xc4>
c0012989:	8d 76 00             	lea    esi,[esi+0x0]
c001298c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012994:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001299c:	74 1e                	je     c00129bc <ACPI::open(int, int, void*)+0xec>
c001299e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00129a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a7:	83 c0 08             	add    eax,0x8
c00129aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129b6:	ff d0                	call   eax
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	90                   	nop
c00129bc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00129c3:	83 f0 01             	xor    eax,0x1
c00129c6:	84 c0                	test   al,al
c00129c8:	74 42                	je     c0012a0c <ACPI::open(int, int, void*)+0x13c>
c00129ca:	83 ec 0c             	sub    esp,0xc
c00129cd:	68 54 56 02 c0       	push   0xc0025654
c00129d2:	e8 92 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	83 ec 04             	sub    esp,0x4
c00129dd:	6a 0c                	push   0xc
c00129df:	68 6f 56 02 c0       	push   0xc002566f
c00129e4:	68 80 56 02 c0       	push   0xc0025680
c00129e9:	e8 47 2f 00 00       	call   c0015935 <Reg::readIntWithDefault(char*, char*, int)>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00129f8:	83 ec 0c             	sub    esp,0xc
c00129fb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012a02:	e8 d8 91 ff ff       	call   c000bbdf <Virt::setupPageSwapping(int)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	66 90                	xchg   ax,ax
c0012a0c:	83 ec 0c             	sub    esp,0xc
c0012a0f:	68 c6 3d 02 c0       	push   0xc0023dc6
c0012a14:	e8 50 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c0012a22:	83 ec 08             	sub    esp,0x8
c0012a25:	6a 01                	push   0x1
c0012a27:	68 87 56 02 c0       	push   0xc0025687
c0012a2c:	e8 11 53 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	83 ec 08             	sub    esp,0x8
c0012a37:	53                   	push   ebx
c0012a38:	50                   	push   eax
c0012a39:	e8 35 55 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0012a3e:	83 c4 10             	add    esp,0x10
c0012a41:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012a48:	83 ec 08             	sub    esp,0x8
c0012a4b:	6a 12                	push   0x12
c0012a4d:	50                   	push   eax
c0012a4e:	e8 6b bb ff ff       	call   c000e5be <getDevicesOfType(DeviceType)>
c0012a53:	83 c4 0c             	add    esp,0xc
c0012a56:	66 90                	xchg   ax,ax
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a62:	50                   	push   eax
c0012a63:	e8 58 05 01 00       	call   c0022fc0 <LinkedList<Device>::isEmpty()>
c0012a68:	83 c4 10             	add    esp,0x10
c0012a6b:	83 f0 01             	xor    eax,0x1
c0012a6e:	84 c0                	test   al,al
c0012a70:	0f 84 46 01 00 00    	je     c0012bbc <ACPI::open(int, int, void*)+0x2ec>
c0012a76:	83 ec 0c             	sub    esp,0xc
c0012a79:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a80:	50                   	push   eax
c0012a81:	e8 56 05 01 00       	call   c0022fdc <LinkedList<Device>::getFirstElement()>
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a9a:	50                   	push   eax
c0012a9b:	e8 44 05 01 00       	call   c0022fe4 <LinkedList<Device>::removeFirst()>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012aaa:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012ab1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012ab8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012abc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012ac2:	ba 09 00 00 00       	mov    edx,0x9
c0012ac7:	fc                   	cld    
c0012ac8:	89 c7                	mov    edi,eax
c0012aca:	89 de                	mov    esi,ebx
c0012acc:	89 d1                	mov    ecx,edx
c0012ace:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ad0:	83 ec 08             	sub    esp,0x8
c0012ad3:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012ad7:	50                   	push   eax
c0012ad8:	83 ec 24             	sub    esp,0x24
c0012adb:	89 e0                	mov    eax,esp
c0012add:	89 c3                	mov    ebx,eax
c0012adf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012ae3:	ba 09 00 00 00       	mov    edx,0x9
c0012ae8:	89 df                	mov    edi,ebx
c0012aea:	89 c6                	mov    esi,eax
c0012aec:	89 d1                	mov    ecx,edx
c0012aee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012af0:	e8 d7 ac 00 00       	call   c001d7cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012af5:	83 c4 30             	add    esp,0x30
c0012af8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012aff:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012b07:	0f 84 4b ff ff ff    	je     c0012a58 <ACPI::open(int, int, void*)+0x188>
c0012b0d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b18:	83 ec 0c             	sub    esp,0xc
c0012b1b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b22:	e8 e8 6e ff ff       	call   c0009a0f <malloc>
c0012b27:	83 c4 10             	add    esp,0x10
c0012b2a:	89 c3                	mov    ebx,eax
c0012b2c:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0012b31:	83 ec 04             	sub    esp,0x4
c0012b34:	50                   	push   eax
c0012b35:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b3c:	53                   	push   ebx
c0012b3d:	e8 24 a7 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012b42:	83 c4 10             	add    esp,0x10
c0012b45:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012b4c:	83 ec 0c             	sub    esp,0xc
c0012b4f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b56:	e8 3b aa ff ff       	call   c000d596 <File::exists()>
c0012b5b:	83 c4 10             	add    esp,0x10
c0012b5e:	84 c0                	test   al,al
c0012b60:	74 2a                	je     c0012b8c <ACPI::open(int, int, void*)+0x2bc>
c0012b62:	83 ec 08             	sub    esp,0x8
c0012b65:	6a 01                	push   0x1
c0012b67:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b6e:	e8 cf 51 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	83 ec 08             	sub    esp,0x8
c0012b79:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b80:	50                   	push   eax
c0012b81:	e8 ed 53 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	8d 76 00             	lea    esi,[esi+0x0]
c0012b8c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012b94:	0f 84 be fe ff ff    	je     c0012a58 <ACPI::open(int, int, void*)+0x188>
c0012b9a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba3:	83 c0 08             	add    eax,0x8
c0012ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bb2:	ff d0                	call   eax
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	e9 9c fe ff ff       	jmp    c0012a58 <ACPI::open(int, int, void*)+0x188>
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012bc6:	50                   	push   eax
c0012bc7:	e8 f0 03 01 00       	call   c0022fbc <LinkedList<Device>::~LinkedList()>
c0012bcc:	83 c4 10             	add    esp,0x10
c0012bcf:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c0012bd5:	83 ec 08             	sub    esp,0x8
c0012bd8:	6a 01                	push   0x1
c0012bda:	68 a2 56 02 c0       	push   0xc00256a2
c0012bdf:	e8 5e 51 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0012be4:	83 c4 10             	add    esp,0x10
c0012be7:	83 ec 08             	sub    esp,0x8
c0012bea:	53                   	push   ebx
c0012beb:	50                   	push   eax
c0012bec:	e8 82 53 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0012bf1:	83 c4 10             	add    esp,0x10
c0012bf4:	8b 1d a8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280a8
c0012bfa:	83 ec 08             	sub    esp,0x8
c0012bfd:	6a 01                	push   0x1
c0012bff:	68 bf 56 02 c0       	push   0xc00256bf
c0012c04:	e8 39 51 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0012c09:	83 c4 10             	add    esp,0x10
c0012c0c:	83 ec 08             	sub    esp,0x8
c0012c0f:	53                   	push   ebx
c0012c10:	50                   	push   eax
c0012c11:	e8 5d 53 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0012c1e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c24:	83 e0 04             	and    eax,0x4
c0012c27:	84 c0                	test   al,al
c0012c29:	0f 84 15 01 00 00    	je     c0012d44 <ACPI::open(int, int, void*)+0x474>
c0012c2f:	83 ec 0c             	sub    esp,0xc
c0012c32:	68 dc 56 02 c0       	push   0xc00256dc
c0012c37:	e8 2d 6e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012c4a:	83 ec 0c             	sub    esp,0xc
c0012c4d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012c54:	e8 b6 6d ff ff       	call   c0009a0f <malloc>
c0012c59:	83 c4 10             	add    esp,0x10
c0012c5c:	89 c3                	mov    ebx,eax
c0012c5e:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0012c63:	83 ec 04             	sub    esp,0x4
c0012c66:	50                   	push   eax
c0012c67:	68 f9 56 02 c0       	push   0xc00256f9
c0012c6c:	53                   	push   ebx
c0012c6d:	e8 f4 a5 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012c7c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c84:	74 1a                	je     c0012ca0 <ACPI::open(int, int, void*)+0x3d0>
c0012c86:	83 ec 0c             	sub    esp,0xc
c0012c89:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012c90:	e8 01 a9 ff ff       	call   c000d596 <File::exists()>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	84 c0                	test   al,al
c0012c9a:	74 04                	je     c0012ca0 <ACPI::open(int, int, void*)+0x3d0>
c0012c9c:	b0 01                	mov    al,0x1
c0012c9e:	eb 04                	jmp    c0012ca4 <ACPI::open(int, int, void*)+0x3d4>
c0012ca0:	b0 00                	mov    al,0x0
c0012ca2:	66 90                	xchg   ax,ax
c0012ca4:	84 c0                	test   al,al
c0012ca6:	74 28                	je     c0012cd0 <ACPI::open(int, int, void*)+0x400>
c0012ca8:	83 ec 08             	sub    esp,0x8
c0012cab:	6a 01                	push   0x1
c0012cad:	68 f9 56 02 c0       	push   0xc00256f9
c0012cb2:	e8 8b 50 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0012cb7:	83 c4 10             	add    esp,0x10
c0012cba:	83 ec 08             	sub    esp,0x8
c0012cbd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012cc4:	50                   	push   eax
c0012cc5:	e8 a9 52 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cd8:	74 2a                	je     c0012d04 <ACPI::open(int, int, void*)+0x434>
c0012cda:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012ce2:	74 20                	je     c0012d04 <ACPI::open(int, int, void*)+0x434>
c0012ce4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ced:	83 c0 08             	add    eax,0x8
c0012cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012cfc:	ff d0                	call   eax
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	8d 76 00             	lea    esi,[esi+0x0]
c0012d04:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c0012d09:	83 ec 08             	sub    esp,0x8
c0012d0c:	68 16 57 02 c0       	push   0xc0025716
c0012d11:	50                   	push   eax
c0012d12:	e8 e1 ee ff ff       	call   c0011bf8 <findDataTable(unsigned char*, char*)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d21:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012d29:	74 19                	je     c0012d44 <ACPI::open(int, int, void*)+0x474>
c0012d2b:	83 ec 08             	sub    esp,0x8
c0012d2e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d35:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d3c:	e8 0b fb ff ff       	call   c001284c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	b8 00 00 00 00       	mov    eax,0x0
c0012d49:	81 c4 70 01 00 00    	add    esp,0x170
c0012d4f:	5b                   	pop    ebx
c0012d50:	5e                   	pop    esi
c0012d51:	5f                   	pop    edi
c0012d52:	c3                   	ret    
c0012d53:	90                   	nop

c0012d54 <CPU::close(int, int, void*)>:
c0012d54:	31 c0                	xor    eax,eax
c0012d56:	c3                   	ret    
c0012d57:	90                   	nop

c0012d58 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012d58:	55                   	push   ebp
c0012d59:	57                   	push   edi
c0012d5a:	56                   	push   esi
c0012d5b:	53                   	push   ebx
c0012d5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d64:	89 ce                	mov    esi,ecx
c0012d66:	89 d5                	mov    ebp,edx
c0012d68:	80 f9 04             	cmp    cl,0x4
c0012d6b:	75 28                	jne    c0012d95 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012d6d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012d70:	3c 03                	cmp    al,0x3
c0012d72:	0f 86 63 01 00 00    	jbe    c0012edb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d78:	80 fa 03             	cmp    dl,0x3
c0012d7b:	0f 84 5a 01 00 00    	je     c0012edb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d81:	8d 7a f2             	lea    edi,[edx-0xe]
c0012d84:	b8 70 79 02 c0       	mov    eax,0xc0027970
c0012d89:	89 fb                	mov    ebx,edi
c0012d8b:	80 fb 01             	cmp    bl,0x1
c0012d8e:	77 4e                	ja     c0012dde <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012d90:	e9 52 01 00 00       	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d95:	80 f9 05             	cmp    cl,0x5
c0012d98:	75 4d                	jne    c0012de7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012d9a:	b8 80 79 02 c0       	mov    eax,0xc0027980
c0012d9f:	80 fa 03             	cmp    dl,0x3
c0012da2:	0f 86 3f 01 00 00    	jbe    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da8:	8d 7a fa             	lea    edi,[edx-0x6]
c0012dab:	b8 90 79 02 c0       	mov    eax,0xc0027990
c0012db0:	89 fb                	mov    ebx,edi
c0012db2:	80 fb 01             	cmp    bl,0x1
c0012db5:	0f 86 2c 01 00 00    	jbe    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dbb:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012dc0:	80 fa 08             	cmp    dl,0x8
c0012dc3:	0f 84 1e 01 00 00    	je     c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dc9:	89 d7                	mov    edi,edx
c0012dcb:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012dd0:	83 e7 fb             	and    edi,0xfffffffb
c0012dd3:	89 fb                	mov    ebx,edi
c0012dd5:	80 fb 09             	cmp    bl,0x9
c0012dd8:	0f 84 09 01 00 00    	je     c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dde:	31 c0                	xor    eax,eax
c0012de0:	89 eb                	mov    ebx,ebp
c0012de2:	0f b6 fb             	movzx  edi,bl
c0012de5:	eb 30                	jmp    c0012e17 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012de7:	31 c0                	xor    eax,eax
c0012de9:	80 f9 06             	cmp    cl,0x6
c0012dec:	75 f2                	jne    c0012de0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012dee:	80 fa 0a             	cmp    dl,0xa
c0012df1:	77 ed                	ja     c0012de0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012df3:	bf de 05 00 00       	mov    edi,0x5de
c0012df8:	0f a3 d7             	bt     edi,edx
c0012dfb:	73 e3                	jae    c0012de0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012dfd:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0012e02:	e9 e0 00 00 00       	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e07:	39 c7                	cmp    edi,eax
c0012e09:	0f 84 d3 00 00 00    	je     c0012ee2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e0f:	40                   	inc    eax
c0012e10:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e15:	74 09                	je     c0012e20 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e17:	89 f3                	mov    ebx,esi
c0012e19:	80 fb 0f             	cmp    bl,0xf
c0012e1c:	75 f1                	jne    c0012e0f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e1e:	eb e7                	jmp    c0012e07 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e20:	80 f9 10             	cmp    cl,0x10
c0012e23:	75 14                	jne    c0012e39 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e25:	8d 42 fc             	lea    eax,[edx-0x4]
c0012e28:	83 e0 fb             	and    eax,0xfffffffb
c0012e2b:	3c 02                	cmp    al,0x2
c0012e2d:	76 34                	jbe    c0012e63 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012e2f:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012e34:	80 fa 02             	cmp    dl,0x2
c0012e37:	eb 24                	jmp    c0012e5d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012e39:	80 f9 11             	cmp    cl,0x11
c0012e3c:	75 13                	jne    c0012e51 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012e3e:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012e43:	80 fa 03             	cmp    dl,0x3
c0012e46:	0f 85 9b 00 00 00    	jne    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e4c:	e9 91 00 00 00       	jmp    c0012ee2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e51:	80 f9 12             	cmp    cl,0x12
c0012e54:	75 14                	jne    c0012e6a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012e56:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012e5b:	fe ca                	dec    dl
c0012e5d:	0f 85 84 00 00 00    	jne    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e63:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c0012e68:	eb 7d                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e6a:	80 f9 14             	cmp    cl,0x14
c0012e6d:	75 12                	jne    c0012e81 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012e6f:	4a                   	dec    edx
c0012e70:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012e75:	80 fa 01             	cmp    dl,0x1
c0012e78:	77 6d                	ja     c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e7a:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c0012e7f:	eb 66                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e81:	80 f9 15             	cmp    cl,0x15
c0012e84:	75 31                	jne    c0012eb7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012e86:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0012e8b:	80 fa 01             	cmp    dl,0x1
c0012e8e:	74 57                	je     c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e90:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012e95:	80 fa 13             	cmp    dl,0x13
c0012e98:	76 0c                	jbe    c0012ea6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012e9a:	80 fa 30             	cmp    dl,0x30
c0012e9d:	75 48                	jne    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e9f:	b8 20 7a 02 c0       	mov    eax,0xc0027a20
c0012ea4:	eb 41                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ea6:	b9 04 00 09 00       	mov    ecx,0x90004
c0012eab:	0f a3 d1             	bt     ecx,edx
c0012eae:	73 37                	jae    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eb0:	b8 10 7a 02 c0       	mov    eax,0xc0027a10
c0012eb5:	eb 30                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eb7:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012ebc:	80 f9 16             	cmp    cl,0x16
c0012ebf:	75 26                	jne    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec1:	b8 30 7a 02 c0       	mov    eax,0xc0027a30
c0012ec6:	84 d2                	test   dl,dl
c0012ec8:	74 1d                	je     c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eca:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012ecf:	80 fa 30             	cmp    dl,0x30
c0012ed2:	75 13                	jne    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ed4:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c0012ed9:	eb 0c                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012edb:	b8 60 79 02 c0       	mov    eax,0xc0027960
c0012ee0:	eb 05                	jmp    c0012ee7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ee2:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c0012ee7:	5b                   	pop    ebx
c0012ee8:	5e                   	pop    esi
c0012ee9:	5f                   	pop    edi
c0012eea:	5d                   	pop    ebp
c0012eeb:	c3                   	ret    

c0012eec <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012eec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef4:	80 f9 04             	cmp    cl,0x4
c0012ef7:	75 6b                	jne    c0012f64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012ef9:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c0012efe:	80 fa 01             	cmp    dl,0x1
c0012f01:	0f 86 92 02 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f07:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c0012f0c:	80 fa 02             	cmp    dl,0x2
c0012f0f:	0f 84 84 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f15:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c0012f1a:	80 fa 03             	cmp    dl,0x3
c0012f1d:	0f 84 76 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f23:	b8 f0 77 02 c0       	mov    eax,0xc00277f0
c0012f28:	80 fa 04             	cmp    dl,0x4
c0012f2b:	0f 84 68 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f31:	b8 00 78 02 c0       	mov    eax,0xc0027800
c0012f36:	80 fa 05             	cmp    dl,0x5
c0012f39:	0f 84 5a 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f3f:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c0012f44:	80 fa 07             	cmp    dl,0x7
c0012f47:	0f 84 4c 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f4d:	83 ea 08             	sub    edx,0x8
c0012f50:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012f55:	80 fa 01             	cmp    dl,0x1
c0012f58:	0f 87 3b 02 00 00    	ja     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f5e:	b8 10 78 02 c0       	mov    eax,0xc0027810
c0012f63:	c3                   	ret    
c0012f64:	80 f9 05             	cmp    cl,0x5
c0012f67:	75 45                	jne    c0012fae <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012f69:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012f6c:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012f71:	80 f9 02             	cmp    cl,0x2
c0012f74:	0f 86 1f 02 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7a:	80 fa 04             	cmp    dl,0x4
c0012f7d:	0f 84 f3 01 00 00    	je     c0013176 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012f83:	80 fa 07             	cmp    dl,0x7
c0012f86:	0f 84 0d 02 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f8c:	b8 30 78 02 c0       	mov    eax,0xc0027830
c0012f91:	80 fa 08             	cmp    dl,0x8
c0012f94:	0f 84 ff 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9a:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0012f9f:	80 fa 09             	cmp    dl,0x9
c0012fa2:	0f 85 f1 01 00 00    	jne    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa8:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0012fad:	c3                   	ret    
c0012fae:	80 f9 06             	cmp    cl,0x6
c0012fb1:	0f 85 85 01 00 00    	jne    c001313c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012fb7:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0012fbc:	80 fa 01             	cmp    dl,0x1
c0012fbf:	0f 84 d4 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fc5:	8d 42 fb             	lea    eax,[edx-0x5]
c0012fc8:	3c 01                	cmp    al,0x1
c0012fca:	0f 86 ac 01 00 00    	jbe    c001317c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fd0:	80 fa 03             	cmp    dl,0x3
c0012fd3:	0f 84 a3 01 00 00    	je     c001317c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fd9:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012fdc:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0012fe1:	80 f9 01             	cmp    cl,0x1
c0012fe4:	0f 86 af 01 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fea:	80 fa 09             	cmp    dl,0x9
c0012fed:	0f 84 8f 01 00 00    	je     c0013182 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012ff3:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012ff6:	80 f9 01             	cmp    cl,0x1
c0012ff9:	0f 86 9a 01 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fff:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0013004:	80 fa 0d             	cmp    dl,0xd
c0013007:	0f 84 8c 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001300d:	b8 90 78 02 c0       	mov    eax,0xc0027890
c0013012:	80 fa 0e             	cmp    dl,0xe
c0013015:	0f 84 7e 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001301b:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0013020:	80 fa 0f             	cmp    dl,0xf
c0013023:	0f 84 70 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013029:	b8 80 78 02 c0       	mov    eax,0xc0027880
c001302e:	80 fa 15             	cmp    dl,0x15
c0013031:	0f 84 62 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013037:	8d 4a ea             	lea    ecx,[edx-0x16]
c001303a:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c001303f:	80 f9 01             	cmp    cl,0x1
c0013042:	0f 86 51 01 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013048:	80 fa 1a             	cmp    dl,0x1a
c001304b:	0f 84 37 01 00 00    	je     c0013188 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013051:	80 fa 1c             	cmp    dl,0x1c
c0013054:	0f 84 34 01 00 00    	je     c001318e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001305a:	80 fa 1d             	cmp    dl,0x1d
c001305d:	0f 84 36 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013063:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0013068:	80 fa 25             	cmp    dl,0x25
c001306b:	0f 84 28 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013071:	8d 4a da             	lea    ecx,[edx-0x26]
c0013074:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0013079:	80 f9 01             	cmp    cl,0x1
c001307c:	0f 86 17 01 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013082:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0013087:	80 fa 2a             	cmp    dl,0x2a
c001308a:	0f 84 09 01 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013090:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0013095:	80 fa 2c             	cmp    dl,0x2c
c0013098:	0f 84 fb 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001309e:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c00130a3:	80 fa 2d             	cmp    dl,0x2d
c00130a6:	0f 84 ed 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130ac:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c00130b1:	80 fa 2e             	cmp    dl,0x2e
c00130b4:	0f 84 df 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130ba:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c00130bf:	80 fa 2f             	cmp    dl,0x2f
c00130c2:	0f 84 d1 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00130cb:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c00130d0:	80 f9 01             	cmp    cl,0x1
c00130d3:	0f 86 c0 00 00 00    	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130d9:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c00130de:	80 fa 37             	cmp    dl,0x37
c00130e1:	0f 84 b2 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130e7:	b8 00 79 02 c0       	mov    eax,0xc0027900
c00130ec:	80 fa 3a             	cmp    dl,0x3a
c00130ef:	0f 84 a4 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f5:	b8 10 79 02 c0       	mov    eax,0xc0027910
c00130fa:	80 fa 3c             	cmp    dl,0x3c
c00130fd:	0f 84 96 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013103:	b8 20 79 02 c0       	mov    eax,0xc0027920
c0013108:	80 fa 3d             	cmp    dl,0x3d
c001310b:	0f 84 88 00 00 00    	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013111:	b8 00 79 02 c0       	mov    eax,0xc0027900
c0013116:	80 fa 3e             	cmp    dl,0x3e
c0013119:	74 7e                	je     c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001311b:	8d 42 bb             	lea    eax,[edx-0x45]
c001311e:	3c 01                	cmp    al,0x1
c0013120:	76 72                	jbe    c0013194 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013122:	80 fa 3f             	cmp    dl,0x3f
c0013125:	74 6d                	je     c0013194 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013127:	80 fa 4a             	cmp    dl,0x4a
c001312a:	74 0a                	je     c0013136 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001312c:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0013131:	80 fa 4d             	cmp    dl,0x4d
c0013134:	75 63                	jne    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013136:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c001313b:	c3                   	ret    
c001313c:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c0013141:	80 f9 0b             	cmp    cl,0xb
c0013144:	75 0a                	jne    c0013150 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013146:	fe ca                	dec    dl
c0013148:	75 4f                	jne    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001314a:	b8 30 79 02 c0       	mov    eax,0xc0027930
c001314f:	c3                   	ret    
c0013150:	80 f9 0f             	cmp    cl,0xf
c0013153:	75 44                	jne    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013155:	b8 40 79 02 c0       	mov    eax,0xc0027940
c001315a:	80 fa 02             	cmp    dl,0x2
c001315d:	76 3a                	jbe    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001315f:	8d 42 fd             	lea    eax,[edx-0x3]
c0013162:	3c 01                	cmp    al,0x1
c0013164:	76 0a                	jbe    c0013170 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013166:	b8 9d 58 02 c0       	mov    eax,0xc002589d
c001316b:	80 fa 06             	cmp    dl,0x6
c001316e:	75 29                	jne    c0013199 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013170:	b8 50 79 02 c0       	mov    eax,0xc0027950
c0013175:	c3                   	ret    
c0013176:	b8 30 78 02 c0       	mov    eax,0xc0027830
c001317b:	c3                   	ret    
c001317c:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0013181:	c3                   	ret    
c0013182:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0013187:	c3                   	ret    
c0013188:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c001318d:	c3                   	ret    
c001318e:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0013193:	c3                   	ret    
c0013194:	b8 10 79 02 c0       	mov    eax,0xc0027910
c0013199:	c3                   	ret    

c001319a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001319a:	60                   	pusha  
c001319b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001319f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131a7:	9c                   	pushf  
c00131a8:	fa                   	cli    
c00131a9:	0f 09                	wbinvd 
c00131ab:	0f 30                	wrmsr  
c00131ad:	9d                   	popf   
c00131ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b2:	89 02                	mov    DWORD PTR [edx],eax
c00131b4:	61                   	popa   
c00131b5:	c3                   	ret    

c00131b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00131b6:	60                   	pusha  
c00131b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131bb:	9c                   	pushf  
c00131bc:	fa                   	cli    
c00131bd:	0f 09                	wbinvd 
c00131bf:	31 c0                	xor    eax,eax
c00131c1:	31 d2                	xor    edx,edx
c00131c3:	0f 32                	rdmsr  
c00131c5:	9d                   	popf   
c00131c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131ca:	89 02                	mov    DWORD PTR [edx],eax
c00131cc:	61                   	popa   
c00131cd:	c3                   	ret    

c00131ce <CPU::AMD_K6_writeback(int, int, int)>:
c00131ce:	56                   	push   esi
c00131cf:	53                   	push   ebx
c00131d0:	83 ec 10             	sub    esp,0x10
c00131d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131d7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00131dc:	75 5d                	jne    c001323b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131de:	83 f8 08             	cmp    eax,0x8
c00131e1:	75 09                	jne    c00131ec <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00131e3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00131e8:	7e 13                	jle    c00131fd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131ea:	eb 30                	jmp    c001321c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131ec:	83 f8 06             	cmp    eax,0x6
c00131ef:	7c 4a                	jl     c001323b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131f1:	83 f8 07             	cmp    eax,0x7
c00131f4:	7e 07                	jle    c00131fd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131f6:	83 f8 09             	cmp    eax,0x9
c00131f9:	74 21                	je     c001321c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131fb:	eb 3e                	jmp    c001323b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131fd:	89 e6                	mov    esi,esp
c00131ff:	8b 1d cc 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280cc
c0013205:	56                   	push   esi
c0013206:	c1 eb 15             	shr    ebx,0x15
c0013209:	68 82 00 00 c0       	push   0xc0000082
c001320e:	83 e3 7e             	and    ebx,0x7e
c0013211:	e8 a0 ff ff ff       	call   c00131b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013216:	56                   	push   esi
c0013217:	6a 00                	push   0x0
c0013219:	53                   	push   ebx
c001321a:	eb 12                	jmp    c001322e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001321c:	89 e3                	mov    ebx,esp
c001321e:	53                   	push   ebx
c001321f:	68 82 00 00 c0       	push   0xc0000082
c0013224:	e8 8d ff ff ff       	call   c00131b6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013229:	53                   	push   ebx
c001322a:	6a 00                	push   0x0
c001322c:	6a 00                	push   0x0
c001322e:	68 82 00 00 c0       	push   0xc0000082
c0013233:	e8 62 ff ff ff       	call   c001319a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013238:	83 c4 18             	add    esp,0x18
c001323b:	83 c4 10             	add    esp,0x10
c001323e:	5b                   	pop    ebx
c001323f:	5e                   	pop    esi
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013242:	55                   	push   ebp
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	53                   	push   ebx
c0013246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001324a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001324e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013252:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013256:	39 05 60 7a 02 c0    	cmp    DWORD PTR ds:0xc0027a60,eax
c001325c:	75 23                	jne    c0013281 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001325e:	a1 6c 8b 02 c0       	mov    eax,ds:0xc0028b6c
c0013263:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013267:	89 06                	mov    DWORD PTR [esi],eax
c0013269:	a1 68 8b 02 c0       	mov    eax,ds:0xc0028b68
c001326e:	89 07                	mov    DWORD PTR [edi],eax
c0013270:	a1 64 8b 02 c0       	mov    eax,ds:0xc0028b64
c0013275:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013278:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001327d:	89 02                	mov    DWORD PTR [edx],eax
c001327f:	eb 3f                	jmp    c00132c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013281:	31 c9                	xor    ecx,ecx
c0013283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013287:	0f a2                	cpuid  
c0013289:	89 06                	mov    DWORD PTR [esi],eax
c001328b:	89 1f                	mov    DWORD PTR [edi],ebx
c001328d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013291:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013294:	89 10                	mov    DWORD PTR [eax],edx
c0013296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001329a:	a3 60 7a 02 c0       	mov    ds:0xc0027a60,eax
c001329f:	8b 06                	mov    eax,DWORD PTR [esi]
c00132a1:	a3 6c 8b 02 c0       	mov    ds:0xc0028b6c,eax
c00132a6:	8b 07                	mov    eax,DWORD PTR [edi]
c00132a8:	a3 68 8b 02 c0       	mov    ds:0xc0028b68,eax
c00132ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00132b0:	a3 64 8b 02 c0       	mov    ds:0xc0028b64,eax
c00132b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00132b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00132bb:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c00132c0:	5b                   	pop    ebx
c00132c1:	5e                   	pop    esi
c00132c2:	5f                   	pop    edi
c00132c3:	5d                   	pop    ebp
c00132c4:	c3                   	ret    
c00132c5:	90                   	nop

c00132c6 <CPU::cpuidCheckEDX(unsigned int)>:
c00132c6:	83 ec 10             	sub    esp,0x10
c00132c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132cd:	50                   	push   eax
c00132ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132d2:	50                   	push   eax
c00132d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132d7:	50                   	push   eax
c00132d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132dc:	50                   	push   eax
c00132dd:	6a 01                	push   0x1
c00132df:	e8 5e ff ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00132e8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00132ec:	0f 95 c0             	setne  al
c00132ef:	83 c4 24             	add    esp,0x24
c00132f2:	c3                   	ret    
c00132f3:	90                   	nop

c00132f4 <CPU::cpuidCheckECX(unsigned int)>:
c00132f4:	83 ec 10             	sub    esp,0x10
c00132f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132fb:	50                   	push   eax
c00132fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013300:	50                   	push   eax
c0013301:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013305:	50                   	push   eax
c0013306:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001330a:	50                   	push   eax
c001330b:	6a 01                	push   0x1
c001330d:	e8 30 ff ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013312:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013316:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001331a:	0f 95 c0             	setne  al
c001331d:	83 c4 24             	add    esp,0x24
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013322:	83 ec 10             	sub    esp,0x10
c0013325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013329:	50                   	push   eax
c001332a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001332e:	50                   	push   eax
c001332f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013333:	50                   	push   eax
c0013334:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013338:	50                   	push   eax
c0013339:	6a 07                	push   0x7
c001333b:	e8 02 ff ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013340:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013344:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013348:	0f 95 c0             	setne  al
c001334b:	83 c4 24             	add    esp,0x24
c001334e:	c3                   	ret    
c001334f:	90                   	nop

c0013350 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013350:	83 ec 10             	sub    esp,0x10
c0013353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013357:	50                   	push   eax
c0013358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001335c:	50                   	push   eax
c001335d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013361:	50                   	push   eax
c0013362:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013366:	50                   	push   eax
c0013367:	6a 07                	push   0x7
c0013369:	e8 d4 fe ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001336e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013372:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013376:	0f 95 c0             	setne  al
c0013379:	83 c4 24             	add    esp,0x24
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <CPU::CPU()>:
c001337e:	83 ec 0c             	sub    esp,0xc
c0013381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013385:	83 ec 08             	sub    esp,0x8
c0013388:	68 9d 58 02 c0       	push   0xc002589d
c001338d:	50                   	push   eax
c001338e:	e8 ab b0 ff ff       	call   c000e43e <Device::Device(char const*)>
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c001339b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339f:	89 10                	mov    DWORD PTR [eax],edx
c00133a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00133af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b3:	05 78 01 00 00       	add    eax,0x178
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	50                   	push   eax
c00133bc:	e8 e3 5e ff ff       	call   c00092a4 <GDT::GDT()>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c8:	05 7c 09 00 00       	add    eax,0x97c
c00133cd:	83 ec 0c             	sub    esp,0xc
c00133d0:	50                   	push   eax
c00133d1:	e8 26 61 ff ff       	call   c00094fc <IDT::IDT()>
c00133d6:	83 c4 10             	add    esp,0x10
c00133d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dd:	05 7c 11 00 00       	add    eax,0x117c
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	50                   	push   eax
c00133e6:	e8 2d 7f ff ff       	call   c000b318 <TSS::TSS()>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00133f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013407:	90                   	nop
c0013408:	83 c4 0c             	add    esp,0xc
c001340b:	c3                   	ret    

c001340c <CPU::displayFeatures()>:
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <CPU::detectFeatures()>:
c001340e:	55                   	push   ebp
c001340f:	57                   	push   edi
c0013410:	56                   	push   esi
c0013411:	53                   	push   ebx
c0013412:	83 ec 50             	sub    esp,0x50
c0013415:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013419:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013423:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001342a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013430:	6a 0d                	push   0xd
c0013432:	6a 00                	push   0x0
c0013434:	55                   	push   ebp
c0013435:	e8 4a d2 fe ff       	call   c0000684 <memset>
c001343a:	83 c4 10             	add    esp,0x10
c001343d:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0013442:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013449:	0f 84 22 09 00 00    	je     c0013d71 <CPU::detectFeatures()+0x963>
c001344f:	83 ec 0c             	sub    esp,0xc
c0013452:	89 ef                	mov    edi,ebp
c0013454:	6a 10                	push   0x10
c0013456:	e8 6b fe ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c001345b:	83 e0 01             	and    eax,0x1
c001345e:	8d 14 00             	lea    edx,[eax+eax*1]
c0013461:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013467:	83 e0 fd             	and    eax,0xfffffffd
c001346a:	09 d0                	or     eax,edx
c001346c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013472:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013479:	e8 48 fe ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c001347e:	83 e0 01             	and    eax,0x1
c0013481:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013488:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001348e:	83 e0 fb             	and    eax,0xfffffffb
c0013491:	09 d0                	or     eax,edx
c0013493:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013499:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00134a0:	e8 21 fe ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c00134a5:	83 e0 01             	and    eax,0x1
c00134a8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00134af:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134b5:	83 e0 f7             	and    eax,0xfffffff7
c00134b8:	09 d0                	or     eax,edx
c00134ba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134c0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00134c7:	e8 fa fd ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c00134cc:	83 e0 01             	and    eax,0x1
c00134cf:	c1 e0 04             	shl    eax,0x4
c00134d2:	88 c2                	mov    dl,al
c00134d4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134da:	83 e0 ef             	and    eax,0xffffffef
c00134dd:	09 d0                	or     eax,edx
c00134df:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134e5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00134ec:	e8 d5 fd ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c00134f1:	83 e0 01             	and    eax,0x1
c00134f4:	c1 e0 05             	shl    eax,0x5
c00134f7:	88 c2                	mov    dl,al
c00134f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134ff:	83 e0 df             	and    eax,0xffffffdf
c0013502:	09 d0                	or     eax,edx
c0013504:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001350a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013511:	e8 b0 fd ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0013516:	83 e0 01             	and    eax,0x1
c0013519:	8d 14 00             	lea    edx,[eax+eax*1]
c001351c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013522:	83 e0 fd             	and    eax,0xfffffffd
c0013525:	09 d0                	or     eax,edx
c0013527:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001352d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013534:	e8 8d fd ff ff       	call   c00132c6 <CPU::cpuidCheckEDX(unsigned int)>
c0013539:	83 e0 01             	and    eax,0x1
c001353c:	c1 e0 06             	shl    eax,0x6
c001353f:	88 c2                	mov    dl,al
c0013541:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013547:	83 e0 bf             	and    eax,0xffffffbf
c001354a:	09 d0                	or     eax,edx
c001354c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013552:	58                   	pop    eax
c0013553:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013557:	50                   	push   eax
c0013558:	8d 44 24 28          	lea    eax,[esp+0x28]
c001355c:	50                   	push   eax
c001355d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013561:	56                   	push   esi
c0013562:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013566:	50                   	push   eax
c0013567:	6a 00                	push   0x0
c0013569:	e8 d4 fc ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001356e:	b8 04 00 00 00       	mov    eax,0x4
c0013573:	89 c1                	mov    ecx,eax
c0013575:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013577:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001357d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013581:	89 c1                	mov    ecx,eax
c0013583:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013585:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001358b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001358f:	89 c1                	mov    ecx,eax
c0013591:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013593:	83 c4 18             	add    esp,0x18
c0013596:	68 48 57 02 c0       	push   0xc0025748
c001359b:	55                   	push   ebp
c001359c:	e8 2b d2 fe ff       	call   c00007cc <strcmp>
c00135a1:	83 c4 10             	add    esp,0x10
c00135a4:	85 c0                	test   eax,eax
c00135a6:	75 0f                	jne    c00135b7 <CPU::detectFeatures()+0x1a9>
c00135a8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00135b2:	e9 22 02 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c00135b7:	50                   	push   eax
c00135b8:	50                   	push   eax
c00135b9:	68 55 57 02 c0       	push   0xc0025755
c00135be:	55                   	push   ebp
c00135bf:	e8 08 d2 fe ff       	call   c00007cc <strcmp>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	85 c0                	test   eax,eax
c00135c9:	74 dd                	je     c00135a8 <CPU::detectFeatures()+0x19a>
c00135cb:	50                   	push   eax
c00135cc:	50                   	push   eax
c00135cd:	68 62 57 02 c0       	push   0xc0025762
c00135d2:	55                   	push   ebp
c00135d3:	e8 f4 d1 fe ff       	call   c00007cc <strcmp>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	85 c0                	test   eax,eax
c00135dd:	74 2a                	je     c0013609 <CPU::detectFeatures()+0x1fb>
c00135df:	50                   	push   eax
c00135e0:	50                   	push   eax
c00135e1:	68 6f 57 02 c0       	push   0xc002576f
c00135e6:	55                   	push   ebp
c00135e7:	e8 e0 d1 fe ff       	call   c00007cc <strcmp>
c00135ec:	83 c4 10             	add    esp,0x10
c00135ef:	85 c0                	test   eax,eax
c00135f1:	74 16                	je     c0013609 <CPU::detectFeatures()+0x1fb>
c00135f3:	50                   	push   eax
c00135f4:	50                   	push   eax
c00135f5:	68 7c 57 02 c0       	push   0xc002577c
c00135fa:	55                   	push   ebp
c00135fb:	e8 cc d1 fe ff       	call   c00007cc <strcmp>
c0013600:	83 c4 10             	add    esp,0x10
c0013603:	85 c0                	test   eax,eax
c0013605:	74 48                	je     c001364f <CPU::detectFeatures()+0x241>
c0013607:	eb 0f                	jmp    c0013618 <CPU::detectFeatures()+0x20a>
c0013609:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013613:	e9 c1 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013618:	50                   	push   eax
c0013619:	50                   	push   eax
c001361a:	68 89 57 02 c0       	push   0xc0025789
c001361f:	55                   	push   ebp
c0013620:	e8 a7 d1 fe ff       	call   c00007cc <strcmp>
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	85 c0                	test   eax,eax
c001362a:	74 23                	je     c001364f <CPU::detectFeatures()+0x241>
c001362c:	57                   	push   edi
c001362d:	57                   	push   edi
c001362e:	68 96 57 02 c0       	push   0xc0025796
c0013633:	55                   	push   ebp
c0013634:	e8 93 d1 fe ff       	call   c00007cc <strcmp>
c0013639:	83 c4 10             	add    esp,0x10
c001363c:	85 c0                	test   eax,eax
c001363e:	75 1e                	jne    c001365e <CPU::detectFeatures()+0x250>
c0013640:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001364a:	e9 8a 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c001364f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013659:	e9 7b 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c001365e:	56                   	push   esi
c001365f:	56                   	push   esi
c0013660:	68 a3 57 02 c0       	push   0xc00257a3
c0013665:	55                   	push   ebp
c0013666:	e8 61 d1 fe ff       	call   c00007cc <strcmp>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	85 c0                	test   eax,eax
c0013670:	75 0f                	jne    c0013681 <CPU::detectFeatures()+0x273>
c0013672:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001367c:	e9 58 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013681:	51                   	push   ecx
c0013682:	51                   	push   ecx
c0013683:	68 62 57 02 c0       	push   0xc0025762
c0013688:	55                   	push   ebp
c0013689:	e8 3e d1 fe ff       	call   c00007cc <strcmp>
c001368e:	83 c4 10             	add    esp,0x10
c0013691:	85 c0                	test   eax,eax
c0013693:	75 0f                	jne    c00136a4 <CPU::detectFeatures()+0x296>
c0013695:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001369f:	e9 35 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c00136a4:	52                   	push   edx
c00136a5:	52                   	push   edx
c00136a6:	68 b0 57 02 c0       	push   0xc00257b0
c00136ab:	55                   	push   ebp
c00136ac:	e8 1b d1 fe ff       	call   c00007cc <strcmp>
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	85 c0                	test   eax,eax
c00136b6:	75 0f                	jne    c00136c7 <CPU::detectFeatures()+0x2b9>
c00136b8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00136c2:	e9 12 01 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c00136c7:	50                   	push   eax
c00136c8:	50                   	push   eax
c00136c9:	68 bd 57 02 c0       	push   0xc00257bd
c00136ce:	55                   	push   ebp
c00136cf:	e8 f8 d0 fe ff       	call   c00007cc <strcmp>
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	85 c0                	test   eax,eax
c00136d9:	75 0f                	jne    c00136ea <CPU::detectFeatures()+0x2dc>
c00136db:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00136e5:	e9 ef 00 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c00136ea:	50                   	push   eax
c00136eb:	50                   	push   eax
c00136ec:	68 ca 57 02 c0       	push   0xc00257ca
c00136f1:	55                   	push   ebp
c00136f2:	e8 d5 d0 fe ff       	call   c00007cc <strcmp>
c00136f7:	83 c4 10             	add    esp,0x10
c00136fa:	85 c0                	test   eax,eax
c00136fc:	75 0f                	jne    c001370d <CPU::detectFeatures()+0x2ff>
c00136fe:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013708:	e9 cc 00 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c001370d:	50                   	push   eax
c001370e:	50                   	push   eax
c001370f:	68 d7 57 02 c0       	push   0xc00257d7
c0013714:	55                   	push   ebp
c0013715:	e8 b2 d0 fe ff       	call   c00007cc <strcmp>
c001371a:	83 c4 10             	add    esp,0x10
c001371d:	85 c0                	test   eax,eax
c001371f:	75 0f                	jne    c0013730 <CPU::detectFeatures()+0x322>
c0013721:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001372b:	e9 a9 00 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013730:	50                   	push   eax
c0013731:	50                   	push   eax
c0013732:	68 e4 57 02 c0       	push   0xc00257e4
c0013737:	55                   	push   ebp
c0013738:	e8 8f d0 fe ff       	call   c00007cc <strcmp>
c001373d:	83 c4 10             	add    esp,0x10
c0013740:	85 c0                	test   eax,eax
c0013742:	75 0f                	jne    c0013753 <CPU::detectFeatures()+0x345>
c0013744:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001374e:	e9 86 00 00 00       	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013753:	50                   	push   eax
c0013754:	50                   	push   eax
c0013755:	68 f1 57 02 c0       	push   0xc00257f1
c001375a:	55                   	push   ebp
c001375b:	e8 6c d0 fe ff       	call   c00007cc <strcmp>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	85 c0                	test   eax,eax
c0013765:	75 0c                	jne    c0013773 <CPU::detectFeatures()+0x365>
c0013767:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013771:	eb 66                	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013773:	50                   	push   eax
c0013774:	50                   	push   eax
c0013775:	68 fe 57 02 c0       	push   0xc00257fe
c001377a:	55                   	push   ebp
c001377b:	e8 4c d0 fe ff       	call   c00007cc <strcmp>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	85 c0                	test   eax,eax
c0013785:	75 0c                	jne    c0013793 <CPU::detectFeatures()+0x385>
c0013787:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013791:	eb 46                	jmp    c00137d9 <CPU::detectFeatures()+0x3cb>
c0013793:	57                   	push   edi
c0013794:	57                   	push   edi
c0013795:	68 0b 58 02 c0       	push   0xc002580b
c001379a:	55                   	push   ebp
c001379b:	e8 2c d0 fe ff       	call   c00007cc <strcmp>
c00137a0:	83 c4 10             	add    esp,0x10
c00137a3:	85 c0                	test   eax,eax
c00137a5:	74 e0                	je     c0013787 <CPU::detectFeatures()+0x379>
c00137a7:	56                   	push   esi
c00137a8:	56                   	push   esi
c00137a9:	68 18 58 02 c0       	push   0xc0025818
c00137ae:	55                   	push   ebp
c00137af:	e8 18 d0 fe ff       	call   c00007cc <strcmp>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	85 c0                	test   eax,eax
c00137b9:	74 cc                	je     c0013787 <CPU::detectFeatures()+0x379>
c00137bb:	51                   	push   ecx
c00137bc:	51                   	push   ecx
c00137bd:	68 25 58 02 c0       	push   0xc0025825
c00137c2:	55                   	push   ebp
c00137c3:	e8 04 d0 fe ff       	call   c00007cc <strcmp>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	85 c0                	test   eax,eax
c00137cd:	74 b8                	je     c0013787 <CPU::detectFeatures()+0x379>
c00137cf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00137d9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00137de:	0f 86 be 00 00 00    	jbe    c00138a2 <CPU::detectFeatures()+0x494>
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	68 80 00 00 00       	push   0x80
c00137ec:	e8 31 fb ff ff       	call   c0013322 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00137f1:	83 e0 01             	and    eax,0x1
c00137f4:	c1 e0 06             	shl    eax,0x6
c00137f7:	88 c2                	mov    dl,al
c00137f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137ff:	83 e0 bf             	and    eax,0xffffffbf
c0013802:	09 d0                	or     eax,edx
c0013804:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001380a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013811:	e8 0c fb ff ff       	call   c0013322 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013816:	83 e0 01             	and    eax,0x1
c0013819:	c1 e0 04             	shl    eax,0x4
c001381c:	88 c2                	mov    dl,al
c001381e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013824:	83 e0 ef             	and    eax,0xffffffef
c0013827:	09 d0                	or     eax,edx
c0013829:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001382f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013836:	e8 e7 fa ff ff       	call   c0013322 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001383b:	c1 e0 07             	shl    eax,0x7
c001383e:	88 c2                	mov    dl,al
c0013840:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013846:	83 e0 7f             	and    eax,0x7f
c0013849:	09 d0                	or     eax,edx
c001384b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013851:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013858:	e8 f3 fa ff ff       	call   c0013350 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001385d:	83 e0 01             	and    eax,0x1
c0013860:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013867:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001386d:	83 e0 f7             	and    eax,0xfffffff7
c0013870:	09 d0                	or     eax,edx
c0013872:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013878:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001387f:	e8 cc fa ff ff       	call   c0013350 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	83 e0 01             	and    eax,0x1
c001388a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013891:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013897:	83 e0 fb             	and    eax,0xfffffffb
c001389a:	09 d0                	or     eax,edx
c001389c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138a9:	50                   	push   eax
c00138aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138ae:	50                   	push   eax
c00138af:	8d 74 24 28          	lea    esi,[esp+0x28]
c00138b3:	56                   	push   esi
c00138b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138b8:	50                   	push   eax
c00138b9:	6a 01                	push   0x1
c00138bb:	e8 82 f9 ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138c4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00138ca:	88 ca                	mov    dl,cl
c00138cc:	83 e0 f0             	and    eax,0xfffffff0
c00138cf:	83 e2 0f             	and    edx,0xf
c00138d2:	09 d0                	or     eax,edx
c00138d4:	88 ca                	mov    dl,cl
c00138d6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00138dc:	c0 ea 04             	shr    dl,0x4
c00138df:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00138e3:	0f b6 c2             	movzx  eax,dl
c00138e6:	83 c4 20             	add    esp,0x20
c00138e9:	c1 e0 06             	shl    eax,0x6
c00138ec:	89 c7                	mov    edi,eax
c00138ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138f4:	66 25 3f c0          	and    ax,0xc03f
c00138f8:	09 f8                	or     eax,edi
c00138fa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013901:	89 c8                	mov    eax,ecx
c0013903:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001390a:	c1 e8 08             	shr    eax,0x8
c001390d:	83 e5 3f             	and    ebp,0x3f
c0013910:	83 e0 0f             	and    eax,0xf
c0013913:	89 c7                	mov    edi,eax
c0013915:	c1 e7 06             	shl    edi,0x6
c0013918:	09 ef                	or     edi,ebp
c001391a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013921:	89 fa                	mov    edx,edi
c0013923:	83 e5 c0             	and    ebp,0xffffffc0
c0013926:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001392c:	88 c2                	mov    dl,al
c001392e:	c0 ea 02             	shr    dl,0x2
c0013931:	89 d7                	mov    edi,edx
c0013933:	09 ef                	or     edi,ebp
c0013935:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001393b:	89 fa                	mov    edx,edi
c001393d:	83 e5 cf             	and    ebp,0xffffffcf
c0013940:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013946:	89 cf                	mov    edi,ecx
c0013948:	c1 ef 0c             	shr    edi,0xc
c001394b:	83 e7 03             	and    edi,0x3
c001394e:	c1 e7 04             	shl    edi,0x4
c0013951:	09 ef                	or     edi,ebp
c0013953:	3c 06                	cmp    al,0x6
c0013955:	89 fa                	mov    edx,edi
c0013957:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001395d:	74 04                	je     c0013963 <CPU::detectFeatures()+0x555>
c001395f:	3c 0f                	cmp    al,0xf
c0013961:	75 5c                	jne    c00139bf <CPU::detectFeatures()+0x5b1>
c0013963:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013967:	89 cf                	mov    edi,ecx
c0013969:	c1 ef 10             	shr    edi,0x10
c001396c:	c1 e7 04             	shl    edi,0x4
c001396f:	09 fa                	or     edx,edi
c0013971:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013977:	0f b6 d2             	movzx  edx,dl
c001397a:	66 81 e7 3f c0       	and    di,0xc03f
c001397f:	c1 e2 06             	shl    edx,0x6
c0013982:	09 fa                	or     edx,edi
c0013984:	3c 0f                	cmp    al,0xf
c0013986:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001398d:	75 30                	jne    c00139bf <CPU::detectFeatures()+0x5b1>
c001398f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013995:	c1 e9 14             	shr    ecx,0x14
c0013998:	83 e0 3f             	and    eax,0x3f
c001399b:	83 c1 0f             	add    ecx,0xf
c001399e:	88 ca                	mov    dl,cl
c00139a0:	c0 e9 02             	shr    cl,0x2
c00139a3:	c1 e2 06             	shl    edx,0x6
c00139a6:	09 d0                	or     eax,edx
c00139a8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00139ae:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00139b4:	83 e0 c0             	and    eax,0xffffffc0
c00139b7:	09 c1                	or     ecx,eax
c00139b9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00139bf:	83 ec 0c             	sub    esp,0xc
c00139c2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00139c9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139cd:	50                   	push   eax
c00139ce:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00139d2:	55                   	push   ebp
c00139d3:	56                   	push   esi
c00139d4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00139d8:	57                   	push   edi
c00139d9:	68 00 00 00 80       	push   0x80000000
c00139de:	e8 5f f8 ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139e3:	83 c4 20             	add    esp,0x20
c00139e6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00139ee:	76 22                	jbe    c0013a12 <CPU::detectFeatures()+0x604>
c00139f0:	83 ec 0c             	sub    esp,0xc
c00139f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139f7:	50                   	push   eax
c00139f8:	55                   	push   ebp
c00139f9:	56                   	push   esi
c00139fa:	57                   	push   edi
c00139fb:	68 01 00 00 80       	push   0x80000001
c0013a00:	e8 3d f8 ff ff       	call   c0013242 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013a05:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013a0f:	83 c4 20             	add    esp,0x20
c0013a12:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013a18:	83 f8 01             	cmp    eax,0x1
c0013a1b:	75 6f                	jne    c0013a8c <CPU::detectFeatures()+0x67e>
c0013a1d:	51                   	push   ecx
c0013a1e:	51                   	push   ecx
c0013a1f:	68 31 58 02 c0       	push   0xc0025831
c0013a24:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a28:	56                   	push   esi
c0013a29:	e8 12 cd fe ff       	call   c0000740 <strcpy>
c0013a2e:	5f                   	pop    edi
c0013a2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a35:	5d                   	pop    ebp
c0013a36:	66 c1 e8 06          	shr    ax,0x6
c0013a3a:	0f b6 c0             	movzx  eax,al
c0013a3d:	50                   	push   eax
c0013a3e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a44:	c1 e8 0e             	shr    eax,0xe
c0013a47:	0f b6 c0             	movzx  eax,al
c0013a4a:	50                   	push   eax
c0013a4b:	e8 9c f4 ff ff       	call   c0012eec <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013a50:	5a                   	pop    edx
c0013a51:	59                   	pop    ecx
c0013a52:	50                   	push   eax
c0013a53:	56                   	push   esi
c0013a54:	e8 27 ce fe ff       	call   c0000880 <strcat>
c0013a59:	5f                   	pop    edi
c0013a5a:	5d                   	pop    ebp
c0013a5b:	56                   	push   esi
c0013a5c:	53                   	push   ebx
c0013a5d:	e8 ce a9 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013a62:	58                   	pop    eax
c0013a63:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013a69:	5a                   	pop    edx
c0013a6a:	68 38 58 02 c0       	push   0xc0025838
c0013a6f:	50                   	push   eax
c0013a70:	e8 57 cd fe ff       	call   c00007cc <strcmp>
c0013a75:	83 c4 10             	add    esp,0x10
c0013a78:	85 c0                	test   eax,eax
c0013a7a:	0f 85 71 03 00 00    	jne    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013a80:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013a87:	e9 65 03 00 00       	jmp    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013a8c:	83 f8 02             	cmp    eax,0x2
c0013a8f:	0f 85 b5 00 00 00    	jne    c0013b4a <CPU::detectFeatures()+0x73c>
c0013a95:	57                   	push   edi
c0013a96:	57                   	push   edi
c0013a97:	68 4a 58 02 c0       	push   0xc002584a
c0013a9c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013aa0:	56                   	push   esi
c0013aa1:	e8 9a cc fe ff       	call   c0000740 <strcpy>
c0013aa6:	5d                   	pop    ebp
c0013aa7:	58                   	pop    eax
c0013aa8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013aae:	66 c1 e8 06          	shr    ax,0x6
c0013ab2:	0f b6 c0             	movzx  eax,al
c0013ab5:	50                   	push   eax
c0013ab6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013abc:	c1 e8 0e             	shr    eax,0xe
c0013abf:	0f b6 c0             	movzx  eax,al
c0013ac2:	50                   	push   eax
c0013ac3:	e8 90 f2 ff ff       	call   c0012d58 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013ac8:	5a                   	pop    edx
c0013ac9:	59                   	pop    ecx
c0013aca:	50                   	push   eax
c0013acb:	56                   	push   esi
c0013acc:	e8 af cd fe ff       	call   c0000880 <strcat>
c0013ad1:	5f                   	pop    edi
c0013ad2:	5d                   	pop    ebp
c0013ad3:	56                   	push   esi
c0013ad4:	53                   	push   ebx
c0013ad5:	e8 56 a9 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013ada:	58                   	pop    eax
c0013adb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013ae1:	5a                   	pop    edx
c0013ae2:	68 4f 58 02 c0       	push   0xc002584f
c0013ae7:	50                   	push   eax
c0013ae8:	e8 df cc fe ff       	call   c00007cc <strcmp>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	85 c0                	test   eax,eax
c0013af2:	75 20                	jne    c0013b14 <CPU::detectFeatures()+0x706>
c0013af4:	8b 15 a8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280a8
c0013afa:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013b00:	a8 01                	test   al,0x1
c0013b02:	74 10                	je     c0013b14 <CPU::detectFeatures()+0x706>
c0013b04:	83 e0 fe             	and    eax,0xfffffffe
c0013b07:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013b0d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013b14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b1a:	c1 e8 0e             	shr    eax,0xe
c0013b1d:	3c 05                	cmp    al,0x5
c0013b1f:	0f 85 cc 02 00 00    	jne    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013b25:	56                   	push   esi
c0013b26:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013b2c:	83 e0 0f             	and    eax,0xf
c0013b2f:	50                   	push   eax
c0013b30:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b36:	66 c1 e8 06          	shr    ax,0x6
c0013b3a:	0f b6 c0             	movzx  eax,al
c0013b3d:	50                   	push   eax
c0013b3e:	6a 05                	push   0x5
c0013b40:	e8 89 f6 ff ff       	call   c00131ce <CPU::AMD_K6_writeback(int, int, int)>
c0013b45:	e9 1f 02 00 00       	jmp    c0013d69 <CPU::detectFeatures()+0x95b>
c0013b4a:	8d 50 fd             	lea    edx,[eax-0x3]
c0013b4d:	83 fa 01             	cmp    edx,0x1
c0013b50:	76 09                	jbe    c0013b5b <CPU::detectFeatures()+0x74d>
c0013b52:	83 f8 06             	cmp    eax,0x6
c0013b55:	0f 85 91 01 00 00    	jne    c0013cec <CPU::detectFeatures()+0x8de>
c0013b5b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b61:	c1 ea 0e             	shr    edx,0xe
c0013b64:	80 fa 05             	cmp    dl,0x5
c0013b67:	75 7b                	jne    c0013be4 <CPU::detectFeatures()+0x7d6>
c0013b69:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b6f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013b74:	66 81 fa 00 01       	cmp    dx,0x100
c0013b79:	75 0c                	jne    c0013b87 <CPU::detectFeatures()+0x779>
c0013b7b:	51                   	push   ecx
c0013b7c:	51                   	push   ecx
c0013b7d:	68 56 58 02 c0       	push   0xc0025856
c0013b82:	e9 dc 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013b87:	66 81 fa 00 02       	cmp    dx,0x200
c0013b8c:	75 0c                	jne    c0013b9a <CPU::detectFeatures()+0x78c>
c0013b8e:	52                   	push   edx
c0013b8f:	52                   	push   edx
c0013b90:	68 69 58 02 c0       	push   0xc0025869
c0013b95:	e9 c9 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013b9a:	66 81 fa 40 02       	cmp    dx,0x240
c0013b9f:	75 0c                	jne    c0013bad <CPU::detectFeatures()+0x79f>
c0013ba1:	50                   	push   eax
c0013ba2:	50                   	push   eax
c0013ba3:	68 7b 58 02 c0       	push   0xc002587b
c0013ba8:	e9 b6 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013bad:	83 f8 06             	cmp    eax,0x6
c0013bb0:	75 0c                	jne    c0013bbe <CPU::detectFeatures()+0x7b0>
c0013bb2:	50                   	push   eax
c0013bb3:	50                   	push   eax
c0013bb4:	68 8d 58 02 c0       	push   0xc002588d
c0013bb9:	e9 a5 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013bbe:	83 f8 04             	cmp    eax,0x4
c0013bc1:	75 0c                	jne    c0013bcf <CPU::detectFeatures()+0x7c1>
c0013bc3:	50                   	push   eax
c0013bc4:	50                   	push   eax
c0013bc5:	68 99 58 02 c0       	push   0xc0025899
c0013bca:	e9 94 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013bcf:	83 f8 03             	cmp    eax,0x3
c0013bd2:	0f 85 19 02 00 00    	jne    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013bd8:	50                   	push   eax
c0013bd9:	50                   	push   eax
c0013bda:	68 a1 58 02 c0       	push   0xc00258a1
c0013bdf:	e9 7f 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013be4:	80 fa 06             	cmp    dl,0x6
c0013be7:	0f 85 db 00 00 00    	jne    c0013cc8 <CPU::detectFeatures()+0x8ba>
c0013bed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013bf3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013bf8:	66 81 fa 80 01       	cmp    dx,0x180
c0013bfd:	75 0c                	jne    c0013c0b <CPU::detectFeatures()+0x7fd>
c0013bff:	50                   	push   eax
c0013c00:	50                   	push   eax
c0013c01:	68 ac 58 02 c0       	push   0xc00258ac
c0013c06:	e9 58 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013c0b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013c11:	66 f7 c1 80 ff       	test   cx,0xff80
c0013c16:	75 0c                	jne    c0013c24 <CPU::detectFeatures()+0x816>
c0013c18:	50                   	push   eax
c0013c19:	50                   	push   eax
c0013c1a:	68 bc 58 02 c0       	push   0xc00258bc
c0013c1f:	e9 3f 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013c24:	66 81 fa 40 02       	cmp    dx,0x240
c0013c29:	75 0c                	jne    c0013c37 <CPU::detectFeatures()+0x829>
c0013c2b:	55                   	push   ebp
c0013c2c:	55                   	push   ebp
c0013c2d:	68 c3 58 02 c0       	push   0xc00258c3
c0013c32:	e9 2c 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013c37:	66 81 fa 80 02       	cmp    dx,0x280
c0013c3c:	75 0c                	jne    c0013c4a <CPU::detectFeatures()+0x83c>
c0013c3e:	57                   	push   edi
c0013c3f:	57                   	push   edi
c0013c40:	68 cc 58 02 c0       	push   0xc00258cc
c0013c45:	e9 19 01 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013c4a:	66 81 fa 40 03       	cmp    dx,0x340
c0013c4f:	74 ed                	je     c0013c3e <CPU::detectFeatures()+0x830>
c0013c51:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013c56:	75 0c                	jne    c0013c64 <CPU::detectFeatures()+0x856>
c0013c58:	56                   	push   esi
c0013c59:	56                   	push   esi
c0013c5a:	68 d3 58 02 c0       	push   0xc00258d3
c0013c5f:	e9 ff 00 00 00       	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013c64:	83 f8 06             	cmp    eax,0x6
c0013c67:	0f 84 45 ff ff ff    	je     c0013bb2 <CPU::detectFeatures()+0x7a4>
c0013c6d:	83 f8 04             	cmp    eax,0x4
c0013c70:	0f 84 4d ff ff ff    	je     c0013bc3 <CPU::detectFeatures()+0x7b5>
c0013c76:	83 f8 03             	cmp    eax,0x3
c0013c79:	0f 85 72 01 00 00    	jne    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013c7f:	51                   	push   ecx
c0013c80:	51                   	push   ecx
c0013c81:	68 dc 58 02 c0       	push   0xc00258dc
c0013c86:	53                   	push   ebx
c0013c87:	e8 a4 a7 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013c8c:	b1 c1                	mov    cl,0xc1
c0013c8e:	88 c8                	mov    al,cl
c0013c90:	e6 22                	out    0x22,al
c0013c92:	e4 23                	in     al,0x23
c0013c94:	88 c2                	mov    dl,al
c0013c96:	88 c8                	mov    al,cl
c0013c98:	e6 22                	out    0x22,al
c0013c9a:	88 d0                	mov    al,dl
c0013c9c:	83 c8 10             	or     eax,0x10
c0013c9f:	e6 23                	out    0x23,al
c0013ca1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013ca8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013cab:	89 d0                	mov    eax,edx
c0013cad:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013cb3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013cb7:	40                   	inc    eax
c0013cb8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013cbe:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013cc3:	e9 a1 00 00 00       	jmp    c0013d69 <CPU::detectFeatures()+0x95b>
c0013cc8:	83 f8 06             	cmp    eax,0x6
c0013ccb:	0f 84 e1 fe ff ff    	je     c0013bb2 <CPU::detectFeatures()+0x7a4>
c0013cd1:	83 f8 04             	cmp    eax,0x4
c0013cd4:	0f 84 e9 fe ff ff    	je     c0013bc3 <CPU::detectFeatures()+0x7b5>
c0013cda:	83 f8 03             	cmp    eax,0x3
c0013cdd:	0f 85 0e 01 00 00    	jne    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013ce3:	52                   	push   edx
c0013ce4:	52                   	push   edx
c0013ce5:	68 e7 58 02 c0       	push   0xc00258e7
c0013cea:	eb 77                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013cec:	83 f8 07             	cmp    eax,0x7
c0013cef:	75 09                	jne    c0013cfa <CPU::detectFeatures()+0x8ec>
c0013cf1:	50                   	push   eax
c0013cf2:	50                   	push   eax
c0013cf3:	68 f1 58 02 c0       	push   0xc00258f1
c0013cf8:	eb 69                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013cfa:	83 f8 0a             	cmp    eax,0xa
c0013cfd:	75 09                	jne    c0013d08 <CPU::detectFeatures()+0x8fa>
c0013cff:	50                   	push   eax
c0013d00:	50                   	push   eax
c0013d01:	68 fc 58 02 c0       	push   0xc00258fc
c0013d06:	eb 5b                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d08:	83 f8 0b             	cmp    eax,0xb
c0013d0b:	75 09                	jne    c0013d16 <CPU::detectFeatures()+0x908>
c0013d0d:	50                   	push   eax
c0013d0e:	50                   	push   eax
c0013d0f:	68 04 59 02 c0       	push   0xc0025904
c0013d14:	eb 4d                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d16:	83 f8 08             	cmp    eax,0x8
c0013d19:	75 09                	jne    c0013d24 <CPU::detectFeatures()+0x916>
c0013d1b:	50                   	push   eax
c0013d1c:	50                   	push   eax
c0013d1d:	68 0d 59 02 c0       	push   0xc002590d
c0013d22:	eb 3f                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d24:	83 f8 09             	cmp    eax,0x9
c0013d27:	75 09                	jne    c0013d32 <CPU::detectFeatures()+0x924>
c0013d29:	50                   	push   eax
c0013d2a:	50                   	push   eax
c0013d2b:	68 15 59 02 c0       	push   0xc0025915
c0013d30:	eb 31                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d32:	83 f8 05             	cmp    eax,0x5
c0013d35:	75 09                	jne    c0013d40 <CPU::detectFeatures()+0x932>
c0013d37:	50                   	push   eax
c0013d38:	50                   	push   eax
c0013d39:	68 1d 59 02 c0       	push   0xc002591d
c0013d3e:	eb 23                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d40:	83 f8 0c             	cmp    eax,0xc
c0013d43:	75 09                	jne    c0013d4e <CPU::detectFeatures()+0x940>
c0013d45:	55                   	push   ebp
c0013d46:	55                   	push   ebp
c0013d47:	68 2b 59 02 c0       	push   0xc002592b
c0013d4c:	eb 15                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d4e:	83 f8 0d             	cmp    eax,0xd
c0013d51:	75 09                	jne    c0013d5c <CPU::detectFeatures()+0x94e>
c0013d53:	57                   	push   edi
c0013d54:	57                   	push   edi
c0013d55:	68 36 59 02 c0       	push   0xc0025936
c0013d5a:	eb 07                	jmp    c0013d63 <CPU::detectFeatures()+0x955>
c0013d5c:	56                   	push   esi
c0013d5d:	56                   	push   esi
c0013d5e:	68 4a 59 02 c0       	push   0xc002594a
c0013d63:	53                   	push   ebx
c0013d64:	e8 c7 a6 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013d69:	83 c4 10             	add    esp,0x10
c0013d6c:	e9 80 00 00 00       	jmp    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013d71:	51                   	push   ecx
c0013d72:	51                   	push   ecx
c0013d73:	68 96 57 02 c0       	push   0xc0025796
c0013d78:	55                   	push   ebp
c0013d79:	e8 c2 c9 fe ff       	call   c0000740 <strcpy>
c0013d7e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d88:	e8 56 c4 fe ff       	call   c00001e3 <is486>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	85 c0                	test   eax,eax
c0013d92:	74 2b                	je     c0013dbf <CPU::detectFeatures()+0x9b1>
c0013d94:	52                   	push   edx
c0013d95:	52                   	push   edx
c0013d96:	68 56 59 02 c0       	push   0xc0025956
c0013d9b:	53                   	push   ebx
c0013d9c:	e8 8f a6 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013da1:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013da8:	0f 20 c0             	mov    eax,cr0
c0013dab:	83 e0 14             	and    eax,0x14
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	83 f8 04             	cmp    eax,0x4
c0013db4:	75 1f                	jne    c0013dd5 <CPU::detectFeatures()+0x9c7>
c0013db6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013dbd:	eb 32                	jmp    c0013df1 <CPU::detectFeatures()+0x9e3>
c0013dbf:	50                   	push   eax
c0013dc0:	50                   	push   eax
c0013dc1:	68 61 59 02 c0       	push   0xc0025961
c0013dc6:	53                   	push   ebx
c0013dc7:	e8 64 a6 ff ff       	call   c000e430 <Device::setName(char const*)>
c0013dcc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013dd3:	eb d3                	jmp    c0013da8 <CPU::detectFeatures()+0x99a>
c0013dd5:	e8 e4 c3 fe ff       	call   c00001be <hasLegacyFPU>
c0013dda:	83 e0 01             	and    eax,0x1
c0013ddd:	8d 14 00             	lea    edx,[eax+eax*1]
c0013de0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013de6:	83 e0 fd             	and    eax,0xfffffffd
c0013de9:	09 d0                	or     eax,edx
c0013deb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013df1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013df8:	83 c4 4c             	add    esp,0x4c
c0013dfb:	5b                   	pop    ebx
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	5d                   	pop    ebp
c0013dff:	c3                   	ret    

c0013e00 <CPU::setupSMEP()>:
c0013e00:	0f 20 e0             	mov    eax,cr4
c0013e03:	0d 00 00 10 00       	or     eax,0x100000
c0013e08:	0f 22 e0             	mov    cr4,eax
c0013e0b:	c3                   	ret    

c0013e0c <CPU::setupUMIP()>:
c0013e0c:	0f 20 e0             	mov    eax,cr4
c0013e0f:	80 cc 08             	or     ah,0x8
c0013e12:	0f 22 e0             	mov    cr4,eax
c0013e15:	c3                   	ret    

c0013e16 <CPU::setupTSC()>:
c0013e16:	0f 20 e0             	mov    eax,cr4
c0013e19:	83 c8 04             	or     eax,0x4
c0013e1c:	0f 22 e0             	mov    cr4,eax
c0013e1f:	c3                   	ret    

c0013e20 <CPU::setupLargePages()>:
c0013e20:	0f 20 e0             	mov    eax,cr4
c0013e23:	83 c8 10             	or     eax,0x10
c0013e26:	0f 22 e0             	mov    cr4,eax
c0013e29:	c3                   	ret    

c0013e2a <CPU::setupPAT()>:
c0013e2a:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0013e2f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013e36:	74 2c                	je     c0013e64 <CPU::setupPAT()+0x3a>
c0013e38:	53                   	push   ebx
c0013e39:	83 ec 10             	sub    esp,0x10
c0013e3c:	68 77 02 00 00       	push   0x277
c0013e41:	50                   	push   eax
c0013e42:	e8 e3 50 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013e47:	83 e2 f8             	and    edx,0xfffffff8
c0013e4a:	83 ca 01             	or     edx,0x1
c0013e4d:	52                   	push   edx
c0013e4e:	50                   	push   eax
c0013e4f:	68 77 02 00 00       	push   0x277
c0013e54:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0013e5a:	e8 f7 50 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013e5f:	83 c4 28             	add    esp,0x28
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    
c0013e64:	c3                   	ret    
c0013e65:	90                   	nop

c0013e66 <CPU::setupMTRR()>:
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <CPU::setupGlobalPages()>:
c0013e68:	0f 20 e0             	mov    eax,cr4
c0013e6b:	0c 80                	or     al,0x80
c0013e6d:	0f 22 e0             	mov    cr4,eax
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <CPU::allowUsermodeDataAccess()>:
c0013e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e76:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e7d:	74 03                	je     c0013e82 <CPU::allowUsermodeDataAccess()+0x10>
c0013e7f:	0f 01 cb             	stac   
c0013e82:	c3                   	ret    
c0013e83:	90                   	nop

c0013e84 <CPU::prohibitUsermodeDataAccess()>:
c0013e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e88:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e8f:	74 03                	je     c0013e94 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013e91:	0f 01 ca             	clac   
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <CPU::setupSMAP()>:
c0013e96:	0f 20 e0             	mov    eax,cr4
c0013e99:	0d 00 00 20 00       	or     eax,0x200000
c0013e9e:	0f 22 e0             	mov    cr4,eax
c0013ea1:	eb e1                	jmp    c0013e84 <CPU::prohibitUsermodeDataAccess()>
c0013ea3:	90                   	nop

c0013ea4 <CPU::setupFeatures()>:
c0013ea4:	53                   	push   ebx
c0013ea5:	83 ec 08             	sub    esp,0x8
c0013ea8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013eb3:	74 18                	je     c0013ecd <CPU::setupFeatures()+0x29>
c0013eb5:	83 ec 0c             	sub    esp,0xc
c0013eb8:	68 6c 59 02 c0       	push   0xc002596c
c0013ebd:	e8 39 8e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013ec2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec5:	e8 42 ff ff ff       	call   c0013e0c <CPU::setupUMIP()>
c0013eca:	83 c4 10             	add    esp,0x10
c0013ecd:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013ed4:	74 18                	je     c0013eee <CPU::setupFeatures()+0x4a>
c0013ed6:	83 ec 0c             	sub    esp,0xc
c0013ed9:	68 76 59 02 c0       	push   0xc0025976
c0013ede:	e8 18 8e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013ee3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee6:	e8 2b ff ff ff       	call   c0013e16 <CPU::setupTSC()>
c0013eeb:	83 c4 10             	add    esp,0x10
c0013eee:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013ef5:	74 18                	je     c0013f0f <CPU::setupFeatures()+0x6b>
c0013ef7:	83 ec 0c             	sub    esp,0xc
c0013efa:	68 7f 59 02 c0       	push   0xc002597f
c0013eff:	e8 f7 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f07:	e8 14 ff ff ff       	call   c0013e20 <CPU::setupLargePages()>
c0013f0c:	83 c4 10             	add    esp,0x10
c0013f0f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013f16:	74 18                	je     c0013f30 <CPU::setupFeatures()+0x8c>
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	68 88 59 02 c0       	push   0xc0025988
c0013f20:	e8 d6 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f28:	e8 3b ff ff ff       	call   c0013e68 <CPU::setupGlobalPages()>
c0013f2d:	83 c4 10             	add    esp,0x10
c0013f30:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013f37:	74 18                	je     c0013f51 <CPU::setupFeatures()+0xad>
c0013f39:	83 ec 0c             	sub    esp,0xc
c0013f3c:	68 9a 59 02 c0       	push   0xc002599a
c0013f41:	e8 b5 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f49:	e8 dc fe ff ff       	call   c0013e2a <CPU::setupPAT()>
c0013f4e:	83 c4 10             	add    esp,0x10
c0013f51:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013f58:	74 11                	je     c0013f6b <CPU::setupFeatures()+0xc7>
c0013f5a:	c7 44 24 10 a3 59 02 c0 	mov    DWORD PTR [esp+0x10],0xc00259a3
c0013f62:	83 c4 08             	add    esp,0x8
c0013f65:	5b                   	pop    ebx
c0013f66:	e9 90 8d ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f6b:	83 c4 08             	add    esp,0x8
c0013f6e:	5b                   	pop    ebx
c0013f6f:	c3                   	ret    

c0013f70 <CPU::open(int, int, void*)>:
c0013f70:	57                   	push   edi
c0013f71:	56                   	push   esi
c0013f72:	53                   	push   ebx
c0013f73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f7b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013f81:	83 ec 0c             	sub    esp,0xc
c0013f84:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013f8a:	68 ad 59 02 c0       	push   0xc00259ad
c0013f8f:	e8 d5 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f94:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013f9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f9d:	e8 64 53 ff ff       	call   c0009306 <GDT::setup()>
c0013fa2:	c7 04 24 bf 59 02 c0 	mov    DWORD PTR [esp],0xc00259bf
c0013fa9:	e8 bb 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fae:	83 c4 0c             	add    esp,0xc
c0013fb1:	6a 00                	push   0x0
c0013fb3:	68 ef be ad de       	push   0xdeadbeef
c0013fb8:	57                   	push   edi
c0013fb9:	e8 9e 73 ff ff       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c0013fbe:	c7 04 24 d1 59 02 c0 	mov    DWORD PTR [esp],0xc00259d1
c0013fc5:	e8 9f 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013fcd:	e8 6a 73 ff ff       	call   c000b33c <TSS::flush()>
c0013fd2:	c7 04 24 e5 59 02 c0 	mov    DWORD PTR [esp],0xc00259e5
c0013fd9:	e8 8b 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fde:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013fe4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fe7:	e8 86 55 ff ff       	call   c0009572 <IDT::setup()>
c0013fec:	c7 04 24 f7 59 02 c0 	mov    DWORD PTR [esp],0xc00259f7
c0013ff3:	e8 71 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ff8:	b8 00 04 00 00       	mov    eax,0x400
c0013ffd:	0f 23 f8             	mov    db7,eax
c0014000:	c7 04 24 15 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a15
c0014007:	e8 5d 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001400c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014016:	e8 ab 60 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c001401b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014021:	89 30                	mov    DWORD PTR [eax],esi
c0014023:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014029:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001402c:	c7 04 24 37 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a37
c0014033:	e8 31 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014038:	58                   	pop    eax
c0014039:	5a                   	pop    edx
c001403a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014040:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014044:	e8 0d 83 ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c0014049:	c7 04 24 5f 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a5f
c0014050:	e8 14 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014055:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014058:	e8 b1 f3 ff ff       	call   c001340e <CPU::detectFeatures()>
c001405d:	c7 04 24 82 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a82
c0014064:	e8 00 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014069:	e8 d0 b5 ff ff       	call   c000f63e <setupInterruptController()>
c001406e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014074:	c7 04 24 a6 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aa6
c001407b:	e8 e9 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014080:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c0014085:	83 e0 10             	and    eax,0x10
c0014088:	83 f8 01             	cmp    eax,0x1
c001408b:	19 c0                	sbb    eax,eax
c001408d:	83 e0 46             	and    eax,0x46
c0014090:	83 c0 1e             	add    eax,0x1e
c0014093:	89 04 24             	mov    DWORD PTR [esp],eax
c0014096:	e8 d1 cb ff ff       	call   c0010c6c <setupTimer(int)>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00140a4:	f6 05 c0 80 02 c0 20 	test   BYTE PTR ds:0xc00280c0,0x20
c00140ab:	74 18                	je     c00140c5 <CPU::open(int, int, void*)+0x155>
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	68 c1 5a 02 c0       	push   0xc0025ac1
c00140b5:	e8 af 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140bd:	e8 e2 fd ff ff       	call   c0013ea4 <CPU::setupFeatures()>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	68 dc 5a 02 c0       	push   0xc0025adc
c00140cd:	e8 97 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	31 c0                	xor    eax,eax
c00140d7:	5b                   	pop    ebx
c00140d8:	5e                   	pop    esi
c00140d9:	5f                   	pop    edi
c00140da:	c3                   	ret    
c00140db:	90                   	nop

c00140dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00140dc:	57                   	push   edi
c00140dd:	56                   	push   esi
c00140de:	53                   	push   ebx
c00140df:	51                   	push   ecx
c00140e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140e4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00140e7:	0f 02 c0             	lar    eax,ax
c00140ea:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00140ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00140f1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00140f4:	88 ca                	mov    dl,cl
c00140f6:	c0 ea 06             	shr    dl,0x6
c00140f9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00140fd:	89 ca                	mov    edx,ecx
c00140ff:	66 c1 ea 03          	shr    dx,0x3
c0014103:	83 e2 07             	and    edx,0x7
c0014106:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001410b:	88 17                	mov    BYTE PTR [edi],dl
c001410d:	0f 84 a6 01 00 00    	je     c00142b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014113:	83 e1 07             	and    ecx,0x7
c0014116:	80 f9 04             	cmp    cl,0x4
c0014119:	0f 84 98 00 00 00    	je     c00141b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001411f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014124:	0f 95 c0             	setne  al
c0014127:	80 f9 05             	cmp    cl,0x5
c001412a:	0f 95 c2             	setne  dl
c001412d:	08 c2                	or     dl,al
c001412f:	74 79                	je     c00141aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014131:	84 c9                	test   cl,cl
c0014133:	75 05                	jne    c001413a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014135:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014138:	eb 3c                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001413a:	80 f9 01             	cmp    cl,0x1
c001413d:	75 05                	jne    c0014144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001413f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014142:	eb 32                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014144:	80 f9 02             	cmp    cl,0x2
c0014147:	75 05                	jne    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014149:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001414c:	eb 28                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001414e:	31 c0                	xor    eax,eax
c0014150:	80 f9 03             	cmp    cl,0x3
c0014153:	75 05                	jne    c001415a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014155:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014158:	eb 1c                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001415a:	80 f9 05             	cmp    cl,0x5
c001415d:	75 05                	jne    c0014164 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001415f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014162:	eb 12                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014164:	80 f9 06             	cmp    cl,0x6
c0014167:	75 05                	jne    c001416e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014169:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001416c:	eb 08                	jmp    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001416e:	80 f9 07             	cmp    cl,0x7
c0014171:	75 03                	jne    c0014176 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014173:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014176:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001417b:	75 10                	jne    c001418d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001417d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014181:	b9 03 00 00 00       	mov    ecx,0x3
c0014186:	01 d0                	add    eax,edx
c0014188:	e9 37 01 00 00       	jmp    c00142c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001418d:	b9 02 00 00 00       	mov    ecx,0x2
c0014192:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014197:	0f 85 27 01 00 00    	jne    c00142c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001419d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00141a0:	b9 06 00 00 00       	mov    ecx,0x6
c00141a5:	e9 1a 01 00 00       	jmp    c00142c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141aa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00141ad:	b9 06 00 00 00       	mov    ecx,0x6
c00141b2:	e9 0f 01 00 00       	jmp    c00142c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141b7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00141ba:	88 ca                	mov    dl,cl
c00141bc:	c0 ea 06             	shr    dl,0x6
c00141bf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00141c3:	89 ca                	mov    edx,ecx
c00141c5:	66 c1 ea 03          	shr    dx,0x3
c00141c9:	83 e2 07             	and    edx,0x7
c00141cc:	80 e1 07             	and    cl,0x7
c00141cf:	75 05                	jne    c00141d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00141d1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00141d4:	eb 4c                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141d6:	80 f9 01             	cmp    cl,0x1
c00141d9:	75 05                	jne    c00141e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00141db:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00141de:	eb 42                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141e0:	80 f9 02             	cmp    cl,0x2
c00141e3:	75 05                	jne    c00141ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00141e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00141e8:	eb 38                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ea:	80 f9 03             	cmp    cl,0x3
c00141ed:	75 05                	jne    c00141f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00141ef:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00141f2:	eb 2e                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141f4:	80 f9 04             	cmp    cl,0x4
c00141f7:	75 12                	jne    c001420b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00141f9:	f6 c4 60             	test   ah,0x60
c00141fc:	75 08                	jne    c0014206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00141fe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014201:	8d 78 14             	lea    edi,[eax+0x14]
c0014204:	eb 1c                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014206:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014209:	eb 17                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001420b:	80 f9 05             	cmp    cl,0x5
c001420e:	75 05                	jne    c0014215 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014210:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014213:	eb 0d                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014215:	80 f9 06             	cmp    cl,0x6
c0014218:	75 05                	jne    c001421f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001421a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001421d:	eb 03                	jmp    c0014222 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001421f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014222:	84 d2                	test   dl,dl
c0014224:	75 05                	jne    c001422b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014226:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014229:	eb 3c                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001422b:	80 fa 01             	cmp    dl,0x1
c001422e:	75 05                	jne    c0014235 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014230:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014233:	eb 32                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014235:	80 fa 02             	cmp    dl,0x2
c0014238:	75 05                	jne    c001423f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001423a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001423d:	eb 28                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001423f:	80 fa 03             	cmp    dl,0x3
c0014242:	75 05                	jne    c0014249 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014244:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014247:	eb 1e                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014249:	31 c0                	xor    eax,eax
c001424b:	80 fa 04             	cmp    dl,0x4
c001424e:	74 17                	je     c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014250:	80 fa 05             	cmp    dl,0x5
c0014253:	75 05                	jne    c001425a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014255:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014258:	eb 0d                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001425a:	80 fa 06             	cmp    dl,0x6
c001425d:	75 05                	jne    c0014264 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001425f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014262:	eb 03                	jmp    c0014267 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014264:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014267:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001426c:	0f 94 c2             	sete   dl
c001426f:	80 f9 05             	cmp    cl,0x5
c0014272:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014276:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001427b:	d3 e0                	shl    eax,cl
c001427d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014281:	74 0a                	je     c001428d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014283:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014286:	b9 07 00 00 00       	mov    ecx,0x7
c001428b:	eb 37                	jmp    c00142c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001428d:	01 f8                	add    eax,edi
c001428f:	b9 03 00 00 00       	mov    ecx,0x3
c0014294:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014299:	74 2b                	je     c00142c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001429b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00142a0:	75 0d                	jne    c00142af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00142a2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00142a6:	01 c8                	add    eax,ecx
c00142a8:	b9 04 00 00 00       	mov    ecx,0x4
c00142ad:	eb 17                	jmp    c00142c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142af:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00142b2:	b9 07 00 00 00       	mov    ecx,0x7
c00142b7:	eb 0d                	jmp    c00142c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142b9:	b9 02 00 00 00       	mov    ecx,0x2
c00142be:	b2 01                	mov    dl,0x1
c00142c0:	31 c0                	xor    eax,eax
c00142c2:	eb 02                	jmp    c00142c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142c4:	31 d2                	xor    edx,edx
c00142c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ca:	89 0b                	mov    DWORD PTR [ebx],ecx
c00142cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142d0:	88 11                	mov    BYTE PTR [ecx],dl
c00142d2:	5a                   	pop    edx
c00142d3:	5b                   	pop    ebx
c00142d4:	5e                   	pop    esi
c00142d5:	5f                   	pop    edi
c00142d6:	c3                   	ret    

c00142d7 <Krnl::smpEntry()>:
c00142d7:	eb fe                	jmp    c00142d7 <Krnl::smpEntry()>

c00142d9 <Krnl::startCPU(int)>:
c00142d9:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00142de:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00142e5:	0f 84 36 01 00 00    	je     c0014421 <Krnl::startCPU(int)+0x148>
c00142eb:	53                   	push   ebx
c00142ec:	83 ec 10             	sub    esp,0x10
c00142ef:	fa                   	cli    
c00142f0:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00142f6:	6a 1b                	push   0x1b
c00142f8:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c00142fe:	e8 27 4c ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0014303:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014308:	89 c3                	mov    ebx,eax
c001430a:	58                   	pop    eax
c001430b:	5a                   	pop    edx
c001430c:	53                   	push   ebx
c001430d:	68 24 5b 02 c0       	push   0xc0025b24
c0014312:	e8 e4 89 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014317:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014325:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001432f:	c1 e0 18             	shl    eax,0x18
c0014332:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014338:	83 c4 10             	add    esp,0x10
c001433b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014341:	09 c2                	or     edx,eax
c0014343:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014349:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001434f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014355:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001435b:	80 cd c5             	or     ch,0xc5
c001435e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014364:	f3 90                	pause  
c0014366:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014368:	0f ba e1 0c          	bt     ecx,0xc
c001436c:	72 f6                	jb     c0014364 <Krnl::startCPU(int)+0x8b>
c001436e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014374:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001437a:	09 c1                	or     ecx,eax
c001437c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014382:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014388:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001438e:	80 cd 85             	or     ch,0x85
c0014391:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014397:	f3 90                	pause  
c0014399:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001439b:	0f ba e1 0c          	bt     ecx,0xc
c001439f:	72 f6                	jb     c0014397 <Krnl::startCPU(int)+0xbe>
c00143a1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143ab:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143b1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143b7:	09 c1                	or     ecx,eax
c00143b9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00143bf:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00143c5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00143cb:	81 c9 02 06 00 00    	or     ecx,0x602
c00143d1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143d7:	f3 90                	pause  
c00143d9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143db:	0f ba e1 0c          	bt     ecx,0xc
c00143df:	72 f6                	jb     c00143d7 <Krnl::startCPU(int)+0xfe>
c00143e1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143eb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143f1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143f7:	09 c8                	or     eax,ecx
c00143f9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00143ff:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014405:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001440a:	0d 02 06 00 00       	or     eax,0x602
c001440f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014415:	f3 90                	pause  
c0014417:	8b 02                	mov    eax,DWORD PTR [edx]
c0014419:	0f ba e0 0c          	bt     eax,0xc
c001441d:	72 f6                	jb     c0014415 <Krnl::startCPU(int)+0x13c>
c001441f:	eb fe                	jmp    c001441f <Krnl::startCPU(int)+0x146>
c0014421:	c3                   	ret    

c0014422 <Krnl::startCPUs()>:
c0014422:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0014427:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001442d:	88 c2                	mov    dl,al
c001442f:	83 e2 0a             	and    edx,0xa
c0014432:	80 fa 0a             	cmp    dl,0xa
c0014435:	75 09                	jne    c0014440 <Krnl::startCPUs()+0x1e>
c0014437:	a8 01                	test   al,0x1
c0014439:	74 05                	je     c0014440 <Krnl::startCPUs()+0x1e>
c001443b:	e9 5b bd fe ff       	jmp    c000019b <prepareTramp>
c0014440:	c3                   	ret    
c0014441:	90                   	nop

c0014442 <EnvVarContainer::getEnv(char const*)>:
c0014442:	57                   	push   edi
c0014443:	56                   	push   esi
c0014444:	53                   	push   ebx
c0014445:	31 db                	xor    ebx,ebx
c0014447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001444b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001444d:	7e 2b                	jle    c001447a <EnvVarContainer::getEnv(char const*)+0x38>
c001444f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014456:	50                   	push   eax
c0014457:	50                   	push   eax
c0014458:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001445b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001445e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014462:	e8 65 c3 fe ff       	call   c00007cc <strcmp>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	85 c0                	test   eax,eax
c001446c:	75 09                	jne    c0014477 <EnvVarContainer::getEnv(char const*)+0x35>
c001446e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014471:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014475:	eb 05                	jmp    c001447c <EnvVarContainer::getEnv(char const*)+0x3a>
c0014477:	43                   	inc    ebx
c0014478:	eb d1                	jmp    c001444b <EnvVarContainer::getEnv(char const*)+0x9>
c001447a:	31 c0                	xor    eax,eax
c001447c:	5b                   	pop    ebx
c001447d:	5e                   	pop    esi
c001447e:	5f                   	pop    edi
c001447f:	c3                   	ret    

c0014480 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014480:	55                   	push   ebp
c0014481:	57                   	push   edi
c0014482:	56                   	push   esi
c0014483:	53                   	push   ebx
c0014484:	83 ec 28             	sub    esp,0x28
c0014487:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001448b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001448f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014493:	56                   	push   esi
c0014494:	e8 07 c2 fe ff       	call   c00006a0 <strlen>
c0014499:	40                   	inc    eax
c001449a:	89 04 24             	mov    DWORD PTR [esp],eax
c001449d:	e8 6d 55 ff ff       	call   c0009a0f <malloc>
c00144a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144a9:	e8 f2 c1 fe ff       	call   c00006a0 <strlen>
c00144ae:	40                   	inc    eax
c00144af:	89 04 24             	mov    DWORD PTR [esp],eax
c00144b2:	e8 58 55 ff ff       	call   c0009a0f <malloc>
c00144b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00144ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144be:	e8 dd c1 fe ff       	call   c00006a0 <strlen>
c00144c3:	83 c4 0c             	add    esp,0xc
c00144c6:	40                   	inc    eax
c00144c7:	50                   	push   eax
c00144c8:	6a 00                	push   0x0
c00144ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144ce:	e8 b1 c1 fe ff       	call   c0000684 <memset>
c00144d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00144d6:	e8 c5 c1 fe ff       	call   c00006a0 <strlen>
c00144db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144df:	8d 48 01             	lea    ecx,[eax+0x1]
c00144e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144e7:	89 de                	mov    esi,ebx
c00144e9:	e8 b2 c1 fe ff       	call   c00006a0 <strlen>
c00144ee:	83 c4 0c             	add    esp,0xc
c00144f1:	40                   	inc    eax
c00144f2:	50                   	push   eax
c00144f3:	6a 00                	push   0x0
c00144f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f9:	e8 86 c1 fe ff       	call   c0000684 <memset>
c00144fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014501:	e8 9a c1 fe ff       	call   c00006a0 <strlen>
c0014506:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001450a:	8d 48 01             	lea    ecx,[eax+0x1]
c001450d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001450f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014512:	40                   	inc    eax
c0014513:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014516:	c1 e0 03             	shl    eax,0x3
c0014519:	5a                   	pop    edx
c001451a:	59                   	pop    ecx
c001451b:	50                   	push   eax
c001451c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001451f:	e8 d7 54 ff ff       	call   c00099fb <realloc>
c0014524:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014528:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001452b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001452e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014532:	b9 08 00 00 00       	mov    ecx,0x8
c0014537:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014539:	83 c4 2c             	add    esp,0x2c
c001453c:	5b                   	pop    ebx
c001453d:	5e                   	pop    esi
c001453e:	5f                   	pop    edi
c001453f:	5d                   	pop    ebp
c0014540:	c3                   	ret    
c0014541:	90                   	nop

c0014542 <EnvVarContainer::deleteEnv(char const*)>:
c0014542:	c3                   	ret    
c0014543:	90                   	nop

c0014544 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014544:	55                   	push   ebp
c0014545:	57                   	push   edi
c0014546:	56                   	push   esi
c0014547:	53                   	push   ebx
c0014548:	81 ec 38 01 00 00    	sub    esp,0x138
c001454e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014555:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001455c:	68 14 01 00 00       	push   0x114
c0014561:	e8 a9 54 ff ff       	call   c0009a0f <malloc>
c0014566:	83 c4 0c             	add    esp,0xc
c0014569:	89 c3                	mov    ebx,eax
c001456b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001456e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014575:	50                   	push   eax
c0014576:	e8 eb 8c ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001457b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001457e:	e8 13 90 ff ff       	call   c000d596 <File::exists()>
c0014583:	83 c4 10             	add    esp,0x10
c0014586:	84 c0                	test   al,al
c0014588:	75 31                	jne    c00145bb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001458a:	50                   	push   eax
c001458b:	50                   	push   eax
c001458c:	6a 12                	push   0x12
c001458e:	53                   	push   ebx
c001458f:	e8 94 8d ff ff       	call   c000d328 <File::open(FileOpenMode)>
c0014594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014596:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014599:	89 34 24             	mov    DWORD PTR [esp],esi
c001459c:	e8 ff c0 fe ff       	call   c00006a0 <strlen>
c00145a1:	5a                   	pop    edx
c00145a2:	31 d2                	xor    edx,edx
c00145a4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145a8:	51                   	push   ecx
c00145a9:	56                   	push   esi
c00145aa:	52                   	push   edx
c00145ab:	50                   	push   eax
c00145ac:	53                   	push   ebx
c00145ad:	ff d7                	call   edi
c00145af:	83 c4 14             	add    esp,0x14
c00145b2:	53                   	push   ebx
c00145b3:	e8 ce 8d ff ff       	call   c000d386 <File::close()>
c00145b8:	83 c4 10             	add    esp,0x10
c00145bb:	56                   	push   esi
c00145bc:	31 f6                	xor    esi,esi
c00145be:	68 00 01 00 00       	push   0x100
c00145c3:	6a 00                	push   0x0
c00145c5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145c9:	50                   	push   eax
c00145ca:	e8 b5 c0 fe ff       	call   c0000684 <memset>
c00145cf:	5f                   	pop    edi
c00145d0:	58                   	pop    eax
c00145d1:	6a 01                	push   0x1
c00145d3:	53                   	push   ebx
c00145d4:	e8 4f 8d ff ff       	call   c000d328 <File::open(FileOpenMode)>
c00145d9:	83 c4 10             	add    esp,0x10
c00145dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145e4:	83 ec 0c             	sub    esp,0xc
c00145e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145e9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145ed:	51                   	push   ecx
c00145ee:	8d 54 24 23          	lea    edx,[esp+0x23]
c00145f2:	52                   	push   edx
c00145f3:	6a 00                	push   0x0
c00145f5:	6a 01                	push   0x1
c00145f7:	53                   	push   ebx
c00145f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145fb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00145ff:	83 c4 20             	add    esp,0x20
c0014602:	3c 0d                	cmp    al,0xd
c0014604:	0f 84 09 01 00 00    	je     c0014713 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001460a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001460f:	0f 84 ef 00 00 00    	je     c0014704 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014615:	3c 0a                	cmp    al,0xa
c0014617:	74 13                	je     c001462c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014619:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001461e:	74 0c                	je     c001462c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014620:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014626:	0f 8e d8 00 00 00    	jle    c0014704 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001462c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	8d 78 01             	lea    edi,[eax+0x1]
c0014636:	57                   	push   edi
c0014637:	e8 d3 53 ff ff       	call   c0009a0f <malloc>
c001463c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014640:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014644:	8d 56 04             	lea    edx,[esi+0x4]
c0014647:	89 14 24             	mov    DWORD PTR [esp],edx
c001464a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001464e:	e8 bc 53 ff ff       	call   c0009a0f <malloc>
c0014653:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014657:	83 c4 0c             	add    esp,0xc
c001465a:	57                   	push   edi
c001465b:	6a 00                	push   0x0
c001465d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014661:	e8 1e c0 fe ff       	call   c0000684 <memset>
c0014666:	8d 74 24 30          	lea    esi,[esp+0x30]
c001466a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001466e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014672:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014674:	83 c4 0c             	add    esp,0xc
c0014677:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001467b:	52                   	push   edx
c001467c:	6a 00                	push   0x0
c001467e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014682:	e8 fd bf fe ff       	call   c0000684 <memset>
c0014687:	8d 74 24 30          	lea    esi,[esp+0x30]
c001468b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001468f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014692:	e8 09 c0 fe ff       	call   c00006a0 <strlen>
c0014697:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001469b:	89 c1                	mov    ecx,eax
c001469d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001469f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00146a5:	40                   	inc    eax
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146ac:	85 d2                	test   edx,edx
c00146ae:	75 0c                	jne    c00146bc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	6a 08                	push   0x8
c00146b5:	e8 55 53 ff ff       	call   c0009a0f <malloc>
c00146ba:	eb 0c                	jmp    c00146c8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00146bc:	c1 e0 03             	shl    eax,0x3
c00146bf:	51                   	push   ecx
c00146c0:	51                   	push   ecx
c00146c1:	50                   	push   eax
c00146c2:	52                   	push   edx
c00146c3:	e8 33 53 ff ff       	call   c00099fb <realloc>
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00146ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146d1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00146d4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00146d8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00146dc:	b9 08 00 00 00       	mov    ecx,0x8
c00146e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146e3:	31 f6                	xor    esi,esi
c00146e5:	50                   	push   eax
c00146e6:	68 00 01 00 00       	push   0x100
c00146eb:	6a 00                	push   0x0
c00146ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00146f1:	50                   	push   eax
c00146f2:	e8 8d bf fe ff       	call   c0000684 <memset>
c00146f7:	83 c4 10             	add    esp,0x10
c00146fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014702:	eb 0f                	jmp    c0014713 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014704:	3c 3d                	cmp    al,0x3d
c0014706:	74 07                	je     c001470f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014708:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001470c:	46                   	inc    esi
c001470d:	eb 04                	jmp    c0014713 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001470f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014713:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014718:	0f 85 c6 fe ff ff    	jne    c00145e4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001471e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014724:	5b                   	pop    ebx
c0014725:	5e                   	pop    esi
c0014726:	5f                   	pop    edi
c0014727:	5d                   	pop    ebp
c0014728:	c3                   	ret    
c0014729:	90                   	nop

c001472a <EnvVarContainer::__loadSystem()>:
c001472a:	83 ec 10             	sub    esp,0x10
c001472d:	68 80 7a 02 c0       	push   0xc0027a80
c0014732:	68 35 5b 02 c0       	push   0xc0025b35
c0014737:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473b:	e8 04 fe ff ff       	call   c0014544 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014740:	83 c4 1c             	add    esp,0x1c
c0014743:	c3                   	ret    

c0014744 <EnvVarContainer::__loadUser()>:
c0014744:	c3                   	ret    
c0014745:	90                   	nop

c0014746 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014758:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001475b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001475f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014766:	90                   	nop
c0014767:	c3                   	ret    

c0014768 <EnvVarContainer::~EnvVarContainer()>:
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014772:	85 c0                	test   eax,eax
c0014774:	74 1d                	je     c0014793 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	8b 00                	mov    eax,DWORD PTR [eax]
c001477c:	85 c0                	test   eax,eax
c001477e:	74 13                	je     c0014793 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014784:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014787:	83 ec 0c             	sub    esp,0xc
c001478a:	50                   	push   eax
c001478b:	e8 8f 52 ff ff       	call   c0009a1f <free>
c0014790:	83 c4 10             	add    esp,0x10
c0014793:	90                   	nop
c0014794:	83 c4 0c             	add    esp,0xc
c0014797:	c3                   	ret    

c0014798 <Krnl::getEnv(Process*, char const*)>:
c0014798:	53                   	push   ebx
c0014799:	83 ec 08             	sub    esp,0x8
c001479c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00147a4:	39 05 f0 95 02 c0    	cmp    DWORD PTR ds:0xc00295f0,eax
c00147aa:	74 04                	je     c00147b0 <Krnl::getEnv(Process*, char const*)+0x18>
c00147ac:	85 c0                	test   eax,eax
c00147ae:	75 0b                	jne    c00147bb <Krnl::getEnv(Process*, char const*)+0x23>
c00147b0:	a1 74 8b 02 c0       	mov    eax,ds:0xc0028b74
c00147b5:	85 c0                	test   eax,eax
c00147b7:	75 19                	jne    c00147d2 <Krnl::getEnv(Process*, char const*)+0x3a>
c00147b9:	eb 27                	jmp    c00147e2 <Krnl::getEnv(Process*, char const*)+0x4a>
c00147bb:	52                   	push   edx
c00147bc:	52                   	push   edx
c00147bd:	53                   	push   ebx
c00147be:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00147c4:	e8 79 fc ff ff       	call   c0014442 <EnvVarContainer::getEnv(char const*)>
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	85 c0                	test   eax,eax
c00147ce:	75 28                	jne    c00147f8 <Krnl::getEnv(Process*, char const*)+0x60>
c00147d0:	eb de                	jmp    c00147b0 <Krnl::getEnv(Process*, char const*)+0x18>
c00147d2:	52                   	push   edx
c00147d3:	52                   	push   edx
c00147d4:	53                   	push   ebx
c00147d5:	50                   	push   eax
c00147d6:	e8 67 fc ff ff       	call   c0014442 <EnvVarContainer::getEnv(char const*)>
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	85 c0                	test   eax,eax
c00147e0:	75 16                	jne    c00147f8 <Krnl::getEnv(Process*, char const*)+0x60>
c00147e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00147e6:	a1 78 8b 02 c0       	mov    eax,ds:0xc0028b78
c00147eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147ef:	83 c4 08             	add    esp,0x8
c00147f2:	5b                   	pop    ebx
c00147f3:	e9 4a fc ff ff       	jmp    c0014442 <EnvVarContainer::getEnv(char const*)>
c00147f8:	83 c4 08             	add    esp,0x8
c00147fb:	5b                   	pop    ebx
c00147fc:	c3                   	ret    

c00147fd <Krnl::setEnvSystem(char const*, char const*)>:
c00147fd:	83 ec 10             	sub    esp,0x10
c0014800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014808:	ff 35 78 8b 02 c0    	push   DWORD PTR ds:0xc0028b78
c001480e:	e8 6d fc ff ff       	call   c0014480 <EnvVarContainer::setEnv(char const*, char const*)>
c0014813:	83 c4 1c             	add    esp,0x1c
c0014816:	c3                   	ret    

c0014817 <Krnl::setEnvUser(char const*, char const*)>:
c0014817:	a1 74 8b 02 c0       	mov    eax,ds:0xc0028b74
c001481c:	85 c0                	test   eax,eax
c001481e:	74 15                	je     c0014835 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014820:	83 ec 10             	sub    esp,0x10
c0014823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001482b:	50                   	push   eax
c001482c:	e8 4f fc ff ff       	call   c0014480 <EnvVarContainer::setEnv(char const*, char const*)>
c0014831:	83 c4 1c             	add    esp,0x1c
c0014834:	c3                   	ret    
c0014835:	c3                   	ret    

c0014836 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001483a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014844:	e9 37 fc ff ff       	jmp    c0014480 <EnvVarContainer::setEnv(char const*, char const*)>

c0014849 <Krnl::deleteEnvSystem(char const*)>:
c0014849:	c3                   	ret    

c001484a <Krnl::deleteEnvUser(char const*)>:
c001484a:	c3                   	ret    

c001484b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001484b:	c3                   	ret    

c001484c <Krnl::newProcessEnv(Process*)>:
c001484c:	83 ec 28             	sub    esp,0x28
c001484f:	6a 0c                	push   0xc
c0014851:	e8 b9 51 ff ff       	call   c0009a0f <malloc>
c0014856:	5a                   	pop    edx
c0014857:	59                   	pop    ecx
c0014858:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001485c:	50                   	push   eax
c001485d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014861:	e8 e0 fe ff ff       	call   c0014746 <EnvVarContainer::EnvVarContainer(Process*)>
c0014866:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001486a:	83 c4 2c             	add    esp,0x2c
c001486d:	c3                   	ret    

c001486e <Krnl::copyProcessEnv(Process*, Process*)>:
c001486e:	57                   	push   edi
c001486f:	56                   	push   esi
c0014870:	53                   	push   ebx
c0014871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014875:	83 ec 0c             	sub    esp,0xc
c0014878:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001487e:	6a 0c                	push   0xc
c0014880:	e8 8a 51 ff ff       	call   c0009a0f <malloc>
c0014885:	89 c3                	mov    ebx,eax
c0014887:	58                   	pop    eax
c0014888:	5a                   	pop    edx
c0014889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488d:	53                   	push   ebx
c001488e:	e8 b3 fe ff ff       	call   c0014746 <EnvVarContainer::EnvVarContainer(Process*)>
c0014893:	8b 07                	mov    eax,DWORD PTR [edi]
c0014895:	89 03                	mov    DWORD PTR [ebx],eax
c0014897:	c1 e0 03             	shl    eax,0x3
c001489a:	89 04 24             	mov    DWORD PTR [esp],eax
c001489d:	e8 6d 51 ff ff       	call   c0009a0f <malloc>
c00148a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00148a5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00148a7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00148aa:	c1 e1 03             	shl    ecx,0x3
c00148ad:	89 c7                	mov    edi,eax
c00148af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148b1:	83 c4 10             	add    esp,0x10
c00148b4:	89 d8                	mov    eax,ebx
c00148b6:	5b                   	pop    ebx
c00148b7:	5e                   	pop    esi
c00148b8:	5f                   	pop    edi
c00148b9:	c3                   	ret    

c00148ba <Krnl::loadSystemEnv()>:
c00148ba:	53                   	push   ebx
c00148bb:	83 ec 14             	sub    esp,0x14
c00148be:	6a 0c                	push   0xc
c00148c0:	e8 4a 51 ff ff       	call   c0009a0f <malloc>
c00148c5:	89 c3                	mov    ebx,eax
c00148c7:	58                   	pop    eax
c00148c8:	5a                   	pop    edx
c00148c9:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c00148cf:	53                   	push   ebx
c00148d0:	e8 71 fe ff ff       	call   c0014746 <EnvVarContainer::EnvVarContainer(Process*)>
c00148d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148d8:	89 1d 78 8b 02 c0    	mov    DWORD PTR ds:0xc0028b78,ebx
c00148de:	e8 47 fe ff ff       	call   c001472a <EnvVarContainer::__loadSystem()>
c00148e3:	83 c4 18             	add    esp,0x18
c00148e6:	5b                   	pop    ebx
c00148e7:	c3                   	ret    

c00148e8 <Krnl::loadUserEnv()>:
c00148e8:	53                   	push   ebx
c00148e9:	83 ec 14             	sub    esp,0x14
c00148ec:	6a 0c                	push   0xc
c00148ee:	e8 1c 51 ff ff       	call   c0009a0f <malloc>
c00148f3:	89 c3                	mov    ebx,eax
c00148f5:	58                   	pop    eax
c00148f6:	5a                   	pop    edx
c00148f7:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c00148fd:	53                   	push   ebx
c00148fe:	e8 43 fe ff ff       	call   c0014746 <EnvVarContainer::EnvVarContainer(Process*)>
c0014903:	89 1d 74 8b 02 c0    	mov    DWORD PTR ds:0xc0028b74,ebx
c0014909:	83 c4 18             	add    esp,0x18
c001490c:	5b                   	pop    ebx
c001490d:	c3                   	ret    

c001490e <Krnl::flushEnv()>:
c001490e:	c3                   	ret    

c001490f <Krnl::getProcessTotalEnvCount(Process*)>:
c001490f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014913:	8b 15 74 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b74
c0014919:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001491f:	a1 78 8b 02 c0       	mov    eax,ds:0xc0028b78
c0014924:	8b 00                	mov    eax,DWORD PTR [eax]
c0014926:	03 01                	add    eax,DWORD PTR [ecx]
c0014928:	85 d2                	test   edx,edx
c001492a:	74 02                	je     c001492e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001492c:	03 02                	add    eax,DWORD PTR [edx]
c001492e:	c3                   	ret    

c001492f <Krnl::getProcessEnvPair(Process*, int)>:
c001492f:	57                   	push   edi
c0014930:	56                   	push   esi
c0014931:	8b 35 74 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b74
c0014937:	53                   	push   ebx
c0014938:	85 f6                	test   esi,esi
c001493a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001493e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014942:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014948:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001494c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001494e:	75 16                	jne    c0014966 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014950:	39 c2                	cmp    edx,eax
c0014952:	7c 16                	jl     c001496a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014954:	8b 0d 78 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b78
c001495a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001495c:	01 c6                	add    esi,eax
c001495e:	39 d6                	cmp    esi,edx
c0014960:	7e 3c                	jle    c001499e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014962:	29 c2                	sub    edx,eax
c0014964:	eb 04                	jmp    c001496a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014966:	39 c2                	cmp    edx,eax
c0014968:	7d 05                	jge    c001496f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001496a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001496d:	eb 20                	jmp    c001498f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001496f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014971:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014974:	39 d1                	cmp    ecx,edx
c0014976:	7e 04                	jle    c001497c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014978:	29 c2                	sub    edx,eax
c001497a:	eb 10                	jmp    c001498c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001497c:	8b 35 78 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b78
c0014982:	03 0e                	add    ecx,DWORD PTR [esi]
c0014984:	39 d1                	cmp    ecx,edx
c0014986:	7e 16                	jle    c001499e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014988:	29 c2                	sub    edx,eax
c001498a:	29 fa                	sub    edx,edi
c001498c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001498f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014992:	8b 02                	mov    eax,DWORD PTR [edx]
c0014994:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014997:	89 03                	mov    DWORD PTR [ebx],eax
c0014999:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001499c:	eb 1d                	jmp    c00149bb <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001499e:	83 ec 0c             	sub    esp,0xc
c00149a1:	68 57 5b 02 c0       	push   0xc0025b57
c00149a6:	e8 18 00 00 00       	call   c00149c3 <Krnl::panic(char const*)>
c00149ab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00149b1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00149b8:	83 c4 10             	add    esp,0x10
c00149bb:	89 d8                	mov    eax,ebx
c00149bd:	5b                   	pop    ebx
c00149be:	5e                   	pop    esi
c00149bf:	5f                   	pop    edi
c00149c0:	c2 04 00             	ret    0x4

c00149c3 <Krnl::panic(char const*)>:
c00149c3:	55                   	push   ebp
c00149c4:	89 e5                	mov    ebp,esp
c00149c6:	53                   	push   ebx
c00149c7:	83 ec 10             	sub    esp,0x10
c00149ca:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00149cd:	fa                   	cli    
c00149ce:	c6 05 84 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b84,0x1
c00149d5:	53                   	push   ebx
c00149d6:	e8 8e 50 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00149db:	58                   	pop    eax
c00149dc:	c6 05 80 74 02 c0 00 	mov    BYTE PTR ds:0xc0027480,0x0
c00149e3:	5a                   	pop    edx
c00149e4:	53                   	push   ebx
c00149e5:	68 71 5b 02 c0       	push   0xc0025b71
c00149ea:	e8 0c 83 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00149ef:	59                   	pop    ecx
c00149f0:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c00149f5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149fb:	e8 09 61 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0014a00:	83 c4 0c             	add    esp,0xc
c0014a03:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a08:	6a 01                	push   0x1
c0014a0a:	6a 0f                	push   0xf
c0014a0c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a12:	e8 51 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a17:	58                   	pop    eax
c0014a18:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a1d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a23:	e8 62 64 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014a28:	58                   	pop    eax
c0014a29:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a2e:	5a                   	pop    edx
c0014a2f:	68 8a 5b 02 c0       	push   0xc0025b8a
c0014a34:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a3a:	e8 d7 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a3f:	59                   	pop    ecx
c0014a40:	58                   	pop    eax
c0014a41:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a46:	68 30 5c 02 c0       	push   0xc0025c30
c0014a4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a51:	e8 c0 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a56:	58                   	pop    eax
c0014a57:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a5c:	5a                   	pop    edx
c0014a5d:	68 a6 5b 02 c0       	push   0xc0025ba6
c0014a62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a68:	e8 a9 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a6d:	59                   	pop    ecx
c0014a6e:	58                   	pop    eax
c0014a6f:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a74:	53                   	push   ebx
c0014a75:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a7b:	e8 96 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a80:	58                   	pop    eax
c0014a81:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014a86:	5a                   	pop    edx
c0014a87:	68 c6 5b 02 c0       	push   0xc0025bc6
c0014a8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a92:	e8 7f 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a97:	a1 80 8b 02 c0       	mov    eax,ds:0xc0028b80
c0014a9c:	83 c4 10             	add    esp,0x10
c0014a9f:	85 c0                	test   eax,eax
c0014aa1:	74 02                	je     c0014aa5 <Krnl::panic(char const*)+0xe2>
c0014aa3:	ff d0                	call   eax
c0014aa5:	83 ec 0c             	sub    esp,0xc
c0014aa8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014aab:	e8 41 32 00 00       	call   c0017cf1 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ab0:	83 c4 10             	add    esp,0x10
c0014ab3:	89 c3                	mov    ebx,eax
c0014ab5:	85 c0                	test   eax,eax
c0014ab7:	0f 84 4e 02 00 00    	je     c0014d0b <Krnl::panic(char const*)+0x348>
c0014abd:	83 ec 08             	sub    esp,0x8
c0014ac0:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014ac5:	68 6c 5c 02 c0       	push   0xc0025c6c
c0014aca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad0:	e8 41 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ad5:	58                   	pop    eax
c0014ad6:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014adb:	5a                   	pop    edx
c0014adc:	68 a6 5b 02 c0       	push   0xc0025ba6
c0014ae1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ae7:	e8 2a 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aec:	59                   	pop    ecx
c0014aed:	58                   	pop    eax
c0014aee:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014af3:	53                   	push   ebx
c0014af4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014afa:	e8 17 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aff:	83 c4 10             	add    esp,0x10
c0014b02:	83 ec 08             	sub    esp,0x8
c0014b05:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014b0a:	68 c5 5b 02 c0       	push   0xc0025bc5
c0014b0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b15:	e8 fc 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b1a:	58                   	pop    eax
c0014b1b:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014b20:	5a                   	pop    edx
c0014b21:	68 c4 5c 02 c0       	push   0xc0025cc4
c0014b26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b2c:	e8 e5 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b31:	59                   	pop    ecx
c0014b32:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014b37:	5b                   	pop    ebx
c0014b38:	68 04 5d 02 c0       	push   0xc0025d04
c0014b3d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b43:	e8 ce 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b48:	58                   	pop    eax
c0014b49:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014b4e:	5a                   	pop    edx
c0014b4f:	68 b1 5b 02 c0       	push   0xc0025bb1
c0014b54:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b5a:	e8 b7 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b5f:	59                   	pop    ecx
c0014b60:	5b                   	pop    ebx
c0014b61:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b64:	68 c9 5b 02 c0       	push   0xc0025bc9
c0014b69:	e8 8d 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b6e:	58                   	pop    eax
c0014b6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b72:	5a                   	pop    edx
c0014b73:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b76:	68 d2 5b 02 c0       	push   0xc0025bd2
c0014b7b:	e8 7b 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b80:	59                   	pop    ecx
c0014b81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b84:	5b                   	pop    ebx
c0014b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b87:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b8a:	68 db 5b 02 c0       	push   0xc0025bdb
c0014b8f:	e8 67 81 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014b94:	58                   	pop    eax
c0014b95:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014b9a:	5a                   	pop    edx
c0014b9b:	68 48 5d 02 c0       	push   0xc0025d48
c0014ba0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ba6:	e8 6b 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bab:	59                   	pop    ecx
c0014bac:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014bb1:	5b                   	pop    ebx
c0014bb2:	68 e4 5b 02 c0       	push   0xc0025be4
c0014bb7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bbd:	e8 54 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bc2:	0f 20 c0             	mov    eax,cr0
c0014bc5:	5a                   	pop    edx
c0014bc6:	59                   	pop    ecx
c0014bc7:	50                   	push   eax
c0014bc8:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014bcd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bd3:	e8 f8 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bd8:	5b                   	pop    ebx
c0014bd9:	58                   	pop    eax
c0014bda:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014bdf:	68 ee 5b 02 c0       	push   0xc0025bee
c0014be4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bea:	e8 27 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bef:	0f 20 d0             	mov    eax,cr2
c0014bf2:	5a                   	pop    edx
c0014bf3:	59                   	pop    ecx
c0014bf4:	50                   	push   eax
c0014bf5:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014bfa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c00:	e8 cb 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c05:	5b                   	pop    ebx
c0014c06:	58                   	pop    eax
c0014c07:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c0c:	68 f8 5b 02 c0       	push   0xc0025bf8
c0014c11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c17:	e8 fa 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c1c:	0f 20 d8             	mov    eax,cr3
c0014c1f:	5a                   	pop    edx
c0014c20:	59                   	pop    ecx
c0014c21:	50                   	push   eax
c0014c22:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c2d:	e8 9e 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c32:	5b                   	pop    ebx
c0014c33:	58                   	pop    eax
c0014c34:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c39:	68 0b 5c 02 c0       	push   0xc0025c0b
c0014c3e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c44:	e8 cd 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c49:	0f 20 e0             	mov    eax,cr4
c0014c4c:	5a                   	pop    edx
c0014c4d:	59                   	pop    ecx
c0014c4e:	50                   	push   eax
c0014c4f:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c54:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c5a:	e8 71 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c5f:	5b                   	pop    ebx
c0014c60:	58                   	pop    eax
c0014c61:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c66:	68 15 5c 02 c0       	push   0xc0025c15
c0014c6b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c71:	e8 a0 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c76:	5a                   	pop    edx
c0014c77:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c7c:	59                   	pop    ecx
c0014c7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c83:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c86:	50                   	push   eax
c0014c87:	e8 44 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c8c:	5b                   	pop    ebx
c0014c8d:	58                   	pop    eax
c0014c8e:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014c93:	68 2c 5c 02 c0       	push   0xc0025c2c
c0014c98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c9e:	e8 73 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ca3:	5a                   	pop    edx
c0014ca4:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014ca9:	59                   	pop    ecx
c0014caa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cb3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cb6:	50                   	push   eax
c0014cb7:	e8 14 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014cbc:	5b                   	pop    ebx
c0014cbd:	58                   	pop    eax
c0014cbe:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014cc3:	68 2c 5c 02 c0       	push   0xc0025c2c
c0014cc8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014cce:	e8 43 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014cd3:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014cd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cdb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ce1:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ce3:	59                   	pop    ecx
c0014ce4:	5b                   	pop    ebx
c0014ce5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014ce8:	50                   	push   eax
c0014ce9:	e8 e2 62 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	b2 fe                	mov    dl,0xfe
c0014cf3:	e4 60                	in     al,0x60
c0014cf5:	3c 1c                	cmp    al,0x1c
c0014cf7:	74 04                	je     c0014cfd <Krnl::panic(char const*)+0x33a>
c0014cf9:	3c 5a                	cmp    al,0x5a
c0014cfb:	75 f6                	jne    c0014cf3 <Krnl::panic(char const*)+0x330>
c0014cfd:	e4 64                	in     al,0x64
c0014cff:	a8 02                	test   al,0x2
c0014d01:	75 fa                	jne    c0014cfd <Krnl::panic(char const*)+0x33a>
c0014d03:	88 d0                	mov    al,dl
c0014d05:	e6 64                	out    0x64,al
c0014d07:	fa                   	cli    
c0014d08:	f4                   	hlt    
c0014d09:	eb e8                	jmp    c0014cf3 <Krnl::panic(char const*)+0x330>
c0014d0b:	50                   	push   eax
c0014d0c:	50                   	push   eax
c0014d0d:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014d12:	68 98 5c 02 c0       	push   0xc0025c98
c0014d17:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d1d:	e8 f4 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d22:	58                   	pop    eax
c0014d23:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014d28:	5a                   	pop    edx
c0014d29:	68 a6 5b 02 c0       	push   0xc0025ba6
c0014d2e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d34:	e8 dd 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d39:	59                   	pop    ecx
c0014d3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d3f:	5b                   	pop    ebx
c0014d40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d43:	83 c0 0c             	add    eax,0xc
c0014d46:	50                   	push   eax
c0014d47:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c0014d4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d52:	e8 bf 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	e9 a3 fd ff ff       	jmp    c0014b02 <Krnl::panic(char const*)+0x13f>

c0014d5f <Krnl::powerThread(void*)>:
c0014d5f:	53                   	push   ebx
c0014d60:	83 ec 08             	sub    esp,0x8
c0014d63:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0014d68:	48                   	dec    eax
c0014d69:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0014d6e:	75 01                	jne    c0014d71 <Krnl::powerThread(void*)+0x12>
c0014d70:	fb                   	sti    
c0014d71:	52                   	push   edx
c0014d72:	52                   	push   edx
c0014d73:	ff 35 e4 8b 02 c0    	push   DWORD PTR ds:0xc0028be4
c0014d79:	68 6e 5d 02 c0       	push   0xc0025d6e
c0014d7e:	e8 78 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014d83:	59                   	pop    ecx
c0014d84:	8b 1d d4 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bd4
c0014d8a:	58                   	pop    eax
c0014d8b:	c6 05 a0 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028ba0,0x0
c0014d92:	53                   	push   ebx
c0014d93:	68 78 5d 02 c0       	push   0xc0025d78
c0014d98:	e8 5e 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014d9d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014da4:	e8 87 3c 00 00       	call   c0018a30 <sleep(unsigned int)>
c0014da9:	a1 e4 8b 02 c0       	mov    eax,ds:0xc0028be4
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	83 c0 0a             	add    eax,0xa
c0014db4:	85 db                	test   ebx,ebx
c0014db6:	a3 e4 8b 02 c0       	mov    ds:0xc0028be4,eax
c0014dbb:	74 b4                	je     c0014d71 <Krnl::powerThread(void*)+0x12>
c0014dbd:	39 d8                	cmp    eax,ebx
c0014dbf:	7e b0                	jle    c0014d71 <Krnl::powerThread(void*)+0x12>
c0014dc1:	83 ec 0c             	sub    esp,0xc
c0014dc4:	68 90 5d 02 c0       	push   0xc0025d90
c0014dc9:	e8 2d 7f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014dce:	58                   	pop    eax
c0014dcf:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0014dd5:	e8 e4 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	eb 92                	jmp    c0014d71 <Krnl::powerThread(void*)+0x12>

c0014ddf <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014ddf:	57                   	push   edi
c0014de0:	b9 09 00 00 00       	mov    ecx,0x9
c0014de5:	56                   	push   esi
c0014de6:	bf c0 8b 02 c0       	mov    edi,0xc0028bc0
c0014deb:	fc                   	cld    
c0014dec:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014df0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014df2:	5e                   	pop    esi
c0014df3:	5f                   	pop    edi
c0014df4:	c3                   	ret    

c0014df5 <Krnl::userIOReceived()>:
c0014df5:	c7 05 e4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028be4,0x0
c0014dff:	c3                   	ret    

c0014e00 <Krnl::handlePowerButton()>:
c0014e00:	83 ec 0c             	sub    esp,0xc
c0014e03:	a1 c0 8b 02 c0       	mov    eax,ds:0xc0028bc0
c0014e08:	83 f8 02             	cmp    eax,0x2
c0014e0b:	75 10                	jne    c0014e1d <Krnl::handlePowerButton()+0x1d>
c0014e0d:	83 ec 0c             	sub    esp,0xc
c0014e10:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0014e16:	e8 73 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e1b:	eb 11                	jmp    c0014e2e <Krnl::handlePowerButton()+0x2e>
c0014e1d:	48                   	dec    eax
c0014e1e:	75 11                	jne    c0014e31 <Krnl::handlePowerButton()+0x31>
c0014e20:	83 ec 0c             	sub    esp,0xc
c0014e23:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0014e29:	e8 90 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e2e:	83 c4 10             	add    esp,0x10
c0014e31:	83 c4 0c             	add    esp,0xc
c0014e34:	c3                   	ret    

c0014e35 <Krnl::handleSleepButton()>:
c0014e35:	83 ec 0c             	sub    esp,0xc
c0014e38:	a1 c4 8b 02 c0       	mov    eax,ds:0xc0028bc4
c0014e3d:	83 f8 02             	cmp    eax,0x2
c0014e40:	75 10                	jne    c0014e52 <Krnl::handleSleepButton()+0x1d>
c0014e42:	83 ec 0c             	sub    esp,0xc
c0014e45:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0014e4b:	e8 3e 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e50:	eb 11                	jmp    c0014e63 <Krnl::handleSleepButton()+0x2e>
c0014e52:	48                   	dec    eax
c0014e53:	75 11                	jne    c0014e66 <Krnl::handleSleepButton()+0x31>
c0014e55:	83 ec 0c             	sub    esp,0xc
c0014e58:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0014e5e:	e8 5b 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	83 c4 0c             	add    esp,0xc
c0014e69:	c3                   	ret    

c0014e6a <Krnl::setupPowerManager()>:
c0014e6a:	83 ec 0c             	sub    esp,0xc
c0014e6d:	c7 05 e4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028be4,0x0
c0014e77:	68 f0 00 00 00       	push   0xf0
c0014e7c:	c6 05 a0 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028ba0,0x0
c0014e83:	6a 00                	push   0x0
c0014e85:	68 5f 4d 01 c0       	push   0xc0014d5f
c0014e8a:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0014e90:	e8 77 36 00 00       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c0014e95:	c7 05 c0 8b 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028bc0,0x2
c0014e9f:	c7 05 c4 8b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028bc4,0x1
c0014ea9:	c7 05 c8 8b 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028bc8,0x3
c0014eb3:	c7 05 cc 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bcc,0x0
c0014ebd:	c7 05 d8 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bd8,0x0
c0014ec7:	c7 05 d0 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bd0,0x0
c0014ed1:	c7 05 dc 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bdc,0x0
c0014edb:	c7 05 d4 8b 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028bd4,0x3c
c0014ee5:	c7 05 e0 8b 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028be0,0x3c
c0014eef:	83 c4 1c             	add    esp,0x1c
c0014ef2:	c3                   	ret    
c0014ef3:	90                   	nop

c0014ef4 <Net::switchEndian16(unsigned short)>:
c0014ef4:	83 ec 04             	sub    esp,0x4
c0014ef7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014efb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014eff:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014f03:	c1 f8 08             	sar    eax,0x8
c0014f06:	89 c2                	mov    edx,eax
c0014f08:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014f0c:	c1 e0 08             	shl    eax,0x8
c0014f0f:	09 d0                	or     eax,edx
c0014f11:	83 c4 04             	add    esp,0x4
c0014f14:	c3                   	ret    
c0014f15:	8d 76 00             	lea    esi,[esi+0x0]

c0014f18 <Net::switchEndian32(unsigned int)>:
c0014f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f1c:	c1 e8 18             	shr    eax,0x18
c0014f1f:	89 c2                	mov    edx,eax
c0014f21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f25:	c1 e0 08             	shl    eax,0x8
c0014f28:	25 00 00 ff 00       	and    eax,0xff0000
c0014f2d:	09 c2                	or     edx,eax
c0014f2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f33:	c1 e8 08             	shr    eax,0x8
c0014f36:	25 00 ff 00 00       	and    eax,0xff00
c0014f3b:	09 c2                	or     edx,eax
c0014f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f41:	c1 e0 18             	shl    eax,0x18
c0014f44:	09 d0                	or     eax,edx
c0014f46:	c3                   	ret    
c0014f47:	90                   	nop

c0014f48 <Net::crc32Calc(unsigned char*, int)>:
c0014f48:	83 ec 10             	sub    esp,0x10
c0014f4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f50:	75 0a                	jne    c0014f5c <Net::crc32Calc(unsigned char*, int)+0x14>
c0014f52:	b8 00 00 00 00       	mov    eax,0x0
c0014f57:	e9 8c 00 00 00       	jmp    c0014fe8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f61:	7f 09                	jg     c0014f6c <Net::crc32Calc(unsigned char*, int)+0x24>
c0014f63:	b8 00 00 00 00       	mov    eax,0x0
c0014f68:	eb 7e                	jmp    c0014fe8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f6a:	66 90                	xchg   ax,ax
c0014f6c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014f74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f80:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014f84:	7d 5a                	jge    c0014fe0 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f8e:	01 d0                	add    eax,edx
c0014f90:	8a 00                	mov    al,BYTE PTR [eax]
c0014f92:	0f b6 c0             	movzx  eax,al
c0014f95:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014f99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fa4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014fa9:	7f 2d                	jg     c0014fd8 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014faf:	83 e0 01             	and    eax,0x1
c0014fb2:	74 10                	je     c0014fc4 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fb8:	d1 e8                	shr    eax,1
c0014fba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014fbf:	eb 0b                	jmp    c0014fcc <Net::crc32Calc(unsigned char*, int)+0x84>
c0014fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fc8:	d1 e8                	shr    eax,1
c0014fca:	66 90                	xchg   ax,ax
c0014fcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fd0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014fd4:	eb ce                	jmp    c0014fa4 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014fd6:	66 90                	xchg   ax,ax
c0014fd8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014fdc:	eb 9e                	jmp    c0014f7c <Net::crc32Calc(unsigned char*, int)+0x34>
c0014fde:	66 90                	xchg   ax,ax
c0014fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fe4:	f7 d0                	not    eax
c0014fe6:	66 90                	xchg   ax,ax
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	c3                   	ret    

c0014fec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014fec:	57                   	push   edi
c0014fed:	56                   	push   esi
c0014fee:	53                   	push   ebx
c0014fef:	83 ec 60             	sub    esp,0x60
c0014ff2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ff9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014ffd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015005:	8d 76 00             	lea    esi,[esi+0x0]
c0015008:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001500d:	7f 1d                	jg     c001502c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001500f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015016:	8d 50 01             	lea    edx,[eax+0x1]
c0015019:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015020:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0015023:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0015027:	eb df                	jmp    c0015008 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015029:	8d 76 00             	lea    esi,[esi+0x0]
c001502c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015033:	8d 50 01             	lea    edx,[eax+0x1]
c0015036:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001503d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015040:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015047:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001504b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001504f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015053:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001505b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001505f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015067:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001506b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001506f:	89 c6                	mov    esi,eax
c0015071:	89 d7                	mov    edi,edx
c0015073:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015075:	89 c8                	mov    eax,ecx
c0015077:	89 fa                	mov    edx,edi
c0015079:	89 f3                	mov    ebx,esi
c001507b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001507f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015083:	89 04 24             	mov    DWORD PTR [esp],eax
c0015086:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001508e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015095:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015099:	8d 44 24 78          	lea    eax,[esp+0x78]
c001509d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00150a1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00150a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00150ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00150b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00150b9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00150bd:	89 c6                	mov    esi,eax
c00150bf:	89 d7                	mov    edi,edx
c00150c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150c3:	89 c8                	mov    eax,ecx
c00150c5:	89 fa                	mov    edx,edi
c00150c7:	89 f3                	mov    ebx,esi
c00150c9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00150cd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00150d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150d5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00150dd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150e4:	0f b7 c0             	movzx  eax,ax
c00150e7:	c1 f8 08             	sar    eax,0x8
c00150ea:	89 c1                	mov    ecx,eax
c00150ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150f3:	8d 50 01             	lea    edx,[eax+0x1]
c00150f6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00150fd:	88 ca                	mov    dl,cl
c00150ff:	88 10                	mov    BYTE PTR [eax],dl
c0015101:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015108:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001510f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015112:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015119:	88 10                	mov    BYTE PTR [eax],dl
c001511b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001511f:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015123:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001512a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001512e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0015132:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0015136:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001513a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001513e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015142:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015146:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001514a:	89 c6                	mov    esi,eax
c001514c:	89 d7                	mov    edi,edx
c001514e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015150:	89 c8                	mov    eax,ecx
c0015152:	89 fa                	mov    edx,edi
c0015154:	89 f3                	mov    ebx,esi
c0015156:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001515a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001515e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015162:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015166:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001516d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015174:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015178:	50                   	push   eax
c0015179:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001517d:	e8 c6 fd ff ff       	call   c0014f48 <Net::crc32Calc(unsigned char*, int)>
c0015182:	83 c4 08             	add    esp,0x8
c0015185:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015189:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001518d:	c1 e8 18             	shr    eax,0x18
c0015190:	89 c1                	mov    ecx,eax
c0015192:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015199:	8d 50 01             	lea    edx,[eax+0x1]
c001519c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151a3:	88 ca                	mov    dl,cl
c00151a5:	88 10                	mov    BYTE PTR [eax],dl
c00151a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151ab:	c1 e8 10             	shr    eax,0x10
c00151ae:	89 c1                	mov    ecx,eax
c00151b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151b7:	8d 50 01             	lea    edx,[eax+0x1]
c00151ba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151c1:	88 ca                	mov    dl,cl
c00151c3:	88 10                	mov    BYTE PTR [eax],dl
c00151c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151c9:	c1 e8 08             	shr    eax,0x8
c00151cc:	89 c1                	mov    ecx,eax
c00151ce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151d5:	8d 50 01             	lea    edx,[eax+0x1]
c00151d8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151df:	88 ca                	mov    dl,cl
c00151e1:	88 10                	mov    BYTE PTR [eax],dl
c00151e3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151ea:	8d 50 01             	lea    edx,[eax+0x1]
c00151ed:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151f4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00151f8:	88 10                	mov    BYTE PTR [eax],dl
c00151fa:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00151fe:	83 c4 60             	add    esp,0x60
c0015201:	5b                   	pop    ebx
c0015202:	5e                   	pop    esi
c0015203:	5f                   	pop    edi
c0015204:	c3                   	ret    
c0015205:	8d 76 00             	lea    esi,[esi+0x0]

c0015208 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015208:	57                   	push   edi
c0015209:	56                   	push   esi
c001520a:	53                   	push   ebx
c001520b:	83 ec 70             	sub    esp,0x70
c001520e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015215:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015219:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015221:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015228:	83 c0 0e             	add    eax,0xe
c001522b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001522f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001523a:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015242:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001524a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001524e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015252:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015256:	89 c6                	mov    esi,eax
c0015258:	89 d7                	mov    edi,edx
c001525a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001525c:	89 c8                	mov    eax,ecx
c001525e:	89 fa                	mov    edx,edi
c0015260:	89 f3                	mov    ebx,esi
c0015262:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015266:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001526a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001526e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015276:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001527d:	83 c0 08             	add    eax,0x8
c0015280:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015284:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001528b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001528f:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015297:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001529b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001529f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00152a3:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00152a7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00152ab:	89 c6                	mov    esi,eax
c00152ad:	89 d7                	mov    edi,edx
c00152af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152b1:	89 c8                	mov    eax,ecx
c00152b3:	89 fa                	mov    edx,edi
c00152b5:	89 f3                	mov    ebx,esi
c00152b7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00152bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00152bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152c3:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00152cb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152d2:	8d 50 01             	lea    edx,[eax+0x1]
c00152d5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152dc:	8a 00                	mov    al,BYTE PTR [eax]
c00152de:	0f b6 c0             	movzx  eax,al
c00152e1:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00152e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152ed:	8d 50 01             	lea    edx,[eax+0x1]
c00152f0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152f7:	8a 00                	mov    al,BYTE PTR [eax]
c00152f9:	0f b6 c0             	movzx  eax,al
c00152fc:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015301:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015306:	c1 e0 08             	shl    eax,0x8
c0015309:	89 c2                	mov    edx,eax
c001530b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001530f:	09 d0                	or     eax,edx
c0015311:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015318:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001531c:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015324:	75 46                	jne    c001536c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015326:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001532d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015330:	66 3d dc 05          	cmp    ax,0x5dc
c0015334:	77 16                	ja     c001534c <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015336:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001533d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015340:	0f b7 c0             	movzx  eax,ax
c0015343:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001534a:	eb 20                	jmp    c001536c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	68 a0 5d 02 c0       	push   0xc0025da0
c0015354:	e8 a2 79 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015363:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015367:	e9 18 01 00 00       	jmp    c0015484 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c001536c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015373:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001537a:	8b 12                	mov    edx,DWORD PTR [edx]
c001537c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015380:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015387:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001538b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001538f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001539b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001539f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00153a3:	89 c6                	mov    esi,eax
c00153a5:	89 d7                	mov    edi,edx
c00153a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153a9:	89 c8                	mov    eax,ecx
c00153ab:	89 fa                	mov    edx,edi
c00153ad:	89 f3                	mov    ebx,esi
c00153af:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00153b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00153b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00153ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00153c1:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00153c8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153cf:	8d 50 01             	lea    edx,[eax+0x1]
c00153d2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	0f b6 c0             	movzx  eax,al
c00153de:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00153e2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153e9:	8d 50 01             	lea    edx,[eax+0x1]
c00153ec:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153f3:	8a 00                	mov    al,BYTE PTR [eax]
c00153f5:	0f b6 c0             	movzx  eax,al
c00153f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00153fc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015403:	8d 50 01             	lea    edx,[eax+0x1]
c0015406:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001540d:	8a 00                	mov    al,BYTE PTR [eax]
c001540f:	0f b6 c0             	movzx  eax,al
c0015412:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015416:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001541d:	8d 50 01             	lea    edx,[eax+0x1]
c0015420:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015427:	8a 00                	mov    al,BYTE PTR [eax]
c0015429:	0f b6 c0             	movzx  eax,al
c001542c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015430:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015434:	c1 e0 18             	shl    eax,0x18
c0015437:	89 c2                	mov    edx,eax
c0015439:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001543d:	c1 e0 10             	shl    eax,0x10
c0015440:	09 c2                	or     edx,eax
c0015442:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015446:	c1 e0 08             	shl    eax,0x8
c0015449:	09 d0                	or     eax,edx
c001544b:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001544f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015453:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001545a:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001545e:	83 e8 04             	sub    eax,0x4
c0015461:	83 ec 08             	sub    esp,0x8
c0015464:	50                   	push   eax
c0015465:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015469:	e8 da fa ff ff       	call   c0014f48 <Net::crc32Calc(unsigned char*, int)>
c001546e:	83 c4 10             	add    esp,0x10
c0015471:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015475:	0f 94 c2             	sete   dl
c0015478:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001547f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015482:	90                   	nop
c0015483:	90                   	nop
c0015484:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001548b:	83 c4 70             	add    esp,0x70
c001548e:	5b                   	pop    ebx
c001548f:	5e                   	pop    esi
c0015490:	5f                   	pop    edi
c0015491:	c2 04 00             	ret    0x4

c0015494 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015494:	55                   	push   ebp
c0015495:	57                   	push   edi
c0015496:	56                   	push   esi
c0015497:	53                   	push   ebx
c0015498:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001549e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00154a5:	8a 1e                	mov    bl,BYTE PTR [esi]
c00154a7:	8d 6e 01             	lea    ebp,[esi+0x1]
c00154aa:	80 fb 40             	cmp    bl,0x40
c00154ad:	75 1b                	jne    c00154ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00154af:	8a 16                	mov    dl,BYTE PTR [esi]
c00154b1:	84 d2                	test   dl,dl
c00154b3:	0f 84 f1 00 00 00    	je     c00155aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154b9:	8d 46 01             	lea    eax,[esi+0x1]
c00154bc:	80 fa 3a             	cmp    dl,0x3a
c00154bf:	74 04                	je     c00154c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00154c1:	89 c6                	mov    esi,eax
c00154c3:	eb ea                	jmp    c00154af <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00154c5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00154c8:	89 c6                	mov    esi,eax
c00154ca:	50                   	push   eax
c00154cb:	6a 40                	push   0x40
c00154cd:	6a 00                	push   0x0
c00154cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00154d3:	50                   	push   eax
c00154d4:	e8 ab b1 fe ff       	call   c0000684 <memset>
c00154d9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00154e0:	31 c0                	xor    eax,eax
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00154e7:	84 c9                	test   cl,cl
c00154e9:	0f 84 bb 00 00 00    	je     c00155aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154ef:	3d c7 00 00 00       	cmp    eax,0xc7
c00154f4:	0f 8f b0 00 00 00    	jg     c00155aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154fa:	80 f9 0a             	cmp    cl,0xa
c00154fd:	0f 85 98 00 00 00    	jne    c001559b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015503:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015508:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001550c:	a8 df                	test   al,0xdf
c001550e:	0f 94 c1             	sete   cl
c0015511:	3c 23                	cmp    al,0x23
c0015513:	0f 94 c2             	sete   dl
c0015516:	08 d1                	or     cl,dl
c0015518:	75 4a                	jne    c0015564 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001551a:	8d 50 f7             	lea    edx,[eax-0x9]
c001551d:	80 fa 01             	cmp    dl,0x1
c0015520:	76 42                	jbe    c0015564 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015522:	3c 5b                	cmp    al,0x5b
c0015524:	75 42                	jne    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015526:	80 fb 40             	cmp    bl,0x40
c0015529:	75 39                	jne    c0015564 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001552b:	83 ec 0c             	sub    esp,0xc
c001552e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015532:	52                   	push   edx
c0015533:	e8 68 b1 fe ff       	call   c00006a0 <strlen>
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	83 f8 3f             	cmp    eax,0x3f
c001553e:	77 6a                	ja     c00155aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015540:	50                   	push   eax
c0015541:	50                   	push   eax
c0015542:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015546:	52                   	push   edx
c0015547:	8d 54 24 24          	lea    edx,[esp+0x24]
c001554b:	52                   	push   edx
c001554c:	e8 ef b1 fe ff       	call   c0000740 <strcpy>
c0015551:	58                   	pop    eax
c0015552:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015556:	52                   	push   edx
c0015557:	e8 44 b1 fe ff       	call   c00006a0 <strlen>
c001555c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015561:	83 c4 10             	add    esp,0x10
c0015564:	31 d2                	xor    edx,edx
c0015566:	eb 3a                	jmp    c00155a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015568:	80 fb 40             	cmp    bl,0x40
c001556b:	74 06                	je     c0015573 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001556d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015571:	eb 20                	jmp    c0015593 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015573:	50                   	push   eax
c0015574:	50                   	push   eax
c0015575:	55                   	push   ebp
c0015576:	8d 44 24 24          	lea    eax,[esp+0x24]
c001557a:	50                   	push   eax
c001557b:	e8 4c b2 fe ff       	call   c00007cc <strcmp>
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	85 c0                	test   eax,eax
c0015585:	75 dd                	jne    c0015564 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015587:	eb e4                	jmp    c001556d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015589:	8d 50 01             	lea    edx,[eax+0x1]
c001558c:	80 f9 3d             	cmp    cl,0x3d
c001558f:	74 1d                	je     c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015591:	89 d0                	mov    eax,edx
c0015593:	8a 08                	mov    cl,BYTE PTR [eax]
c0015595:	84 c9                	test   cl,cl
c0015597:	75 f0                	jne    c0015589 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015599:	eb 0f                	jmp    c00155aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001559b:	8d 50 01             	lea    edx,[eax+0x1]
c001559e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00155a2:	47                   	inc    edi
c00155a3:	89 d0                	mov    eax,edx
c00155a5:	e9 3b ff ff ff       	jmp    c00154e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00155aa:	31 c0                	xor    eax,eax
c00155ac:	eb 33                	jmp    c00155e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00155ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155b2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00155b5:	50                   	push   eax
c00155b6:	50                   	push   eax
c00155b7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00155bb:	50                   	push   eax
c00155bc:	56                   	push   esi
c00155bd:	e8 0a b2 fe ff       	call   c00007cc <strcmp>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	85 c0                	test   eax,eax
c00155c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155cb:	75 97                	jne    c0015564 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155cd:	51                   	push   ecx
c00155ce:	51                   	push   ecx
c00155cf:	52                   	push   edx
c00155d0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00155d7:	e8 64 b1 fe ff       	call   c0000740 <strcpy>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	b0 01                	mov    al,0x1
c00155e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00155e7:	5b                   	pop    ebx
c00155e8:	5e                   	pop    esi
c00155e9:	5f                   	pop    edi
c00155ea:	5d                   	pop    ebp
c00155eb:	c3                   	ret    

c00155ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00155ec:	57                   	push   edi
c00155ed:	56                   	push   esi
c00155ee:	53                   	push   ebx
c00155ef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00155f5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00155fc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015603:	53                   	push   ebx
c0015604:	e8 97 b0 fe ff       	call   c00006a0 <strlen>
c0015609:	89 34 24             	mov    DWORD PTR [esp],esi
c001560c:	89 c7                	mov    edi,eax
c001560e:	e8 8d b0 fe ff       	call   c00006a0 <strlen>
c0015613:	83 c4 10             	add    esp,0x10
c0015616:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001561a:	3d ff 00 00 00       	cmp    eax,0xff
c001561f:	0f 87 d3 00 00 00    	ja     c00156f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015625:	57                   	push   edi
c0015626:	57                   	push   edi
c0015627:	56                   	push   esi
c0015628:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001562c:	56                   	push   esi
c001562d:	e8 0e b1 fe ff       	call   c0000740 <strcpy>
c0015632:	58                   	pop    eax
c0015633:	5a                   	pop    edx
c0015634:	68 42 61 02 c0       	push   0xc0026142
c0015639:	56                   	push   esi
c001563a:	e8 41 b2 fe ff       	call   c0000880 <strcat>
c001563f:	59                   	pop    ecx
c0015640:	5f                   	pop    edi
c0015641:	53                   	push   ebx
c0015642:	56                   	push   esi
c0015643:	e8 38 b2 fe ff       	call   c0000880 <strcat>
c0015648:	58                   	pop    eax
c0015649:	5a                   	pop    edx
c001564a:	68 ec 5d 02 c0       	push   0xc0025dec
c001564f:	56                   	push   esi
c0015650:	e8 2b b2 fe ff       	call   c0000880 <strcat>
c0015655:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001565c:	e8 ae 43 ff ff       	call   c0009a0f <malloc>
c0015661:	83 c4 0c             	add    esp,0xc
c0015664:	89 c3                	mov    ebx,eax
c0015666:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c001566c:	56                   	push   esi
c001566d:	50                   	push   eax
c001566e:	e8 f3 7b ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0015673:	83 c4 10             	add    esp,0x10
c0015676:	85 db                	test   ebx,ebx
c0015678:	74 7e                	je     c00156f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001567a:	51                   	push   ecx
c001567b:	51                   	push   ecx
c001567c:	6a 01                	push   0x1
c001567e:	53                   	push   ebx
c001567f:	e8 a4 7c ff ff       	call   c000d328 <File::open(FileOpenMode)>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	85 c0                	test   eax,eax
c0015689:	74 08                	je     c0015693 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001568b:	83 ec 0c             	sub    esp,0xc
c001568e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015690:	53                   	push   ebx
c0015691:	eb 5f                	jmp    c00156f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015693:	52                   	push   edx
c0015694:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015698:	50                   	push   eax
c0015699:	8d 44 24 20          	lea    eax,[esp+0x20]
c001569d:	50                   	push   eax
c001569e:	53                   	push   ebx
c001569f:	e8 30 7f ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c00156a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	89 c1                	mov    ecx,eax
c00156ad:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00156b1:	74 31                	je     c00156e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156b3:	83 ec 0c             	sub    esp,0xc
c00156b6:	50                   	push   eax
c00156b7:	e8 53 43 ff ff       	call   c0009a0f <malloc>
c00156bc:	89 c6                	mov    esi,eax
c00156be:	58                   	pop    eax
c00156bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156c1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00156c5:	52                   	push   edx
c00156c6:	56                   	push   esi
c00156c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156cf:	53                   	push   ebx
c00156d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00156d3:	83 c4 20             	add    esp,0x20
c00156d6:	85 c0                	test   eax,eax
c00156d8:	75 0a                	jne    c00156e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156de:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00156e2:	74 18                	je     c00156fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	53                   	push   ebx
c00156e8:	e8 99 7c ff ff       	call   c000d386 <File::close()>
c00156ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	31 c0                	xor    eax,eax
c00156fa:	eb 3b                	jmp    c0015737 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	53                   	push   ebx
c0015700:	e8 81 7c ff ff       	call   c000d386 <File::close()>
c0015705:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001570a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001570d:	83 c4 0c             	add    esp,0xc
c0015710:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015717:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001571e:	56                   	push   esi
c001571f:	e8 70 fd ff ff       	call   c0015494 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015724:	89 34 24             	mov    DWORD PTR [esp],esi
c0015727:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001572b:	e8 ef 42 ff ff       	call   c0009a1f <free>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015737:	81 c4 20 01 00 00    	add    esp,0x120
c001573d:	5b                   	pop    ebx
c001573e:	5e                   	pop    esi
c001573f:	5f                   	pop    edi
c0015740:	c3                   	ret    

c0015741 <Reg::getLine(char*, char*, char*)>:
c0015741:	57                   	push   edi
c0015742:	56                   	push   esi
c0015743:	53                   	push   ebx
c0015744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015748:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001574c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015750:	57                   	push   edi
c0015751:	56                   	push   esi
c0015752:	53                   	push   ebx
c0015753:	68 f1 5d 02 c0       	push   0xc0025df1
c0015758:	e8 8f fe ff ff       	call   c00155ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	84 c0                	test   al,al
c0015762:	75 10                	jne    c0015774 <Reg::getLine(char*, char*, char*)+0x33>
c0015764:	57                   	push   edi
c0015765:	56                   	push   esi
c0015766:	53                   	push   ebx
c0015767:	68 16 5e 02 c0       	push   0xc0025e16
c001576c:	e8 7b fe ff ff       	call   c00155ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015771:	83 c4 10             	add    esp,0x10
c0015774:	5b                   	pop    ebx
c0015775:	5e                   	pop    esi
c0015776:	5f                   	pop    edi
c0015777:	c3                   	ret    

c0015778 <Reg::readInt(char*, char*, int*)>:
c0015778:	55                   	push   ebp
c0015779:	57                   	push   edi
c001577a:	56                   	push   esi
c001577b:	53                   	push   ebx
c001577c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015782:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015786:	57                   	push   edi
c0015787:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001578e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015795:	e8 a7 ff ff ff       	call   c0015741 <Reg::getLine(char*, char*, char*)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	84 c0                	test   al,al
c001579f:	0f 84 b3 00 00 00    	je     c0015858 <Reg::readInt(char*, char*, int*)+0xe0>
c00157a5:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00157a9:	80 fa 2b             	cmp    dl,0x2b
c00157ac:	74 0c                	je     c00157ba <Reg::readInt(char*, char*, int*)+0x42>
c00157ae:	80 fa 2d             	cmp    dl,0x2d
c00157b1:	75 0e                	jne    c00157c1 <Reg::readInt(char*, char*, int*)+0x49>
c00157b3:	ba 01 00 00 00       	mov    edx,0x1
c00157b8:	eb 0b                	jmp    c00157c5 <Reg::readInt(char*, char*, int*)+0x4d>
c00157ba:	ba 01 00 00 00       	mov    edx,0x1
c00157bf:	eb 02                	jmp    c00157c3 <Reg::readInt(char*, char*, int*)+0x4b>
c00157c1:	31 d2                	xor    edx,edx
c00157c3:	31 c0                	xor    eax,eax
c00157c5:	be 0a 00 00 00       	mov    esi,0xa
c00157ca:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00157cf:	75 20                	jne    c00157f1 <Reg::readInt(char*, char*, int*)+0x79>
c00157d1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00157d5:	80 f9 78             	cmp    cl,0x78
c00157d8:	75 0a                	jne    c00157e4 <Reg::readInt(char*, char*, int*)+0x6c>
c00157da:	83 c2 02             	add    edx,0x2
c00157dd:	be 10 00 00 00       	mov    esi,0x10
c00157e2:	eb 0d                	jmp    c00157f1 <Reg::readInt(char*, char*, int*)+0x79>
c00157e4:	80 f9 62             	cmp    cl,0x62
c00157e7:	75 08                	jne    c00157f1 <Reg::readInt(char*, char*, int*)+0x79>
c00157e9:	83 c2 02             	add    edx,0x2
c00157ec:	be 02 00 00 00       	mov    esi,0x2
c00157f1:	01 d7                	add    edi,edx
c00157f3:	31 d2                	xor    edx,edx
c00157f5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00157f7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00157fb:	80 fb 0d             	cmp    bl,0xd
c00157fe:	0f 94 c3             	sete   bl
c0015801:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015806:	0f 94 c1             	sete   cl
c0015809:	08 cb                	or     bl,cl
c001580b:	75 3a                	jne    c0015847 <Reg::readInt(char*, char*, int*)+0xcf>
c001580d:	0f af d6             	imul   edx,esi
c0015810:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015815:	83 fe 10             	cmp    esi,0x10
c0015818:	75 26                	jne    c0015840 <Reg::readInt(char*, char*, int*)+0xc8>
c001581a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001581e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015821:	89 e9                	mov    ecx,ebp
c0015823:	80 f9 05             	cmp    cl,0x5
c0015826:	77 06                	ja     c001582e <Reg::readInt(char*, char*, int*)+0xb6>
c0015828:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001582c:	eb 16                	jmp    c0015844 <Reg::readInt(char*, char*, int*)+0xcc>
c001582e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015832:	83 e9 61             	sub    ecx,0x61
c0015835:	80 f9 05             	cmp    cl,0x5
c0015838:	77 06                	ja     c0015840 <Reg::readInt(char*, char*, int*)+0xc8>
c001583a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001583e:	eb 04                	jmp    c0015844 <Reg::readInt(char*, char*, int*)+0xcc>
c0015840:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015844:	47                   	inc    edi
c0015845:	eb ae                	jmp    c00157f5 <Reg::readInt(char*, char*, int*)+0x7d>
c0015847:	84 c0                	test   al,al
c0015849:	74 02                	je     c001584d <Reg::readInt(char*, char*, int*)+0xd5>
c001584b:	f7 da                	neg    edx
c001584d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015854:	89 10                	mov    DWORD PTR [eax],edx
c0015856:	88 d8                	mov    al,bl
c0015858:	81 c4 ec 00 00 00    	add    esp,0xec
c001585e:	5b                   	pop    ebx
c001585f:	5e                   	pop    esi
c0015860:	5f                   	pop    edi
c0015861:	5d                   	pop    ebp
c0015862:	c3                   	ret    

c0015863 <Reg::readString(char*, char*, char*, int)>:
c0015863:	57                   	push   edi
c0015864:	56                   	push   esi
c0015865:	53                   	push   ebx
c0015866:	81 ec d4 00 00 00    	sub    esp,0xd4
c001586c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015873:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015877:	57                   	push   edi
c0015878:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001587f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015886:	e8 b6 fe ff ff       	call   c0015741 <Reg::getLine(char*, char*, char*)>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	89 c6                	mov    esi,eax
c0015890:	84 c0                	test   al,al
c0015892:	74 44                	je     c00158d8 <Reg::readString(char*, char*, char*, int)+0x75>
c0015894:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001589b:	31 c0                	xor    eax,eax
c001589d:	4a                   	dec    edx
c001589e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00158a1:	84 c9                	test   cl,cl
c00158a3:	74 0f                	je     c00158b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00158a5:	39 c2                	cmp    edx,eax
c00158a7:	7e 0b                	jle    c00158b4 <Reg::readString(char*, char*, char*, int)+0x51>
c00158a9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00158ac:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00158b1:	40                   	inc    eax
c00158b2:	eb ea                	jmp    c001589e <Reg::readString(char*, char*, char*, int)+0x3b>
c00158b4:	83 ec 0c             	sub    esp,0xc
c00158b7:	53                   	push   ebx
c00158b8:	e8 e3 ad fe ff       	call   c00006a0 <strlen>
c00158bd:	83 c4 10             	add    esp,0x10
c00158c0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00158c5:	75 11                	jne    c00158d8 <Reg::readString(char*, char*, char*, int)+0x75>
c00158c7:	83 ec 0c             	sub    esp,0xc
c00158ca:	53                   	push   ebx
c00158cb:	e8 d0 ad fe ff       	call   c00006a0 <strlen>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00158d8:	81 c4 d0 00 00 00    	add    esp,0xd0
c00158de:	89 f0                	mov    eax,esi
c00158e0:	5b                   	pop    ebx
c00158e1:	5e                   	pop    esi
c00158e2:	5f                   	pop    edi
c00158e3:	c3                   	ret    

c00158e4 <Reg::readBool(char*, char*, bool*)>:
c00158e4:	83 ec 20             	sub    esp,0x20
c00158e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00158eb:	50                   	push   eax
c00158ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f4:	e8 7f fe ff ff       	call   c0015778 <Reg::readInt(char*, char*, int*)>
c00158f9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00158fe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015902:	0f 95 02             	setne  BYTE PTR [edx]
c0015905:	83 c4 2c             	add    esp,0x2c
c0015908:	c3                   	ret    

c0015909 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015909:	53                   	push   ebx
c001590a:	83 ec 1c             	sub    esp,0x1c
c001590d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015911:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015915:	50                   	push   eax
c0015916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001591a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001591e:	e8 c1 ff ff ff       	call   c00158e4 <Reg::readBool(char*, char*, bool*)>
c0015923:	83 c4 10             	add    esp,0x10
c0015926:	84 c0                	test   al,al
c0015928:	74 04                	je     c001592e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001592a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001592e:	88 d8                	mov    al,bl
c0015930:	83 c4 18             	add    esp,0x18
c0015933:	5b                   	pop    ebx
c0015934:	c3                   	ret    

c0015935 <Reg::readIntWithDefault(char*, char*, int)>:
c0015935:	53                   	push   ebx
c0015936:	83 ec 1c             	sub    esp,0x1c
c0015939:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001593d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015941:	50                   	push   eax
c0015942:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015946:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001594a:	e8 29 fe ff ff       	call   c0015778 <Reg::readInt(char*, char*, int*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	84 c0                	test   al,al
c0015954:	74 04                	je     c001595a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015956:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001595a:	89 d8                	mov    eax,ebx
c001595c:	83 c4 18             	add    esp,0x18
c001595f:	5b                   	pop    ebx
c0015960:	c3                   	ret    

c0015961 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015961:	57                   	push   edi
c0015962:	56                   	push   esi
c0015963:	56                   	push   esi
c0015964:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015968:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001596c:	56                   	push   esi
c001596d:	57                   	push   edi
c001596e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015976:	e8 e8 fe ff ff       	call   c0015863 <Reg::readString(char*, char*, char*, int)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	84 c0                	test   al,al
c0015980:	75 1a                	jne    c001599c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015982:	51                   	push   ecx
c0015983:	56                   	push   esi
c0015984:	6a 00                	push   0x0
c0015986:	57                   	push   edi
c0015987:	e8 f8 ac fe ff       	call   c0000684 <memset>
c001598c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001598f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015993:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015995:	83 c4 10             	add    esp,0x10
c0015998:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001599c:	89 f8                	mov    eax,edi
c001599e:	5a                   	pop    edx
c001599f:	5e                   	pop    esi
c00159a0:	5f                   	pop    edi
c00159a1:	c3                   	ret    

c00159a2 <Sys::eject(regs*)>:
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	83 ca ff             	or     edx,0xffffffff
c00159a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159ac:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00159af:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00159b4:	83 e9 41             	sub    ecx,0x41
c00159b7:	83 f9 19             	cmp    ecx,0x19
c00159ba:	77 18                	ja     c00159d4 <Sys::eject(regs*)+0x32>
c00159bc:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c00159c3:	85 c9                	test   ecx,ecx
c00159c5:	74 0d                	je     c00159d4 <Sys::eject(regs*)+0x32>
c00159c7:	83 ec 0c             	sub    esp,0xc
c00159ca:	51                   	push   ecx
c00159cb:	e8 1a ab ff ff       	call   c00104ea <LogicalDisk::eject()>
c00159d0:	83 c4 10             	add    esp,0x10
c00159d3:	99                   	cdq    
c00159d4:	83 c4 0c             	add    esp,0xc
c00159d7:	c3                   	ret    

c00159d8 <Sys::exit(regs*)>:
c00159d8:	83 ec 18             	sub    esp,0x18
c00159db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159e2:	e8 59 36 00 00       	call   c0019040 <terminateTask(int)>
c00159e7:	83 c8 ff             	or     eax,0xffffffff
c00159ea:	83 c4 1c             	add    esp,0x1c
c00159ed:	89 c2                	mov    edx,eax
c00159ef:	c3                   	ret    

c00159f0 <Sys::getCwd(regs*)>:
c00159f0:	83 ec 10             	sub    esp,0x10
c00159f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159f7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159fa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a02:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a05:	e8 5e 76 ff ff       	call   c000d068 <Fs::getcwd(Process*, char*, int)>
c0015a0a:	83 c4 1c             	add    esp,0x1c
c0015a0d:	99                   	cdq    
c0015a0e:	c3                   	ret    

c0015a0f <Sys::getPID(regs*)>:
c0015a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a19:	99                   	cdq    
c0015a1a:	c3                   	ret    

c0015a1b <Sys::getRAMData(regs*)>:
c0015a1b:	8b 0d d8 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280d8
c0015a21:	69 05 d4 80 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00280d4,0xc8
c0015a2b:	99                   	cdq    
c0015a2c:	f7 f9                	idiv   ecx
c0015a2e:	c1 e0 18             	shl    eax,0x18
c0015a31:	09 c8                	or     eax,ecx
c0015a33:	99                   	cdq    
c0015a34:	c3                   	ret    

c0015a35 <Sys::getVGAPtr(regs*)>:
c0015a35:	55                   	push   ebp
c0015a36:	57                   	push   edi
c0015a37:	56                   	push   esi
c0015a38:	53                   	push   ebx
c0015a39:	83 ec 18             	sub    esp,0x18
c0015a3c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015a40:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015a43:	e8 fc 30 00 00       	call   c0018b44 <Thr::processFromPID(int)>
c0015a48:	83 c4 10             	add    esp,0x10
c0015a4b:	89 c1                	mov    ecx,eax
c0015a4d:	b8 01 00 00 00       	mov    eax,0x1
c0015a52:	85 c9                	test   ecx,ecx
c0015a54:	74 59                	je     c0015aaf <Sys::getVGAPtr(regs*)+0x7a>
c0015a56:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015a5c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015a60:	74 0c                	je     c0015a6e <Sys::getVGAPtr(regs*)+0x39>
c0015a62:	83 ec 0c             	sub    esp,0xc
c0015a65:	53                   	push   ebx
c0015a66:	e8 9e 50 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015a71:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015a74:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a7b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015a7e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a81:	81 c3 82 00 00 00    	add    ebx,0x82
c0015a87:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015a8d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a90:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015a93:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015a99:	50                   	push   eax
c0015a9a:	50                   	push   eax
c0015a9b:	53                   	push   ebx
c0015a9c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a9f:	05 a8 0f 00 00       	add    eax,0xfa8
c0015aa4:	50                   	push   eax
c0015aa5:	e8 96 ac fe ff       	call   c0000740 <strcpy>
c0015aaa:	83 c4 10             	add    esp,0x10
c0015aad:	31 c0                	xor    eax,eax
c0015aaf:	83 c4 0c             	add    esp,0xc
c0015ab2:	31 d2                	xor    edx,edx
c0015ab4:	5b                   	pop    ebx
c0015ab5:	5e                   	pop    esi
c0015ab6:	5f                   	pop    edi
c0015ab7:	5d                   	pop    ebp
c0015ab8:	c3                   	ret    

c0015ab9 <Sys::loadDLL(regs*)>:
c0015ab9:	56                   	push   esi
c0015aba:	53                   	push   ebx
c0015abb:	31 d2                	xor    edx,edx
c0015abd:	51                   	push   ecx
c0015abe:	b8 01 00 00 00       	mov    eax,0x1
c0015ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ac7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015acb:	0f 84 8c 00 00 00    	je     c0015b5d <Sys::loadDLL(regs*)+0xa4>
c0015ad1:	83 ec 0c             	sub    esp,0xc
c0015ad4:	68 14 01 00 00       	push   0x114
c0015ad9:	e8 31 3f ff ff       	call   c0009a0f <malloc>
c0015ade:	83 c4 0c             	add    esp,0xc
c0015ae1:	89 c3                	mov    ebx,eax
c0015ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015aeb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015aee:	53                   	push   ebx
c0015aef:	e8 72 77 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	31 d2                	xor    edx,edx
c0015af9:	b8 02 00 00 00       	mov    eax,0x2
c0015afe:	85 db                	test   ebx,ebx
c0015b00:	74 5b                	je     c0015b5d <Sys::loadDLL(regs*)+0xa4>
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	53                   	push   ebx
c0015b06:	e8 8b 7a ff ff       	call   c000d596 <File::exists()>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	84 c0                	test   al,al
c0015b10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b12:	75 11                	jne    c0015b25 <Sys::loadDLL(regs*)+0x6c>
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	53                   	push   ebx
c0015b18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	b8 03 00 00 00       	mov    eax,0x3
c0015b23:	eb 36                	jmp    c0015b5b <Sys::loadDLL(regs*)+0xa2>
c0015b25:	83 ec 0c             	sub    esp,0xc
c0015b28:	53                   	push   ebx
c0015b29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b2c:	58                   	pop    eax
c0015b2d:	5a                   	pop    edx
c0015b2e:	6a 00                	push   0x0
c0015b30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015b33:	e8 0a 22 00 00       	call   c0017d42 <Thr::loadDLL(char const*, bool)>
c0015b38:	83 c4 10             	add    esp,0x10
c0015b3b:	89 c1                	mov    ecx,eax
c0015b3d:	31 d2                	xor    edx,edx
c0015b3f:	b8 04 00 00 00       	mov    eax,0x4
c0015b44:	85 c9                	test   ecx,ecx
c0015b46:	74 15                	je     c0015b5d <Sys::loadDLL(regs*)+0xa4>
c0015b48:	53                   	push   ebx
c0015b49:	53                   	push   ebx
c0015b4a:	ff 35 a8 80 02 c0    	push   DWORD PTR ds:0xc00280a8
c0015b50:	51                   	push   ecx
c0015b51:	e8 1d 24 00 00       	call   c0017f73 <Thr::executeDLL(unsigned long, void*)>
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	31 c0                	xor    eax,eax
c0015b5b:	31 d2                	xor    edx,edx
c0015b5d:	59                   	pop    ecx
c0015b5e:	5b                   	pop    ebx
c0015b5f:	5e                   	pop    esi
c0015b60:	c3                   	ret    

c0015b61 <Sys::read(regs*)>:
c0015b61:	57                   	push   edi
c0015b62:	56                   	push   esi
c0015b63:	53                   	push   ebx
c0015b64:	83 ec 10             	sub    esp,0x10
c0015b67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b6e:	83 f8 02             	cmp    eax,0x2
c0015b71:	77 10                	ja     c0015b83 <Sys::read(regs*)+0x22>
c0015b73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b7b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015b81:	eb 0e                	jmp    c0015b91 <Sys::read(regs*)+0x30>
c0015b83:	83 ec 0c             	sub    esp,0xc
c0015b86:	50                   	push   eax
c0015b87:	e8 f3 5c ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	89 c1                	mov    ecx,eax
c0015b91:	83 c8 ff             	or     eax,0xffffffff
c0015b94:	85 c9                	test   ecx,ecx
c0015b96:	89 c2                	mov    edx,eax
c0015b98:	74 28                	je     c0015bc2 <Sys::read(regs*)+0x61>
c0015b9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ba2:	31 ff                	xor    edi,edi
c0015ba4:	83 ec 0c             	sub    esp,0xc
c0015ba7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015ba9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015bad:	52                   	push   edx
c0015bae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015bb1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015bb4:	57                   	push   edi
c0015bb5:	56                   	push   esi
c0015bb6:	51                   	push   ecx
c0015bb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bbe:	83 c4 20             	add    esp,0x20
c0015bc1:	99                   	cdq    
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	5b                   	pop    ebx
c0015bc6:	5e                   	pop    esi
c0015bc7:	5f                   	pop    edi
c0015bc8:	c3                   	ret    

c0015bc9 <Sys::sbrk(regs*)>:
c0015bc9:	56                   	push   esi
c0015bca:	53                   	push   ebx
c0015bcb:	50                   	push   eax
c0015bcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015bd8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015bdb:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015be1:	85 db                	test   ebx,ebx
c0015be3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015be6:	74 02                	je     c0015bea <Sys::sbrk(regs*)+0x21>
c0015be8:	79 06                	jns    c0015bf0 <Sys::sbrk(regs*)+0x27>
c0015bea:	89 f0                	mov    eax,esi
c0015bec:	31 d2                	xor    edx,edx
c0015bee:	eb 2a                	jmp    c0015c1a <Sys::sbrk(regs*)+0x51>
c0015bf0:	83 c8 ff             	or     eax,0xffffffff
c0015bf3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015bf9:	89 c2                	mov    edx,eax
c0015bfb:	77 1d                	ja     c0015c1a <Sys::sbrk(regs*)+0x51>
c0015bfd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015c03:	50                   	push   eax
c0015c04:	c1 ea 0c             	shr    edx,0xc
c0015c07:	68 07 0c 00 00       	push   0xc07
c0015c0c:	52                   	push   edx
c0015c0d:	51                   	push   ecx
c0015c0e:	e8 6b 65 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0015c13:	89 f0                	mov    eax,esi
c0015c15:	31 d2                	xor    edx,edx
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	59                   	pop    ecx
c0015c1b:	5b                   	pop    ebx
c0015c1c:	5e                   	pop    esi
c0015c1d:	c3                   	ret    

c0015c1e <Sys::setCwd(regs*)>:
c0015c1e:	83 ec 14             	sub    esp,0x14
c0015c21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c25:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c30:	e8 00 7a ff ff       	call   c000d635 <Fs::setcwd(Process*, char*)>
c0015c35:	83 c4 1c             	add    esp,0x1c
c0015c38:	99                   	cdq    
c0015c39:	c3                   	ret    

c0015c3a <Sys::setTime(regs*)>:
c0015c3a:	55                   	push   ebp
c0015c3b:	31 c9                	xor    ecx,ecx
c0015c3d:	57                   	push   edi
c0015c3e:	bd 0c 00 00 00       	mov    ebp,0xc
c0015c43:	56                   	push   esi
c0015c44:	53                   	push   ebx
c0015c45:	31 db                	xor    ebx,ebx
c0015c47:	83 ec 10             	sub    esp,0x10
c0015c4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015c4e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015c51:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015c54:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015c57:	89 c2                	mov    edx,eax
c0015c59:	66 81 ef 6c 07       	sub    di,0x76c
c0015c5e:	83 e2 1f             	and    edx,0x1f
c0015c61:	c1 e7 10             	shl    edi,0x10
c0015c64:	42                   	inc    edx
c0015c65:	c1 e8 05             	shr    eax,0x5
c0015c68:	88 d1                	mov    cl,dl
c0015c6a:	31 d2                	xor    edx,edx
c0015c6c:	f7 f5                	div    ebp
c0015c6e:	89 dd                	mov    ebp,ebx
c0015c70:	88 d5                	mov    ch,dl
c0015c72:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015c78:	0f b7 c1             	movzx  eax,cx
c0015c7b:	31 d2                	xor    edx,edx
c0015c7d:	09 f8                	or     eax,edi
c0015c7f:	bf 3c 00 00 00       	mov    edi,0x3c
c0015c84:	89 c1                	mov    ecx,eax
c0015c86:	89 f0                	mov    eax,esi
c0015c88:	f7 f7                	div    edi
c0015c8a:	c1 e2 10             	shl    edx,0x10
c0015c8d:	09 d5                	or     ebp,edx
c0015c8f:	31 d2                	xor    edx,edx
c0015c91:	89 eb                	mov    ebx,ebp
c0015c93:	f7 f7                	div    edi
c0015c95:	bf 10 0e 00 00       	mov    edi,0xe10
c0015c9a:	88 d7                	mov    bh,dl
c0015c9c:	89 f0                	mov    eax,esi
c0015c9e:	31 d2                	xor    edx,edx
c0015ca0:	f7 f7                	div    edi
c0015ca2:	bf 18 00 00 00       	mov    edi,0x18
c0015ca7:	31 d2                	xor    edx,edx
c0015ca9:	f7 f7                	div    edi
c0015cab:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0015cb0:	88 d3                	mov    bl,dl
c0015cb2:	53                   	push   ebx
c0015cb3:	51                   	push   ecx
c0015cb4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015cba:	e8 5b 82 ff ff       	call   c000df1a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015cbf:	83 c4 1c             	add    esp,0x1c
c0015cc2:	83 f0 01             	xor    eax,0x1
c0015cc5:	5b                   	pop    ebx
c0015cc6:	0f b6 c0             	movzx  eax,al
c0015cc9:	5e                   	pop    esi
c0015cca:	31 d2                	xor    edx,edx
c0015ccc:	5f                   	pop    edi
c0015ccd:	5d                   	pop    ebp
c0015cce:	c3                   	ret    

c0015ccf <Sys::timezone(regs*)>:
c0015ccf:	53                   	push   ebx
c0015cd0:	83 ec 08             	sub    esp,0x8
c0015cd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cd7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015cdb:	75 17                	jne    c0015cf4 <Sys::timezone(regs*)+0x25>
c0015cdd:	83 ec 0c             	sub    esp,0xc
c0015ce0:	68 31 5e 02 c0       	push   0xc0025e31
c0015ce5:	e8 11 70 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015cea:	83 c8 ff             	or     eax,0xffffffff
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	89 c2                	mov    edx,eax
c0015cf2:	eb 20                	jmp    c0015d14 <Sys::timezone(regs*)+0x45>
c0015cf4:	83 ec 0c             	sub    esp,0xc
c0015cf7:	68 46 5e 02 c0       	push   0xc0025e46
c0015cfc:	e8 fa 6f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015d01:	58                   	pop    eax
c0015d02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015d05:	e8 72 7f ff ff       	call   c000dc7c <User::loadClockSettings(int)>
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	b8 01 00 00 00       	mov    eax,0x1
c0015d12:	31 d2                	xor    edx,edx
c0015d14:	83 c4 08             	add    esp,0x8
c0015d17:	5b                   	pop    ebx
c0015d18:	c3                   	ret    

c0015d19 <Sys::write(regs*)>:
c0015d19:	57                   	push   edi
c0015d1a:	56                   	push   esi
c0015d1b:	53                   	push   ebx
c0015d1c:	83 ec 10             	sub    esp,0x10
c0015d1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d23:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d26:	83 f8 02             	cmp    eax,0x2
c0015d29:	77 10                	ja     c0015d3b <Sys::write(regs*)+0x22>
c0015d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d33:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015d39:	eb 0e                	jmp    c0015d49 <Sys::write(regs*)+0x30>
c0015d3b:	83 ec 0c             	sub    esp,0xc
c0015d3e:	50                   	push   eax
c0015d3f:	e8 3b 5b ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	89 c1                	mov    ecx,eax
c0015d49:	83 c8 ff             	or     eax,0xffffffff
c0015d4c:	85 c9                	test   ecx,ecx
c0015d4e:	89 c2                	mov    edx,eax
c0015d50:	74 28                	je     c0015d7a <Sys::write(regs*)+0x61>
c0015d52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d5a:	31 ff                	xor    edi,edi
c0015d5c:	83 ec 0c             	sub    esp,0xc
c0015d5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d65:	52                   	push   edx
c0015d66:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d69:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d6c:	57                   	push   edi
c0015d6d:	56                   	push   esi
c0015d6e:	51                   	push   ecx
c0015d6f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d76:	83 c4 20             	add    esp,0x20
c0015d79:	99                   	cdq    
c0015d7a:	83 c4 10             	add    esp,0x10
c0015d7d:	5b                   	pop    ebx
c0015d7e:	5e                   	pop    esi
c0015d7f:	5f                   	pop    edi
c0015d80:	c3                   	ret    

c0015d81 <Sys::wsbe(regs*)>:
c0015d81:	57                   	push   edi
c0015d82:	b9 0b 00 00 00       	mov    ecx,0xb
c0015d87:	56                   	push   esi
c0015d88:	be 85 5e 02 c0       	mov    esi,0xc0025e85
c0015d8d:	53                   	push   ebx
c0015d8e:	83 ec 30             	sub    esp,0x30
c0015d91:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015d95:	fc                   	cld    
c0015d96:	83 ec 0c             	sub    esp,0xc
c0015d99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015d9b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015da7:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015dad:	8b 06                	mov    eax,DWORD PTR [esi]
c0015daf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015db2:	57                   	push   edi
c0015db3:	e8 e8 a8 fe ff       	call   c00006a0 <strlen>
c0015db8:	5a                   	pop    edx
c0015db9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015dbd:	52                   	push   edx
c0015dbe:	31 d2                	xor    edx,edx
c0015dc0:	57                   	push   edi
c0015dc1:	52                   	push   edx
c0015dc2:	50                   	push   eax
c0015dc3:	56                   	push   esi
c0015dc4:	ff d3                	call   ebx
c0015dc6:	83 c4 14             	add    esp,0x14
c0015dc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015dcd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015dd0:	e8 6b 32 00 00       	call   c0019040 <terminateTask(int)>
c0015dd5:	83 c4 40             	add    esp,0x40
c0015dd8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015ddd:	5b                   	pop    ebx
c0015dde:	31 d2                	xor    edx,edx
c0015de0:	5e                   	pop    esi
c0015de1:	5f                   	pop    edi
c0015de2:	c3                   	ret    

c0015de3 <Sys::yield(regs*)>:
c0015de3:	83 ec 0c             	sub    esp,0xc
c0015de6:	fa                   	cli    
c0015de7:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0015ded:	e8 36 29 00 00       	call   c0018728 <schedule()>
c0015df2:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0015df7:	48                   	dec    eax
c0015df8:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0015dfd:	75 01                	jne    c0015e00 <Sys::yield(regs*)+0x1d>
c0015dff:	fb                   	sti    
c0015e00:	8b 15 cc 86 02 c0    	mov    edx,DWORD PTR ds:0xc00286cc
c0015e06:	83 c4 0c             	add    esp,0xc
c0015e09:	89 d0                	mov    eax,edx
c0015e0b:	c1 ea 11             	shr    edx,0x11
c0015e0e:	c1 e0 07             	shl    eax,0x7
c0015e11:	25 80 30 0f 00       	and    eax,0xf3080
c0015e16:	31 d0                	xor    eax,edx
c0015e18:	31 d2                	xor    edx,edx
c0015e1a:	c3                   	ret    

c0015e1b <sysCallSeekDir(regs*)>:
c0015e1b:	31 c0                	xor    eax,eax
c0015e1d:	31 d2                	xor    edx,edx
c0015e1f:	c3                   	ret    

c0015e20 <sysCallTellDir(regs*)>:
c0015e20:	31 c0                	xor    eax,eax
c0015e22:	31 d2                	xor    edx,edx
c0015e24:	c3                   	ret    

c0015e25 <sysCallVerify(regs*)>:
c0015e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e29:	31 d2                	xor    edx,edx
c0015e2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e2e:	c3                   	ret    

c0015e2f <sysCallGetArgc(regs*)>:
c0015e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e37:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015e3d:	99                   	cdq    
c0015e3e:	c3                   	ret    

c0015e3f <sysFormatDisk(regs*)>:
c0015e3f:	56                   	push   esi
c0015e40:	53                   	push   ebx
c0015e41:	53                   	push   ebx
c0015e42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e46:	8b 1d d4 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281d4
c0015e4c:	eb 25                	jmp    c0015e73 <sysFormatDisk(regs*)+0x34>
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015e54:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e56:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015e59:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e5c:	50                   	push   eax
c0015e5d:	ff 34 85 60 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd79a0]
c0015e64:	53                   	push   ebx
c0015e65:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015e68:	83 c4 20             	add    esp,0x20
c0015e6b:	83 f8 08             	cmp    eax,0x8
c0015e6e:	75 12                	jne    c0015e82 <sysFormatDisk(regs*)+0x43>
c0015e70:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e73:	85 db                	test   ebx,ebx
c0015e75:	75 d7                	jne    c0015e4e <sysFormatDisk(regs*)+0xf>
c0015e77:	59                   	pop    ecx
c0015e78:	b8 03 00 00 00       	mov    eax,0x3
c0015e7d:	31 d2                	xor    edx,edx
c0015e7f:	5b                   	pop    ebx
c0015e80:	5e                   	pop    esi
c0015e81:	c3                   	ret    
c0015e82:	85 c0                	test   eax,eax
c0015e84:	74 1b                	je     c0015ea1 <sysFormatDisk(regs*)+0x62>
c0015e86:	83 f8 09             	cmp    eax,0x9
c0015e89:	74 0b                	je     c0015e96 <sysFormatDisk(regs*)+0x57>
c0015e8b:	59                   	pop    ecx
c0015e8c:	b8 02 00 00 00       	mov    eax,0x2
c0015e91:	31 d2                	xor    edx,edx
c0015e93:	5b                   	pop    ebx
c0015e94:	5e                   	pop    esi
c0015e95:	c3                   	ret    
c0015e96:	59                   	pop    ecx
c0015e97:	b8 01 00 00 00       	mov    eax,0x1
c0015e9c:	31 d2                	xor    edx,edx
c0015e9e:	5b                   	pop    ebx
c0015e9f:	5e                   	pop    esi
c0015ea0:	c3                   	ret    
c0015ea1:	59                   	pop    ecx
c0015ea2:	31 c0                	xor    eax,eax
c0015ea4:	31 d2                	xor    edx,edx
c0015ea6:	5b                   	pop    ebx
c0015ea7:	5e                   	pop    esi
c0015ea8:	c3                   	ret    

c0015ea9 <sysSetDiskVolumeLabel(regs*)>:
c0015ea9:	56                   	push   esi
c0015eaa:	53                   	push   ebx
c0015eab:	53                   	push   ebx
c0015eac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eb0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015eb3:	83 f8 19             	cmp    eax,0x19
c0015eb6:	77 2d                	ja     c0015ee5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015eb8:	8b 0c 85 60 86 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd79a0]
c0015ebf:	85 c9                	test   ecx,ecx
c0015ec1:	74 22                	je     c0015ee5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ec3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015ec6:	85 db                	test   ebx,ebx
c0015ec8:	74 1b                	je     c0015ee5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015eca:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015ed0:	85 d2                	test   edx,edx
c0015ed2:	74 11                	je     c0015ee5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ed4:	8b 32                	mov    esi,DWORD PTR [edx]
c0015ed6:	53                   	push   ebx
c0015ed7:	50                   	push   eax
c0015ed8:	51                   	push   ecx
c0015ed9:	52                   	push   edx
c0015eda:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	99                   	cdq    
c0015ee1:	59                   	pop    ecx
c0015ee2:	5b                   	pop    ebx
c0015ee3:	5e                   	pop    esi
c0015ee4:	c3                   	ret    
c0015ee5:	59                   	pop    ecx
c0015ee6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015eeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ef0:	5b                   	pop    ebx
c0015ef1:	5e                   	pop    esi
c0015ef2:	c3                   	ret    

c0015ef3 <sysGetDiskVolumeLabel(regs*)>:
c0015ef3:	57                   	push   edi
c0015ef4:	56                   	push   esi
c0015ef5:	53                   	push   ebx
c0015ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015efd:	83 fa 19             	cmp    edx,0x19
c0015f00:	77 38                	ja     c0015f3a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f02:	8b 0c 95 60 86 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd79a0]
c0015f09:	85 c9                	test   ecx,ecx
c0015f0b:	74 2d                	je     c0015f3a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f0d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015f10:	85 db                	test   ebx,ebx
c0015f12:	74 26                	je     c0015f3a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f14:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015f17:	85 f6                	test   esi,esi
c0015f19:	74 1f                	je     c0015f3a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f1b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015f21:	85 c0                	test   eax,eax
c0015f23:	74 15                	je     c0015f3a <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f25:	83 ec 0c             	sub    esp,0xc
c0015f28:	8b 38                	mov    edi,DWORD PTR [eax]
c0015f2a:	56                   	push   esi
c0015f2b:	53                   	push   ebx
c0015f2c:	52                   	push   edx
c0015f2d:	51                   	push   ecx
c0015f2e:	50                   	push   eax
c0015f2f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015f32:	83 c4 20             	add    esp,0x20
c0015f35:	99                   	cdq    
c0015f36:	5b                   	pop    ebx
c0015f37:	5e                   	pop    esi
c0015f38:	5f                   	pop    edi
c0015f39:	c3                   	ret    
c0015f3a:	5b                   	pop    ebx
c0015f3b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f45:	5e                   	pop    esi
c0015f46:	5f                   	pop    edi
c0015f47:	c3                   	ret    

c0015f48 <sysShutdown(regs*)>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f52:	85 c0                	test   eax,eax
c0015f54:	74 18                	je     c0015f6e <sysShutdown(regs*)+0x26>
c0015f56:	83 f8 01             	cmp    eax,0x1
c0015f59:	74 38                	je     c0015f93 <sysShutdown(regs*)+0x4b>
c0015f5b:	83 f8 02             	cmp    eax,0x2
c0015f5e:	74 24                	je     c0015f84 <sysShutdown(regs*)+0x3c>
c0015f60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f65:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f6a:	83 c4 0c             	add    esp,0xc
c0015f6d:	c3                   	ret    
c0015f6e:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0015f73:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f75:	6a 00                	push   0x0
c0015f77:	6a 00                	push   0x0
c0015f79:	6a 00                	push   0x0
c0015f7b:	50                   	push   eax
c0015f7c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f7f:	83 c4 10             	add    esp,0x10
c0015f82:	eb dc                	jmp    c0015f60 <sysShutdown(regs*)+0x18>
c0015f84:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0015f89:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f8b:	6a 00                	push   0x0
c0015f8d:	6a 00                	push   0x0
c0015f8f:	6a 01                	push   0x1
c0015f91:	eb e8                	jmp    c0015f7b <sysShutdown(regs*)+0x33>
c0015f93:	a1 e0 86 02 c0       	mov    eax,ds:0xc00286e0
c0015f98:	85 c0                	test   eax,eax
c0015f9a:	74 02                	je     c0015f9e <sysShutdown(regs*)+0x56>
c0015f9c:	ff d0                	call   eax
c0015f9e:	31 c0                	xor    eax,eax
c0015fa0:	31 d2                	xor    edx,edx
c0015fa2:	83 c4 0c             	add    esp,0xc
c0015fa5:	c3                   	ret    

c0015fa6 <sysCallRealpath(regs*)>:
c0015fa6:	83 ec 0c             	sub    esp,0xc
c0015fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fad:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015fb0:	85 d2                	test   edx,edx
c0015fb2:	74 07                	je     c0015fbb <sysCallRealpath(regs*)+0x15>
c0015fb4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015fb7:	85 c0                	test   eax,eax
c0015fb9:	75 0b                	jne    c0015fc6 <sysCallRealpath(regs*)+0x20>
c0015fbb:	b8 01 00 00 00       	mov    eax,0x1
c0015fc0:	31 d2                	xor    edx,edx
c0015fc2:	83 c4 0c             	add    esp,0xc
c0015fc5:	c3                   	ret    
c0015fc6:	51                   	push   ecx
c0015fc7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fcd:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015fd0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015fd6:	51                   	push   ecx
c0015fd7:	52                   	push   edx
c0015fd8:	50                   	push   eax
c0015fd9:	e8 de 70 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0015fde:	83 c4 10             	add    esp,0x10
c0015fe1:	31 c0                	xor    eax,eax
c0015fe3:	31 d2                	xor    edx,edx
c0015fe5:	83 c4 0c             	add    esp,0xc
c0015fe8:	c3                   	ret    

c0015fe9 <sysCallReadDir(regs*)>:
c0015fe9:	53                   	push   ebx
c0015fea:	83 ec 18             	sub    esp,0x18
c0015fed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ff4:	83 f8 02             	cmp    eax,0x2
c0015ff7:	76 60                	jbe    c0016059 <sysCallReadDir(regs*)+0x70>
c0015ff9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0016000:	77 48                	ja     c001604a <sysCallReadDir(regs*)+0x61>
c0016002:	83 ec 0c             	sub    esp,0xc
c0016005:	50                   	push   eax
c0016006:	e8 74 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c001600b:	83 c4 10             	add    esp,0x10
c001600e:	85 c0                	test   eax,eax
c0016010:	74 38                	je     c001604a <sysCallReadDir(regs*)+0x61>
c0016012:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001601a:	83 ec 0c             	sub    esp,0xc
c001601d:	8b 10                	mov    edx,DWORD PTR [eax]
c001601f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016023:	51                   	push   ecx
c0016024:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016027:	6a 00                	push   0x0
c0016029:	68 10 01 00 00       	push   0x110
c001602e:	50                   	push   eax
c001602f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016032:	83 c4 20             	add    esp,0x20
c0016035:	85 c0                	test   eax,eax
c0016037:	74 29                	je     c0016062 <sysCallReadDir(regs*)+0x79>
c0016039:	83 f8 07             	cmp    eax,0x7
c001603c:	74 1b                	je     c0016059 <sysCallReadDir(regs*)+0x70>
c001603e:	b8 02 00 00 00       	mov    eax,0x2
c0016043:	31 d2                	xor    edx,edx
c0016045:	83 c4 18             	add    esp,0x18
c0016048:	5b                   	pop    ebx
c0016049:	c3                   	ret    
c001604a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001604f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016054:	83 c4 18             	add    esp,0x18
c0016057:	5b                   	pop    ebx
c0016058:	c3                   	ret    
c0016059:	b8 01 00 00 00       	mov    eax,0x1
c001605e:	31 d2                	xor    edx,edx
c0016060:	eb e3                	jmp    c0016045 <sysCallReadDir(regs*)+0x5c>
c0016062:	31 c0                	xor    eax,eax
c0016064:	31 d2                	xor    edx,edx
c0016066:	eb dd                	jmp    c0016045 <sysCallReadDir(regs*)+0x5c>

c0016068 <sysCallIsATTY(regs*)>:
c0016068:	83 ec 0c             	sub    esp,0xc
c001606b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016072:	83 f8 02             	cmp    eax,0x2
c0016075:	76 07                	jbe    c001607e <sysCallIsATTY(regs*)+0x16>
c0016077:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001607c:	75 26                	jne    c00160a4 <sysCallIsATTY(regs*)+0x3c>
c001607e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016083:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016086:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001608c:	85 c0                	test   eax,eax
c001608e:	74 24                	je     c00160b4 <sysCallIsATTY(regs*)+0x4c>
c0016090:	83 ec 0c             	sub    esp,0xc
c0016093:	8b 10                	mov    edx,DWORD PTR [eax]
c0016095:	50                   	push   eax
c0016096:	ff 12                	call   DWORD PTR [edx]
c0016098:	31 d2                	xor    edx,edx
c001609a:	0f b6 c0             	movzx  eax,al
c001609d:	83 c4 10             	add    esp,0x10
c00160a0:	83 c4 0c             	add    esp,0xc
c00160a3:	c3                   	ret    
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	50                   	push   eax
c00160a8:	e8 d2 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	85 c0                	test   eax,eax
c00160b2:	75 dc                	jne    c0016090 <sysCallIsATTY(regs*)+0x28>
c00160b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160be:	83 c4 0c             	add    esp,0xc
c00160c1:	c3                   	ret    

c00160c2 <sysCallSeek(regs*)>:
c00160c2:	53                   	push   ebx
c00160c3:	83 ec 08             	sub    esp,0x8
c00160c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160cd:	8d 50 fd             	lea    edx,[eax-0x3]
c00160d0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00160d6:	77 32                	ja     c001610a <sysCallSeek(regs*)+0x48>
c00160d8:	83 ec 0c             	sub    esp,0xc
c00160db:	50                   	push   eax
c00160dc:	e8 9e 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c00160e1:	83 c4 0c             	add    esp,0xc
c00160e4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00160e7:	31 db                	xor    ebx,ebx
c00160e9:	53                   	push   ebx
c00160ea:	51                   	push   ecx
c00160eb:	50                   	push   eax
c00160ec:	e8 f5 72 ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	85 c0                	test   eax,eax
c00160f6:	0f 95 c0             	setne  al
c00160f9:	31 d2                	xor    edx,edx
c00160fb:	0f b6 c0             	movzx  eax,al
c00160fe:	f7 d8                	neg    eax
c0016100:	83 d2 00             	adc    edx,0x0
c0016103:	83 c4 08             	add    esp,0x8
c0016106:	f7 da                	neg    edx
c0016108:	5b                   	pop    ebx
c0016109:	c3                   	ret    
c001610a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001610f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016114:	83 c4 08             	add    esp,0x8
c0016117:	5b                   	pop    ebx
c0016118:	c3                   	ret    

c0016119 <sysCallTell(regs*)>:
c0016119:	53                   	push   ebx
c001611a:	83 ec 08             	sub    esp,0x8
c001611d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016121:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016124:	83 f8 02             	cmp    eax,0x2
c0016127:	76 4d                	jbe    c0016176 <sysCallTell(regs*)+0x5d>
c0016129:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001612e:	76 19                	jbe    c0016149 <sysCallTell(regs*)+0x30>
c0016130:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016133:	31 d2                	xor    edx,edx
c0016135:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001613b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016142:	31 c0                	xor    eax,eax
c0016144:	83 c4 08             	add    esp,0x8
c0016147:	5b                   	pop    ebx
c0016148:	c3                   	ret    
c0016149:	83 ec 0c             	sub    esp,0xc
c001614c:	50                   	push   eax
c001614d:	e8 2d 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016152:	5a                   	pop    edx
c0016153:	59                   	pop    ecx
c0016154:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016157:	50                   	push   eax
c0016158:	e8 df 72 ff ff       	call   c000d43c <File::tell(unsigned long long*)>
c001615d:	83 c4 10             	add    esp,0x10
c0016160:	85 c0                	test   eax,eax
c0016162:	0f 95 c0             	setne  al
c0016165:	31 d2                	xor    edx,edx
c0016167:	0f b6 c0             	movzx  eax,al
c001616a:	f7 d8                	neg    eax
c001616c:	83 d2 00             	adc    edx,0x0
c001616f:	83 c4 08             	add    esp,0x8
c0016172:	f7 da                	neg    edx
c0016174:	5b                   	pop    ebx
c0016175:	c3                   	ret    
c0016176:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001617b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016180:	83 c4 08             	add    esp,0x8
c0016183:	5b                   	pop    ebx
c0016184:	c3                   	ret    

c0016185 <sysCallSize(regs*)>:
c0016185:	53                   	push   ebx
c0016186:	83 ec 18             	sub    esp,0x18
c0016189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001618d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016190:	83 f8 02             	cmp    eax,0x2
c0016193:	76 53                	jbe    c00161e8 <sysCallSize(regs*)+0x63>
c0016195:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001619a:	76 19                	jbe    c00161b5 <sysCallSize(regs*)+0x30>
c001619c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001619f:	31 d2                	xor    edx,edx
c00161a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00161a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161ae:	31 c0                	xor    eax,eax
c00161b0:	83 c4 18             	add    esp,0x18
c00161b3:	5b                   	pop    ebx
c00161b4:	c3                   	ret    
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	50                   	push   eax
c00161b9:	e8 c1 56 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c00161be:	83 c4 0c             	add    esp,0xc
c00161c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00161c5:	52                   	push   edx
c00161c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00161c9:	50                   	push   eax
c00161ca:	e8 05 74 ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	85 c0                	test   eax,eax
c00161d4:	0f 95 c0             	setne  al
c00161d7:	31 d2                	xor    edx,edx
c00161d9:	0f b6 c0             	movzx  eax,al
c00161dc:	f7 d8                	neg    eax
c00161de:	83 d2 00             	adc    edx,0x0
c00161e1:	83 c4 18             	add    esp,0x18
c00161e4:	f7 da                	neg    edx
c00161e6:	5b                   	pop    ebx
c00161e7:	c3                   	ret    
c00161e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161f2:	83 c4 18             	add    esp,0x18
c00161f5:	5b                   	pop    ebx
c00161f6:	c3                   	ret    

c00161f7 <sysCallSizeFromFilename(regs*)>:
c00161f7:	57                   	push   edi
c00161f8:	56                   	push   esi
c00161f9:	53                   	push   ebx
c00161fa:	83 ec 20             	sub    esp,0x20
c00161fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016201:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016204:	83 fb 02             	cmp    ebx,0x2
c0016207:	0f 86 88 00 00 00    	jbe    c0016295 <sysCallSizeFromFilename(regs*)+0x9e>
c001620d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016213:	76 1b                	jbe    c0016230 <sysCallSizeFromFilename(regs*)+0x39>
c0016215:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016218:	31 d2                	xor    edx,edx
c001621a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016220:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016227:	83 c4 20             	add    esp,0x20
c001622a:	31 c0                	xor    eax,eax
c001622c:	5b                   	pop    ebx
c001622d:	5e                   	pop    esi
c001622e:	5f                   	pop    edi
c001622f:	c3                   	ret    
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	68 14 01 00 00       	push   0x114
c0016238:	e8 d2 37 ff ff       	call   c0009a0f <malloc>
c001623d:	83 c4 0c             	add    esp,0xc
c0016240:	89 c7                	mov    edi,eax
c0016242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016247:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001624a:	53                   	push   ebx
c001624b:	57                   	push   edi
c001624c:	e8 15 70 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016251:	83 c4 0c             	add    esp,0xc
c0016254:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016258:	50                   	push   eax
c0016259:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001625c:	57                   	push   edi
c001625d:	e8 72 73 ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	85 ff                	test   edi,edi
c0016267:	74 14                	je     c001627d <sysCallSizeFromFilename(regs*)+0x86>
c0016269:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001626d:	8b 17                	mov    edx,DWORD PTR [edi]
c001626f:	83 ec 0c             	sub    esp,0xc
c0016272:	57                   	push   edi
c0016273:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001627d:	85 c0                	test   eax,eax
c001627f:	0f 95 c0             	setne  al
c0016282:	31 d2                	xor    edx,edx
c0016284:	0f b6 c0             	movzx  eax,al
c0016287:	f7 d8                	neg    eax
c0016289:	83 d2 00             	adc    edx,0x0
c001628c:	83 c4 20             	add    esp,0x20
c001628f:	f7 da                	neg    edx
c0016291:	5b                   	pop    ebx
c0016292:	5e                   	pop    esi
c0016293:	5f                   	pop    edi
c0016294:	c3                   	ret    
c0016295:	83 c4 20             	add    esp,0x20
c0016298:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001629d:	5b                   	pop    ebx
c001629e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162a3:	5e                   	pop    esi
c00162a4:	5f                   	pop    edi
c00162a5:	c3                   	ret    

c00162a6 <sysCallClose(regs*)>:
c00162a6:	53                   	push   ebx
c00162a7:	83 ec 08             	sub    esp,0x8
c00162aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162b1:	83 f8 02             	cmp    eax,0x2
c00162b4:	76 41                	jbe    c00162f7 <sysCallClose(regs*)+0x51>
c00162b6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00162bc:	83 fa 01             	cmp    edx,0x1
c00162bf:	76 2d                	jbe    c00162ee <sysCallClose(regs*)+0x48>
c00162c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00162c6:	77 2f                	ja     c00162f7 <sysCallClose(regs*)+0x51>
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	50                   	push   eax
c00162cc:	e8 ae 55 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c00162d1:	89 c3                	mov    ebx,eax
c00162d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00162d6:	e8 ab 70 ff ff       	call   c000d386 <File::close()>
c00162db:	83 c4 10             	add    esp,0x10
c00162de:	85 db                	test   ebx,ebx
c00162e0:	74 0c                	je     c00162ee <sysCallClose(regs*)+0x48>
c00162e2:	83 ec 0c             	sub    esp,0xc
c00162e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162e7:	53                   	push   ebx
c00162e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162eb:	83 c4 10             	add    esp,0x10
c00162ee:	31 c0                	xor    eax,eax
c00162f0:	31 d2                	xor    edx,edx
c00162f2:	83 c4 08             	add    esp,0x8
c00162f5:	5b                   	pop    ebx
c00162f6:	c3                   	ret    
c00162f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016301:	83 c4 08             	add    esp,0x8
c0016304:	5b                   	pop    ebx
c0016305:	c3                   	ret    

c0016306 <sysCallOpenDir(regs*)>:
c0016306:	56                   	push   esi
c0016307:	53                   	push   ebx
c0016308:	53                   	push   ebx
c0016309:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001630d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016310:	85 f6                	test   esi,esi
c0016312:	74 59                	je     c001636d <sysCallOpenDir(regs*)+0x67>
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	68 14 01 00 00       	push   0x114
c001631c:	e8 ee 36 ff ff       	call   c0009a0f <malloc>
c0016321:	83 c4 0c             	add    esp,0xc
c0016324:	89 c6                	mov    esi,eax
c0016326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001632e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016331:	56                   	push   esi
c0016332:	e8 73 74 ff ff       	call   c000d7aa <Directory::Directory(char const*, Process*)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	85 f6                	test   esi,esi
c001633c:	74 2f                	je     c001636d <sysCallOpenDir(regs*)+0x67>
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	56                   	push   esi
c0016342:	e8 25 75 ff ff       	call   c000d86c <Directory::open()>
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	85 c0                	test   eax,eax
c001634c:	75 1f                	jne    c001636d <sysCallOpenDir(regs*)+0x67>
c001634e:	83 ec 0c             	sub    esp,0xc
c0016351:	56                   	push   esi
c0016352:	e8 33 52 ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c0016357:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	89 02                	mov    DWORD PTR [edx],eax
c001635f:	c1 f8 1f             	sar    eax,0x1f
c0016362:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016365:	31 c0                	xor    eax,eax
c0016367:	59                   	pop    ecx
c0016368:	31 d2                	xor    edx,edx
c001636a:	5b                   	pop    ebx
c001636b:	5e                   	pop    esi
c001636c:	c3                   	ret    
c001636d:	59                   	pop    ecx
c001636e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016373:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016378:	5b                   	pop    ebx
c0016379:	5e                   	pop    esi
c001637a:	c3                   	ret    

c001637b <sysCallCloseDir(regs*)>:
c001637b:	53                   	push   ebx
c001637c:	83 ec 08             	sub    esp,0x8
c001637f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016383:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016386:	8d 50 fd             	lea    edx,[eax-0x3]
c0016389:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001638f:	77 2f                	ja     c00163c0 <sysCallCloseDir(regs*)+0x45>
c0016391:	83 ec 0c             	sub    esp,0xc
c0016394:	50                   	push   eax
c0016395:	e8 e5 54 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c001639a:	89 c3                	mov    ebx,eax
c001639c:	89 04 24             	mov    DWORD PTR [esp],eax
c001639f:	e8 24 75 ff ff       	call   c000d8c8 <Directory::close()>
c00163a4:	83 c4 10             	add    esp,0x10
c00163a7:	85 db                	test   ebx,ebx
c00163a9:	74 0c                	je     c00163b7 <sysCallCloseDir(regs*)+0x3c>
c00163ab:	83 ec 0c             	sub    esp,0xc
c00163ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163b0:	53                   	push   ebx
c00163b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163b4:	83 c4 10             	add    esp,0x10
c00163b7:	31 c0                	xor    eax,eax
c00163b9:	31 d2                	xor    edx,edx
c00163bb:	83 c4 08             	add    esp,0x8
c00163be:	5b                   	pop    ebx
c00163bf:	c3                   	ret    
c00163c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163ca:	83 c4 08             	add    esp,0x8
c00163cd:	5b                   	pop    ebx
c00163ce:	c3                   	ret    

c00163cf <sysCallMakeDir(regs*)>:
c00163cf:	56                   	push   esi
c00163d0:	53                   	push   ebx
c00163d1:	83 ec 10             	sub    esp,0x10
c00163d4:	68 14 01 00 00       	push   0x114
c00163d9:	e8 31 36 ff ff       	call   c0009a0f <malloc>
c00163de:	83 c4 0c             	add    esp,0xc
c00163e1:	89 c3                	mov    ebx,eax
c00163e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163f2:	53                   	push   ebx
c00163f3:	e8 b2 73 ff ff       	call   c000d7aa <Directory::Directory(char const*, Process*)>
c00163f8:	83 c4 10             	add    esp,0x10
c00163fb:	85 db                	test   ebx,ebx
c00163fd:	74 32                	je     c0016431 <sysCallMakeDir(regs*)+0x62>
c00163ff:	83 ec 0c             	sub    esp,0xc
c0016402:	53                   	push   ebx
c0016403:	e8 44 76 ff ff       	call   c000da4c <Directory::create()>
c0016408:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001640b:	89 c6                	mov    esi,eax
c001640d:	e8 b6 74 ff ff       	call   c000d8c8 <Directory::close()>
c0016412:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016414:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016417:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001641a:	83 c4 10             	add    esp,0x10
c001641d:	31 c0                	xor    eax,eax
c001641f:	59                   	pop    ecx
c0016420:	85 f6                	test   esi,esi
c0016422:	5b                   	pop    ebx
c0016423:	0f 95 c0             	setne  al
c0016426:	5e                   	pop    esi
c0016427:	31 d2                	xor    edx,edx
c0016429:	f7 d8                	neg    eax
c001642b:	83 d2 00             	adc    edx,0x0
c001642e:	f7 da                	neg    edx
c0016430:	c3                   	ret    
c0016431:	59                   	pop    ecx
c0016432:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016437:	ba ff ff ff ff       	mov    edx,0xffffffff
c001643c:	5b                   	pop    ebx
c001643d:	5e                   	pop    esi
c001643e:	c3                   	ret    

c001643f <sysCallWait(regs*)>:
c001643f:	83 ec 10             	sub    esp,0x10
c0016442:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016446:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016449:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001644c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001644f:	e8 fc 24 00 00       	call   c0018950 <waitTask(int, int*, int)>
c0016454:	83 c4 1c             	add    esp,0x1c
c0016457:	99                   	cdq    
c0016458:	c3                   	ret    

c0016459 <sysCallNotImpl(regs*)>:
c0016459:	83 ec 18             	sub    esp,0x18
c001645c:	68 b1 5e 02 c0       	push   0xc0025eb1
c0016461:	e8 5d e5 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0016466:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001646b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016470:	83 c4 1c             	add    esp,0x1c
c0016473:	c3                   	ret    

c0016474 <sysPanic(regs*)>:
c0016474:	83 ec 18             	sub    esp,0x18
c0016477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001647b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001647e:	e8 40 e5 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0016483:	b8 01 00 00 00       	mov    eax,0x1
c0016488:	31 d2                	xor    edx,edx
c001648a:	83 c4 1c             	add    esp,0x1c
c001648d:	c3                   	ret    

c001648e <sysCallRmdir(regs*)>:
c001648e:	56                   	push   esi
c001648f:	53                   	push   ebx
c0016490:	83 ec 20             	sub    esp,0x20
c0016493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016497:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001649a:	68 14 01 00 00       	push   0x114
c001649f:	e8 6b 35 ff ff       	call   c0009a0f <malloc>
c00164a4:	83 c4 0c             	add    esp,0xc
c00164a7:	89 c3                	mov    ebx,eax
c00164a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ae:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164b1:	56                   	push   esi
c00164b2:	53                   	push   ebx
c00164b3:	e8 ae 6d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00164b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164bb:	e8 e0 6f ff ff       	call   c000d4a0 <File::unlink()>
c00164c0:	83 c4 10             	add    esp,0x10
c00164c3:	85 db                	test   ebx,ebx
c00164c5:	74 14                	je     c00164db <sysCallRmdir(regs*)+0x4d>
c00164c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164cb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	53                   	push   ebx
c00164d1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164db:	85 c0                	test   eax,eax
c00164dd:	0f 95 c0             	setne  al
c00164e0:	31 d2                	xor    edx,edx
c00164e2:	0f b6 c0             	movzx  eax,al
c00164e5:	f7 d8                	neg    eax
c00164e7:	83 d2 00             	adc    edx,0x0
c00164ea:	83 c4 14             	add    esp,0x14
c00164ed:	f7 da                	neg    edx
c00164ef:	5b                   	pop    ebx
c00164f0:	5e                   	pop    esi
c00164f1:	c3                   	ret    

c00164f2 <sysCallUnlink(regs*)>:
c00164f2:	56                   	push   esi
c00164f3:	53                   	push   ebx
c00164f4:	83 ec 20             	sub    esp,0x20
c00164f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164fb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00164fe:	68 14 01 00 00       	push   0x114
c0016503:	e8 07 35 ff ff       	call   c0009a0f <malloc>
c0016508:	83 c4 0c             	add    esp,0xc
c001650b:	89 c3                	mov    ebx,eax
c001650d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016512:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016515:	56                   	push   esi
c0016516:	53                   	push   ebx
c0016517:	e8 4a 6d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001651c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001651f:	e8 7c 6f ff ff       	call   c000d4a0 <File::unlink()>
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	85 db                	test   ebx,ebx
c0016529:	74 14                	je     c001653f <sysCallUnlink(regs*)+0x4d>
c001652b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001652f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016531:	83 ec 0c             	sub    esp,0xc
c0016534:	53                   	push   ebx
c0016535:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016538:	83 c4 10             	add    esp,0x10
c001653b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001653f:	85 c0                	test   eax,eax
c0016541:	0f 95 c0             	setne  al
c0016544:	31 d2                	xor    edx,edx
c0016546:	0f b6 c0             	movzx  eax,al
c0016549:	f7 d8                	neg    eax
c001654b:	83 d2 00             	adc    edx,0x0
c001654e:	83 c4 14             	add    esp,0x14
c0016551:	f7 da                	neg    edx
c0016553:	5b                   	pop    ebx
c0016554:	5e                   	pop    esi
c0016555:	c3                   	ret    

c0016556 <sysCallGetArgv(regs*)>:
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016560:	85 c0                	test   eax,eax
c0016562:	78 2b                	js     c001658f <sysCallGetArgv(regs*)+0x39>
c0016564:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001656a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001656d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016573:	7d 1a                	jge    c001658f <sysCallGetArgv(regs*)+0x39>
c0016575:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001657c:	85 c0                	test   eax,eax
c001657e:	74 17                	je     c0016597 <sysCallGetArgv(regs*)+0x41>
c0016580:	83 ec 08             	sub    esp,0x8
c0016583:	50                   	push   eax
c0016584:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016587:	e8 b4 a1 fe ff       	call   c0000740 <strcpy>
c001658c:	83 c4 10             	add    esp,0x10
c001658f:	31 c0                	xor    eax,eax
c0016591:	31 d2                	xor    edx,edx
c0016593:	83 c4 0c             	add    esp,0xc
c0016596:	c3                   	ret    
c0016597:	b8 01 00 00 00       	mov    eax,0x1
c001659c:	31 d2                	xor    edx,edx
c001659e:	83 c4 0c             	add    esp,0xc
c00165a1:	c3                   	ret    

c00165a2 <sysCallTTYName(regs*)>:
c00165a2:	56                   	push   esi
c00165a3:	53                   	push   ebx
c00165a4:	53                   	push   ebx
c00165a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165a9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00165ac:	85 c0                	test   eax,eax
c00165ae:	74 5f                	je     c001660f <sysCallTTYName(regs*)+0x6d>
c00165b0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00165b3:	83 f8 02             	cmp    eax,0x2
c00165b6:	77 3e                	ja     c00165f6 <sysCallTTYName(regs*)+0x54>
c00165b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165c0:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00165c6:	85 db                	test   ebx,ebx
c00165c8:	74 45                	je     c001660f <sysCallTTYName(regs*)+0x6d>
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165cf:	53                   	push   ebx
c00165d0:	ff 10                	call   DWORD PTR [eax]
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	84 c0                	test   al,al
c00165d7:	74 41                	je     c001661a <sysCallTTYName(regs*)+0x78>
c00165d9:	83 ec 08             	sub    esp,0x8
c00165dc:	81 c3 82 00 00 00    	add    ebx,0x82
c00165e2:	53                   	push   ebx
c00165e3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00165e6:	e8 55 a1 fe ff       	call   c0000740 <strcpy>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	31 c0                	xor    eax,eax
c00165f0:	59                   	pop    ecx
c00165f1:	31 d2                	xor    edx,edx
c00165f3:	5b                   	pop    ebx
c00165f4:	5e                   	pop    esi
c00165f5:	c3                   	ret    
c00165f6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165fb:	74 bb                	je     c00165b8 <sysCallTTYName(regs*)+0x16>
c00165fd:	83 ec 0c             	sub    esp,0xc
c0016600:	50                   	push   eax
c0016601:	e8 79 52 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016606:	83 c4 10             	add    esp,0x10
c0016609:	89 c3                	mov    ebx,eax
c001660b:	85 db                	test   ebx,ebx
c001660d:	75 bb                	jne    c00165ca <sysCallTTYName(regs*)+0x28>
c001660f:	59                   	pop    ecx
c0016610:	b8 01 00 00 00       	mov    eax,0x1
c0016615:	31 d2                	xor    edx,edx
c0016617:	5b                   	pop    ebx
c0016618:	5e                   	pop    esi
c0016619:	c3                   	ret    
c001661a:	59                   	pop    ecx
c001661b:	b8 02 00 00 00       	mov    eax,0x2
c0016620:	31 d2                	xor    edx,edx
c0016622:	5b                   	pop    ebx
c0016623:	5e                   	pop    esi
c0016624:	c3                   	ret    

c0016625 <sysCallUSleep(regs*)>:
c0016625:	83 ec 1c             	sub    esp,0x1c
c0016628:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001662c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001662f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016632:	6a 00                	push   0x0
c0016634:	6a 64                	push   0x64
c0016636:	52                   	push   edx
c0016637:	50                   	push   eax
c0016638:	e8 a7 c1 00 00       	call   c00227e4 <__udivdi3>
c001663d:	83 c4 14             	add    esp,0x14
c0016640:	50                   	push   eax
c0016641:	e8 da 23 00 00       	call   c0018a20 <milliTenthSleep(unsigned int)>
c0016646:	31 c0                	xor    eax,eax
c0016648:	31 d2                	xor    edx,edx
c001664a:	83 c4 1c             	add    esp,0x1c
c001664d:	c3                   	ret    

c001664e <sysCallSpawn(regs*)>:
c001664e:	56                   	push   esi
c001664f:	53                   	push   ebx
c0016650:	50                   	push   eax
c0016651:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016655:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016658:	85 c0                	test   eax,eax
c001665a:	75 08                	jne    c0016664 <sysCallSpawn(regs*)+0x16>
c001665c:	59                   	pop    ecx
c001665d:	31 c0                	xor    eax,eax
c001665f:	31 d2                	xor    edx,edx
c0016661:	5b                   	pop    ebx
c0016662:	5e                   	pop    esi
c0016663:	c3                   	ret    
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	68 1f 07 00 00       	push   0x71f
c001666c:	e8 9e 33 ff ff       	call   c0009a0f <malloc>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	89 c6                	mov    esi,eax
c0016676:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016679:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001667c:	85 c0                	test   eax,eax
c001667e:	75 32                	jne    c00166b2 <sysCallSpawn(regs*)+0x64>
c0016680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016685:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016688:	52                   	push   edx
c0016689:	50                   	push   eax
c001668a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001668d:	56                   	push   esi
c001668e:	e8 85 1a 00 00       	call   c0018118 <Process::Process(char const*, Process*, char**)>
c0016693:	83 c4 10             	add    esp,0x10
c0016696:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001669d:	75 bd                	jne    c001665c <sysCallSpawn(regs*)+0xe>
c001669f:	83 ec 0c             	sub    esp,0xc
c00166a2:	56                   	push   esi
c00166a3:	e8 5c 1f 00 00       	call   c0018604 <Process::createUserThread()>
c00166a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	99                   	cdq    
c00166ae:	59                   	pop    ecx
c00166af:	5b                   	pop    ebx
c00166b0:	5e                   	pop    esi
c00166b1:	c3                   	ret    
c00166b2:	31 c0                	xor    eax,eax
c00166b4:	eb d2                	jmp    c0016688 <sysCallSpawn(regs*)+0x3a>

c00166b6 <sysCallGetEnv(regs*)>:
c00166b6:	57                   	push   edi
c00166b7:	56                   	push   esi
c00166b8:	53                   	push   ebx
c00166b9:	83 ec 1c             	sub    esp,0x1c
c00166bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00166c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00166c8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00166cb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00166ce:	e8 3c e2 ff ff       	call   c001490f <Krnl::getProcessTotalEnvCount(Process*)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	39 c7                	cmp    edi,eax
c00166d8:	7c 14                	jl     c00166ee <sysCallGetEnv(regs*)+0x38>
c00166da:	85 f6                	test   esi,esi
c00166dc:	75 0b                	jne    c00166e9 <sysCallGetEnv(regs*)+0x33>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	31 c0                	xor    eax,eax
c00166e3:	5b                   	pop    ebx
c00166e4:	31 d2                	xor    edx,edx
c00166e6:	5e                   	pop    esi
c00166e7:	5f                   	pop    edi
c00166e8:	c3                   	ret    
c00166e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166ec:	eb f0                	jmp    c00166de <sysCallGetEnv(regs*)+0x28>
c00166ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00166f2:	52                   	push   edx
c00166f3:	57                   	push   edi
c00166f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166fa:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00166fd:	50                   	push   eax
c00166fe:	e8 2c e2 ff ff       	call   c001492f <Krnl::getProcessEnvPair(Process*, int)>
c0016703:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001670a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001670e:	83 c4 0c             	add    esp,0xc
c0016711:	85 c9                	test   ecx,ecx
c0016713:	75 23                	jne    c0016738 <sysCallGetEnv(regs*)+0x82>
c0016715:	83 ec 0c             	sub    esp,0xc
c0016718:	50                   	push   eax
c0016719:	e8 82 9f fe ff       	call   c00006a0 <strlen>
c001671e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016721:	89 c3                	mov    ebx,eax
c0016723:	e8 78 9f fe ff       	call   c00006a0 <strlen>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	31 d2                	xor    edx,edx
c0016734:	5b                   	pop    ebx
c0016735:	5e                   	pop    esi
c0016736:	5f                   	pop    edi
c0016737:	c3                   	ret    
c0016738:	83 ec 08             	sub    esp,0x8
c001673b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001673e:	50                   	push   eax
c001673f:	56                   	push   esi
c0016740:	e8 fb 9f fe ff       	call   c0000740 <strcpy>
c0016745:	58                   	pop    eax
c0016746:	5a                   	pop    edx
c0016747:	68 cb 5e 02 c0       	push   0xc0025ecb
c001674c:	56                   	push   esi
c001674d:	e8 2e a1 fe ff       	call   c0000880 <strcat>
c0016752:	59                   	pop    ecx
c0016753:	5b                   	pop    ebx
c0016754:	57                   	push   edi
c0016755:	56                   	push   esi
c0016756:	e8 25 a1 fe ff       	call   c0000880 <strcat>
c001675b:	83 c4 10             	add    esp,0x10
c001675e:	e9 7b ff ff ff       	jmp    c00166de <sysCallGetEnv(regs*)+0x28>

c0016763 <sysAppSettings(regs*)>:
c0016763:	57                   	push   edi
c0016764:	56                   	push   esi
c0016765:	56                   	push   esi
c0016766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001676d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016773:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016778:	66 3d c0 09          	cmp    ax,0x9c0
c001677c:	75 2e                	jne    c00167ac <sysAppSettings(regs*)+0x49>
c001677e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016784:	83 e0 1f             	and    eax,0x1f
c0016787:	3c 01                	cmp    al,0x1
c0016789:	74 2c                	je     c00167b7 <sysAppSettings(regs*)+0x54>
c001678b:	3c 07                	cmp    al,0x7
c001678d:	0f 84 b3 00 00 00    	je     c0016846 <sysAppSettings(regs*)+0xe3>
c0016793:	84 c0                	test   al,al
c0016795:	0f 84 d2 00 00 00    	je     c001686d <sysAppSettings(regs*)+0x10a>
c001679b:	3c 08                	cmp    al,0x8
c001679d:	74 63                	je     c0016802 <sysAppSettings(regs*)+0x9f>
c001679f:	59                   	pop    ecx
c00167a0:	0f b6 c0             	movzx  eax,al
c00167a3:	5e                   	pop    esi
c00167a4:	05 e8 03 00 00       	add    eax,0x3e8
c00167a9:	5f                   	pop    edi
c00167aa:	99                   	cdq    
c00167ab:	c3                   	ret    
c00167ac:	b8 01 00 00 00       	mov    eax,0x1
c00167b1:	59                   	pop    ecx
c00167b2:	31 d2                	xor    edx,edx
c00167b4:	5e                   	pop    esi
c00167b5:	5f                   	pop    edi
c00167b6:	c3                   	ret    
c00167b7:	50                   	push   eax
c00167b8:	68 00 01 00 00       	push   0x100
c00167bd:	6a 00                	push   0x0
c00167bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167c7:	83 c0 0c             	add    eax,0xc
c00167ca:	50                   	push   eax
c00167cb:	e8 b4 9e fe ff       	call   c0000684 <memset>
c00167d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d5:	b9 ff 00 00 00       	mov    ecx,0xff
c00167da:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00167dd:	83 c7 0c             	add    edi,0xc
c00167e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167e7:	5a                   	pop    edx
c00167e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167eb:	59                   	pop    ecx
c00167ec:	8d 50 0c             	lea    edx,[eax+0xc]
c00167ef:	52                   	push   edx
c00167f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167f6:	e8 ad 41 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	31 c0                	xor    eax,eax
c0016800:	eb af                	jmp    c00167b1 <sysAppSettings(regs*)+0x4e>
c0016802:	83 ec 08             	sub    esp,0x8
c0016805:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001680b:	83 e0 0f             	and    eax,0xf
c001680e:	50                   	push   eax
c001680f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016814:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016817:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001681d:	e8 76 41 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c0016822:	5f                   	pop    edi
c0016823:	58                   	pop    eax
c0016824:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001682a:	c1 e8 04             	shr    eax,0x4
c001682d:	83 e0 0f             	and    eax,0xf
c0016830:	50                   	push   eax
c0016831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016836:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016839:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001683f:	e8 44 41 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c0016844:	eb b5                	jmp    c00167fb <sysAppSettings(regs*)+0x98>
c0016846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001684b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001684e:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016854:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001685a:	c0 e8 06             	shr    al,0x6
c001685d:	83 e0 01             	and    eax,0x1
c0016860:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016866:	31 c0                	xor    eax,eax
c0016868:	e9 44 ff ff ff       	jmp    c00167b1 <sysAppSettings(regs*)+0x4e>
c001686d:	b8 02 00 00 00       	mov    eax,0x2
c0016872:	e9 3a ff ff ff       	jmp    c00167b1 <sysAppSettings(regs*)+0x4e>

c0016877 <sysSetFatAttrib(regs*)>:
c0016877:	57                   	push   edi
c0016878:	56                   	push   esi
c0016879:	53                   	push   ebx
c001687a:	83 ec 1c             	sub    esp,0x1c
c001687d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016881:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016884:	68 14 01 00 00       	push   0x114
c0016889:	e8 81 31 ff ff       	call   c0009a0f <malloc>
c001688e:	83 c4 0c             	add    esp,0xc
c0016891:	89 c3                	mov    ebx,eax
c0016893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016898:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001689b:	57                   	push   edi
c001689c:	53                   	push   ebx
c001689d:	e8 c4 69 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00168a2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00168a5:	83 c4 0c             	add    esp,0xc
c00168a8:	0f b6 d4             	movzx  edx,ah
c00168ab:	0f b6 c0             	movzx  eax,al
c00168ae:	52                   	push   edx
c00168af:	50                   	push   eax
c00168b0:	53                   	push   ebx
c00168b1:	e8 84 6c ff ff       	call   c000d53a <File::chfatattr(unsigned char, unsigned char)>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	85 db                	test   ebx,ebx
c00168bb:	74 14                	je     c00168d1 <sysSetFatAttrib(regs*)+0x5a>
c00168bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00168c3:	83 ec 0c             	sub    esp,0xc
c00168c6:	53                   	push   ebx
c00168c7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00168ca:	83 c4 10             	add    esp,0x10
c00168cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168d1:	85 c0                	test   eax,eax
c00168d3:	0f 95 c0             	setne  al
c00168d6:	31 d2                	xor    edx,edx
c00168d8:	0f b6 c0             	movzx  eax,al
c00168db:	f7 d8                	neg    eax
c00168dd:	83 d2 00             	adc    edx,0x0
c00168e0:	83 c4 10             	add    esp,0x10
c00168e3:	f7 da                	neg    edx
c00168e5:	5b                   	pop    ebx
c00168e6:	5e                   	pop    esi
c00168e7:	5f                   	pop    edi
c00168e8:	c3                   	ret    

c00168e9 <sysPipe(regs*)>:
c00168e9:	57                   	push   edi
c00168ea:	56                   	push   esi
c00168eb:	53                   	push   ebx
c00168ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00168f6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00168f9:	6a 20                	push   0x20
c00168fb:	e8 0f 31 ff ff       	call   c0009a0f <malloc>
c0016900:	89 c3                	mov    ebx,eax
c0016902:	58                   	pop    eax
c0016903:	5a                   	pop    edx
c0016904:	68 00 50 00 00       	push   0x5000
c0016909:	53                   	push   ebx
c001690a:	e8 11 3e ff ff       	call   c000a720 <Pipe::Pipe(int)>
c001690f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016912:	e8 73 4c ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c0016917:	89 07                	mov    DWORD PTR [edi],eax
c0016919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001691c:	e8 69 4c ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	89 06                	mov    DWORD PTR [esi],eax
c0016926:	31 d2                	xor    edx,edx
c0016928:	5b                   	pop    ebx
c0016929:	31 c0                	xor    eax,eax
c001692b:	5e                   	pop    esi
c001692c:	5f                   	pop    edi
c001692d:	c3                   	ret    

c001692e <sysGetUnixTime(regs*)>:
c001692e:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0016933:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016939:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001693d:	e9 10 74 ff ff       	jmp    c000dd52 <Clock::timeInSecondsLocal()>

c0016942 <string_ends_with(char const*, char const*)>:
c0016942:	57                   	push   edi
c0016943:	56                   	push   esi
c0016944:	53                   	push   ebx
c0016945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016949:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001694d:	83 ec 0c             	sub    esp,0xc
c0016950:	53                   	push   ebx
c0016951:	e8 4a 9d fe ff       	call   c00006a0 <strlen>
c0016956:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016959:	89 c6                	mov    esi,eax
c001695b:	e8 40 9d fe ff       	call   c00006a0 <strlen>
c0016960:	83 c4 10             	add    esp,0x10
c0016963:	39 c6                	cmp    esi,eax
c0016965:	7d 06                	jge    c001696d <string_ends_with(char const*, char const*)+0x2b>
c0016967:	5b                   	pop    ebx
c0016968:	31 c0                	xor    eax,eax
c001696a:	5e                   	pop    esi
c001696b:	5f                   	pop    edi
c001696c:	c3                   	ret    
c001696d:	83 ec 08             	sub    esp,0x8
c0016970:	29 c6                	sub    esi,eax
c0016972:	57                   	push   edi
c0016973:	01 f3                	add    ebx,esi
c0016975:	53                   	push   ebx
c0016976:	e8 51 9e fe ff       	call   c00007cc <strcmp>
c001697b:	83 c4 10             	add    esp,0x10
c001697e:	85 c0                	test   eax,eax
c0016980:	5b                   	pop    ebx
c0016981:	0f 94 c0             	sete   al
c0016984:	5e                   	pop    esi
c0016985:	0f b6 c0             	movzx  eax,al
c0016988:	5f                   	pop    edi
c0016989:	c3                   	ret    

c001698a <sysCallOpen(regs*)>:
c001698a:	56                   	push   esi
c001698b:	53                   	push   ebx
c001698c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016992:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016999:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001699c:	85 c9                	test   ecx,ecx
c001699e:	0f 84 ad 01 00 00    	je     c0016b51 <sysCallOpen(regs*)+0x1c7>
c00169a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169a7:	85 c0                	test   eax,eax
c00169a9:	0f 84 a2 01 00 00    	je     c0016b51 <sysCallOpen(regs*)+0x1c7>
c00169af:	52                   	push   edx
c00169b0:	68 cd 5e 02 c0       	push   0xc0025ecd
c00169b5:	50                   	push   eax
c00169b6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00169ba:	56                   	push   esi
c00169bb:	e8 fc 66 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c00169c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00169c3:	e8 d8 9c fe ff       	call   c00006a0 <strlen>
c00169c8:	83 c4 10             	add    esp,0x10
c00169cb:	48                   	dec    eax
c00169cc:	74 1d                	je     c00169eb <sysCallOpen(regs*)+0x61>
c00169ce:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00169d1:	eb 0f                	jmp    c00169e2 <sysCallOpen(regs*)+0x58>
c00169d3:	80 fa 3a             	cmp    dl,0x3a
c00169d6:	74 0f                	je     c00169e7 <sysCallOpen(regs*)+0x5d>
c00169d8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00169dc:	48                   	dec    eax
c00169dd:	74 0c                	je     c00169eb <sysCallOpen(regs*)+0x61>
c00169df:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00169e2:	80 fa 2e             	cmp    dl,0x2e
c00169e5:	75 ec                	jne    c00169d3 <sysCallOpen(regs*)+0x49>
c00169e7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00169eb:	83 ec 08             	sub    esp,0x8
c00169ee:	68 d1 5e 02 c0       	push   0xc0025ed1
c00169f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169f6:	e8 47 ff ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	85 c0                	test   eax,eax
c0016a00:	74 1d                	je     c0016a1f <sysCallOpen(regs*)+0x95>
c0016a02:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a05:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016a0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a12:	81 c4 04 01 00 00    	add    esp,0x104
c0016a18:	31 c0                	xor    eax,eax
c0016a1a:	31 d2                	xor    edx,edx
c0016a1c:	5b                   	pop    ebx
c0016a1d:	5e                   	pop    esi
c0016a1e:	c3                   	ret    
c0016a1f:	83 ec 08             	sub    esp,0x8
c0016a22:	68 d6 5e 02 c0       	push   0xc0025ed6
c0016a27:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a2a:	e8 13 ff ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	85 c0                	test   eax,eax
c0016a34:	75 cc                	jne    c0016a02 <sysCallOpen(regs*)+0x78>
c0016a36:	83 ec 08             	sub    esp,0x8
c0016a39:	68 d2 5e 02 c0       	push   0xc0025ed2
c0016a3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a41:	e8 86 9d fe ff       	call   c00007cc <strcmp>
c0016a46:	83 c4 10             	add    esp,0x10
c0016a49:	85 c0                	test   eax,eax
c0016a4b:	74 b5                	je     c0016a02 <sysCallOpen(regs*)+0x78>
c0016a4d:	83 ec 08             	sub    esp,0x8
c0016a50:	68 d1 5e 02 c0       	push   0xc0025ed1
c0016a55:	56                   	push   esi
c0016a56:	e8 e7 fe ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	85 c0                	test   eax,eax
c0016a60:	75 a0                	jne    c0016a02 <sysCallOpen(regs*)+0x78>
c0016a62:	83 ec 08             	sub    esp,0x8
c0016a65:	68 db 5e 02 c0       	push   0xc0025edb
c0016a6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a6d:	e8 d0 fe ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	85 c0                	test   eax,eax
c0016a77:	0f 85 e7 00 00 00    	jne    c0016b64 <sysCallOpen(regs*)+0x1da>
c0016a7d:	83 ec 08             	sub    esp,0x8
c0016a80:	68 e0 5e 02 c0       	push   0xc0025ee0
c0016a85:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a88:	e8 b5 fe ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c0016a8d:	83 c4 10             	add    esp,0x10
c0016a90:	85 c0                	test   eax,eax
c0016a92:	0f 85 cc 00 00 00    	jne    c0016b64 <sysCallOpen(regs*)+0x1da>
c0016a98:	83 ec 08             	sub    esp,0x8
c0016a9b:	68 dc 5e 02 c0       	push   0xc0025edc
c0016aa0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016aa3:	e8 24 9d fe ff       	call   c00007cc <strcmp>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	85 c0                	test   eax,eax
c0016aad:	0f 84 b1 00 00 00    	je     c0016b64 <sysCallOpen(regs*)+0x1da>
c0016ab3:	83 ec 08             	sub    esp,0x8
c0016ab6:	68 db 5e 02 c0       	push   0xc0025edb
c0016abb:	56                   	push   esi
c0016abc:	e8 81 fe ff ff       	call   c0016942 <string_ends_with(char const*, char const*)>
c0016ac1:	83 c4 10             	add    esp,0x10
c0016ac4:	85 c0                	test   eax,eax
c0016ac6:	0f 85 98 00 00 00    	jne    c0016b64 <sysCallOpen(regs*)+0x1da>
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	68 14 01 00 00       	push   0x114
c0016ad4:	e8 36 2f ff ff       	call   c0009a0f <malloc>
c0016ad9:	83 c4 0c             	add    esp,0xc
c0016adc:	89 c6                	mov    esi,eax
c0016ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ae3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ae6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ae9:	56                   	push   esi
c0016aea:	e8 77 67 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	85 f6                	test   esi,esi
c0016af4:	74 5b                	je     c0016b51 <sysCallOpen(regs*)+0x1c7>
c0016af6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016af9:	0f b6 c2             	movzx  eax,dl
c0016afc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016aff:	89 d0                	mov    eax,edx
c0016b01:	83 e0 01             	and    eax,0x1
c0016b04:	f6 c2 02             	test   dl,0x2
c0016b07:	74 03                	je     c0016b0c <sysCallOpen(regs*)+0x182>
c0016b09:	83 c8 02             	or     eax,0x2
c0016b0c:	f6 c2 04             	test   dl,0x4
c0016b0f:	74 03                	je     c0016b14 <sysCallOpen(regs*)+0x18a>
c0016b11:	83 c8 04             	or     eax,0x4
c0016b14:	f6 c2 08             	test   dl,0x8
c0016b17:	74 03                	je     c0016b1c <sysCallOpen(regs*)+0x192>
c0016b19:	83 c8 0a             	or     eax,0xa
c0016b1c:	83 e2 10             	and    edx,0x10
c0016b1f:	74 03                	je     c0016b24 <sysCallOpen(regs*)+0x19a>
c0016b21:	83 c8 12             	or     eax,0x12
c0016b24:	83 ec 08             	sub    esp,0x8
c0016b27:	50                   	push   eax
c0016b28:	56                   	push   esi
c0016b29:	e8 fa 67 ff ff       	call   c000d328 <File::open(FileOpenMode)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	85 c0                	test   eax,eax
c0016b33:	75 1c                	jne    c0016b51 <sysCallOpen(regs*)+0x1c7>
c0016b35:	83 ec 0c             	sub    esp,0xc
c0016b38:	56                   	push   esi
c0016b39:	e8 4c 4a ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c0016b3e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	89 02                	mov    DWORD PTR [edx],eax
c0016b46:	c1 f8 1f             	sar    eax,0x1f
c0016b49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b4c:	e9 c1 fe ff ff       	jmp    c0016a12 <sysCallOpen(regs*)+0x88>
c0016b51:	81 c4 04 01 00 00    	add    esp,0x104
c0016b57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b61:	5b                   	pop    ebx
c0016b62:	5e                   	pop    esi
c0016b63:	c3                   	ret    
c0016b64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b67:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b6d:	e9 99 fe ff ff       	jmp    c0016a0b <sysCallOpen(regs*)+0x81>

c0016b72 <Sys::loadSyscalls()>:
c0016b72:	c7 05 00 8c 02 c0 e3 5d 01 c0 	mov    DWORD PTR ds:0xc0028c00,0xc0015de3
c0016b7c:	c7 05 04 8c 02 c0 d8 59 01 c0 	mov    DWORD PTR ds:0xc0028c04,0xc00159d8
c0016b86:	c7 05 08 8c 02 c0 c9 5b 01 c0 	mov    DWORD PTR ds:0xc0028c08,0xc0015bc9
c0016b90:	c7 05 0c 8c 02 c0 19 5d 01 c0 	mov    DWORD PTR ds:0xc0028c0c,0xc0015d19
c0016b9a:	c7 05 10 8c 02 c0 61 5b 01 c0 	mov    DWORD PTR ds:0xc0028c10,0xc0015b61
c0016ba4:	c7 05 14 8c 02 c0 0f 5a 01 c0 	mov    DWORD PTR ds:0xc0028c14,0xc0015a0f
c0016bae:	c7 05 18 8c 02 c0 f0 59 01 c0 	mov    DWORD PTR ds:0xc0028c18,0xc00159f0
c0016bb8:	c7 05 1c 8c 02 c0 1e 5c 01 c0 	mov    DWORD PTR ds:0xc0028c1c,0xc0015c1e
c0016bc2:	c7 05 24 8c 02 c0 a6 62 01 c0 	mov    DWORD PTR ds:0xc0028c24,0xc00162a6
c0016bcc:	c7 05 20 8c 02 c0 8a 69 01 c0 	mov    DWORD PTR ds:0xc0028c20,0xc001698a
c0016bd6:	c7 05 28 8c 02 c0 06 63 01 c0 	mov    DWORD PTR ds:0xc0028c28,0xc0016306
c0016be0:	c7 05 2c 8c 02 c0 e9 5f 01 c0 	mov    DWORD PTR ds:0xc0028c2c,0xc0015fe9
c0016bea:	c7 05 30 8c 02 c0 1b 5e 01 c0 	mov    DWORD PTR ds:0xc0028c30,0xc0015e1b
c0016bf4:	c7 05 34 8c 02 c0 20 5e 01 c0 	mov    DWORD PTR ds:0xc0028c34,0xc0015e20
c0016bfe:	c7 05 38 8c 02 c0 cf 63 01 c0 	mov    DWORD PTR ds:0xc0028c38,0xc00163cf
c0016c08:	c7 05 3c 8c 02 c0 7b 63 01 c0 	mov    DWORD PTR ds:0xc0028c3c,0xc001637b
c0016c12:	c7 05 40 8c 02 c0 c2 60 01 c0 	mov    DWORD PTR ds:0xc0028c40,0xc00160c2
c0016c1c:	c7 05 44 8c 02 c0 19 61 01 c0 	mov    DWORD PTR ds:0xc0028c44,0xc0016119
c0016c26:	c7 05 48 8c 02 c0 85 61 01 c0 	mov    DWORD PTR ds:0xc0028c48,0xc0016185
c0016c30:	c7 05 4c 8c 02 c0 25 5e 01 c0 	mov    DWORD PTR ds:0xc0028c4c,0xc0015e25
c0016c3a:	c7 05 50 8c 02 c0 3f 64 01 c0 	mov    DWORD PTR ds:0xc0028c50,0xc001643f
c0016c44:	c7 05 54 8c 02 c0 59 64 01 c0 	mov    DWORD PTR ds:0xc0028c54,0xc0016459
c0016c4e:	c7 05 58 8c 02 c0 59 64 01 c0 	mov    DWORD PTR ds:0xc0028c58,0xc0016459
c0016c58:	c7 05 5c 8c 02 c0 8e 64 01 c0 	mov    DWORD PTR ds:0xc0028c5c,0xc001648e
c0016c62:	c7 05 60 8c 02 c0 f2 64 01 c0 	mov    DWORD PTR ds:0xc0028c60,0xc00164f2
c0016c6c:	c7 05 64 8c 02 c0 2f 5e 01 c0 	mov    DWORD PTR ds:0xc0028c64,0xc0015e2f
c0016c76:	c7 05 68 8c 02 c0 56 65 01 c0 	mov    DWORD PTR ds:0xc0028c68,0xc0016556
c0016c80:	c7 05 6c 8c 02 c0 a6 5f 01 c0 	mov    DWORD PTR ds:0xc0028c6c,0xc0015fa6
c0016c8a:	c7 05 70 8c 02 c0 a2 65 01 c0 	mov    DWORD PTR ds:0xc0028c70,0xc00165a2
c0016c94:	c7 05 74 8c 02 c0 68 60 01 c0 	mov    DWORD PTR ds:0xc0028c74,0xc0016068
c0016c9e:	c7 05 78 8c 02 c0 25 66 01 c0 	mov    DWORD PTR ds:0xc0028c78,0xc0016625
c0016ca8:	c7 05 7c 8c 02 c0 f7 61 01 c0 	mov    DWORD PTR ds:0xc0028c7c,0xc00161f7
c0016cb2:	c7 05 80 8c 02 c0 4e 66 01 c0 	mov    DWORD PTR ds:0xc0028c80,0xc001664e
c0016cbc:	c7 05 84 8c 02 c0 b6 66 01 c0 	mov    DWORD PTR ds:0xc0028c84,0xc00166b6
c0016cc6:	c7 05 88 8c 02 c0 63 67 01 c0 	mov    DWORD PTR ds:0xc0028c88,0xc0016763
c0016cd0:	c7 05 8c 8c 02 c0 3f 5e 01 c0 	mov    DWORD PTR ds:0xc0028c8c,0xc0015e3f
c0016cda:	c7 05 90 8c 02 c0 a9 5e 01 c0 	mov    DWORD PTR ds:0xc0028c90,0xc0015ea9
c0016ce4:	c7 05 94 8c 02 c0 f3 5e 01 c0 	mov    DWORD PTR ds:0xc0028c94,0xc0015ef3
c0016cee:	c7 05 98 8c 02 c0 77 68 01 c0 	mov    DWORD PTR ds:0xc0028c98,0xc0016877
c0016cf8:	c7 05 9c 8c 02 c0 74 64 01 c0 	mov    DWORD PTR ds:0xc0028c9c,0xc0016474
c0016d02:	c7 05 a0 8c 02 c0 48 5f 01 c0 	mov    DWORD PTR ds:0xc0028ca0,0xc0015f48
c0016d0c:	c7 05 a4 8c 02 c0 e9 68 01 c0 	mov    DWORD PTR ds:0xc0028ca4,0xc00168e9
c0016d16:	c7 05 a8 8c 02 c0 2e 69 01 c0 	mov    DWORD PTR ds:0xc0028ca8,0xc001692e
c0016d20:	c7 05 ac 8c 02 c0 b9 5a 01 c0 	mov    DWORD PTR ds:0xc0028cac,0xc0015ab9
c0016d2a:	c7 05 b0 8c 02 c0 3a 5c 01 c0 	mov    DWORD PTR ds:0xc0028cb0,0xc0015c3a
c0016d34:	c7 05 b4 8c 02 c0 cf 5c 01 c0 	mov    DWORD PTR ds:0xc0028cb4,0xc0015ccf
c0016d3e:	c7 05 b8 8c 02 c0 a2 59 01 c0 	mov    DWORD PTR ds:0xc0028cb8,0xc00159a2
c0016d48:	c7 05 bc 8c 02 c0 81 5d 01 c0 	mov    DWORD PTR ds:0xc0028cbc,0xc0015d81
c0016d52:	c7 05 c0 8c 02 c0 1b 5a 01 c0 	mov    DWORD PTR ds:0xc0028cc0,0xc0015a1b
c0016d5c:	c7 05 c4 8c 02 c0 35 5a 01 c0 	mov    DWORD PTR ds:0xc0028cc4,0xc0015a35
c0016d66:	c3                   	ret    

c0016d67 <Sys::systemCall(regs*, void*)>:
c0016d67:	53                   	push   ebx
c0016d68:	83 ec 08             	sub    esp,0x8
c0016d6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d6f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d72:	83 f8 7f             	cmp    eax,0x7f
c0016d75:	77 16                	ja     c0016d8d <Sys::systemCall(regs*, void*)+0x26>
c0016d77:	8b 14 85 00 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7400]
c0016d7e:	85 d2                	test   edx,edx
c0016d80:	74 0b                	je     c0016d8d <Sys::systemCall(regs*, void*)+0x26>
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	53                   	push   ebx
c0016d86:	ff d2                	call   edx
c0016d88:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d8b:	eb 0d                	jmp    c0016d9a <Sys::systemCall(regs*, void*)+0x33>
c0016d8d:	52                   	push   edx
c0016d8e:	52                   	push   edx
c0016d8f:	50                   	push   eax
c0016d90:	68 e5 5e 02 c0       	push   0xc0025ee5
c0016d95:	e8 61 5f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016da2:	31 d2                	xor    edx,edx
c0016da4:	83 c4 08             	add    esp,0x8
c0016da7:	5b                   	pop    ebx
c0016da8:	c3                   	ret    

c0016da9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016da9:	55                   	push   ebp
c0016daa:	57                   	push   edi
c0016dab:	56                   	push   esi
c0016dac:	53                   	push   ebx
c0016dad:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016db3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016dba:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016dc1:	85 c0                	test   eax,eax
c0016dc3:	0f 95 c1             	setne  cl
c0016dc6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016dce:	0f 94 c2             	sete   dl
c0016dd1:	84 d1                	test   cl,dl
c0016dd3:	74 23                	je     c0016df8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016dd5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016ddb:	74 1b                	je     c0016df8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016ddd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016de3:	89 da                	mov    edx,ebx
c0016de5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016deb:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016df1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016df8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016dff:	05 ff 0f 00 00       	add    eax,0xfff
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e0b:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016e11:	c1 e8 0c             	shr    eax,0xc
c0016e14:	89 fe                	mov    esi,edi
c0016e16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e1a:	c1 ee 0c             	shr    esi,0xc
c0016e1d:	6a 01                	push   0x1
c0016e1f:	e8 b1 4b ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0016e24:	89 c5                	mov    ebp,eax
c0016e26:	58                   	pop    eax
c0016e27:	5a                   	pop    edx
c0016e28:	56                   	push   esi
c0016e29:	68 f9 5e 02 c0       	push   0xc0025ef9
c0016e2e:	e8 c8 5e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016e33:	59                   	pop    ecx
c0016e34:	58                   	pop    eax
c0016e35:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e39:	68 0b 5f 02 c0       	push   0xc0025f0b
c0016e3e:	e8 b8 5e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016e4c:	0f 86 31 01 00 00    	jbe    c0016f83 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016e52:	c1 e6 0c             	shl    esi,0xc
c0016e55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e58:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016e5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e5f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016e66:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e69:	01 df                	add    edi,ebx
c0016e6b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016e6e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e72:	0f 84 08 01 00 00    	je     c0016f80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016e78:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016e7e:	76 05                	jbe    c0016e85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016e80:	bf 00 10 00 00       	mov    edi,0x1000
c0016e85:	83 ec 0c             	sub    esp,0xc
c0016e88:	31 d2                	xor    edx,edx
c0016e8a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016e91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e93:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016e97:	50                   	push   eax
c0016e98:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016e9c:	56                   	push   esi
c0016e9d:	52                   	push   edx
c0016e9e:	57                   	push   edi
c0016e9f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016ea6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ea9:	83 c4 20             	add    esp,0x20
c0016eac:	85 c0                	test   eax,eax
c0016eae:	74 0a                	je     c0016eba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016eb0:	53                   	push   ebx
c0016eb1:	53                   	push   ebx
c0016eb2:	50                   	push   eax
c0016eb3:	68 1d 5f 02 c0       	push   0xc0025f1d
c0016eb8:	eb 0f                	jmp    c0016ec9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016eba:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ebe:	74 20                	je     c0016ee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016ec0:	51                   	push   ecx
c0016ec1:	51                   	push   ecx
c0016ec2:	6a 00                	push   0x0
c0016ec4:	68 48 5f 02 c0       	push   0xc0025f48
c0016ec9:	e8 2d 5e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016ece:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ed1:	e8 2f 4e ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0016ed6:	83 c4 10             	add    esp,0x10
c0016ed9:	31 c0                	xor    eax,eax
c0016edb:	e9 68 01 00 00       	jmp    c0017048 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016ee0:	fa                   	cli    
c0016ee1:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0016ee7:	e8 da 31 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016eec:	6a 07                	push   0x7
c0016eee:	89 c7                	mov    edi,eax
c0016ef0:	55                   	push   ebp
c0016ef1:	50                   	push   eax
c0016ef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016efa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f00:	e8 77 51 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f05:	83 c4 0c             	add    esp,0xc
c0016f08:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f15:	6a 00                	push   0x0
c0016f17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f1f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f25:	e8 ac 4f ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016f2a:	58                   	pop    eax
c0016f2b:	5a                   	pop    edx
c0016f2c:	68 07 0c 00 00       	push   0xc07
c0016f31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f35:	57                   	push   edi
c0016f36:	89 ef                	mov    edi,ebp
c0016f38:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016f3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f45:	6a 00                	push   0x0
c0016f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f4f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f55:	e8 de 54 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f5a:	b9 00 10 00 00       	mov    ecx,0x1000
c0016f5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f61:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0016f66:	83 c4 20             	add    esp,0x20
c0016f69:	48                   	dec    eax
c0016f6a:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0016f6f:	85 c0                	test   eax,eax
c0016f71:	75 01                	jne    c0016f74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016f73:	fb                   	sti    
c0016f74:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016f7b:	e9 df fe ff ff       	jmp    c0016e5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016f80:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016f83:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016f8b:	0f 86 a9 00 00 00    	jbe    c001703a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f91:	fa                   	cli    
c0016f92:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0016f98:	51                   	push   ecx
c0016f99:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016fa0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fa6:	6a 00                	push   0x0
c0016fa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fb0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fb6:	e8 1b 4f ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016fbb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016fbf:	c1 e6 0c             	shl    esi,0xc
c0016fc2:	01 de                	add    esi,ebx
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	39 de                	cmp    esi,ebx
c0016fc9:	74 61                	je     c001702c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016fcb:	e8 f6 30 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016fd0:	6a 07                	push   0x7
c0016fd2:	89 c7                	mov    edi,eax
c0016fd4:	55                   	push   ebp
c0016fd5:	50                   	push   eax
c0016fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fde:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fe4:	e8 93 50 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016fe9:	58                   	pop    eax
c0016fea:	5a                   	pop    edx
c0016feb:	68 07 0c 00 00       	push   0xc07
c0016ff0:	53                   	push   ebx
c0016ff1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016ff7:	57                   	push   edi
c0016ff8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016fff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017005:	6a 00                	push   0x0
c0017007:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001700c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001700f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017015:	e8 1e 54 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001701a:	83 c4 1c             	add    esp,0x1c
c001701d:	68 00 10 00 00       	push   0x1000
c0017022:	6a 00                	push   0x0
c0017024:	55                   	push   ebp
c0017025:	e8 5a 96 fe ff       	call   c0000684 <memset>
c001702a:	eb 98                	jmp    c0016fc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001702c:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0017031:	48                   	dec    eax
c0017032:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0017037:	75 01                	jne    c001703a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017039:	fb                   	sti    
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	55                   	push   ebp
c001703e:	e8 c2 4c ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0017043:	83 c4 10             	add    esp,0x10
c0017046:	b0 01                	mov    al,0x1
c0017048:	81 c4 2c 10 00 00    	add    esp,0x102c
c001704e:	5b                   	pop    ebx
c001704f:	5e                   	pop    esi
c0017050:	5f                   	pop    edi
c0017051:	5d                   	pop    ebp
c0017052:	c3                   	ret    

c0017053 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017053:	55                   	push   ebp
c0017054:	57                   	push   edi
c0017055:	56                   	push   esi
c0017056:	53                   	push   ebx
c0017057:	83 ec 48             	sub    esp,0x48
c001705a:	68 14 01 00 00       	push   0x114
c001705f:	e8 ab 29 ff ff       	call   c0009a0f <malloc>
c0017064:	83 c4 0c             	add    esp,0xc
c0017067:	89 c6                	mov    esi,eax
c0017069:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001706d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017071:	50                   	push   eax
c0017072:	e8 ef 61 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017077:	58                   	pop    eax
c0017078:	5a                   	pop    edx
c0017079:	6a 01                	push   0x1
c001707b:	56                   	push   esi
c001707c:	e8 a7 62 ff ff       	call   c000d328 <File::open(FileOpenMode)>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	85 c0                	test   eax,eax
c0017086:	0f 85 47 01 00 00    	jne    c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001708c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	6a 34                	push   0x34
c0017099:	e8 71 29 ff ff       	call   c0009a0f <malloc>
c001709e:	89 c3                	mov    ebx,eax
c00170a0:	58                   	pop    eax
c00170a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00170a3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00170a7:	57                   	push   edi
c00170a8:	53                   	push   ebx
c00170a9:	6a 00                	push   0x0
c00170ab:	6a 34                	push   0x34
c00170ad:	56                   	push   esi
c00170ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170b1:	83 c4 20             	add    esp,0x20
c00170b4:	85 c0                	test   eax,eax
c00170b6:	0f 85 17 01 00 00    	jne    c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170bc:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00170c2:	0f 85 0b 01 00 00    	jne    c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00170cb:	85 c0                	test   eax,eax
c00170cd:	0f 84 00 01 00 00    	je     c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170d3:	31 d2                	xor    edx,edx
c00170d5:	55                   	push   ebp
c00170d6:	52                   	push   edx
c00170d7:	50                   	push   eax
c00170d8:	56                   	push   esi
c00170d9:	e8 08 63 ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	85 c0                	test   eax,eax
c00170e3:	0f 85 ea 00 00 00    	jne    c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170e9:	83 ec 0c             	sub    esp,0xc
c00170ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170ef:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170f7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170fb:	0f af c2             	imul   eax,edx
c00170fe:	50                   	push   eax
c00170ff:	e8 0b 29 ff ff       	call   c0009a0f <malloc>
c0017104:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001710a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001710d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017111:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017115:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017119:	0f af c2             	imul   eax,edx
c001711c:	99                   	cdq    
c001711d:	52                   	push   edx
c001711e:	50                   	push   eax
c001711f:	56                   	push   esi
c0017120:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017123:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017126:	83 c4 20             	add    esp,0x20
c0017129:	85 c0                	test   eax,eax
c001712b:	0f 84 a2 00 00 00    	je     c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017131:	31 d2                	xor    edx,edx
c0017133:	51                   	push   ecx
c0017134:	52                   	push   edx
c0017135:	50                   	push   eax
c0017136:	56                   	push   esi
c0017137:	e8 aa 62 ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	85 c0                	test   eax,eax
c0017141:	0f 85 8c 00 00 00    	jne    c00171d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017147:	83 ec 0c             	sub    esp,0xc
c001714a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001714e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017152:	31 ed                	xor    ebp,ebp
c0017154:	0f af c2             	imul   eax,edx
c0017157:	50                   	push   eax
c0017158:	e8 b2 28 ff ff       	call   c0009a0f <malloc>
c001715d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001715f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017163:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001716a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001716e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017172:	0f af c2             	imul   eax,edx
c0017175:	99                   	cdq    
c0017176:	52                   	push   edx
c0017177:	50                   	push   eax
c0017178:	56                   	push   esi
c0017179:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001717c:	83 c4 20             	add    esp,0x20
c001717f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017187:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001718b:	0f 86 80 00 00 00    	jbe    c0017211 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017191:	0f b7 fd             	movzx  edi,bp
c0017194:	c1 e7 05             	shl    edi,0x5
c0017197:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001719b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001719e:	75 6b                	jne    c001720b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00171a0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00171a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171a7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00171aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171ae:	52                   	push   edx
c00171af:	31 d2                	xor    edx,edx
c00171b1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00171b4:	52                   	push   edx
c00171b5:	50                   	push   eax
c00171b6:	56                   	push   esi
c00171b7:	e8 2a 62 ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	85 c0                	test   eax,eax
c00171c1:	74 17                	je     c00171da <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00171c3:	83 ec 0c             	sub    esp,0xc
c00171c6:	68 74 5f 02 c0       	push   0xc0025f74
c00171cb:	e8 2b 5b ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	31 c0                	xor    eax,eax
c00171d5:	e9 87 00 00 00       	jmp    c0017261 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00171da:	83 ec 0c             	sub    esp,0xc
c00171dd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00171e0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00171e3:	50                   	push   eax
c00171e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00171e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171ec:	56                   	push   esi
c00171ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00171f1:	e8 b3 fb ff ff       	call   c0016da9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00171f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171fa:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00171fe:	83 c4 20             	add    esp,0x20
c0017201:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017205:	73 04                	jae    c001720b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001720b:	45                   	inc    ebp
c001720c:	e9 76 ff ff ff       	jmp    c0017187 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017211:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017215:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017219:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001721d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017223:	83 ec 0c             	sub    esp,0xc
c0017226:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001722c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017231:	05 00 10 00 00       	add    eax,0x1000
c0017236:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001723d:	e8 dd 27 ff ff       	call   c0009a1f <free>
c0017242:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017245:	e8 d5 27 ff ff       	call   c0009a1f <free>
c001724a:	58                   	pop    eax
c001724b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001724f:	e8 cb 27 ff ff       	call   c0009a1f <free>
c0017254:	89 34 24             	mov    DWORD PTR [esp],esi
c0017257:	e8 2a 61 ff ff       	call   c000d386 <File::close()>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	b0 01                	mov    al,0x1
c0017261:	83 c4 3c             	add    esp,0x3c
c0017264:	5b                   	pop    ebx
c0017265:	5e                   	pop    esi
c0017266:	5f                   	pop    edi
c0017267:	5d                   	pop    ebp
c0017268:	c3                   	ret    

c0017269 <Thr::runtimeReferenceHelper()>:
c0017269:	83 ec 18             	sub    esp,0x18
c001726c:	68 7c 5f 02 c0       	push   0xc0025f7c
c0017271:	e8 85 5a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017276:	fa                   	cli    
c0017277:	83 c4 10             	add    esp,0x10
c001727a:	eb fe                	jmp    c001727a <Thr::runtimeReferenceHelper()+0x11>

c001727c <Thr::getAddressOfKernelSymbol(char const*)>:
c001727c:	57                   	push   edi
c001727d:	56                   	push   esi
c001727e:	53                   	push   ebx
c001727f:	31 db                	xor    ebx,ebx
c0017281:	39 1d a0 95 02 c0    	cmp    DWORD PTR ds:0xc00295a0,ebx
c0017287:	7e 3c                	jle    c00172c5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017289:	8b 34 9d 20 95 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6ae0]
c0017290:	31 ff                	xor    edi,edi
c0017292:	39 3c 9d 20 94 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6be0],edi
c0017299:	7e 27                	jle    c00172c2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001729b:	50                   	push   eax
c001729c:	50                   	push   eax
c001729d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00172a3:	03 04 9d a0 94 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6b60]
c00172aa:	50                   	push   eax
c00172ab:	e8 1c 95 fe ff       	call   c00007cc <strcmp>
c00172b0:	83 c4 10             	add    esp,0x10
c00172b3:	85 c0                	test   eax,eax
c00172b5:	75 05                	jne    c00172bc <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00172b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00172ba:	eb 0b                	jmp    c00172c7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00172bc:	83 c6 10             	add    esi,0x10
c00172bf:	47                   	inc    edi
c00172c0:	eb d0                	jmp    c0017292 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00172c2:	43                   	inc    ebx
c00172c3:	eb bc                	jmp    c0017281 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00172c5:	31 c0                	xor    eax,eax
c00172c7:	5b                   	pop    ebx
c00172c8:	5e                   	pop    esi
c00172c9:	5f                   	pop    edi
c00172ca:	c3                   	ret    

c00172cb <Thr::loadKernelSymbolTable(char const*)>:
c00172cb:	55                   	push   ebp
c00172cc:	57                   	push   edi
c00172cd:	56                   	push   esi
c00172ce:	53                   	push   ebx
c00172cf:	83 ec 68             	sub    esp,0x68
c00172d2:	8b 35 f0 95 02 c0    	mov    esi,DWORD PTR ds:0xc00295f0
c00172d8:	68 14 01 00 00       	push   0x114
c00172dd:	e8 2d 27 ff ff       	call   c0009a0f <malloc>
c00172e2:	83 c4 0c             	add    esp,0xc
c00172e5:	89 c3                	mov    ebx,eax
c00172e7:	56                   	push   esi
c00172e8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00172ec:	50                   	push   eax
c00172ed:	e8 74 5f ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00172f2:	5e                   	pop    esi
c00172f3:	5f                   	pop    edi
c00172f4:	6a 01                	push   0x1
c00172f6:	53                   	push   ebx
c00172f7:	e8 2c 60 ff ff       	call   c000d328 <File::open(FileOpenMode)>
c00172fc:	83 c4 10             	add    esp,0x10
c00172ff:	85 c0                	test   eax,eax
c0017301:	74 0a                	je     c001730d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017303:	83 ec 0c             	sub    esp,0xc
c0017306:	68 9e 5f 02 c0       	push   0xc0025f9e
c001730b:	eb 34                	jmp    c0017341 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001730d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017315:	83 ec 0c             	sub    esp,0xc
c0017318:	6a 34                	push   0x34
c001731a:	e8 f0 26 ff ff       	call   c0009a0f <malloc>
c001731f:	59                   	pop    ecx
c0017320:	89 c7                	mov    edi,eax
c0017322:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017326:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017328:	56                   	push   esi
c0017329:	57                   	push   edi
c001732a:	6a 00                	push   0x0
c001732c:	6a 34                	push   0x34
c001732e:	53                   	push   ebx
c001732f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017332:	83 c4 20             	add    esp,0x20
c0017335:	85 c0                	test   eax,eax
c0017337:	74 17                	je     c0017350 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017339:	83 ec 0c             	sub    esp,0xc
c001733c:	68 b5 5f 02 c0       	push   0xc0025fb5
c0017341:	e8 7d d6 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	31 c0                	xor    eax,eax
c001734b:	e9 31 02 00 00       	jmp    c0017581 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017350:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017356:	75 e1                	jne    c0017339 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017358:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001735b:	85 c0                	test   eax,eax
c001735d:	74 da                	je     c0017339 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001735f:	52                   	push   edx
c0017360:	31 d2                	xor    edx,edx
c0017362:	52                   	push   edx
c0017363:	50                   	push   eax
c0017364:	53                   	push   ebx
c0017365:	e8 7c 60 ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c001736a:	83 c4 10             	add    esp,0x10
c001736d:	85 c0                	test   eax,eax
c001736f:	75 c8                	jne    c0017339 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017371:	83 ec 0c             	sub    esp,0xc
c0017374:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017378:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001737c:	31 ed                	xor    ebp,ebp
c001737e:	0f af c2             	imul   eax,edx
c0017381:	50                   	push   eax
c0017382:	e8 88 26 ff ff       	call   c0009a0f <malloc>
c0017387:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017389:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001738d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017394:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017398:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001739c:	0f af c2             	imul   eax,edx
c001739f:	99                   	cdq    
c00173a0:	52                   	push   edx
c00173a1:	50                   	push   eax
c00173a2:	53                   	push   ebx
c00173a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173a6:	83 c4 20             	add    esp,0x20
c00173a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00173b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00173b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173c9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00173cd:	0f 86 aa 00 00 00    	jbe    c001747d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00173d3:	0f b7 f5             	movzx  esi,bp
c00173d6:	6b f6 28             	imul   esi,esi,0x28
c00173d9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00173dd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00173e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173e4:	50                   	push   eax
c00173e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173e9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00173ed:	8b 16                	mov    edx,DWORD PTR [esi]
c00173ef:	6b c0 28             	imul   eax,eax,0x28
c00173f2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00173f6:	89 d0                	mov    eax,edx
c00173f8:	31 d2                	xor    edx,edx
c00173fa:	52                   	push   edx
c00173fb:	50                   	push   eax
c00173fc:	53                   	push   ebx
c00173fd:	e8 e4 5f ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c0017402:	83 c4 0c             	add    esp,0xc
c0017405:	6a 20                	push   0x20
c0017407:	6a 00                	push   0x0
c0017409:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001740d:	52                   	push   edx
c001740e:	e8 71 92 fe ff       	call   c0000684 <memset>
c0017413:	58                   	pop    eax
c0017414:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017416:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001741a:	51                   	push   ecx
c001741b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001741f:	52                   	push   edx
c0017420:	6a 00                	push   0x0
c0017422:	6a 1f                	push   0x1f
c0017424:	53                   	push   ebx
c0017425:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017428:	83 c4 18             	add    esp,0x18
c001742b:	68 cc 5f 02 c0       	push   0xc0025fcc
c0017430:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017434:	52                   	push   edx
c0017435:	e8 92 93 fe ff       	call   c00007cc <strcmp>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	85 c0                	test   eax,eax
c001743f:	75 0f                	jne    c0017450 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017441:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017444:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001744c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017450:	50                   	push   eax
c0017451:	50                   	push   eax
c0017452:	68 d4 5f 02 c0       	push   0xc0025fd4
c0017457:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001745b:	50                   	push   eax
c001745c:	e8 6b 93 fe ff       	call   c00007cc <strcmp>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	85 c0                	test   eax,eax
c0017466:	75 0f                	jne    c0017477 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017468:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001746b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001746f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017473:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017477:	45                   	inc    ebp
c0017478:	e9 4c ff ff ff       	jmp    c00173c9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001747d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017482:	75 10                	jne    c0017494 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017484:	83 ec 0c             	sub    esp,0xc
c0017487:	68 dc 5f 02 c0       	push   0xc0025fdc
c001748c:	e8 32 d5 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017499:	75 10                	jne    c00174ab <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001749b:	83 ec 0c             	sub    esp,0xc
c001749e:	68 dc 5f 02 c0       	push   0xc0025fdc
c00174a3:	e8 1b d5 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	31 d2                	xor    edx,edx
c00174ad:	50                   	push   eax
c00174ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b2:	52                   	push   edx
c00174b3:	50                   	push   eax
c00174b4:	53                   	push   ebx
c00174b5:	e8 2c 5f ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00174ba:	5a                   	pop    edx
c00174bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174bf:	e8 4b 25 ff ff       	call   c0009a0f <malloc>
c00174c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00174c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174cc:	31 c9                	xor    ecx,ecx
c00174ce:	5e                   	pop    esi
c00174cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174d1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00174d5:	55                   	push   ebp
c00174d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174da:	51                   	push   ecx
c00174db:	52                   	push   edx
c00174dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00174e0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00174e4:	53                   	push   ebx
c00174e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174e8:	83 c4 14             	add    esp,0x14
c00174eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174ef:	e8 1b 25 ff ff       	call   c0009a0f <malloc>
c00174f4:	89 c6                	mov    esi,eax
c00174f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174f8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174fb:	56                   	push   esi
c00174fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017500:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017504:	51                   	push   ecx
c0017505:	52                   	push   edx
c0017506:	53                   	push   ebx
c0017507:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001750a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001750e:	8b 15 a0 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295a0
c0017514:	83 c4 1c             	add    esp,0x1c
c0017517:	c1 e8 04             	shr    eax,0x4
c001751a:	89 04 95 20 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6be0],eax
c0017521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017525:	31 d2                	xor    edx,edx
c0017527:	52                   	push   edx
c0017528:	50                   	push   eax
c0017529:	53                   	push   ebx
c001752a:	e8 b7 5e ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c001752f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017531:	31 d2                	xor    edx,edx
c0017533:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017536:	56                   	push   esi
c0017537:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001753b:	52                   	push   edx
c001753c:	50                   	push   eax
c001753d:	53                   	push   ebx
c001753e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017541:	83 c4 14             	add    esp,0x14
c0017544:	53                   	push   ebx
c0017545:	e8 3c 5e ff ff       	call   c000d386 <File::close()>
c001754a:	5d                   	pop    ebp
c001754b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001754f:	e8 cb 24 ff ff       	call   c0009a1f <free>
c0017554:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017557:	e8 c3 24 ff ff       	call   c0009a1f <free>
c001755c:	a1 a0 95 02 c0       	mov    eax,ds:0xc00295a0
c0017561:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017565:	8d 50 01             	lea    edx,[eax+0x1]
c0017568:	89 0c 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],ecx
c001756f:	89 34 85 a0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b60],esi
c0017576:	89 15 a0 95 02 c0    	mov    DWORD PTR ds:0xc00295a0,edx
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	b0 01                	mov    al,0x1
c0017581:	83 c4 5c             	add    esp,0x5c
c0017584:	5b                   	pop    ebx
c0017585:	5e                   	pop    esi
c0017586:	5f                   	pop    edi
c0017587:	5d                   	pop    ebp
c0017588:	c3                   	ret    

c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017589:	55                   	push   ebp
c001758a:	57                   	push   edi
c001758b:	56                   	push   esi
c001758c:	53                   	push   ebx
c001758d:	81 ec 68 03 00 00    	sub    esp,0x368
c0017593:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001759a:	8b 1d f0 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295f0
c00175a0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00175a4:	68 14 01 00 00       	push   0x114
c00175a9:	e8 61 24 ff ff       	call   c0009a0f <malloc>
c00175ae:	83 c4 0c             	add    esp,0xc
c00175b1:	89 c5                	mov    ebp,eax
c00175b3:	53                   	push   ebx
c00175b4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00175bb:	50                   	push   eax
c00175bc:	e8 a5 5c ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00175c1:	5e                   	pop    esi
c00175c2:	5f                   	pop    edi
c00175c3:	6a 01                	push   0x1
c00175c5:	55                   	push   ebp
c00175c6:	e8 5d 5d ff ff       	call   c000d328 <File::open(FileOpenMode)>
c00175cb:	83 c4 10             	add    esp,0x10
c00175ce:	85 c0                	test   eax,eax
c00175d0:	0f 85 a7 06 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175d6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00175de:	83 ec 0c             	sub    esp,0xc
c00175e1:	6a 34                	push   0x34
c00175e3:	e8 27 24 ff ff       	call   c0009a0f <malloc>
c00175e8:	5b                   	pop    ebx
c00175e9:	89 c7                	mov    edi,eax
c00175eb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00175ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175f2:	53                   	push   ebx
c00175f3:	57                   	push   edi
c00175f4:	6a 00                	push   0x0
c00175f6:	6a 34                	push   0x34
c00175f8:	55                   	push   ebp
c00175f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175fc:	83 c4 20             	add    esp,0x20
c00175ff:	85 c0                	test   eax,eax
c0017601:	0f 85 76 06 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017607:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001760d:	0f 85 6a 06 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017613:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017616:	85 c0                	test   eax,eax
c0017618:	0f 84 5f 06 00 00    	je     c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001761e:	31 d2                	xor    edx,edx
c0017620:	51                   	push   ecx
c0017621:	52                   	push   edx
c0017622:	50                   	push   eax
c0017623:	55                   	push   ebp
c0017624:	e8 bd 5d ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	85 c0                	test   eax,eax
c001762e:	0f 85 49 06 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017634:	83 ec 0c             	sub    esp,0xc
c0017637:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001763a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001763e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017642:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017646:	0f af c2             	imul   eax,edx
c0017649:	50                   	push   eax
c001764a:	e8 c0 23 ff ff       	call   c0009a0f <malloc>
c001764f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017652:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001765d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017661:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017665:	0f af c2             	imul   eax,edx
c0017668:	99                   	cdq    
c0017669:	52                   	push   edx
c001766a:	50                   	push   eax
c001766b:	55                   	push   ebp
c001766c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001766f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017672:	83 c4 20             	add    esp,0x20
c0017675:	85 c0                	test   eax,eax
c0017677:	0f 84 00 06 00 00    	je     c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001767d:	52                   	push   edx
c001767e:	31 d2                	xor    edx,edx
c0017680:	52                   	push   edx
c0017681:	50                   	push   eax
c0017682:	55                   	push   ebp
c0017683:	e8 5e 5d ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	85 c0                	test   eax,eax
c001768d:	0f 85 ea 05 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017693:	83 ec 0c             	sub    esp,0xc
c0017696:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001769a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001769e:	31 f6                	xor    esi,esi
c00176a0:	0f af c2             	imul   eax,edx
c00176a3:	50                   	push   eax
c00176a4:	e8 66 23 ff ff       	call   c0009a0f <malloc>
c00176a9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176b7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00176bb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00176bf:	0f af c2             	imul   eax,edx
c00176c2:	99                   	cdq    
c00176c3:	52                   	push   edx
c00176c4:	50                   	push   eax
c00176c5:	55                   	push   ebp
c00176c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176c9:	83 c4 20             	add    esp,0x20
c00176cc:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00176d0:	0f 86 8a 00 00 00    	jbe    c0017760 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00176d6:	0f b7 de             	movzx  ebx,si
c00176d9:	c1 e3 05             	shl    ebx,0x5
c00176dc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00176e0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00176e3:	75 75                	jne    c001775a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00176e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00176e8:	31 d2                	xor    edx,edx
c00176ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f5:	50                   	push   eax
c00176f6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00176f9:	52                   	push   edx
c00176fa:	50                   	push   eax
c00176fb:	55                   	push   ebp
c00176fc:	e8 e5 5c ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	85 c0                	test   eax,eax
c0017706:	0f 85 71 05 00 00    	jne    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001770c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017713:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017716:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001771a:	31 d2                	xor    edx,edx
c001771c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017720:	83 ec 0c             	sub    esp,0xc
c0017723:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017727:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001772e:	50                   	push   eax
c001772f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017737:	52                   	push   edx
c0017738:	50                   	push   eax
c0017739:	55                   	push   ebp
c001773a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001773d:	83 c4 1c             	add    esp,0x1c
c0017740:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017743:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017746:	50                   	push   eax
c0017747:	6a 00                	push   0x0
c0017749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001774d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017751:	50                   	push   eax
c0017752:	e8 2d 8f fe ff       	call   c0000684 <memset>
c0017757:	83 c4 10             	add    esp,0x10
c001775a:	46                   	inc    esi
c001775b:	e9 6c ff ff ff       	jmp    c00176cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017760:	53                   	push   ebx
c0017761:	31 db                	xor    ebx,ebx
c0017763:	68 00 01 00 00       	push   0x100
c0017768:	6a 00                	push   0x0
c001776a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001776e:	50                   	push   eax
c001776f:	e8 10 8f fe ff       	call   c0000684 <memset>
c0017774:	83 c4 0c             	add    esp,0xc
c0017777:	68 00 01 00 00       	push   0x100
c001777c:	6a 00                	push   0x0
c001777e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017785:	50                   	push   eax
c0017786:	e8 f9 8e fe ff       	call   c0000684 <memset>
c001778b:	83 c4 10             	add    esp,0x10
c001778e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017796:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001779e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00177a6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00177ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177b6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00177ba:	0f 86 30 01 00 00    	jbe    c00178f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00177c0:	0f b7 f3             	movzx  esi,bx
c00177c3:	6b f6 28             	imul   esi,esi,0x28
c00177c6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00177ca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00177cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177d1:	52                   	push   edx
c00177d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177d6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00177da:	8b 06                	mov    eax,DWORD PTR [esi]
c00177dc:	6b d2 28             	imul   edx,edx,0x28
c00177df:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00177e3:	31 d2                	xor    edx,edx
c00177e5:	52                   	push   edx
c00177e6:	50                   	push   eax
c00177e7:	55                   	push   ebp
c00177e8:	e8 f9 5b ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00177ed:	83 c4 0c             	add    esp,0xc
c00177f0:	6a 20                	push   0x20
c00177f2:	6a 00                	push   0x0
c00177f4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177fb:	51                   	push   ecx
c00177fc:	e8 83 8e fe ff       	call   c0000684 <memset>
c0017801:	59                   	pop    ecx
c0017802:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017805:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017809:	52                   	push   edx
c001780a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017811:	51                   	push   ecx
c0017812:	6a 00                	push   0x0
c0017814:	6a 1f                	push   0x1f
c0017816:	55                   	push   ebp
c0017817:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001781a:	83 c4 1c             	add    esp,0x1c
c001781d:	6a 09                	push   0x9
c001781f:	68 f6 5f 02 c0       	push   0xc0025ff6
c0017824:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001782b:	51                   	push   ecx
c001782c:	e8 4f 8d fe ff       	call   c0000580 <memcmp>
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	85 c0                	test   eax,eax
c0017836:	75 21                	jne    c0017859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001783c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017840:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017844:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017848:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001784b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017852:	89 d0                	mov    eax,edx
c0017854:	40                   	inc    eax
c0017855:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017859:	50                   	push   eax
c001785a:	6a 09                	push   0x9
c001785c:	68 00 60 02 c0       	push   0xc0026000
c0017861:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017868:	50                   	push   eax
c0017869:	e8 12 8d fe ff       	call   c0000580 <memcmp>
c001786e:	83 c4 10             	add    esp,0x10
c0017871:	85 c0                	test   eax,eax
c0017873:	75 21                	jne    c0017896 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017879:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001787d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017881:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017885:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017888:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001788f:	89 d0                	mov    eax,edx
c0017891:	40                   	inc    eax
c0017892:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017896:	50                   	push   eax
c0017897:	50                   	push   eax
c0017898:	68 cc 5f 02 c0       	push   0xc0025fcc
c001789d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178a4:	50                   	push   eax
c00178a5:	e8 22 8f fe ff       	call   c00007cc <strcmp>
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	85 c0                	test   eax,eax
c00178af:	75 0f                	jne    c00178c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00178b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178c0:	50                   	push   eax
c00178c1:	50                   	push   eax
c00178c2:	68 d4 5f 02 c0       	push   0xc0025fd4
c00178c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178ce:	50                   	push   eax
c00178cf:	e8 f8 8e fe ff       	call   c00007cc <strcmp>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	85 c0                	test   eax,eax
c00178d9:	75 0f                	jne    c00178ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00178db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178ea:	43                   	inc    ebx
c00178eb:	e9 c6 fe ff ff       	jmp    c00177b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00178f0:	31 d2                	xor    edx,edx
c00178f2:	50                   	push   eax
c00178f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178f7:	52                   	push   edx
c00178f8:	50                   	push   eax
c00178f9:	55                   	push   ebp
c00178fa:	e8 e7 5a ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c00178ff:	58                   	pop    eax
c0017900:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017904:	e8 06 21 ff ff       	call   c0009a0f <malloc>
c0017909:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001790c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017910:	31 d2                	xor    edx,edx
c0017912:	58                   	pop    eax
c0017913:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017917:	53                   	push   ebx
c0017918:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001791c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017920:	52                   	push   edx
c0017921:	50                   	push   eax
c0017922:	55                   	push   ebp
c0017923:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017926:	83 c4 14             	add    esp,0x14
c0017929:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001792d:	e8 dd 20 ff ff       	call   c0009a0f <malloc>
c0017932:	31 d2                	xor    edx,edx
c0017934:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017938:	83 c4 0c             	add    esp,0xc
c001793b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793f:	52                   	push   edx
c0017940:	50                   	push   eax
c0017941:	55                   	push   ebp
c0017942:	e8 9f 5a ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c0017947:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001794a:	31 d2                	xor    edx,edx
c001794c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001794f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017957:	52                   	push   edx
c0017958:	50                   	push   eax
c0017959:	55                   	push   ebp
c001795a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001795d:	83 c4 20             	add    esp,0x20
c0017960:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017968:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001796c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017970:	0f 84 0b 03 00 00    	je     c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017976:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001797d:	31 d2                	xor    edx,edx
c001797f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017983:	c1 e8 03             	shr    eax,0x3
c0017986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001798a:	51                   	push   ecx
c001798b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001798f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017993:	52                   	push   edx
c0017994:	50                   	push   eax
c0017995:	55                   	push   ebp
c0017996:	e8 4b 5a ff ff       	call   c000d3e6 <File::seek(unsigned long long)>
c001799b:	5b                   	pop    ebx
c001799c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00179a7:	e8 63 20 ff ff       	call   c0009a0f <malloc>
c00179ac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00179af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b3:	31 d2                	xor    edx,edx
c00179b5:	5e                   	pop    esi
c00179b6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00179ba:	50                   	push   eax
c00179bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00179ca:	52                   	push   edx
c00179cb:	50                   	push   eax
c00179cc:	55                   	push   ebp
c00179cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179d0:	83 c4 20             	add    esp,0x20
c00179d3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179db:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00179df:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00179e3:	0f 8d 7c 02 00 00    	jge    c0017c65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00179e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00179ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00179f6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00179f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a01:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017a05:	89 d8                	mov    eax,ebx
c0017a07:	c1 e8 08             	shr    eax,0x8
c0017a0a:	89 c6                	mov    esi,eax
c0017a0c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a10:	c1 e6 04             	shl    esi,0x4
c0017a13:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017a17:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017a1a:	85 d2                	test   edx,edx
c0017a1c:	0f 85 bf 00 00 00    	jne    c0017ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a29:	03 06                	add    eax,DWORD PTR [esi]
c0017a2b:	50                   	push   eax
c0017a2c:	e8 4b f8 ff ff       	call   c001727c <Thr::getAddressOfKernelSymbol(char const*)>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	89 c2                	mov    edx,eax
c0017a36:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017a3b:	85 c0                	test   eax,eax
c0017a3d:	0f 85 9e 00 00 00    	jne    c0017ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a43:	83 ec 0c             	sub    esp,0xc
c0017a46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a4a:	03 06                	add    eax,DWORD PTR [esi]
c0017a4c:	50                   	push   eax
c0017a4d:	e8 be 0e ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	89 c2                	mov    edx,eax
c0017a57:	85 c0                	test   eax,eax
c0017a59:	0f 85 82 00 00 00    	jne    c0017ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a5f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a63:	50                   	push   eax
c0017a64:	50                   	push   eax
c0017a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a69:	03 06                	add    eax,DWORD PTR [esi]
c0017a6b:	50                   	push   eax
c0017a6c:	68 0a 60 02 c0       	push   0xc002600a
c0017a71:	e8 85 52 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017a76:	58                   	pop    eax
c0017a77:	5a                   	pop    edx
c0017a78:	68 24 60 02 c0       	push   0xc0026024
c0017a7d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a84:	50                   	push   eax
c0017a85:	e8 b6 8c fe ff       	call   c0000740 <strcpy>
c0017a8a:	59                   	pop    ecx
c0017a8b:	58                   	pop    eax
c0017a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a90:	03 06                	add    eax,DWORD PTR [esi]
c0017a92:	50                   	push   eax
c0017a93:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a9a:	50                   	push   eax
c0017a9b:	e8 e0 8d fe ff       	call   c0000880 <strcat>
c0017aa0:	58                   	pop    eax
c0017aa1:	5a                   	pop    edx
c0017aa2:	68 ba 60 02 c0       	push   0xc00260ba
c0017aa7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017aae:	50                   	push   eax
c0017aaf:	e8 cc 8d fe ff       	call   c0000880 <strcat>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017abc:	0f 84 5d 01 00 00    	je     c0017c1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017acc:	50                   	push   eax
c0017acd:	e8 f1 ce ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ad9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017add:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017ae1:	80 fb 01             	cmp    bl,0x1
c0017ae4:	0f 85 88 00 00 00    	jne    c0017b72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017aea:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017af1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017af5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017af9:	01 ce                	add    esi,ecx
c0017afb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b01:	0f 94 c0             	sete   al
c0017b04:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b0a:	0f 94 c3             	sete   bl
c0017b0d:	09 c3                	or     ebx,eax
c0017b0f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b11:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b16:	74 41                	je     c0017b59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017b18:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017b1b:	84 db                	test   bl,bl
c0017b1d:	75 15                	jne    c0017b34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017b1f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b23:	66 83 f8 0c          	cmp    ax,0xc
c0017b27:	76 05                	jbe    c0017b2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017b29:	b8 0c 00 00 00       	mov    eax,0xc
c0017b2e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b32:	76 37                	jbe    c0017b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b34:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017b38:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b3d:	0f 84 dc 00 00 00    	je     c0017c1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b43:	83 ec 0c             	sub    esp,0xc
c0017b46:	68 3b 60 02 c0       	push   0xc002603b
c0017b4b:	e8 73 ce ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017b50:	83 c4 10             	add    esp,0x10
c0017b53:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017b57:	eb 12                	jmp    c0017b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b59:	01 c1                	add    ecx,eax
c0017b5b:	84 db                	test   bl,bl
c0017b5d:	75 0c                	jne    c0017b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b5f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b63:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b67:	77 02                	ja     c0017b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b69:	01 d1                	add    ecx,edx
c0017b6b:	89 0e                	mov    DWORD PTR [esi],ecx
c0017b6d:	e9 ea 00 00 00       	jmp    c0017c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b72:	80 fb 02             	cmp    bl,0x2
c0017b75:	75 7c                	jne    c0017bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017b77:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b7e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017b82:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017b86:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b8c:	74 20                	je     c0017bae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b8e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b94:	74 18                	je     c0017bae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b96:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b9a:	b9 0a 00 00 00       	mov    ecx,0xa
c0017b9f:	66 83 f8 0e          	cmp    ax,0xe
c0017ba3:	77 03                	ja     c0017ba8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017ba5:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017ba8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017bac:	76 1f                	jbe    c0017bcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017bae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017bb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bb7:	74 66                	je     c0017c1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017bb9:	83 ec 0c             	sub    esp,0xc
c0017bbc:	68 57 60 02 c0       	push   0xc0026057
c0017bc1:	e8 fd cd ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bcd:	8b 06                	mov    eax,DWORD PTR [esi]
c0017bcf:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017bd4:	74 13                	je     c0017be9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017bd6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017bda:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017be1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017be5:	01 c8                	add    eax,ecx
c0017be7:	eb 04                	jmp    c0017bed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017be9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017bed:	01 c2                	add    edx,eax
c0017bef:	89 16                	mov    DWORD PTR [esi],edx
c0017bf1:	eb 69                	jmp    c0017c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017bf3:	0f b6 db             	movzx  ebx,bl
c0017bf6:	50                   	push   eax
c0017bf7:	50                   	push   eax
c0017bf8:	53                   	push   ebx
c0017bf9:	68 73 60 02 c0       	push   0xc0026073
c0017bfe:	e8 f8 50 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c0b:	74 12                	je     c0017c1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017c0d:	83 ec 0c             	sub    esp,0xc
c0017c10:	68 7e 60 02 c0       	push   0xc002607e
c0017c15:	e8 a9 cd ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	eb 3d                	jmp    c0017c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	55                   	push   ebp
c0017c23:	e8 5e 57 ff ff       	call   c000d386 <File::close()>
c0017c28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c2b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c31:	59                   	pop    ecx
c0017c32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c36:	e8 e4 1d ff ff       	call   c0009a1f <free>
c0017c3b:	5b                   	pop    ebx
c0017c3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c40:	e8 da 1d ff ff       	call   c0009a1f <free>
c0017c45:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c48:	e8 d2 1d ff ff       	call   c0009a1f <free>
c0017c4d:	5e                   	pop    esi
c0017c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c52:	e8 c8 1d ff ff       	call   c0009a1f <free>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	eb 21                	jmp    c0017c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c5c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017c60:	e9 76 fd ff ff       	jmp    c00179db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017c65:	83 ec 0c             	sub    esp,0xc
c0017c68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c6c:	e8 ae 1d ff ff       	call   c0009a1f <free>
c0017c71:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	e9 eb fc ff ff       	jmp    c0017968 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017c7d:	31 c0                	xor    eax,eax
c0017c7f:	eb 33                	jmp    c0017cb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017c81:	83 ec 0c             	sub    esp,0xc
c0017c84:	55                   	push   ebp
c0017c85:	e8 fc 56 ff ff       	call   c000d386 <File::close()>
c0017c8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c8d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c93:	58                   	pop    eax
c0017c94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c98:	e8 82 1d ff ff       	call   c0009a1f <free>
c0017c9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017ca0:	e8 7a 1d ff ff       	call   c0009a1f <free>
c0017ca5:	5a                   	pop    edx
c0017ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017caa:	e8 70 1d ff ff       	call   c0009a1f <free>
c0017caf:	83 c4 10             	add    esp,0x10
c0017cb2:	b0 01                	mov    al,0x1
c0017cb4:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017cba:	5b                   	pop    ebx
c0017cbb:	5e                   	pop    esi
c0017cbc:	5f                   	pop    edi
c0017cbd:	5d                   	pop    ebp
c0017cbe:	c3                   	ret    

c0017cbf <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017cbf:	56                   	push   esi
c0017cc0:	31 d2                	xor    edx,edx
c0017cc2:	53                   	push   ebx
c0017cc3:	8b 1d 00 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e00
c0017cc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ccd:	39 d3                	cmp    ebx,edx
c0017ccf:	7e 1b                	jle    c0017cec <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017cd1:	8b 04 95 20 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6fe0]
c0017cd8:	39 c8                	cmp    eax,ecx
c0017cda:	77 0d                	ja     c0017ce9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017cdc:	8b 34 95 20 8e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd71e0]
c0017ce3:	01 c6                	add    esi,eax
c0017ce5:	39 ce                	cmp    esi,ecx
c0017ce7:	77 05                	ja     c0017cee <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017ce9:	42                   	inc    edx
c0017cea:	eb e1                	jmp    c0017ccd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017cec:	31 c0                	xor    eax,eax
c0017cee:	5b                   	pop    ebx
c0017cef:	5e                   	pop    esi
c0017cf0:	c3                   	ret    

c0017cf1 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017cf1:	53                   	push   ebx
c0017cf2:	31 c0                	xor    eax,eax
c0017cf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cf8:	8b 1d 00 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e00
c0017cfe:	39 c3                	cmp    ebx,eax
c0017d00:	7e 22                	jle    c0017d24 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017d02:	8b 14 85 20 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0017d09:	39 ca                	cmp    edx,ecx
c0017d0b:	77 14                	ja     c0017d21 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d0d:	03 14 85 20 8e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd71e0]
c0017d14:	39 ca                	cmp    edx,ecx
c0017d16:	76 09                	jbe    c0017d21 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d18:	8b 04 85 20 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6de0]
c0017d1f:	eb 05                	jmp    c0017d26 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017d21:	40                   	inc    eax
c0017d22:	eb da                	jmp    c0017cfe <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017d24:	31 c0                	xor    eax,eax
c0017d26:	5b                   	pop    ebx
c0017d27:	c3                   	ret    

c0017d28 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017d28:	53                   	push   ebx
c0017d29:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d2d:	53                   	push   ebx
c0017d2e:	e8 8c ff ff ff       	call   c0017cbf <Thr::getDriverBaseFromAddress(unsigned long)>
c0017d33:	5a                   	pop    edx
c0017d34:	31 d2                	xor    edx,edx
c0017d36:	85 c0                	test   eax,eax
c0017d38:	74 04                	je     c0017d3e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017d3a:	89 da                	mov    edx,ebx
c0017d3c:	29 c2                	sub    edx,eax
c0017d3e:	89 d0                	mov    eax,edx
c0017d40:	5b                   	pop    ebx
c0017d41:	c3                   	ret    

c0017d42 <Thr::loadDLL(char const*, bool)>:
c0017d42:	55                   	push   ebp
c0017d43:	57                   	push   edi
c0017d44:	56                   	push   esi
c0017d45:	53                   	push   ebx
c0017d46:	81 ec 34 01 00 00    	sub    esp,0x134
c0017d4c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017d53:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017d5a:	56                   	push   esi
c0017d5b:	68 96 60 02 c0       	push   0xc0026096
c0017d60:	e8 96 4f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017d65:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d6c:	e8 9e 1c ff ff       	call   c0009a0f <malloc>
c0017d71:	83 c4 0c             	add    esp,0xc
c0017d74:	89 c3                	mov    ebx,eax
c0017d76:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0017d7c:	56                   	push   esi
c0017d7d:	50                   	push   eax
c0017d7e:	e8 e3 54 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017d83:	83 c4 10             	add    esp,0x10
c0017d86:	85 db                	test   ebx,ebx
c0017d88:	75 3c                	jne    c0017dc6 <Thr::loadDLL(char const*, bool)+0x84>
c0017d8a:	89 f8                	mov    eax,edi
c0017d8c:	84 c0                	test   al,al
c0017d8e:	0f 84 d2 01 00 00    	je     c0017f66 <Thr::loadDLL(char const*, bool)+0x224>
c0017d94:	55                   	push   ebp
c0017d95:	55                   	push   ebp
c0017d96:	68 a7 60 02 c0       	push   0xc00260a7
c0017d9b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017d9f:	55                   	push   ebp
c0017da0:	e8 9b 89 fe ff       	call   c0000740 <strcpy>
c0017da5:	58                   	pop    eax
c0017da6:	5a                   	pop    edx
c0017da7:	56                   	push   esi
c0017da8:	55                   	push   ebp
c0017da9:	e8 d2 8a fe ff       	call   c0000880 <strcat>
c0017dae:	59                   	pop    ecx
c0017daf:	58                   	pop    eax
c0017db0:	68 ba 60 02 c0       	push   0xc00260ba
c0017db5:	55                   	push   ebp
c0017db6:	e8 c5 8a fe ff       	call   c0000880 <strcat>
c0017dbb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017dbe:	e8 00 cc ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017dc3:	83 c4 10             	add    esp,0x10
c0017dc6:	51                   	push   ecx
c0017dc7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017dcb:	50                   	push   eax
c0017dcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017dd0:	50                   	push   eax
c0017dd1:	53                   	push   ebx
c0017dd2:	e8 fd 57 ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c0017dd7:	83 c4 10             	add    esp,0x10
c0017dda:	85 db                	test   ebx,ebx
c0017ddc:	74 0c                	je     c0017dea <Thr::loadDLL(char const*, bool)+0xa8>
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017de3:	53                   	push   ebx
c0017de4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017de7:	83 c4 10             	add    esp,0x10
c0017dea:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017def:	75 0a                	jne    c0017dfb <Thr::loadDLL(char const*, bool)+0xb9>
c0017df1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017df5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017df9:	75 3c                	jne    c0017e37 <Thr::loadDLL(char const*, bool)+0xf5>
c0017dfb:	89 f8                	mov    eax,edi
c0017dfd:	84 c0                	test   al,al
c0017dff:	0f 84 49 01 00 00    	je     c0017f4e <Thr::loadDLL(char const*, bool)+0x20c>
c0017e05:	51                   	push   ecx
c0017e06:	51                   	push   ecx
c0017e07:	68 a7 60 02 c0       	push   0xc00260a7
c0017e0c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017e10:	53                   	push   ebx
c0017e11:	e8 2a 89 fe ff       	call   c0000740 <strcpy>
c0017e16:	5d                   	pop    ebp
c0017e17:	58                   	pop    eax
c0017e18:	56                   	push   esi
c0017e19:	53                   	push   ebx
c0017e1a:	e8 61 8a fe ff       	call   c0000880 <strcat>
c0017e1f:	58                   	pop    eax
c0017e20:	5a                   	pop    edx
c0017e21:	68 ba 60 02 c0       	push   0xc00260ba
c0017e26:	53                   	push   ebx
c0017e27:	e8 54 8a fe ff       	call   c0000880 <strcat>
c0017e2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e2f:	e8 8f cb ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	52                   	push   edx
c0017e38:	6a 03                	push   0x3
c0017e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e42:	05 ff 0f 00 00       	add    eax,0xfff
c0017e47:	83 d2 00             	adc    edx,0x0
c0017e4a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017e4e:	50                   	push   eax
c0017e4f:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c0017e55:	e8 24 43 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0017e5a:	59                   	pop    ecx
c0017e5b:	89 c3                	mov    ebx,eax
c0017e5d:	5d                   	pop    ebp
c0017e5e:	50                   	push   eax
c0017e5f:	68 1e 42 02 c0       	push   0xc002421e
c0017e64:	e8 92 4e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017e69:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e6c:	e8 2f 88 fe ff       	call   c00006a0 <strlen>
c0017e71:	8b 2d 00 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028e00
c0017e77:	40                   	inc    eax
c0017e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e7b:	e8 8f 1b ff ff       	call   c0009a0f <malloc>
c0017e80:	89 04 ad 20 92 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6de0],eax
c0017e87:	58                   	pop    eax
c0017e88:	a1 00 8e 02 c0       	mov    eax,ds:0xc0028e00
c0017e8d:	5a                   	pop    edx
c0017e8e:	56                   	push   esi
c0017e8f:	ff 34 85 20 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6de0]
c0017e96:	e8 a5 88 fe ff       	call   c0000740 <strcpy>
c0017e9b:	a1 00 8e 02 c0       	mov    eax,ds:0xc0028e00
c0017ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea3:	89 1c 85 20 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fe0],ebx
c0017eaa:	89 15 00 8e 02 c0    	mov    DWORD PTR ds:0xc0028e00,edx
c0017eb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb4:	83 c4 0c             	add    esp,0xc
c0017eb7:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0017ebe:	6a 01                	push   0x1
c0017ec0:	53                   	push   ebx
c0017ec1:	56                   	push   esi
c0017ec2:	e8 c2 f6 ff ff       	call   c0017589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017ec7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017ecb:	83 c4 10             	add    esp,0x10
c0017ece:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017ed3:	0f 85 89 00 00 00    	jne    c0017f62 <Thr::loadDLL(char const*, bool)+0x220>
c0017ed9:	89 f8                	mov    eax,edi
c0017edb:	84 c0                	test   al,al
c0017edd:	74 73                	je     c0017f52 <Thr::loadDLL(char const*, bool)+0x210>
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	68 bc 60 02 c0       	push   0xc00260bc
c0017ee7:	e8 d7 ca ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	eb 61                	jmp    c0017f52 <Thr::loadDLL(char const*, bool)+0x210>
c0017ef1:	50                   	push   eax
c0017ef2:	50                   	push   eax
c0017ef3:	89 e8                	mov    eax,ebp
c0017ef5:	c1 e0 0c             	shl    eax,0xc
c0017ef8:	01 d8                	add    eax,ebx
c0017efa:	50                   	push   eax
c0017efb:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c0017f01:	e8 e0 3d ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f0b:	a8 60                	test   al,0x60
c0017f0d:	75 11                	jne    c0017f20 <Thr::loadDLL(char const*, bool)+0x1de>
c0017f0f:	83 ec 0c             	sub    esp,0xc
c0017f12:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f17:	50                   	push   eax
c0017f18:	e8 26 21 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	45                   	inc    ebp
c0017f21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f29:	05 ff 0f 00 00       	add    eax,0xfff
c0017f2e:	bf 00 00 00 00       	mov    edi,0x0
c0017f33:	83 d2 00             	adc    edx,0x0
c0017f36:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017f3a:	c1 ea 0c             	shr    edx,0xc
c0017f3d:	39 c5                	cmp    ebp,eax
c0017f3f:	89 d1                	mov    ecx,edx
c0017f41:	89 f8                	mov    eax,edi
c0017f43:	19 c8                	sbb    eax,ecx
c0017f45:	72 aa                	jb     c0017ef1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017f47:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017f4c:	75 18                	jne    c0017f66 <Thr::loadDLL(char const*, bool)+0x224>
c0017f4e:	31 db                	xor    ebx,ebx
c0017f50:	eb 14                	jmp    c0017f66 <Thr::loadDLL(char const*, bool)+0x224>
c0017f52:	83 ec 0c             	sub    esp,0xc
c0017f55:	68 db 60 02 c0       	push   0xc00260db
c0017f5a:	e8 64 ca ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	31 ed                	xor    ebp,ebp
c0017f64:	eb bb                	jmp    c0017f21 <Thr::loadDLL(char const*, bool)+0x1df>
c0017f66:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f6c:	89 d8                	mov    eax,ebx
c0017f6e:	5b                   	pop    ebx
c0017f6f:	5e                   	pop    esi
c0017f70:	5f                   	pop    edi
c0017f71:	5d                   	pop    ebp
c0017f72:	c3                   	ret    

c0017f73 <Thr::executeDLL(unsigned long, void*)>:
c0017f73:	56                   	push   esi
c0017f74:	53                   	push   ebx
c0017f75:	52                   	push   edx
c0017f76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f7e:	85 db                	test   ebx,ebx
c0017f80:	75 10                	jne    c0017f92 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017f82:	83 ec 0c             	sub    esp,0xc
c0017f85:	68 f7 60 02 c0       	push   0xc00260f7
c0017f8a:	e8 34 ca ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	50                   	push   eax
c0017f93:	50                   	push   eax
c0017f94:	53                   	push   ebx
c0017f95:	68 21 61 02 c0       	push   0xc0026121
c0017f9a:	e8 5c 4d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017f9f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017fa3:	89 d8                	mov    eax,ebx
c0017fa5:	83 c4 14             	add    esp,0x14
c0017fa8:	5b                   	pop    ebx
c0017fa9:	5e                   	pop    esi
c0017faa:	ff e0                	jmp    eax

c0017fac <userModeEntryPoint(void*)>:
c0017fac:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0017fb1:	48                   	dec    eax
c0017fb2:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0017fb7:	75 03                	jne    c0017fbc <userModeEntryPoint(void*)+0x10>
c0017fb9:	fb                   	sti    
c0017fba:	66 90                	xchg   ax,ax
c0017fbc:	fb                   	sti    
c0017fbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017fc5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017fcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fcf:	e9 8b 82 fe ff       	jmp    c000025f <goToUsermode>

c0017fd4 <changeTSS>:
c0017fd4:	83 ec 14             	sub    esp,0x14
c0017fd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fdc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017fdf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017fe4:	c1 e2 15             	shl    edx,0x15
c0017fe7:	29 d0                	sub    eax,edx
c0017fe9:	50                   	push   eax
c0017fea:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0017fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ff5:	05 7c 11 00 00       	add    eax,0x117c
c0017ffa:	50                   	push   eax
c0017ffb:	e8 28 33 ff ff       	call   c000b328 <TSS::setESP(unsigned long)>
c0018000:	83 c4 1c             	add    esp,0x1c
c0018003:	c3                   	ret    

c0018004 <switchToThread(ThreadControlBlock*)>:
c0018004:	57                   	push   edi
c0018005:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c001800a:	56                   	push   esi
c001800b:	85 c0                	test   eax,eax
c001800d:	53                   	push   ebx
c001800e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018012:	0f 85 90 00 00 00    	jne    c00180a8 <switchToThread(ThreadControlBlock*)+0xa4>
c0018018:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c001801b:	3c ff                	cmp    al,0xff
c001801d:	0f 84 81 00 00 00    	je     c00180a4 <switchToThread(ThreadControlBlock*)+0xa0>
c0018023:	0f b6 d0             	movzx  edx,al
c0018026:	b8 00 04 00 00       	mov    eax,0x400
c001802b:	29 d0                	sub    eax,edx
c001802d:	d1 f8                	sar    eax,1
c001802f:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0018032:	66 90                	xchg   ax,ax
c0018034:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0018037:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001803c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018042:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018049:	74 4d                	je     c0018098 <switchToThread(ThreadControlBlock*)+0x94>
c001804b:	0f 31                	rdtsc  
c001804d:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018052:	89 c6                	mov    esi,eax
c0018054:	89 d7                	mov    edi,edx
c0018056:	2b 35 f8 95 02 c0    	sub    esi,DWORD PTR ds:0xc00295f8
c001805c:	89 15 0c 96 02 c0    	mov    DWORD PTR ds:0xc002960c,edx
c0018062:	1b 3d fc 95 02 c0    	sbb    edi,DWORD PTR ds:0xc00295fc
c0018068:	89 35 00 96 02 c0    	mov    DWORD PTR ds:0xc0029600,esi
c001806e:	a3 f8 95 02 c0       	mov    ds:0xc00295f8,eax
c0018073:	89 3d 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,edi
c0018079:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001807f:	89 15 fc 95 02 c0    	mov    DWORD PTR ds:0xc00295fc,edx
c0018085:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018088:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001808b:	01 c6                	add    esi,eax
c001808d:	11 d7                	adc    edi,edx
c001808f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0018092:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0018095:	8d 76 00             	lea    esi,[esi+0x0]
c0018098:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001809c:	5b                   	pop    ebx
c001809d:	5e                   	pop    esi
c001809e:	5f                   	pop    edi
c001809f:	e9 f3 81 fe ff       	jmp    c0000297 <switchToThreadASM>
c00180a4:	31 c0                	xor    eax,eax
c00180a6:	eb 8c                	jmp    c0018034 <switchToThread(ThreadControlBlock*)+0x30>
c00180a8:	5b                   	pop    ebx
c00180a9:	c7 05 c0 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x1
c00180b3:	5e                   	pop    esi
c00180b4:	5f                   	pop    edi
c00180b5:	c3                   	ret    
c00180b6:	66 90                	xchg   ax,ax

c00180b8 <Process::addArgs(char**)>:
c00180b8:	57                   	push   edi
c00180b9:	56                   	push   esi
c00180ba:	53                   	push   ebx
c00180bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00180bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00180c3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00180cd:	85 ff                	test   edi,edi
c00180cf:	74 43                	je     c0018114 <Process::addArgs(char**)+0x5c>
c00180d1:	8b 07                	mov    eax,DWORD PTR [edi]
c00180d3:	85 c0                	test   eax,eax
c00180d5:	74 3d                	je     c0018114 <Process::addArgs(char**)+0x5c>
c00180d7:	31 db                	xor    ebx,ebx
c00180d9:	8d 76 00             	lea    esi,[esi+0x0]
c00180dc:	83 ec 0c             	sub    esp,0xc
c00180df:	50                   	push   eax
c00180e0:	e8 bb 85 fe ff       	call   c00006a0 <strlen>
c00180e5:	40                   	inc    eax
c00180e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00180e9:	e8 21 19 ff ff       	call   c0009a0f <malloc>
c00180ee:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00180f5:	5a                   	pop    edx
c00180f6:	59                   	pop    ecx
c00180f7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00180fa:	43                   	inc    ebx
c00180fb:	50                   	push   eax
c00180fc:	e8 3f 86 fe ff       	call   c0000740 <strcpy>
c0018101:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001810d:	85 c0                	test   eax,eax
c001810f:	75 cb                	jne    c00180dc <Process::addArgs(char**)+0x24>
c0018111:	8d 76 00             	lea    esi,[esi+0x0]
c0018114:	5b                   	pop    ebx
c0018115:	5e                   	pop    esi
c0018116:	5f                   	pop    edi
c0018117:	c3                   	ret    

c0018118 <Process::Process(char const*, Process*, char**)>:
c0018118:	56                   	push   esi
c0018119:	53                   	push   ebx
c001811a:	83 ec 14             	sub    esp,0x14
c001811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018121:	05 0c 02 00 00       	add    eax,0x20c
c0018126:	bb 07 00 00 00       	mov    ebx,0x7
c001812b:	89 c6                	mov    esi,eax
c001812d:	8d 76 00             	lea    esi,[esi+0x0]
c0018130:	85 db                	test   ebx,ebx
c0018132:	78 14                	js     c0018148 <Process::Process(char const*, Process*, char**)+0x30>
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	56                   	push   esi
c0018138:	e8 b3 af 00 00       	call   c00230f0 <ThreadControlBlock::ThreadControlBlock()>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	83 c6 5f             	add    esi,0x5f
c0018143:	4b                   	dec    ebx
c0018144:	eb ea                	jmp    c0018130 <Process::Process(char const*, Process*, char**)+0x18>
c0018146:	66 90                	xchg   ax,ax
c0018148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018153:	83 ec 0c             	sub    esp,0xc
c0018156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001815a:	e8 ed c6 ff ff       	call   c001484c <Krnl::newProcessEnv(Process*)>
c001815f:	83 c4 10             	add    esp,0x10
c0018162:	89 c2                	mov    edx,eax
c0018164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018168:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001816e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018172:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001817b:	a1 d0 7a 02 c0       	mov    eax,ds:0xc0027ad0
c0018180:	8d 50 01             	lea    edx,[eax+0x1]
c0018183:	89 15 d0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ad0,edx
c0018189:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001818d:	89 02                	mov    DWORD PTR [edx],eax
c001818f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001819e:	e8 6c 18 ff ff       	call   c0009a0f <malloc>
c00181a3:	83 c4 10             	add    esp,0x10
c00181a6:	89 c3                	mov    ebx,eax
c00181a8:	83 ec 08             	sub    esp,0x8
c00181ab:	6a 00                	push   0x0
c00181ad:	53                   	push   ebx
c00181ae:	e8 73 43 ff ff       	call   c000c526 <VAS::VAS(bool)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ba:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00181c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00181ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00181dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181e6:	85 c0                	test   eax,eax
c00181e8:	74 42                	je     c001822c <Process::Process(char const*, Process*, char**)+0x114>
c00181ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00181fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018204:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018208:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001820e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018218:	05 0c 01 00 00       	add    eax,0x10c
c001821d:	83 ec 08             	sub    esp,0x8
c0018220:	52                   	push   edx
c0018221:	50                   	push   eax
c0018222:	e8 19 85 fe ff       	call   c0000740 <strcpy>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	eb 64                	jmp    c0018290 <Process::Process(char const*, Process*, char**)+0x178>
c001822c:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001823b:	e8 cf 17 ff ff       	call   c0009a0f <malloc>
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	89 c3                	mov    ebx,eax
c0018245:	83 ec 08             	sub    esp,0x8
c0018248:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001824c:	53                   	push   ebx
c001824d:	e8 ea 2d ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c0018252:	83 c4 10             	add    esp,0x10
c0018255:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018259:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001825f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018263:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018269:	83 ec 0c             	sub    esp,0xc
c001826c:	50                   	push   eax
c001826d:	e8 89 25 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018272:	83 c4 10             	add    esp,0x10
c0018275:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018279:	05 0c 01 00 00       	add    eax,0x10c
c001827e:	83 ec 08             	sub    esp,0x8
c0018281:	68 40 61 02 c0       	push   0xc0026140
c0018286:	50                   	push   eax
c0018287:	e8 b4 84 fe ff       	call   c0000740 <strcpy>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	90                   	nop
c0018290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018294:	83 c0 0c             	add    eax,0xc
c0018297:	83 ec 08             	sub    esp,0x8
c001829a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001829e:	50                   	push   eax
c001829f:	e8 9c 84 fe ff       	call   c0000740 <strcpy>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	83 ec 08             	sub    esp,0x8
c00182aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b2:	e8 01 fe ff ff       	call   c00180b8 <Process::addArgs(char**)>
c00182b7:	83 c4 10             	add    esp,0x10
c00182ba:	83 ec 08             	sub    esp,0x8
c00182bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c5:	e8 89 ed ff ff       	call   c0017053 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00182d5:	83 f0 01             	xor    eax,0x1
c00182d8:	88 c2                	mov    dl,al
c00182da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182de:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00182e4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00182e9:	83 ec 08             	sub    esp,0x8
c00182ec:	50                   	push   eax
c00182ed:	68 98 61 02 c0       	push   0xc0026198
c00182f2:	e8 04 4a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00182f7:	83 c4 10             	add    esp,0x10
c00182fa:	90                   	nop
c00182fb:	83 c4 14             	add    esp,0x14
c00182fe:	5b                   	pop    ebx
c00182ff:	5e                   	pop    esi
c0018300:	c3                   	ret    
c0018301:	90                   	nop
c0018302:	66 90                	xchg   ax,ax

c0018304 <Process::Process(bool, char const*, Process*, char**)>:
c0018304:	56                   	push   esi
c0018305:	53                   	push   ebx
c0018306:	83 ec 24             	sub    esp,0x24
c0018309:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001830d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018311:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018315:	05 0c 02 00 00       	add    eax,0x20c
c001831a:	bb 07 00 00 00       	mov    ebx,0x7
c001831f:	89 c6                	mov    esi,eax
c0018321:	8d 76 00             	lea    esi,[esi+0x0]
c0018324:	85 db                	test   ebx,ebx
c0018326:	78 14                	js     c001833c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018328:	83 ec 0c             	sub    esp,0xc
c001832b:	56                   	push   esi
c001832c:	e8 bf ad 00 00       	call   c00230f0 <ThreadControlBlock::ThreadControlBlock()>
c0018331:	83 c4 10             	add    esp,0x10
c0018334:	83 c6 5f             	add    esi,0x5f
c0018337:	4b                   	dec    ebx
c0018338:	eb ea                	jmp    c0018324 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001833a:	66 90                	xchg   ax,ax
c001833c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018340:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018347:	83 ec 0c             	sub    esp,0xc
c001834a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001834e:	e8 f9 c4 ff ff       	call   c001484c <Krnl::newProcessEnv(Process*)>
c0018353:	83 c4 10             	add    esp,0x10
c0018356:	89 c2                	mov    edx,eax
c0018358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018362:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018366:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001836f:	a1 d0 7a 02 c0       	mov    eax,ds:0xc0027ad0
c0018374:	8d 50 01             	lea    edx,[eax+0x1]
c0018377:	89 15 d0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ad0,edx
c001837d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018381:	89 02                	mov    DWORD PTR [edx],eax
c0018383:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001838b:	83 ec 0c             	sub    esp,0xc
c001838e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018392:	e8 78 16 ff ff       	call   c0009a0f <malloc>
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	89 c3                	mov    ebx,eax
c001839c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00183a1:	83 ec 08             	sub    esp,0x8
c00183a4:	50                   	push   eax
c00183a5:	53                   	push   ebx
c00183a6:	e8 7b 41 ff ff       	call   c000c526 <VAS::VAS(bool)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00183b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183bc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00183c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00183ce:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00183d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183de:	85 c0                	test   eax,eax
c00183e0:	74 42                	je     c0018424 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00183e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183ec:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00183f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183f6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00183fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018400:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018406:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001840c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018410:	05 0c 01 00 00       	add    eax,0x10c
c0018415:	83 ec 08             	sub    esp,0x8
c0018418:	52                   	push   edx
c0018419:	50                   	push   eax
c001841a:	e8 21 83 fe ff       	call   c0000740 <strcpy>
c001841f:	83 c4 10             	add    esp,0x10
c0018422:	eb 64                	jmp    c0018488 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018424:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018433:	e8 d7 15 ff ff       	call   c0009a0f <malloc>
c0018438:	83 c4 10             	add    esp,0x10
c001843b:	89 c3                	mov    ebx,eax
c001843d:	83 ec 08             	sub    esp,0x8
c0018440:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018444:	53                   	push   ebx
c0018445:	e8 f2 2b ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018451:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018461:	83 ec 0c             	sub    esp,0xc
c0018464:	50                   	push   eax
c0018465:	e8 91 23 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018471:	05 0c 01 00 00       	add    eax,0x10c
c0018476:	83 ec 08             	sub    esp,0x8
c0018479:	68 40 61 02 c0       	push   0xc0026140
c001847e:	50                   	push   eax
c001847f:	e8 bc 82 fe ff       	call   c0000740 <strcpy>
c0018484:	83 c4 10             	add    esp,0x10
c0018487:	90                   	nop
c0018488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848c:	83 c0 0c             	add    eax,0xc
c001848f:	83 ec 08             	sub    esp,0x8
c0018492:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018496:	50                   	push   eax
c0018497:	e8 a4 82 fe ff       	call   c0000740 <strcpy>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	83 ec 08             	sub    esp,0x8
c00184a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00184aa:	e8 09 fc ff ff       	call   c00180b8 <Process::addArgs(char**)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	90                   	nop
c00184b3:	83 c4 24             	add    esp,0x24
c00184b6:	5b                   	pop    ebx
c00184b7:	5e                   	pop    esi
c00184b8:	c3                   	ret    
c00184b9:	8d 76 00             	lea    esi,[esi+0x0]

c00184bc <taskStartupFunction>:
c00184bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184c1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00184c4:	c3                   	ret    
c00184c5:	90                   	nop
c00184c6:	66 90                	xchg   ax,ax

c00184c8 <Semaphore::Semaphore(int)>:
c00184c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d0:	89 10                	mov    DWORD PTR [eax],edx
c00184d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00184dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00184e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184f3:	90                   	nop
c00184f4:	c3                   	ret    
c00184f5:	90                   	nop
c00184f6:	66 90                	xchg   ax,ax

c00184f8 <Mutex::Mutex()>:
c00184f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184fc:	6a 01                	push   0x1
c00184fe:	50                   	push   eax
c00184ff:	e8 c4 ff ff ff       	call   c00184c8 <Semaphore::Semaphore(int)>
c0018504:	83 c4 08             	add    esp,0x8
c0018507:	90                   	nop
c0018508:	c3                   	ret    
c0018509:	90                   	nop
c001850a:	66 90                	xchg   ax,ax

c001850c <Process::createThread(void (*)(void*), void*, int)>:
c001850c:	57                   	push   edi
c001850d:	31 c9                	xor    ecx,ecx
c001850f:	56                   	push   esi
c0018510:	53                   	push   ebx
c0018511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018515:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001851c:	89 f2                	mov    edx,esi
c001851e:	66 90                	xchg   ax,ax
c0018520:	0f b7 c2             	movzx  eax,dx
c0018523:	83 e2 01             	and    edx,0x1
c0018526:	74 14                	je     c001853c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018528:	d1 f8                	sar    eax,1
c001852a:	41                   	inc    ecx
c001852b:	89 c2                	mov    edx,eax
c001852d:	83 f9 10             	cmp    ecx,0x10
c0018530:	75 ee                	jne    c0018520 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018532:	31 db                	xor    ebx,ebx
c0018534:	89 d8                	mov    eax,ebx
c0018536:	5b                   	pop    ebx
c0018537:	5e                   	pop    esi
c0018538:	5f                   	pop    edi
c0018539:	c3                   	ret    
c001853a:	66 90                	xchg   ax,ax
c001853c:	b8 01 00 00 00       	mov    eax,0x1
c0018541:	d3 e0                	shl    eax,cl
c0018543:	09 c6                	or     esi,eax
c0018545:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018548:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001854f:	01 c0                	add    eax,eax
c0018551:	01 c8                	add    eax,ecx
c0018553:	8d 04 80             	lea    eax,[eax+eax*4]
c0018556:	01 d8                	add    eax,ebx
c0018558:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001855f:	75 0b                	jne    c001856c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018561:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001856b:	90                   	nop
c001856c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018572:	83 ec 08             	sub    esp,0x8
c0018575:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018578:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001857b:	01 c0                	add    eax,eax
c001857d:	01 c8                	add    eax,ecx
c001857f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018582:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018585:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001858b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018591:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018595:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001859b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00185a1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00185a8:	89 ca                	mov    edx,ecx
c00185aa:	f7 da                	neg    edx
c00185ac:	c1 e2 15             	shl    edx,0x15
c00185af:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00185b5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00185bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185bf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00185c9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00185cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185d3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00185d9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00185e3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00185ed:	53                   	push   ebx
c00185ee:	68 e4 95 02 c0       	push   0xc00295e4
c00185f3:	e8 98 a8 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185f8:	83 c4 10             	add    esp,0x10
c00185fb:	89 d8                	mov    eax,ebx
c00185fd:	5b                   	pop    ebx
c00185fe:	5e                   	pop    esi
c00185ff:	5f                   	pop    edi
c0018600:	c3                   	ret    
c0018601:	90                   	nop
c0018602:	66 90                	xchg   ax,ax

c0018604 <Process::createUserThread()>:
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	68 80 00 00 00       	push   0x80
c001860c:	6a 00                	push   0x0
c001860e:	68 ac 7f 01 c0       	push   0xc0017fac
c0018613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018617:	e8 f0 fe ff ff       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c001861c:	83 c4 1c             	add    esp,0x1c
c001861f:	c3                   	ret    

c0018620 <setupMultitasking(void (*)())>:
c0018620:	56                   	push   esi
c0018621:	53                   	push   ebx
c0018622:	51                   	push   ecx
c0018623:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018627:	eb 13                	jmp    c001863c <setupMultitasking(void (*)())+0x1c>
c0018629:	8d 76 00             	lea    esi,[esi+0x0]
c001862c:	83 ec 0c             	sub    esp,0xc
c001862f:	68 e4 95 02 c0       	push   0xc00295e4
c0018634:	e8 9f a7 00 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	68 e4 95 02 c0       	push   0xc00295e4
c0018644:	e8 6b a7 00 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	84 c0                	test   al,al
c001864e:	74 dc                	je     c001862c <setupMultitasking(void (*)())+0xc>
c0018650:	83 ec 0c             	sub    esp,0xc
c0018653:	68 1f 07 00 00       	push   0x71f
c0018658:	e8 b2 13 ff ff       	call   c0009a0f <malloc>
c001865d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018664:	89 c3                	mov    ebx,eax
c0018666:	6a 00                	push   0x0
c0018668:	68 44 61 02 c0       	push   0xc0026144
c001866d:	6a 01                	push   0x1
c001866f:	50                   	push   eax
c0018670:	e8 8f fc ff ff       	call   c0018304 <Process::Process(bool, char const*, Process*, char**)>
c0018675:	83 c4 14             	add    esp,0x14
c0018678:	89 1d f0 95 02 c0    	mov    DWORD PTR ds:0xc00295f0,ebx
c001867e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018684:	e8 80 24 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0018689:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018691:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001869b:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00186a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186a4:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00186ae:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00186b4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00186ba:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00186c4:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00186ce:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00186d8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00186de:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00186e8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00186ee:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00186f8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00186fe:	58                   	pop    eax
c00186ff:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018705:	5a                   	pop    edx
c0018706:	68 40 61 02 c0       	push   0xc0026140
c001870b:	50                   	push   eax
c001870c:	e8 2f 80 fe ff       	call   c0000740 <strcpy>
c0018711:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018718:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001871c:	83 c4 14             	add    esp,0x14
c001871f:	5b                   	pop    ebx
c0018720:	5e                   	pop    esi
c0018721:	e9 63 7b fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018726:	66 90                	xchg   ax,ax

c0018728 <schedule()>:
c0018728:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c001872d:	85 c0                	test   eax,eax
c001872f:	74 0b                	je     c001873c <schedule()+0x14>
c0018731:	c7 05 c0 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x1
c001873b:	c3                   	ret    
c001873c:	53                   	push   ebx
c001873d:	83 ec 14             	sub    esp,0x14
c0018740:	68 e4 95 02 c0       	push   0xc00295e4
c0018745:	e8 6a a6 00 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001874a:	83 c4 10             	add    esp,0x10
c001874d:	84 c0                	test   al,al
c001874f:	75 3b                	jne    c001878c <schedule()+0x64>
c0018751:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018756:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018759:	4a                   	dec    edx
c001875a:	74 38                	je     c0018794 <schedule()+0x6c>
c001875c:	83 ec 0c             	sub    esp,0xc
c001875f:	68 e4 95 02 c0       	push   0xc00295e4
c0018764:	e8 67 a6 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018769:	c7 04 24 e4 95 02 c0 	mov    DWORD PTR [esp],0xc00295e4
c0018770:	89 c3                	mov    ebx,eax
c0018772:	e8 61 a6 00 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018777:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001877e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018781:	e8 7e f8 ff ff       	call   c0018004 <switchToThread(ThreadControlBlock*)>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	83 c4 08             	add    esp,0x8
c001878f:	5b                   	pop    ebx
c0018790:	c3                   	ret    
c0018791:	8d 76 00             	lea    esi,[esi+0x0]
c0018794:	83 ec 08             	sub    esp,0x8
c0018797:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001879e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00187a4:	68 e4 95 02 c0       	push   0xc00295e4
c00187a9:	e8 e2 a6 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187ae:	83 c4 10             	add    esp,0x10
c00187b1:	eb a9                	jmp    c001875c <schedule()+0x34>
c00187b3:	90                   	nop

c00187b4 <Semaphore::tryAcquire()>:
c00187b4:	53                   	push   ebx
c00187b5:	83 ec 08             	sub    esp,0x8
c00187b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187bc:	fa                   	cli    
c00187bd:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00187c2:	8d 50 01             	lea    edx,[eax+0x1]
c00187c5:	89 15 c8 95 02 c0    	mov    DWORD PTR ds:0xc00295c8,edx
c00187cb:	8b 15 c4 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295c4
c00187d1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00187d4:	89 1d c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,ebx
c00187da:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00187dd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00187df:	7c 33                	jl     c0018814 <Semaphore::tryAcquire()+0x60>
c00187e1:	89 15 c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,edx
c00187e7:	85 d2                	test   edx,edx
c00187e9:	75 0d                	jne    c00187f8 <Semaphore::tryAcquire()+0x44>
c00187eb:	8b 15 c0 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295c0
c00187f1:	85 d2                	test   edx,edx
c00187f3:	75 6b                	jne    c0018860 <Semaphore::tryAcquire()+0xac>
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00187fd:	85 c0                	test   eax,eax
c00187ff:	74 0b                	je     c001880c <Semaphore::tryAcquire()+0x58>
c0018801:	8d 76 00             	lea    esi,[esi+0x0]
c0018804:	31 c0                	xor    eax,eax
c0018806:	83 c4 08             	add    esp,0x8
c0018809:	5b                   	pop    ebx
c001880a:	c3                   	ret    
c001880b:	90                   	nop
c001880c:	fb                   	sti    
c001880d:	83 c4 08             	add    esp,0x8
c0018810:	5b                   	pop    ebx
c0018811:	c3                   	ret    
c0018812:	66 90                	xchg   ax,ax
c0018814:	43                   	inc    ebx
c0018815:	89 15 c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,edx
c001881b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001881e:	85 d2                	test   edx,edx
c0018820:	75 22                	jne    c0018844 <Semaphore::tryAcquire()+0x90>
c0018822:	8b 0d c0 95 02 c0    	mov    ecx,DWORD PTR ds:0xc00295c0
c0018828:	85 c9                	test   ecx,ecx
c001882a:	74 18                	je     c0018844 <Semaphore::tryAcquire()+0x90>
c001882c:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c0018836:	e8 ed fe ff ff       	call   c0018728 <schedule()>
c001883b:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018840:	48                   	dec    eax
c0018841:	8d 76 00             	lea    esi,[esi+0x0]
c0018844:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018849:	85 c0                	test   eax,eax
c001884b:	75 0b                	jne    c0018858 <Semaphore::tryAcquire()+0xa4>
c001884d:	fb                   	sti    
c001884e:	b0 01                	mov    al,0x1
c0018850:	83 c4 08             	add    esp,0x8
c0018853:	5b                   	pop    ebx
c0018854:	c3                   	ret    
c0018855:	8d 76 00             	lea    esi,[esi+0x0]
c0018858:	b0 01                	mov    al,0x1
c001885a:	83 c4 08             	add    esp,0x8
c001885d:	5b                   	pop    ebx
c001885e:	c3                   	ret    
c001885f:	90                   	nop
c0018860:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c001886a:	e8 b9 fe ff ff       	call   c0018728 <schedule()>
c001886f:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018874:	48                   	dec    eax
c0018875:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c001887a:	85 c0                	test   eax,eax
c001887c:	75 86                	jne    c0018804 <Semaphore::tryAcquire()+0x50>
c001887e:	eb 8c                	jmp    c001880c <Semaphore::tryAcquire()+0x58>

c0018880 <Semaphore::assertLocked(char const*)>:
c0018880:	83 ec 0c             	sub    esp,0xc
c0018883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018887:	fa                   	cli    
c0018888:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c001888e:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0018893:	8d 48 01             	lea    ecx,[eax+0x1]
c0018896:	89 0d c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,ecx
c001889c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001889e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00188a1:	7c 29                	jl     c00188cc <Semaphore::assertLocked(char const*)+0x4c>
c00188a3:	90                   	nop
c00188a4:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c00188a9:	85 c0                	test   eax,eax
c00188ab:	75 0b                	jne    c00188b8 <Semaphore::assertLocked(char const*)+0x38>
c00188ad:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c00188b2:	85 c0                	test   eax,eax
c00188b4:	75 2e                	jne    c00188e4 <Semaphore::assertLocked(char const*)+0x64>
c00188b6:	66 90                	xchg   ax,ax
c00188b8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00188bd:	48                   	dec    eax
c00188be:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00188c3:	75 03                	jne    c00188c8 <Semaphore::assertLocked(char const*)+0x48>
c00188c5:	fb                   	sti    
c00188c6:	66 90                	xchg   ax,ax
c00188c8:	83 c4 0c             	add    esp,0xc
c00188cb:	c3                   	ret    
c00188cc:	83 ec 0c             	sub    esp,0xc
c00188cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00188d3:	e8 eb c0 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00188d8:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	48                   	dec    eax
c00188e1:	eb c1                	jmp    c00188a4 <Semaphore::assertLocked(char const*)+0x24>
c00188e3:	90                   	nop
c00188e4:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c00188ee:	e8 35 fe ff ff       	call   c0018728 <schedule()>
c00188f3:	eb c3                	jmp    c00188b8 <Semaphore::assertLocked(char const*)+0x38>
c00188f5:	8d 76 00             	lea    esi,[esi+0x0]

c00188f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00188f8:	83 ec 0c             	sub    esp,0xc
c00188fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018900:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018904:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018907:	e8 1c fe ff ff       	call   c0018728 <schedule()>
c001890c:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018911:	48                   	dec    eax
c0018912:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018917:	75 03                	jne    c001891c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018919:	fb                   	sti    
c001891a:	66 90                	xchg   ax,ax
c001891c:	83 c4 0c             	add    esp,0xc
c001891f:	c3                   	ret    

c0018920 <blockTask(TaskState)>:
c0018920:	83 ec 0c             	sub    esp,0xc
c0018923:	fa                   	cli    
c0018924:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c001892a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001892e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018933:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018936:	e8 ed fd ff ff       	call   c0018728 <schedule()>
c001893b:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018940:	48                   	dec    eax
c0018941:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018946:	75 04                	jne    c001894c <blockTask(TaskState)+0x2c>
c0018948:	fb                   	sti    
c0018949:	8d 76 00             	lea    esi,[esi+0x0]
c001894c:	83 c4 0c             	add    esp,0xc
c001894f:	c3                   	ret    

c0018950 <waitTask(int, int*, int)>:
c0018950:	83 ec 18             	sub    esp,0x18
c0018953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018958:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001895c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001895f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018968:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001896b:	6a 07                	push   0x7
c001896d:	e8 ae ff ff ff       	call   c0018920 <blockTask(TaskState)>
c0018972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001897d:	85 d2                	test   edx,edx
c001897f:	74 0b                	je     c001898c <waitTask(int, int*, int)+0x3c>
c0018981:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018984:	89 02                	mov    DWORD PTR [edx],eax
c0018986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001898b:	90                   	nop
c001898c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001898f:	83 c4 0c             	add    esp,0xc
c0018992:	c3                   	ret    
c0018993:	90                   	nop

c0018994 <milliTenthSleepUntil(unsigned int)>:
c0018994:	83 ec 0c             	sub    esp,0xc
c0018997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001899b:	39 05 cc 86 02 c0    	cmp    DWORD PTR ds:0xc00286cc,eax
c00189a1:	76 05                	jbe    c00189a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00189a3:	90                   	nop
c00189a4:	83 c4 0c             	add    esp,0xc
c00189a7:	c3                   	ret    
c00189a8:	fa                   	cli    
c00189a9:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00189af:	83 ec 08             	sub    esp,0x8
c00189b2:	ff 05 c4 95 02 c0    	inc    DWORD PTR ds:0xc00295c4
c00189b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189be:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00189c1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00189c7:	68 d8 95 02 c0       	push   0xc00295d8
c00189cc:	e8 bf a4 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189d1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189d8:	e8 43 ff ff ff       	call   c0018920 <blockTask(TaskState)>
c00189dd:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c00189e2:	83 c4 10             	add    esp,0x10
c00189e5:	48                   	dec    eax
c00189e6:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c00189eb:	85 c0                	test   eax,eax
c00189ed:	75 09                	jne    c00189f8 <milliTenthSleepUntil(unsigned int)+0x64>
c00189ef:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c00189f4:	85 c0                	test   eax,eax
c00189f6:	75 14                	jne    c0018a0c <milliTenthSleepUntil(unsigned int)+0x78>
c00189f8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00189fd:	48                   	dec    eax
c00189fe:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018a03:	75 9f                	jne    c00189a4 <milliTenthSleepUntil(unsigned int)+0x10>
c0018a05:	fb                   	sti    
c0018a06:	83 c4 0c             	add    esp,0xc
c0018a09:	c3                   	ret    
c0018a0a:	66 90                	xchg   ax,ax
c0018a0c:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c0018a16:	e8 0d fd ff ff       	call   c0018728 <schedule()>
c0018a1b:	eb db                	jmp    c00189f8 <milliTenthSleepUntil(unsigned int)+0x64>
c0018a1d:	8d 76 00             	lea    esi,[esi+0x0]

c0018a20 <milliTenthSleep(unsigned int)>:
c0018a20:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c0018a25:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018a29:	e9 66 ff ff ff       	jmp    c0018994 <milliTenthSleepUntil(unsigned int)>
c0018a2e:	66 90                	xchg   ax,ax

c0018a30 <sleep(unsigned int)>:
c0018a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a34:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a37:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a3a:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a3d:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a40:	c1 e0 04             	shl    eax,0x4
c0018a43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a47:	eb d7                	jmp    c0018a20 <milliTenthSleep(unsigned int)>
c0018a49:	90                   	nop
c0018a4a:	66 90                	xchg   ax,ax

c0018a4c <Semaphore::acquire()>:
c0018a4c:	83 ec 0c             	sub    esp,0xc
c0018a4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a53:	fa                   	cli    
c0018a54:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0018a59:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018a5f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018a62:	89 0d c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,ecx
c0018a68:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018a6b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018a6d:	7d 2d                	jge    c0018a9c <Semaphore::acquire()+0x50>
c0018a6f:	41                   	inc    ecx
c0018a70:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018a73:	90                   	nop
c0018a74:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c0018a79:	85 c0                	test   eax,eax
c0018a7b:	75 0b                	jne    c0018a88 <Semaphore::acquire()+0x3c>
c0018a7d:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c0018a82:	85 c0                	test   eax,eax
c0018a84:	75 62                	jne    c0018ae8 <Semaphore::acquire()+0x9c>
c0018a86:	66 90                	xchg   ax,ax
c0018a88:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018a8d:	48                   	dec    eax
c0018a8e:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018a93:	75 03                	jne    c0018a98 <Semaphore::acquire()+0x4c>
c0018a95:	fb                   	sti    
c0018a96:	66 90                	xchg   ax,ax
c0018a98:	83 c4 0c             	add    esp,0xc
c0018a9b:	c3                   	ret    
c0018a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aa1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018aa8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018aab:	85 c9                	test   ecx,ecx
c0018aad:	74 4d                	je     c0018afc <Semaphore::acquire()+0xb0>
c0018aaf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018ab2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018ab8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018abb:	90                   	nop
c0018abc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ac1:	83 ec 0c             	sub    esp,0xc
c0018ac4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018ac7:	68 c0 61 02 c0       	push   0xc00261c0
c0018acc:	e8 2a 42 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018ad1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018ad8:	e8 43 fe ff ff       	call   c0018920 <blockTask(TaskState)>
c0018add:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0018ae2:	83 c4 10             	add    esp,0x10
c0018ae5:	48                   	dec    eax
c0018ae6:	eb 8c                	jmp    c0018a74 <Semaphore::acquire()+0x28>
c0018ae8:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c0018af2:	e8 31 fc ff ff       	call   c0018728 <schedule()>
c0018af7:	eb 8f                	jmp    c0018a88 <Semaphore::acquire()+0x3c>
c0018af9:	8d 76 00             	lea    esi,[esi+0x0]
c0018afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b01:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018b04:	eb b6                	jmp    c0018abc <Semaphore::acquire()+0x70>
c0018b06:	66 90                	xchg   ax,ax

c0018b08 <taskReturned>:
c0018b08:	83 ec 18             	sub    esp,0x18
c0018b0b:	68 e0 61 02 c0       	push   0xc00261e0
c0018b10:	e8 ae be ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0018b15:	83 c4 10             	add    esp,0x10
c0018b18:	83 ec 0c             	sub    esp,0xc
c0018b1b:	6a 02                	push   0x2
c0018b1d:	e8 fe fd ff ff       	call   c0018920 <blockTask(TaskState)>
c0018b22:	fa                   	cli    
c0018b23:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018b29:	e8 fa fb ff ff       	call   c0018728 <schedule()>
c0018b2e:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	48                   	dec    eax
c0018b37:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 d8                	jne    c0018b18 <taskReturned+0x10>
c0018b40:	fb                   	sti    
c0018b41:	eb d5                	jmp    c0018b18 <taskReturned+0x10>
c0018b43:	90                   	nop

c0018b44 <Thr::processFromPID(int)>:
c0018b44:	57                   	push   edi
c0018b45:	56                   	push   esi
c0018b46:	53                   	push   ebx
c0018b47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b4b:	fa                   	cli    
c0018b4c:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018b52:	83 ec 0c             	sub    esp,0xc
c0018b55:	68 e4 95 02 c0       	push   0xc00295e4
c0018b5a:	e8 71 a2 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b5f:	83 c4 10             	add    esp,0x10
c0018b62:	89 c7                	mov    edi,eax
c0018b64:	eb 16                	jmp    c0018b7c <Thr::processFromPID(int)+0x38>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	83 ec 0c             	sub    esp,0xc
c0018b6b:	68 e4 95 02 c0       	push   0xc00295e4
c0018b70:	e8 5b a2 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	39 f8                	cmp    eax,edi
c0018b7a:	74 4c                	je     c0018bc8 <Thr::processFromPID(int)+0x84>
c0018b7c:	83 ec 0c             	sub    esp,0xc
c0018b7f:	68 e4 95 02 c0       	push   0xc00295e4
c0018b84:	e8 47 a2 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b89:	c7 04 24 e4 95 02 c0 	mov    DWORD PTR [esp],0xc00295e4
c0018b90:	89 c3                	mov    ebx,eax
c0018b92:	e8 41 a2 00 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b97:	58                   	pop    eax
c0018b98:	5a                   	pop    edx
c0018b99:	53                   	push   ebx
c0018b9a:	68 e4 95 02 c0       	push   0xc00295e4
c0018b9f:	e8 ec a2 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ba4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ba7:	83 c4 10             	add    esp,0x10
c0018baa:	39 30                	cmp    DWORD PTR [eax],esi
c0018bac:	75 ba                	jne    c0018b68 <Thr::processFromPID(int)+0x24>
c0018bae:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018bb3:	48                   	dec    eax
c0018bb4:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018bb9:	74 09                	je     c0018bc4 <Thr::processFromPID(int)+0x80>
c0018bbb:	90                   	nop
c0018bbc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bbf:	5b                   	pop    ebx
c0018bc0:	5e                   	pop    esi
c0018bc1:	5f                   	pop    edi
c0018bc2:	c3                   	ret    
c0018bc3:	90                   	nop
c0018bc4:	fb                   	sti    
c0018bc5:	eb f5                	jmp    c0018bbc <Thr::processFromPID(int)+0x78>
c0018bc7:	90                   	nop
c0018bc8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018bcd:	48                   	dec    eax
c0018bce:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018bd3:	75 07                	jne    c0018bdc <Thr::processFromPID(int)+0x98>
c0018bd5:	fb                   	sti    
c0018bd6:	5b                   	pop    ebx
c0018bd7:	5e                   	pop    esi
c0018bd8:	5f                   	pop    edi
c0018bd9:	c3                   	ret    
c0018bda:	66 90                	xchg   ax,ax
c0018bdc:	5b                   	pop    ebx
c0018bdd:	31 c0                	xor    eax,eax
c0018bdf:	5e                   	pop    esi
c0018be0:	5f                   	pop    edi
c0018be1:	c3                   	ret    
c0018be2:	66 90                	xchg   ax,ax

c0018be4 <unblockTask(ThreadControlBlock*)>:
c0018be4:	53                   	push   ebx
c0018be5:	83 ec 08             	sub    esp,0x8
c0018be8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018bec:	fa                   	cli    
c0018bed:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018bf3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bf6:	85 c0                	test   eax,eax
c0018bf8:	74 66                	je     c0018c60 <unblockTask(ThreadControlBlock*)+0x7c>
c0018bfa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bfd:	48                   	dec    eax
c0018bfe:	74 38                	je     c0018c38 <unblockTask(ThreadControlBlock*)+0x54>
c0018c00:	83 ec 0c             	sub    esp,0xc
c0018c03:	68 e4 95 02 c0       	push   0xc00295e4
c0018c08:	e8 c3 a1 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c0d:	83 c4 10             	add    esp,0x10
c0018c10:	85 c0                	test   eax,eax
c0018c12:	75 1c                	jne    c0018c30 <unblockTask(ThreadControlBlock*)+0x4c>
c0018c14:	eb 5e                	jmp    c0018c74 <unblockTask(ThreadControlBlock*)+0x90>
c0018c16:	66 90                	xchg   ax,ax
c0018c18:	83 ec 08             	sub    esp,0x8
c0018c1b:	50                   	push   eax
c0018c1c:	68 e4 95 02 c0       	push   0xc00295e4
c0018c21:	e8 5a a5 00 00       	call   c0023180 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018c26:	83 c4 10             	add    esp,0x10
c0018c29:	85 c0                	test   eax,eax
c0018c2b:	74 47                	je     c0018c74 <unblockTask(ThreadControlBlock*)+0x90>
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	39 c3                	cmp    ebx,eax
c0018c32:	75 e4                	jne    c0018c18 <unblockTask(ThreadControlBlock*)+0x34>
c0018c34:	eb 12                	jmp    c0018c48 <unblockTask(ThreadControlBlock*)+0x64>
c0018c36:	66 90                	xchg   ax,ax
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	68 62 61 02 c0       	push   0xc0026162
c0018c40:	e8 b6 40 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018c4d:	48                   	dec    eax
c0018c4e:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018c53:	75 03                	jne    c0018c58 <unblockTask(ThreadControlBlock*)+0x74>
c0018c55:	fb                   	sti    
c0018c56:	66 90                	xchg   ax,ax
c0018c58:	83 c4 08             	add    esp,0x8
c0018c5b:	5b                   	pop    ebx
c0018c5c:	c3                   	ret    
c0018c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c60:	83 ec 0c             	sub    esp,0xc
c0018c63:	68 4b 61 02 c0       	push   0xc002614b
c0018c68:	e8 8e 40 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	eb d6                	jmp    c0018c48 <unblockTask(ThreadControlBlock*)+0x64>
c0018c72:	66 90                	xchg   ax,ax
c0018c74:	83 ec 08             	sub    esp,0x8
c0018c77:	53                   	push   ebx
c0018c78:	68 e4 95 02 c0       	push   0xc00295e4
c0018c7d:	e8 0e a2 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c82:	83 c4 10             	add    esp,0x10
c0018c85:	eb c1                	jmp    c0018c48 <unblockTask(ThreadControlBlock*)+0x64>
c0018c87:	90                   	nop

c0018c88 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c88:	55                   	push   ebp
c0018c89:	57                   	push   edi
c0018c8a:	56                   	push   esi
c0018c8b:	53                   	push   ebx
c0018c8c:	83 ec 1c             	sub    esp,0x1c
c0018c8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c93:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c96:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018c9c:	85 ff                	test   edi,edi
c0018c9e:	7e 24                	jle    c0018cc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018ca0:	31 f6                	xor    esi,esi
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018cae:	46                   	inc    esi
c0018caf:	e8 6b 0d ff ff       	call   c0009a1f <free>
c0018cb4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018cc0:	7f e2                	jg     c0018ca4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018cc2:	66 90                	xchg   ax,ax
c0018cc4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018cce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018cd3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018cd6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018cd9:	d3 c0                	rol    eax,cl
c0018cdb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018ce2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ce5:	89 f7                	mov    edi,esi
c0018ce7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018cef:	0f 85 73 01 00 00    	jne    c0018e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018cf5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018cfb:	85 ed                	test   ebp,ebp
c0018cfd:	74 1d                	je     c0018d1c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018cff:	83 ec 0c             	sub    esp,0xc
c0018d02:	55                   	push   ebp
c0018d03:	e8 60 ba ff ff       	call   c0014768 <EnvVarContainer::~EnvVarContainer()>
c0018d08:	59                   	pop    ecx
c0018d09:	5e                   	pop    esi
c0018d0a:	6a 0c                	push   0xc
c0018d0c:	55                   	push   ebp
c0018d0d:	e8 08 3f ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018d12:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d15:	83 c4 10             	add    esp,0x10
c0018d18:	89 f7                	mov    edi,esi
c0018d1a:	66 90                	xchg   ax,ax
c0018d1c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d22:	85 c0                	test   eax,eax
c0018d24:	0f 84 b2 00 00 00    	je     c0018ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d2a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018d2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018d31:	31 c9                	xor    ecx,ecx
c0018d33:	eb 17                	jmp    c0018d4c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018d35:	8d 76 00             	lea    esi,[esi+0x0]
c0018d38:	41                   	inc    ecx
c0018d39:	83 f9 10             	cmp    ecx,0x10
c0018d3c:	0f 84 9a 00 00 00    	je     c0018ddc <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d42:	66 90                	xchg   ax,ax
c0018d44:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d4a:	66 90                	xchg   ax,ax
c0018d4c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018d53:	d3 fa                	sar    edx,cl
c0018d55:	83 e2 01             	and    edx,0x1
c0018d58:	74 de                	je     c0018d38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d5a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018d5d:	01 d2                	add    edx,edx
c0018d5f:	01 ca                	add    edx,ecx
c0018d61:	8d 14 92             	lea    edx,[edx+edx*4]
c0018d64:	01 d0                	add    eax,edx
c0018d66:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018d6c:	83 fd 07             	cmp    ebp,0x7
c0018d6f:	75 c7                	jne    c0018d38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d71:	05 40 02 00 00       	add    eax,0x240
c0018d76:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018d79:	83 fd ff             	cmp    ebp,0xffffffff
c0018d7c:	0f 8c ee 00 00 00    	jl     c0018e70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018d82:	0f 84 ac 01 00 00    	je     c0018f34 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018d88:	85 ed                	test   ebp,ebp
c0018d8a:	0f 84 90 01 00 00    	je     c0018f20 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018d90:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d92:	75 a4                	jne    c0018d38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d94:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d9e:	01 d0                	add    eax,edx
c0018da0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018dad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018db0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018db6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018dbd:	50                   	push   eax
c0018dbe:	e8 21 fe ff ff       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018dc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dcd:	89 f7                	mov    edi,esi
c0018dcf:	41                   	inc    ecx
c0018dd0:	83 f9 10             	cmp    ecx,0x10
c0018dd3:	0f 85 6b ff ff ff    	jne    c0018d44 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ddc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018de2:	85 c0                	test   eax,eax
c0018de4:	74 62                	je     c0018e48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018de6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018dec:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018df2:	74 54                	je     c0018e48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018df4:	83 ec 0c             	sub    esp,0xc
c0018df7:	68 e4 95 02 c0       	push   0xc00295e4
c0018dfc:	e8 cf 9f 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e01:	c7 04 24 e4 95 02 c0 	mov    DWORD PTR [esp],0xc00295e4
c0018e08:	89 c7                	mov    edi,eax
c0018e0a:	e8 a5 9f 00 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e0f:	83 c4 10             	add    esp,0x10
c0018e12:	84 c0                	test   al,al
c0018e14:	0f 84 ce 00 00 00    	je     c0018ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018e1a:	66 90                	xchg   ax,ax
c0018e1c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e1f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018e25:	85 d2                	test   edx,edx
c0018e27:	74 0f                	je     c0018e38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018e29:	83 ec 0c             	sub    esp,0xc
c0018e2c:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e2e:	52                   	push   edx
c0018e2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018e32:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018e42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]
c0018e48:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018e4e:	85 db                	test   ebx,ebx
c0018e50:	74 16                	je     c0018e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018e52:	83 ec 0c             	sub    esp,0xc
c0018e55:	53                   	push   ebx
c0018e56:	e8 a5 30 ff ff       	call   c000bf00 <VAS::~VAS()>
c0018e5b:	58                   	pop    eax
c0018e5c:	5a                   	pop    edx
c0018e5d:	6a 14                	push   0x14
c0018e5f:	53                   	push   ebx
c0018e60:	e8 b5 3d ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	83 c4 1c             	add    esp,0x1c
c0018e6b:	5b                   	pop    ebx
c0018e6c:	5e                   	pop    esi
c0018e6d:	5f                   	pop    edi
c0018e6e:	5d                   	pop    ebp
c0018e6f:	c3                   	ret    
c0018e70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	68 14 62 02 c0       	push   0xc0026214
c0018e7c:	e8 42 bb ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0018e81:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	89 f7                	mov    edi,esi
c0018e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e8d:	e9 a6 fe ff ff       	jmp    c0018d38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018e92:	66 90                	xchg   ax,ax
c0018e94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e9a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018ea0:	75 1e                	jne    c0018ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	68 7c 62 02 c0       	push   0xc002627c
c0018eaa:	e8 4c 3e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018eaf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018eb6:	e8 65 fa ff ff       	call   c0018920 <blockTask(TaskState)>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	66 90                	xchg   ax,ax
c0018ec0:	83 ec 08             	sub    esp,0x8
c0018ec3:	56                   	push   esi
c0018ec4:	68 e4 95 02 c0       	push   0xc00295e4
c0018ec9:	e8 c2 9f 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ece:	c7 04 24 e4 95 02 c0 	mov    DWORD PTR [esp],0xc00295e4
c0018ed5:	e8 f6 9e 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	39 f8                	cmp    eax,edi
c0018edf:	0f 84 37 ff ff ff    	je     c0018e1c <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee8:	83 ec 0c             	sub    esp,0xc
c0018eeb:	68 e4 95 02 c0       	push   0xc00295e4
c0018ef0:	e8 db 9e 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ef5:	c7 04 24 e4 95 02 c0 	mov    DWORD PTR [esp],0xc00295e4
c0018efc:	89 c6                	mov    esi,eax
c0018efe:	e8 d5 9e 00 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	39 f3                	cmp    ebx,esi
c0018f08:	74 b6                	je     c0018ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f0a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018f0d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f10:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018f16:	75 a8                	jne    c0018ec0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f18:	e9 77 ff ff ff       	jmp    c0018e94 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f24:	83 ec 0c             	sub    esp,0xc
c0018f27:	68 48 62 02 c0       	push   0xc0026248
c0018f2c:	e9 4b ff ff ff       	jmp    c0018e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018f31:	8d 76 00             	lea    esi,[esi+0x0]
c0018f34:	8b 36                	mov    esi,DWORD PTR [esi]
c0018f36:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f3a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018f3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f40:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018f46:	01 d7                	add    edi,edx
c0018f48:	89 f8                	mov    eax,edi
c0018f4a:	e9 51 fe ff ff       	jmp    c0018da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018f4f:	90                   	nop

c0018f50 <cleanerTaskFunction(void*)>:
c0018f50:	53                   	push   ebx
c0018f51:	83 ec 08             	sub    esp,0x8
c0018f54:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018f59:	48                   	dec    eax
c0018f5a:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018f5f:	75 03                	jne    c0018f64 <cleanerTaskFunction(void*)+0x14>
c0018f61:	fb                   	sti    
c0018f62:	66 90                	xchg   ax,ax
c0018f64:	fa                   	cli    
c0018f65:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018f6a:	80 3d ac 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295ac,0x0
c0018f71:	8d 50 01             	lea    edx,[eax+0x1]
c0018f74:	89 15 c8 95 02 c0    	mov    DWORD PTR ds:0xc00295c8,edx
c0018f7a:	0f 84 ac 00 00 00    	je     c001902c <cleanerTaskFunction(void*)+0xdc>
c0018f80:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018f85:	85 c0                	test   eax,eax
c0018f87:	75 03                	jne    c0018f8c <cleanerTaskFunction(void*)+0x3c>
c0018f89:	fb                   	sti    
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	c6 05 ac 95 02 c0 00 	mov    BYTE PTR ds:0xc00295ac,0x0
c0018f93:	fa                   	cli    
c0018f94:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018f9a:	ff 05 c4 95 02 c0    	inc    DWORD PTR ds:0xc00295c4
c0018fa0:	fa                   	cli    
c0018fa1:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0018fa7:	eb 2b                	jmp    c0018fd4 <cleanerTaskFunction(void*)+0x84>
c0018fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	68 cc 95 02 c0       	push   0xc00295cc
c0018fb4:	e8 17 9e 00 00       	call   c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fb9:	c7 04 24 cc 95 02 c0 	mov    DWORD PTR [esp],0xc00295cc
c0018fc0:	89 c3                	mov    ebx,eax
c0018fc2:	e8 11 9e 00 00       	call   c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fca:	e8 b9 fc ff ff       	call   c0018c88 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	66 90                	xchg   ax,ax
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	68 cc 95 02 c0       	push   0xc00295cc
c0018fdc:	e8 d3 9d 00 00       	call   c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	84 c0                	test   al,al
c0018fe6:	74 c4                	je     c0018fac <cleanerTaskFunction(void*)+0x5c>
c0018fe8:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0018fed:	48                   	dec    eax
c0018fee:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0018ff3:	75 03                	jne    c0018ff8 <cleanerTaskFunction(void*)+0xa8>
c0018ff5:	fb                   	sti    
c0018ff6:	66 90                	xchg   ax,ax
c0018ff8:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0018ffd:	48                   	dec    eax
c0018ffe:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c0019003:	0f 85 4b ff ff ff    	jne    c0018f54 <cleanerTaskFunction(void*)+0x4>
c0019009:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c001900e:	85 c0                	test   eax,eax
c0019010:	0f 84 3e ff ff ff    	je     c0018f54 <cleanerTaskFunction(void*)+0x4>
c0019016:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c0019020:	e8 03 f7 ff ff       	call   c0018728 <schedule()>
c0019025:	e9 2a ff ff ff       	jmp    c0018f54 <cleanerTaskFunction(void*)+0x4>
c001902a:	66 90                	xchg   ax,ax
c001902c:	83 ec 0c             	sub    esp,0xc
c001902f:	6a 02                	push   0x2
c0019031:	e8 c2 f8 ff ff       	call   c00188f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	e9 4e ff ff ff       	jmp    c0018f8c <cleanerTaskFunction(void*)+0x3c>
c001903e:	66 90                	xchg   ax,ax

c0019040 <terminateTask(int)>:
c0019040:	83 ec 14             	sub    esp,0x14
c0019043:	fa                   	cli    
c0019044:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c001904a:	ff 05 c4 95 02 c0    	inc    DWORD PTR ds:0xc00295c4
c0019050:	fa                   	cli    
c0019051:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0019057:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001905b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019060:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0019063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019068:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001906b:	50                   	push   eax
c001906c:	68 cc 95 02 c0       	push   0xc00295cc
c0019071:	e8 1a 9e 00 00       	call   c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019085:	a1 a8 95 02 c0       	mov    eax,ds:0xc00295a8
c001908a:	85 c0                	test   eax,eax
c001908c:	74 5e                	je     c00190ec <terminateTask(int)+0xac>
c001908e:	83 ec 0c             	sub    esp,0xc
c0019091:	c6 05 ac 95 02 c0 01 	mov    BYTE PTR ds:0xc00295ac,0x1
c0019098:	50                   	push   eax
c0019099:	e8 46 fb ff ff       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c001909e:	83 c4 10             	add    esp,0x10
c00190a1:	8d 76 00             	lea    esi,[esi+0x0]
c00190a4:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00190a9:	48                   	dec    eax
c00190aa:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00190af:	75 03                	jne    c00190b4 <terminateTask(int)+0x74>
c00190b1:	fb                   	sti    
c00190b2:	66 90                	xchg   ax,ax
c00190b4:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c00190b9:	48                   	dec    eax
c00190ba:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c00190bf:	75 0b                	jne    c00190cc <terminateTask(int)+0x8c>
c00190c1:	83 3d c0 95 02 c0 00 	cmp    DWORD PTR ds:0xc00295c0,0x0
c00190c8:	75 36                	jne    c0019100 <terminateTask(int)+0xc0>
c00190ca:	66 90                	xchg   ax,ax
c00190cc:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00190d1:	48                   	dec    eax
c00190d2:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00190d7:	75 03                	jne    c00190dc <terminateTask(int)+0x9c>
c00190d9:	fb                   	sti    
c00190da:	66 90                	xchg   ax,ax
c00190dc:	fa                   	cli    
c00190dd:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00190e3:	90                   	nop
c00190e4:	e8 3f f6 ff ff       	call   c0018728 <schedule()>
c00190e9:	eb e1                	jmp    c00190cc <terminateTask(int)+0x8c>
c00190eb:	90                   	nop
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	68 79 61 02 c0       	push   0xc0026179
c00190f4:	e8 02 3c ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	eb a6                	jmp    c00190a4 <terminateTask(int)+0x64>
c00190fe:	66 90                	xchg   ax,ax
c0019100:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c001910a:	eb d8                	jmp    c00190e4 <terminateTask(int)+0xa4>

c001910c <Thr::terminateFromIRQ(int)>:
c001910c:	83 ec 18             	sub    esp,0x18
c001910f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019113:	e8 28 ff ff ff       	call   c0019040 <terminateTask(int)>

c0019118 <Semaphore::release()>:
c0019118:	83 ec 0c             	sub    esp,0xc
c001911b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001911f:	fa                   	cli    
c0019120:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0019125:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c001912b:	8d 48 01             	lea    ecx,[eax+0x1]
c001912e:	89 0d c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,ecx
c0019134:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019137:	85 c9                	test   ecx,ecx
c0019139:	74 41                	je     c001917c <Semaphore::release()+0x64>
c001913b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001913e:	83 ec 0c             	sub    esp,0xc
c0019141:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019144:	51                   	push   ecx
c0019145:	e8 9a fa ff ff       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c001914a:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	48                   	dec    eax
c0019153:	90                   	nop
c0019154:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c0019159:	85 c0                	test   eax,eax
c001915b:	75 0b                	jne    c0019168 <Semaphore::release()+0x50>
c001915d:	a1 c0 95 02 c0       	mov    eax,ds:0xc00295c0
c0019162:	85 c0                	test   eax,eax
c0019164:	75 1e                	jne    c0019184 <Semaphore::release()+0x6c>
c0019166:	66 90                	xchg   ax,ax
c0019168:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c001916d:	48                   	dec    eax
c001916e:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0019173:	75 03                	jne    c0019178 <Semaphore::release()+0x60>
c0019175:	fb                   	sti    
c0019176:	66 90                	xchg   ax,ax
c0019178:	83 c4 0c             	add    esp,0xc
c001917b:	c3                   	ret    
c001917c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001917f:	eb d3                	jmp    c0019154 <Semaphore::release()+0x3c>
c0019181:	8d 76 00             	lea    esi,[esi+0x0]
c0019184:	c7 05 c0 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295c0,0x0
c001918e:	e8 95 f5 ff ff       	call   c0018728 <schedule()>
c0019193:	eb d3                	jmp    c0019168 <Semaphore::release()+0x50>
c0019195:	8d 76 00             	lea    esi,[esi+0x0]

c0019198 <__static_initialization_and_destruction_0(int, int)>:
c0019198:	83 ec 0c             	sub    esp,0xc
c001919b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00191a0:	0f 85 8e 00 00 00    	jne    c0019234 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00191a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00191ae:	0f 85 80 00 00 00    	jne    c0019234 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	68 e4 95 02 c0       	push   0xc00295e4
c00191bc:	e8 7b 9f 00 00       	call   c002313c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191c1:	83 c4 10             	add    esp,0x10
c00191c4:	83 ec 04             	sub    esp,0x4
c00191c7:	68 08 73 02 c0       	push   0xc0027308
c00191cc:	68 e4 95 02 c0       	push   0xc00295e4
c00191d1:	68 ec 30 02 c0       	push   0xc00230ec
c00191d6:	e8 b9 39 ff ff       	call   c000cb94 <__cxa_atexit>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	83 ec 0c             	sub    esp,0xc
c00191e1:	68 d8 95 02 c0       	push   0xc00295d8
c00191e6:	e8 51 9f 00 00       	call   c002313c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	83 ec 04             	sub    esp,0x4
c00191f1:	68 08 73 02 c0       	push   0xc0027308
c00191f6:	68 d8 95 02 c0       	push   0xc00295d8
c00191fb:	68 ec 30 02 c0       	push   0xc00230ec
c0019200:	e8 8f 39 ff ff       	call   c000cb94 <__cxa_atexit>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	83 ec 0c             	sub    esp,0xc
c001920b:	68 cc 95 02 c0       	push   0xc00295cc
c0019210:	e8 27 9f 00 00       	call   c002313c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	83 ec 04             	sub    esp,0x4
c001921b:	68 08 73 02 c0       	push   0xc0027308
c0019220:	68 cc 95 02 c0       	push   0xc00295cc
c0019225:	68 ec 30 02 c0       	push   0xc00230ec
c001922a:	e8 65 39 ff ff       	call   c000cb94 <__cxa_atexit>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	66 90                	xchg   ax,ax
c0019234:	90                   	nop
c0019235:	83 c4 0c             	add    esp,0xc
c0019238:	c3                   	ret    
c0019239:	8d 76 00             	lea    esi,[esi+0x0]

c001923c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	83 ec 08             	sub    esp,0x8
c0019242:	68 ff ff 00 00       	push   0xffff
c0019247:	6a 01                	push   0x1
c0019249:	e8 4a ff ff ff       	call   c0019198 <__static_initialization_and_destruction_0(int, int)>
c001924e:	83 c4 10             	add    esp,0x10
c0019251:	83 c4 0c             	add    esp,0xc
c0019254:	c3                   	ret    

c0019255 <Vm::inbv(unsigned short)>:
c0019255:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019259:	66 81 fa fe fe       	cmp    dx,0xfefe
c001925e:	75 06                	jne    c0019266 <Vm::inbv(unsigned short)+0x11>
c0019260:	a0 2c 96 02 c0       	mov    al,ds:0xc002962c
c0019265:	c3                   	ret    
c0019266:	ec                   	in     al,dx
c0019267:	c3                   	ret    

c0019268 <Vm::outbv(unsigned short, unsigned char)>:
c0019268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001926c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019270:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019275:	75 25                	jne    c001929c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019277:	8b 0d 2c 96 02 c0    	mov    ecx,DWORD PTR ds:0xc002962c
c001927d:	8d 51 01             	lea    edx,[ecx+0x1]
c0019280:	88 81 40 96 02 c0    	mov    BYTE PTR [ecx-0x3ffd69c0],al
c0019286:	89 15 2c 96 02 c0    	mov    DWORD PTR ds:0xc002962c,edx
c001928c:	83 fa 20             	cmp    edx,0x20
c001928f:	75 0c                	jne    c001929d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019291:	c7 05 2c 96 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002962c,0x1f
c001929b:	c3                   	ret    
c001929c:	ee                   	out    dx,al
c001929d:	c3                   	ret    

c001929e <Vm::realToLinear(unsigned short, unsigned short)>:
c001929e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192a8:	c1 e0 04             	shl    eax,0x4
c00192ab:	01 d0                	add    eax,edx
c00192ad:	c3                   	ret    

c00192ae <Vm::getSegment(unsigned int)>:
c00192ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192b2:	c1 e8 10             	shr    eax,0x10
c00192b5:	c3                   	ret    

c00192b6 <Vm::getOffset(unsigned int)>:
c00192b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192ba:	c3                   	ret    

c00192bb <Vm::mainloop2()>:
c00192bb:	83 ec 18             	sub    esp,0x18
c00192be:	fa                   	cli    
c00192bf:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c00192c5:	6a 02                	push   0x2
c00192c7:	c6 05 25 96 02 c0 01 	mov    BYTE PTR ds:0xc0029625,0x1
c00192ce:	e8 25 f6 ff ff       	call   c00188f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192d8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00192dc:	52                   	push   edx
c00192dd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00192e1:	52                   	push   edx
c00192e2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00192e6:	52                   	push   edx
c00192e7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00192eb:	50                   	push   eax
c00192ec:	e8 3e 6f fe ff       	call   c000022f <goToVM86>
c00192f1:	83 c4 2c             	add    esp,0x2c
c00192f4:	c3                   	ret    

c00192f5 <Vm::mainVm8086Loop(void*)>:
c00192f5:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00192fa:	48                   	dec    eax
c00192fb:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0019300:	75 01                	jne    c0019303 <Vm::mainVm8086Loop(void*)+0xe>
c0019302:	fb                   	sti    
c0019303:	eb b6                	jmp    c00192bb <Vm::mainloop2()>

c0019305 <Vm::mainloop3(unsigned long)>:
c0019305:	83 ec 18             	sub    esp,0x18
c0019308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001930c:	fa                   	cli    
c001930d:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0019313:	6a 02                	push   0x2
c0019315:	c6 05 24 96 02 c0 01 	mov    BYTE PTR ds:0xc0029624,0x1
c001931c:	a3 20 96 02 c0       	mov    ds:0xc0029620,eax
c0019321:	e8 d2 f5 ff ff       	call   c00188f8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019326:	83 c4 1c             	add    esp,0x1c
c0019329:	eb 90                	jmp    c00192bb <Vm::mainloop2()>

c001932b <Vm::initialise8086()>:
c001932b:	83 ec 0c             	sub    esp,0xc
c001932e:	68 80 00 00 00       	push   0x80
c0019333:	6a 00                	push   0x0
c0019335:	68 f5 92 01 c0       	push   0xc00192f5
c001933a:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0019340:	e8 c7 f1 ff ff       	call   c001850c <Process::createThread(void (*)(void*), void*, int)>
c0019345:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001934c:	a3 28 96 02 c0       	mov    ds:0xc0029628,eax
c0019351:	68 00 01 00 00       	push   0x100
c0019356:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c001935b:	6a 00                	push   0x0
c001935d:	6a 00                	push   0x0
c001935f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019365:	e8 08 30 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001936a:	83 c4 2c             	add    esp,0x2c
c001936d:	c3                   	ret    

c001936e <Vm::finish8086()>:
c001936e:	53                   	push   ebx
c001936f:	83 ec 08             	sub    esp,0x8
c0019372:	fa                   	cli    
c0019373:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0019379:	80 3d 24 96 02 c0 00 	cmp    BYTE PTR ds:0xc0029624,0x0
c0019380:	75 15                	jne    c0019397 <Vm::finish8086()+0x29>
c0019382:	e8 a1 f3 ff ff       	call   c0018728 <schedule()>
c0019387:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c001938c:	48                   	dec    eax
c001938d:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0019392:	75 de                	jne    c0019372 <Vm::finish8086()+0x4>
c0019394:	fb                   	sti    
c0019395:	eb db                	jmp    c0019372 <Vm::finish8086()+0x4>
c0019397:	83 ec 0c             	sub    esp,0xc
c001939a:	8b 1d 20 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029620
c00193a0:	ff 35 28 96 02 c0    	push   DWORD PTR ds:0xc0029628
c00193a6:	c6 05 24 96 02 c0 00 	mov    BYTE PTR ds:0xc0029624,0x0
c00193ad:	e8 32 f8 ff ff       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c00193b2:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	8d 50 ff             	lea    edx,[eax-0x1]
c00193bd:	89 15 c8 95 02 c0    	mov    DWORD PTR ds:0xc00295c8,edx
c00193c3:	85 d2                	test   edx,edx
c00193c5:	75 01                	jne    c00193c8 <Vm::finish8086()+0x5a>
c00193c7:	fb                   	sti    
c00193c8:	89 d8                	mov    eax,ebx
c00193ca:	83 c4 08             	add    esp,0x8
c00193cd:	5b                   	pop    ebx
c00193ce:	c3                   	ret    

c00193cf <Vm::getOutput8086(unsigned char*)>:
c00193cf:	57                   	push   edi
c00193d0:	8b 0d 2c 96 02 c0    	mov    ecx,DWORD PTR ds:0xc002962c
c00193d6:	56                   	push   esi
c00193d7:	be 40 96 02 c0       	mov    esi,0xc0029640
c00193dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00193e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193e2:	a1 2c 96 02 c0       	mov    eax,ds:0xc002962c
c00193e7:	5e                   	pop    esi
c00193e8:	c7 05 2c 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002962c,0x0
c00193f2:	5f                   	pop    edi
c00193f3:	c3                   	ret    

c00193f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00193f4:	55                   	push   ebp
c00193f5:	57                   	push   edi
c00193f6:	56                   	push   esi
c00193f7:	53                   	push   ebx
c00193f8:	83 ec 2c             	sub    esp,0x2c
c00193fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00193ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019403:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019407:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001940b:	fa                   	cli    
c001940c:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0019412:	0f b6 35 25 96 02 c0 	movzx  esi,BYTE PTR ds:0xc0029625
c0019419:	89 f0                	mov    eax,esi
c001941b:	84 c0                	test   al,al
c001941d:	75 1d                	jne    c001943c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001941f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019423:	e8 00 f3 ff ff       	call   c0018728 <schedule()>
c0019428:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c001942d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019431:	48                   	dec    eax
c0019432:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0019437:	75 d2                	jne    c001940b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019439:	fb                   	sti    
c001943a:	eb cf                	jmp    c001940b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001943c:	a1 28 96 02 c0       	mov    eax,ds:0xc0029628
c0019441:	c7 05 2c 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002962c,0x0
c001944b:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001944f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019453:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019457:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001945b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001945f:	50                   	push   eax
c0019460:	6a 20                	push   0x20
c0019462:	6a 00                	push   0x0
c0019464:	68 40 96 02 c0       	push   0xc0029640
c0019469:	e8 16 72 fe ff       	call   c0000684 <memset>
c001946e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019475:	e8 95 05 ff ff       	call   c0009a0f <malloc>
c001947a:	83 c4 0c             	add    esp,0xc
c001947d:	89 c3                	mov    ebx,eax
c001947f:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c0019485:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019489:	50                   	push   eax
c001948a:	e8 d7 3d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001948f:	83 c4 10             	add    esp,0x10
c0019492:	85 db                	test   ebx,ebx
c0019494:	75 0a                	jne    c00194a0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	68 a4 62 02 c0       	push   0xc00262a4
c001949e:	eb 3e                	jmp    c00194de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194a0:	50                   	push   eax
c00194a1:	8d 44 24 17          	lea    eax,[esp+0x17]
c00194a5:	50                   	push   eax
c00194a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194aa:	50                   	push   eax
c00194ab:	53                   	push   ebx
c00194ac:	e8 23 41 ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c00194b1:	83 c4 10             	add    esp,0x10
c00194b4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00194b9:	74 0a                	je     c00194c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00194bb:	83 ec 0c             	sub    esp,0xc
c00194be:	68 b8 62 02 c0       	push   0xc00262b8
c00194c3:	eb 19                	jmp    c00194de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194c5:	51                   	push   ecx
c00194c6:	51                   	push   ecx
c00194c7:	6a 01                	push   0x1
c00194c9:	53                   	push   ebx
c00194ca:	e8 59 3e ff ff       	call   c000d328 <File::open(FileOpenMode)>
c00194cf:	83 c4 10             	add    esp,0x10
c00194d2:	85 c0                	test   eax,eax
c00194d4:	74 24                	je     c00194fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00194d6:	83 ec 0c             	sub    esp,0xc
c00194d9:	68 d1 62 02 c0       	push   0xc00262d1
c00194de:	e8 e0 b4 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00194e3:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	48                   	dec    eax
c00194ec:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c00194f1:	85 c0                	test   eax,eax
c00194f3:	75 01                	jne    c00194f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00194f5:	fb                   	sti    
c00194f6:	31 f6                	xor    esi,esi
c00194f8:	eb 58                	jmp    c0019552 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00194fa:	0f b7 ed             	movzx  ebp,bp
c00194fd:	50                   	push   eax
c00194fe:	0f b7 ff             	movzx  edi,di
c0019501:	50                   	push   eax
c0019502:	55                   	push   ebp
c0019503:	57                   	push   edi
c0019504:	e8 95 fd ff ff       	call   c001929e <Vm::realToLinear(unsigned short, unsigned short)>
c0019509:	5a                   	pop    edx
c001950a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001950c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019510:	51                   	push   ecx
c0019511:	50                   	push   eax
c0019512:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019516:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001951a:	53                   	push   ebx
c001951b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001951e:	83 c4 14             	add    esp,0x14
c0019521:	53                   	push   ebx
c0019522:	e8 5f 3e ff ff       	call   c000d386 <File::close()>
c0019527:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	48                   	dec    eax
c0019530:	c6 05 25 96 02 c0 00 	mov    BYTE PTR ds:0xc0029625,0x0
c0019537:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c001953c:	85 c0                	test   eax,eax
c001953e:	75 01                	jne    c0019541 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019540:	fb                   	sti    
c0019541:	83 ec 0c             	sub    esp,0xc
c0019544:	ff 35 28 96 02 c0    	push   DWORD PTR ds:0xc0029628
c001954a:	e8 95 f6 ff ff       	call   c0018be4 <unblockTask(ThreadControlBlock*)>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	83 c4 2c             	add    esp,0x2c
c0019555:	89 f0                	mov    eax,esi
c0019557:	5b                   	pop    ebx
c0019558:	5e                   	pop    esi
c0019559:	5f                   	pop    edi
c001955a:	5d                   	pop    ebp
c001955b:	c3                   	ret    

c001955c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001955c:	57                   	push   edi
c001955d:	56                   	push   esi
c001955e:	53                   	push   ebx
c001955f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019567:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001956b:	83 e8 06             	sub    eax,0x6
c001956e:	0f b7 c0             	movzx  eax,ax
c0019571:	50                   	push   eax
c0019572:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019577:	50                   	push   eax
c0019578:	e8 21 fd ff ff       	call   c001929e <Vm::realToLinear(unsigned short, unsigned short)>
c001957d:	5a                   	pop    edx
c001957e:	5e                   	pop    esi
c001957f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019582:	8d 56 fa             	lea    edx,[esi-0x6]
c0019585:	81 e2 ff ff 00 00    	and    edx,0xffff
c001958b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001958e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019591:	83 c2 02             	add    edx,0x2
c0019594:	66 89 10             	mov    WORD PTR [eax],dx
c0019597:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001959a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001959e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00195a1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00195a5:	89 d6                	mov    esi,edx
c00195a7:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195ad:	66 81 e6 ff fd       	and    si,0xfdff
c00195b2:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00195b6:	74 07                	je     c00195bf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00195b8:	89 d6                	mov    esi,edx
c00195ba:	66 81 ce 00 02       	or     si,0x200
c00195bf:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00195c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195c8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00195cc:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00195d4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00195d7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00195df:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00195e2:	5b                   	pop    ebx
c00195e3:	5e                   	pop    esi
c00195e4:	5f                   	pop    edi
c00195e5:	c3                   	ret    

c00195e6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00195e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195f0:	c1 e0 04             	shl    eax,0x4
c00195f3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00195f6:	c3                   	ret    

c00195f7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00195f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019601:	c1 e0 04             	shl    eax,0x4
c0019604:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019608:	c3                   	ret    

c0019609 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019609:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001960e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019613:	c1 e0 04             	shl    eax,0x4
c0019616:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019619:	c3                   	ret    

c001961a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001961a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001961f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019624:	c1 e0 04             	shl    eax,0x4
c0019627:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001962b:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001962e:	c3                   	ret    

c001962f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001962f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019634:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019639:	c1 e0 04             	shl    eax,0x4
c001963c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019640:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019644:	c3                   	ret    

c0019645 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019645:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001964a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001964f:	c1 e0 04             	shl    eax,0x4
c0019652:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019656:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019659:	c3                   	ret    

c001965a <Vm::faultHandler(regs*)>:
c001965a:	55                   	push   ebp
c001965b:	57                   	push   edi
c001965c:	56                   	push   esi
c001965d:	53                   	push   ebx
c001965e:	83 ec 1c             	sub    esp,0x1c
c0019661:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019665:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019668:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001966c:	0f b7 f8             	movzx  edi,ax
c001966f:	52                   	push   edx
c0019670:	0f b7 c0             	movzx  eax,ax
c0019673:	50                   	push   eax
c0019674:	e8 25 fc ff ff       	call   c001929e <Vm::realToLinear(unsigned short, unsigned short)>
c0019679:	5a                   	pop    edx
c001967a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001967d:	59                   	pop    ecx
c001967e:	89 c1                	mov    ecx,eax
c0019680:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019683:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019687:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001968c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019690:	0f b7 c5             	movzx  eax,bp
c0019693:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019697:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001969b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001969f:	e8 fa fb ff ff       	call   c001929e <Vm::realToLinear(unsigned short, unsigned short)>
c00196a4:	5e                   	pop    esi
c00196a5:	be 06 00 00 00       	mov    esi,0x6
c00196aa:	5a                   	pop    edx
c00196ab:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196b0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00196b5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00196b8:	80 fa 9d             	cmp    dl,0x9d
c00196bb:	0f 84 2c 02 00 00    	je     c00198ed <Vm::faultHandler(regs*)+0x293>
c00196c1:	0f 87 91 00 00 00    	ja     c0019758 <Vm::faultHandler(regs*)+0xfe>
c00196c7:	80 fa 66             	cmp    dl,0x66
c00196ca:	0f 84 98 01 00 00    	je     c0019868 <Vm::faultHandler(regs*)+0x20e>
c00196d0:	77 47                	ja     c0019719 <Vm::faultHandler(regs*)+0xbf>
c00196d2:	80 fa 36             	cmp    dl,0x36
c00196d5:	0f 84 80 01 00 00    	je     c001985b <Vm::faultHandler(regs*)+0x201>
c00196db:	77 1a                	ja     c00196f7 <Vm::faultHandler(regs*)+0x9d>
c00196dd:	80 fa 26             	cmp    dl,0x26
c00196e0:	0f 84 4e 01 00 00    	je     c0019834 <Vm::faultHandler(regs*)+0x1da>
c00196e6:	80 fa 2e             	cmp    dl,0x2e
c00196e9:	0f 85 e2 05 00 00    	jne    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c00196ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196f2:	31 f6                	xor    esi,esi
c00196f4:	41                   	inc    ecx
c00196f5:	eb be                	jmp    c00196b5 <Vm::faultHandler(regs*)+0x5b>
c00196f7:	80 fa 64             	cmp    dl,0x64
c00196fa:	0f 84 41 01 00 00    	je     c0019841 <Vm::faultHandler(regs*)+0x1e7>
c0019700:	0f 87 48 01 00 00    	ja     c001984e <Vm::faultHandler(regs*)+0x1f4>
c0019706:	80 fa 3e             	cmp    dl,0x3e
c0019709:	0f 85 c2 05 00 00    	jne    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c001970f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019712:	be 01 00 00 00       	mov    esi,0x1
c0019717:	eb db                	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019719:	80 fa 6d             	cmp    dl,0x6d
c001971c:	0f 84 ec 02 00 00    	je     c0019a0e <Vm::faultHandler(regs*)+0x3b4>
c0019722:	77 17                	ja     c001973b <Vm::faultHandler(regs*)+0xe1>
c0019724:	80 fa 67             	cmp    dl,0x67
c0019727:	0f 84 48 01 00 00    	je     c0019875 <Vm::faultHandler(regs*)+0x21b>
c001972d:	80 fa 6c             	cmp    dl,0x6c
c0019730:	0f 84 69 02 00 00    	je     c001999f <Vm::faultHandler(regs*)+0x345>
c0019736:	e9 96 05 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c001973b:	80 fa 6f             	cmp    dl,0x6f
c001973e:	0f 84 f4 03 00 00    	je     c0019b38 <Vm::faultHandler(regs*)+0x4de>
c0019744:	0f 82 59 03 00 00    	jb     c0019aa3 <Vm::faultHandler(regs*)+0x449>
c001974a:	80 fa 9c             	cmp    dl,0x9c
c001974d:	0f 84 2f 01 00 00    	je     c0019882 <Vm::faultHandler(regs*)+0x228>
c0019753:	e9 79 05 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c0019758:	80 fa ec             	cmp    dl,0xec
c001975b:	0f 84 14 05 00 00    	je     c0019c75 <Vm::faultHandler(regs*)+0x61b>
c0019761:	77 7b                	ja     c00197de <Vm::faultHandler(regs*)+0x184>
c0019763:	80 fa e4             	cmp    dl,0xe4
c0019766:	0f 84 93 04 00 00    	je     c0019bff <Vm::faultHandler(regs*)+0x5a5>
c001976c:	77 53                	ja     c00197c1 <Vm::faultHandler(regs*)+0x167>
c001976e:	80 fa cd             	cmp    dl,0xcd
c0019771:	0f 84 d9 01 00 00    	je     c0019950 <Vm::faultHandler(regs*)+0x2f6>
c0019777:	80 fa cf             	cmp    dl,0xcf
c001977a:	0f 85 51 05 00 00    	jne    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c0019780:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019783:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019786:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001978a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001978d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019791:	81 ca 00 02 02 00    	or     edx,0x20200
c0019797:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001979a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001979e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197a4:	66 c1 e8 09          	shr    ax,0x9
c00197a8:	83 e0 01             	and    eax,0x1
c00197ab:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197ae:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197b1:	83 c0 06             	add    eax,0x6
c00197b4:	25 ff ff 00 00       	and    eax,0xffff
c00197b9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00197bc:	e9 0c 05 00 00       	jmp    c0019ccd <Vm::faultHandler(regs*)+0x673>
c00197c1:	80 fa e6             	cmp    dl,0xe6
c00197c4:	0f 84 7f 04 00 00    	je     c0019c49 <Vm::faultHandler(regs*)+0x5ef>
c00197ca:	0f 82 4b 04 00 00    	jb     c0019c1b <Vm::faultHandler(regs*)+0x5c1>
c00197d0:	80 fa e7             	cmp    dl,0xe7
c00197d3:	0f 84 87 04 00 00    	je     c0019c60 <Vm::faultHandler(regs*)+0x606>
c00197d9:	e9 f3 04 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c00197de:	80 fa ef             	cmp    dl,0xef
c00197e1:	0f 84 d1 04 00 00    	je     c0019cb8 <Vm::faultHandler(regs*)+0x65e>
c00197e7:	77 28                	ja     c0019811 <Vm::faultHandler(regs*)+0x1b7>
c00197e9:	80 fa ed             	cmp    dl,0xed
c00197ec:	0f 84 9f 04 00 00    	je     c0019c91 <Vm::faultHandler(regs*)+0x637>
c00197f2:	80 fa ee             	cmp    dl,0xee
c00197f5:	0f 85 d6 04 00 00    	jne    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c00197fb:	50                   	push   eax
c00197fc:	50                   	push   eax
c00197fd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019801:	50                   	push   eax
c0019802:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019806:	50                   	push   eax
c0019807:	e8 5c fa ff ff       	call   c0019268 <Vm::outbv(unsigned short, unsigned char)>
c001980c:	e9 9f 04 00 00       	jmp    c0019cb0 <Vm::faultHandler(regs*)+0x656>
c0019811:	80 fa fa             	cmp    dl,0xfa
c0019814:	0f 84 69 01 00 00    	je     c0019983 <Vm::faultHandler(regs*)+0x329>
c001981a:	80 fa fb             	cmp    dl,0xfb
c001981d:	0f 84 6e 01 00 00    	je     c0019991 <Vm::faultHandler(regs*)+0x337>
c0019823:	80 fa f3             	cmp    dl,0xf3
c0019826:	0f 85 a5 04 00 00    	jne    c0019cd1 <Vm::faultHandler(regs*)+0x677>
c001982c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001982f:	e9 c0 fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019834:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019837:	be 02 00 00 00       	mov    esi,0x2
c001983c:	e9 b3 fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019841:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019844:	be 03 00 00 00       	mov    esi,0x3
c0019849:	e9 a6 fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c001984e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019851:	be 04 00 00 00       	mov    esi,0x4
c0019856:	e9 99 fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c001985b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001985e:	be 05 00 00 00       	mov    esi,0x5
c0019863:	e9 8c fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019868:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001986b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019870:	e9 7f fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019875:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019878:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001987d:	e9 72 fe ff ff       	jmp    c00196f4 <Vm::faultHandler(regs*)+0x9a>
c0019882:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019885:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019889:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001988e:	74 30                	je     c00198c0 <Vm::faultHandler(regs*)+0x266>
c0019890:	83 e9 04             	sub    ecx,0x4
c0019893:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019899:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001989f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198a2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198a5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198ab:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198af:	0f 84 15 04 00 00    	je     c0019cca <Vm::faultHandler(regs*)+0x670>
c00198b5:	80 ce 02             	or     dh,0x2
c00198b8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198bb:	e9 0a 04 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c00198c0:	83 e9 02             	sub    ecx,0x2
c00198c3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198c9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198cc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198d0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198d6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198da:	74 05                	je     c00198e1 <Vm::faultHandler(regs*)+0x287>
c00198dc:	80 ce 02             	or     dh,0x2
c00198df:	eb 03                	jmp    c00198e4 <Vm::faultHandler(regs*)+0x28a>
c00198e1:	80 e6 fd             	and    dh,0xfd
c00198e4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198e8:	e9 dd 03 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c00198ed:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198f2:	74 2a                	je     c001991e <Vm::faultHandler(regs*)+0x2c4>
c00198f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00198f6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00198fc:	81 ca 00 02 02 00    	or     edx,0x20200
c0019902:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019905:	8b 00                	mov    eax,DWORD PTR [eax]
c0019907:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001990d:	c1 e8 09             	shr    eax,0x9
c0019910:	83 e0 01             	and    eax,0x1
c0019913:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019916:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019919:	83 c0 04             	add    eax,0x4
c001991c:	eb 25                	jmp    c0019943 <Vm::faultHandler(regs*)+0x2e9>
c001991e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019921:	81 ca 00 02 02 00    	or     edx,0x20200
c0019927:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001992a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001992d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019933:	66 c1 e8 09          	shr    ax,0x9
c0019937:	83 e0 01             	and    eax,0x1
c001993a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001993d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019940:	83 c0 02             	add    eax,0x2
c0019943:	25 ff ff 00 00       	and    eax,0xffff
c0019948:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001994b:	e9 7a 03 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019950:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019954:	3c ee                	cmp    al,0xee
c0019956:	75 10                	jne    c0019968 <Vm::faultHandler(regs*)+0x30e>
c0019958:	83 ec 0c             	sub    esp,0xc
c001995b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001995e:	e8 a2 f9 ff ff       	call   c0019305 <Vm::mainloop3(unsigned long)>
c0019963:	e9 4b 03 00 00       	jmp    c0019cb3 <Vm::faultHandler(regs*)+0x659>
c0019968:	83 ec 0c             	sub    esp,0xc
c001996b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001996f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019973:	51                   	push   ecx
c0019974:	50                   	push   eax
c0019975:	53                   	push   ebx
c0019976:	e8 e1 fb ff ff       	call   c001955c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001997b:	83 c4 20             	add    esp,0x20
c001997e:	e9 4a 03 00 00       	jmp    c0019ccd <Vm::faultHandler(regs*)+0x673>
c0019983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019988:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001998c:	e9 39 03 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019991:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019996:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001999a:	e9 2b 03 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c001999f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00199a2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199a7:	74 2b                	je     c00199d4 <Vm::faultHandler(regs*)+0x37a>
c00199a9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199b0:	76 22                	jbe    c00199d4 <Vm::faultHandler(regs*)+0x37a>
c00199b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199b6:	50                   	push   eax
c00199b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199bb:	50                   	push   eax
c00199bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199c0:	50                   	push   eax
c00199c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199c5:	50                   	push   eax
c00199c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199ca:	50                   	push   eax
c00199cb:	6a 6c                	push   0x6c
c00199cd:	6a 6c                	push   0x6c
c00199cf:	e9 b9 01 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x533>
c00199d4:	83 ec 0c             	sub    esp,0xc
c00199d7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199db:	0f b7 f6             	movzx  esi,si
c00199de:	50                   	push   eax
c00199df:	e8 71 f8 ff ff       	call   c0019255 <Vm::inbv(unsigned short)>
c00199e4:	83 c4 0c             	add    esp,0xc
c00199e7:	0f b6 c0             	movzx  eax,al
c00199ea:	50                   	push   eax
c00199eb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00199ef:	50                   	push   eax
c00199f0:	56                   	push   esi
c00199f1:	e8 24 fc ff ff       	call   c001961a <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00199f6:	83 c4 10             	add    esp,0x10
c00199f9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199fc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a00:	74 03                	je     c0019a05 <Vm::faultHandler(regs*)+0x3ab>
c0019a02:	48                   	dec    eax
c0019a03:	eb 01                	jmp    c0019a06 <Vm::faultHandler(regs*)+0x3ac>
c0019a05:	40                   	inc    eax
c0019a06:	0f b7 c0             	movzx  eax,ax
c0019a09:	e9 8d 00 00 00       	jmp    c0019a9b <Vm::faultHandler(regs*)+0x441>
c0019a0e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a11:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a14:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a19:	74 29                	je     c0019a44 <Vm::faultHandler(regs*)+0x3ea>
c0019a1b:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a20:	76 22                	jbe    c0019a44 <Vm::faultHandler(regs*)+0x3ea>
c0019a22:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a26:	50                   	push   eax
c0019a27:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a2b:	50                   	push   eax
c0019a2c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a30:	50                   	push   eax
c0019a31:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a35:	50                   	push   eax
c0019a36:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a3a:	50                   	push   eax
c0019a3b:	6a 6d                	push   0x6d
c0019a3d:	6a 6d                	push   0x6d
c0019a3f:	e9 49 01 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x533>
c0019a44:	0f b7 c8             	movzx  ecx,ax
c0019a47:	0f b7 f6             	movzx  esi,si
c0019a4a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a4d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a52:	74 20                	je     c0019a74 <Vm::faultHandler(regs*)+0x41a>
c0019a54:	ed                   	in     eax,dx
c0019a55:	55                   	push   ebp
c0019a56:	50                   	push   eax
c0019a57:	51                   	push   ecx
c0019a58:	56                   	push   esi
c0019a59:	e8 e7 fb ff ff       	call   c0019645 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a5e:	83 c4 10             	add    esp,0x10
c0019a61:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a64:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a68:	74 05                	je     c0019a6f <Vm::faultHandler(regs*)+0x415>
c0019a6a:	83 e8 04             	sub    eax,0x4
c0019a6d:	eb 27                	jmp    c0019a96 <Vm::faultHandler(regs*)+0x43c>
c0019a6f:	83 c0 04             	add    eax,0x4
c0019a72:	eb 22                	jmp    c0019a96 <Vm::faultHandler(regs*)+0x43c>
c0019a74:	66 ed                	in     ax,dx
c0019a76:	0f b7 c0             	movzx  eax,ax
c0019a79:	57                   	push   edi
c0019a7a:	50                   	push   eax
c0019a7b:	51                   	push   ecx
c0019a7c:	56                   	push   esi
c0019a7d:	e8 ad fb ff ff       	call   c001962f <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a82:	83 c4 10             	add    esp,0x10
c0019a85:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a88:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a8c:	74 05                	je     c0019a93 <Vm::faultHandler(regs*)+0x439>
c0019a8e:	83 e8 02             	sub    eax,0x2
c0019a91:	eb 03                	jmp    c0019a96 <Vm::faultHandler(regs*)+0x43c>
c0019a93:	83 c0 02             	add    eax,0x2
c0019a96:	25 ff ff 00 00       	and    eax,0xffff
c0019a9b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019a9e:	e9 27 02 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019aa3:	8d 46 ff             	lea    eax,[esi-0x1]
c0019aa6:	3c 05                	cmp    al,0x5
c0019aa8:	77 24                	ja     c0019ace <Vm::faultHandler(regs*)+0x474>
c0019aaa:	0f b6 c0             	movzx  eax,al
c0019aad:	ff 24 85 44 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9cbc]
c0019ab4:	0f b7 fd             	movzx  edi,bp
c0019ab7:	eb 15                	jmp    c0019ace <Vm::faultHandler(regs*)+0x474>
c0019ab9:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019abd:	eb 0f                	jmp    c0019ace <Vm::faultHandler(regs*)+0x474>
c0019abf:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019ac3:	eb 09                	jmp    c0019ace <Vm::faultHandler(regs*)+0x474>
c0019ac5:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019ac9:	eb 03                	jmp    c0019ace <Vm::faultHandler(regs*)+0x474>
c0019acb:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019ace:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ad1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ad6:	74 29                	je     c0019b01 <Vm::faultHandler(regs*)+0x4a7>
c0019ad8:	3d ff ff 00 00       	cmp    eax,0xffff
c0019add:	76 22                	jbe    c0019b01 <Vm::faultHandler(regs*)+0x4a7>
c0019adf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019ae3:	50                   	push   eax
c0019ae4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019ae8:	50                   	push   eax
c0019ae9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019aed:	50                   	push   eax
c0019aee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019af2:	50                   	push   eax
c0019af3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019af7:	50                   	push   eax
c0019af8:	6a 6e                	push   0x6e
c0019afa:	6a 6e                	push   0x6e
c0019afc:	e9 8c 00 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x533>
c0019b01:	0f b7 c0             	movzx  eax,ax
c0019b04:	52                   	push   edx
c0019b05:	52                   	push   edx
c0019b06:	50                   	push   eax
c0019b07:	57                   	push   edi
c0019b08:	e8 d9 fa ff ff       	call   c00195e6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b0d:	59                   	pop    ecx
c0019b0e:	0f b6 c0             	movzx  eax,al
c0019b11:	5e                   	pop    esi
c0019b12:	50                   	push   eax
c0019b13:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b17:	50                   	push   eax
c0019b18:	e8 4b f7 ff ff       	call   c0019268 <Vm::outbv(unsigned short, unsigned char)>
c0019b1d:	83 c4 10             	add    esp,0x10
c0019b20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b23:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b27:	74 03                	je     c0019b2c <Vm::faultHandler(regs*)+0x4d2>
c0019b29:	48                   	dec    eax
c0019b2a:	eb 01                	jmp    c0019b2d <Vm::faultHandler(regs*)+0x4d3>
c0019b2c:	40                   	inc    eax
c0019b2d:	0f b7 c0             	movzx  eax,ax
c0019b30:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b33:	e9 92 01 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019b38:	8d 46 ff             	lea    eax,[esi-0x1]
c0019b3b:	3c 05                	cmp    al,0x5
c0019b3d:	77 1f                	ja     c0019b5e <Vm::faultHandler(regs*)+0x504>
c0019b3f:	0f b6 c0             	movzx  eax,al
c0019b42:	ff 24 85 5c 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9ca4]
c0019b49:	89 ef                	mov    edi,ebp
c0019b4b:	eb 11                	jmp    c0019b5e <Vm::faultHandler(regs*)+0x504>
c0019b4d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019b50:	eb 0c                	jmp    c0019b5e <Vm::faultHandler(regs*)+0x504>
c0019b52:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019b55:	eb 07                	jmp    c0019b5e <Vm::faultHandler(regs*)+0x504>
c0019b57:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019b5a:	eb 02                	jmp    c0019b5e <Vm::faultHandler(regs*)+0x504>
c0019b5c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019b5e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019b61:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b66:	74 37                	je     c0019b9f <Vm::faultHandler(regs*)+0x545>
c0019b68:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019b6e:	76 2f                	jbe    c0019b9f <Vm::faultHandler(regs*)+0x545>
c0019b70:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b74:	50                   	push   eax
c0019b75:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b79:	50                   	push   eax
c0019b7a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b7e:	50                   	push   eax
c0019b7f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019b83:	50                   	push   eax
c0019b84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b88:	50                   	push   eax
c0019b89:	6a 6f                	push   0x6f
c0019b8b:	6a 6f                	push   0x6f
c0019b8d:	68 ea 62 02 c0       	push   0xc00262ea
c0019b92:	e8 64 31 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019b97:	83 c4 20             	add    esp,0x20
c0019b9a:	e9 86 01 00 00       	jmp    c0019d25 <Vm::faultHandler(regs*)+0x6cb>
c0019b9f:	0f b7 d7             	movzx  edx,di
c0019ba2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019ba5:	0f b7 c6             	movzx  eax,si
c0019ba8:	81 e1 00 04 00 00    	and    ecx,0x400
c0019bae:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019bb1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bb6:	74 1d                	je     c0019bd5 <Vm::faultHandler(regs*)+0x57b>
c0019bb8:	55                   	push   ebp
c0019bb9:	55                   	push   ebp
c0019bba:	50                   	push   eax
c0019bbb:	52                   	push   edx
c0019bbc:	e8 48 fa ff ff       	call   c0019609 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019bc1:	83 c4 10             	add    esp,0x10
c0019bc4:	89 fa                	mov    edx,edi
c0019bc6:	ef                   	out    dx,eax
c0019bc7:	85 c9                	test   ecx,ecx
c0019bc9:	74 05                	je     c0019bd0 <Vm::faultHandler(regs*)+0x576>
c0019bcb:	83 ee 04             	sub    esi,0x4
c0019bce:	eb 21                	jmp    c0019bf1 <Vm::faultHandler(regs*)+0x597>
c0019bd0:	83 c6 04             	add    esi,0x4
c0019bd3:	eb 1c                	jmp    c0019bf1 <Vm::faultHandler(regs*)+0x597>
c0019bd5:	55                   	push   ebp
c0019bd6:	55                   	push   ebp
c0019bd7:	50                   	push   eax
c0019bd8:	52                   	push   edx
c0019bd9:	e8 19 fa ff ff       	call   c00195f7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019bde:	83 c4 10             	add    esp,0x10
c0019be1:	89 fa                	mov    edx,edi
c0019be3:	66 ef                	out    dx,ax
c0019be5:	85 c9                	test   ecx,ecx
c0019be7:	74 05                	je     c0019bee <Vm::faultHandler(regs*)+0x594>
c0019be9:	83 ee 02             	sub    esi,0x2
c0019bec:	eb 03                	jmp    c0019bf1 <Vm::faultHandler(regs*)+0x597>
c0019bee:	83 c6 02             	add    esi,0x2
c0019bf1:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019bf7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019bfa:	e9 cb 00 00 00       	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019bff:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c06:	83 ec 0c             	sub    esp,0xc
c0019c09:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c0d:	50                   	push   eax
c0019c0e:	e8 42 f6 ff ff       	call   c0019255 <Vm::inbv(unsigned short)>
c0019c13:	0f b6 c0             	movzx  eax,al
c0019c16:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c19:	eb 3f                	jmp    c0019c5a <Vm::faultHandler(regs*)+0x600>
c0019c1b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c20:	74 07                	je     c0019c29 <Vm::faultHandler(regs*)+0x5cf>
c0019c22:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c26:	ed                   	in     eax,dx
c0019c27:	eb 14                	jmp    c0019c3d <Vm::faultHandler(regs*)+0x5e3>
c0019c29:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019c2c:	66 31 f6             	xor    si,si
c0019c2f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019c32:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c36:	66 ed                	in     ax,dx
c0019c38:	0f b7 c0             	movzx  eax,ax
c0019c3b:	09 f0                	or     eax,esi
c0019c3d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c44:	e9 84 00 00 00       	jmp    c0019ccd <Vm::faultHandler(regs*)+0x673>
c0019c49:	52                   	push   edx
c0019c4a:	52                   	push   edx
c0019c4b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c4f:	50                   	push   eax
c0019c50:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c54:	50                   	push   eax
c0019c55:	e8 0e f6 ff ff       	call   c0019268 <Vm::outbv(unsigned short, unsigned char)>
c0019c5a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c5e:	eb 53                	jmp    c0019cb3 <Vm::faultHandler(regs*)+0x659>
c0019c60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c63:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c67:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c6c:	74 03                	je     c0019c71 <Vm::faultHandler(regs*)+0x617>
c0019c6e:	ef                   	out    dx,eax
c0019c6f:	eb cf                	jmp    c0019c40 <Vm::faultHandler(regs*)+0x5e6>
c0019c71:	66 ef                	out    dx,ax
c0019c73:	eb cb                	jmp    c0019c40 <Vm::faultHandler(regs*)+0x5e6>
c0019c75:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c7c:	83 ec 0c             	sub    esp,0xc
c0019c7f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c83:	50                   	push   eax
c0019c84:	e8 cc f5 ff ff       	call   c0019255 <Vm::inbv(unsigned short)>
c0019c89:	0f b6 c0             	movzx  eax,al
c0019c8c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c8f:	eb 1f                	jmp    c0019cb0 <Vm::faultHandler(regs*)+0x656>
c0019c91:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c99:	74 03                	je     c0019c9e <Vm::faultHandler(regs*)+0x644>
c0019c9b:	ed                   	in     eax,dx
c0019c9c:	eb 0d                	jmp    c0019cab <Vm::faultHandler(regs*)+0x651>
c0019c9e:	66 ed                	in     ax,dx
c0019ca0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019ca3:	0f b7 c0             	movzx  eax,ax
c0019ca6:	66 31 d2             	xor    dx,dx
c0019ca9:	09 d0                	or     eax,edx
c0019cab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019cae:	eb 1a                	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019cb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cb3:	83 c4 10             	add    esp,0x10
c0019cb6:	eb 15                	jmp    c0019ccd <Vm::faultHandler(regs*)+0x673>
c0019cb8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cbb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019cbe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cc3:	74 03                	je     c0019cc8 <Vm::faultHandler(regs*)+0x66e>
c0019cc5:	ef                   	out    dx,eax
c0019cc6:	eb 02                	jmp    c0019cca <Vm::faultHandler(regs*)+0x670>
c0019cc8:	66 ef                	out    dx,ax
c0019cca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ccd:	b0 01                	mov    al,0x1
c0019ccf:	eb 56                	jmp    c0019d27 <Vm::faultHandler(regs*)+0x6cd>
c0019cd1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019cd5:	50                   	push   eax
c0019cd6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019cda:	50                   	push   eax
c0019cdb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019cdf:	50                   	push   eax
c0019ce0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019ce4:	50                   	push   eax
c0019ce5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ce9:	50                   	push   eax
c0019cea:	52                   	push   edx
c0019ceb:	52                   	push   edx
c0019cec:	68 17 63 02 c0       	push   0xc0026317
c0019cf1:	e8 05 30 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019cf6:	83 c4 20             	add    esp,0x20
c0019cf9:	83 ec 0c             	sub    esp,0xc
c0019cfc:	6a 60                	push   0x60
c0019cfe:	e8 52 f5 ff ff       	call   c0019255 <Vm::inbv(unsigned short)>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	3c 1c                	cmp    al,0x1c
c0019d08:	74 04                	je     c0019d0e <Vm::faultHandler(regs*)+0x6b4>
c0019d0a:	3c 5a                	cmp    al,0x5a
c0019d0c:	75 eb                	jne    c0019cf9 <Vm::faultHandler(regs*)+0x69f>
c0019d0e:	3c 5a                	cmp    al,0x5a
c0019d10:	74 04                	je     c0019d16 <Vm::faultHandler(regs*)+0x6bc>
c0019d12:	3c 1c                	cmp    al,0x1c
c0019d14:	75 0f                	jne    c0019d25 <Vm::faultHandler(regs*)+0x6cb>
c0019d16:	83 ec 0c             	sub    esp,0xc
c0019d19:	6a 60                	push   0x60
c0019d1b:	e8 35 f5 ff ff       	call   c0019255 <Vm::inbv(unsigned short)>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	eb e9                	jmp    c0019d0e <Vm::faultHandler(regs*)+0x6b4>
c0019d25:	31 c0                	xor    eax,eax
c0019d27:	83 c4 1c             	add    esp,0x1c
c0019d2a:	5b                   	pop    ebx
c0019d2b:	5e                   	pop    esi
c0019d2c:	5f                   	pop    edi
c0019d2d:	5d                   	pop    ebp
c0019d2e:	c3                   	ret    
c0019d2f:	90                   	nop

c0019d30 <Vm::fpuInternalTo32(unsigned long long)>:
c0019d30:	57                   	push   edi
c0019d31:	56                   	push   esi
c0019d32:	53                   	push   ebx
c0019d33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3b:	89 d6                	mov    esi,edx
c0019d3d:	89 d7                	mov    edi,edx
c0019d3f:	89 c1                	mov    ecx,eax
c0019d41:	c1 ef 14             	shr    edi,0x14
c0019d44:	89 d3                	mov    ebx,edx
c0019d46:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019d4c:	31 d2                	xor    edx,edx
c0019d4e:	89 f8                	mov    eax,edi
c0019d50:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019d56:	bf ff 00 00 00       	mov    edi,0xff
c0019d5b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019d60:	83 d2 ff             	adc    edx,0xffffffff
c0019d63:	39 c7                	cmp    edi,eax
c0019d65:	bf 00 00 00 00       	mov    edi,0x0
c0019d6a:	19 d7                	sbb    edi,edx
c0019d6c:	72 16                	jb     c0019d84 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019d6e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019d72:	c1 e0 17             	shl    eax,0x17
c0019d75:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019d7b:	09 f1                	or     ecx,esi
c0019d7d:	09 c1                	or     ecx,eax
c0019d7f:	89 cf                	mov    edi,ecx
c0019d81:	eb 05                	jmp    c0019d88 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019d83:	90                   	nop
c0019d84:	31 ff                	xor    edi,edi
c0019d86:	66 90                	xchg   ax,ax
c0019d88:	89 f8                	mov    eax,edi
c0019d8a:	5b                   	pop    ebx
c0019d8b:	5e                   	pop    esi
c0019d8c:	5f                   	pop    edi
c0019d8d:	c3                   	ret    

c0019d8e <Vm::fpuInternalTo64(unsigned long long)>:
c0019d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d96:	c3                   	ret    

c0019d97 <Vm::fpu32ToInternal(unsigned int)>:
c0019d97:	57                   	push   edi
c0019d98:	31 ff                	xor    edi,edi
c0019d9a:	56                   	push   esi
c0019d9b:	53                   	push   ebx
c0019d9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019da0:	89 cb                	mov    ebx,ecx
c0019da2:	89 ce                	mov    esi,ecx
c0019da4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019daa:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019db0:	c1 e9 17             	shr    ecx,0x17
c0019db3:	89 f0                	mov    eax,esi
c0019db5:	0f b6 d1             	movzx  edx,cl
c0019db8:	81 c2 80 03 00 00    	add    edx,0x380
c0019dbe:	89 d1                	mov    ecx,edx
c0019dc0:	89 fa                	mov    edx,edi
c0019dc2:	c1 e1 14             	shl    ecx,0x14
c0019dc5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019dc9:	c1 e0 1d             	shl    eax,0x1d
c0019dcc:	89 d7                	mov    edi,edx
c0019dce:	89 c6                	mov    esi,eax
c0019dd0:	89 ca                	mov    edx,ecx
c0019dd2:	89 f0                	mov    eax,esi
c0019dd4:	09 fa                	or     edx,edi
c0019dd6:	09 da                	or     edx,ebx
c0019dd8:	5b                   	pop    ebx
c0019dd9:	5e                   	pop    esi
c0019dda:	5f                   	pop    edi
c0019ddb:	c3                   	ret    

c0019ddc <Vm::fpu64ToInternal(unsigned long long)>:
c0019ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019de4:	c3                   	ret    

c0019de5 <Vm::fpuFloatToLong(unsigned long long)>:
c0019de5:	57                   	push   edi
c0019de6:	31 c0                	xor    eax,eax
c0019de8:	56                   	push   esi
c0019de9:	31 d2                	xor    edx,edx
c0019deb:	53                   	push   ebx
c0019dec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019df0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019df4:	89 d9                	mov    ecx,ebx
c0019df6:	c1 e9 14             	shr    ecx,0x14
c0019df9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019dff:	89 cf                	mov    edi,ecx
c0019e01:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019e07:	78 37                	js     c0019e40 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e09:	89 d9                	mov    ecx,ebx
c0019e0b:	89 f0                	mov    eax,esi
c0019e0d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e13:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019e19:	89 ca                	mov    edx,ecx
c0019e1b:	b9 34 00 00 00       	mov    ecx,0x34
c0019e20:	29 f9                	sub    ecx,edi
c0019e22:	0f ad d0             	shrd   eax,edx,cl
c0019e25:	d3 fa                	sar    edx,cl
c0019e27:	f6 c1 20             	test   cl,0x20
c0019e2a:	74 08                	je     c0019e34 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019e2c:	89 d0                	mov    eax,edx
c0019e2e:	c1 fa 1f             	sar    edx,0x1f
c0019e31:	8d 76 00             	lea    esi,[esi+0x0]
c0019e34:	85 db                	test   ebx,ebx
c0019e36:	79 08                	jns    c0019e40 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e38:	f7 d8                	neg    eax
c0019e3a:	83 d2 00             	adc    edx,0x0
c0019e3d:	f7 da                	neg    edx
c0019e3f:	90                   	nop
c0019e40:	5b                   	pop    ebx
c0019e41:	5e                   	pop    esi
c0019e42:	5f                   	pop    edi
c0019e43:	c3                   	ret    

c0019e44 <Vm::fpuULongToFloat(unsigned long long)>:
c0019e44:	57                   	push   edi
c0019e45:	31 c9                	xor    ecx,ecx
c0019e47:	56                   	push   esi
c0019e48:	53                   	push   ebx
c0019e49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e51:	8d 76 00             	lea    esi,[esi+0x0]
c0019e54:	0f ba e7 14          	bt     edi,0x14
c0019e58:	72 0a                	jb     c0019e64 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019e5a:	01 f6                	add    esi,esi
c0019e5c:	11 ff                	adc    edi,edi
c0019e5e:	41                   	inc    ecx
c0019e5f:	eb f3                	jmp    c0019e54 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019e61:	8d 76 00             	lea    esi,[esi+0x0]
c0019e64:	89 fa                	mov    edx,edi
c0019e66:	89 f0                	mov    eax,esi
c0019e68:	bb 33 04 00 00       	mov    ebx,0x433
c0019e6d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019e73:	29 cb                	sub    ebx,ecx
c0019e75:	89 d9                	mov    ecx,ebx
c0019e77:	5b                   	pop    ebx
c0019e78:	c1 e1 14             	shl    ecx,0x14
c0019e7b:	5e                   	pop    esi
c0019e7c:	09 ca                	or     edx,ecx
c0019e7e:	5f                   	pop    edi
c0019e7f:	c3                   	ret    

c0019e80 <Vm::fpuLongToFloat(long long)>:
c0019e80:	56                   	push   esi
c0019e81:	31 c0                	xor    eax,eax
c0019e83:	53                   	push   ebx
c0019e84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e8c:	39 c8                	cmp    eax,ecx
c0019e8e:	19 d8                	sbb    eax,ebx
c0019e90:	7d 06                	jge    c0019e98 <Vm::fpuLongToFloat(long long)+0x18>
c0019e92:	31 f6                	xor    esi,esi
c0019e94:	eb 0e                	jmp    c0019ea4 <Vm::fpuLongToFloat(long long)+0x24>
c0019e96:	66 90                	xchg   ax,ax
c0019e98:	f7 d9                	neg    ecx
c0019e9a:	be 01 00 00 00       	mov    esi,0x1
c0019e9f:	83 d3 00             	adc    ebx,0x0
c0019ea2:	f7 db                	neg    ebx
c0019ea4:	31 c0                	xor    eax,eax
c0019ea6:	66 90                	xchg   ax,ax
c0019ea8:	0f ba e3 14          	bt     ebx,0x14
c0019eac:	72 0a                	jb     c0019eb8 <Vm::fpuLongToFloat(long long)+0x38>
c0019eae:	01 c9                	add    ecx,ecx
c0019eb0:	11 db                	adc    ebx,ebx
c0019eb2:	40                   	inc    eax
c0019eb3:	eb f3                	jmp    c0019ea8 <Vm::fpuLongToFloat(long long)+0x28>
c0019eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb8:	ba 33 04 00 00       	mov    edx,0x433
c0019ebd:	29 c2                	sub    edx,eax
c0019ebf:	89 c8                	mov    eax,ecx
c0019ec1:	c1 e2 14             	shl    edx,0x14
c0019ec4:	89 d9                	mov    ecx,ebx
c0019ec6:	89 f3                	mov    ebx,esi
c0019ec8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019ece:	09 ca                	or     edx,ecx
c0019ed0:	84 db                	test   bl,bl
c0019ed2:	74 08                	je     c0019edc <Vm::fpuLongToFloat(long long)+0x5c>
c0019ed4:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019eda:	66 90                	xchg   ax,ax
c0019edc:	5b                   	pop    ebx
c0019edd:	5e                   	pop    esi
c0019ede:	c3                   	ret    

c0019edf <Vm::fpuGet0()>:
c0019edf:	31 c0                	xor    eax,eax
c0019ee1:	31 d2                	xor    edx,edx
c0019ee3:	c3                   	ret    

c0019ee4 <Vm::fpuGet1()>:
c0019ee4:	b8 01 00 00 00       	mov    eax,0x1
c0019ee9:	31 d2                	xor    edx,edx
c0019eeb:	c3                   	ret    

c0019eec <Vm::fpuGetPi()>:
c0019eec:	b8 03 00 00 00       	mov    eax,0x3
c0019ef1:	31 d2                	xor    edx,edx
c0019ef3:	c3                   	ret    

c0019ef4 <Vm::fpuGetLog2E()>:
c0019ef4:	83 ec 18             	sub    esp,0x18
c0019ef7:	68 74 63 02 c0       	push   0xc0026374
c0019efc:	e8 c2 aa ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0019f01:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f06:	31 d2                	xor    edx,edx
c0019f08:	83 c4 1c             	add    esp,0x1c
c0019f0b:	c3                   	ret    

c0019f0c <Vm::fpuGetLogE2()>:
c0019f0c:	83 ec 18             	sub    esp,0x18
c0019f0f:	68 80 63 02 c0       	push   0xc0026380
c0019f14:	e8 aa aa ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0019f19:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f1e:	31 d2                	xor    edx,edx
c0019f20:	83 c4 1c             	add    esp,0x1c
c0019f23:	c3                   	ret    

c0019f24 <Vm::fpuGetLog210()>:
c0019f24:	83 ec 18             	sub    esp,0x18
c0019f27:	68 8c 63 02 c0       	push   0xc002638c
c0019f2c:	e8 92 aa ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0019f31:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f36:	31 d2                	xor    edx,edx
c0019f38:	83 c4 1c             	add    esp,0x1c
c0019f3b:	c3                   	ret    

c0019f3c <Vm::fpuGetLog102()>:
c0019f3c:	83 ec 18             	sub    esp,0x18
c0019f3f:	68 99 63 02 c0       	push   0xc0026399
c0019f44:	e8 7a aa ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0019f49:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f4e:	31 d2                	xor    edx,edx
c0019f50:	83 c4 1c             	add    esp,0x1c
c0019f53:	c3                   	ret    

c0019f54 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f58:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f60:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019f64:	0f 92 c0             	setb   al
c0019f67:	c3                   	ret    

c0019f68 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019f68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f70:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019f74:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019f78:	09 c2                	or     edx,eax
c0019f7a:	0f 94 c0             	sete   al
c0019f7d:	c3                   	ret    

c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019f7e:	57                   	push   edi
c0019f7f:	56                   	push   esi
c0019f80:	53                   	push   ebx
c0019f81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f89:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f8d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f91:	57                   	push   edi
c0019f92:	56                   	push   esi
c0019f93:	53                   	push   ebx
c0019f94:	51                   	push   ecx
c0019f95:	e8 ce ff ff ff       	call   c0019f68 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	88 c2                	mov    dl,al
c0019f9f:	31 c0                	xor    eax,eax
c0019fa1:	84 d2                	test   dl,dl
c0019fa3:	75 0f                	jne    c0019fb4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019fa5:	57                   	push   edi
c0019fa6:	56                   	push   esi
c0019fa7:	53                   	push   ebx
c0019fa8:	51                   	push   ecx
c0019fa9:	e8 a6 ff ff ff       	call   c0019f54 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019fae:	83 c4 10             	add    esp,0x10
c0019fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb4:	83 e0 01             	and    eax,0x1
c0019fb7:	5b                   	pop    ebx
c0019fb8:	88 c1                	mov    cl,al
c0019fba:	83 e2 01             	and    edx,0x1
c0019fbd:	a0 61 96 02 c0       	mov    al,ds:0xc0029661
c0019fc2:	c1 e2 06             	shl    edx,0x6
c0019fc5:	83 e0 ba             	and    eax,0xffffffba
c0019fc8:	5e                   	pop    esi
c0019fc9:	09 c8                	or     eax,ecx
c0019fcb:	5f                   	pop    edi
c0019fcc:	09 d0                	or     eax,edx
c0019fce:	a2 61 96 02 c0       	mov    ds:0xc0029661,al
c0019fd3:	c3                   	ret    

c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fdc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019fe0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019fe4:	c3                   	ret    

c0019fe5 <Vm::fpuAbs(unsigned long long)>:
c0019fe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fed:	c3                   	ret    

c0019fee <Vm::fpuChs(unsigned long long)>:
c0019fee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ff2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ff6:	f7 d8                	neg    eax
c0019ff8:	83 d2 00             	adc    edx,0x0
c0019ffb:	f7 da                	neg    edx
c0019ffd:	c3                   	ret    

c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019ffe:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a002:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a007:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a00b:	eb c7                	jmp    c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a00d:	53                   	push   ebx
c001a00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a016:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a01e:	0f af ca             	imul   ecx,edx
c001a021:	0f af d8             	imul   ebx,eax
c001a024:	f7 e2                	mul    edx
c001a026:	01 d9                	add    ecx,ebx
c001a028:	5b                   	pop    ebx
c001a029:	01 ca                	add    edx,ecx
c001a02b:	c3                   	ret    

c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a02c:	83 ec 0c             	sub    esp,0xc
c001a02f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03f:	e8 a0 87 00 00       	call   c00227e4 <__udivdi3>
c001a044:	83 c4 1c             	add    esp,0x1c
c001a047:	c3                   	ret    

c001a048 <Vm::fpuSquare(unsigned long long)>:
c001a048:	50                   	push   eax
c001a049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a04d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a051:	52                   	push   edx
c001a052:	50                   	push   eax
c001a053:	52                   	push   edx
c001a054:	50                   	push   eax
c001a055:	e8 b3 ff ff ff       	call   c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a05a:	83 c4 14             	add    esp,0x14
c001a05d:	c3                   	ret    

c001a05e <Vm::fpuGetReg(int)>:
c001a05e:	83 ec 0c             	sub    esp,0xc
c001a061:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a066:	76 10                	jbe    c001a078 <Vm::fpuGetReg(int)+0x1a>
c001a068:	83 ec 0c             	sub    esp,0xc
c001a06b:	68 a6 63 02 c0       	push   0xc00263a6
c001a070:	e8 4e a9 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	a0 61 96 02 c0       	mov    al,ds:0xc0029661
c001a07d:	b9 08 00 00 00       	mov    ecx,0x8
c001a082:	c0 e8 03             	shr    al,0x3
c001a085:	83 e0 07             	and    eax,0x7
c001a088:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a08c:	99                   	cdq    
c001a08d:	f7 f9                	idiv   ecx
c001a08f:	8b 04 d5 64 96 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd699c]
c001a096:	8b 14 d5 68 96 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6998]
c001a09d:	83 c4 0c             	add    esp,0xc
c001a0a0:	c3                   	ret    

c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>:
c001a0a1:	57                   	push   edi
c001a0a2:	56                   	push   esi
c001a0a3:	52                   	push   edx
c001a0a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a0a8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a0ac:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0b1:	76 11                	jbe    c001a0c4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a0b3:	83 ec 0c             	sub    esp,0xc
c001a0b6:	68 b9 63 02 c0       	push   0xc00263b9
c001a0bb:	e8 03 a9 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	90                   	nop
c001a0c4:	a0 61 96 02 c0       	mov    al,ds:0xc0029661
c001a0c9:	b9 08 00 00 00       	mov    ecx,0x8
c001a0ce:	c0 e8 03             	shr    al,0x3
c001a0d1:	83 e0 07             	and    eax,0x7
c001a0d4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a0d8:	99                   	cdq    
c001a0d9:	f7 f9                	idiv   ecx
c001a0db:	89 34 d5 64 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd699c],esi
c001a0e2:	89 3c d5 68 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6998],edi
c001a0e9:	58                   	pop    eax
c001a0ea:	5e                   	pop    esi
c001a0eb:	5f                   	pop    edi
c001a0ec:	c3                   	ret    

c001a0ed <Vm::fpuPush(unsigned long long)>:
c001a0ed:	a0 61 96 02 c0       	mov    al,ds:0xc0029661
c001a0f2:	c0 e8 03             	shr    al,0x3
c001a0f5:	83 e0 07             	and    eax,0x7
c001a0f8:	83 c0 07             	add    eax,0x7
c001a0fb:	88 c2                	mov    dl,al
c001a0fd:	83 e0 07             	and    eax,0x7
c001a100:	83 e2 07             	and    edx,0x7
c001a103:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a10a:	8a 15 61 96 02 c0    	mov    dl,BYTE PTR ds:0xc0029661
c001a110:	83 e2 c7             	and    edx,0xffffffc7
c001a113:	09 ca                	or     edx,ecx
c001a115:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a119:	88 15 61 96 02 c0    	mov    BYTE PTR ds:0xc0029661,dl
c001a11f:	89 0c c5 68 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6998],ecx
c001a126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a12a:	89 14 c5 64 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd699c],edx
c001a131:	a1 a4 96 02 c0       	mov    eax,ds:0xc00296a4
c001a136:	83 f8 08             	cmp    eax,0x8
c001a139:	75 09                	jne    c001a144 <Vm::fpuPush(unsigned long long)+0x57>
c001a13b:	80 0d 60 96 02 c0 40 	or     BYTE PTR ds:0xc0029660,0x40
c001a142:	c3                   	ret    
c001a143:	90                   	nop
c001a144:	40                   	inc    eax
c001a145:	a3 a4 96 02 c0       	mov    ds:0xc00296a4,eax
c001a14a:	c3                   	ret    

c001a14b <Vm::fpuPop()>:
c001a14b:	8a 0d 61 96 02 c0    	mov    cl,BYTE PTR ds:0xc0029661
c001a151:	53                   	push   ebx
c001a152:	c0 e9 03             	shr    cl,0x3
c001a155:	8a 1d 61 96 02 c0    	mov    bl,BYTE PTR ds:0xc0029661
c001a15b:	83 e1 07             	and    ecx,0x7
c001a15e:	83 e3 c7             	and    ebx,0xffffffc7
c001a161:	8b 04 cd 64 96 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd699c]
c001a168:	8b 14 cd 68 96 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6998]
c001a16f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a176:	83 e1 38             	and    ecx,0x38
c001a179:	09 d9                	or     ecx,ebx
c001a17b:	88 0d 61 96 02 c0    	mov    BYTE PTR ds:0xc0029661,cl
c001a181:	8b 0d a4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296a4
c001a187:	85 c9                	test   ecx,ecx
c001a189:	74 09                	je     c001a194 <Vm::fpuPop()+0x49>
c001a18b:	49                   	dec    ecx
c001a18c:	89 0d a4 96 02 c0    	mov    DWORD PTR ds:0xc00296a4,ecx
c001a192:	eb 08                	jmp    c001a19c <Vm::fpuPop()+0x51>
c001a194:	80 0d 60 96 02 c0 40 	or     BYTE PTR ds:0xc0029660,0x40
c001a19b:	90                   	nop
c001a19c:	5b                   	pop    ebx
c001a19d:	c3                   	ret    

c001a19e <Vm::x87Handler(regs*)>:
c001a19e:	55                   	push   ebp
c001a19f:	57                   	push   edi
c001a1a0:	56                   	push   esi
c001a1a1:	53                   	push   ebx
c001a1a2:	83 ec 1c             	sub    esp,0x1c
c001a1a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1a9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a1ae:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a1b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a1b9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a1bd:	50                   	push   eax
c001a1be:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a1c2:	50                   	push   eax
c001a1c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1c7:	50                   	push   eax
c001a1c8:	53                   	push   ebx
c001a1c9:	e8 0e 9f ff ff       	call   c00140dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a1ce:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a1d1:	83 c4 10             	add    esp,0x10
c001a1d4:	89 c6                	mov    esi,eax
c001a1d6:	80 fa d9             	cmp    dl,0xd9
c001a1d9:	0f 85 79 01 00 00    	jne    c001a358 <Vm::x87Handler(regs*)+0x1ba>
c001a1df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1e3:	8d 50 20             	lea    edx,[eax+0x20]
c001a1e6:	80 fa 0e             	cmp    dl,0xe
c001a1e9:	0f 87 a5 00 00 00    	ja     c001a294 <Vm::x87Handler(regs*)+0xf6>
c001a1ef:	0f b6 d2             	movzx  edx,dl
c001a1f2:	ff 24 95 cc 63 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9c34]
c001a1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1fc:	e8 de fc ff ff       	call   c0019edf <Vm::fpuGet0()>
c001a201:	eb 09                	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a203:	90                   	nop
c001a204:	e8 db fc ff ff       	call   c0019ee4 <Vm::fpuGet1()>
c001a209:	8d 76 00             	lea    esi,[esi+0x0]
c001a20c:	57                   	push   edi
c001a20d:	57                   	push   edi
c001a20e:	66 90                	xchg   ax,ax
c001a210:	52                   	push   edx
c001a211:	50                   	push   eax
c001a212:	e8 d6 fe ff ff       	call   c001a0ed <Vm::fpuPush(unsigned long long)>
c001a217:	90                   	nop
c001a218:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	90                   	nop
c001a220:	b0 01                	mov    al,0x1
c001a222:	e9 89 0a 00 00       	jmp    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001a227:	90                   	nop
c001a228:	83 ec 0c             	sub    esp,0xc
c001a22b:	6a 00                	push   0x0
c001a22d:	e8 2c fe ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a232:	59                   	pop    ecx
c001a233:	5e                   	pop    esi
c001a234:	52                   	push   edx
c001a235:	50                   	push   eax
c001a236:	e8 b3 fd ff ff       	call   c0019fee <Vm::fpuChs(unsigned long long)>
c001a23b:	eb 17                	jmp    c001a254 <Vm::x87Handler(regs*)+0xb6>
c001a23d:	8d 76 00             	lea    esi,[esi+0x0]
c001a240:	83 ec 0c             	sub    esp,0xc
c001a243:	6a 00                	push   0x0
c001a245:	e8 14 fe ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a24a:	5f                   	pop    edi
c001a24b:	5d                   	pop    ebp
c001a24c:	52                   	push   edx
c001a24d:	50                   	push   eax
c001a24e:	e8 92 fd ff ff       	call   c0019fe5 <Vm::fpuAbs(unsigned long long)>
c001a253:	90                   	nop
c001a254:	83 c4 0c             	add    esp,0xc
c001a257:	90                   	nop
c001a258:	52                   	push   edx
c001a259:	50                   	push   eax
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	6a 00                	push   0x0
c001a25e:	66 90                	xchg   ax,ax
c001a260:	e8 3c fe ff ff       	call   c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>
c001a265:	eb b1                	jmp    c001a218 <Vm::x87Handler(regs*)+0x7a>
c001a267:	90                   	nop
c001a268:	e8 b7 fc ff ff       	call   c0019f24 <Vm::fpuGetLog210()>
c001a26d:	eb 9d                	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a26f:	90                   	nop
c001a270:	e8 7f fc ff ff       	call   c0019ef4 <Vm::fpuGetLog2E()>
c001a275:	eb 95                	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a277:	90                   	nop
c001a278:	e8 6f fc ff ff       	call   c0019eec <Vm::fpuGetPi()>
c001a27d:	eb 8d                	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a27f:	90                   	nop
c001a280:	e8 b7 fc ff ff       	call   c0019f3c <Vm::fpuGetLog102()>
c001a285:	eb 85                	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a287:	90                   	nop
c001a288:	e8 7f fc ff ff       	call   c0019f0c <Vm::fpuGetLogE2()>
c001a28d:	e9 7a ff ff ff       	jmp    c001a20c <Vm::x87Handler(regs*)+0x6e>
c001a292:	66 90                	xchg   ax,ax
c001a294:	8d 50 40             	lea    edx,[eax+0x40]
c001a297:	80 fa 07             	cmp    dl,0x7
c001a29a:	77 18                	ja     c001a2b4 <Vm::x87Handler(regs*)+0x116>
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	2d c0 00 00 00       	sub    eax,0xc0
c001a2a4:	50                   	push   eax
c001a2a5:	e8 b4 fd ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a2aa:	59                   	pop    ecx
c001a2ab:	5e                   	pop    esi
c001a2ac:	e9 5f ff ff ff       	jmp    c001a210 <Vm::x87Handler(regs*)+0x72>
c001a2b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b4:	8d 50 38             	lea    edx,[eax+0x38]
c001a2b7:	80 fa 07             	cmp    dl,0x7
c001a2ba:	77 3c                	ja     c001a2f8 <Vm::x87Handler(regs*)+0x15a>
c001a2bc:	83 ec 0c             	sub    esp,0xc
c001a2bf:	2d c8 00 00 00       	sub    eax,0xc8
c001a2c4:	50                   	push   eax
c001a2c5:	e8 94 fd ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a2ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d1:	89 c6                	mov    esi,eax
c001a2d3:	89 d7                	mov    edi,edx
c001a2d5:	e8 84 fd ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a2da:	83 c4 0c             	add    esp,0xc
c001a2dd:	52                   	push   edx
c001a2de:	50                   	push   eax
c001a2df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2e3:	2d c8 00 00 00       	sub    eax,0xc8
c001a2e8:	50                   	push   eax
c001a2e9:	e8 b3 fd ff ff       	call   c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>
c001a2ee:	83 c4 0c             	add    esp,0xc
c001a2f1:	57                   	push   edi
c001a2f2:	56                   	push   esi
c001a2f3:	e9 64 ff ff ff       	jmp    c001a25c <Vm::x87Handler(regs*)+0xbe>
c001a2f8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2fc:	84 d2                	test   dl,dl
c001a2fe:	75 10                	jne    c001a310 <Vm::x87Handler(regs*)+0x172>
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	ff 36                	push   DWORD PTR [esi]
c001a305:	e8 8d fa ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a30a:	e9 c9 00 00 00       	jmp    c001a3d8 <Vm::x87Handler(regs*)+0x23a>
c001a30f:	90                   	nop
c001a310:	80 fa 03             	cmp    dl,0x3
c001a313:	75 13                	jne    c001a328 <Vm::x87Handler(regs*)+0x18a>
c001a315:	e8 31 fe ff ff       	call   c001a14b <Vm::fpuPop()>
c001a31a:	55                   	push   ebp
c001a31b:	55                   	push   ebp
c001a31c:	52                   	push   edx
c001a31d:	50                   	push   eax
c001a31e:	e8 0d fa ff ff       	call   c0019d30 <Vm::fpuInternalTo32(unsigned long long)>
c001a323:	e9 90 00 00 00       	jmp    c001a3b8 <Vm::x87Handler(regs*)+0x21a>
c001a328:	80 fa 05             	cmp    dl,0x5
c001a32b:	75 0f                	jne    c001a33c <Vm::x87Handler(regs*)+0x19e>
c001a32d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a330:	66 a3 62 96 02 c0    	mov    ds:0xc0029662,ax
c001a336:	e9 ed 00 00 00       	jmp    c001a428 <Vm::x87Handler(regs*)+0x28a>
c001a33b:	90                   	nop
c001a33c:	31 c0                	xor    eax,eax
c001a33e:	80 fa 07             	cmp    dl,0x7
c001a341:	0f 85 69 09 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001a347:	66 a1 62 96 02 c0    	mov    ax,ds:0xc0029662
c001a34d:	66 89 06             	mov    WORD PTR [esi],ax
c001a350:	e9 d3 00 00 00       	jmp    c001a428 <Vm::x87Handler(regs*)+0x28a>
c001a355:	8d 76 00             	lea    esi,[esi+0x0]
c001a358:	80 fa d8             	cmp    dl,0xd8
c001a35b:	0f 84 d3 00 00 00    	je     c001a434 <Vm::x87Handler(regs*)+0x296>
c001a361:	80 fa dc             	cmp    dl,0xdc
c001a364:	0f 84 2a 02 00 00    	je     c001a594 <Vm::x87Handler(regs*)+0x3f6>
c001a36a:	80 fa de             	cmp    dl,0xde
c001a36d:	0f 84 f1 02 00 00    	je     c001a664 <Vm::x87Handler(regs*)+0x4c6>
c001a373:	80 fa dd             	cmp    dl,0xdd
c001a376:	0f 84 94 04 00 00    	je     c001a810 <Vm::x87Handler(regs*)+0x672>
c001a37c:	80 fa da             	cmp    dl,0xda
c001a37f:	0f 84 5f 05 00 00    	je     c001a8e4 <Vm::x87Handler(regs*)+0x746>
c001a385:	80 fa df             	cmp    dl,0xdf
c001a388:	0f 84 aa 05 00 00    	je     c001a938 <Vm::x87Handler(regs*)+0x79a>
c001a38e:	31 c0                	xor    eax,eax
c001a390:	80 fa db             	cmp    dl,0xdb
c001a393:	0f 85 17 09 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001a399:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a39d:	80 fa 03             	cmp    dl,0x3
c001a3a0:	0f 85 c2 06 00 00    	jne    c001aa68 <Vm::x87Handler(regs*)+0x8ca>
c001a3a6:	e8 a0 fd ff ff       	call   c001a14b <Vm::fpuPop()>
c001a3ab:	55                   	push   ebp
c001a3ac:	55                   	push   ebp
c001a3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b0:	52                   	push   edx
c001a3b1:	50                   	push   eax
c001a3b2:	e8 2e fa ff ff       	call   c0019de5 <Vm::fpuFloatToLong(unsigned long long)>
c001a3b7:	90                   	nop
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	89 06                	mov    DWORD PTR [esi],eax
c001a3bd:	eb 69                	jmp    c001a428 <Vm::x87Handler(regs*)+0x28a>
c001a3bf:	90                   	nop
c001a3c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a3c4:	84 d2                	test   dl,dl
c001a3c6:	0f 85 2c 06 00 00    	jne    c001a9f8 <Vm::x87Handler(regs*)+0x85a>
c001a3cc:	57                   	push   edi
c001a3cd:	57                   	push   edi
c001a3ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3d1:	ff 36                	push   DWORD PTR [esi]
c001a3d3:	e8 04 fa ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001a3d8:	5e                   	pop    esi
c001a3d9:	5f                   	pop    edi
c001a3da:	52                   	push   edx
c001a3db:	50                   	push   eax
c001a3dc:	e8 0c fd ff ff       	call   c001a0ed <Vm::fpuPush(unsigned long long)>
c001a3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a3eb:	e9 2c fe ff ff       	jmp    c001a21c <Vm::x87Handler(regs*)+0x7e>
c001a3f0:	80 fa 03             	cmp    dl,0x3
c001a3f3:	0f 85 2b 07 00 00    	jne    c001ab24 <Vm::x87Handler(regs*)+0x986>
c001a3f9:	57                   	push   edi
c001a3fa:	57                   	push   edi
c001a3fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3fe:	ff 36                	push   DWORD PTR [esi]
c001a400:	e8 d7 f9 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001a405:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a40c:	89 c6                	mov    esi,eax
c001a40e:	89 d7                	mov    edi,edx
c001a410:	e8 49 fc ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a415:	57                   	push   edi
c001a416:	56                   	push   esi
c001a417:	52                   	push   edx
c001a418:	50                   	push   eax
c001a419:	e8 60 fb ff ff       	call   c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a41e:	83 c4 20             	add    esp,0x20
c001a421:	e8 25 fd ff ff       	call   c001a14b <Vm::fpuPop()>
c001a426:	66 90                	xchg   ax,ax
c001a428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a42c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a42f:	e9 ec fd ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x82>
c001a434:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a438:	8d 50 40             	lea    edx,[eax+0x40]
c001a43b:	80 fa 07             	cmp    dl,0x7
c001a43e:	77 2c                	ja     c001a46c <Vm::x87Handler(regs*)+0x2ce>
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	2d c0 00 00 00       	sub    eax,0xc0
c001a448:	50                   	push   eax
c001a449:	e8 10 fc ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a44e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a455:	89 c6                	mov    esi,eax
c001a457:	89 d7                	mov    edi,edx
c001a459:	e8 00 fc ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a45e:	57                   	push   edi
c001a45f:	56                   	push   esi
c001a460:	52                   	push   edx
c001a461:	50                   	push   eax
c001a462:	e8 6d fb ff ff       	call   c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a467:	eb 33                	jmp    c001a49c <Vm::x87Handler(regs*)+0x2fe>
c001a469:	8d 76 00             	lea    esi,[esi+0x0]
c001a46c:	8d 50 38             	lea    edx,[eax+0x38]
c001a46f:	80 fa 07             	cmp    dl,0x7
c001a472:	77 30                	ja     c001a4a4 <Vm::x87Handler(regs*)+0x306>
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	2d c8 00 00 00       	sub    eax,0xc8
c001a47c:	50                   	push   eax
c001a47d:	e8 dc fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a482:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a489:	89 c6                	mov    esi,eax
c001a48b:	89 d7                	mov    edi,edx
c001a48d:	e8 cc fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a492:	57                   	push   edi
c001a493:	56                   	push   esi
c001a494:	52                   	push   edx
c001a495:	50                   	push   eax
c001a496:	e8 72 fb ff ff       	call   c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a49b:	90                   	nop
c001a49c:	83 c4 1c             	add    esp,0x1c
c001a49f:	e9 b4 fd ff ff       	jmp    c001a258 <Vm::x87Handler(regs*)+0xba>
c001a4a4:	8d 50 30             	lea    edx,[eax+0x30]
c001a4a7:	80 fa 07             	cmp    dl,0x7
c001a4aa:	77 10                	ja     c001a4bc <Vm::x87Handler(regs*)+0x31e>
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	2d d0 00 00 00       	sub    eax,0xd0
c001a4b4:	e9 c3 03 00 00       	jmp    c001a87c <Vm::x87Handler(regs*)+0x6de>
c001a4b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4bc:	8d 50 28             	lea    edx,[eax+0x28]
c001a4bf:	80 fa 07             	cmp    dl,0x7
c001a4c2:	77 10                	ja     c001a4d4 <Vm::x87Handler(regs*)+0x336>
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	2d d8 00 00 00       	sub    eax,0xd8
c001a4cc:	e9 e7 03 00 00       	jmp    c001a8b8 <Vm::x87Handler(regs*)+0x71a>
c001a4d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d4:	8d 50 20             	lea    edx,[eax+0x20]
c001a4d7:	80 fa 07             	cmp    dl,0x7
c001a4da:	77 1c                	ja     c001a4f8 <Vm::x87Handler(regs*)+0x35a>
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	2d e0 00 00 00       	sub    eax,0xe0
c001a4e4:	50                   	push   eax
c001a4e5:	e8 74 fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a4ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4f1:	89 c6                	mov    esi,eax
c001a4f3:	89 d7                	mov    edi,edx
c001a4f5:	eb 25                	jmp    c001a51c <Vm::x87Handler(regs*)+0x37e>
c001a4f7:	90                   	nop
c001a4f8:	8d 50 18             	lea    edx,[eax+0x18]
c001a4fb:	80 fa 07             	cmp    dl,0x7
c001a4fe:	77 30                	ja     c001a530 <Vm::x87Handler(regs*)+0x392>
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	6a 00                	push   0x0
c001a505:	e8 54 fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a50a:	89 c6                	mov    esi,eax
c001a50c:	89 d7                	mov    edi,edx
c001a50e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a512:	2d e8 00 00 00       	sub    eax,0xe8
c001a517:	89 04 24             	mov    DWORD PTR [esp],eax
c001a51a:	66 90                	xchg   ax,ax
c001a51c:	e8 3d fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a521:	57                   	push   edi
c001a522:	56                   	push   esi
c001a523:	52                   	push   edx
c001a524:	50                   	push   eax
c001a525:	e8 d4 fa ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a52a:	e9 6d ff ff ff       	jmp    c001a49c <Vm::x87Handler(regs*)+0x2fe>
c001a52f:	90                   	nop
c001a530:	8d 50 10             	lea    edx,[eax+0x10]
c001a533:	80 fa 07             	cmp    dl,0x7
c001a536:	77 1c                	ja     c001a554 <Vm::x87Handler(regs*)+0x3b6>
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	2d f0 00 00 00       	sub    eax,0xf0
c001a540:	50                   	push   eax
c001a541:	e8 18 fb ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a546:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a54d:	89 c6                	mov    esi,eax
c001a54f:	89 d7                	mov    edi,edx
c001a551:	eb 25                	jmp    c001a578 <Vm::x87Handler(regs*)+0x3da>
c001a553:	90                   	nop
c001a554:	3c f7                	cmp    al,0xf7
c001a556:	0f 86 00 04 00 00    	jbe    c001a95c <Vm::x87Handler(regs*)+0x7be>
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	6a 00                	push   0x0
c001a561:	e8 f8 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a566:	89 c6                	mov    esi,eax
c001a568:	89 d7                	mov    edi,edx
c001a56a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a56e:	2d f8 00 00 00       	sub    eax,0xf8
c001a573:	89 04 24             	mov    DWORD PTR [esp],eax
c001a576:	66 90                	xchg   ax,ax
c001a578:	e8 e1 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a57d:	57                   	push   edi
c001a57e:	56                   	push   esi
c001a57f:	52                   	push   edx
c001a580:	50                   	push   eax
c001a581:	e8 a6 fa ff ff       	call   c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a586:	83 c4 1c             	add    esp,0x1c
c001a589:	52                   	push   edx
c001a58a:	50                   	push   eax
c001a58b:	6a 00                	push   0x0
c001a58d:	e9 6a 02 00 00       	jmp    c001a7fc <Vm::x87Handler(regs*)+0x65e>
c001a592:	66 90                	xchg   ax,ax
c001a594:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a598:	8d 50 40             	lea    edx,[eax+0x40]
c001a59b:	80 fa 07             	cmp    dl,0x7
c001a59e:	77 38                	ja     c001a5d8 <Vm::x87Handler(regs*)+0x43a>
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	2d c0 00 00 00       	sub    eax,0xc0
c001a5a8:	50                   	push   eax
c001a5a9:	e8 b0 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a5ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5b5:	89 c6                	mov    esi,eax
c001a5b7:	89 d7                	mov    edi,edx
c001a5b9:	e8 a0 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a5be:	57                   	push   edi
c001a5bf:	56                   	push   esi
c001a5c0:	52                   	push   edx
c001a5c1:	50                   	push   eax
c001a5c2:	e8 0d fa ff ff       	call   c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a5c7:	83 c4 1c             	add    esp,0x1c
c001a5ca:	52                   	push   edx
c001a5cb:	50                   	push   eax
c001a5cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5d0:	2d c0 00 00 00       	sub    eax,0xc0
c001a5d5:	eb 41                	jmp    c001a618 <Vm::x87Handler(regs*)+0x47a>
c001a5d7:	90                   	nop
c001a5d8:	8d 50 38             	lea    edx,[eax+0x38]
c001a5db:	80 fa 07             	cmp    dl,0x7
c001a5de:	77 40                	ja     c001a620 <Vm::x87Handler(regs*)+0x482>
c001a5e0:	83 ec 0c             	sub    esp,0xc
c001a5e3:	2d c8 00 00 00       	sub    eax,0xc8
c001a5e8:	50                   	push   eax
c001a5e9:	e8 70 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a5ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5f5:	89 c6                	mov    esi,eax
c001a5f7:	89 d7                	mov    edi,edx
c001a5f9:	e8 60 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a5fe:	57                   	push   edi
c001a5ff:	56                   	push   esi
c001a600:	52                   	push   edx
c001a601:	50                   	push   eax
c001a602:	e8 06 fa ff ff       	call   c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a607:	83 c4 1c             	add    esp,0x1c
c001a60a:	52                   	push   edx
c001a60b:	50                   	push   eax
c001a60c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a610:	2d c8 00 00 00       	sub    eax,0xc8
c001a615:	8d 76 00             	lea    esi,[esi+0x0]
c001a618:	50                   	push   eax
c001a619:	e9 42 fc ff ff       	jmp    c001a260 <Vm::x87Handler(regs*)+0xc2>
c001a61e:	66 90                	xchg   ax,ax
c001a620:	83 c0 18             	add    eax,0x18
c001a623:	3c 07                	cmp    al,0x7
c001a625:	0f 87 6d 04 00 00    	ja     c001aa98 <Vm::x87Handler(regs*)+0x8fa>
c001a62b:	83 ec 0c             	sub    esp,0xc
c001a62e:	6a 00                	push   0x0
c001a630:	e8 29 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a635:	89 c6                	mov    esi,eax
c001a637:	89 d7                	mov    edi,edx
c001a639:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a63d:	2d e8 00 00 00       	sub    eax,0xe8
c001a642:	89 04 24             	mov    DWORD PTR [esp],eax
c001a645:	e8 14 fa ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a64a:	57                   	push   edi
c001a64b:	56                   	push   esi
c001a64c:	52                   	push   edx
c001a64d:	50                   	push   eax
c001a64e:	e8 ab f9 ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a653:	83 c4 1c             	add    esp,0x1c
c001a656:	52                   	push   edx
c001a657:	50                   	push   eax
c001a658:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a65c:	2d e8 00 00 00       	sub    eax,0xe8
c001a661:	eb b5                	jmp    c001a618 <Vm::x87Handler(regs*)+0x47a>
c001a663:	90                   	nop
c001a664:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a668:	8d 50 40             	lea    edx,[eax+0x40]
c001a66b:	80 fa 07             	cmp    dl,0x7
c001a66e:	77 3c                	ja     c001a6ac <Vm::x87Handler(regs*)+0x50e>
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	2d c0 00 00 00       	sub    eax,0xc0
c001a678:	50                   	push   eax
c001a679:	e8 e0 f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a67e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a685:	89 c6                	mov    esi,eax
c001a687:	89 d7                	mov    edi,edx
c001a689:	e8 d0 f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a68e:	57                   	push   edi
c001a68f:	56                   	push   esi
c001a690:	52                   	push   edx
c001a691:	50                   	push   eax
c001a692:	e8 3d f9 ff ff       	call   c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a697:	83 c4 1c             	add    esp,0x1c
c001a69a:	52                   	push   edx
c001a69b:	50                   	push   eax
c001a69c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6a0:	2d c0 00 00 00       	sub    eax,0xc0
c001a6a5:	e9 b2 01 00 00       	jmp    c001a85c <Vm::x87Handler(regs*)+0x6be>
c001a6aa:	66 90                	xchg   ax,ax
c001a6ac:	8d 50 20             	lea    edx,[eax+0x20]
c001a6af:	80 fa 07             	cmp    dl,0x7
c001a6b2:	77 3c                	ja     c001a6f0 <Vm::x87Handler(regs*)+0x552>
c001a6b4:	83 ec 0c             	sub    esp,0xc
c001a6b7:	2d e0 00 00 00       	sub    eax,0xe0
c001a6bc:	50                   	push   eax
c001a6bd:	e8 9c f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a6c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6c9:	89 c6                	mov    esi,eax
c001a6cb:	89 d7                	mov    edi,edx
c001a6cd:	e8 8c f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a6d2:	57                   	push   edi
c001a6d3:	56                   	push   esi
c001a6d4:	52                   	push   edx
c001a6d5:	50                   	push   eax
c001a6d6:	e8 23 f9 ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a6db:	83 c4 1c             	add    esp,0x1c
c001a6de:	52                   	push   edx
c001a6df:	50                   	push   eax
c001a6e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6e4:	2d e0 00 00 00       	sub    eax,0xe0
c001a6e9:	e9 6e 01 00 00       	jmp    c001a85c <Vm::x87Handler(regs*)+0x6be>
c001a6ee:	66 90                	xchg   ax,ax
c001a6f0:	8d 50 18             	lea    edx,[eax+0x18]
c001a6f3:	80 fa 07             	cmp    dl,0x7
c001a6f6:	77 3c                	ja     c001a734 <Vm::x87Handler(regs*)+0x596>
c001a6f8:	83 ec 0c             	sub    esp,0xc
c001a6fb:	6a 00                	push   0x0
c001a6fd:	e8 5c f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a702:	89 c6                	mov    esi,eax
c001a704:	89 d7                	mov    edi,edx
c001a706:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a70a:	2d e8 00 00 00       	sub    eax,0xe8
c001a70f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a712:	e8 47 f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a717:	57                   	push   edi
c001a718:	56                   	push   esi
c001a719:	52                   	push   edx
c001a71a:	50                   	push   eax
c001a71b:	e8 de f8 ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a720:	83 c4 1c             	add    esp,0x1c
c001a723:	52                   	push   edx
c001a724:	50                   	push   eax
c001a725:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a729:	2d e8 00 00 00       	sub    eax,0xe8
c001a72e:	e9 29 01 00 00       	jmp    c001a85c <Vm::x87Handler(regs*)+0x6be>
c001a733:	90                   	nop
c001a734:	8d 50 38             	lea    edx,[eax+0x38]
c001a737:	80 fa 07             	cmp    dl,0x7
c001a73a:	77 3c                	ja     c001a778 <Vm::x87Handler(regs*)+0x5da>
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	2d c8 00 00 00       	sub    eax,0xc8
c001a744:	50                   	push   eax
c001a745:	e8 14 f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a74a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a751:	89 c6                	mov    esi,eax
c001a753:	89 d7                	mov    edi,edx
c001a755:	e8 04 f9 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a75a:	57                   	push   edi
c001a75b:	56                   	push   esi
c001a75c:	52                   	push   edx
c001a75d:	50                   	push   eax
c001a75e:	e8 aa f8 ff ff       	call   c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a763:	83 c4 1c             	add    esp,0x1c
c001a766:	52                   	push   edx
c001a767:	50                   	push   eax
c001a768:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a76c:	2d c8 00 00 00       	sub    eax,0xc8
c001a771:	e9 82 00 00 00       	jmp    c001a7f8 <Vm::x87Handler(regs*)+0x65a>
c001a776:	66 90                	xchg   ax,ax
c001a778:	3c f7                	cmp    al,0xf7
c001a77a:	76 38                	jbe    c001a7b4 <Vm::x87Handler(regs*)+0x616>
c001a77c:	83 ec 0c             	sub    esp,0xc
c001a77f:	6a 00                	push   0x0
c001a781:	e8 d8 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a786:	89 c6                	mov    esi,eax
c001a788:	89 d7                	mov    edi,edx
c001a78a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a78e:	2d f8 00 00 00       	sub    eax,0xf8
c001a793:	89 04 24             	mov    DWORD PTR [esp],eax
c001a796:	e8 c3 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a79b:	57                   	push   edi
c001a79c:	56                   	push   esi
c001a79d:	52                   	push   edx
c001a79e:	50                   	push   eax
c001a79f:	e8 88 f8 ff ff       	call   c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7a4:	83 c4 1c             	add    esp,0x1c
c001a7a7:	52                   	push   edx
c001a7a8:	50                   	push   eax
c001a7a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7ad:	2d f8 00 00 00       	sub    eax,0xf8
c001a7b2:	eb 44                	jmp    c001a7f8 <Vm::x87Handler(regs*)+0x65a>
c001a7b4:	8d 50 10             	lea    edx,[eax+0x10]
c001a7b7:	80 fa 07             	cmp    dl,0x7
c001a7ba:	0f 87 6c 01 00 00    	ja     c001a92c <Vm::x87Handler(regs*)+0x78e>
c001a7c0:	83 ec 0c             	sub    esp,0xc
c001a7c3:	2d f0 00 00 00       	sub    eax,0xf0
c001a7c8:	50                   	push   eax
c001a7c9:	e8 90 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a7ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7d5:	89 c6                	mov    esi,eax
c001a7d7:	89 d7                	mov    edi,edx
c001a7d9:	e8 80 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a7de:	57                   	push   edi
c001a7df:	56                   	push   esi
c001a7e0:	52                   	push   edx
c001a7e1:	50                   	push   eax
c001a7e2:	e8 45 f8 ff ff       	call   c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7e7:	83 c4 1c             	add    esp,0x1c
c001a7ea:	52                   	push   edx
c001a7eb:	50                   	push   eax
c001a7ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7f0:	2d f0 00 00 00       	sub    eax,0xf0
c001a7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7f8:	50                   	push   eax
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	e8 a0 f8 ff ff       	call   c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>
c001a801:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a805:	e8 41 f9 ff ff       	call   c001a14b <Vm::fpuPop()>
c001a80a:	e9 0d fa ff ff       	jmp    c001a21c <Vm::x87Handler(regs*)+0x7e>
c001a80f:	90                   	nop
c001a810:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a814:	8d 50 30             	lea    edx,[eax+0x30]
c001a817:	80 fa 07             	cmp    dl,0x7
c001a81a:	77 20                	ja     c001a83c <Vm::x87Handler(regs*)+0x69e>
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	6a 00                	push   0x0
c001a821:	e8 38 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a826:	83 c4 0c             	add    esp,0xc
c001a829:	52                   	push   edx
c001a82a:	50                   	push   eax
c001a82b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a82f:	2d d0 00 00 00       	sub    eax,0xd0
c001a834:	e9 df fd ff ff       	jmp    c001a618 <Vm::x87Handler(regs*)+0x47a>
c001a839:	8d 76 00             	lea    esi,[esi+0x0]
c001a83c:	8d 50 28             	lea    edx,[eax+0x28]
c001a83f:	80 fa 07             	cmp    dl,0x7
c001a842:	77 28                	ja     c001a86c <Vm::x87Handler(regs*)+0x6ce>
c001a844:	83 ec 0c             	sub    esp,0xc
c001a847:	6a 00                	push   0x0
c001a849:	e8 10 f8 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a84e:	83 c4 0c             	add    esp,0xc
c001a851:	52                   	push   edx
c001a852:	50                   	push   eax
c001a853:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a857:	2d d8 00 00 00       	sub    eax,0xd8
c001a85c:	50                   	push   eax
c001a85d:	e8 3f f8 ff ff       	call   c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>
c001a862:	e8 e4 f8 ff ff       	call   c001a14b <Vm::fpuPop()>
c001a867:	e9 ac f9 ff ff       	jmp    c001a218 <Vm::x87Handler(regs*)+0x7a>
c001a86c:	8d 50 20             	lea    edx,[eax+0x20]
c001a86f:	80 fa 07             	cmp    dl,0x7
c001a872:	77 30                	ja     c001a8a4 <Vm::x87Handler(regs*)+0x706>
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	2d e0 00 00 00       	sub    eax,0xe0
c001a87c:	50                   	push   eax
c001a87d:	e8 dc f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a882:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a889:	89 c6                	mov    esi,eax
c001a88b:	89 d7                	mov    edi,edx
c001a88d:	e8 cc f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a892:	57                   	push   edi
c001a893:	56                   	push   esi
c001a894:	52                   	push   edx
c001a895:	50                   	push   eax
c001a896:	e8 e3 f6 ff ff       	call   c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a89b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a89f:	e9 78 02 00 00       	jmp    c001ab1c <Vm::x87Handler(regs*)+0x97e>
c001a8a4:	8d 50 18             	lea    edx,[eax+0x18]
c001a8a7:	80 fa 07             	cmp    dl,0x7
c001a8aa:	0f 87 10 fb ff ff    	ja     c001a3c0 <Vm::x87Handler(regs*)+0x222>
c001a8b0:	83 ec 0c             	sub    esp,0xc
c001a8b3:	2d e8 00 00 00       	sub    eax,0xe8
c001a8b8:	50                   	push   eax
c001a8b9:	e8 a0 f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a8be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8c5:	89 c6                	mov    esi,eax
c001a8c7:	89 d7                	mov    edi,edx
c001a8c9:	e8 90 f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a8ce:	57                   	push   edi
c001a8cf:	56                   	push   esi
c001a8d0:	52                   	push   edx
c001a8d1:	50                   	push   eax
c001a8d2:	e8 a7 f6 ff ff       	call   c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a8d7:	83 c4 20             	add    esp,0x20
c001a8da:	e8 6c f8 ff ff       	call   c001a14b <Vm::fpuPop()>
c001a8df:	eb 6f                	jmp    c001a950 <Vm::x87Handler(regs*)+0x7b2>
c001a8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a8e8:	0f 85 22 01 00 00    	jne    c001aa10 <Vm::x87Handler(regs*)+0x872>
c001a8ee:	66 90                	xchg   ax,ax
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	6a 01                	push   0x1
c001a8f5:	e8 64 f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a8fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a901:	89 c6                	mov    esi,eax
c001a903:	89 d7                	mov    edi,edx
c001a905:	e8 54 f7 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a90a:	57                   	push   edi
c001a90b:	56                   	push   esi
c001a90c:	52                   	push   edx
c001a90d:	50                   	push   eax
c001a90e:	e8 6b f6 ff ff       	call   c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a913:	83 c4 20             	add    esp,0x20
c001a916:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a91a:	e8 2c f8 ff ff       	call   c001a14b <Vm::fpuPop()>
c001a91f:	e8 27 f8 ff ff       	call   c001a14b <Vm::fpuPop()>
c001a924:	e9 f7 f8 ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x82>
c001a929:	8d 76 00             	lea    esi,[esi+0x0]
c001a92c:	3c d9                	cmp    al,0xd9
c001a92e:	0f 85 e8 02 00 00    	jne    c001ac1c <Vm::x87Handler(regs*)+0xa7e>
c001a934:	eb ba                	jmp    c001a8f0 <Vm::x87Handler(regs*)+0x752>
c001a936:	66 90                	xchg   ax,ax
c001a938:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a93c:	0f 85 2a 03 00 00    	jne    c001ac6c <Vm::x87Handler(regs*)+0xace>
c001a942:	0f b7 05 60 96 02 c0 	movzx  eax,WORD PTR ds:0xc0029660
c001a949:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a94d:	8d 76 00             	lea    esi,[esi+0x0]
c001a950:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a954:	e9 c7 f8 ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x82>
c001a959:	8d 76 00             	lea    esi,[esi+0x0]
c001a95c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a960:	84 d2                	test   dl,dl
c001a962:	75 10                	jne    c001a974 <Vm::x87Handler(regs*)+0x7d6>
c001a964:	83 ec 0c             	sub    esp,0xc
c001a967:	ff 36                	push   DWORD PTR [esi]
c001a969:	e8 29 f4 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a96e:	e9 39 01 00 00       	jmp    c001aaac <Vm::x87Handler(regs*)+0x90e>
c001a973:	90                   	nop
c001a974:	80 fa 01             	cmp    dl,0x1
c001a977:	75 0f                	jne    c001a988 <Vm::x87Handler(regs*)+0x7ea>
c001a979:	83 ec 0c             	sub    esp,0xc
c001a97c:	ff 36                	push   DWORD PTR [esi]
c001a97e:	e8 14 f4 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a983:	e9 b4 02 00 00       	jmp    c001ac3c <Vm::x87Handler(regs*)+0xa9e>
c001a988:	80 fa 04             	cmp    dl,0x4
c001a98b:	75 0f                	jne    c001a99c <Vm::x87Handler(regs*)+0x7fe>
c001a98d:	83 ec 0c             	sub    esp,0xc
c001a990:	ff 36                	push   DWORD PTR [esi]
c001a992:	e8 00 f4 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a997:	e9 9c 01 00 00       	jmp    c001ab38 <Vm::x87Handler(regs*)+0x99a>
c001a99c:	80 fa 05             	cmp    dl,0x5
c001a99f:	75 1b                	jne    c001a9bc <Vm::x87Handler(regs*)+0x81e>
c001a9a1:	83 ec 0c             	sub    esp,0xc
c001a9a4:	6a 00                	push   0x0
c001a9a6:	e8 b3 f6 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a9ab:	89 c7                	mov    edi,eax
c001a9ad:	89 d5                	mov    ebp,edx
c001a9af:	58                   	pop    eax
c001a9b0:	ff 36                	push   DWORD PTR [esi]
c001a9b2:	e8 e0 f3 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a9b7:	e9 bc 01 00 00       	jmp    c001ab78 <Vm::x87Handler(regs*)+0x9da>
c001a9bc:	80 fa 06             	cmp    dl,0x6
c001a9bf:	75 0f                	jne    c001a9d0 <Vm::x87Handler(regs*)+0x832>
c001a9c1:	83 ec 0c             	sub    esp,0xc
c001a9c4:	ff 36                	push   DWORD PTR [esi]
c001a9c6:	e8 cc f3 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a9cb:	e9 cc 01 00 00       	jmp    c001ab9c <Vm::x87Handler(regs*)+0x9fe>
c001a9d0:	31 c0                	xor    eax,eax
c001a9d2:	80 fa 07             	cmp    dl,0x7
c001a9d5:	0f 85 d5 02 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001a9db:	83 ec 0c             	sub    esp,0xc
c001a9de:	6a 00                	push   0x0
c001a9e0:	e8 79 f6 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001a9e5:	89 c7                	mov    edi,eax
c001a9e7:	89 d5                	mov    ebp,edx
c001a9e9:	58                   	pop    eax
c001a9ea:	ff 36                	push   DWORD PTR [esi]
c001a9ec:	e8 a6 f3 ff ff       	call   c0019d97 <Vm::fpu32ToInternal(unsigned int)>
c001a9f1:	e9 ee 01 00 00       	jmp    c001abe4 <Vm::x87Handler(regs*)+0xa46>
c001a9f6:	66 90                	xchg   ax,ax
c001a9f8:	80 fa 03             	cmp    dl,0x3
c001a9fb:	0f 85 f7 01 00 00    	jne    c001abf8 <Vm::x87Handler(regs*)+0xa5a>
c001aa01:	e8 45 f7 ff ff       	call   c001a14b <Vm::fpuPop()>
c001aa06:	51                   	push   ecx
c001aa07:	51                   	push   ecx
c001aa08:	e9 03 02 00 00       	jmp    c001ac10 <Vm::x87Handler(regs*)+0xa72>
c001aa0d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa10:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa14:	80 fa 01             	cmp    dl,0x1
c001aa17:	75 0b                	jne    c001aa24 <Vm::x87Handler(regs*)+0x886>
c001aa19:	57                   	push   edi
c001aa1a:	57                   	push   edi
c001aa1b:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa1d:	e9 0e 02 00 00       	jmp    c001ac30 <Vm::x87Handler(regs*)+0xa92>
c001aa22:	66 90                	xchg   ax,ax
c001aa24:	80 fa 04             	cmp    dl,0x4
c001aa27:	75 13                	jne    c001aa3c <Vm::x87Handler(regs*)+0x89e>
c001aa29:	31 d2                	xor    edx,edx
c001aa2b:	51                   	push   ecx
c001aa2c:	51                   	push   ecx
c001aa2d:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa2f:	52                   	push   edx
c001aa30:	50                   	push   eax
c001aa31:	e8 4a f4 ff ff       	call   c0019e80 <Vm::fpuLongToFloat(long long)>
c001aa36:	e9 fd 00 00 00       	jmp    c001ab38 <Vm::x87Handler(regs*)+0x99a>
c001aa3b:	90                   	nop
c001aa3c:	31 c0                	xor    eax,eax
c001aa3e:	80 fa 07             	cmp    dl,0x7
c001aa41:	0f 85 69 02 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001aa47:	83 ec 0c             	sub    esp,0xc
c001aa4a:	6a 00                	push   0x0
c001aa4c:	e8 0d f6 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001aa51:	89 c7                	mov    edi,eax
c001aa53:	89 d5                	mov    ebp,edx
c001aa55:	58                   	pop    eax
c001aa56:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa58:	5a                   	pop    edx
c001aa59:	31 d2                	xor    edx,edx
c001aa5b:	52                   	push   edx
c001aa5c:	50                   	push   eax
c001aa5d:	e8 1e f4 ff ff       	call   c0019e80 <Vm::fpuLongToFloat(long long)>
c001aa62:	e9 7d 01 00 00       	jmp    c001abe4 <Vm::x87Handler(regs*)+0xa46>
c001aa67:	90                   	nop
c001aa68:	84 d2                	test   dl,dl
c001aa6a:	75 10                	jne    c001aa7c <Vm::x87Handler(regs*)+0x8de>
c001aa6c:	31 d2                	xor    edx,edx
c001aa6e:	55                   	push   ebp
c001aa6f:	55                   	push   ebp
c001aa70:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa72:	52                   	push   edx
c001aa73:	50                   	push   eax
c001aa74:	e9 03 02 00 00       	jmp    c001ac7c <Vm::x87Handler(regs*)+0xade>
c001aa79:	8d 76 00             	lea    esi,[esi+0x0]
c001aa7c:	31 c0                	xor    eax,eax
c001aa7e:	80 fa 02             	cmp    dl,0x2
c001aa81:	0f 85 29 02 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001aa87:	83 ec 0c             	sub    esp,0xc
c001aa8a:	6a 00                	push   0x0
c001aa8c:	e8 cd f5 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001aa91:	59                   	pop    ecx
c001aa92:	5f                   	pop    edi
c001aa93:	e9 18 f9 ff ff       	jmp    c001a3b0 <Vm::x87Handler(regs*)+0x212>
c001aa98:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa9c:	84 d2                	test   dl,dl
c001aa9e:	75 2c                	jne    c001aacc <Vm::x87Handler(regs*)+0x92e>
c001aaa0:	50                   	push   eax
c001aaa1:	50                   	push   eax
c001aaa2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaa5:	ff 36                	push   DWORD PTR [esi]
c001aaa7:	e8 30 f3 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001aaac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aab3:	89 c6                	mov    esi,eax
c001aab5:	89 d7                	mov    edi,edx
c001aab7:	e8 a2 f5 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001aabc:	57                   	push   edi
c001aabd:	56                   	push   esi
c001aabe:	52                   	push   edx
c001aabf:	50                   	push   eax
c001aac0:	e8 0f f5 ff ff       	call   c0019fd4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aac5:	e9 8e 01 00 00       	jmp    c001ac58 <Vm::x87Handler(regs*)+0xaba>
c001aaca:	66 90                	xchg   ax,ax
c001aacc:	80 fa 01             	cmp    dl,0x1
c001aacf:	75 13                	jne    c001aae4 <Vm::x87Handler(regs*)+0x946>
c001aad1:	50                   	push   eax
c001aad2:	50                   	push   eax
c001aad3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aad6:	ff 36                	push   DWORD PTR [esi]
c001aad8:	e8 ff f2 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001aadd:	e9 5a 01 00 00       	jmp    c001ac3c <Vm::x87Handler(regs*)+0xa9e>
c001aae2:	66 90                	xchg   ax,ax
c001aae4:	80 fa 02             	cmp    dl,0x2
c001aae7:	0f 85 03 f9 ff ff    	jne    c001a3f0 <Vm::x87Handler(regs*)+0x252>
c001aaed:	55                   	push   ebp
c001aaee:	55                   	push   ebp
c001aaef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaf2:	ff 36                	push   DWORD PTR [esi]
c001aaf4:	e8 e3 f2 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001aaf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab00:	89 c6                	mov    esi,eax
c001ab02:	89 d7                	mov    edi,edx
c001ab04:	e8 55 f5 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001ab09:	57                   	push   edi
c001ab0a:	56                   	push   esi
c001ab0b:	52                   	push   edx
c001ab0c:	50                   	push   eax
c001ab0d:	e8 6c f4 ff ff       	call   c0019f7e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab16:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab19:	8d 76 00             	lea    esi,[esi+0x0]
c001ab1c:	83 c4 20             	add    esp,0x20
c001ab1f:	e9 fc f6 ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x82>
c001ab24:	80 fa 04             	cmp    dl,0x4
c001ab27:	75 2f                	jne    c001ab58 <Vm::x87Handler(regs*)+0x9ba>
c001ab29:	51                   	push   ecx
c001ab2a:	51                   	push   ecx
c001ab2b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab2e:	ff 36                	push   DWORD PTR [esi]
c001ab30:	e8 a7 f2 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001ab35:	8d 76 00             	lea    esi,[esi+0x0]
c001ab38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab3f:	89 c6                	mov    esi,eax
c001ab41:	89 d7                	mov    edi,edx
c001ab43:	e8 16 f5 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001ab48:	57                   	push   edi
c001ab49:	56                   	push   esi
c001ab4a:	52                   	push   edx
c001ab4b:	50                   	push   eax
c001ab4c:	e8 ad f4 ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab51:	e9 02 01 00 00       	jmp    c001ac58 <Vm::x87Handler(regs*)+0xaba>
c001ab56:	66 90                	xchg   ax,ax
c001ab58:	80 fa 05             	cmp    dl,0x5
c001ab5b:	75 2b                	jne    c001ab88 <Vm::x87Handler(regs*)+0x9ea>
c001ab5d:	83 ec 0c             	sub    esp,0xc
c001ab60:	6a 00                	push   0x0
c001ab62:	e8 f7 f4 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001ab67:	89 c7                	mov    edi,eax
c001ab69:	89 d5                	mov    ebp,edx
c001ab6b:	58                   	pop    eax
c001ab6c:	5a                   	pop    edx
c001ab6d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab70:	ff 36                	push   DWORD PTR [esi]
c001ab72:	e8 65 f2 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001ab77:	90                   	nop
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	55                   	push   ebp
c001ab7c:	57                   	push   edi
c001ab7d:	52                   	push   edx
c001ab7e:	50                   	push   eax
c001ab7f:	e8 7a f4 ff ff       	call   c0019ffe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab84:	eb 6a                	jmp    c001abf0 <Vm::x87Handler(regs*)+0xa52>
c001ab86:	66 90                	xchg   ax,ax
c001ab88:	80 fa 06             	cmp    dl,0x6
c001ab8b:	75 2f                	jne    c001abbc <Vm::x87Handler(regs*)+0xa1e>
c001ab8d:	51                   	push   ecx
c001ab8e:	51                   	push   ecx
c001ab8f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab92:	ff 36                	push   DWORD PTR [esi]
c001ab94:	e8 43 f2 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001ab99:	8d 76 00             	lea    esi,[esi+0x0]
c001ab9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aba3:	89 c6                	mov    esi,eax
c001aba5:	89 d7                	mov    edi,edx
c001aba7:	e8 b2 f4 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001abac:	57                   	push   edi
c001abad:	56                   	push   esi
c001abae:	52                   	push   edx
c001abaf:	50                   	push   eax
c001abb0:	e8 77 f4 ff ff       	call   c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abb5:	e9 9e 00 00 00       	jmp    c001ac58 <Vm::x87Handler(regs*)+0xaba>
c001abba:	66 90                	xchg   ax,ax
c001abbc:	31 c0                	xor    eax,eax
c001abbe:	80 fa 07             	cmp    dl,0x7
c001abc1:	0f 85 e9 00 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001abc7:	83 ec 0c             	sub    esp,0xc
c001abca:	6a 00                	push   0x0
c001abcc:	e8 8d f4 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001abd1:	89 c7                	mov    edi,eax
c001abd3:	89 d5                	mov    ebp,edx
c001abd5:	58                   	pop    eax
c001abd6:	5a                   	pop    edx
c001abd7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abda:	ff 36                	push   DWORD PTR [esi]
c001abdc:	e8 fb f1 ff ff       	call   c0019ddc <Vm::fpu64ToInternal(unsigned long long)>
c001abe1:	8d 76 00             	lea    esi,[esi+0x0]
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	55                   	push   ebp
c001abe8:	57                   	push   edi
c001abe9:	52                   	push   edx
c001abea:	50                   	push   eax
c001abeb:	e8 3c f4 ff ff       	call   c001a02c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abf0:	83 c4 0c             	add    esp,0xc
c001abf3:	eb 67                	jmp    c001ac5c <Vm::x87Handler(regs*)+0xabe>
c001abf5:	8d 76 00             	lea    esi,[esi+0x0]
c001abf8:	31 c0                	xor    eax,eax
c001abfa:	80 fa 02             	cmp    dl,0x2
c001abfd:	0f 85 ad 00 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001ac03:	83 ec 0c             	sub    esp,0xc
c001ac06:	6a 00                	push   0x0
c001ac08:	e8 51 f4 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001ac0d:	59                   	pop    ecx
c001ac0e:	5f                   	pop    edi
c001ac0f:	90                   	nop
c001ac10:	52                   	push   edx
c001ac11:	50                   	push   eax
c001ac12:	e8 77 f1 ff ff       	call   c0019d8e <Vm::fpuInternalTo64(unsigned long long)>
c001ac17:	e9 84 00 00 00       	jmp    c001aca0 <Vm::x87Handler(regs*)+0xb02>
c001ac1c:	31 c0                	xor    eax,eax
c001ac1e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ac23:	0f 85 87 00 00 00    	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001ac29:	50                   	push   eax
c001ac2a:	50                   	push   eax
c001ac2b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ac2e:	66 90                	xchg   ax,ax
c001ac30:	31 d2                	xor    edx,edx
c001ac32:	52                   	push   edx
c001ac33:	50                   	push   eax
c001ac34:	e8 47 f2 ff ff       	call   c0019e80 <Vm::fpuLongToFloat(long long)>
c001ac39:	8d 76 00             	lea    esi,[esi+0x0]
c001ac3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac43:	89 c6                	mov    esi,eax
c001ac45:	89 d7                	mov    edi,edx
c001ac47:	e8 12 f4 ff ff       	call   c001a05e <Vm::fpuGetReg(int)>
c001ac4c:	57                   	push   edi
c001ac4d:	56                   	push   esi
c001ac4e:	52                   	push   edx
c001ac4f:	50                   	push   eax
c001ac50:	e8 b8 f3 ff ff       	call   c001a00d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ac55:	8d 76 00             	lea    esi,[esi+0x0]
c001ac58:	83 c4 1c             	add    esp,0x1c
c001ac5b:	90                   	nop
c001ac5c:	52                   	push   edx
c001ac5d:	50                   	push   eax
c001ac5e:	6a 00                	push   0x0
c001ac60:	e8 3c f4 ff ff       	call   c001a0a1 <Vm::fpuSetReg(int, unsigned long long)>
c001ac65:	e9 7a f7 ff ff       	jmp    c001a3e4 <Vm::x87Handler(regs*)+0x246>
c001ac6a:	66 90                	xchg   ax,ax
c001ac6c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac70:	80 fa 05             	cmp    dl,0x5
c001ac73:	75 13                	jne    c001ac88 <Vm::x87Handler(regs*)+0xaea>
c001ac75:	55                   	push   ebp
c001ac76:	55                   	push   ebp
c001ac77:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac7a:	ff 36                	push   DWORD PTR [esi]
c001ac7c:	e8 c3 f1 ff ff       	call   c0019e44 <Vm::fpuULongToFloat(unsigned long long)>
c001ac81:	e9 52 f7 ff ff       	jmp    c001a3d8 <Vm::x87Handler(regs*)+0x23a>
c001ac86:	66 90                	xchg   ax,ax
c001ac88:	31 c0                	xor    eax,eax
c001ac8a:	80 fa 07             	cmp    dl,0x7
c001ac8d:	75 21                	jne    c001acb0 <Vm::x87Handler(regs*)+0xb12>
c001ac8f:	e8 b7 f4 ff ff       	call   c001a14b <Vm::fpuPop()>
c001ac94:	51                   	push   ecx
c001ac95:	51                   	push   ecx
c001ac96:	52                   	push   edx
c001ac97:	50                   	push   eax
c001ac98:	e8 48 f1 ff ff       	call   c0019de5 <Vm::fpuFloatToLong(unsigned long long)>
c001ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aca0:	83 c4 10             	add    esp,0x10
c001aca3:	89 06                	mov    DWORD PTR [esi],eax
c001aca5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001aca8:	e9 7b f7 ff ff       	jmp    c001a428 <Vm::x87Handler(regs*)+0x28a>
c001acad:	8d 76 00             	lea    esi,[esi+0x0]
c001acb0:	83 c4 1c             	add    esp,0x1c
c001acb3:	5b                   	pop    ebx
c001acb4:	5e                   	pop    esi
c001acb5:	5f                   	pop    edi
c001acb6:	5d                   	pop    ebp
c001acb7:	c3                   	ret    

c001acb8 <__static_initialization_and_destruction_0(int, int)>:
c001acb8:	83 ec 0c             	sub    esp,0xc
c001acbb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001acc0:	75 1a                	jne    c001acdc <__static_initialization_and_destruction_0(int, int)+0x24>
c001acc2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001acca:	75 10                	jne    c001acdc <__static_initialization_and_destruction_0(int, int)+0x24>
c001accc:	83 ec 0c             	sub    esp,0xc
c001accf:	68 60 96 02 c0       	push   0xc0029660
c001acd4:	e8 af 84 00 00       	call   c0023188 <Vm::_FPUState::_FPUState()>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	90                   	nop
c001acdd:	83 c4 0c             	add    esp,0xc
c001ace0:	c3                   	ret    
c001ace1:	8d 76 00             	lea    esi,[esi+0x0]

c001ace4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	83 ec 08             	sub    esp,0x8
c001acea:	68 ff ff 00 00       	push   0xffff
c001acef:	6a 01                	push   0x1
c001acf1:	e8 c2 ff ff ff       	call   c001acb8 <__static_initialization_and_destruction_0(int, int)>
c001acf6:	83 c4 10             	add    esp,0x10
c001acf9:	83 c4 0c             	add    esp,0xc
c001acfc:	c3                   	ret    
c001acfd:	66 90                	xchg   ax,ax
c001acff:	90                   	nop

c001ad00 <FAT::getName()>:
c001ad00:	b8 08 64 02 c0       	mov    eax,0xc0026408
c001ad05:	c3                   	ret    
c001ad06:	66 90                	xchg   ax,ax

c001ad08 <FAT::tell(void*, unsigned long long*)>:
c001ad08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad0d:	75 09                	jne    c001ad18 <FAT::tell(void*, unsigned long long*)+0x10>
c001ad0f:	b8 04 00 00 00       	mov    eax,0x4
c001ad14:	c3                   	ret    
c001ad15:	8d 76 00             	lea    esi,[esi+0x0]
c001ad18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad1d:	75 09                	jne    c001ad28 <FAT::tell(void*, unsigned long long*)+0x20>
c001ad1f:	b8 04 00 00 00       	mov    eax,0x4
c001ad24:	c3                   	ret    
c001ad25:	8d 76 00             	lea    esi,[esi+0x0]
c001ad28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad2c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ad2f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ad32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad36:	89 01                	mov    DWORD PTR [ecx],eax
c001ad38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad3b:	b8 00 00 00 00       	mov    eax,0x0
c001ad40:	c3                   	ret    
c001ad41:	90                   	nop
c001ad42:	66 90                	xchg   ax,ax

c001ad44 <FAT::stat(void*, unsigned long long*)>:
c001ad44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad49:	75 09                	jne    c001ad54 <FAT::stat(void*, unsigned long long*)+0x10>
c001ad4b:	b8 04 00 00 00       	mov    eax,0x4
c001ad50:	c3                   	ret    
c001ad51:	8d 76 00             	lea    esi,[esi+0x0]
c001ad54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad59:	75 09                	jne    c001ad64 <FAT::stat(void*, unsigned long long*)+0x20>
c001ad5b:	b8 04 00 00 00       	mov    eax,0x4
c001ad60:	c3                   	ret    
c001ad61:	8d 76 00             	lea    esi,[esi+0x0]
c001ad64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ad6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ad6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad72:	89 01                	mov    DWORD PTR [ecx],eax
c001ad74:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad77:	b8 00 00 00 00       	mov    eax,0x0
c001ad7c:	c3                   	ret    
c001ad7d:	90                   	nop
c001ad7e:	66 90                	xchg   ax,ax

c001ad80 <FAT::~FAT()>:
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	ba 54 64 02 c0       	mov    edx,0xc0026454
c001ad88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8c:	89 10                	mov    DWORD PTR [eax],edx
c001ad8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad92:	83 ec 0c             	sub    esp,0xc
c001ad95:	50                   	push   eax
c001ad96:	e8 9b 22 ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	90                   	nop
c001ad9f:	83 c4 0c             	add    esp,0xc
c001ada2:	c3                   	ret    
c001ada3:	90                   	nop

c001ada4 <FAT::~FAT()>:
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	83 ec 0c             	sub    esp,0xc
c001adaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adae:	e8 cd ff ff ff       	call   c001ad80 <FAT::~FAT()>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	83 ec 08             	sub    esp,0x8
c001adb9:	6a 08                	push   0x8
c001adbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adbf:	e8 56 1e ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001adc4:	83 c4 10             	add    esp,0x10
c001adc7:	83 c4 0c             	add    esp,0xc
c001adca:	c3                   	ret    
c001adcb:	90                   	nop

c001adcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001adcc:	83 ec 1c             	sub    esp,0x1c
c001adcf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001add6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001addb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001addf:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001ade6:	83 f8 ff             	cmp    eax,0xffffffff
c001ade9:	75 35                	jne    c001ae20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001adeb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adef:	88 c2                	mov    dl,al
c001adf1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001adf6:	01 d0                	add    eax,edx
c001adf8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adfc:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c001ae02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae06:	89 14 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],edx
c001ae0d:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001ae12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae16:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001ae1d:	eb 19                	jmp    c001ae38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ae1f:	90                   	nop
c001ae20:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae24:	88 c2                	mov    dl,al
c001ae26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae2a:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001ae31:	01 d0                	add    eax,edx
c001ae33:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae37:	90                   	nop
c001ae38:	83 ec 04             	sub    esp,0x4
c001ae3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae43:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ae47:	50                   	push   eax
c001ae48:	e8 e5 bd fe ff       	call   c0006c32 <f_getlabel>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae59:	75 09                	jne    c001ae64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ae5b:	b8 00 00 00 00       	mov    eax,0x0
c001ae60:	eb 0a                	jmp    c001ae6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ae62:	66 90                	xchg   ax,ax
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	8d 76 00             	lea    esi,[esi+0x0]
c001ae6c:	83 c4 1c             	add    esp,0x1c
c001ae6f:	c3                   	ret    

c001ae70 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ae70:	57                   	push   edi
c001ae71:	83 ec 58             	sub    esp,0x58
c001ae74:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ae7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ae80:	b9 0f 00 00 00       	mov    ecx,0xf
c001ae85:	b8 00 00 00 00       	mov    eax,0x0
c001ae8a:	fc                   	cld    
c001ae8b:	89 d7                	mov    edi,edx
c001ae8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae8f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae93:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001ae9a:	83 f8 ff             	cmp    eax,0xffffffff
c001ae9d:	75 35                	jne    c001aed4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001ae9f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aea3:	88 c2                	mov    dl,al
c001aea5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001aeaa:	01 d0                	add    eax,edx
c001aeac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeb0:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c001aeb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aeba:	89 14 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],edx
c001aec1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001aec6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001aeca:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001aed1:	eb 19                	jmp    c001aeec <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001aed3:	90                   	nop
c001aed4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aed8:	88 c2                	mov    dl,al
c001aeda:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aede:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001aee5:	01 d0                	add    eax,edx
c001aee7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeeb:	90                   	nop
c001aeec:	83 ec 08             	sub    esp,0x8
c001aeef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001aef3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aef7:	50                   	push   eax
c001aef8:	e8 83 59 fe ff       	call   c0000880 <strcat>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af07:	50                   	push   eax
c001af08:	e8 13 bf fe ff       	call   c0006e20 <f_setlabel>
c001af0d:	83 c4 10             	add    esp,0x10
c001af10:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af14:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001af19:	75 09                	jne    c001af24 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001af1b:	b8 00 00 00 00       	mov    eax,0x0
c001af20:	eb 0a                	jmp    c001af2c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001af22:	66 90                	xchg   ax,ax
c001af24:	b8 01 00 00 00       	mov    eax,0x1
c001af29:	8d 76 00             	lea    esi,[esi+0x0]
c001af2c:	83 c4 58             	add    esp,0x58
c001af2f:	5f                   	pop    edi
c001af30:	c3                   	ret    
c001af31:	90                   	nop
c001af32:	66 90                	xchg   ax,ax

c001af34 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001af34:	83 ec 2c             	sub    esp,0x2c
c001af37:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001af3f:	83 ec 08             	sub    esp,0x8
c001af42:	68 2c 64 02 c0       	push   0xc002642c
c001af47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af4b:	e8 7c 58 fe ff       	call   c00007cc <strcmp>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	85 c0                	test   eax,eax
c001af55:	0f 94 c0             	sete   al
c001af58:	84 c0                	test   al,al
c001af5a:	74 10                	je     c001af6c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001af5c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af64:	e9 b3 00 00 00       	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af69:	8d 76 00             	lea    esi,[esi+0x0]
c001af6c:	83 ec 08             	sub    esp,0x8
c001af6f:	68 1e 64 02 c0       	push   0xc002641e
c001af74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af78:	e8 4f 58 fe ff       	call   c00007cc <strcmp>
c001af7d:	83 c4 10             	add    esp,0x10
c001af80:	85 c0                	test   eax,eax
c001af82:	0f 94 c0             	sete   al
c001af85:	84 c0                	test   al,al
c001af87:	74 0f                	je     c001af98 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001af89:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af91:	e9 86 00 00 00       	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af96:	66 90                	xchg   ax,ax
c001af98:	83 ec 08             	sub    esp,0x8
c001af9b:	68 24 64 02 c0       	push   0xc0026424
c001afa0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afa4:	e8 23 58 fe ff       	call   c00007cc <strcmp>
c001afa9:	83 c4 10             	add    esp,0x10
c001afac:	85 c0                	test   eax,eax
c001afae:	0f 94 c0             	sete   al
c001afb1:	84 c0                	test   al,al
c001afb3:	74 0b                	je     c001afc0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001afb5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afbd:	eb 5d                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afbf:	90                   	nop
c001afc0:	83 ec 08             	sub    esp,0x8
c001afc3:	68 ec 38 02 c0       	push   0xc00238ec
c001afc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afcc:	e8 fb 57 fe ff       	call   c00007cc <strcmp>
c001afd1:	83 c4 10             	add    esp,0x10
c001afd4:	85 c0                	test   eax,eax
c001afd6:	0f 94 c0             	sete   al
c001afd9:	84 c0                	test   al,al
c001afdb:	74 0b                	je     c001afe8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001afdd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001afe5:	eb 35                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afe7:	90                   	nop
c001afe8:	83 ec 08             	sub    esp,0x8
c001afeb:	68 2a 64 02 c0       	push   0xc002642a
c001aff0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aff4:	e8 d3 57 fe ff       	call   c00007cc <strcmp>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	85 c0                	test   eax,eax
c001affe:	0f 94 c0             	sete   al
c001b001:	84 c0                	test   al,al
c001b003:	74 0b                	je     c001b010 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b005:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b00d:	eb 0d                	jmp    c001b01c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b00f:	90                   	nop
c001b010:	b8 08 00 00 00       	mov    eax,0x8
c001b015:	e9 ea 00 00 00       	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b01a:	66 90                	xchg   ax,ax
c001b01c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b023:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b02c:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001b033:	83 f8 ff             	cmp    eax,0xffffffff
c001b036:	75 34                	jne    c001b06c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b038:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b03c:	88 c2                	mov    dl,al
c001b03e:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b043:	01 d0                	add    eax,edx
c001b045:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b049:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c001b04f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b053:	89 14 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],edx
c001b05a:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b05f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b063:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001b06a:	eb 18                	jmp    c001b084 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b06c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b070:	88 c2                	mov    dl,al
c001b072:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b076:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001b07d:	01 d0                	add    eax,edx
c001b07f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b083:	90                   	nop
c001b084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b088:	88 04 24             	mov    BYTE PTR [esp],al
c001b08b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b08f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b093:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b09b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b0a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0a8:	83 ec 0c             	sub    esp,0xc
c001b0ab:	68 00 20 00 00       	push   0x2000
c001b0b0:	e8 5a e9 fe ff       	call   c0009a0f <malloc>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0bc:	68 00 20 00 00       	push   0x2000
c001b0c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0c9:	50                   	push   eax
c001b0ca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b0ce:	50                   	push   eax
c001b0cf:	e8 cd c3 fe ff       	call   c00074a1 <f_mkfs>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0db:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b0e0:	75 0a                	jne    c001b0ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b0e2:	b8 00 00 00 00       	mov    eax,0x0
c001b0e7:	eb 1b                	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b0f1:	75 09                	jne    c001b0fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b0f3:	b8 09 00 00 00       	mov    eax,0x9
c001b0f8:	eb 0a                	jmp    c001b104 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0fa:	66 90                	xchg   ax,ax
c001b0fc:	b8 01 00 00 00       	mov    eax,0x1
c001b101:	8d 76 00             	lea    esi,[esi+0x0]
c001b104:	83 c4 2c             	add    esp,0x2c
c001b107:	c3                   	ret    

c001b108 <FAT::tryMount(LogicalDisk*, int)>:
c001b108:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b10e:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b113:	83 f8 14             	cmp    eax,0x14
c001b116:	75 18                	jne    c001b130 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	68 30 64 02 c0       	push   0xc0026430
c001b120:	e8 9e 98 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	b0 00                	mov    al,0x0
c001b12a:	e9 e9 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b12f:	90                   	nop
c001b130:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b137:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b13d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b143:	3d 00 02 00 00       	cmp    eax,0x200
c001b148:	74 0a                	je     c001b154 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b14a:	b0 00                	mov    al,0x0
c001b14c:	e9 c7 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b151:	8d 76 00             	lea    esi,[esi+0x0]
c001b154:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b15c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b163:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001b16a:	83 f8 ff             	cmp    eax,0xffffffff
c001b16d:	74 09                	je     c001b178 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b16f:	b0 01                	mov    al,0x1
c001b171:	e9 a2 01 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b176:	66 90                	xchg   ax,ax
c001b178:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b182:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b18a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b191:	88 c2                	mov    dl,al
c001b193:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b198:	01 d0                	add    eax,edx
c001b19a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b1a1:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c001b1a7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1ae:	89 14 85 e0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6920],edx
c001b1b5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b1ba:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b1c1:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001b1c8:	83 ec 0c             	sub    esp,0xc
c001b1cb:	68 54 02 00 00       	push   0x254
c001b1d0:	e8 3a e8 fe ff       	call   c0009a0f <malloc>
c001b1d5:	83 c4 10             	add    esp,0x10
c001b1d8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b1df:	83 ec 04             	sub    esp,0x4
c001b1e2:	6a 00                	push   0x0
c001b1e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b1eb:	50                   	push   eax
c001b1ec:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b1f3:	e8 31 9c fe ff       	call   c0004e29 <f_mount>
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b202:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b20a:	74 1c                	je     c001b228 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b20c:	83 ec 0c             	sub    esp,0xc
c001b20f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b216:	e8 14 e8 fe ff       	call   c0009a2f <rfree>
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	b0 00                	mov    al,0x0
c001b220:	e9 f3 00 00 00       	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b225:	8d 76 00             	lea    esi,[esi+0x0]
c001b228:	83 ec 04             	sub    esp,0x4
c001b22b:	68 00 01 00 00       	push   0x100
c001b230:	6a 00                	push   0x0
c001b232:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b239:	50                   	push   eax
c001b23a:	e8 45 54 fe ff       	call   c0000684 <memset>
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	83 ec 08             	sub    esp,0x8
c001b245:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b24c:	50                   	push   eax
c001b24d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b254:	50                   	push   eax
c001b255:	e8 26 56 fe ff       	call   c0000880 <strcat>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	83 ec 08             	sub    esp,0x8
c001b260:	68 3e 64 02 c0       	push   0xc002643e
c001b265:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b26c:	50                   	push   eax
c001b26d:	e8 0e 56 fe ff       	call   c0000880 <strcat>
c001b272:	83 c4 10             	add    esp,0x10
c001b275:	83 ec 04             	sub    esp,0x4
c001b278:	6a 01                	push   0x1
c001b27a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b281:	50                   	push   eax
c001b282:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b286:	50                   	push   eax
c001b287:	e8 ff 9b fe ff       	call   c0004e8b <f_open>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b296:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b29d:	85 c0                	test   eax,eax
c001b29f:	74 0b                	je     c001b2ac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b2a1:	78 31                	js     c001b2d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2a3:	83 e8 04             	sub    eax,0x4
c001b2a6:	83 f8 01             	cmp    eax,0x1
c001b2a9:	77 29                	ja     c001b2d4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2ab:	90                   	nop
c001b2ac:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b2bb:	50                   	push   eax
c001b2bc:	e8 1c a7 fe ff       	call   c00059dd <f_close>
c001b2c1:	83 c4 10             	add    esp,0x10
c001b2c4:	90                   	nop
c001b2c5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b2cd:	74 41                	je     c001b310 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b2cf:	eb 33                	jmp    c001b304 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2de:	e8 4c e7 fe ff       	call   c0009a2f <rfree>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	83 ec 04             	sub    esp,0x4
c001b2e9:	6a 00                	push   0x0
c001b2eb:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2f2:	50                   	push   eax
c001b2f3:	6a 00                	push   0x0
c001b2f5:	e8 2f 9b fe ff       	call   c0004e29 <f_mount>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	b0 00                	mov    al,0x0
c001b2ff:	eb 17                	jmp    c001b318 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b301:	8d 76 00             	lea    esi,[esi+0x0]
c001b304:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001b309:	40                   	inc    eax
c001b30a:	a3 c0 96 02 c0       	mov    ds:0xc00296c0,eax
c001b30f:	90                   	nop
c001b310:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b317:	90                   	nop
c001b318:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b31e:	c3                   	ret    
c001b31f:	90                   	nop

c001b320 <FAT::allocateSwapfile(char const*, int)>:
c001b320:	55                   	push   ebp
c001b321:	57                   	push   edi
c001b322:	56                   	push   esi
c001b323:	53                   	push   ebx
c001b324:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b32a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b335:	83 ec 0c             	sub    esp,0xc
c001b338:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b33f:	e8 cb e6 fe ff       	call   c0009a0f <malloc>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	89 c7                	mov    edi,eax
c001b349:	a1 f0 95 02 c0       	mov    eax,ds:0xc00295f0
c001b34e:	83 ec 04             	sub    esp,0x4
c001b351:	50                   	push   eax
c001b352:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b359:	57                   	push   edi
c001b35a:	e8 07 1f ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001b35f:	83 c4 10             	add    esp,0x10
c001b362:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b369:	83 ec 04             	sub    esp,0x4
c001b36c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b370:	50                   	push   eax
c001b371:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b375:	50                   	push   eax
c001b376:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b37d:	e8 52 22 ff ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b38c:	c1 e0 14             	shl    eax,0x14
c001b38f:	89 c7                	mov    edi,eax
c001b391:	89 c5                	mov    ebp,eax
c001b393:	c1 fd 1f             	sar    ebp,0x1f
c001b396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b39e:	89 f9                	mov    ecx,edi
c001b3a0:	31 c1                	xor    ecx,eax
c001b3a2:	89 cb                	mov    ebx,ecx
c001b3a4:	89 e9                	mov    ecx,ebp
c001b3a6:	31 d1                	xor    ecx,edx
c001b3a8:	89 ce                	mov    esi,ecx
c001b3aa:	89 f0                	mov    eax,esi
c001b3ac:	09 d8                	or     eax,ebx
c001b3ae:	0f 84 98 00 00 00    	je     c001b44c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b3b4:	83 ec 0c             	sub    esp,0xc
c001b3b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3be:	e8 dd 20 ff ff       	call   c000d4a0 <File::unlink()>
c001b3c3:	83 c4 10             	add    esp,0x10
c001b3c6:	83 ec 08             	sub    esp,0x8
c001b3c9:	6a 12                	push   0x12
c001b3cb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3d2:	e8 51 1f ff ff       	call   c000d328 <File::open(FileOpenMode)>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3e1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3e7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3ee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3f5:	c1 e0 14             	shl    eax,0x14
c001b3f8:	99                   	cdq    
c001b3f9:	6a 01                	push   0x1
c001b3fb:	52                   	push   edx
c001b3fc:	50                   	push   eax
c001b3fd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b404:	e8 84 bc fe ff       	call   c000708d <f_expand>
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b413:	8b 00                	mov    eax,DWORD PTR [eax]
c001b415:	83 c0 10             	add    eax,0x10
c001b418:	8b 00                	mov    eax,DWORD PTR [eax]
c001b41a:	83 ec 0c             	sub    esp,0xc
c001b41d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b421:	52                   	push   edx
c001b422:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b426:	52                   	push   edx
c001b427:	6a 00                	push   0x0
c001b429:	68 00 04 00 00       	push   0x400
c001b42e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b435:	ff d0                	call   eax
c001b437:	83 c4 20             	add    esp,0x20
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b444:	e8 3d 1f ff ff       	call   c000d386 <File::close()>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	83 ec 08             	sub    esp,0x8
c001b44f:	6a 01                	push   0x1
c001b451:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b458:	e8 cb 1e ff ff       	call   c000d328 <File::open(FileOpenMode)>
c001b45d:	83 c4 10             	add    esp,0x10
c001b460:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b467:	8b 00                	mov    eax,DWORD PTR [eax]
c001b469:	83 c0 0c             	add    eax,0xc
c001b46c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b46e:	83 ec 0c             	sub    esp,0xc
c001b471:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b475:	52                   	push   edx
c001b476:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b47a:	52                   	push   edx
c001b47b:	6a 00                	push   0x0
c001b47d:	6a 04                	push   0x4
c001b47f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b486:	ff d0                	call   eax
c001b488:	83 c4 20             	add    esp,0x20
c001b48b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b492:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b498:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b49f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b4a6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b4a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b4ac:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4bd:	e8 c4 1e ff ff       	call   c000d386 <File::close()>
c001b4c2:	83 c4 10             	add    esp,0x10
c001b4c5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b4cc:	ba 00 00 00 00       	mov    edx,0x0
c001b4d1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b4d7:	5b                   	pop    ebx
c001b4d8:	5e                   	pop    esi
c001b4d9:	5f                   	pop    edi
c001b4da:	5d                   	pop    ebp
c001b4db:	c3                   	ret    

c001b4dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b4dc:	57                   	push   edi
c001b4dd:	56                   	push   esi
c001b4de:	53                   	push   ebx
c001b4df:	81 ec 50 02 00 00    	sub    esp,0x250
c001b4e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b4ed:	74 0d                	je     c001b4fc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b4ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b4f7:	75 0f                	jne    c001b508 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4fc:	b8 04 00 00 00       	mov    eax,0x4
c001b501:	e9 36 01 00 00       	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b506:	66 90                	xchg   ax,ax
c001b508:	83 ec 08             	sub    esp,0x8
c001b50b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b512:	50                   	push   eax
c001b513:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b51a:	e8 c8 aa fe ff       	call   c0005fe7 <f_readdir>
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b529:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b53a:	83 c0 1a             	add    eax,0x1a
c001b53d:	50                   	push   eax
c001b53e:	e8 5d 51 fe ff       	call   c00006a0 <strlen>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	ba 00 00 00 00       	mov    edx,0x0
c001b54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b553:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b55a:	0f b6 c0             	movzx  eax,al
c001b55d:	83 e0 10             	and    eax,0x10
c001b560:	74 0a                	je     c001b56c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b562:	b8 02 00 00 00       	mov    eax,0x2
c001b567:	eb 0b                	jmp    c001b574 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	b8 01 00 00 00       	mov    eax,0x1
c001b571:	8d 76 00             	lea    esi,[esi+0x0]
c001b574:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b578:	83 ec 08             	sub    esp,0x8
c001b57b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b582:	83 c0 1a             	add    eax,0x1a
c001b585:	50                   	push   eax
c001b586:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b58a:	83 c0 10             	add    eax,0x10
c001b58d:	50                   	push   eax
c001b58e:	e8 ad 51 fe ff       	call   c0000740 <strcpy>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b59d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b5a4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b5a8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b5af:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b5b6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b5bd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b5c4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b5cb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b5d2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b5d9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b5e0:	89 c6                	mov    esi,eax
c001b5e2:	89 d7                	mov    edi,edx
c001b5e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5e6:	89 c8                	mov    eax,ecx
c001b5e8:	89 fa                	mov    edx,edi
c001b5ea:	89 f3                	mov    ebx,esi
c001b5ec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b5f3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b5fa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b601:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b608:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b60e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b615:	84 c0                	test   al,al
c001b617:	75 07                	jne    c001b620 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b619:	b8 07 00 00 00       	mov    eax,0x7
c001b61e:	eb 1c                	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b620:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b627:	85 c0                	test   eax,eax
c001b629:	75 09                	jne    c001b634 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b62b:	b8 00 00 00 00       	mov    eax,0x0
c001b630:	eb 0a                	jmp    c001b63c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b632:	66 90                	xchg   ax,ax
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	81 c4 50 02 00 00    	add    esp,0x250
c001b642:	5b                   	pop    ebx
c001b643:	5e                   	pop    esi
c001b644:	5f                   	pop    edi
c001b645:	c3                   	ret    
c001b646:	66 90                	xchg   ax,ax

c001b648 <FAT::read(void*, unsigned long, void*, int*)>:
c001b648:	83 ec 1c             	sub    esp,0x1c
c001b64b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b650:	74 0a                	je     c001b65c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b652:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b657:	75 0b                	jne    c001b664 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	b8 04 00 00 00       	mov    eax,0x4
c001b661:	eb 41                	jmp    c001b6a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b663:	90                   	nop
c001b664:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b668:	50                   	push   eax
c001b669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b671:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b675:	e8 4d 9c fe ff       	call   c00052c7 <f_read>
c001b67a:	83 c4 10             	add    esp,0x10
c001b67d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b685:	89 c2                	mov    edx,eax
c001b687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b68b:	89 10                	mov    DWORD PTR [eax],edx
c001b68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b691:	85 c0                	test   eax,eax
c001b693:	75 07                	jne    c001b69c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b695:	b8 00 00 00 00       	mov    eax,0x0
c001b69a:	eb 08                	jmp    c001b6a4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b69c:	b8 01 00 00 00       	mov    eax,0x1
c001b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a4:	83 c4 1c             	add    esp,0x1c
c001b6a7:	c3                   	ret    

c001b6a8 <FAT::write(void*, unsigned long, void*, int*)>:
c001b6a8:	83 ec 1c             	sub    esp,0x1c
c001b6ab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6b0:	74 0a                	je     c001b6bc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b6b2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b6b7:	75 0b                	jne    c001b6c4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	b8 04 00 00 00       	mov    eax,0x4
c001b6c1:	eb 41                	jmp    c001b704 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6c3:	90                   	nop
c001b6c4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6c8:	50                   	push   eax
c001b6c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6d5:	e8 6d 9e fe ff       	call   c0005547 <f_write>
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e5:	89 c2                	mov    edx,eax
c001b6e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6eb:	89 10                	mov    DWORD PTR [eax],edx
c001b6ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f1:	85 c0                	test   eax,eax
c001b6f3:	75 07                	jne    c001b6fc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b6f5:	b8 00 00 00 00       	mov    eax,0x0
c001b6fa:	eb 08                	jmp    c001b704 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6fc:	b8 01 00 00 00       	mov    eax,0x1
c001b701:	8d 76 00             	lea    esi,[esi+0x0]
c001b704:	83 c4 1c             	add    esp,0x1c
c001b707:	c3                   	ret    

c001b708 <FAT::close(void*)>:
c001b708:	83 ec 1c             	sub    esp,0x1c
c001b70b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b710:	75 0a                	jne    c001b71c <FAT::close(void*)+0x14>
c001b712:	b8 04 00 00 00       	mov    eax,0x4
c001b717:	eb 3f                	jmp    c001b758 <FAT::close(void*)+0x50>
c001b719:	8d 76 00             	lea    esi,[esi+0x0]
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b723:	e8 b5 a2 fe ff       	call   c00059dd <f_close>
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b72f:	83 ec 0c             	sub    esp,0xc
c001b732:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b736:	e8 e4 e2 fe ff       	call   c0009a1f <free>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b742:	85 c0                	test   eax,eax
c001b744:	75 0a                	jne    c001b750 <FAT::close(void*)+0x48>
c001b746:	b8 00 00 00 00       	mov    eax,0x0
c001b74b:	eb 0b                	jmp    c001b758 <FAT::close(void*)+0x50>
c001b74d:	8d 76 00             	lea    esi,[esi+0x0]
c001b750:	b8 01 00 00 00       	mov    eax,0x1
c001b755:	8d 76 00             	lea    esi,[esi+0x0]
c001b758:	83 c4 1c             	add    esp,0x1c
c001b75b:	c3                   	ret    

c001b75c <FAT::closeDir(void*)>:
c001b75c:	83 ec 1c             	sub    esp,0x1c
c001b75f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b764:	75 0a                	jne    c001b770 <FAT::closeDir(void*)+0x14>
c001b766:	b8 04 00 00 00       	mov    eax,0x4
c001b76b:	eb 3f                	jmp    c001b7ac <FAT::closeDir(void*)+0x50>
c001b76d:	8d 76 00             	lea    esi,[esi+0x0]
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b777:	e8 49 a8 fe ff       	call   c0005fc5 <f_closedir>
c001b77c:	83 c4 10             	add    esp,0x10
c001b77f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b783:	83 ec 0c             	sub    esp,0xc
c001b786:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b78a:	e8 90 e2 fe ff       	call   c0009a1f <free>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b796:	85 c0                	test   eax,eax
c001b798:	75 0a                	jne    c001b7a4 <FAT::closeDir(void*)+0x48>
c001b79a:	b8 00 00 00 00       	mov    eax,0x0
c001b79f:	eb 0b                	jmp    c001b7ac <FAT::closeDir(void*)+0x50>
c001b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a4:	b8 01 00 00 00       	mov    eax,0x1
c001b7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ac:	83 c4 1c             	add    esp,0x1c
c001b7af:	c3                   	ret    

c001b7b0 <FAT::seek(void*, unsigned long long)>:
c001b7b0:	83 ec 2c             	sub    esp,0x2c
c001b7b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b7c8:	75 0a                	jne    c001b7d4 <FAT::seek(void*, unsigned long long)+0x24>
c001b7ca:	b8 04 00 00 00       	mov    eax,0x4
c001b7cf:	eb 37                	jmp    c001b808 <FAT::seek(void*, unsigned long long)+0x58>
c001b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d4:	83 ec 04             	sub    esp,0x4
c001b7d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7df:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b7e3:	e8 24 a2 fe ff       	call   c0005a0c <f_lseek>
c001b7e8:	83 c4 10             	add    esp,0x10
c001b7eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7f3:	85 c0                	test   eax,eax
c001b7f5:	75 09                	jne    c001b800 <FAT::seek(void*, unsigned long long)+0x50>
c001b7f7:	b8 00 00 00 00       	mov    eax,0x0
c001b7fc:	eb 0a                	jmp    c001b808 <FAT::seek(void*, unsigned long long)+0x58>
c001b7fe:	66 90                	xchg   ax,ax
c001b800:	b8 01 00 00 00       	mov    eax,0x1
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	83 c4 2c             	add    esp,0x2c
c001b80b:	c3                   	ret    

c001b80c <fatWrapperReadDisk>:
c001b80c:	83 ec 1c             	sub    esp,0x1c
c001b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b813:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b817:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b81b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b81e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b822:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b826:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b82b:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c001b832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b836:	83 ec 0c             	sub    esp,0xc
c001b839:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b83d:	52                   	push   edx
c001b83e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b846:	50                   	push   eax
c001b847:	e8 08 4d ff ff       	call   c0010554 <LogicalDisk::read(unsigned long long, int, void*)>
c001b84c:	83 c4 20             	add    esp,0x20
c001b84f:	83 c4 1c             	add    esp,0x1c
c001b852:	c3                   	ret    
c001b853:	90                   	nop

c001b854 <fatWrapperWriteDisk>:
c001b854:	83 ec 1c             	sub    esp,0x1c
c001b857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b85f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b863:	89 04 24             	mov    DWORD PTR [esp],eax
c001b866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b86a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b86e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b873:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c001b87a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b885:	52                   	push   edx
c001b886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88e:	50                   	push   eax
c001b88f:	e8 2c 4d ff ff       	call   c00105c0 <LogicalDisk::write(unsigned long long, int, void*)>
c001b894:	83 c4 20             	add    esp,0x20
c001b897:	83 c4 1c             	add    esp,0x1c
c001b89a:	c3                   	ret    
c001b89b:	90                   	nop

c001b89c <fatWrapperIoctl>:
c001b89c:	53                   	push   ebx
c001b89d:	83 ec 28             	sub    esp,0x28
c001b8a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8a8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8b0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b8b5:	75 31                	jne    c001b8e8 <fatWrapperIoctl+0x4c>
c001b8b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8c4:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c001b8cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8db:	66 89 02             	mov    WORD PTR [edx],ax
c001b8de:	b8 00 00 00 00       	mov    eax,0x0
c001b8e3:	e9 bc 00 00 00       	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b8e8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b8ed:	75 6d                	jne    c001b95c <fatWrapperIoctl+0xc0>
c001b8ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8fc:	8b 04 85 60 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd79a0]
c001b903:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b909:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b90f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b915:	89 c8                	mov    eax,ecx
c001b917:	89 da                	mov    edx,ebx
c001b919:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b91d:	c1 e0 0a             	shl    eax,0xa
c001b920:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b925:	8b 0c 8d 60 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd79a0]
c001b92c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b932:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b938:	89 cb                	mov    ebx,ecx
c001b93a:	c1 fb 1f             	sar    ebx,0x1f
c001b93d:	53                   	push   ebx
c001b93e:	51                   	push   ecx
c001b93f:	52                   	push   edx
c001b940:	50                   	push   eax
c001b941:	e8 9e 6e 00 00       	call   c00227e4 <__udivdi3>
c001b946:	83 c4 10             	add    esp,0x10
c001b949:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b94d:	89 01                	mov    DWORD PTR [ecx],eax
c001b94f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b952:	b8 00 00 00 00       	mov    eax,0x0
c001b957:	eb 4b                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b959:	8d 76 00             	lea    esi,[esi+0x0]
c001b95c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b961:	75 09                	jne    c001b96c <fatWrapperIoctl+0xd0>
c001b963:	b8 00 00 00 00       	mov    eax,0x0
c001b968:	eb 3a                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b96a:	66 90                	xchg   ax,ax
c001b96c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b971:	75 19                	jne    c001b98c <fatWrapperIoctl+0xf0>
c001b973:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b977:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b97b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b97f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b985:	b8 00 00 00 00       	mov    eax,0x0
c001b98a:	eb 18                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b98c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b991:	75 09                	jne    c001b99c <fatWrapperIoctl+0x100>
c001b993:	b8 00 00 00 00       	mov    eax,0x0
c001b998:	eb 0a                	jmp    c001b9a4 <fatWrapperIoctl+0x108>
c001b99a:	66 90                	xchg   ax,ax
c001b99c:	b8 04 00 00 00       	mov    eax,0x4
c001b9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a4:	83 c4 28             	add    esp,0x28
c001b9a7:	5b                   	pop    ebx
c001b9a8:	c3                   	ret    
c001b9a9:	90                   	nop
c001b9aa:	66 90                	xchg   ax,ax

c001b9ac <FAT::FAT()>:
c001b9ac:	83 ec 1c             	sub    esp,0x1c
c001b9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	50                   	push   eax
c001b9b7:	e8 56 16 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	ba 54 64 02 c0       	mov    edx,0xc0026454
c001b9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c8:	89 10                	mov    DWORD PTR [eax],edx
c001b9ca:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001b9d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9dc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b9e1:	7f 15                	jg     c001b9f8 <FAT::FAT()+0x4c>
c001b9e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9e7:	c7 04 85 e0 96 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6920],0xffffffff
c001b9f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b9f6:	eb e4                	jmp    c001b9dc <FAT::FAT()+0x30>
c001b9f8:	90                   	nop
c001b9f9:	83 c4 1c             	add    esp,0x1c
c001b9fc:	c3                   	ret    
c001b9fd:	90                   	nop
c001b9fe:	66 90                	xchg   ax,ax

c001ba00 <FAT::fixFilepath(char*)>:
c001ba00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba04:	8a 00                	mov    al,BYTE PTR [eax]
c001ba06:	3c 40                	cmp    al,0x40
c001ba08:	7e 2e                	jle    c001ba38 <FAT::fixFilepath(char*)+0x38>
c001ba0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba0e:	8a 00                	mov    al,BYTE PTR [eax]
c001ba10:	83 e8 41             	sub    eax,0x41
c001ba13:	88 c2                	mov    dl,al
c001ba15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba19:	88 10                	mov    BYTE PTR [eax],dl
c001ba1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba1f:	8a 00                	mov    al,BYTE PTR [eax]
c001ba21:	0f be c0             	movsx  eax,al
c001ba24:	8b 04 85 e0 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6920]
c001ba2b:	83 c0 30             	add    eax,0x30
c001ba2e:	88 c2                	mov    dl,al
c001ba30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba34:	88 10                	mov    BYTE PTR [eax],dl
c001ba36:	66 90                	xchg   ax,ax
c001ba38:	90                   	nop
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <FAT::open(char const*, void**, FileOpenMode)>:
c001ba3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba4a:	74 0c                	je     c001ba58 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba4c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba54:	75 0e                	jne    c001ba64 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ba56:	66 90                	xchg   ax,ax
c001ba58:	b8 04 00 00 00       	mov    eax,0x4
c001ba5d:	e9 06 01 00 00       	jmp    c001bb68 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba62:	66 90                	xchg   ax,ax
c001ba64:	83 ec 08             	sub    esp,0x8
c001ba67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba72:	50                   	push   eax
c001ba73:	e8 c8 4c fe ff       	call   c0000740 <strcpy>
c001ba78:	83 c4 10             	add    esp,0x10
c001ba7b:	83 ec 08             	sub    esp,0x8
c001ba7e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba82:	50                   	push   eax
c001ba83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba8a:	e8 71 ff ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001ba8f:	83 c4 10             	add    esp,0x10
c001ba92:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ba9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baa1:	83 e0 01             	and    eax,0x1
c001baa4:	74 0a                	je     c001bab0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001baa6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001baae:	66 90                	xchg   ax,ax
c001bab0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bab7:	83 e0 04             	and    eax,0x4
c001baba:	74 10                	je     c001bacc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001babc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bac4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bacc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bad3:	83 e0 02             	and    eax,0x2
c001bad6:	74 08                	je     c001bae0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bad8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bae0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bae7:	83 e0 08             	and    eax,0x8
c001baea:	74 08                	je     c001baf4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001baec:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001baf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bafb:	83 e0 10             	and    eax,0x10
c001bafe:	74 08                	je     c001bb08 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bb00:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bb08:	83 ec 0c             	sub    esp,0xc
c001bb0b:	68 50 02 00 00       	push   0x250
c001bb10:	e8 fa de fe ff       	call   c0009a0f <malloc>
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	89 c2                	mov    edx,eax
c001bb1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb21:	89 10                	mov    DWORD PTR [eax],edx
c001bb23:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb32:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb34:	83 ec 04             	sub    esp,0x4
c001bb37:	52                   	push   edx
c001bb38:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb3c:	52                   	push   edx
c001bb3d:	50                   	push   eax
c001bb3e:	e8 48 93 fe ff       	call   c0004e8b <f_open>
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bb4d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bb55:	74 09                	je     c001bb60 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bb57:	b8 01 00 00 00       	mov    eax,0x1
c001bb5c:	eb 0a                	jmp    c001bb68 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb5e:	66 90                	xchg   ax,ax
c001bb60:	b8 00 00 00 00       	mov    eax,0x0
c001bb65:	8d 76 00             	lea    esi,[esi+0x0]
c001bb68:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb6e:	c3                   	ret    
c001bb6f:	90                   	nop

c001bb70 <FAT::openDir(char const*, void**)>:
c001bb70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb7e:	74 0c                	je     c001bb8c <FAT::openDir(char const*, void**)+0x1c>
c001bb80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb88:	75 0e                	jne    c001bb98 <FAT::openDir(char const*, void**)+0x28>
c001bb8a:	66 90                	xchg   ax,ax
c001bb8c:	b8 04 00 00 00       	mov    eax,0x4
c001bb91:	e9 82 00 00 00       	jmp    c001bc18 <FAT::openDir(char const*, void**)+0xa8>
c001bb96:	66 90                	xchg   ax,ax
c001bb98:	83 ec 08             	sub    esp,0x8
c001bb9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bba2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bba6:	50                   	push   eax
c001bba7:	e8 94 4b fe ff       	call   c0000740 <strcpy>
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	83 ec 08             	sub    esp,0x8
c001bbb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbb6:	50                   	push   eax
c001bbb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbbe:	e8 3d fe ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	83 ec 0c             	sub    esp,0xc
c001bbc9:	6a 4c                	push   0x4c
c001bbcb:	e8 3f de fe ff       	call   c0009a0f <malloc>
c001bbd0:	83 c4 10             	add    esp,0x10
c001bbd3:	89 c2                	mov    edx,eax
c001bbd5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbdc:	89 10                	mov    DWORD PTR [eax],edx
c001bbde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe7:	83 ec 08             	sub    esp,0x8
c001bbea:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bbee:	52                   	push   edx
c001bbef:	50                   	push   eax
c001bbf0:	e8 ce a2 fe ff       	call   c0005ec3 <f_opendir>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bbff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bc07:	74 07                	je     c001bc10 <FAT::openDir(char const*, void**)+0xa0>
c001bc09:	b8 01 00 00 00       	mov    eax,0x1
c001bc0e:	eb 08                	jmp    c001bc18 <FAT::openDir(char const*, void**)+0xa8>
c001bc10:	b8 00 00 00 00       	mov    eax,0x0
c001bc15:	8d 76 00             	lea    esi,[esi+0x0]
c001bc18:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc1e:	c3                   	ret    
c001bc1f:	90                   	nop

c001bc20 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc26:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc2e:	75 0c                	jne    c001bc3c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc30:	b8 04 00 00 00       	mov    eax,0x4
c001bc35:	e9 d2 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc3a:	66 90                	xchg   ax,ax
c001bc3c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bc44:	75 0a                	jne    c001bc50 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bc46:	b8 04 00 00 00       	mov    eax,0x4
c001bc4b:	e9 bc 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc50:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bc58:	75 0a                	jne    c001bc64 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bc5a:	b8 04 00 00 00       	mov    eax,0x4
c001bc5f:	e9 a8 00 00 00       	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc64:	83 ec 08             	sub    esp,0x8
c001bc67:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc6e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bc75:	50                   	push   eax
c001bc76:	e8 c5 4a fe ff       	call   c0000740 <strcpy>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	83 ec 08             	sub    esp,0x8
c001bc81:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bc88:	50                   	push   eax
c001bc89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc90:	e8 6b fd ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	83 ec 08             	sub    esp,0x8
c001bc9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc9f:	50                   	push   eax
c001bca0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bca7:	50                   	push   eax
c001bca8:	e8 d5 a3 fe ff       	call   c0006082 <f_stat>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bcb7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bcbe:	85 c0                	test   eax,eax
c001bcc0:	74 0a                	je     c001bccc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bcc2:	83 f8 04             	cmp    eax,0x4
c001bcc5:	74 35                	je     c001bcfc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bcc7:	eb 3b                	jmp    c001bd04 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcd0:	0f b6 c0             	movzx  eax,al
c001bcd3:	83 e0 10             	and    eax,0x10
c001bcd6:	0f 95 c2             	setne  dl
c001bcd9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bce0:	88 10                	mov    BYTE PTR [eax],dl
c001bce2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bce5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bce9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bcf0:	89 01                	mov    DWORD PTR [ecx],eax
c001bcf2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bcf5:	b8 00 00 00 00       	mov    eax,0x0
c001bcfa:	eb 10                	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bcfc:	b8 02 00 00 00       	mov    eax,0x2
c001bd01:	eb 09                	jmp    c001bd0c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd03:	90                   	nop
c001bd04:	b8 01 00 00 00       	mov    eax,0x1
c001bd09:	8d 76 00             	lea    esi,[esi+0x0]
c001bd0c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd12:	c3                   	ret    
c001bd13:	90                   	nop

c001bd14 <FAT::unlink(char const*)>:
c001bd14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd22:	75 08                	jne    c001bd2c <FAT::unlink(char const*)+0x18>
c001bd24:	b8 04 00 00 00       	mov    eax,0x4
c001bd29:	eb 61                	jmp    c001bd8c <FAT::unlink(char const*)+0x78>
c001bd2b:	90                   	nop
c001bd2c:	83 ec 08             	sub    esp,0x8
c001bd2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd36:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd3a:	50                   	push   eax
c001bd3b:	e8 00 4a fe ff       	call   c0000740 <strcpy>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	83 ec 08             	sub    esp,0x8
c001bd46:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd4a:	50                   	push   eax
c001bd4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd52:	e8 a9 fc ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bd57:	83 c4 10             	add    esp,0x10
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd61:	50                   	push   eax
c001bd62:	e8 6d a6 fe ff       	call   c00063d4 <f_unlink>
c001bd67:	83 c4 10             	add    esp,0x10
c001bd6a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd71:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd78:	85 c0                	test   eax,eax
c001bd7a:	75 08                	jne    c001bd84 <FAT::unlink(char const*)+0x70>
c001bd7c:	b8 00 00 00 00       	mov    eax,0x0
c001bd81:	eb 09                	jmp    c001bd8c <FAT::unlink(char const*)+0x78>
c001bd83:	90                   	nop
c001bd84:	b8 01 00 00 00       	mov    eax,0x1
c001bd89:	8d 76 00             	lea    esi,[esi+0x0]
c001bd8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd92:	c3                   	ret    
c001bd93:	90                   	nop

c001bd94 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bd94:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bd9a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bda1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bda8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bdac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bdb0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bdb8:	75 0a                	jne    c001bdc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bdba:	b8 04 00 00 00       	mov    eax,0x4
c001bdbf:	e9 30 01 00 00       	jmp    c001bef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bdc4:	83 ec 08             	sub    esp,0x8
c001bdc7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdce:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdd2:	50                   	push   eax
c001bdd3:	e8 68 49 fe ff       	call   c0000740 <strcpy>
c001bdd8:	83 c4 10             	add    esp,0x10
c001bddb:	83 ec 08             	sub    esp,0x8
c001bdde:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bde2:	50                   	push   eax
c001bde3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdea:	e8 11 fc ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bdfa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001be02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be07:	83 e0 01             	and    eax,0x1
c001be0a:	74 08                	je     c001be14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001be0c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001be14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be19:	83 e0 02             	and    eax,0x2
c001be1c:	74 0a                	je     c001be28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001be1e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001be26:	66 90                	xchg   ax,ax
c001be28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be2d:	83 e0 04             	and    eax,0x4
c001be30:	74 0a                	je     c001be3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001be32:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001be3a:	66 90                	xchg   ax,ax
c001be3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be41:	83 e0 08             	and    eax,0x8
c001be44:	74 0a                	je     c001be50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001be46:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001be4e:	66 90                	xchg   ax,ax
c001be50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be55:	83 e0 01             	and    eax,0x1
c001be58:	74 0a                	je     c001be64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001be5a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001be62:	66 90                	xchg   ax,ax
c001be64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be69:	83 e0 02             	and    eax,0x2
c001be6c:	74 0a                	je     c001be78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001be6e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001be76:	66 90                	xchg   ax,ax
c001be78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be7d:	83 e0 04             	and    eax,0x4
c001be80:	74 0a                	je     c001be8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001be82:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001be8a:	66 90                	xchg   ax,ax
c001be8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be91:	83 e0 08             	and    eax,0x8
c001be94:	74 0a                	je     c001bea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001be96:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001be9e:	66 90                	xchg   ax,ax
c001bea0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bea7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001beae:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001beb6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bebe:	83 ec 04             	sub    esp,0x4
c001bec1:	52                   	push   edx
c001bec2:	50                   	push   eax
c001bec3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bec7:	50                   	push   eax
c001bec8:	e8 a9 ab fe ff       	call   c0006a76 <f_chmod>
c001becd:	83 c4 10             	add    esp,0x10
c001bed0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bed7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bede:	85 c0                	test   eax,eax
c001bee0:	75 0a                	jne    c001beec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bee2:	b8 00 00 00 00       	mov    eax,0x0
c001bee7:	eb 0b                	jmp    c001bef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bee9:	8d 76 00             	lea    esi,[esi+0x0]
c001beec:	b8 01 00 00 00       	mov    eax,0x1
c001bef1:	8d 76 00             	lea    esi,[esi+0x0]
c001bef4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001befa:	c3                   	ret    
c001befb:	90                   	nop

c001befc <FAT::rename(char const*, char const*)>:
c001befc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf02:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bf0a:	74 0c                	je     c001bf18 <FAT::rename(char const*, char const*)+0x1c>
c001bf0c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bf14:	75 0e                	jne    c001bf24 <FAT::rename(char const*, char const*)+0x28>
c001bf16:	66 90                	xchg   ax,ax
c001bf18:	b8 04 00 00 00       	mov    eax,0x4
c001bf1d:	e9 9e 00 00 00       	jmp    c001bfc0 <FAT::rename(char const*, char const*)+0xc4>
c001bf22:	66 90                	xchg   ax,ax
c001bf24:	83 ec 08             	sub    esp,0x8
c001bf27:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf2e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf35:	50                   	push   eax
c001bf36:	e8 05 48 fe ff       	call   c0000740 <strcpy>
c001bf3b:	83 c4 10             	add    esp,0x10
c001bf3e:	83 ec 08             	sub    esp,0x8
c001bf41:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bf48:	50                   	push   eax
c001bf49:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf50:	e8 ab fa ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	83 ec 08             	sub    esp,0x8
c001bf5b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bf62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf66:	50                   	push   eax
c001bf67:	e8 d4 47 fe ff       	call   c0000740 <strcpy>
c001bf6c:	83 c4 10             	add    esp,0x10
c001bf6f:	83 ec 08             	sub    esp,0x8
c001bf72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf76:	50                   	push   eax
c001bf77:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf7e:	e8 7d fa ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	83 ec 08             	sub    esp,0x8
c001bf89:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf8d:	50                   	push   eax
c001bf8e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf95:	50                   	push   eax
c001bf96:	e8 e8 a7 fe ff       	call   c0006783 <f_rename>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bfa5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bfac:	85 c0                	test   eax,eax
c001bfae:	75 08                	jne    c001bfb8 <FAT::rename(char const*, char const*)+0xbc>
c001bfb0:	b8 00 00 00 00       	mov    eax,0x0
c001bfb5:	eb 09                	jmp    c001bfc0 <FAT::rename(char const*, char const*)+0xc4>
c001bfb7:	90                   	nop
c001bfb8:	b8 01 00 00 00       	mov    eax,0x1
c001bfbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bfc6:	c3                   	ret    
c001bfc7:	90                   	nop

c001bfc8 <FAT::mkdir(char const*)>:
c001bfc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfd6:	75 08                	jne    c001bfe0 <FAT::mkdir(char const*)+0x18>
c001bfd8:	b8 04 00 00 00       	mov    eax,0x4
c001bfdd:	eb 61                	jmp    c001c040 <FAT::mkdir(char const*)+0x78>
c001bfdf:	90                   	nop
c001bfe0:	83 ec 08             	sub    esp,0x8
c001bfe3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfee:	50                   	push   eax
c001bfef:	e8 4c 47 fe ff       	call   c0000740 <strcpy>
c001bff4:	83 c4 10             	add    esp,0x10
c001bff7:	83 ec 08             	sub    esp,0x8
c001bffa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bffe:	50                   	push   eax
c001bfff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c006:	e8 f5 f9 ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	83 ec 0c             	sub    esp,0xc
c001c011:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c015:	50                   	push   eax
c001c016:	e8 3c a5 fe ff       	call   c0006557 <f_mkdir>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c025:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c02c:	85 c0                	test   eax,eax
c001c02e:	75 08                	jne    c001c038 <FAT::mkdir(char const*)+0x70>
c001c030:	b8 00 00 00 00       	mov    eax,0x0
c001c035:	eb 09                	jmp    c001c040 <FAT::mkdir(char const*)+0x78>
c001c037:	90                   	nop
c001c038:	b8 01 00 00 00       	mov    eax,0x1
c001c03d:	8d 76 00             	lea    esi,[esi+0x0]
c001c040:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c046:	c3                   	ret    
c001c047:	90                   	nop

c001c048 <FAT::exists(char const*)>:
c001c048:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c04e:	83 ec 08             	sub    esp,0x8
c001c051:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c05c:	50                   	push   eax
c001c05d:	e8 de 46 fe ff       	call   c0000740 <strcpy>
c001c062:	83 c4 10             	add    esp,0x10
c001c065:	83 ec 08             	sub    esp,0x8
c001c068:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c06c:	50                   	push   eax
c001c06d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c074:	e8 87 f9 ff ff       	call   c001ba00 <FAT::fixFilepath(char*)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	83 ec 08             	sub    esp,0x8
c001c07f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c086:	50                   	push   eax
c001c087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c08b:	50                   	push   eax
c001c08c:	e8 f1 9f fe ff       	call   c0006082 <f_stat>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c09b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c0a2:	85 c0                	test   eax,eax
c001c0a4:	75 06                	jne    c001c0ac <FAT::exists(char const*)+0x64>
c001c0a6:	b0 01                	mov    al,0x1
c001c0a8:	eb 06                	jmp    c001c0b0 <FAT::exists(char const*)+0x68>
c001c0aa:	66 90                	xchg   ax,ax
c001c0ac:	b0 00                	mov    al,0x0
c001c0ae:	66 90                	xchg   ax,ax
c001c0b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c0b6:	c3                   	ret    
c001c0b7:	90                   	nop

c001c0b8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c0b8:	b8 08 00 00 00       	mov    eax,0x8
c001c0bd:	c3                   	ret    

c001c0be <ISO9660::seek(void*, unsigned long long)>:
c001c0be:	53                   	push   ebx
c001c0bf:	b8 04 00 00 00       	mov    eax,0x4
c001c0c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0d0:	85 d2                	test   edx,edx
c001c0d2:	74 17                	je     c001c0eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0d4:	89 c8                	mov    eax,ecx
c001c0d6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c0d9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c0dc:	b8 01 00 00 00       	mov    eax,0x1
c001c0e1:	73 08                	jae    c001c0eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0e3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c0e6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c0e9:	31 c0                	xor    eax,eax
c001c0eb:	5b                   	pop    ebx
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop

c001c0ee <ISO9660::tell(void*, unsigned long long*)>:
c001c0ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0f6:	85 d2                	test   edx,edx
c001c0f8:	74 12                	je     c001c10c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0fa:	85 c0                	test   eax,eax
c001c0fc:	74 0e                	je     c001c10c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0fe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c101:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c104:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c107:	89 10                	mov    DWORD PTR [eax],edx
c001c109:	31 c0                	xor    eax,eax
c001c10b:	c3                   	ret    
c001c10c:	b8 04 00 00 00       	mov    eax,0x4
c001c111:	c3                   	ret    

c001c112 <ISO9660::getName()>:
c001c112:	b8 b4 64 02 c0       	mov    eax,0xc00264b4
c001c117:	c3                   	ret    

c001c118 <ISO9660::stat(void*, unsigned long long*)>:
c001c118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c120:	85 d2                	test   edx,edx
c001c122:	74 12                	je     c001c136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c124:	85 c0                	test   eax,eax
c001c126:	74 0e                	je     c001c136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c128:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c12b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c12e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c131:	89 10                	mov    DWORD PTR [eax],edx
c001c133:	31 c0                	xor    eax,eax
c001c135:	c3                   	ret    
c001c136:	b8 04 00 00 00       	mov    eax,0x4
c001c13b:	c3                   	ret    

c001c13c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c13c:	b8 01 00 00 00       	mov    eax,0x1
c001c141:	c3                   	ret    

c001c142 <ISO9660::unlink(char const*)>:
c001c142:	b8 01 00 00 00       	mov    eax,0x1
c001c147:	c3                   	ret    

c001c148 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c148:	b8 01 00 00 00       	mov    eax,0x1
c001c14d:	c3                   	ret    

c001c14e <ISO9660::rename(char const*, char const*)>:
c001c14e:	b8 01 00 00 00       	mov    eax,0x1
c001c153:	c3                   	ret    

c001c154 <ISO9660::mkdir(char const*)>:
c001c154:	b8 01 00 00 00       	mov    eax,0x1
c001c159:	c3                   	ret    

c001c15a <ISO9660::close(void*)>:
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	b8 04 00 00 00       	mov    eax,0x4
c001c162:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c166:	85 d2                	test   edx,edx
c001c168:	74 0e                	je     c001c178 <ISO9660::close(void*)+0x1e>
c001c16a:	83 ec 0c             	sub    esp,0xc
c001c16d:	52                   	push   edx
c001c16e:	e8 ac d8 fe ff       	call   c0009a1f <free>
c001c173:	83 c4 10             	add    esp,0x10
c001c176:	31 c0                	xor    eax,eax
c001c178:	83 c4 0c             	add    esp,0xc
c001c17b:	c3                   	ret    

c001c17c <ISO9660::closeDir(void*)>:
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	b8 04 00 00 00       	mov    eax,0x4
c001c184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c188:	85 d2                	test   edx,edx
c001c18a:	74 0e                	je     c001c19a <ISO9660::closeDir(void*)+0x1e>
c001c18c:	83 ec 0c             	sub    esp,0xc
c001c18f:	52                   	push   edx
c001c190:	e8 8a d8 fe ff       	call   c0009a1f <free>
c001c195:	83 c4 10             	add    esp,0x10
c001c198:	31 c0                	xor    eax,eax
c001c19a:	83 c4 0c             	add    esp,0xc
c001c19d:	c3                   	ret    

c001c19e <ISO9660::~ISO9660()>:
c001c19e:	83 ec 0c             	sub    esp,0xc
c001c1a1:	ba d8 64 02 c0       	mov    edx,0xc00264d8
c001c1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1aa:	89 10                	mov    DWORD PTR [eax],edx
c001c1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b0:	83 ec 0c             	sub    esp,0xc
c001c1b3:	50                   	push   eax
c001c1b4:	e8 7d 0e ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001c1b9:	83 c4 10             	add    esp,0x10
c001c1bc:	90                   	nop
c001c1bd:	83 c4 0c             	add    esp,0xc
c001c1c0:	c3                   	ret    
c001c1c1:	90                   	nop

c001c1c2 <ISO9660::~ISO9660()>:
c001c1c2:	83 ec 0c             	sub    esp,0xc
c001c1c5:	83 ec 0c             	sub    esp,0xc
c001c1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1cc:	e8 cd ff ff ff       	call   c001c19e <ISO9660::~ISO9660()>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	83 ec 08             	sub    esp,0x8
c001c1d7:	6a 08                	push   0x8
c001c1d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1dd:	e8 38 0a ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	83 c4 0c             	add    esp,0xc
c001c1e8:	c3                   	ret    

c001c1e9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c1e9:	55                   	push   ebp
c001c1ea:	31 c9                	xor    ecx,ecx
c001c1ec:	57                   	push   edi
c001c1ed:	56                   	push   esi
c001c1ee:	53                   	push   ebx
c001c1ef:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c1f7:	89 eb                	mov    ebx,ebp
c001c1f9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c1fd:	39 ce                	cmp    esi,ecx
c001c1ff:	7e 17                	jle    c001c218 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c201:	31 d2                	xor    edx,edx
c001c203:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c207:	7d 13                	jge    c001c21c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c209:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c20d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c210:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c213:	75 0d                	jne    c001c222 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c215:	42                   	inc    edx
c001c216:	eb eb                	jmp    c001c203 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c218:	31 c0                	xor    eax,eax
c001c21a:	eb 0a                	jmp    c001c226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c21c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c220:	eb 04                	jmp    c001c226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c222:	41                   	inc    ecx
c001c223:	43                   	inc    ebx
c001c224:	eb d7                	jmp    c001c1fd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c226:	5b                   	pop    ebx
c001c227:	5e                   	pop    esi
c001c228:	5f                   	pop    edi
c001c229:	5d                   	pop    ebp
c001c22a:	c3                   	ret    

c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c22b:	57                   	push   edi
c001c22c:	56                   	push   esi
c001c22d:	53                   	push   ebx
c001c22e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c236:	39 0d c0 97 02 c0    	cmp    DWORD PTR ds:0xc00297c0,ecx
c001c23c:	75 08                	jne    c001c246 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001c23e:	38 05 d4 7a 02 c0    	cmp    BYTE PTR ds:0xc0027ad4,al
c001c244:	74 2b                	je     c001c271 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001c246:	83 ec 0c             	sub    esp,0xc
c001c249:	a2 d4 7a 02 c0       	mov    ds:0xc0027ad4,al
c001c24e:	68 e0 97 02 c0       	push   0xc00297e0
c001c253:	0f be c0             	movsx  eax,al
c001c256:	6a 01                	push   0x1
c001c258:	89 0d c0 97 02 c0    	mov    DWORD PTR ds:0xc00297c0,ecx
c001c25e:	31 db                	xor    ebx,ebx
c001c260:	53                   	push   ebx
c001c261:	51                   	push   ecx
c001c262:	ff 34 85 5c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7aa4]
c001c269:	e8 e6 42 ff ff       	call   c0010554 <LogicalDisk::read(unsigned long long, int, void*)>
c001c26e:	83 c4 20             	add    esp,0x20
c001c271:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c275:	be e0 97 02 c0       	mov    esi,0xc00297e0
c001c27a:	b9 00 08 00 00       	mov    ecx,0x800
c001c27f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c281:	5b                   	pop    ebx
c001c282:	5e                   	pop    esi
c001c283:	5f                   	pop    edi
c001c284:	c3                   	ret    
c001c285:	90                   	nop

c001c286 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c286:	81 ec 10 08 00 00    	sub    esp,0x810
c001c28c:	c7 05 c0 97 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00297c0,0xdeadbeef
c001c296:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c29d:	83 c0 41             	add    eax,0x41
c001c2a0:	0f be c0             	movsx  eax,al
c001c2a3:	50                   	push   eax
c001c2a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2a8:	50                   	push   eax
c001c2a9:	6a 10                	push   0x10
c001c2ab:	e8 7b ff ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c2b0:	83 c4 10             	add    esp,0x10
c001c2b3:	31 c0                	xor    eax,eax
c001c2b5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c2ba:	75 1d                	jne    c001c2d9 <ISO9660::tryMount(LogicalDisk*, int)+0x53>
c001c2bc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c2c1:	75 16                	jne    c001c2d9 <ISO9660::tryMount(LogicalDisk*, int)+0x53>
c001c2c3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c2c8:	75 0f                	jne    c001c2d9 <ISO9660::tryMount(LogicalDisk*, int)+0x53>
c001c2ca:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c2cf:	75 08                	jne    c001c2d9 <ISO9660::tryMount(LogicalDisk*, int)+0x53>
c001c2d1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c2d6:	0f 94 c0             	sete   al
c001c2d9:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c2df:	c3                   	ret    

c001c2e0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c2e0:	55                   	push   ebp
c001c2e1:	57                   	push   edi
c001c2e2:	56                   	push   esi
c001c2e3:	53                   	push   ebx
c001c2e4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c2ea:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c2f1:	85 ed                	test   ebp,ebp
c001c2f3:	0f 84 da 01 00 00    	je     c001c4d3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c2f9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c301:	0f 84 cc 01 00 00    	je     c001c4d3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c307:	b8 01 00 00 00       	mov    eax,0x1
c001c30c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c310:	0f 85 c2 01 00 00    	jne    c001c4d8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c316:	31 d2                	xor    edx,edx
c001c318:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c31f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c322:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c325:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c328:	89 04 24             	mov    DWORD PTR [esp],eax
c001c32b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c32f:	01 c8                	add    eax,ecx
c001c331:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c334:	11 da                	adc    edx,ebx
c001c336:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c33a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c33e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c342:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c346:	19 d7                	sbb    edi,edx
c001c348:	72 11                	jb     c001c35b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c34a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c34d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c355:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c359:	eb 0c                	jmp    c001c367 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c35b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c35f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c363:	29 ce                	sub    esi,ecx
c001c365:	19 df                	sbb    edi,ebx
c001c367:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c36a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c36d:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c371:	c1 e0 0b             	shl    eax,0xb
c001c374:	01 c8                	add    eax,ecx
c001c376:	11 da                	adc    edx,ebx
c001c378:	89 04 24             	mov    DWORD PTR [esp],eax
c001c37b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c37f:	51                   	push   ecx
c001c380:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c384:	50                   	push   eax
c001c385:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c389:	53                   	push   ebx
c001c38a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c38e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c392:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c396:	50                   	push   eax
c001c397:	e8 8f fe ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c39c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c39f:	b8 00 08 00 00       	mov    eax,0x800
c001c3a4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c3aa:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c3ae:	29 d0                	sub    eax,edx
c001c3b0:	83 c4 10             	add    esp,0x10
c001c3b3:	89 f9                	mov    ecx,edi
c001c3b5:	39 c6                	cmp    esi,eax
c001c3b7:	83 d9 00             	sbb    ecx,0x0
c001c3ba:	7d 1b                	jge    c001c3d7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c3bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c3c1:	75 12                	jne    c001c3d5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c3c3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d0:	e9 fa 00 00 00       	jmp    c001c4cf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c3d5:	89 f0                	mov    eax,esi
c001c3d7:	01 d3                	add    ebx,edx
c001c3d9:	31 d2                	xor    edx,edx
c001c3db:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c3df:	39 c2                	cmp    edx,eax
c001c3e1:	7d 14                	jge    c001c3f7 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c3e3:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c3ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3ee:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c3f1:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c3f4:	42                   	inc    edx
c001c3f5:	eb e8                	jmp    c001c3df <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c3f7:	89 c2                	mov    edx,eax
c001c3f9:	85 c0                	test   eax,eax
c001c3fb:	79 02                	jns    c001c3ff <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c3fd:	31 d2                	xor    edx,edx
c001c3ff:	01 c2                	add    edx,eax
c001c401:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c404:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c40b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c40f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c413:	99                   	cdq    
c001c414:	01 c1                	add    ecx,eax
c001c416:	11 d3                	adc    ebx,edx
c001c418:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c41c:	29 c6                	sub    esi,eax
c001c41e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c422:	19 d7                	sbb    edi,edx
c001c424:	89 34 24             	mov    DWORD PTR [esp],esi
c001c427:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c42b:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c433:	b8 00 00 00 00       	mov    eax,0x0
c001c438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c43c:	7d 43                	jge    c001c481 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c43e:	52                   	push   edx
c001c43f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c443:	50                   	push   eax
c001c444:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c44c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c450:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c454:	50                   	push   eax
c001c455:	e8 d1 fd ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c45a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c462:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c467:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c46f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c477:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c47c:	83 c4 10             	add    esp,0x10
c001c47f:	eb aa                	jmp    c001c42b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c485:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c488:	74 2a                	je     c001c4b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c48a:	50                   	push   eax
c001c48b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c48f:	50                   	push   eax
c001c490:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c494:	56                   	push   esi
c001c495:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c499:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c49d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c4a1:	51                   	push   ecx
c001c4a2:	e8 84 fd ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4a7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c4ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4bb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c4bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4c3:	89 18                	mov    DWORD PTR [eax],ebx
c001c4c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4cc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4cf:	31 c0                	xor    eax,eax
c001c4d1:	eb 05                	jmp    c001c4d8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c4d3:	b8 04 00 00 00       	mov    eax,0x4
c001c4d8:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c4de:	5b                   	pop    ebx
c001c4df:	5e                   	pop    esi
c001c4e0:	5f                   	pop    edi
c001c4e1:	5d                   	pop    ebp
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c4e4:	55                   	push   ebp
c001c4e5:	57                   	push   edi
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c4ee:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c4f5:	85 ed                	test   ebp,ebp
c001c4f7:	0f 84 51 02 00 00    	je     c001c74e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c4fd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c505:	0f 84 43 02 00 00    	je     c001c74e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c50b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c50e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c511:	75 0a                	jne    c001c51d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c513:	b8 07 00 00 00       	mov    eax,0x7
c001c518:	e9 36 02 00 00       	jmp    c001c753 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c51d:	50                   	push   eax
c001c51e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c522:	50                   	push   eax
c001c523:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c52a:	53                   	push   ebx
c001c52b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c52e:	c1 e0 0b             	shl    eax,0xb
c001c531:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c534:	c1 e8 0b             	shr    eax,0xb
c001c537:	50                   	push   eax
c001c538:	e8 ee fc ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c53d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	89 c1                	mov    ecx,eax
c001c545:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c548:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c54e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c551:	84 db                	test   bl,bl
c001c553:	0f 85 8b 00 00 00    	jne    c001c5e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c559:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c55f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c562:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c568:	29 c6                	sub    esi,eax
c001c56a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c56e:	89 f3                	mov    ebx,esi
c001c570:	89 f1                	mov    ecx,esi
c001c572:	c1 fb 1f             	sar    ebx,0x1f
c001c575:	01 f0                	add    eax,esi
c001c577:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c57a:	11 da                	adc    edx,ebx
c001c57c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c57f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c583:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c586:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c589:	89 d8                	mov    eax,ebx
c001c58b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c58f:	ba 00 00 00 00       	mov    edx,0x0
c001c594:	19 f8                	sbb    eax,edi
c001c596:	b8 00 00 00 00       	mov    eax,0x0
c001c59b:	73 08                	jae    c001c5a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c59d:	89 f0                	mov    eax,esi
c001c59f:	89 fa                	mov    edx,edi
c001c5a1:	29 c8                	sub    eax,ecx
c001c5a3:	19 da                	sbb    edx,ebx
c001c5a5:	89 d7                	mov    edi,edx
c001c5a7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c5aa:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c5ad:	09 c7                	or     edi,eax
c001c5af:	0f 84 5e ff ff ff    	je     c001c513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c5b5:	57                   	push   edi
c001c5b6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5ba:	50                   	push   eax
c001c5bb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c5c2:	53                   	push   ebx
c001c5c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5c6:	c1 e0 0b             	shl    eax,0xb
c001c5c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c5cd:	c1 e8 0b             	shr    eax,0xb
c001c5d0:	50                   	push   eax
c001c5d1:	e8 55 fc ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5d9:	83 c4 10             	add    esp,0x10
c001c5dc:	25 ff 07 00 00       	and    eax,0x7ff
c001c5e1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c5e4:	31 ff                	xor    edi,edi
c001c5e6:	56                   	push   esi
c001c5e7:	6a 28                	push   0x28
c001c5e9:	6a 00                	push   0x0
c001c5eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c5ef:	50                   	push   eax
c001c5f0:	e8 8f 40 fe ff       	call   c0000684 <memset>
c001c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5f8:	25 ff 07 00 00       	and    eax,0x7ff
c001c5fd:	89 c6                	mov    esi,eax
c001c5ff:	83 c6 21             	add    esi,0x21
c001c602:	83 d7 00             	adc    edi,0x0
c001c605:	83 c4 10             	add    esp,0x10
c001c608:	31 c9                	xor    ecx,ecx
c001c60a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c611:	83 f9 28             	cmp    ecx,0x28
c001c614:	88 04 24             	mov    BYTE PTR [esp],al
c001c617:	0f 94 c2             	sete   dl
c001c61a:	88 d0                	mov    al,dl
c001c61c:	ba ff 07 00 00       	mov    edx,0x7ff
c001c621:	39 f2                	cmp    edx,esi
c001c623:	ba 00 00 00 00       	mov    edx,0x0
c001c628:	19 fa                	sbb    edx,edi
c001c62a:	0f 92 c2             	setb   dl
c001c62d:	09 c2                	or     edx,eax
c001c62f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c633:	0f 94 c0             	sete   al
c001c636:	08 d0                	or     al,dl
c001c638:	75 16                	jne    c001c650 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c63a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c63e:	74 10                	je     c001c650 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c640:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c643:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c647:	41                   	inc    ecx
c001c648:	83 c6 01             	add    esi,0x1
c001c64b:	83 d7 00             	adc    edi,0x0
c001c64e:	eb ba                	jmp    c001c60a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c650:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c657:	83 ec 0c             	sub    esp,0xc
c001c65a:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c65e:	56                   	push   esi
c001c65f:	e8 3c 40 fe ff       	call   c00006a0 <strlen>
c001c664:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c66b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c66f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c677:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c67a:	5a                   	pop    edx
c001c67b:	25 ff 07 00 00       	and    eax,0x7ff
c001c680:	59                   	pop    ecx
c001c681:	01 f8                	add    eax,edi
c001c683:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c689:	83 e0 02             	and    eax,0x2
c001c68c:	3c 01                	cmp    al,0x1
c001c68e:	19 c0                	sbb    eax,eax
c001c690:	83 c0 02             	add    eax,0x2
c001c693:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c697:	56                   	push   esi
c001c698:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c69c:	50                   	push   eax
c001c69d:	e8 9e 40 fe ff       	call   c0000740 <strcpy>
c001c6a2:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	84 c0                	test   al,al
c001c6ab:	75 21                	jne    c001c6ce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c6ad:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c6b5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6bd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6c5:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c6cc:	eb 28                	jmp    c001c6f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6ce:	fe c8                	dec    al
c001c6d0:	75 24                	jne    c001c6f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6d2:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c6da:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6e2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6ea:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c6f1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c6f6:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c6fa:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c701:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c708:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c70a:	0f b6 f3             	movzx  esi,bl
c001c70d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c714:	31 db                	xor    ebx,ebx
c001c716:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c71c:	89 df                	mov    edi,ebx
c001c71e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c724:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c727:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c72a:	39 c6                	cmp    esi,eax
c001c72c:	19 d7                	sbb    edi,edx
c001c72e:	72 10                	jb     c001c740 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c730:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c737:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c73e:	eb 0a                	jmp    c001c74a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c740:	29 f0                	sub    eax,esi
c001c742:	19 da                	sbb    edx,ebx
c001c744:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c747:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c74a:	31 c0                	xor    eax,eax
c001c74c:	eb 05                	jmp    c001c753 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c74e:	b8 04 00 00 00       	mov    eax,0x4
c001c753:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c759:	5b                   	pop    ebx
c001c75a:	5e                   	pop    esi
c001c75b:	5f                   	pop    edi
c001c75c:	5d                   	pop    ebp
c001c75d:	c3                   	ret    

c001c75e <readRoot(unsigned int*, unsigned int*, char)>:
c001c75e:	57                   	push   edi
c001c75f:	56                   	push   esi
c001c760:	81 ec 38 08 00 00    	sub    esp,0x838
c001c766:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c76e:	50                   	push   eax
c001c76f:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c773:	50                   	push   eax
c001c774:	6a 10                	push   0x10
c001c776:	e8 b0 fa ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c77b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c782:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c786:	b9 22 00 00 00       	mov    ecx,0x22
c001c78b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c78d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c794:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c798:	89 10                	mov    DWORD PTR [eax],edx
c001c79a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c7a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c7a5:	89 10                	mov    DWORD PTR [eax],edx
c001c7a7:	81 c4 44 08 00 00    	add    esp,0x844
c001c7ad:	b0 01                	mov    al,0x1
c001c7af:	5e                   	pop    esi
c001c7b0:	5f                   	pop    edi
c001c7b1:	c3                   	ret    

c001c7b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c7b2:	55                   	push   ebp
c001c7b3:	57                   	push   edi
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7bc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c7c3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c7ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7ce:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c7d2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7d6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7da:	75 03                	jne    c001c7df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7dc:	83 c3 02             	add    ebx,0x2
c001c7df:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c7e2:	75 03                	jne    c001c7e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c7e4:	43                   	inc    ebx
c001c7e5:	eb f8                	jmp    c001c7df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7e7:	51                   	push   ecx
c001c7e8:	68 00 01 00 00       	push   0x100
c001c7ed:	6a 00                	push   0x0
c001c7ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7f3:	50                   	push   eax
c001c7f4:	e8 8b 3e fe ff       	call   c0000684 <memset>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	31 d2                	xor    edx,edx
c001c7fe:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c801:	84 c0                	test   al,al
c001c803:	74 21                	je     c001c826 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c805:	3c 2f                	cmp    al,0x2f
c001c807:	75 0b                	jne    c001c814 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c809:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c80d:	bd 01 00 00 00       	mov    ebp,0x1
c001c812:	eb 14                	jmp    c001c828 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c814:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c817:	80 f9 19             	cmp    cl,0x19
c001c81a:	77 03                	ja     c001c81f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c81c:	83 e8 20             	sub    eax,0x20
c001c81f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c823:	42                   	inc    edx
c001c824:	eb d8                	jmp    c001c7fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c826:	31 ed                	xor    ebp,ebp
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c832:	e8 d8 d1 fe ff       	call   c0009a0f <malloc>
c001c837:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c83e:	89 c6                	mov    esi,eax
c001c840:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c846:	c1 ef 0b             	shr    edi,0xb
c001c849:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c850:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c85c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c860:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c867:	74 28                	je     c001c891 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c869:	52                   	push   edx
c001c86a:	57                   	push   edi
c001c86b:	50                   	push   eax
c001c86c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c870:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c877:	e8 af f9 ff ff       	call   c001c22b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c87c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c880:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c887:	05 00 08 00 00       	add    eax,0x800
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	eb cb                	jmp    c001c85c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c891:	83 ec 0c             	sub    esp,0xc
c001c894:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c898:	57                   	push   edi
c001c899:	e8 02 3e fe ff       	call   c00006a0 <strlen>
c001c89e:	50                   	push   eax
c001c89f:	57                   	push   edi
c001c8a0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c8a7:	56                   	push   esi
c001c8a8:	e8 3c f9 ff ff       	call   c001c1e9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c8ad:	83 c4 20             	add    esp,0x20
c001c8b0:	85 c0                	test   eax,eax
c001c8b2:	75 13                	jne    c001c8c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	56                   	push   esi
c001c8b8:	e8 62 d1 fe ff       	call   c0009a1f <free>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	31 c0                	xor    eax,eax
c001c8c2:	e9 b3 00 00 00       	jmp    c001c97a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c8c7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c8cb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c8cf:	c1 e7 08             	shl    edi,0x8
c001c8d2:	c1 e2 10             	shl    edx,0x10
c001c8d5:	09 d7                	or     edi,edx
c001c8d7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c8db:	09 d7                	or     edi,edx
c001c8dd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c8e1:	c1 e2 18             	shl    edx,0x18
c001c8e4:	09 d7                	or     edi,edx
c001c8e6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c8ea:	89 d1                	mov    ecx,edx
c001c8ec:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c8f0:	c1 e1 08             	shl    ecx,0x8
c001c8f3:	c1 e2 10             	shl    edx,0x10
c001c8f6:	09 ca                	or     edx,ecx
c001c8f8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c8fc:	09 ca                	or     edx,ecx
c001c8fe:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c902:	c1 e1 18             	shl    ecx,0x18
c001c905:	09 ca                	or     edx,ecx
c001c907:	89 e9                	mov    ecx,ebp
c001c909:	84 c9                	test   cl,cl
c001c90b:	74 3c                	je     c001c949 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c90d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	56                   	push   esi
c001c915:	e8 05 d1 fe ff       	call   c0009a1f <free>
c001c91a:	83 c4 0c             	add    esp,0xc
c001c91d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c924:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c929:	50                   	push   eax
c001c92a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c931:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c938:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c93c:	52                   	push   edx
c001c93d:	57                   	push   edi
c001c93e:	53                   	push   ebx
c001c93f:	e8 6e fe ff ff       	call   c001c7b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c944:	83 c4 20             	add    esp,0x20
c001c947:	eb 31                	jmp    c001c97a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c949:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c94c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c953:	d0 e8                	shr    al,1
c001c955:	89 3b                	mov    DWORD PTR [ebx],edi
c001c957:	83 e0 01             	and    eax,0x1
c001c95a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c961:	83 ec 0c             	sub    esp,0xc
c001c964:	89 13                	mov    DWORD PTR [ebx],edx
c001c966:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c96d:	89 03                	mov    DWORD PTR [ebx],eax
c001c96f:	56                   	push   esi
c001c970:	e8 aa d0 fe ff       	call   c0009a1f <free>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	b0 01                	mov    al,0x1
c001c97a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c980:	5b                   	pop    ebx
c001c981:	5e                   	pop    esi
c001c982:	5f                   	pop    edi
c001c983:	5d                   	pop    ebp
c001c984:	c3                   	ret    

c001c985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c985:	55                   	push   ebp
c001c986:	57                   	push   edi
c001c987:	56                   	push   esi
c001c988:	53                   	push   ebx
c001c989:	83 ec 20             	sub    esp,0x20
c001c98c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c990:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c994:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c998:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c9a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c9a8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c9ad:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c9b3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c9b9:	57                   	push   edi
c001c9ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9be:	50                   	push   eax
c001c9bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9c3:	50                   	push   eax
c001c9c4:	e8 95 fd ff ff       	call   c001c75e <readRoot(unsigned int*, unsigned int*, char)>
c001c9c9:	5a                   	pop    edx
c001c9ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9ce:	e8 cd 3c fe ff       	call   c00006a0 <strlen>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	83 f8 03             	cmp    eax,0x3
c001c9d9:	77 17                	ja     c001c9f2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c9db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9df:	89 03                	mov    DWORD PTR [ebx],eax
c001c9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9e5:	89 06                	mov    DWORD PTR [esi],eax
c001c9e7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c9ee:	b0 01                	mov    al,0x1
c001c9f0:	eb 19                	jmp    c001ca0b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c9f2:	50                   	push   eax
c001c9f3:	55                   	push   ebp
c001c9f4:	57                   	push   edi
c001c9f5:	56                   	push   esi
c001c9f6:	53                   	push   ebx
c001c9f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ca03:	e8 aa fd ff ff       	call   c001c7b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca08:	83 c4 20             	add    esp,0x20
c001ca0b:	83 c4 1c             	add    esp,0x1c
c001ca0e:	5b                   	pop    ebx
c001ca0f:	5e                   	pop    esi
c001ca10:	5f                   	pop    edi
c001ca11:	5d                   	pop    ebp
c001ca12:	c3                   	ret    
c001ca13:	90                   	nop

c001ca14 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca14:	57                   	push   edi
c001ca15:	56                   	push   esi
c001ca16:	53                   	push   ebx
c001ca17:	83 ec 10             	sub    esp,0x10
c001ca1a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca22:	85 ff                	test   edi,edi
c001ca24:	0f 84 8b 00 00 00    	je     c001cab5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca2a:	85 f6                	test   esi,esi
c001ca2c:	0f 84 83 00 00 00    	je     c001cab5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca32:	b8 03 00 00 00       	mov    eax,0x3
c001ca37:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ca3c:	75 7c                	jne    c001caba <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	6a 1c                	push   0x1c
c001ca43:	e8 c7 cf fe ff       	call   c0009a0f <malloc>
c001ca48:	89 07                	mov    DWORD PTR [edi],eax
c001ca4a:	89 c3                	mov    ebx,eax
c001ca4c:	58                   	pop    eax
c001ca4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca51:	50                   	push   eax
c001ca52:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ca55:	50                   	push   eax
c001ca56:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca5a:	50                   	push   eax
c001ca5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca5f:	50                   	push   eax
c001ca60:	56                   	push   esi
c001ca61:	e8 1f ff ff ff       	call   c001c985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca66:	83 c4 20             	add    esp,0x20
c001ca69:	84 c0                	test   al,al
c001ca6b:	74 07                	je     c001ca74 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ca6d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca72:	74 0b                	je     c001ca7f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001ca74:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ca78:	b8 01 00 00 00       	mov    eax,0x1
c001ca7d:	eb 3b                	jmp    c001caba <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca83:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ca87:	89 03                	mov    DWORD PTR [ebx],eax
c001ca89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ca90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca94:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ca9b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001caa2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001caa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caac:	8a 06                	mov    al,BYTE PTR [esi]
c001caae:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cab1:	31 c0                	xor    eax,eax
c001cab3:	eb 05                	jmp    c001caba <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cab5:	b8 04 00 00 00       	mov    eax,0x4
c001caba:	83 c4 10             	add    esp,0x10
c001cabd:	5b                   	pop    ebx
c001cabe:	5e                   	pop    esi
c001cabf:	5f                   	pop    edi
c001cac0:	c3                   	ret    
c001cac1:	90                   	nop

c001cac2 <ISO9660::exists(char const*)>:
c001cac2:	83 ec 28             	sub    esp,0x28
c001cac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cac9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cacd:	52                   	push   edx
c001cace:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cad1:	52                   	push   edx
c001cad2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cad6:	52                   	push   edx
c001cad7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cadb:	52                   	push   edx
c001cadc:	50                   	push   eax
c001cadd:	e8 a3 fe ff ff       	call   c001c985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cae2:	83 c4 3c             	add    esp,0x3c
c001cae5:	c3                   	ret    

c001cae6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cae6:	56                   	push   esi
c001cae7:	53                   	push   ebx
c001cae8:	83 ec 14             	sub    esp,0x14
c001caeb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001caef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001caf3:	85 db                	test   ebx,ebx
c001caf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caf9:	0f 94 c2             	sete   dl
c001cafc:	85 f6                	test   esi,esi
c001cafe:	0f 94 c0             	sete   al
c001cb01:	08 c2                	or     dl,al
c001cb03:	75 68                	jne    c001cb6d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb05:	85 c9                	test   ecx,ecx
c001cb07:	74 64                	je     c001cb6d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb09:	83 ec 0c             	sub    esp,0xc
c001cb0c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cb0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb13:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb19:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb20:	50                   	push   eax
c001cb21:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cb24:	50                   	push   eax
c001cb25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb29:	50                   	push   eax
c001cb2a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb2e:	50                   	push   eax
c001cb2f:	51                   	push   ecx
c001cb30:	e8 50 fe ff ff       	call   c001c985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb35:	83 c4 20             	add    esp,0x20
c001cb38:	ba 01 00 00 00       	mov    edx,0x1
c001cb3d:	84 c0                	test   al,al
c001cb3f:	74 31                	je     c001cb72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb45:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb4c:	89 03                	mov    DWORD PTR [ebx],eax
c001cb4e:	ba 00 00 00 00       	mov    edx,0x0
c001cb53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb57:	85 c0                	test   eax,eax
c001cb59:	0f 95 06             	setne  BYTE PTR [esi]
c001cb5c:	74 14                	je     c001cb72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb5e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb64:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb6b:	eb 05                	jmp    c001cb72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb6d:	ba 04 00 00 00       	mov    edx,0x4
c001cb72:	83 c4 14             	add    esp,0x14
c001cb75:	89 d0                	mov    eax,edx
c001cb77:	5b                   	pop    ebx
c001cb78:	5e                   	pop    esi
c001cb79:	c3                   	ret    

c001cb7a <ISO9660::openDir(char const*, void**)>:
c001cb7a:	57                   	push   edi
c001cb7b:	56                   	push   esi
c001cb7c:	53                   	push   ebx
c001cb7d:	83 ec 10             	sub    esp,0x10
c001cb80:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb84:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb88:	85 ff                	test   edi,edi
c001cb8a:	74 7b                	je     c001cc07 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb8c:	85 f6                	test   esi,esi
c001cb8e:	74 77                	je     c001cc07 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	6a 1c                	push   0x1c
c001cb95:	e8 75 ce fe ff       	call   c0009a0f <malloc>
c001cb9a:	89 07                	mov    DWORD PTR [edi],eax
c001cb9c:	89 c3                	mov    ebx,eax
c001cb9e:	58                   	pop    eax
c001cb9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cba3:	50                   	push   eax
c001cba4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cba7:	50                   	push   eax
c001cba8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbac:	50                   	push   eax
c001cbad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbb1:	50                   	push   eax
c001cbb2:	56                   	push   esi
c001cbb3:	e8 cd fd ff ff       	call   c001c985 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cbb8:	83 c4 20             	add    esp,0x20
c001cbbb:	84 c0                	test   al,al
c001cbbd:	74 07                	je     c001cbc6 <ISO9660::openDir(char const*, void**)+0x4c>
c001cbbf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cbc4:	75 0b                	jne    c001cbd1 <ISO9660::openDir(char const*, void**)+0x57>
c001cbc6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cbca:	b8 01 00 00 00       	mov    eax,0x1
c001cbcf:	eb 3b                	jmp    c001cc0c <ISO9660::openDir(char const*, void**)+0x92>
c001cbd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbd5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cbd9:	89 03                	mov    DWORD PTR [ebx],eax
c001cbdb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cbe2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbe6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cbed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbf4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cbf7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbfe:	8a 06                	mov    al,BYTE PTR [esi]
c001cc00:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cc03:	31 c0                	xor    eax,eax
c001cc05:	eb 05                	jmp    c001cc0c <ISO9660::openDir(char const*, void**)+0x92>
c001cc07:	b8 04 00 00 00       	mov    eax,0x4
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	5b                   	pop    ebx
c001cc10:	5e                   	pop    esi
c001cc11:	5f                   	pop    edi
c001cc12:	c3                   	ret    
c001cc13:	90                   	nop

c001cc14 <ISO9660::ISO9660()>:
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1b:	83 ec 0c             	sub    esp,0xc
c001cc1e:	50                   	push   eax
c001cc1f:	e8 ee 03 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001cc24:	83 c4 10             	add    esp,0x10
c001cc27:	ba d8 64 02 c0       	mov    edx,0xc00264d8
c001cc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc30:	89 10                	mov    DWORD PTR [eax],edx
c001cc32:	90                   	nop
c001cc33:	83 c4 0c             	add    esp,0xc
c001cc36:	c3                   	ret    
c001cc37:	90                   	nop

c001cc38 <SoundCard::beginPlayback()>:
c001cc38:	c7 44 24 04 38 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026538
c001cc40:	e9 7e 7d ff ff       	jmp    c00149c3 <Krnl::panic(char const*)>
c001cc45:	90                   	nop

c001cc46 <SoundCard::stopPlayback()>:
c001cc46:	c7 44 24 04 6c 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc002656c
c001cc4e:	e9 70 7d ff ff       	jmp    c00149c3 <Krnl::panic(char const*)>
c001cc53:	90                   	nop

c001cc54 <SoundCard::SoundCard(char const*)>:
c001cc54:	83 ec 1c             	sub    esp,0x1c
c001cc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5b:	83 ec 08             	sub    esp,0x8
c001cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc62:	50                   	push   eax
c001cc63:	e8 d6 17 ff ff       	call   c000e43e <Device::Device(char const*)>
c001cc68:	83 c4 10             	add    esp,0x10
c001cc6b:	ba 04 66 02 c0       	mov    edx,0xc0026604
c001cc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc74:	89 10                	mov    DWORD PTR [eax],edx
c001cc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc7a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cc81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc85:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc93:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cc9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cca1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ccab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccaf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ccb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccc1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ccc6:	7f 19                	jg     c001cce1 <SoundCard::SoundCard(char const*)+0x8d>
c001ccc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccd0:	83 c2 54             	add    edx,0x54
c001ccd3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ccdb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ccdf:	eb e0                	jmp    c001ccc1 <SoundCard::SoundCard(char const*)+0x6d>
c001cce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cce5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ccec:	90                   	nop
c001cced:	83 c4 1c             	add    esp,0x1c
c001ccf0:	c3                   	ret    
c001ccf1:	90                   	nop

c001ccf2 <SoundCard::~SoundCard()>:
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	ba 04 66 02 c0       	mov    edx,0xc0026604
c001ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfe:	89 10                	mov    DWORD PTR [eax],edx
c001cd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd04:	83 ec 0c             	sub    esp,0xc
c001cd07:	50                   	push   eax
c001cd08:	e8 fb 13 ff ff       	call   c000e108 <Device::~Device()>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	90                   	nop
c001cd11:	83 c4 0c             	add    esp,0xc
c001cd14:	c3                   	ret    
c001cd15:	90                   	nop

c001cd16 <SoundCard::~SoundCard()>:
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	83 ec 0c             	sub    esp,0xc
c001cd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd20:	e8 cd ff ff ff       	call   c001ccf2 <SoundCard::~SoundCard()>
c001cd25:	83 c4 10             	add    esp,0x10
c001cd28:	83 ec 08             	sub    esp,0x8
c001cd2b:	68 e8 01 00 00       	push   0x1e8
c001cd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd34:	e8 e1 fe fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	83 c4 0c             	add    esp,0xc
c001cd3f:	c3                   	ret    

c001cd40 <SoundCard::configureRates(int, int, int)>:
c001cd40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd44:	31 c0                	xor    eax,eax
c001cd46:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cd4d:	75 20                	jne    c001cd6f <SoundCard::configureRates(int, int, int)+0x2f>
c001cd4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd53:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cd59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd5d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd67:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cd6d:	b0 01                	mov    al,0x1
c001cd6f:	c3                   	ret    

c001cd70 <SoundCard::getSamples16(int, short*)>:
c001cd70:	55                   	push   ebp
c001cd71:	57                   	push   edi
c001cd72:	31 ff                	xor    edi,edi
c001cd74:	56                   	push   esi
c001cd75:	53                   	push   ebx
c001cd76:	31 db                	xor    ebx,ebx
c001cd78:	83 ec 18             	sub    esp,0x18
c001cd7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd7f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cd83:	68 9f 65 02 c0       	push   0xc002659f
c001cd88:	e8 6e ff fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cd8d:	83 c4 0c             	add    esp,0xc
c001cd90:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd93:	50                   	push   eax
c001cd94:	6a 00                	push   0x0
c001cd96:	55                   	push   ebp
c001cd97:	e8 e8 38 fe ff       	call   c0000684 <memset>
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda3:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cdaa:	85 c0                	test   eax,eax
c001cdac:	74 1b                	je     c001cdc9 <SoundCard::getSamples16(int, short*)+0x59>
c001cdae:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cdb2:	75 15                	jne    c001cdc9 <SoundCard::getSamples16(int, short*)+0x59>
c001cdb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cdb8:	55                   	push   ebp
c001cdb9:	56                   	push   esi
c001cdba:	50                   	push   eax
c001cdbb:	e8 58 03 00 00       	call   c001d118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	39 c7                	cmp    edi,eax
c001cdc5:	7d 02                	jge    c001cdc9 <SoundCard::getSamples16(int, short*)+0x59>
c001cdc7:	89 c7                	mov    edi,eax
c001cdc9:	43                   	inc    ebx
c001cdca:	83 fb 20             	cmp    ebx,0x20
c001cdcd:	75 d0                	jne    c001cd9f <SoundCard::getSamples16(int, short*)+0x2f>
c001cdcf:	83 c4 0c             	add    esp,0xc
c001cdd2:	89 f8                	mov    eax,edi
c001cdd4:	5b                   	pop    ebx
c001cdd5:	5e                   	pop    esi
c001cdd6:	5f                   	pop    edi
c001cdd7:	5d                   	pop    ebp
c001cdd8:	c3                   	ret    
c001cdd9:	90                   	nop

c001cdda <SoundCard::getSamples32(int, int*)>:
c001cdda:	55                   	push   ebp
c001cddb:	57                   	push   edi
c001cddc:	31 ff                	xor    edi,edi
c001cdde:	56                   	push   esi
c001cddf:	31 f6                	xor    esi,esi
c001cde1:	53                   	push   ebx
c001cde2:	83 ec 10             	sub    esp,0x10
c001cde5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cde9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cded:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cdf1:	c1 e0 02             	shl    eax,0x2
c001cdf4:	50                   	push   eax
c001cdf5:	6a 00                	push   0x0
c001cdf7:	55                   	push   ebp
c001cdf8:	e8 87 38 fe ff       	call   c0000684 <memset>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ce07:	85 c0                	test   eax,eax
c001ce09:	74 1b                	je     c001ce26 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce0b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce0f:	75 15                	jne    c001ce26 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce11:	53                   	push   ebx
c001ce12:	55                   	push   ebp
c001ce13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce17:	50                   	push   eax
c001ce18:	e8 f7 03 00 00       	call   c001d214 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	39 c6                	cmp    esi,eax
c001ce22:	7d 02                	jge    c001ce26 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce24:	89 c6                	mov    esi,eax
c001ce26:	47                   	inc    edi
c001ce27:	83 ff 20             	cmp    edi,0x20
c001ce2a:	75 d4                	jne    c001ce00 <SoundCard::getSamples32(int, int*)+0x26>
c001ce2c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001ce32:	85 f6                	test   esi,esi
c001ce34:	75 0f                	jne    c001ce45 <SoundCard::getSamples32(int, int*)+0x6b>
c001ce36:	84 c0                	test   al,al
c001ce38:	74 1b                	je     c001ce55 <SoundCard::getSamples32(int, int*)+0x7b>
c001ce3a:	83 ec 0c             	sub    esp,0xc
c001ce3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce3f:	53                   	push   ebx
c001ce40:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ce43:	eb 0d                	jmp    c001ce52 <SoundCard::getSamples32(int, int*)+0x78>
c001ce45:	84 c0                	test   al,al
c001ce47:	75 0c                	jne    c001ce55 <SoundCard::getSamples32(int, int*)+0x7b>
c001ce49:	83 ec 0c             	sub    esp,0xc
c001ce4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce4e:	53                   	push   ebx
c001ce4f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ce52:	83 c4 10             	add    esp,0x10
c001ce55:	83 c4 0c             	add    esp,0xc
c001ce58:	89 f0                	mov    eax,esi
c001ce5a:	5b                   	pop    ebx
c001ce5b:	5e                   	pop    esi
c001ce5c:	5f                   	pop    edi
c001ce5d:	5d                   	pop    ebp
c001ce5e:	c3                   	ret    
c001ce5f:	90                   	nop

c001ce60 <SoundCard::addChannel(SoundPort*)>:
c001ce60:	56                   	push   esi
c001ce61:	53                   	push   ebx
c001ce62:	53                   	push   ebx
c001ce63:	31 db                	xor    ebx,ebx
c001ce65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce69:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001ce71:	74 27                	je     c001ce9a <SoundCard::addChannel(SoundPort*)+0x3a>
c001ce73:	43                   	inc    ebx
c001ce74:	83 fb 20             	cmp    ebx,0x20
c001ce77:	75 f0                	jne    c001ce69 <SoundCard::addChannel(SoundPort*)+0x9>
c001ce79:	83 ec 0c             	sub    esp,0xc
c001ce7c:	83 cb ff             	or     ebx,0xffffffff
c001ce7f:	68 c5 65 02 c0       	push   0xc00265c5
c001ce84:	e8 72 fe fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ce89:	c7 04 24 be 65 02 c0 	mov    DWORD PTR [esp],0xc00265be
c001ce90:	e8 2e 7b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001ce95:	83 c4 10             	add    esp,0x10
c001ce98:	eb 1b                	jmp    c001ceb5 <SoundCard::addChannel(SoundPort*)+0x55>
c001ce9a:	51                   	push   ecx
c001ce9b:	51                   	push   ecx
c001ce9c:	53                   	push   ebx
c001ce9d:	68 dd 65 02 c0       	push   0xc00265dd
c001cea2:	e8 54 fe fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001ceb5:	89 d8                	mov    eax,ebx
c001ceb7:	5a                   	pop    edx
c001ceb8:	5b                   	pop    ebx
c001ceb9:	5e                   	pop    esi
c001ceba:	c3                   	ret    
c001cebb:	90                   	nop

c001cebc <SoundCard::removeChannel(int)>:
c001cebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cec4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cecf:	c3                   	ret    

c001ced0 <SoundPort::SoundPort(int, int, int, int)>:
c001ced0:	83 ec 0c             	sub    esp,0xc
c001ced3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceee:	89 10                	mov    DWORD PTR [eax],edx
c001cef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cef8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf06:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cf0b:	75 13                	jne    c001cf20 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cf0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf11:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf13:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf18:	01 c0                	add    eax,eax
c001cf1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf1e:	66 90                	xchg   ax,ax
c001cf20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf28:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cf36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf3d:	c1 e0 02             	shl    eax,0x2
c001cf40:	83 ec 0c             	sub    esp,0xc
c001cf43:	50                   	push   eax
c001cf44:	e8 c6 ca fe ff       	call   c0009a0f <malloc>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	89 c2                	mov    edx,eax
c001cf4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf55:	90                   	nop
c001cf56:	83 c4 0c             	add    esp,0xc
c001cf59:	c3                   	ret    
c001cf5a:	66 90                	xchg   ax,ax

c001cf5c <SoundPort::~SoundPort()>:
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf66:	85 c0                	test   eax,eax
c001cf68:	74 1e                	je     c001cf88 <SoundPort::~SoundPort()+0x2c>
c001cf6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf71:	83 ec 0c             	sub    esp,0xc
c001cf74:	50                   	push   eax
c001cf75:	e8 a5 ca fe ff       	call   c0009a1f <free>
c001cf7a:	83 c4 10             	add    esp,0x10
c001cf7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf81:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf88:	90                   	nop
c001cf89:	83 c4 0c             	add    esp,0xc
c001cf8c:	c3                   	ret    
c001cf8d:	90                   	nop
c001cf8e:	66 90                	xchg   ax,ax

c001cf90 <SoundPort::unpause()>:
c001cf90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf94:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cf98:	c3                   	ret    
c001cf99:	90                   	nop
c001cf9a:	66 90                	xchg   ax,ax

c001cf9c <SoundPort::pause()>:
c001cf9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfa0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cfa4:	c3                   	ret    
c001cfa5:	90                   	nop
c001cfa6:	66 90                	xchg   ax,ax

c001cfa8 <SoundPort::getBufferUsed()>:
c001cfa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cfaf:	c3                   	ret    

c001cfb0 <SoundPort::getBufferSize()>:
c001cfb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfb4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cfb7:	c3                   	ret    

c001cfb8 <SoundPort::buffer16(short*, int)>:
c001cfb8:	55                   	push   ebp
c001cfb9:	57                   	push   edi
c001cfba:	56                   	push   esi
c001cfbb:	53                   	push   ebx
c001cfbc:	83 ec 1c             	sub    esp,0x1c
c001cfbf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfc3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cfc7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cfca:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cfcd:	0f 84 85 00 00 00    	je     c001d058 <SoundPort::buffer16(short*, int)+0xa0>
c001cfd3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cfd7:	85 c9                	test   ecx,ecx
c001cfd9:	7e 7d                	jle    c001d058 <SoundPort::buffer16(short*, int)+0xa0>
c001cfdb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cfdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cfe2:	c1 e1 0f             	shl    ecx,0xf
c001cfe5:	8d 70 01             	lea    esi,[eax+0x1]
c001cfe8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cfeb:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cfee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cff1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cff4:	74 6e                	je     c001d064 <SoundPort::buffer16(short*, int)+0xac>
c001cff6:	31 f6                	xor    esi,esi
c001cff8:	eb 22                	jmp    c001d01c <SoundPort::buffer16(short*, int)+0x64>
c001cffa:	66 90                	xchg   ax,ax
c001cffc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d001:	8d 79 01             	lea    edi,[ecx+0x1]
c001d004:	c1 e3 0f             	shl    ebx,0xf
c001d007:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d00a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d00d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d010:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d013:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d016:	74 1c                	je     c001d034 <SoundPort::buffer16(short*, int)+0x7c>
c001d018:	89 c6                	mov    esi,eax
c001d01a:	66 90                	xchg   ax,ax
c001d01c:	8d 46 01             	lea    eax,[esi+0x1]
c001d01f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d023:	75 d7                	jne    c001cffc <SoundPort::buffer16(short*, int)+0x44>
c001d025:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d029:	83 c4 1c             	add    esp,0x1c
c001d02c:	5b                   	pop    ebx
c001d02d:	5e                   	pop    esi
c001d02e:	5f                   	pop    edi
c001d02f:	5d                   	pop    ebp
c001d030:	c3                   	ret    
c001d031:	8d 76 00             	lea    esi,[esi+0x0]
c001d034:	8d 46 02             	lea    eax,[esi+0x2]
c001d037:	90                   	nop
c001d038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d03c:	83 ec 0c             	sub    esp,0xc
c001d03f:	68 30 66 02 c0       	push   0xc0026630
c001d044:	e8 b2 fc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d049:	83 c4 10             	add    esp,0x10
c001d04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d050:	83 c4 1c             	add    esp,0x1c
c001d053:	5b                   	pop    ebx
c001d054:	5e                   	pop    esi
c001d055:	5f                   	pop    edi
c001d056:	5d                   	pop    ebp
c001d057:	c3                   	ret    
c001d058:	83 c4 1c             	add    esp,0x1c
c001d05b:	31 c0                	xor    eax,eax
c001d05d:	5b                   	pop    ebx
c001d05e:	5e                   	pop    esi
c001d05f:	5f                   	pop    edi
c001d060:	5d                   	pop    ebp
c001d061:	c3                   	ret    
c001d062:	66 90                	xchg   ax,ax
c001d064:	b8 01 00 00 00       	mov    eax,0x1
c001d069:	eb cd                	jmp    c001d038 <SoundPort::buffer16(short*, int)+0x80>
c001d06b:	90                   	nop

c001d06c <SoundPort::buffer32(int*, int)>:
c001d06c:	55                   	push   ebp
c001d06d:	57                   	push   edi
c001d06e:	56                   	push   esi
c001d06f:	53                   	push   ebx
c001d070:	83 ec 1c             	sub    esp,0x1c
c001d073:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d07b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d07e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d086:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d089:	74 79                	je     c001d104 <SoundPort::buffer32(int*, int)+0x98>
c001d08b:	85 c0                	test   eax,eax
c001d08d:	7e 75                	jle    c001d104 <SoundPort::buffer32(int*, int)+0x98>
c001d08f:	8d 71 01             	lea    esi,[ecx+0x1]
c001d092:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d095:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d098:	8b 37                	mov    esi,DWORD PTR [edi]
c001d09a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d09d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0a0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0a3:	74 6b                	je     c001d110 <SoundPort::buffer32(int*, int)+0xa4>
c001d0a5:	31 f6                	xor    esi,esi
c001d0a7:	eb 1f                	jmp    c001d0c8 <SoundPort::buffer32(int*, int)+0x5c>
c001d0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0ac:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d0af:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d0b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d0b5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d0b8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d0bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0c2:	74 1c                	je     c001d0e0 <SoundPort::buffer32(int*, int)+0x74>
c001d0c4:	89 de                	mov    esi,ebx
c001d0c6:	66 90                	xchg   ax,ax
c001d0c8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d0cb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d0cf:	75 db                	jne    c001d0ac <SoundPort::buffer32(int*, int)+0x40>
c001d0d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d5:	83 c4 1c             	add    esp,0x1c
c001d0d8:	5b                   	pop    ebx
c001d0d9:	5e                   	pop    esi
c001d0da:	5f                   	pop    edi
c001d0db:	5d                   	pop    ebp
c001d0dc:	c3                   	ret    
c001d0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d0e0:	8d 46 02             	lea    eax,[esi+0x2]
c001d0e3:	90                   	nop
c001d0e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0e8:	83 ec 0c             	sub    esp,0xc
c001d0eb:	68 4b 66 02 c0       	push   0xc002664b
c001d0f0:	e8 06 fc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d0f5:	83 c4 10             	add    esp,0x10
c001d0f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0fc:	83 c4 1c             	add    esp,0x1c
c001d0ff:	5b                   	pop    ebx
c001d100:	5e                   	pop    esi
c001d101:	5f                   	pop    edi
c001d102:	5d                   	pop    ebp
c001d103:	c3                   	ret    
c001d104:	83 c4 1c             	add    esp,0x1c
c001d107:	31 c0                	xor    eax,eax
c001d109:	5b                   	pop    ebx
c001d10a:	5e                   	pop    esi
c001d10b:	5f                   	pop    edi
c001d10c:	5d                   	pop    ebp
c001d10d:	c3                   	ret    
c001d10e:	66 90                	xchg   ax,ax
c001d110:	b8 01 00 00 00       	mov    eax,0x1
c001d115:	eb cd                	jmp    c001d0e4 <SoundPort::buffer32(int*, int)+0x78>
c001d117:	90                   	nop

c001d118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d118:	57                   	push   edi
c001d119:	56                   	push   esi
c001d11a:	53                   	push   ebx
c001d11b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d11f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d123:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d129:	39 03                	cmp    DWORD PTR [ebx],eax
c001d12b:	74 13                	je     c001d140 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d12d:	83 ec 0c             	sub    esp,0xc
c001d130:	68 a0 66 02 c0       	push   0xc00266a0
c001d135:	e8 89 78 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d13a:	83 c4 10             	add    esp,0x10
c001d13d:	8d 76 00             	lea    esi,[esi+0x0]
c001d140:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d146:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d149:	74 11                	je     c001d15c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d14b:	83 ec 0c             	sub    esp,0xc
c001d14e:	68 66 66 02 c0       	push   0xc0026666
c001d153:	e8 6b 78 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d158:	83 c4 10             	add    esp,0x10
c001d15b:	90                   	nop
c001d15c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d162:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d165:	74 11                	je     c001d178 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d167:	83 ec 0c             	sub    esp,0xc
c001d16a:	68 66 66 02 c0       	push   0xc0026666
c001d16f:	e8 4f 78 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	90                   	nop
c001d178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d17b:	89 c6                	mov    esi,eax
c001d17d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d181:	7e 05                	jle    c001d188 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d183:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d187:	90                   	nop
c001d188:	85 f6                	test   esi,esi
c001d18a:	7e 30                	jle    c001d1bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d18c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d190:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d193:	31 c9                	xor    ecx,ecx
c001d195:	01 d7                	add    edi,edx
c001d197:	90                   	nop
c001d198:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d19b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d19e:	85 c0                	test   eax,eax
c001d1a0:	79 06                	jns    c001d1a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d1a2:	05 ff 7f 00 00       	add    eax,0x7fff
c001d1a7:	90                   	nop
c001d1a8:	c1 f8 0f             	sar    eax,0xf
c001d1ab:	83 c1 04             	add    ecx,0x4
c001d1ae:	66 01 02             	add    WORD PTR [edx],ax
c001d1b1:	83 c2 02             	add    edx,0x2
c001d1b4:	39 d7                	cmp    edi,edx
c001d1b6:	75 e0                	jne    c001d198 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d1b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1bb:	90                   	nop
c001d1bc:	56                   	push   esi
c001d1bd:	89 c2                	mov    edx,eax
c001d1bf:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d1c6:	29 f2                	sub    edx,esi
c001d1c8:	52                   	push   edx
c001d1c9:	50                   	push   eax
c001d1ca:	68 c0 66 02 c0       	push   0xc00266c0
c001d1cf:	e8 27 fb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d1d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d1d7:	50                   	push   eax
c001d1d8:	01 f8                	add    eax,edi
c001d1da:	50                   	push   eax
c001d1db:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1de:	29 f0                	sub    eax,esi
c001d1e0:	c1 e0 02             	shl    eax,0x2
c001d1e3:	50                   	push   eax
c001d1e4:	68 f0 66 02 c0       	push   0xc00266f0
c001d1e9:	e8 0d fb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d1ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d1f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1f4:	83 c4 1c             	add    esp,0x1c
c001d1f7:	01 d7                	add    edi,edx
c001d1f9:	29 f0                	sub    eax,esi
c001d1fb:	c1 e0 02             	shl    eax,0x2
c001d1fe:	50                   	push   eax
c001d1ff:	57                   	push   edi
c001d200:	52                   	push   edx
c001d201:	e8 b6 33 fe ff       	call   c00005bc <memmove>
c001d206:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d209:	83 c4 10             	add    esp,0x10
c001d20c:	89 f0                	mov    eax,esi
c001d20e:	5b                   	pop    ebx
c001d20f:	5e                   	pop    esi
c001d210:	5f                   	pop    edi
c001d211:	c3                   	ret    
c001d212:	66 90                	xchg   ax,ax

c001d214 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d214:	57                   	push   edi
c001d215:	56                   	push   esi
c001d216:	53                   	push   ebx
c001d217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d21b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d21f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d223:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d229:	39 06                	cmp    DWORD PTR [esi],eax
c001d22b:	74 13                	je     c001d240 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	68 14 67 02 c0       	push   0xc0026714
c001d235:	e8 89 77 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	8d 76 00             	lea    esi,[esi+0x0]
c001d240:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d246:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d249:	74 11                	je     c001d25c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d24b:	83 ec 0c             	sub    esp,0xc
c001d24e:	68 82 66 02 c0       	push   0xc0026682
c001d253:	e8 6b 77 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d258:	83 c4 10             	add    esp,0x10
c001d25b:	90                   	nop
c001d25c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d262:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d265:	74 11                	je     c001d278 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d267:	83 ec 0c             	sub    esp,0xc
c001d26a:	68 82 66 02 c0       	push   0xc0026682
c001d26f:	e8 4f 77 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	90                   	nop
c001d278:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d27b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d27f:	7e 07                	jle    c001d288 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d281:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d285:	8d 76 00             	lea    esi,[esi+0x0]
c001d288:	85 ff                	test   edi,edi
c001d28a:	7e 1c                	jle    c001d2a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d28c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d293:	31 c0                	xor    eax,eax
c001d295:	8d 76 00             	lea    esi,[esi+0x0]
c001d298:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d29b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d29e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d2a1:	83 c0 04             	add    eax,0x4
c001d2a4:	39 c1                	cmp    ecx,eax
c001d2a6:	75 f0                	jne    c001d298 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d2a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d2ab:	50                   	push   eax
c001d2ac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2af:	29 f8                	sub    eax,edi
c001d2b1:	c1 e0 02             	shl    eax,0x2
c001d2b4:	50                   	push   eax
c001d2b5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d2b8:	50                   	push   eax
c001d2b9:	52                   	push   edx
c001d2ba:	e8 fd 32 fe ff       	call   c00005bc <memmove>
c001d2bf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d2c2:	83 c4 10             	add    esp,0x10
c001d2c5:	89 f8                	mov    eax,edi
c001d2c7:	5b                   	pop    ebx
c001d2c8:	5e                   	pop    esi
c001d2c9:	5f                   	pop    edi
c001d2ca:	c3                   	ret    
c001d2cb:	90                   	nop

c001d2cc <PCI::open(int, int, void*)>:
c001d2cc:	83 ec 18             	sub    esp,0x18
c001d2cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d2dd:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2df:	50                   	push   eax
c001d2e0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d2e3:	31 c0                	xor    eax,eax
c001d2e5:	83 c4 1c             	add    esp,0x1c
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <PCI::close(int, int, void*)>:
c001d2ea:	31 c0                	xor    eax,eax
c001d2ec:	c3                   	ret    
c001d2ed:	90                   	nop

c001d2ee <PCI::PCI()>:
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f5:	83 ec 08             	sub    esp,0x8
c001d2f8:	68 33 67 02 c0       	push   0xc0026733
c001d2fd:	50                   	push   eax
c001d2fe:	e8 9d 07 ff ff       	call   c000daa0 <Bus::Bus(char const*)>
c001d303:	83 c4 10             	add    esp,0x10
c001d306:	ba 08 69 02 c0       	mov    edx,0xc0026908
c001d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d30f:	89 10                	mov    DWORD PTR [eax],edx
c001d311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d315:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d323:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c001d328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d32c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d332:	0f b6 d0             	movzx  edx,al
c001d335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d339:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d344:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d34a:	0f b6 d0             	movzx  edx,al
c001d34d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d351:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d35a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d360:	8d 50 01             	lea    edx,[eax+0x1]
c001d363:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d367:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d36d:	0f b6 d0             	movzx  edx,al
c001d370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d374:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d378:	83 c9 c0             	or     ecx,0xffffffc0
c001d37b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d37f:	90                   	nop
c001d380:	83 c4 0c             	add    esp,0xc
c001d383:	c3                   	ret    

c001d384 <PCI::readBAR8(unsigned int, int)>:
c001d384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d38c:	f6 c2 01             	test   dl,0x1
c001d38f:	74 07                	je     c001d398 <PCI::readBAR8(unsigned int, int)+0x14>
c001d391:	83 e2 fc             	and    edx,0xfffffffc
c001d394:	01 c2                	add    edx,eax
c001d396:	ec                   	in     al,dx
c001d397:	c3                   	ret    
c001d398:	83 e2 f0             	and    edx,0xfffffff0
c001d39b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d39e:	c3                   	ret    
c001d39f:	90                   	nop

c001d3a0 <PCI::readBAR16(unsigned int, int)>:
c001d3a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a8:	f6 c2 01             	test   dl,0x1
c001d3ab:	74 08                	je     c001d3b5 <PCI::readBAR16(unsigned int, int)+0x15>
c001d3ad:	83 e2 fc             	and    edx,0xfffffffc
c001d3b0:	01 c2                	add    edx,eax
c001d3b2:	66 ed                	in     ax,dx
c001d3b4:	c3                   	ret    
c001d3b5:	83 e2 f0             	and    edx,0xfffffff0
c001d3b8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d3bc:	c3                   	ret    
c001d3bd:	90                   	nop

c001d3be <PCI::readBAR32(unsigned int, int)>:
c001d3be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3c6:	f6 c2 01             	test   dl,0x1
c001d3c9:	74 07                	je     c001d3d2 <PCI::readBAR32(unsigned int, int)+0x14>
c001d3cb:	83 e2 fc             	and    edx,0xfffffffc
c001d3ce:	01 c2                	add    edx,eax
c001d3d0:	ed                   	in     eax,dx
c001d3d1:	c3                   	ret    
c001d3d2:	83 e2 f0             	and    edx,0xfffffff0
c001d3d5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d3d8:	c3                   	ret    
c001d3d9:	90                   	nop

c001d3da <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d3da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3e6:	f6 c2 01             	test   dl,0x1
c001d3e9:	74 07                	je     c001d3f2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d3eb:	83 e2 fc             	and    edx,0xfffffffc
c001d3ee:	01 ca                	add    edx,ecx
c001d3f0:	ee                   	out    dx,al
c001d3f1:	c3                   	ret    
c001d3f2:	83 e2 f0             	and    edx,0xfffffff0
c001d3f5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d3f8:	c3                   	ret    
c001d3f9:	90                   	nop

c001d3fa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d3fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d402:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d406:	f6 c2 01             	test   dl,0x1
c001d409:	74 08                	je     c001d413 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d40b:	83 e2 fc             	and    edx,0xfffffffc
c001d40e:	01 ca                	add    edx,ecx
c001d410:	66 ef                	out    dx,ax
c001d412:	c3                   	ret    
c001d413:	83 e2 f0             	and    edx,0xfffffff0
c001d416:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d41a:	c3                   	ret    
c001d41b:	90                   	nop

c001d41c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d41c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d424:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d428:	f6 c2 01             	test   dl,0x1
c001d42b:	74 07                	je     c001d434 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d42d:	83 e2 fc             	and    edx,0xfffffffc
c001d430:	01 ca                	add    edx,ecx
c001d432:	ef                   	out    dx,eax
c001d433:	c3                   	ret    
c001d434:	83 e2 f0             	and    edx,0xfffffff0
c001d437:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d43a:	c3                   	ret    
c001d43b:	90                   	nop

c001d43c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d43c:	55                   	push   ebp
c001d43d:	57                   	push   edi
c001d43e:	56                   	push   esi
c001d43f:	53                   	push   ebx
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d447:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d44b:	89 f0                	mov    eax,esi
c001d44d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d451:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d455:	3c 07                	cmp    al,0x7
c001d457:	76 10                	jbe    c001d469 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	68 3b 67 02 c0       	push   0xc002673b
c001d461:	e8 5d 75 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	80 fb 0f             	cmp    bl,0xf
c001d46c:	76 10                	jbe    c001d47e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d46e:	83 ec 0c             	sub    esp,0xc
c001d471:	68 6b 67 02 c0       	push   0xc002676b
c001d476:	e8 48 75 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d47b:	83 c4 10             	add    esp,0x10
c001d47e:	8d 04 36             	lea    eax,[esi+esi*1]
c001d481:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d486:	83 c8 f0             	or     eax,0xfffffff0
c001d489:	ee                   	out    dx,al
c001d48a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d48f:	89 e8                	mov    eax,ebp
c001d491:	ee                   	out    dx,al
c001d492:	83 c4 0c             	add    esp,0xc
c001d495:	89 d8                	mov    eax,ebx
c001d497:	66 81 e7 fc 00       	and    di,0xfc
c001d49c:	5b                   	pop    ebx
c001d49d:	c1 e0 08             	shl    eax,0x8
c001d4a0:	5e                   	pop    esi
c001d4a1:	09 f8                	or     eax,edi
c001d4a3:	5f                   	pop    edi
c001d4a4:	66 0d 00 c0          	or     ax,0xc000
c001d4a8:	5d                   	pop    ebp
c001d4a9:	c3                   	ret    

c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d4aa:	57                   	push   edi
c001d4ab:	56                   	push   esi
c001d4ac:	53                   	push   ebx
c001d4ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4b5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d4bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4c7:	83 ff 01             	cmp    edi,0x1
c001d4ca:	75 3e                	jne    c001d50a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d4cc:	89 de                	mov    esi,ebx
c001d4ce:	0f b6 c0             	movzx  eax,al
c001d4d1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d4d7:	c1 e0 10             	shl    eax,0x10
c001d4da:	0f b6 c9             	movzx  ecx,cl
c001d4dd:	09 f0                	or     eax,esi
c001d4df:	c1 e1 08             	shl    ecx,0x8
c001d4e2:	0f b6 d2             	movzx  edx,dl
c001d4e5:	09 c8                	or     eax,ecx
c001d4e7:	c1 e2 0b             	shl    edx,0xb
c001d4ea:	09 d0                	or     eax,edx
c001d4ec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4f1:	0d 00 00 00 80       	or     eax,0x80000000
c001d4f6:	ef                   	out    dx,eax
c001d4f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d4fc:	ed                   	in     eax,dx
c001d4fd:	83 e3 02             	and    ebx,0x2
c001d500:	0f b6 cb             	movzx  ecx,bl
c001d503:	c1 e1 03             	shl    ecx,0x3
c001d506:	d3 e8                	shr    eax,cl
c001d508:	eb 43                	jmp    c001d54d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d50a:	83 ff 02             	cmp    edi,0x2
c001d50d:	75 2c                	jne    c001d53b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	0f b6 c9             	movzx  ecx,cl
c001d515:	0f b6 d2             	movzx  edx,dl
c001d518:	0f b6 fb             	movzx  edi,bl
c001d51b:	0f b6 c0             	movzx  eax,al
c001d51e:	57                   	push   edi
c001d51f:	51                   	push   ecx
c001d520:	52                   	push   edx
c001d521:	50                   	push   eax
c001d522:	56                   	push   esi
c001d523:	e8 14 ff ff ff       	call   c001d43c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d528:	89 c2                	mov    edx,eax
c001d52a:	ed                   	in     eax,dx
c001d52b:	83 e3 02             	and    ebx,0x2
c001d52e:	83 c4 20             	add    esp,0x20
c001d531:	0f b6 cb             	movzx  ecx,bl
c001d534:	c1 e1 03             	shl    ecx,0x3
c001d537:	d3 e8                	shr    eax,cl
c001d539:	eb 12                	jmp    c001d54d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d53b:	83 ec 0c             	sub    esp,0xc
c001d53e:	68 9b 67 02 c0       	push   0xc002679b
c001d543:	e8 7b 74 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001d548:	83 c4 10             	add    esp,0x10
c001d54b:	31 c0                	xor    eax,eax
c001d54d:	5b                   	pop    ebx
c001d54e:	5e                   	pop    esi
c001d54f:	5f                   	pop    edi
c001d550:	c3                   	ret    
c001d551:	90                   	nop

c001d552 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d552:	83 ec 18             	sub    esp,0x18
c001d555:	6a 00                	push   0x0
c001d557:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d55c:	50                   	push   eax
c001d55d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d562:	50                   	push   eax
c001d563:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d568:	50                   	push   eax
c001d569:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d56d:	e8 38 ff ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d572:	83 c4 2c             	add    esp,0x2c
c001d575:	c3                   	ret    

c001d576 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d576:	83 ec 18             	sub    esp,0x18
c001d579:	6a 0e                	push   0xe
c001d57b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d580:	50                   	push   eax
c001d581:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d586:	50                   	push   eax
c001d587:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d58c:	50                   	push   eax
c001d58d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d591:	e8 14 ff ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d596:	83 c4 2c             	add    esp,0x2c
c001d599:	0f b6 c0             	movzx  eax,al
c001d59c:	c3                   	ret    
c001d59d:	90                   	nop

c001d59e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d59e:	55                   	push   ebp
c001d59f:	57                   	push   edi
c001d5a0:	56                   	push   esi
c001d5a1:	53                   	push   ebx
c001d5a2:	83 ec 18             	sub    esp,0x18
c001d5a5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d5aa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d5af:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d5b4:	6a 0a                	push   0xa
c001d5b6:	56                   	push   esi
c001d5b7:	55                   	push   ebp
c001d5b8:	57                   	push   edi
c001d5b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5bd:	e8 e8 fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5c2:	83 c4 14             	add    esp,0x14
c001d5c5:	89 c3                	mov    ebx,eax
c001d5c7:	6a 0a                	push   0xa
c001d5c9:	0f b6 db             	movzx  ebx,bl
c001d5cc:	56                   	push   esi
c001d5cd:	55                   	push   ebp
c001d5ce:	57                   	push   edi
c001d5cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5d3:	e8 d2 fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5d8:	83 c4 2c             	add    esp,0x2c
c001d5db:	25 00 ff 00 00       	and    eax,0xff00
c001d5e0:	09 d8                	or     eax,ebx
c001d5e2:	5b                   	pop    ebx
c001d5e3:	5e                   	pop    esi
c001d5e4:	5f                   	pop    edi
c001d5e5:	5d                   	pop    ebp
c001d5e6:	c3                   	ret    
c001d5e7:	90                   	nop

c001d5e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d5e8:	83 ec 18             	sub    esp,0x18
c001d5eb:	6a 08                	push   0x8
c001d5ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5f2:	50                   	push   eax
c001d5f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5f8:	50                   	push   eax
c001d5f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5fe:	50                   	push   eax
c001d5ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d603:	e8 a2 fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d608:	83 c4 2c             	add    esp,0x2c
c001d60b:	0f b6 c4             	movzx  eax,ah
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d610:	83 ec 18             	sub    esp,0x18
c001d613:	6a 08                	push   0x8
c001d615:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d61a:	50                   	push   eax
c001d61b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d620:	50                   	push   eax
c001d621:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d626:	50                   	push   eax
c001d627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d62b:	e8 7a fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d630:	83 c4 2c             	add    esp,0x2c
c001d633:	c3                   	ret    

c001d634 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d634:	83 ec 18             	sub    esp,0x18
c001d637:	6a 3c                	push   0x3c
c001d639:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d63e:	50                   	push   eax
c001d63f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d644:	50                   	push   eax
c001d645:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d64a:	50                   	push   eax
c001d64b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d64f:	e8 56 fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d654:	83 c4 2c             	add    esp,0x2c
c001d657:	c3                   	ret    

c001d658 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d658:	83 ec 18             	sub    esp,0x18
c001d65b:	6a 18                	push   0x18
c001d65d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d662:	50                   	push   eax
c001d663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d668:	50                   	push   eax
c001d669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d66e:	50                   	push   eax
c001d66f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d673:	e8 32 fe ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d678:	83 c4 2c             	add    esp,0x2c
c001d67b:	0f b6 c4             	movzx  eax,ah
c001d67e:	c3                   	ret    
c001d67f:	90                   	nop

c001d680 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d680:	55                   	push   ebp
c001d681:	57                   	push   edi
c001d682:	56                   	push   esi
c001d683:	53                   	push   ebx
c001d684:	83 ec 28             	sub    esp,0x28
c001d687:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d68b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d690:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d695:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d69a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d6a1:	8d 43 12             	lea    eax,[ebx+0x12]
c001d6a4:	83 c3 10             	add    ebx,0x10
c001d6a7:	0f b6 c0             	movzx  eax,al
c001d6aa:	0f b6 db             	movzx  ebx,bl
c001d6ad:	50                   	push   eax
c001d6ae:	51                   	push   ecx
c001d6af:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d6b3:	57                   	push   edi
c001d6b4:	55                   	push   ebp
c001d6b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6b9:	e8 ec fd ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6be:	83 c4 14             	add    esp,0x14
c001d6c1:	89 c6                	mov    esi,eax
c001d6c3:	53                   	push   ebx
c001d6c4:	c1 e6 10             	shl    esi,0x10
c001d6c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6cb:	51                   	push   ecx
c001d6cc:	57                   	push   edi
c001d6cd:	55                   	push   ebp
c001d6ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6d2:	e8 d3 fd ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6d7:	83 c4 3c             	add    esp,0x3c
c001d6da:	0f b7 c0             	movzx  eax,ax
c001d6dd:	5b                   	pop    ebx
c001d6de:	09 f0                	or     eax,esi
c001d6e0:	5e                   	pop    esi
c001d6e1:	5f                   	pop    edi
c001d6e2:	5d                   	pop    ebp
c001d6e3:	c3                   	ret    

c001d6e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d6e4:	55                   	push   ebp
c001d6e5:	57                   	push   edi
c001d6e6:	56                   	push   esi
c001d6e7:	53                   	push   ebx
c001d6e8:	83 ec 0c             	sub    esp,0xc
c001d6eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d6ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d6f3:	89 f5                	mov    ebp,esi
c001d6f5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d6fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d703:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d707:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d70b:	83 f9 01             	cmp    ecx,0x1
c001d70e:	75 5d                	jne    c001d76d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d710:	0f b6 c8             	movzx  ecx,al
c001d713:	0f b6 d2             	movzx  edx,dl
c001d716:	c1 e1 10             	shl    ecx,0x10
c001d719:	c1 e2 0b             	shl    edx,0xb
c001d71c:	89 f0                	mov    eax,esi
c001d71e:	25 fc 00 00 00       	and    eax,0xfc
c001d723:	09 c1                	or     ecx,eax
c001d725:	89 e8                	mov    eax,ebp
c001d727:	0f b6 c0             	movzx  eax,al
c001d72a:	c1 e0 08             	shl    eax,0x8
c001d72d:	09 c1                	or     ecx,eax
c001d72f:	09 d1                	or     ecx,edx
c001d731:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d736:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d73c:	89 c8                	mov    eax,ecx
c001d73e:	ef                   	out    dx,eax
c001d73f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d744:	ed                   	in     eax,dx
c001d745:	0f b7 db             	movzx  ebx,bx
c001d748:	83 e6 02             	and    esi,0x2
c001d74b:	74 0a                	je     c001d757 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d74d:	0f b7 d0             	movzx  edx,ax
c001d750:	c1 e3 10             	shl    ebx,0x10
c001d753:	09 d3                	or     ebx,edx
c001d755:	eb 05                	jmp    c001d75c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d757:	66 31 c0             	xor    ax,ax
c001d75a:	09 c3                	or     ebx,eax
c001d75c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d761:	89 c8                	mov    eax,ecx
c001d763:	ef                   	out    dx,eax
c001d764:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d769:	89 d8                	mov    eax,ebx
c001d76b:	eb 41                	jmp    c001d7ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d76d:	83 f9 02             	cmp    ecx,0x2
c001d770:	75 45                	jne    c001d7b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d772:	83 ec 0c             	sub    esp,0xc
c001d775:	0f b6 d2             	movzx  edx,dl
c001d778:	89 f1                	mov    ecx,esi
c001d77a:	0f b6 c0             	movzx  eax,al
c001d77d:	0f b6 f1             	movzx  esi,cl
c001d780:	89 e9                	mov    ecx,ebp
c001d782:	56                   	push   esi
c001d783:	0f b6 c9             	movzx  ecx,cl
c001d786:	51                   	push   ecx
c001d787:	52                   	push   edx
c001d788:	50                   	push   eax
c001d789:	57                   	push   edi
c001d78a:	e8 ad fc ff ff       	call   c001d43c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d78f:	89 c2                	mov    edx,eax
c001d791:	ed                   	in     eax,dx
c001d792:	83 c4 20             	add    esp,0x20
c001d795:	0f b7 db             	movzx  ebx,bx
c001d798:	f6 c2 02             	test   dl,0x2
c001d79b:	74 0c                	je     c001d7a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d79d:	0f b7 c8             	movzx  ecx,ax
c001d7a0:	89 d8                	mov    eax,ebx
c001d7a2:	c1 e0 10             	shl    eax,0x10
c001d7a5:	09 c8                	or     eax,ecx
c001d7a7:	eb 05                	jmp    c001d7ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d7a9:	66 31 c0             	xor    ax,ax
c001d7ac:	09 d8                	or     eax,ebx
c001d7ae:	ef                   	out    dx,eax
c001d7af:	83 c4 0c             	add    esp,0xc
c001d7b2:	5b                   	pop    ebx
c001d7b3:	5e                   	pop    esi
c001d7b4:	5f                   	pop    edi
c001d7b5:	5d                   	pop    ebp
c001d7b6:	c3                   	ret    
c001d7b7:	c7 44 24 20 9b 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc002679b
c001d7bf:	83 c4 0c             	add    esp,0xc
c001d7c2:	5b                   	pop    ebx
c001d7c3:	5e                   	pop    esi
c001d7c4:	5f                   	pop    edi
c001d7c5:	5d                   	pop    ebp
c001d7c6:	e9 f8 71 ff ff       	jmp    c00149c3 <Krnl::panic(char const*)>
c001d7cb:	90                   	nop

c001d7cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d7cc:	55                   	push   ebp
c001d7cd:	57                   	push   edi
c001d7ce:	56                   	push   esi
c001d7cf:	53                   	push   ebx
c001d7d0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d7d6:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001d7dd:	75 0f                	jne    c001d7ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d7df:	80 3d ec 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fec,0x0
c001d7e6:	0f 85 fa 00 00 00    	jne    c001d8e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d7ec:	eb 2f                	jmp    c001d81d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d7ee:	83 ec 0c             	sub    esp,0xc
c001d7f1:	68 a1 67 02 c0       	push   0xc00267a1
c001d7f6:	e8 6e c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001d805:	75 d8                	jne    c001d7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d807:	e4 60                	in     al,0x60
c001d809:	3c 1c                	cmp    al,0x1c
c001d80b:	74 04                	je     c001d811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d80d:	3c 5a                	cmp    al,0x5a
c001d80f:	75 f6                	jne    c001d807 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d811:	e4 60                	in     al,0x60
c001d813:	3c 5a                	cmp    al,0x5a
c001d815:	74 fa                	je     c001d811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d817:	3c 1c                	cmp    al,0x1c
c001d819:	74 f6                	je     c001d811 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d81b:	eb c2                	jmp    c001d7df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d81d:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001d824:	0f 85 86 00 00 00    	jne    c001d8b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	68 14 01 00 00       	push   0x114
c001d832:	e8 d8 c1 fe ff       	call   c0009a0f <malloc>
c001d837:	83 c4 0c             	add    esp,0xc
c001d83a:	89 c3                	mov    ebx,eax
c001d83c:	ff 35 f0 95 02 c0    	push   DWORD PTR ds:0xc00295f0
c001d842:	68 bb 67 02 c0       	push   0xc00267bb
c001d847:	50                   	push   eax
c001d848:	e8 19 fa fe ff       	call   c000d266 <File::File(char const*, Process*)>
c001d84d:	5a                   	pop    edx
c001d84e:	59                   	pop    ecx
c001d84f:	6a 01                	push   0x1
c001d851:	53                   	push   ebx
c001d852:	e8 d1 fa fe ff       	call   c000d328 <File::open(FileOpenMode)>
c001d857:	83 c4 0c             	add    esp,0xc
c001d85a:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d85e:	50                   	push   eax
c001d85f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d863:	50                   	push   eax
c001d864:	53                   	push   ebx
c001d865:	e8 6a fd fe ff       	call   c000d5d4 <File::stat(unsigned long long*, bool*)>
c001d86a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d86e:	40                   	inc    eax
c001d86f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d872:	e8 98 c1 fe ff       	call   c0009a0f <malloc>
c001d877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d87b:	a3 e8 9f 02 c0       	mov    ds:0xc0029fe8,eax
c001d880:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d884:	5e                   	pop    esi
c001d885:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d887:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d88b:	51                   	push   ecx
c001d88c:	50                   	push   eax
c001d88d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d891:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d895:	53                   	push   ebx
c001d896:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d899:	83 c4 14             	add    esp,0x14
c001d89c:	53                   	push   ebx
c001d89d:	e8 e4 fa fe ff       	call   c000d386 <File::close()>
c001d8a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8a6:	83 c4 10             	add    esp,0x10
c001d8a9:	a3 e4 9f 02 c0       	mov    ds:0xc0029fe4,eax
c001d8ae:	eb 36                	jmp    c001d8e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d8b0:	83 ec 0c             	sub    esp,0xc
c001d8b3:	68 d4 67 02 c0       	push   0xc00267d4
c001d8b8:	e8 ac c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d8bd:	83 c4 10             	add    esp,0x10
c001d8c0:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001d8c7:	0f 85 5d ff ff ff    	jne    c001d82a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8cd:	e4 60                	in     al,0x60
c001d8cf:	3c 1c                	cmp    al,0x1c
c001d8d1:	74 04                	je     c001d8d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8d3:	3c 5a                	cmp    al,0x5a
c001d8d5:	75 f6                	jne    c001d8cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d8d7:	e4 60                	in     al,0x60
c001d8d9:	3c 5a                	cmp    al,0x5a
c001d8db:	74 fa                	je     c001d8d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8dd:	3c 1c                	cmp    al,0x1c
c001d8df:	74 f6                	je     c001d8d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8e1:	e9 44 ff ff ff       	jmp    c001d82a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8e6:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001d8ed:	75 0b                	jne    c001d8fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d8ef:	31 f6                	xor    esi,esi
c001d8f1:	31 db                	xor    ebx,ebx
c001d8f3:	31 ed                	xor    ebp,ebp
c001d8f5:	e9 a3 01 00 00       	jmp    c001da9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	68 e6 67 02 c0       	push   0xc00267e6
c001d902:	e8 62 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d907:	8b 15 c0 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c0
c001d90d:	83 c4 10             	add    esp,0x10
c001d910:	f6 c2 80             	test   dl,0x80
c001d913:	74 0c                	je     c001d921 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d915:	0f ba e2 0b          	bt     edx,0xb
c001d919:	72 1a                	jb     c001d935 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d91b:	eb d2                	jmp    c001d8ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d91d:	3c 5a                	cmp    al,0x5a
c001d91f:	74 0c                	je     c001d92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d921:	e4 60                	in     al,0x60
c001d923:	3c 1c                	cmp    al,0x1c
c001d925:	75 f6                	jne    c001d91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d927:	eb 04                	jmp    c001d92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d929:	3c 1c                	cmp    al,0x1c
c001d92b:	75 e8                	jne    c001d915 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d92d:	e4 60                	in     al,0x60
c001d92f:	3c 5a                	cmp    al,0x5a
c001d931:	74 fa                	je     c001d92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d933:	eb f4                	jmp    c001d929 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	68 eb 67 02 c0       	push   0xc00267eb
c001d93d:	e8 27 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001d94c:	75 a1                	jne    c001d8ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d94e:	e4 60                	in     al,0x60
c001d950:	3c 5a                	cmp    al,0x5a
c001d952:	74 04                	je     c001d958 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d954:	3c 1c                	cmp    al,0x1c
c001d956:	75 f6                	jne    c001d94e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d958:	e4 60                	in     al,0x60
c001d95a:	3c 5a                	cmp    al,0x5a
c001d95c:	74 fa                	je     c001d958 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d95e:	3c 1c                	cmp    al,0x1c
c001d960:	74 f6                	je     c001d958 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d962:	eb 8b                	jmp    c001d8ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d964:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001d96b:	0f 85 3d 01 00 00    	jne    c001daae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d971:	a1 e8 9f 02 c0       	mov    eax,ds:0xc0029fe8
c001d976:	8d 7e 01             	lea    edi,[esi+0x1]
c001d979:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d97c:	d4 40                	aam    0x40
c001d97e:	d5 39                	aad    0x39
c001d980:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001d987:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d98b:	0f 85 53 01 00 00    	jne    c001dae4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d991:	8b 15 e8 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029fe8
c001d997:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d99a:	d4 40                	aam    0x40
c001d99c:	d5 39                	aad    0x39
c001d99e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d9a2:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d9a6:	d4 40                	aam    0x40
c001d9a8:	d5 39                	aad    0x39
c001d9aa:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d9ae:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d9b2:	d4 40                	aam    0x40
c001d9b4:	d5 39                	aad    0x39
c001d9b6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9ba:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d9be:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d9c2:	3c 56                	cmp    al,0x56
c001d9c4:	74 49                	je     c001da0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d9c6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d9ca:	d4 40                	aam    0x40
c001d9cc:	d5 39                	aad    0x39
c001d9ce:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d9d1:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d9d5:	0f b6 c9             	movzx  ecx,cl
c001d9d8:	c1 e1 04             	shl    ecx,0x4
c001d9db:	d4 40                	aam    0x40
c001d9dd:	d5 39                	aad    0x39
c001d9df:	83 e8 30             	sub    eax,0x30
c001d9e2:	0f b6 c0             	movzx  eax,al
c001d9e5:	09 c1                	or     ecx,eax
c001d9e7:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d9eb:	c1 e1 04             	shl    ecx,0x4
c001d9ee:	d4 40                	aam    0x40
c001d9f0:	d5 39                	aad    0x39
c001d9f2:	83 e8 30             	sub    eax,0x30
c001d9f5:	0f b6 c0             	movzx  eax,al
c001d9f8:	09 c1                	or     ecx,eax
c001d9fa:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d9fe:	c1 e1 04             	shl    ecx,0x4
c001da01:	d4 40                	aam    0x40
c001da03:	d5 39                	aad    0x39
c001da05:	83 e8 30             	sub    eax,0x30
c001da08:	0f b6 c0             	movzx  eax,al
c001da0b:	09 c8                	or     eax,ecx
c001da0d:	89 c5                	mov    ebp,eax
c001da0f:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001da13:	80 f9 44             	cmp    cl,0x44
c001da16:	74 47                	je     c001da5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001da18:	88 c8                	mov    al,cl
c001da1a:	d4 40                	aam    0x40
c001da1c:	d5 39                	aad    0x39
c001da1e:	83 e8 30             	sub    eax,0x30
c001da21:	0f b6 f8             	movzx  edi,al
c001da24:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001da28:	c1 e7 04             	shl    edi,0x4
c001da2b:	d4 40                	aam    0x40
c001da2d:	d5 39                	aad    0x39
c001da2f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da32:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001da36:	0f b6 db             	movzx  ebx,bl
c001da39:	09 fb                	or     ebx,edi
c001da3b:	c1 e3 04             	shl    ebx,0x4
c001da3e:	d4 40                	aam    0x40
c001da40:	d5 39                	aad    0x39
c001da42:	83 e8 30             	sub    eax,0x30
c001da45:	0f b6 f8             	movzx  edi,al
c001da48:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001da4c:	09 fb                	or     ebx,edi
c001da4e:	89 df                	mov    edi,ebx
c001da50:	c1 e7 04             	shl    edi,0x4
c001da53:	d4 40                	aam    0x40
c001da55:	d5 39                	aad    0x39
c001da57:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da5a:	0f b6 db             	movzx  ebx,bl
c001da5d:	09 fb                	or     ebx,edi
c001da5f:	a1 e4 9f 02 c0       	mov    eax,ds:0xc0029fe4
c001da64:	83 c6 10             	add    esi,0x10
c001da67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da6b:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001da6f:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001da72:	3c 0a                	cmp    al,0xa
c001da74:	0f 85 a0 00 00 00    	jne    c001db1a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001da7a:	3c 0a                	cmp    al,0xa
c001da7c:	0f 94 c0             	sete   al
c001da7f:	0f b6 c0             	movzx  eax,al
c001da82:	01 c6                	add    esi,eax
c001da84:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001da89:	0f 84 a2 00 00 00    	je     c001db31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da8f:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001da97:	0f 84 94 00 00 00    	je     c001db31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da9d:	39 35 e4 9f 02 c0    	cmp    DWORD PTR ds:0xc0029fe4,esi
c001daa3:	0f 8f bb fe ff ff    	jg     c001d964 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001daa9:	e9 e8 00 00 00       	jmp    c001db96 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001daae:	83 ec 0c             	sub    esp,0xc
c001dab1:	68 f2 67 02 c0       	push   0xc00267f2
c001dab6:	e8 ae bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dabb:	83 c4 10             	add    esp,0x10
c001dabe:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dac5:	0f 85 a6 fe ff ff    	jne    c001d971 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dacb:	e4 60                	in     al,0x60
c001dacd:	3c 5a                	cmp    al,0x5a
c001dacf:	74 04                	je     c001dad5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dad1:	3c 1c                	cmp    al,0x1c
c001dad3:	75 f6                	jne    c001dacb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dad5:	e4 60                	in     al,0x60
c001dad7:	3c 5a                	cmp    al,0x5a
c001dad9:	74 fa                	je     c001dad5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dadb:	3c 1c                	cmp    al,0x1c
c001dadd:	74 f6                	je     c001dad5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dadf:	e9 8d fe ff ff       	jmp    c001d971 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dae4:	83 ec 0c             	sub    esp,0xc
c001dae7:	68 fa 67 02 c0       	push   0xc00267fa
c001daec:	e8 78 bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001daf1:	83 c4 10             	add    esp,0x10
c001daf4:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dafb:	0f 85 90 fe ff ff    	jne    c001d991 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db01:	e4 60                	in     al,0x60
c001db03:	3c 5a                	cmp    al,0x5a
c001db05:	74 04                	je     c001db0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db07:	3c 1c                	cmp    al,0x1c
c001db09:	75 f6                	jne    c001db01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001db0b:	e4 60                	in     al,0x60
c001db0d:	3c 5a                	cmp    al,0x5a
c001db0f:	74 fa                	je     c001db0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db11:	3c 1c                	cmp    al,0x1c
c001db13:	74 f6                	je     c001db0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db15:	e9 77 fe ff ff       	jmp    c001d991 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db1a:	47                   	inc    edi
c001db1b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001db1f:	0f 84 55 ff ff ff    	je     c001da7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001db25:	46                   	inc    esi
c001db26:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001db29:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001db2c:	e9 3e ff ff ff       	jmp    c001da6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001db31:	80 f9 44             	cmp    cl,0x44
c001db34:	74 0e                	je     c001db44 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001db36:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001db3e:	0f 85 59 ff ff ff    	jne    c001da9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db44:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db48:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001db4c:	c1 e0 04             	shl    eax,0x4
c001db4f:	83 ea 30             	sub    edx,0x30
c001db52:	09 d0                	or     eax,edx
c001db54:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001db5b:	0f 85 3c ff ff ff    	jne    c001da9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db61:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001db65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db69:	c1 e2 04             	shl    edx,0x4
c001db6c:	83 e8 30             	sub    eax,0x30
c001db6f:	09 d0                	or     eax,edx
c001db71:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001db78:	0f 85 1f ff ff ff    	jne    c001da9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db7e:	50                   	push   eax
c001db7f:	50                   	push   eax
c001db80:	8d 44 24 28          	lea    eax,[esp+0x28]
c001db84:	50                   	push   eax
c001db85:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001db8c:	e8 af 2b fe ff       	call   c0000740 <strcpy>
c001db91:	83 c4 10             	add    esp,0x10
c001db94:	eb 15                	jmp    c001dbab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001db96:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001db9d:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dba8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dbab:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dbb2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dbb8:	5b                   	pop    ebx
c001dbb9:	5e                   	pop    esi
c001dbba:	5f                   	pop    edi
c001dbbb:	5d                   	pop    ebp
c001dbbc:	c3                   	ret    
c001dbbd:	90                   	nop

c001dbbe <PCI::checkBus(unsigned char)>:
c001dbbe:	56                   	push   esi
c001dbbf:	53                   	push   ebx
c001dbc0:	31 db                	xor    ebx,ebx
c001dbc2:	51                   	push   ecx
c001dbc3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dbc8:	52                   	push   edx
c001dbc9:	53                   	push   ebx
c001dbca:	43                   	inc    ebx
c001dbcb:	56                   	push   esi
c001dbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbd0:	e8 bf 07 00 00       	call   c001e394 <PCI::checkDevice(unsigned char, unsigned char)>
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	83 fb 20             	cmp    ebx,0x20
c001dbdb:	75 eb                	jne    c001dbc8 <PCI::checkBus(unsigned char)+0xa>
c001dbdd:	58                   	pop    eax
c001dbde:	5b                   	pop    ebx
c001dbdf:	5e                   	pop    esi
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <PCI::foundDevice(PCIDeviceInfo)>:
c001dbe2:	55                   	push   ebp
c001dbe3:	57                   	push   edi
c001dbe4:	56                   	push   esi
c001dbe5:	53                   	push   ebx
c001dbe6:	83 ec 1c             	sub    esp,0x1c
c001dbe9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbed:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dbf3:	0f 84 20 04 00 00    	je     c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dbf9:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001dc00:	75 37                	jne    c001dc39 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dc02:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc06:	66 81 f9 06 04       	cmp    cx,0x406
c001dc0b:	75 5b                	jne    c001dc68 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dc0d:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dc12:	50                   	push   eax
c001dc13:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dc18:	50                   	push   eax
c001dc19:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dc1e:	50                   	push   eax
c001dc1f:	53                   	push   ebx
c001dc20:	e8 33 fa ff ff       	call   c001d658 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc25:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dc29:	0f b6 c0             	movzx  eax,al
c001dc2c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc30:	83 c4 2c             	add    esp,0x2c
c001dc33:	5b                   	pop    ebx
c001dc34:	5e                   	pop    esi
c001dc35:	5f                   	pop    edi
c001dc36:	5d                   	pop    ebp
c001dc37:	eb 85                	jmp    c001dbbe <PCI::checkBus(unsigned char)>
c001dc39:	83 ec 0c             	sub    esp,0xc
c001dc3c:	68 03 68 02 c0       	push   0xc0026803
c001dc41:	e8 23 be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc46:	83 c4 10             	add    esp,0x10
c001dc49:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dc50:	75 b0                	jne    c001dc02 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc52:	e4 60                	in     al,0x60
c001dc54:	3c 5a                	cmp    al,0x5a
c001dc56:	74 04                	je     c001dc5c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc58:	3c 1c                	cmp    al,0x1c
c001dc5a:	75 f6                	jne    c001dc52 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dc5c:	e4 60                	in     al,0x60
c001dc5e:	3c 5a                	cmp    al,0x5a
c001dc60:	74 fa                	je     c001dc5c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc62:	3c 1c                	cmp    al,0x1c
c001dc64:	74 f6                	je     c001dc5c <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc66:	eb 9a                	jmp    c001dc02 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc68:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dc6e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dc72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc76:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dc7a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dc7e:	88 d0                	mov    al,dl
c001dc80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dc85:	74 3b                	je     c001dcc2 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dc87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc8b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dc8e:	85 d2                	test   edx,edx
c001dc90:	74 24                	je     c001dcb6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc92:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dc98:	31 ef                	xor    edi,ebp
c001dc9a:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dca0:	75 14                	jne    c001dcb6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dca2:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dca8:	75 0c                	jne    c001dcb6 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dcaa:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dcb0:	0f 84 63 03 00 00    	je     c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcba:	8b 12                	mov    edx,DWORD PTR [edx]
c001dcbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcc0:	eb be                	jmp    c001dc80 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dcc2:	66 81 f9 01 06       	cmp    cx,0x601
c001dcc7:	0f 85 81 01 00 00    	jne    c001de4e <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dccd:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001dcd4:	75 25                	jne    c001dcfb <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	68 64 01 00 00       	push   0x164
c001dcde:	e8 2c bd fe ff       	call   c0009a0f <malloc>
c001dce3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dce6:	89 c5                	mov    ebp,eax
c001dce8:	e8 b7 12 00 00       	call   c001efa4 <SATABus::SATABus()>
c001dced:	83 c4 10             	add    esp,0x10
c001dcf0:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001dcf7:	74 4a                	je     c001dd43 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dcf9:	eb 2f                	jmp    c001dd2a <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dcfb:	83 ec 0c             	sub    esp,0xc
c001dcfe:	68 13 68 02 c0       	push   0xc0026813
c001dd03:	e8 61 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd08:	83 c4 10             	add    esp,0x10
c001dd0b:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dd12:	75 c2                	jne    c001dcd6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd14:	e4 60                	in     al,0x60
c001dd16:	3c 1c                	cmp    al,0x1c
c001dd18:	74 04                	je     c001dd1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd1a:	3c 5a                	cmp    al,0x5a
c001dd1c:	75 f6                	jne    c001dd14 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dd1e:	e4 60                	in     al,0x60
c001dd20:	3c 5a                	cmp    al,0x5a
c001dd22:	74 fa                	je     c001dd1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd24:	3c 1c                	cmp    al,0x1c
c001dd26:	74 f6                	je     c001dd1e <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd28:	eb ac                	jmp    c001dcd6 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd2a:	83 ec 0c             	sub    esp,0xc
c001dd2d:	68 19 68 02 c0       	push   0xc0026819
c001dd32:	e8 32 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd37:	83 c4 10             	add    esp,0x10
c001dd3a:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dd41:	74 1b                	je     c001dd5e <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dd43:	50                   	push   eax
c001dd44:	50                   	push   eax
c001dd45:	55                   	push   ebp
c001dd46:	53                   	push   ebx
c001dd47:	e8 ee 04 ff ff       	call   c000e23a <Device::addChild(Device*)>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001dd56:	74 33                	je     c001dd8b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dd58:	eb 18                	jmp    c001dd72 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dd5a:	3c 1c                	cmp    al,0x1c
c001dd5c:	74 0c                	je     c001dd6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd5e:	e4 60                	in     al,0x60
c001dd60:	3c 5a                	cmp    al,0x5a
c001dd62:	75 f6                	jne    c001dd5a <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dd64:	eb 04                	jmp    c001dd6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd66:	3c 1c                	cmp    al,0x1c
c001dd68:	75 d9                	jne    c001dd43 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd6a:	e4 60                	in     al,0x60
c001dd6c:	3c 5a                	cmp    al,0x5a
c001dd6e:	74 fa                	je     c001dd6a <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd70:	eb f4                	jmp    c001dd66 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	68 21 68 02 c0       	push   0xc0026821
c001dd7a:	e8 ea bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd7f:	83 c4 10             	add    esp,0x10
c001dd82:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dd89:	74 29                	je     c001ddb4 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dd8b:	83 ec 2c             	sub    esp,0x2c
c001dd8e:	b9 09 00 00 00       	mov    ecx,0x9
c001dd93:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dd97:	fc                   	cld    
c001dd98:	89 e7                	mov    edi,esp
c001dd9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd9c:	55                   	push   ebp
c001dd9d:	e8 aa 03 ff ff       	call   c000e14c <Device::preOpenPCI(PCIDeviceInfo)>
c001dda2:	83 c4 30             	add    esp,0x30
c001dda5:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001ddac:	74 33                	je     c001dde1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001ddae:	eb 18                	jmp    c001ddc8 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001ddb0:	3c 1c                	cmp    al,0x1c
c001ddb2:	74 0c                	je     c001ddc0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddb4:	e4 60                	in     al,0x60
c001ddb6:	3c 5a                	cmp    al,0x5a
c001ddb8:	75 f6                	jne    c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001ddba:	eb 04                	jmp    c001ddc0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddbc:	3c 1c                	cmp    al,0x1c
c001ddbe:	75 cb                	jne    c001dd8b <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001ddc0:	e4 60                	in     al,0x60
c001ddc2:	3c 5a                	cmp    al,0x5a
c001ddc4:	74 fa                	je     c001ddc0 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddc6:	eb f4                	jmp    c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ddc8:	83 ec 0c             	sub    esp,0xc
c001ddcb:	68 29 68 02 c0       	push   0xc0026829
c001ddd0:	e8 94 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dddf:	74 23                	je     c001de04 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dde1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dde4:	6a 00                	push   0x0
c001dde6:	6a 00                	push   0x0
c001dde8:	6a 00                	push   0x0
c001ddea:	55                   	push   ebp
c001ddeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ddee:	83 c4 10             	add    esp,0x10
c001ddf1:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001ddf8:	0f 84 1b 02 00 00    	je     c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddfe:	eb 18                	jmp    c001de18 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001de00:	3c 1c                	cmp    al,0x1c
c001de02:	74 0c                	je     c001de10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de04:	e4 60                	in     al,0x60
c001de06:	3c 5a                	cmp    al,0x5a
c001de08:	75 f6                	jne    c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001de0a:	eb 04                	jmp    c001de10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de0c:	3c 1c                	cmp    al,0x1c
c001de0e:	75 d1                	jne    c001dde1 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de10:	e4 60                	in     al,0x60
c001de12:	3c 5a                	cmp    al,0x5a
c001de14:	74 fa                	je     c001de10 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de16:	eb f4                	jmp    c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001de18:	83 ec 0c             	sub    esp,0xc
c001de1b:	68 31 68 02 c0       	push   0xc0026831
c001de20:	e8 44 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001de2f:	0f 85 e4 01 00 00    	jne    c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de35:	e4 60                	in     al,0x60
c001de37:	3c 5a                	cmp    al,0x5a
c001de39:	74 04                	je     c001de3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de3b:	3c 1c                	cmp    al,0x1c
c001de3d:	75 f6                	jne    c001de35 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001de3f:	e4 60                	in     al,0x60
c001de41:	3c 5a                	cmp    al,0x5a
c001de43:	74 fa                	je     c001de3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de45:	3c 1c                	cmp    al,0x1c
c001de47:	74 f6                	je     c001de3f <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de49:	e9 cb 01 00 00       	jmp    c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de4e:	66 81 f9 01 01       	cmp    cx,0x101
c001de53:	0f 85 7a 01 00 00    	jne    c001dfd3 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001de59:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001de60:	75 25                	jne    c001de87 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001de62:	83 ec 0c             	sub    esp,0xc
c001de65:	68 70 02 00 00       	push   0x270
c001de6a:	e8 a0 bb fe ff       	call   c0009a0f <malloc>
c001de6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001de72:	89 c5                	mov    ebp,eax
c001de74:	e8 df 05 00 00       	call   c001e458 <IDE::IDE()>
c001de79:	83 c4 10             	add    esp,0x10
c001de7c:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001de83:	74 4a                	je     c001decf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001de85:	eb 2f                	jmp    c001deb6 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001de87:	83 ec 0c             	sub    esp,0xc
c001de8a:	68 39 68 02 c0       	push   0xc0026839
c001de8f:	e8 d5 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001de9e:	75 c2                	jne    c001de62 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dea0:	e4 60                	in     al,0x60
c001dea2:	3c 5a                	cmp    al,0x5a
c001dea4:	74 04                	je     c001deaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dea6:	3c 1c                	cmp    al,0x1c
c001dea8:	75 f6                	jne    c001dea0 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001deaa:	e4 60                	in     al,0x60
c001deac:	3c 5a                	cmp    al,0x5a
c001deae:	74 fa                	je     c001deaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001deb0:	3c 1c                	cmp    al,0x1c
c001deb2:	74 f6                	je     c001deaa <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001deb4:	eb ac                	jmp    c001de62 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	68 40 68 02 c0       	push   0xc0026840
c001debe:	e8 a6 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001decd:	74 1b                	je     c001deea <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001decf:	57                   	push   edi
c001ded0:	57                   	push   edi
c001ded1:	55                   	push   ebp
c001ded2:	53                   	push   ebx
c001ded3:	e8 62 03 ff ff       	call   c000e23a <Device::addChild(Device*)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001dee2:	74 33                	je     c001df17 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dee4:	eb 18                	jmp    c001defe <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dee6:	3c 1c                	cmp    al,0x1c
c001dee8:	74 0c                	je     c001def6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001deea:	e4 60                	in     al,0x60
c001deec:	3c 5a                	cmp    al,0x5a
c001deee:	75 f6                	jne    c001dee6 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001def0:	eb 04                	jmp    c001def6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001def2:	3c 1c                	cmp    al,0x1c
c001def4:	75 d9                	jne    c001decf <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001def6:	e4 60                	in     al,0x60
c001def8:	3c 5a                	cmp    al,0x5a
c001defa:	74 fa                	je     c001def6 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001defc:	eb f4                	jmp    c001def2 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001defe:	83 ec 0c             	sub    esp,0xc
c001df01:	68 47 68 02 c0       	push   0xc0026847
c001df06:	e8 5e bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df0b:	83 c4 10             	add    esp,0x10
c001df0e:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001df15:	74 29                	je     c001df40 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001df17:	83 ec 2c             	sub    esp,0x2c
c001df1a:	b9 09 00 00 00       	mov    ecx,0x9
c001df1f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df23:	fc                   	cld    
c001df24:	89 e7                	mov    edi,esp
c001df26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df28:	55                   	push   ebp
c001df29:	e8 1e 02 ff ff       	call   c000e14c <Device::preOpenPCI(PCIDeviceInfo)>
c001df2e:	83 c4 30             	add    esp,0x30
c001df31:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001df38:	74 33                	je     c001df6d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df3a:	eb 18                	jmp    c001df54 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001df3c:	3c 1c                	cmp    al,0x1c
c001df3e:	74 0c                	je     c001df4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df40:	e4 60                	in     al,0x60
c001df42:	3c 5a                	cmp    al,0x5a
c001df44:	75 f6                	jne    c001df3c <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001df46:	eb 04                	jmp    c001df4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df48:	3c 1c                	cmp    al,0x1c
c001df4a:	75 cb                	jne    c001df17 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df4c:	e4 60                	in     al,0x60
c001df4e:	3c 5a                	cmp    al,0x5a
c001df50:	74 fa                	je     c001df4c <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df52:	eb f4                	jmp    c001df48 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001df54:	83 ec 0c             	sub    esp,0xc
c001df57:	68 4e 68 02 c0       	push   0xc002684e
c001df5c:	e8 08 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001df6b:	74 23                	je     c001df90 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001df6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001df70:	6a 00                	push   0x0
c001df72:	6a 00                	push   0x0
c001df74:	6a 00                	push   0x0
c001df76:	55                   	push   ebp
c001df77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001df84:	0f 84 8f 00 00 00    	je     c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df8a:	eb 18                	jmp    c001dfa4 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001df8c:	3c 1c                	cmp    al,0x1c
c001df8e:	74 0c                	je     c001df9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df90:	e4 60                	in     al,0x60
c001df92:	3c 5a                	cmp    al,0x5a
c001df94:	75 f6                	jne    c001df8c <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001df96:	eb 04                	jmp    c001df9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df98:	3c 1c                	cmp    al,0x1c
c001df9a:	75 d1                	jne    c001df6d <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df9c:	e4 60                	in     al,0x60
c001df9e:	3c 5a                	cmp    al,0x5a
c001dfa0:	74 fa                	je     c001df9c <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001dfa2:	eb f4                	jmp    c001df98 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dfa4:	83 ec 0c             	sub    esp,0xc
c001dfa7:	68 55 68 02 c0       	push   0xc0026855
c001dfac:	e8 b8 ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dfb1:	83 c4 10             	add    esp,0x10
c001dfb4:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001dfbb:	75 5c                	jne    c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfbd:	e4 60                	in     al,0x60
c001dfbf:	3c 5a                	cmp    al,0x5a
c001dfc1:	74 04                	je     c001dfc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfc3:	3c 1c                	cmp    al,0x1c
c001dfc5:	75 f6                	jne    c001dfbd <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dfc7:	e4 60                	in     al,0x60
c001dfc9:	3c 5a                	cmp    al,0x5a
c001dfcb:	74 fa                	je     c001dfc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfcd:	3c 1c                	cmp    al,0x1c
c001dfcf:	74 f6                	je     c001dfc7 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfd1:	eb 46                	jmp    c001e019 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfd3:	83 ec 0c             	sub    esp,0xc
c001dfd6:	68 58 01 00 00       	push   0x158
c001dfdb:	e8 2f ba fe ff       	call   c0009a0f <malloc>
c001dfe0:	89 c5                	mov    ebp,eax
c001dfe2:	58                   	pop    eax
c001dfe3:	5a                   	pop    edx
c001dfe4:	68 5c 68 02 c0       	push   0xc002685c
c001dfe9:	55                   	push   ebp
c001dfea:	e8 55 05 ff ff       	call   c000e544 <DriverlessDevice::DriverlessDevice(char const*)>
c001dfef:	59                   	pop    ecx
c001dff0:	5e                   	pop    esi
c001dff1:	55                   	push   ebp
c001dff2:	53                   	push   ebx
c001dff3:	e8 42 02 ff ff       	call   c000e23a <Device::addChild(Device*)>
c001dff8:	83 c4 10             	add    esp,0x10
c001dffb:	b9 09 00 00 00       	mov    ecx,0x9
c001e000:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e004:	fc                   	cld    
c001e005:	89 fe                	mov    esi,edi
c001e007:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e009:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e00d:	83 c4 1c             	add    esp,0x1c
c001e010:	5b                   	pop    ebx
c001e011:	5e                   	pop    esi
c001e012:	5f                   	pop    edi
c001e013:	5d                   	pop    ebp
c001e014:	e9 33 01 ff ff       	jmp    c000e14c <Device::preOpenPCI(PCIDeviceInfo)>
c001e019:	83 c4 1c             	add    esp,0x1c
c001e01c:	5b                   	pop    ebx
c001e01d:	5e                   	pop    esi
c001e01e:	5f                   	pop    edi
c001e01f:	5d                   	pop    ebp
c001e020:	c3                   	ret    
c001e021:	90                   	nop

c001e022 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e022:	55                   	push   ebp
c001e023:	57                   	push   edi
c001e024:	56                   	push   esi
c001e025:	53                   	push   ebx
c001e026:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e02c:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e033:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e03a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e03e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e045:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e049:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e050:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e054:	68 76 68 02 c0       	push   0xc0026876
c001e059:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e05d:	53                   	push   ebx
c001e05e:	e8 dd 26 fe ff       	call   c0000740 <strcpy>
c001e063:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e068:	b2 64                	mov    dl,0x64
c001e06a:	89 c8                	mov    eax,ecx
c001e06c:	f6 f2                	div    dl
c001e06e:	b2 0a                	mov    dl,0xa
c001e070:	83 c0 30             	add    eax,0x30
c001e073:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e077:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e07b:	83 c4 10             	add    esp,0x10
c001e07e:	89 c8                	mov    eax,ecx
c001e080:	f6 f2                	div    dl
c001e082:	89 c1                	mov    ecx,eax
c001e084:	0f b6 c0             	movzx  eax,al
c001e087:	88 e9                	mov    cl,ch
c001e089:	f6 f2                	div    dl
c001e08b:	88 e0                	mov    al,ah
c001e08d:	83 c0 30             	add    eax,0x30
c001e090:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e094:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e098:	8d 41 30             	lea    eax,[ecx+0x30]
c001e09b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e09f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e0a3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e0a8:	f6 f2                	div    dl
c001e0aa:	89 c1                	mov    ecx,eax
c001e0ac:	0f b6 c0             	movzx  eax,al
c001e0af:	88 e9                	mov    cl,ch
c001e0b1:	f6 f2                	div    dl
c001e0b3:	88 e0                	mov    al,ah
c001e0b5:	83 c0 30             	add    eax,0x30
c001e0b8:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e0bc:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e0c0:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0c3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e0c7:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e0cb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e0d0:	f6 f2                	div    dl
c001e0d2:	89 c1                	mov    ecx,eax
c001e0d4:	0f b6 c0             	movzx  eax,al
c001e0d7:	88 e9                	mov    cl,ch
c001e0d9:	f6 f2                	div    dl
c001e0db:	88 e0                	mov    al,ah
c001e0dd:	83 c0 30             	add    eax,0x30
c001e0e0:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001e0e7:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e0eb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e0ef:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0f2:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e0f6:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e0fa:	74 29                	je     c001e125 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e0fc:	83 ec 0c             	sub    esp,0xc
c001e0ff:	53                   	push   ebx
c001e100:	e8 64 b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001e10f:	75 14                	jne    c001e125 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e111:	e4 60                	in     al,0x60
c001e113:	3c 1c                	cmp    al,0x1c
c001e115:	74 04                	je     c001e11b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e117:	3c 5a                	cmp    al,0x5a
c001e119:	75 f6                	jne    c001e111 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e11b:	e4 60                	in     al,0x60
c001e11d:	3c 5a                	cmp    al,0x5a
c001e11f:	74 fa                	je     c001e11b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e121:	3c 1c                	cmp    al,0x1c
c001e123:	74 f6                	je     c001e11b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e125:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e12a:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e12f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e134:	83 ec 0c             	sub    esp,0xc
c001e137:	6a 0c                	push   0xc
c001e139:	56                   	push   esi
c001e13a:	53                   	push   ebx
c001e13b:	57                   	push   edi
c001e13c:	55                   	push   ebp
c001e13d:	e8 68 f3 ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e142:	83 c4 20             	add    esp,0x20
c001e145:	56                   	push   esi
c001e146:	53                   	push   ebx
c001e147:	57                   	push   edi
c001e148:	55                   	push   ebp
c001e149:	e8 50 f4 ff ff       	call   c001d59e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e14e:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e153:	56                   	push   esi
c001e154:	53                   	push   ebx
c001e155:	57                   	push   edi
c001e156:	55                   	push   ebp
c001e157:	e8 d8 f4 ff ff       	call   c001d634 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e15c:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e160:	83 c4 14             	add    esp,0x14
c001e163:	6a 3c                	push   0x3c
c001e165:	56                   	push   esi
c001e166:	53                   	push   ebx
c001e167:	57                   	push   edi
c001e168:	55                   	push   ebp
c001e169:	e8 3c f3 ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e16e:	0f b6 c4             	movzx  eax,ah
c001e171:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e175:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e179:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e180:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001e185:	83 c4 20             	add    esp,0x20
c001e188:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e18e:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e195:	0f 84 38 01 00 00    	je     c001e2d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e19b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e1a3:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001e1a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1ac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1b2:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e1b8:	0f 8e 15 01 00 00    	jle    c001e2d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e1be:	50                   	push   eax
c001e1bf:	50                   	push   eax
c001e1c0:	68 91 68 02 c0       	push   0xc0026891
c001e1c5:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e1c9:	50                   	push   eax
c001e1ca:	e8 71 25 fe ff       	call   c0000740 <strcpy>
c001e1cf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e1d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001e1d8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e1dc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e1e0:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e1e4:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e1e8:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e1ec:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e1f0:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e1f4:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e1f8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e1fc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e200:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e204:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e208:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e20c:	83 c4 10             	add    esp,0x10
c001e20f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e213:	99                   	cdq    
c001e214:	f7 f9                	idiv   ecx
c001e216:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e21a:	99                   	cdq    
c001e21b:	f7 f9                	idiv   ecx
c001e21d:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e221:	83 c2 30             	add    edx,0x30
c001e224:	83 c0 30             	add    eax,0x30
c001e227:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e22b:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e22f:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001e236:	74 2d                	je     c001e265 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e23f:	50                   	push   eax
c001e240:	e8 24 b8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001e24f:	75 14                	jne    c001e265 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e251:	e4 60                	in     al,0x60
c001e253:	3c 5a                	cmp    al,0x5a
c001e255:	74 04                	je     c001e25b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e257:	3c 1c                	cmp    al,0x1c
c001e259:	75 f6                	jne    c001e251 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e25b:	e4 60                	in     al,0x60
c001e25d:	3c 5a                	cmp    al,0x5a
c001e25f:	74 fa                	je     c001e25b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e261:	3c 1c                	cmp    al,0x1c
c001e263:	74 f6                	je     c001e25b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e265:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e269:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001e26e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e274:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e277:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e27e:	39 d3                	cmp    ebx,edx
c001e280:	75 48                	jne    c001e2ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e282:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e289:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e28d:	75 3b                	jne    c001e2ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e28f:	83 ec 0c             	sub    esp,0xc
c001e292:	68 c0 68 02 c0       	push   0xc00268c0
c001e297:	e8 5f ea fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e29c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2a0:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c001e2a5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2ab:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e2b3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e2b7:	50                   	push   eax
c001e2b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e2bc:	53                   	push   ebx
c001e2bd:	68 e5 68 02 c0       	push   0xc00268e5
c001e2c2:	e8 34 ea fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e2c7:	83 c4 20             	add    esp,0x20
c001e2ca:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e2ce:	e9 d0 fe ff ff       	jmp    c001e1a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e2d3:	31 d2                	xor    edx,edx
c001e2d5:	83 ec 0c             	sub    esp,0xc
c001e2d8:	56                   	push   esi
c001e2d9:	53                   	push   ebx
c001e2da:	57                   	push   edi
c001e2db:	52                   	push   edx
c001e2dc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e2e0:	55                   	push   ebp
c001e2e1:	e8 9a f3 ff ff       	call   c001d680 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e2ea:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e2f1:	42                   	inc    edx
c001e2f2:	83 c4 20             	add    esp,0x20
c001e2f5:	83 fa 06             	cmp    edx,0x6
c001e2f8:	75 db                	jne    c001e2d5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e2fa:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e2ff:	83 ec 0c             	sub    esp,0xc
c001e302:	86 e0                	xchg   al,ah
c001e304:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e30c:	6a 02                	push   0x2
c001e30e:	56                   	push   esi
c001e30f:	53                   	push   ebx
c001e310:	57                   	push   edi
c001e311:	55                   	push   ebp
c001e312:	e8 93 f1 ff ff       	call   c001d4aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e317:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e31f:	83 c4 20             	add    esp,0x20
c001e322:	56                   	push   esi
c001e323:	53                   	push   ebx
c001e324:	57                   	push   edi
c001e325:	55                   	push   ebp
c001e326:	e8 bd f2 ff ff       	call   c001d5e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e32b:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e332:	56                   	push   esi
c001e333:	53                   	push   ebx
c001e334:	57                   	push   edi
c001e335:	55                   	push   ebp
c001e336:	e8 17 f2 ff ff       	call   c001d552 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e33b:	b9 09 00 00 00       	mov    ecx,0x9
c001e340:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e348:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e34c:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e353:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e357:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e35e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e362:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e369:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e36d:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	fc                   	cld    
c001e378:	89 e7                	mov    edi,esp
c001e37a:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e381:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e383:	55                   	push   ebp
c001e384:	e8 59 f8 ff ff       	call   c001dbe2 <PCI::foundDevice(PCIDeviceInfo)>
c001e389:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e38f:	5b                   	pop    ebx
c001e390:	5e                   	pop    esi
c001e391:	5f                   	pop    edi
c001e392:	5d                   	pop    ebp
c001e393:	c3                   	ret    

c001e394 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e394:	55                   	push   ebp
c001e395:	57                   	push   edi
c001e396:	56                   	push   esi
c001e397:	53                   	push   ebx
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e39f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e3a4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e3a9:	6a 00                	push   0x0
c001e3ab:	56                   	push   esi
c001e3ac:	57                   	push   edi
c001e3ad:	55                   	push   ebp
c001e3ae:	e8 9f f1 ff ff       	call   c001d552 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3b3:	6a 00                	push   0x0
c001e3b5:	56                   	push   esi
c001e3b6:	57                   	push   edi
c001e3b7:	55                   	push   ebp
c001e3b8:	e8 65 fc ff ff       	call   c001e022 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3bd:	83 c4 20             	add    esp,0x20
c001e3c0:	6a 00                	push   0x0
c001e3c2:	56                   	push   esi
c001e3c3:	57                   	push   edi
c001e3c4:	55                   	push   ebp
c001e3c5:	e8 ac f1 ff ff       	call   c001d576 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	84 c0                	test   al,al
c001e3cf:	79 27                	jns    c001e3f8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e3d1:	bb 01 00 00 00       	mov    ebx,0x1
c001e3d6:	53                   	push   ebx
c001e3d7:	56                   	push   esi
c001e3d8:	57                   	push   edi
c001e3d9:	55                   	push   ebp
c001e3da:	e8 73 f1 ff ff       	call   c001d552 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	66 40                	inc    ax
c001e3e4:	74 0c                	je     c001e3f2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e3e6:	53                   	push   ebx
c001e3e7:	56                   	push   esi
c001e3e8:	57                   	push   edi
c001e3e9:	55                   	push   ebp
c001e3ea:	e8 33 fc ff ff       	call   c001e022 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3ef:	83 c4 10             	add    esp,0x10
c001e3f2:	43                   	inc    ebx
c001e3f3:	83 fb 08             	cmp    ebx,0x8
c001e3f6:	75 de                	jne    c001e3d6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e3f8:	83 c4 0c             	add    esp,0xc
c001e3fb:	5b                   	pop    ebx
c001e3fc:	5e                   	pop    esi
c001e3fd:	5f                   	pop    edi
c001e3fe:	5d                   	pop    ebp
c001e3ff:	c3                   	ret    

c001e400 <PCI::detect()>:
c001e400:	56                   	push   esi
c001e401:	53                   	push   ebx
c001e402:	53                   	push   ebx
c001e403:	31 db                	xor    ebx,ebx
c001e405:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e409:	6a 00                	push   0x0
c001e40b:	6a 00                	push   0x0
c001e40d:	6a 00                	push   0x0
c001e40f:	56                   	push   esi
c001e410:	e8 61 f1 ff ff       	call   c001d576 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	a8 80                	test   al,0x80
c001e41a:	75 21                	jne    c001e43d <PCI::detect()+0x3d>
c001e41c:	51                   	push   ecx
c001e41d:	51                   	push   ecx
c001e41e:	6a 00                	push   0x0
c001e420:	56                   	push   esi
c001e421:	e8 98 f7 ff ff       	call   c001dbbe <PCI::checkBus(unsigned char)>
c001e426:	83 c4 10             	add    esp,0x10
c001e429:	eb 24                	jmp    c001e44f <PCI::detect()+0x4f>
c001e42b:	52                   	push   edx
c001e42c:	52                   	push   edx
c001e42d:	53                   	push   ebx
c001e42e:	43                   	inc    ebx
c001e42f:	56                   	push   esi
c001e430:	e8 89 f7 ff ff       	call   c001dbbe <PCI::checkBus(unsigned char)>
c001e435:	83 c4 10             	add    esp,0x10
c001e438:	83 fb 08             	cmp    ebx,0x8
c001e43b:	74 12                	je     c001e44f <PCI::detect()+0x4f>
c001e43d:	53                   	push   ebx
c001e43e:	6a 00                	push   0x0
c001e440:	6a 00                	push   0x0
c001e442:	56                   	push   esi
c001e443:	e8 0a f1 ff ff       	call   c001d552 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	66 40                	inc    ax
c001e44d:	74 dc                	je     c001e42b <PCI::detect()+0x2b>
c001e44f:	58                   	pop    eax
c001e450:	5b                   	pop    ebx
c001e451:	5e                   	pop    esi
c001e452:	c3                   	ret    
c001e453:	90                   	nop

c001e454 <IDE::close(int, int, void*)>:
c001e454:	83 c8 ff             	or     eax,0xffffffff
c001e457:	c3                   	ret    

c001e458 <IDE::IDE()>:
c001e458:	83 ec 0c             	sub    esp,0xc
c001e45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45f:	83 ec 08             	sub    esp,0x8
c001e462:	68 2c 69 02 c0       	push   0xc002692c
c001e467:	50                   	push   eax
c001e468:	e8 7b 01 ff ff       	call   c000e5e8 <HardDiskController::HardDiskController(char const*)>
c001e46d:	83 c4 10             	add    esp,0x10
c001e470:	ba bc 69 02 c0       	mov    edx,0xc00269bc
c001e475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e479:	89 10                	mov    DWORD PTR [eax],edx
c001e47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e486:	90                   	nop
c001e487:	83 c4 0c             	add    esp,0xc
c001e48a:	c3                   	ret    
c001e48b:	90                   	nop

c001e48c <IDE::prepareInterrupt(unsigned char)>:
c001e48c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e491:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e495:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e49d:	c3                   	ret    

c001e49e <selectDrive(unsigned char, unsigned char)>:
c001e49e:	c3                   	ret    
c001e49f:	90                   	nop

c001e4a0 <IDE::getBase(unsigned char)>:
c001e4a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4a9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e4b1:	c3                   	ret    

c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e4b2:	55                   	push   ebp
c001e4b3:	57                   	push   edi
c001e4b4:	56                   	push   esi
c001e4b5:	53                   	push   ebx
c001e4b6:	83 ec 1c             	sub    esp,0x1c
c001e4b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4c1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e4c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4cc:	80 f9 03             	cmp    cl,0x3
c001e4cf:	77 51                	ja     c001e522 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e4d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4d5:	0f b6 f2             	movzx  esi,dl
c001e4d8:	0f b6 db             	movzx  ebx,bl
c001e4db:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e4de:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e4e2:	83 ca 80             	or     edx,0xffffff80
c001e4e5:	0f b6 d2             	movzx  edx,dl
c001e4e8:	52                   	push   edx
c001e4e9:	6a 0c                	push   0xc
c001e4eb:	56                   	push   esi
c001e4ec:	57                   	push   edi
c001e4ed:	e8 c0 ff ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4f2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e4f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4fb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e4ff:	ee                   	out    dx,al
c001e500:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e505:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e509:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e50d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e511:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e519:	83 c4 2c             	add    esp,0x2c
c001e51c:	5b                   	pop    ebx
c001e51d:	5e                   	pop    esi
c001e51e:	5f                   	pop    edi
c001e51f:	5d                   	pop    ebp
c001e520:	eb 90                	jmp    c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e522:	80 fb 07             	cmp    bl,0x7
c001e525:	77 12                	ja     c001e539 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e527:	0f b6 d2             	movzx  edx,dl
c001e52a:	0f b6 db             	movzx  ebx,bl
c001e52d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e535:	89 da                	mov    edx,ebx
c001e537:	eb 2f                	jmp    c001e568 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e539:	80 fb 0d             	cmp    bl,0xd
c001e53c:	77 13                	ja     c001e551 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e53e:	0f b6 d2             	movzx  edx,dl
c001e541:	0f b6 db             	movzx  ebx,bl
c001e544:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e54b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e54f:	eb 17                	jmp    c001e568 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e551:	80 fb 15             	cmp    bl,0x15
c001e554:	77 13                	ja     c001e569 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e556:	0f b6 d2             	movzx  edx,dl
c001e559:	0f b6 db             	movzx  ebx,bl
c001e55c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e564:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e568:	ee                   	out    dx,al
c001e569:	83 c4 1c             	add    esp,0x1c
c001e56c:	5b                   	pop    ebx
c001e56d:	5e                   	pop    esi
c001e56e:	5f                   	pop    edi
c001e56f:	5d                   	pop    ebp
c001e570:	c3                   	ret    
c001e571:	90                   	nop

c001e572 <IDE::read(unsigned char, unsigned char)>:
c001e572:	55                   	push   ebp
c001e573:	57                   	push   edi
c001e574:	56                   	push   esi
c001e575:	53                   	push   ebx
c001e576:	83 ec 1c             	sub    esp,0x1c
c001e579:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e57d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e581:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e584:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e588:	3c 03                	cmp    al,0x3
c001e58a:	77 43                	ja     c001e5cf <IDE::read(unsigned char, unsigned char)+0x5d>
c001e58c:	0f b6 f2             	movzx  esi,dl
c001e58f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e592:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e596:	83 c8 80             	or     eax,0xffffff80
c001e599:	0f b6 c0             	movzx  eax,al
c001e59c:	50                   	push   eax
c001e59d:	6a 0c                	push   0xc
c001e59f:	56                   	push   esi
c001e5a0:	57                   	push   edi
c001e5a1:	e8 0c ff ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5a6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e5ab:	0f b6 c3             	movzx  eax,bl
c001e5ae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e5b2:	ec                   	in     al,dx
c001e5b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e5b7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e5bc:	52                   	push   edx
c001e5bd:	6a 0c                	push   0xc
c001e5bf:	56                   	push   esi
c001e5c0:	57                   	push   edi
c001e5c1:	e8 ec fe ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5c6:	83 c4 20             	add    esp,0x20
c001e5c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e5cd:	eb 49                	jmp    c001e618 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e5cf:	80 fb 07             	cmp    bl,0x7
c001e5d2:	77 12                	ja     c001e5e6 <IDE::read(unsigned char, unsigned char)+0x74>
c001e5d4:	0f b6 d2             	movzx  edx,dl
c001e5d7:	0f b6 c3             	movzx  eax,bl
c001e5da:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e5e2:	89 c2                	mov    edx,eax
c001e5e4:	eb 31                	jmp    c001e617 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5e6:	80 fb 0d             	cmp    bl,0xd
c001e5e9:	77 13                	ja     c001e5fe <IDE::read(unsigned char, unsigned char)+0x8c>
c001e5eb:	0f b6 d2             	movzx  edx,dl
c001e5ee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e5f5:	0f b6 d3             	movzx  edx,bl
c001e5f8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e5fc:	eb 19                	jmp    c001e617 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5fe:	31 c0                	xor    eax,eax
c001e600:	80 fb 15             	cmp    bl,0x15
c001e603:	77 13                	ja     c001e618 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e605:	0f b6 d2             	movzx  edx,dl
c001e608:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e610:	0f b6 d3             	movzx  edx,bl
c001e613:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e617:	ec                   	in     al,dx
c001e618:	83 c4 1c             	add    esp,0x1c
c001e61b:	5b                   	pop    ebx
c001e61c:	5e                   	pop    esi
c001e61d:	5f                   	pop    edi
c001e61e:	5d                   	pop    ebp
c001e61f:	c3                   	ret    

c001e620 <IDE::waitInterrupt(unsigned char)>:
c001e620:	55                   	push   ebp
c001e621:	57                   	push   edi
c001e622:	56                   	push   esi
c001e623:	53                   	push   ebx
c001e624:	31 db                	xor    ebx,ebx
c001e626:	83 ec 0c             	sub    esp,0xc
c001e629:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e62d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e632:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e63a:	89 e8                	mov    eax,ebp
c001e63c:	84 c0                	test   al,al
c001e63e:	75 30                	jne    c001e670 <IDE::waitInterrupt(unsigned char)+0x50>
c001e640:	50                   	push   eax
c001e641:	6a 0c                	push   0xc
c001e643:	56                   	push   esi
c001e644:	57                   	push   edi
c001e645:	e8 28 ff ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001e64a:	83 c4 10             	add    esp,0x10
c001e64d:	a8 01                	test   al,0x1
c001e64f:	75 27                	jne    c001e678 <IDE::waitInterrupt(unsigned char)+0x58>
c001e651:	f6 c3 04             	test   bl,0x4
c001e654:	75 12                	jne    c001e668 <IDE::waitInterrupt(unsigned char)+0x48>
c001e656:	83 fb 32             	cmp    ebx,0x32
c001e659:	7e 0d                	jle    c001e668 <IDE::waitInterrupt(unsigned char)+0x48>
c001e65b:	83 ec 0c             	sub    esp,0xc
c001e65e:	6a 64                	push   0x64
c001e660:	e8 bb a3 ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	83 fb 3c             	cmp    ebx,0x3c
c001e66b:	74 0b                	je     c001e678 <IDE::waitInterrupt(unsigned char)+0x58>
c001e66d:	43                   	inc    ebx
c001e66e:	eb c2                	jmp    c001e632 <IDE::waitInterrupt(unsigned char)+0x12>
c001e670:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e678:	83 c4 0c             	add    esp,0xc
c001e67b:	89 e8                	mov    eax,ebp
c001e67d:	5b                   	pop    ebx
c001e67e:	5e                   	pop    esi
c001e67f:	5f                   	pop    edi
c001e680:	5d                   	pop    ebp
c001e681:	c3                   	ret    

c001e682 <ideChannel0IRQHandler(regs*, void*)>:
c001e682:	83 ec 10             	sub    esp,0x10
c001e685:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e689:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e690:	6a 07                	push   0x7
c001e692:	6a 00                	push   0x0
c001e694:	50                   	push   eax
c001e695:	e8 d8 fe ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001e69a:	83 c4 1c             	add    esp,0x1c
c001e69d:	c3                   	ret    

c001e69e <ideChannel1IRQHandler(regs*, void*)>:
c001e69e:	83 ec 10             	sub    esp,0x10
c001e6a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6a5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e6ac:	6a 07                	push   0x7
c001e6ae:	6a 01                	push   0x1
c001e6b0:	50                   	push   eax
c001e6b1:	e8 bc fe ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001e6b6:	83 c4 1c             	add    esp,0x1c
c001e6b9:	c3                   	ret    

c001e6ba <IDE::enableIRQs(unsigned char, bool)>:
c001e6ba:	57                   	push   edi
c001e6bb:	56                   	push   esi
c001e6bc:	be 04 00 00 00       	mov    esi,0x4
c001e6c1:	53                   	push   ebx
c001e6c2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e6c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6cb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e6d0:	0f 94 c0             	sete   al
c001e6d3:	d1 e0                	shl    eax,1
c001e6d5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e6dc:	0f b6 c0             	movzx  eax,al
c001e6df:	50                   	push   eax
c001e6e0:	6a 0c                	push   0xc
c001e6e2:	57                   	push   edi
c001e6e3:	53                   	push   ebx
c001e6e4:	e8 c9 fd ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6e9:	83 c4 10             	add    esp,0x10
c001e6ec:	50                   	push   eax
c001e6ed:	6a 0c                	push   0xc
c001e6ef:	57                   	push   edi
c001e6f0:	53                   	push   ebx
c001e6f1:	e8 7c fe ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	4e                   	dec    esi
c001e6fa:	75 f0                	jne    c001e6ec <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e6fc:	5b                   	pop    ebx
c001e6fd:	5e                   	pop    esi
c001e6fe:	5f                   	pop    edi
c001e6ff:	c3                   	ret    

c001e700 <IDE::open(int, int, void*)>:
c001e700:	55                   	push   ebp
c001e701:	57                   	push   edi
c001e702:	56                   	push   esi
c001e703:	53                   	push   ebx
c001e704:	83 ec 1c             	sub    esp,0x1c
c001e707:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e70b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e714:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e71d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e724:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e72b:	0f 85 b0 02 00 00    	jne    c001e9e1 <IDE::open(int, int, void*)+0x2e1>
c001e731:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e737:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e73b:	83 e0 7f             	and    eax,0x7f
c001e73e:	3c 05                	cmp    al,0x5
c001e740:	74 04                	je     c001e746 <IDE::open(int, int, void*)+0x46>
c001e742:	3c 0f                	cmp    al,0xf
c001e744:	75 32                	jne    c001e778 <IDE::open(int, int, void*)+0x78>
c001e746:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e74c:	83 e0 fc             	and    eax,0xfffffffc
c001e74f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e756:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e75c:	83 e0 fc             	and    eax,0xfffffffc
c001e75f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e766:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e76c:	83 e0 fc             	and    eax,0xfffffffc
c001e76f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e776:	eb 14                	jmp    c001e78c <IDE::open(int, int, void*)+0x8c>
c001e778:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e782:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e78c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e793:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e79a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e79e:	89 c6                	mov    esi,eax
c001e7a0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e7a5:	c1 e6 10             	shl    esi,0x10
c001e7a8:	89 e8                	mov    eax,ebp
c001e7aa:	89 fa                	mov    edx,edi
c001e7ac:	c1 e0 0b             	shl    eax,0xb
c001e7af:	09 f0                	or     eax,esi
c001e7b1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e7b8:	c1 e6 08             	shl    esi,0x8
c001e7bb:	09 c6                	or     esi,eax
c001e7bd:	89 f0                	mov    eax,esi
c001e7bf:	0d 08 00 00 80       	or     eax,0x80000008
c001e7c4:	ef                   	out    dx,eax
c001e7c5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e7ca:	89 ca                	mov    edx,ecx
c001e7cc:	ed                   	in     eax,dx
c001e7cd:	c1 e8 10             	shr    eax,0x10
c001e7d0:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7d5:	0f 84 f5 00 00 00    	je     c001e8d0 <IDE::open(int, int, void*)+0x1d0>
c001e7db:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e7e1:	89 fa                	mov    edx,edi
c001e7e3:	89 f0                	mov    eax,esi
c001e7e5:	ef                   	out    dx,eax
c001e7e6:	b0 fe                	mov    al,0xfe
c001e7e8:	89 ca                	mov    edx,ecx
c001e7ea:	ee                   	out    dx,al
c001e7eb:	89 f0                	mov    eax,esi
c001e7ed:	89 fa                	mov    edx,edi
c001e7ef:	ef                   	out    dx,eax
c001e7f0:	89 ca                	mov    edx,ecx
c001e7f2:	ed                   	in     eax,dx
c001e7f3:	3c fe                	cmp    al,0xfe
c001e7f5:	0f 85 a9 00 00 00    	jne    c001e8a4 <IDE::open(int, int, void*)+0x1a4>
c001e7fb:	8b 15 a8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280a8
c001e801:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e808:	74 33                	je     c001e83d <IDE::open(int, int, void*)+0x13d>
c001e80a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e810:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e814:	40                   	inc    eax
c001e815:	83 ec 0c             	sub    esp,0xc
c001e818:	0f b6 c0             	movzx  eax,al
c001e81b:	50                   	push   eax
c001e81c:	55                   	push   ebp
c001e81d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e821:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e827:	51                   	push   ecx
c001e828:	e8 83 39 ff ff       	call   c00121b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e82d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e832:	83 c4 1c             	add    esp,0x1c
c001e835:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e83b:	eb 0a                	jmp    c001e847 <IDE::open(int, int, void*)+0x147>
c001e83d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e847:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e84e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e855:	c1 e1 10             	shl    ecx,0x10
c001e858:	c1 e0 08             	shl    eax,0x8
c001e85b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e860:	09 c1                	or     ecx,eax
c001e862:	89 fa                	mov    edx,edi
c001e864:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e86b:	c1 e0 0b             	shl    eax,0xb
c001e86e:	09 c1                	or     ecx,eax
c001e870:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e876:	89 c8                	mov    eax,ecx
c001e878:	ef                   	out    dx,eax
c001e879:	be fc 0c 00 00       	mov    esi,0xcfc
c001e87e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e884:	89 f2                	mov    edx,esi
c001e886:	ee                   	out    dx,al
c001e887:	89 c8                	mov    eax,ecx
c001e889:	89 fa                	mov    edx,edi
c001e88b:	ef                   	out    dx,eax
c001e88c:	89 f2                	mov    edx,esi
c001e88e:	ed                   	in     eax,dx
c001e88f:	0f b6 c0             	movzx  eax,al
c001e892:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e898:	74 46                	je     c001e8e0 <IDE::open(int, int, void*)+0x1e0>
c001e89a:	83 ec 0c             	sub    esp,0xc
c001e89d:	68 44 69 02 c0       	push   0xc0026944
c001e8a2:	eb 34                	jmp    c001e8d8 <IDE::open(int, int, void*)+0x1d8>
c001e8a4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e8ad:	75 17                	jne    c001e8c6 <IDE::open(int, int, void*)+0x1c6>
c001e8af:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e8b4:	74 07                	je     c001e8bd <IDE::open(int, int, void*)+0x1bd>
c001e8b6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e8bb:	75 09                	jne    c001e8c6 <IDE::open(int, int, void*)+0x1c6>
c001e8bd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e8c4:	eb 1a                	jmp    c001e8e0 <IDE::open(int, int, void*)+0x1e0>
c001e8c6:	83 ec 0c             	sub    esp,0xc
c001e8c9:	68 4c 69 02 c0       	push   0xc002694c
c001e8ce:	eb 08                	jmp    c001e8d8 <IDE::open(int, int, void*)+0x1d8>
c001e8d0:	83 ec 0c             	sub    esp,0xc
c001e8d3:	68 7d 69 02 c0       	push   0xc002697d
c001e8d8:	e8 e6 60 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c001e8dd:	83 c4 10             	add    esp,0x10
c001e8e0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e8e7:	79 1a                	jns    c001e903 <IDE::open(int, int, void*)+0x203>
c001e8e9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e8ef:	83 e0 fc             	and    eax,0xfffffffc
c001e8f2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e8f9:	83 c0 08             	add    eax,0x8
c001e8fc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e903:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e909:	89 c2                	mov    edx,eax
c001e90b:	83 e2 0f             	and    edx,0xf
c001e90e:	66 83 fa 08          	cmp    dx,0x8
c001e912:	75 0a                	jne    c001e91e <IDE::open(int, int, void*)+0x21e>
c001e914:	83 e8 02             	sub    eax,0x2
c001e917:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e91e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e924:	89 c2                	mov    edx,eax
c001e926:	83 e2 0f             	and    edx,0xf
c001e929:	66 83 fa 08          	cmp    dx,0x8
c001e92d:	75 0a                	jne    c001e939 <IDE::open(int, int, void*)+0x239>
c001e92f:	83 e8 02             	sub    eax,0x2
c001e932:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e939:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e940:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e947:	89 d0                	mov    eax,edx
c001e949:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e94c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e950:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e954:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e957:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e95c:	0f b6 c9             	movzx  ecx,cl
c001e95f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e966:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e969:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e96d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e971:	8d 50 02             	lea    edx,[eax+0x2]
c001e974:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e979:	0f b6 d2             	movzx  edx,dl
c001e97c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e982:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e985:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e989:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e98d:	8d 48 03             	lea    ecx,[eax+0x3]
c001e990:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e995:	0f b6 c9             	movzx  ecx,cl
c001e998:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e99e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e9a1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e9a5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e9a9:	8d 50 04             	lea    edx,[eax+0x4]
c001e9ac:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e9b2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e9b7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e9be:	66 85 f6             	test   si,si
c001e9c1:	74 5b                	je     c001ea1e <IDE::open(int, int, void*)+0x31e>
c001e9c3:	0f b6 d2             	movzx  edx,dl
c001e9c6:	83 c0 05             	add    eax,0x5
c001e9c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9d0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e9d4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e9da:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9df:	eb 3d                	jmp    c001ea1e <IDE::open(int, int, void*)+0x31e>
c001e9e1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e9e7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e9ee:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e9f5:	66 05 06 02          	add    ax,0x206
c001e9f9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea00:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ea07:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea0e:	66 05 06 02          	add    ax,0x206
c001ea12:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea19:	e9 e5 fe ff ff       	jmp    c001e903 <IDE::open(int, int, void*)+0x203>
c001ea1e:	50                   	push   eax
c001ea1f:	50                   	push   eax
c001ea20:	6a 00                	push   0x0
c001ea22:	53                   	push   ebx
c001ea23:	e8 64 fa ff ff       	call   c001e48c <IDE::prepareInterrupt(unsigned char)>
c001ea28:	5a                   	pop    edx
c001ea29:	59                   	pop    ecx
c001ea2a:	6a 01                	push   0x1
c001ea2c:	53                   	push   ebx
c001ea2d:	e8 5a fa ff ff       	call   c001e48c <IDE::prepareInterrupt(unsigned char)>
c001ea32:	83 c4 0c             	add    esp,0xc
c001ea35:	6a 00                	push   0x0
c001ea37:	6a 00                	push   0x0
c001ea39:	53                   	push   ebx
c001ea3a:	e8 7b fc ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001ea3f:	83 c4 0c             	add    esp,0xc
c001ea42:	6a 00                	push   0x0
c001ea44:	6a 01                	push   0x1
c001ea46:	53                   	push   ebx
c001ea47:	e8 6e fc ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ea56:	74 34                	je     c001ea8c <IDE::open(int, int, void*)+0x38c>
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	53                   	push   ebx
c001ea5c:	6a 01                	push   0x1
c001ea5e:	68 82 e6 01 c0       	push   0xc001e682
c001ea63:	6a 0e                	push   0xe
c001ea65:	53                   	push   ebx
c001ea66:	e8 47 f7 fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea6b:	83 c4 14             	add    esp,0x14
c001ea6e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ea74:	53                   	push   ebx
c001ea75:	6a 01                	push   0x1
c001ea77:	68 9e e6 01 c0       	push   0xc001e69e
c001ea7c:	6a 0f                	push   0xf
c001ea7e:	53                   	push   ebx
c001ea7f:	e8 2e f7 fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea84:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ea8a:	eb 38                	jmp    c001eac4 <IDE::open(int, int, void*)+0x3c4>
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ea99:	53                   	push   ebx
c001ea9a:	6a 00                	push   0x0
c001ea9c:	68 82 e6 01 c0       	push   0xc001e682
c001eaa1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001eaa7:	53                   	push   ebx
c001eaa8:	e8 05 f7 fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaad:	83 c4 14             	add    esp,0x14
c001eab0:	53                   	push   ebx
c001eab1:	6a 00                	push   0x0
c001eab3:	68 9e e6 01 c0       	push   0xc001e69e
c001eab8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eabe:	53                   	push   ebx
c001eabf:	e8 ee f6 fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eac6:	83 c4 20             	add    esp,0x20
c001eac9:	83 ec 0c             	sub    esp,0xc
c001eacc:	53                   	push   ebx
c001eacd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ead0:	83 c4 0c             	add    esp,0xc
c001ead3:	6a 07                	push   0x7
c001ead5:	6a 00                	push   0x0
c001ead7:	53                   	push   ebx
c001ead8:	e8 95 fa ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001eadd:	83 c4 0c             	add    esp,0xc
c001eae0:	6a 07                	push   0x7
c001eae2:	6a 01                	push   0x1
c001eae4:	53                   	push   ebx
c001eae5:	e8 88 fa ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001eaea:	83 c4 0c             	add    esp,0xc
c001eaed:	6a 01                	push   0x1
c001eaef:	6a 00                	push   0x0
c001eaf1:	53                   	push   ebx
c001eaf2:	e8 c3 fb ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001eaf7:	83 c4 0c             	add    esp,0xc
c001eafa:	6a 01                	push   0x1
c001eafc:	6a 01                	push   0x1
c001eafe:	53                   	push   ebx
c001eaff:	e8 b6 fb ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001eb04:	83 c4 2c             	add    esp,0x2c
c001eb07:	31 c0                	xor    eax,eax
c001eb09:	5b                   	pop    ebx
c001eb0a:	5e                   	pop    esi
c001eb0b:	5f                   	pop    edi
c001eb0c:	5d                   	pop    ebp
c001eb0d:	c3                   	ret    

c001eb0e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001eb0e:	55                   	push   ebp
c001eb0f:	57                   	push   edi
c001eb10:	56                   	push   esi
c001eb11:	53                   	push   ebx
c001eb12:	83 ec 1c             	sub    esp,0x1c
c001eb15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb1d:	8d 50 f8             	lea    edx,[eax-0x8]
c001eb20:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb24:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eb28:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eb2c:	80 fa 03             	cmp    dl,0x3
c001eb2f:	77 5d                	ja     c001eb8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001eb31:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb39:	0f b6 db             	movzx  ebx,bl
c001eb3c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eb3f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eb43:	83 ca 80             	or     edx,0xffffff80
c001eb46:	0f b6 d2             	movzx  edx,dl
c001eb49:	52                   	push   edx
c001eb4a:	6a 0c                	push   0xc
c001eb4c:	53                   	push   ebx
c001eb4d:	56                   	push   esi
c001eb4e:	e8 5f f9 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb53:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eb58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eb60:	0f b6 c0             	movzx  eax,al
c001eb63:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eb67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eb69:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eb6e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eb72:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eb76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb7a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eb82:	83 c4 2c             	add    esp,0x2c
c001eb85:	5b                   	pop    ebx
c001eb86:	5e                   	pop    esi
c001eb87:	5f                   	pop    edi
c001eb88:	5d                   	pop    ebp
c001eb89:	e9 24 f9 ff ff       	jmp    c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb8e:	3c 07                	cmp    al,0x7
c001eb90:	77 10                	ja     c001eba2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eb92:	0f b6 db             	movzx  ebx,bl
c001eb95:	0f b6 d0             	movzx  edx,al
c001eb98:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001eba0:	eb 2d                	jmp    c001ebcf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eba2:	3c 0d                	cmp    al,0xd
c001eba4:	77 13                	ja     c001ebb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001eba6:	0f b6 db             	movzx  ebx,bl
c001eba9:	0f b6 c0             	movzx  eax,al
c001ebac:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ebb3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ebb7:	eb 16                	jmp    c001ebcf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ebb9:	3c 15                	cmp    al,0x15
c001ebbb:	77 14                	ja     c001ebd1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ebbd:	0f b6 db             	movzx  ebx,bl
c001ebc0:	0f b6 c0             	movzx  eax,al
c001ebc3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ebcb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ebcf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ebd1:	83 c4 1c             	add    esp,0x1c
c001ebd4:	5b                   	pop    ebx
c001ebd5:	5e                   	pop    esi
c001ebd6:	5f                   	pop    edi
c001ebd7:	5d                   	pop    ebp
c001ebd8:	c3                   	ret    
c001ebd9:	90                   	nop

c001ebda <IDE::detect()>:
c001ebda:	55                   	push   ebp
c001ebdb:	57                   	push   edi
c001ebdc:	56                   	push   esi
c001ebdd:	53                   	push   ebx
c001ebde:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ebe4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ebeb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ebf2:	0f 85 97 02 00 00    	jne    c001ee8f <IDE::detect()+0x2b5>
c001ebf8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ebff:	31 f6                	xor    esi,esi
c001ec01:	31 ed                	xor    ebp,ebp
c001ec03:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ec0b:	89 e8                	mov    eax,ebp
c001ec0d:	c1 e0 06             	shl    eax,0x6
c001ec10:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ec18:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ec1c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec20:	c1 e0 04             	shl    eax,0x4
c001ec23:	83 c8 a0             	or     eax,0xffffffa0
c001ec26:	0f b6 c0             	movzx  eax,al
c001ec29:	50                   	push   eax
c001ec2a:	6a 06                	push   0x6
c001ec2c:	56                   	push   esi
c001ec2d:	53                   	push   ebx
c001ec2e:	e8 7f f8 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec33:	83 c4 0c             	add    esp,0xc
c001ec36:	6a 0c                	push   0xc
c001ec38:	56                   	push   esi
c001ec39:	53                   	push   ebx
c001ec3a:	e8 33 f9 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec3f:	83 c4 0c             	add    esp,0xc
c001ec42:	6a 0c                	push   0xc
c001ec44:	56                   	push   esi
c001ec45:	53                   	push   ebx
c001ec46:	e8 27 f9 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec4b:	83 c4 0c             	add    esp,0xc
c001ec4e:	6a 0c                	push   0xc
c001ec50:	56                   	push   esi
c001ec51:	53                   	push   ebx
c001ec52:	e8 1b f9 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec57:	83 c4 0c             	add    esp,0xc
c001ec5a:	6a 0c                	push   0xc
c001ec5c:	56                   	push   esi
c001ec5d:	53                   	push   ebx
c001ec5e:	e8 0f f9 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec63:	68 ec 00 00 00       	push   0xec
c001ec68:	6a 07                	push   0x7
c001ec6a:	56                   	push   esi
c001ec6b:	53                   	push   ebx
c001ec6c:	e8 41 f8 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec71:	83 c4 1c             	add    esp,0x1c
c001ec74:	6a 0c                	push   0xc
c001ec76:	56                   	push   esi
c001ec77:	53                   	push   ebx
c001ec78:	e8 f5 f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec7d:	83 c4 0c             	add    esp,0xc
c001ec80:	6a 0c                	push   0xc
c001ec82:	56                   	push   esi
c001ec83:	53                   	push   ebx
c001ec84:	e8 e9 f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec89:	83 c4 0c             	add    esp,0xc
c001ec8c:	6a 0c                	push   0xc
c001ec8e:	56                   	push   esi
c001ec8f:	53                   	push   ebx
c001ec90:	e8 dd f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ec95:	83 c4 0c             	add    esp,0xc
c001ec98:	6a 0c                	push   0xc
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	e8 d1 f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001eca1:	83 c4 0c             	add    esp,0xc
c001eca4:	6a 0c                	push   0xc
c001eca6:	56                   	push   esi
c001eca7:	53                   	push   ebx
c001eca8:	e8 c5 f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ecad:	83 c4 10             	add    esp,0x10
c001ecb0:	84 c0                	test   al,al
c001ecb2:	0f 84 5f 01 00 00    	je     c001ee17 <IDE::detect()+0x23d>
c001ecb8:	31 ff                	xor    edi,edi
c001ecba:	50                   	push   eax
c001ecbb:	6a 0c                	push   0xc
c001ecbd:	56                   	push   esi
c001ecbe:	53                   	push   ebx
c001ecbf:	e8 ae f8 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	a8 01                	test   al,0x1
c001ecc9:	0f 85 69 01 00 00    	jne    c001ee38 <IDE::detect()+0x25e>
c001eccf:	84 c0                	test   al,al
c001ecd1:	78 04                	js     c001ecd7 <IDE::detect()+0xfd>
c001ecd3:	a8 08                	test   al,0x8
c001ecd5:	75 23                	jne    c001ecfa <IDE::detect()+0x120>
c001ecd7:	47                   	inc    edi
c001ecd8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ecde:	7e da                	jle    c001ecba <IDE::detect()+0xe0>
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	6a 32                	push   0x32
c001ece5:	e8 36 9d ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c001ecea:	83 c4 10             	add    esp,0x10
c001eced:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ecf3:	75 c5                	jne    c001ecba <IDE::detect()+0xe0>
c001ecf5:	e9 3e 01 00 00       	jmp    c001ee38 <IDE::detect()+0x25e>
c001ecfa:	31 c9                	xor    ecx,ecx
c001ecfc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ed00:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ed04:	83 ec 0c             	sub    esp,0xc
c001ed07:	68 80 00 00 00       	push   0x80
c001ed0c:	57                   	push   edi
c001ed0d:	6a 00                	push   0x0
c001ed0f:	56                   	push   esi
c001ed10:	53                   	push   ebx
c001ed11:	e8 f8 fd ff ff       	call   c001eb0e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ed16:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ed1b:	89 e8                	mov    eax,ebp
c001ed1d:	89 d1                	mov    ecx,edx
c001ed1f:	c1 e0 06             	shl    eax,0x6
c001ed22:	01 d8                	add    eax,ebx
c001ed24:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ed2b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ed32:	89 f2                	mov    edx,esi
c001ed34:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ed3a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ed3e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ed44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ed48:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ed4f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ed57:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ed5e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ed66:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ed6c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ed73:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ed79:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ed7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ed81:	83 c4 20             	add    esp,0x20
c001ed84:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ed87:	83 c0 02             	add    eax,0x2
c001ed8a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ed90:	83 c7 02             	add    edi,0x2
c001ed93:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ed96:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ed9c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001eda0:	75 e2                	jne    c001ed84 <IDE::detect()+0x1aa>
c001eda2:	89 e8                	mov    eax,ebp
c001eda4:	c1 e0 06             	shl    eax,0x6
c001eda7:	01 d8                	add    eax,ebx
c001eda9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001edaf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001edb6:	66 c1 ea 09          	shr    dx,0x9
c001edba:	83 e2 01             	and    edx,0x1
c001edbd:	84 c9                	test   cl,cl
c001edbf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001edc5:	75 22                	jne    c001ede9 <IDE::detect()+0x20f>
c001edc7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001edce:	74 46                	je     c001ee16 <IDE::detect()+0x23c>
c001edd0:	83 ec 0c             	sub    esp,0xc
c001edd3:	68 7c 01 00 00       	push   0x17c
c001edd8:	e8 32 ac fe ff       	call   c0009a0f <malloc>
c001eddd:	89 c7                	mov    edi,eax
c001eddf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede2:	e8 87 07 00 00       	call   c001f56e <ATA::ATA()>
c001ede7:	eb 17                	jmp    c001ee00 <IDE::detect()+0x226>
c001ede9:	83 ec 0c             	sub    esp,0xc
c001edec:	68 84 01 00 00       	push   0x184
c001edf1:	e8 19 ac fe ff       	call   c0009a0f <malloc>
c001edf6:	89 c7                	mov    edi,eax
c001edf8:	89 04 24             	mov    DWORD PTR [esp],eax
c001edfb:	e8 f6 0d 00 00       	call   c001fbf6 <ATAPI::ATAPI()>
c001ee00:	5a                   	pop    edx
c001ee01:	59                   	pop    ecx
c001ee02:	57                   	push   edi
c001ee03:	53                   	push   ebx
c001ee04:	e8 31 f4 fe ff       	call   c000e23a <Device::addChild(Device*)>
c001ee09:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee0b:	53                   	push   ebx
c001ee0c:	55                   	push   ebp
c001ee0d:	6a 00                	push   0x0
c001ee0f:	57                   	push   edi
c001ee10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee13:	83 c4 20             	add    esp,0x20
c001ee16:	45                   	inc    ebp
c001ee17:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ee1c:	74 0d                	je     c001ee2b <IDE::detect()+0x251>
c001ee1e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ee26:	e9 e0 fd ff ff       	jmp    c001ec0b <IDE::detect()+0x31>
c001ee2b:	4e                   	dec    esi
c001ee2c:	74 61                	je     c001ee8f <IDE::detect()+0x2b5>
c001ee2e:	be 01 00 00 00       	mov    esi,0x1
c001ee33:	e9 cb fd ff ff       	jmp    c001ec03 <IDE::detect()+0x29>
c001ee38:	50                   	push   eax
c001ee39:	6a 04                	push   0x4
c001ee3b:	56                   	push   esi
c001ee3c:	53                   	push   ebx
c001ee3d:	e8 30 f7 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ee42:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee46:	83 c4 0c             	add    esp,0xc
c001ee49:	6a 05                	push   0x5
c001ee4b:	56                   	push   esi
c001ee4c:	53                   	push   ebx
c001ee4d:	e8 20 f7 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ee52:	83 c4 10             	add    esp,0x10
c001ee55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ee59:	80 fa 14             	cmp    dl,0x14
c001ee5c:	75 04                	jne    c001ee62 <IDE::detect()+0x288>
c001ee5e:	3c eb                	cmp    al,0xeb
c001ee60:	eb 07                	jmp    c001ee69 <IDE::detect()+0x28f>
c001ee62:	3c 96                	cmp    al,0x96
c001ee64:	75 b1                	jne    c001ee17 <IDE::detect()+0x23d>
c001ee66:	80 fa 69             	cmp    dl,0x69
c001ee69:	75 ac                	jne    c001ee17 <IDE::detect()+0x23d>
c001ee6b:	68 a1 00 00 00       	push   0xa1
c001ee70:	6a 07                	push   0x7
c001ee72:	56                   	push   esi
c001ee73:	53                   	push   ebx
c001ee74:	e8 39 f6 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee79:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ee80:	e8 9b 9b ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c001ee85:	83 c4 10             	add    esp,0x10
c001ee88:	b1 01                	mov    cl,0x1
c001ee8a:	e9 6d fe ff ff       	jmp    c001ecfc <IDE::detect()+0x122>
c001ee8f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ee95:	5b                   	pop    ebx
c001ee96:	5e                   	pop    esi
c001ee97:	5f                   	pop    edi
c001ee98:	5d                   	pop    ebp
c001ee99:	c3                   	ret    

c001ee9a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ee9a:	55                   	push   ebp
c001ee9b:	57                   	push   edi
c001ee9c:	56                   	push   esi
c001ee9d:	53                   	push   ebx
c001ee9e:	83 ec 1c             	sub    esp,0x1c
c001eea1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eea5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eea9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eead:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001eeb1:	88 c3                	mov    bl,al
c001eeb3:	84 c0                	test   al,al
c001eeb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeb9:	0f 84 81 00 00 00    	je     c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001eebf:	83 ec 0c             	sub    esp,0xc
c001eec2:	68 a7 69 02 c0       	push   0xc00269a7
c001eec7:	e8 2f de fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001eecc:	83 c4 10             	add    esp,0x10
c001eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eed3:	3c 01                	cmp    al,0x1
c001eed5:	74 63                	je     c001ef3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001eed7:	3c 02                	cmp    al,0x2
c001eed9:	75 53                	jne    c001ef2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001eedb:	d1 e6                	shl    esi,1
c001eedd:	09 ee                	or     esi,ebp
c001eedf:	50                   	push   eax
c001eee0:	89 f0                	mov    eax,esi
c001eee2:	6a 01                	push   0x1
c001eee4:	0f b6 f0             	movzx  esi,al
c001eee7:	c1 e6 06             	shl    esi,0x6
c001eeea:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001eef2:	50                   	push   eax
c001eef3:	57                   	push   edi
c001eef4:	e8 79 f6 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	a8 01                	test   al,0x1
c001eefe:	74 02                	je     c001ef02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ef00:	b3 07                	mov    bl,0x7
c001ef02:	a8 02                	test   al,0x2
c001ef04:	74 02                	je     c001ef08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ef06:	b3 03                	mov    bl,0x3
c001ef08:	a8 04                	test   al,0x4
c001ef0a:	74 02                	je     c001ef0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ef0c:	b3 14                	mov    bl,0x14
c001ef0e:	a8 08                	test   al,0x8
c001ef10:	74 02                	je     c001ef14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ef12:	b3 03                	mov    bl,0x3
c001ef14:	a8 10                	test   al,0x10
c001ef16:	74 02                	je     c001ef1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ef18:	b3 15                	mov    bl,0x15
c001ef1a:	a8 20                	test   al,0x20
c001ef1c:	74 02                	je     c001ef20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ef1e:	b3 03                	mov    bl,0x3
c001ef20:	a8 40                	test   al,0x40
c001ef22:	74 02                	je     c001ef26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ef24:	b3 16                	mov    bl,0x16
c001ef26:	84 c0                	test   al,al
c001ef28:	79 16                	jns    c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef2a:	b3 0d                	mov    bl,0xd
c001ef2c:	eb 12                	jmp    c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef2e:	3c 03                	cmp    al,0x3
c001ef30:	74 0c                	je     c001ef3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ef32:	3c 04                	cmp    al,0x4
c001ef34:	75 0a                	jne    c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef36:	b3 08                	mov    bl,0x8
c001ef38:	eb 06                	jmp    c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef3a:	b3 13                	mov    bl,0x13
c001ef3c:	eb 02                	jmp    c001ef40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef3e:	b3 17                	mov    bl,0x17
c001ef40:	83 c4 1c             	add    esp,0x1c
c001ef43:	88 d8                	mov    al,bl
c001ef45:	5b                   	pop    ebx
c001ef46:	5e                   	pop    esi
c001ef47:	5f                   	pop    edi
c001ef48:	5d                   	pop    ebp
c001ef49:	c3                   	ret    

c001ef4a <IDE::polling(unsigned char, unsigned int)>:
c001ef4a:	57                   	push   edi
c001ef4b:	56                   	push   esi
c001ef4c:	53                   	push   ebx
c001ef4d:	bb 04 00 00 00       	mov    ebx,0x4
c001ef52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef56:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef5b:	52                   	push   edx
c001ef5c:	6a 0c                	push   0xc
c001ef5e:	56                   	push   esi
c001ef5f:	57                   	push   edi
c001ef60:	e8 0d f6 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ef65:	83 c4 10             	add    esp,0x10
c001ef68:	4b                   	dec    ebx
c001ef69:	75 f0                	jne    c001ef5b <IDE::polling(unsigned char, unsigned int)+0x11>
c001ef6b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef70:	50                   	push   eax
c001ef71:	6a 0c                	push   0xc
c001ef73:	56                   	push   esi
c001ef74:	57                   	push   edi
c001ef75:	e8 f8 f5 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001ef7a:	83 c4 10             	add    esp,0x10
c001ef7d:	a8 01                	test   al,0x1
c001ef7f:	75 17                	jne    c001ef98 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef81:	a8 20                	test   al,0x20
c001ef83:	75 0f                	jne    c001ef94 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ef85:	4b                   	dec    ebx
c001ef86:	74 10                	je     c001ef98 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef88:	84 c0                	test   al,al
c001ef8a:	78 e4                	js     c001ef70 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef8c:	a8 08                	test   al,0x8
c001ef8e:	74 e0                	je     c001ef70 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef90:	31 c0                	xor    eax,eax
c001ef92:	eb 06                	jmp    c001ef9a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef94:	b0 01                	mov    al,0x1
c001ef96:	eb 02                	jmp    c001ef9a <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef98:	b0 02                	mov    al,0x2
c001ef9a:	5b                   	pop    ebx
c001ef9b:	5e                   	pop    esi
c001ef9c:	5f                   	pop    edi
c001ef9d:	c3                   	ret    

c001ef9e <SATABus::close(int, int, void*)>:
c001ef9e:	31 c0                	xor    eax,eax
c001efa0:	c3                   	ret    
c001efa1:	90                   	nop

c001efa2 <SATABus::detect()>:
c001efa2:	c3                   	ret    
c001efa3:	90                   	nop

c001efa4 <SATABus::SATABus()>:
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efab:	83 ec 08             	sub    esp,0x8
c001efae:	68 e0 69 02 c0       	push   0xc00269e0
c001efb3:	50                   	push   eax
c001efb4:	e8 2f f6 fe ff       	call   c000e5e8 <HardDiskController::HardDiskController(char const*)>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c001efc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc5:	89 10                	mov    DWORD PTR [eax],edx
c001efc7:	83 ec 0c             	sub    esp,0xc
c001efca:	6a 50                	push   0x50
c001efcc:	e8 e0 b1 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001efd1:	83 c4 10             	add    esp,0x10
c001efd4:	89 c2                	mov    edx,eax
c001efd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efda:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	6a 50                	push   0x50
c001efe5:	e8 eb c9 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	89 c2                	mov    edx,eax
c001efef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eff9:	a1 d0 81 02 c0       	mov    eax,ds:0xc00281d0
c001effe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f002:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f008:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f00c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	6a 03                	push   0x3
c001f017:	6a 50                	push   0x50
c001f019:	51                   	push   ecx
c001f01a:	52                   	push   edx
c001f01b:	50                   	push   eax
c001f01c:	e8 51 d3 fe ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f021:	83 c4 20             	add    esp,0x20
c001f024:	90                   	nop
c001f025:	83 c4 0c             	add    esp,0xc
c001f028:	c3                   	ret    
c001f029:	90                   	nop

c001f02a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f02a:	55                   	push   ebp
c001f02b:	57                   	push   edi
c001f02c:	56                   	push   esi
c001f02d:	53                   	push   ebx
c001f02e:	83 ec 3c             	sub    esp,0x3c
c001f031:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f035:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f03c:	74 2d                	je     c001f06b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f03e:	83 ec 0c             	sub    esp,0xc
c001f041:	68 04 6a 02 c0       	push   0xc0026a04
c001f046:	e8 1e aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f04b:	83 c4 10             	add    esp,0x10
c001f04e:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f055:	75 14                	jne    c001f06b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f057:	e4 60                	in     al,0x60
c001f059:	3c 1c                	cmp    al,0x1c
c001f05b:	74 04                	je     c001f061 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f05d:	3c 5a                	cmp    al,0x5a
c001f05f:	75 f6                	jne    c001f057 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001f061:	e4 60                	in     al,0x60
c001f063:	3c 5a                	cmp    al,0x5a
c001f065:	74 fa                	je     c001f061 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f067:	3c 1c                	cmp    al,0x1c
c001f069:	74 f6                	je     c001f061 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f06b:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001f06e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001f071:	09 c6                	or     esi,eax
c001f073:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f077:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f07d:	8b 38                	mov    edi,DWORD PTR [eax]
c001f07f:	c1 ef 08             	shr    edi,0x8
c001f082:	83 e7 0f             	and    edi,0xf
c001f085:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f08c:	75 04                	jne    c001f092 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001f08e:	31 db                	xor    ebx,ebx
c001f090:	eb 6f                	jmp    c001f101 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	68 1b 6a 02 c0       	push   0xc0026a1b
c001f09a:	e8 ca a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f09f:	83 c4 10             	add    esp,0x10
c001f0a2:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f0a9:	75 e3                	jne    c001f08e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f0ab:	e4 60                	in     al,0x60
c001f0ad:	3c 1c                	cmp    al,0x1c
c001f0af:	74 04                	je     c001f0b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0b1:	3c 5a                	cmp    al,0x5a
c001f0b3:	75 f6                	jne    c001f0ab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001f0b5:	e4 60                	in     al,0x60
c001f0b7:	3c 5a                	cmp    al,0x5a
c001f0b9:	74 fa                	je     c001f0b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0bb:	3c 1c                	cmp    al,0x1c
c001f0bd:	74 f6                	je     c001f0b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0bf:	eb cd                	jmp    c001f08e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f0c1:	50                   	push   eax
c001f0c2:	50                   	push   eax
c001f0c3:	68 32 6a 02 c0       	push   0xc0026a32
c001f0c8:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001f0cc:	55                   	push   ebp
c001f0cd:	e8 6e 16 fe ff       	call   c0000740 <strcpy>
c001f0d2:	83 c4 10             	add    esp,0x10
c001f0d5:	89 d8                	mov    eax,ebx
c001f0d7:	b9 0a 00 00 00       	mov    ecx,0xa
c001f0dc:	99                   	cdq    
c001f0dd:	f7 f9                	idiv   ecx
c001f0df:	83 c0 30             	add    eax,0x30
c001f0e2:	83 c2 30             	add    edx,0x30
c001f0e5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f0e9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001f0ed:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f0f4:	75 11                	jne    c001f107 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001f0f6:	f7 c6 01 00 00 00    	test   esi,0x1
c001f0fc:	74 34                	je     c001f132 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001f0fe:	d1 ee                	shr    esi,1
c001f100:	43                   	inc    ebx
c001f101:	39 fb                	cmp    ebx,edi
c001f103:	75 bc                	jne    c001f0c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001f105:	eb 63                	jmp    c001f16a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001f107:	83 ec 0c             	sub    esp,0xc
c001f10a:	55                   	push   ebp
c001f10b:	e8 59 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f110:	83 c4 10             	add    esp,0x10
c001f113:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f11a:	75 da                	jne    c001f0f6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f11c:	e4 60                	in     al,0x60
c001f11e:	3c 1c                	cmp    al,0x1c
c001f120:	74 04                	je     c001f126 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f122:	3c 5a                	cmp    al,0x5a
c001f124:	75 f6                	jne    c001f11c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001f126:	e4 60                	in     al,0x60
c001f128:	3c 5a                	cmp    al,0x5a
c001f12a:	74 fa                	je     c001f126 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f12c:	3c 1c                	cmp    al,0x1c
c001f12e:	74 f6                	je     c001f126 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f130:	eb c4                	jmp    c001f0f6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f132:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f139:	74 68                	je     c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x179>
c001f13b:	83 ec 0c             	sub    esp,0xc
c001f13e:	68 4c 6a 02 c0       	push   0xc0026a4c
c001f143:	e8 21 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f148:	83 c4 10             	add    esp,0x10
c001f14b:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f152:	75 4f                	jne    c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x179>
c001f154:	e4 60                	in     al,0x60
c001f156:	3c 5a                	cmp    al,0x5a
c001f158:	74 04                	je     c001f15e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f15a:	3c 1c                	cmp    al,0x1c
c001f15c:	75 f6                	jne    c001f154 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001f15e:	e4 60                	in     al,0x60
c001f160:	3c 5a                	cmp    al,0x5a
c001f162:	74 fa                	je     c001f15e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f164:	3c 1c                	cmp    al,0x1c
c001f166:	74 f6                	je     c001f15e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f168:	eb 39                	jmp    c001f1a3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x179>
c001f16a:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f171:	74 2d                	je     c001f1a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f173:	83 ec 0c             	sub    esp,0xc
c001f176:	68 63 6a 02 c0       	push   0xc0026a63
c001f17b:	e8 e9 a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f180:	83 c4 10             	add    esp,0x10
c001f183:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f18a:	75 14                	jne    c001f1a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f18c:	e4 60                	in     al,0x60
c001f18e:	3c 5a                	cmp    al,0x5a
c001f190:	74 04                	je     c001f196 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f192:	3c 1c                	cmp    al,0x1c
c001f194:	75 f6                	jne    c001f18c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001f196:	e4 60                	in     al,0x60
c001f198:	3c 5a                	cmp    al,0x5a
c001f19a:	74 fa                	je     c001f196 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f19c:	3c 1c                	cmp    al,0x1c
c001f19e:	74 f6                	je     c001f196 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f1a0:	83 cb ff             	or     ebx,0xffffffff
c001f1a3:	83 c4 3c             	add    esp,0x3c
c001f1a6:	89 d8                	mov    eax,ebx
c001f1a8:	5b                   	pop    ebx
c001f1a9:	5e                   	pop    esi
c001f1aa:	5f                   	pop    edi
c001f1ab:	5d                   	pop    ebp
c001f1ac:	c3                   	ret    
c001f1ad:	90                   	nop

c001f1ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f1ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f1b5:	89 c2                	mov    edx,eax
c001f1b7:	c1 ea 08             	shr    edx,0x8
c001f1ba:	83 e2 0f             	and    edx,0xf
c001f1bd:	fe ca                	dec    dl
c001f1bf:	75 31                	jne    c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1c1:	83 e0 0f             	and    eax,0xf
c001f1c4:	3c 03                	cmp    al,0x3
c001f1c6:	75 2a                	jne    c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f1cb:	b8 02 00 00 00       	mov    eax,0x2
c001f1d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f1d6:	74 1c                	je     c001f1f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1d8:	b8 04 00 00 00       	mov    eax,0x4
c001f1dd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f1e3:	74 0f                	je     c001f1f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1e5:	31 c0                	xor    eax,eax
c001f1e7:	83 fa 03             	cmp    edx,0x3
c001f1ea:	0f 94 c0             	sete   al
c001f1ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f1f1:	c3                   	ret    
c001f1f2:	31 c0                	xor    eax,eax
c001f1f4:	c3                   	ret    
c001f1f5:	90                   	nop

c001f1f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f1f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1fd:	0f ba e2 0f          	bt     edx,0xf
c001f201:	72 f7                	jb     c001f1fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f203:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f206:	83 ca 10             	or     edx,0x10
c001f209:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f20c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f20f:	83 ca 01             	or     edx,0x1
c001f212:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f215:	c3                   	ret    

c001f216 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f216:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f21a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f21d:	83 e2 fe             	and    edx,0xfffffffe
c001f220:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f223:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f226:	83 e2 ef             	and    edx,0xffffffef
c001f229:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f22c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f22f:	0f ba e2 0e          	bt     edx,0xe
c001f233:	72 f7                	jb     c001f22c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f235:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f238:	0f ba e2 0f          	bt     edx,0xf
c001f23c:	72 ee                	jb     c001f22c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f23e:	c3                   	ret    
c001f23f:	90                   	nop

c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f24f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f253:	53                   	push   ebx
c001f254:	89 fd                	mov    ebp,edi
c001f256:	56                   	push   esi
c001f257:	c1 e5 0a             	shl    ebp,0xa
c001f25a:	e8 b7 ff ff ff       	call   c001f216 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f268:	01 e8                	add    eax,ebp
c001f26a:	89 03                	mov    DWORD PTR [ebx],eax
c001f26c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f26e:	68 00 04 00 00       	push   0x400
c001f273:	6a 00                	push   0x0
c001f275:	50                   	push   eax
c001f276:	e8 09 14 fe ff       	call   c0000684 <memset>
c001f27b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f281:	89 fa                	mov    edx,edi
c001f283:	01 e8                	add    eax,ebp
c001f285:	c1 e7 0d             	shl    edi,0xd
c001f288:	89 03                	mov    DWORD PTR [ebx],eax
c001f28a:	c1 e2 08             	shl    edx,0x8
c001f28d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f294:	81 c2 00 80 00 00    	add    edx,0x8000
c001f29a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f29e:	89 d0                	mov    eax,edx
c001f2a0:	83 c4 1c             	add    esp,0x1c
c001f2a3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2a9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f2ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f2af:	68 00 01 00 00       	push   0x100
c001f2b4:	6a 00                	push   0x0
c001f2b6:	50                   	push   eax
c001f2b7:	e8 c8 13 fe ff       	call   c0000684 <memset>
c001f2bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2c0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f2c6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f2cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f2d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f2dd:	31 ff                	xor    edi,edi
c001f2df:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f2e5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f2eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2f5:	83 c5 20             	add    ebp,0x20
c001f2f8:	01 f8                	add    eax,edi
c001f2fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2fd:	52                   	push   edx
c001f2fe:	68 00 01 00 00       	push   0x100
c001f303:	6a 00                	push   0x0
c001f305:	50                   	push   eax
c001f306:	e8 79 13 fe ff       	call   c0000684 <memset>
c001f30b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f318:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f31f:	01 f8                	add    eax,edi
c001f321:	81 c7 00 01 00 00    	add    edi,0x100
c001f327:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f32a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f330:	75 b3                	jne    c001f2e5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f332:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f336:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f33a:	83 c4 1c             	add    esp,0x1c
c001f33d:	5b                   	pop    ebx
c001f33e:	5e                   	pop    esi
c001f33f:	5f                   	pop    edi
c001f340:	5d                   	pop    ebp
c001f341:	e9 b0 fe ff ff       	jmp    c001f1f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f346 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f346:	55                   	push   ebp
c001f347:	57                   	push   edi
c001f348:	56                   	push   esi
c001f349:	53                   	push   ebx
c001f34a:	83 ec 0c             	sub    esp,0xc
c001f34d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f351:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f358:	74 2d                	je     c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f35a:	83 ec 0c             	sub    esp,0xc
c001f35d:	68 7a 6a 02 c0       	push   0xc0026a7a
c001f362:	e8 02 a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f371:	75 14                	jne    c001f387 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f373:	e4 60                	in     al,0x60
c001f375:	3c 1c                	cmp    al,0x1c
c001f377:	74 04                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f379:	3c 5a                	cmp    al,0x5a
c001f37b:	75 f6                	jne    c001f373 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f37d:	e4 60                	in     al,0x60
c001f37f:	3c 5a                	cmp    al,0x5a
c001f381:	74 fa                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f383:	3c 1c                	cmp    al,0x1c
c001f385:	74 f6                	je     c001f37d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f387:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f38b:	31 db                	xor    ebx,ebx
c001f38d:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f390:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f396:	0f 84 78 01 00 00    	je     c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f39c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f3a0:	89 d8                	mov    eax,ebx
c001f3a2:	c1 e0 07             	shl    eax,0x7
c001f3a5:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f3ac:	50                   	push   eax
c001f3ad:	50                   	push   eax
c001f3ae:	57                   	push   edi
c001f3af:	56                   	push   esi
c001f3b0:	e8 f9 fd ff ff       	call   c001f1ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f3b5:	83 c4 10             	add    esp,0x10
c001f3b8:	83 f8 01             	cmp    eax,0x1
c001f3bb:	0f 85 19 01 00 00    	jne    c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f3c1:	50                   	push   eax
c001f3c2:	53                   	push   ebx
c001f3c3:	57                   	push   edi
c001f3c4:	56                   	push   esi
c001f3c5:	e8 76 fe ff ff       	call   c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f3d4:	74 2d                	je     c001f403 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3d6:	83 ec 0c             	sub    esp,0xc
c001f3d9:	68 8f 6a 02 c0       	push   0xc0026a8f
c001f3de:	e8 86 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3e3:	83 c4 10             	add    esp,0x10
c001f3e6:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f3ed:	75 14                	jne    c001f403 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3ef:	e4 60                	in     al,0x60
c001f3f1:	3c 1c                	cmp    al,0x1c
c001f3f3:	74 04                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3f5:	3c 5a                	cmp    al,0x5a
c001f3f7:	75 f6                	jne    c001f3ef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f3f9:	e4 60                	in     al,0x60
c001f3fb:	3c 5a                	cmp    al,0x5a
c001f3fd:	74 fa                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3ff:	3c 1c                	cmp    al,0x1c
c001f401:	74 f6                	je     c001f3f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f403:	83 ec 0c             	sub    esp,0xc
c001f406:	68 7c 01 00 00       	push   0x17c
c001f40b:	e8 ff a5 fe ff       	call   c0009a0f <malloc>
c001f410:	89 04 24             	mov    DWORD PTR [esp],eax
c001f413:	89 c7                	mov    edi,eax
c001f415:	e8 fa 0f 00 00       	call   c0020414 <SATA::SATA()>
c001f41a:	83 c4 10             	add    esp,0x10
c001f41d:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f424:	74 2d                	je     c001f453 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f426:	83 ec 0c             	sub    esp,0xc
c001f429:	68 a4 6a 02 c0       	push   0xc0026aa4
c001f42e:	e8 36 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f43d:	75 14                	jne    c001f453 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f43f:	e4 60                	in     al,0x60
c001f441:	3c 5a                	cmp    al,0x5a
c001f443:	74 04                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f445:	3c 1c                	cmp    al,0x1c
c001f447:	75 f6                	jne    c001f43f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f449:	e4 60                	in     al,0x60
c001f44b:	3c 5a                	cmp    al,0x5a
c001f44d:	74 fa                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f44f:	3c 1c                	cmp    al,0x1c
c001f451:	74 f6                	je     c001f449 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f453:	50                   	push   eax
c001f454:	50                   	push   eax
c001f455:	57                   	push   edi
c001f456:	56                   	push   esi
c001f457:	e8 de ed fe ff       	call   c000e23a <Device::addChild(Device*)>
c001f45c:	83 c4 10             	add    esp,0x10
c001f45f:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f466:	74 2d                	je     c001f495 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	68 b9 6a 02 c0       	push   0xc0026ab9
c001f470:	e8 f4 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f475:	83 c4 10             	add    esp,0x10
c001f478:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f47f:	75 14                	jne    c001f495 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f481:	e4 60                	in     al,0x60
c001f483:	3c 1c                	cmp    al,0x1c
c001f485:	74 04                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f487:	3c 5a                	cmp    al,0x5a
c001f489:	75 f6                	jne    c001f481 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f48b:	e4 60                	in     al,0x60
c001f48d:	3c 5a                	cmp    al,0x5a
c001f48f:	74 fa                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f491:	3c 1c                	cmp    al,0x1c
c001f493:	74 f6                	je     c001f48b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f495:	8b 07                	mov    eax,DWORD PTR [edi]
c001f497:	56                   	push   esi
c001f498:	6a 00                	push   0x0
c001f49a:	53                   	push   ebx
c001f49b:	57                   	push   edi
c001f49c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f49f:	83 c4 10             	add    esp,0x10
c001f4a2:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c001f4a9:	74 69                	je     c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	68 ce 6a 02 c0       	push   0xc0026ace
c001f4b3:	e8 b1 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f4b8:	83 c4 10             	add    esp,0x10
c001f4bb:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c001f4c2:	75 50                	jne    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4c4:	e4 60                	in     al,0x60
c001f4c6:	3c 1c                	cmp    al,0x1c
c001f4c8:	74 04                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4ca:	3c 5a                	cmp    al,0x5a
c001f4cc:	75 f6                	jne    c001f4c4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f4ce:	e4 60                	in     al,0x60
c001f4d0:	3c 5a                	cmp    al,0x5a
c001f4d2:	74 fa                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d4:	3c 1c                	cmp    al,0x1c
c001f4d6:	74 f6                	je     c001f4ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d8:	eb 3a                	jmp    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4da:	83 f8 04             	cmp    eax,0x4
c001f4dd:	75 35                	jne    c001f514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4df:	50                   	push   eax
c001f4e0:	53                   	push   ebx
c001f4e1:	57                   	push   edi
c001f4e2:	56                   	push   esi
c001f4e3:	e8 58 fd ff ff       	call   c001f240 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4e8:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4ef:	e8 1b a5 fe ff       	call   c0009a0f <malloc>
c001f4f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f7:	89 c7                	mov    edi,eax
c001f4f9:	e8 8c 17 00 00       	call   c0020c8a <SATAPI::SATAPI()>
c001f4fe:	5a                   	pop    edx
c001f4ff:	59                   	pop    ecx
c001f500:	57                   	push   edi
c001f501:	56                   	push   esi
c001f502:	e8 33 ed fe ff       	call   c000e23a <Device::addChild(Device*)>
c001f507:	8b 07                	mov    eax,DWORD PTR [edi]
c001f509:	56                   	push   esi
c001f50a:	6a 00                	push   0x0
c001f50c:	53                   	push   ebx
c001f50d:	57                   	push   edi
c001f50e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f511:	83 c4 20             	add    esp,0x20
c001f514:	d1 ed                	shr    ebp,1
c001f516:	43                   	inc    ebx
c001f517:	83 fb 20             	cmp    ebx,0x20
c001f51a:	0f 85 70 fe ff ff    	jne    c001f390 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f520:	83 c4 0c             	add    esp,0xc
c001f523:	5b                   	pop    ebx
c001f524:	5e                   	pop    esi
c001f525:	5f                   	pop    edi
c001f526:	5d                   	pop    ebp
c001f527:	c3                   	ret    

c001f528 <SATABus::open(int, int, void*)>:
c001f528:	83 ec 14             	sub    esp,0x14
c001f52b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f52f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f535:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f53b:	52                   	push   edx
c001f53c:	50                   	push   eax
c001f53d:	e8 04 fe ff ff       	call   c001f346 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f542:	31 c0                	xor    eax,eax
c001f544:	83 c4 1c             	add    esp,0x1c
c001f547:	c3                   	ret    

c001f548 <ATA::close(int, int, void*)>:
c001f548:	83 ec 0c             	sub    esp,0xc
c001f54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f555:	85 c0                	test   eax,eax
c001f557:	74 0c                	je     c001f565 <ATA::close(int, int, void*)+0x1d>
c001f559:	83 ec 0c             	sub    esp,0xc
c001f55c:	8b 10                	mov    edx,DWORD PTR [eax]
c001f55e:	50                   	push   eax
c001f55f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f562:	83 c4 10             	add    esp,0x10
c001f565:	31 c0                	xor    eax,eax
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	c3                   	ret    
c001f56b:	90                   	nop

c001f56c <ATA::powerSaving(PowerSavingLevel)>:
c001f56c:	c3                   	ret    
c001f56d:	90                   	nop

c001f56e <ATA::ATA()>:
c001f56e:	83 ec 0c             	sub    esp,0xc
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	83 ec 04             	sub    esp,0x4
c001f578:	68 00 02 00 00       	push   0x200
c001f57d:	68 5b 6c 02 c0       	push   0xc0026c5b
c001f582:	50                   	push   eax
c001f583:	e8 ea f0 fe ff       	call   c000e672 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f588:	83 c4 10             	add    esp,0x10
c001f58b:	ba 64 6b 02 c0       	mov    edx,0xc0026b64
c001f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f594:	89 10                	mov    DWORD PTR [eax],edx
c001f596:	90                   	nop
c001f597:	83 c4 0c             	add    esp,0xc
c001f59a:	c3                   	ret    
c001f59b:	90                   	nop

c001f59c <ATA::flush(bool)>:
c001f59c:	53                   	push   ebx
c001f59d:	83 ec 08             	sub    esp,0x8
c001f5a0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f5a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5a9:	19 c0                	sbb    eax,eax
c001f5ab:	83 e0 fd             	and    eax,0xfffffffd
c001f5ae:	05 ea 00 00 00       	add    eax,0xea
c001f5b3:	50                   	push   eax
c001f5b4:	6a 07                	push   0x7
c001f5b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5bd:	50                   	push   eax
c001f5be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5c4:	e8 e9 ee ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c9:	83 c4 0c             	add    esp,0xc
c001f5cc:	6a 00                	push   0x0
c001f5ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5d5:	50                   	push   eax
c001f5d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5dc:	e8 69 f9 ff ff       	call   c001ef4a <IDE::polling(unsigned char, unsigned int)>
c001f5e1:	83 c4 18             	add    esp,0x18
c001f5e4:	5b                   	pop    ebx
c001f5e5:	c3                   	ret    

c001f5e6 <ATA::readyForCommand()>:
c001f5e6:	56                   	push   esi
c001f5e7:	53                   	push   ebx
c001f5e8:	53                   	push   ebx
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5ef:	51                   	push   ecx
c001f5f0:	6a 0c                	push   0xc
c001f5f2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f5f9:	50                   	push   eax
c001f5fa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f600:	e8 6d ef ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001f605:	83 c4 10             	add    esp,0x10
c001f608:	a8 88                	test   al,0x88
c001f60a:	74 1f                	je     c001f62b <ATA::readyForCommand()+0x45>
c001f60c:	43                   	inc    ebx
c001f60d:	83 fb 63             	cmp    ebx,0x63
c001f610:	7e dd                	jle    c001f5ef <ATA::readyForCommand()+0x9>
c001f612:	83 ec 0c             	sub    esp,0xc
c001f615:	6a 0a                	push   0xa
c001f617:	e8 04 94 ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f625:	75 c8                	jne    c001f5ef <ATA::readyForCommand()+0x9>
c001f627:	31 c0                	xor    eax,eax
c001f629:	eb 02                	jmp    c001f62d <ATA::readyForCommand()+0x47>
c001f62b:	b0 01                	mov    al,0x1
c001f62d:	5a                   	pop    edx
c001f62e:	5b                   	pop    ebx
c001f62f:	5e                   	pop    esi
c001f630:	c3                   	ret    
c001f631:	90                   	nop

c001f632 <ATA::access(unsigned long long, int, void*, bool)>:
c001f632:	55                   	push   ebp
c001f633:	57                   	push   edi
c001f634:	56                   	push   esi
c001f635:	53                   	push   ebx
c001f636:	83 ec 38             	sub    esp,0x38
c001f639:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f63d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f641:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f645:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f649:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f64d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f651:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f655:	68 10 6b 02 c0       	push   0xc0026b10
c001f65a:	e8 9c d6 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f65f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f672:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f676:	c1 e0 06             	shl    eax,0x6
c001f679:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f681:	74 5d                	je     c001f6e0 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f683:	89 fa                	mov    edx,edi
c001f685:	89 f0                	mov    eax,esi
c001f687:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f68b:	c1 ea 1c             	shr    edx,0x1c
c001f68e:	89 d1                	mov    ecx,edx
c001f690:	09 c1                	or     ecx,eax
c001f692:	74 25                	je     c001f6b9 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f694:	31 ed                	xor    ebp,ebp
c001f696:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f69d:	89 fa                	mov    edx,edi
c001f69f:	89 f0                	mov    eax,esi
c001f6a1:	0f ad d0             	shrd   eax,edx,cl
c001f6a4:	d3 ea                	shr    edx,cl
c001f6a6:	f6 c1 20             	test   cl,0x20
c001f6a9:	74 02                	je     c001f6ad <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f6ab:	89 d0                	mov    eax,edx
c001f6ad:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f6b1:	45                   	inc    ebp
c001f6b2:	83 fd 06             	cmp    ebp,0x6
c001f6b5:	75 df                	jne    c001f696 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f6b7:	eb 76                	jmp    c001f72f <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f6b9:	89 f0                	mov    eax,esi
c001f6bb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f6c0:	89 fa                	mov    edx,edi
c001f6c2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6c9:	0f ac d0 10          	shrd   eax,edx,0x10
c001f6cd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6d2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6d6:	c1 ee 18             	shr    esi,0x18
c001f6d9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6de:	eb 56                	jmp    c001f736 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6e0:	6a 00                	push   0x0
c001f6e2:	6a 3f                	push   0x3f
c001f6e4:	57                   	push   edi
c001f6e5:	56                   	push   esi
c001f6e6:	e8 f9 31 00 00       	call   c00228e4 <__umoddi3>
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	40                   	inc    eax
c001f6ef:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f6f3:	6a 00                	push   0x0
c001f6f5:	68 f0 03 00 00       	push   0x3f0
c001f6fa:	57                   	push   edi
c001f6fb:	56                   	push   esi
c001f6fc:	e8 e3 30 00 00       	call   c00227e4 <__udivdi3>
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f709:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f710:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f715:	6a 00                	push   0x0
c001f717:	6a 3f                	push   0x3f
c001f719:	57                   	push   edi
c001f71a:	56                   	push   esi
c001f71b:	e8 c4 30 00 00       	call   c00227e4 <__udivdi3>
c001f720:	83 c4 10             	add    esp,0x10
c001f723:	89 c6                	mov    esi,eax
c001f725:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f72a:	83 e6 0f             	and    esi,0xf
c001f72d:	eb 07                	jmp    c001f736 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f72f:	31 f6                	xor    esi,esi
c001f731:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f736:	bf 01 00 00 00       	mov    edi,0x1
c001f73b:	50                   	push   eax
c001f73c:	6a 00                	push   0x0
c001f73e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f745:	50                   	push   eax
c001f746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f74a:	e8 6b ef ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001f74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f752:	e8 8f fe ff ff       	call   c001f5e6 <ATA::readyForCommand()>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	84 c0                	test   al,al
c001f75c:	0f 84 bc 02 00 00    	je     c001fa1e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f762:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f768:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f76e:	c1 e0 04             	shl    eax,0x4
c001f771:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f778:	09 c6                	or     esi,eax
c001f77a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f77f:	75 05                	jne    c001f786 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f781:	83 ce a0             	or     esi,0xffffffa0
c001f784:	eb 03                	jmp    c001f789 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f786:	83 ce e0             	or     esi,0xffffffe0
c001f789:	89 f0                	mov    eax,esi
c001f78b:	0f b6 f0             	movzx  esi,al
c001f78e:	56                   	push   esi
c001f78f:	6a 06                	push   0x6
c001f791:	51                   	push   ecx
c001f792:	52                   	push   edx
c001f793:	e8 1a ed ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f798:	83 c4 10             	add    esp,0x10
c001f79b:	6a 00                	push   0x0
c001f79d:	6a 01                	push   0x1
c001f79f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7a6:	50                   	push   eax
c001f7a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7ad:	e8 00 ed ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7b2:	83 c4 10             	add    esp,0x10
c001f7b5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7ba:	75 6e                	jne    c001f82a <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f7bc:	6a 00                	push   0x0
c001f7be:	6a 08                	push   0x8
c001f7c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c7:	50                   	push   eax
c001f7c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7ce:	e8 df ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f7d8:	50                   	push   eax
c001f7d9:	6a 09                	push   0x9
c001f7db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7e2:	50                   	push   eax
c001f7e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7e9:	e8 c4 ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7ee:	83 c4 20             	add    esp,0x20
c001f7f1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f7f6:	50                   	push   eax
c001f7f7:	6a 0a                	push   0xa
c001f7f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f800:	50                   	push   eax
c001f801:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f807:	e8 a6 ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f80c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f811:	50                   	push   eax
c001f812:	6a 0b                	push   0xb
c001f814:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f81b:	50                   	push   eax
c001f81c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f822:	e8 8b ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f827:	83 c4 20             	add    esp,0x20
c001f82a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f82f:	50                   	push   eax
c001f830:	6a 02                	push   0x2
c001f832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f839:	50                   	push   eax
c001f83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f840:	e8 6d ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f845:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f84a:	50                   	push   eax
c001f84b:	6a 03                	push   0x3
c001f84d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f854:	50                   	push   eax
c001f855:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f85b:	e8 52 ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f860:	83 c4 20             	add    esp,0x20
c001f863:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f868:	50                   	push   eax
c001f869:	6a 04                	push   0x4
c001f86b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f872:	50                   	push   eax
c001f873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f879:	e8 34 ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f87e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f883:	50                   	push   eax
c001f884:	6a 05                	push   0x5
c001f886:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f88d:	50                   	push   eax
c001f88e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f894:	e8 19 ec ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f899:	83 c4 20             	add    esp,0x20
c001f89c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f8a1:	0f 94 c0             	sete   al
c001f8a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8a9:	74 09                	je     c001f8b4 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f8ab:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f8b2:	eb 07                	jmp    c001f8bb <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f8b4:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f8bb:	0f b6 c0             	movzx  eax,al
c001f8be:	50                   	push   eax
c001f8bf:	6a 07                	push   0x7
c001f8c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8c8:	50                   	push   eax
c001f8c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8cf:	e8 de eb ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8d4:	c7 04 24 1d 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b1d
c001f8db:	e8 1b d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f8e0:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8e4:	83 c4 10             	add    esp,0x10
c001f8e7:	85 f6                	test   esi,esi
c001f8e9:	0f 84 f7 00 00 00    	je     c001f9e6 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f8ef:	83 ec 0c             	sub    esp,0xc
c001f8f2:	68 20 6b 02 c0       	push   0xc0026b20
c001f8f7:	e8 ff d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f8fc:	83 c4 0c             	add    esp,0xc
c001f8ff:	6a 01                	push   0x1
c001f901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f908:	50                   	push   eax
c001f909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f90f:	e8 36 f6 ff ff       	call   c001ef4a <IDE::polling(unsigned char, unsigned int)>
c001f914:	c7 04 24 23 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b23
c001f91b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f91f:	e8 d7 d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f924:	83 c4 10             	add    esp,0x10
c001f927:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f92b:	84 c0                	test   al,al
c001f92d:	74 2b                	je     c001f95a <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f92f:	0f b6 f8             	movzx  edi,al
c001f932:	57                   	push   edi
c001f933:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f93a:	50                   	push   eax
c001f93b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f942:	50                   	push   eax
c001f943:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f949:	e8 4c f5 ff ff       	call   c001ee9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f94e:	c7 04 24 26 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b26
c001f955:	e9 bc 00 00 00       	jmp    c001fa16 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f95a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f95f:	74 50                	je     c001f9b1 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f961:	83 ec 0c             	sub    esp,0xc
c001f964:	31 ed                	xor    ebp,ebp
c001f966:	68 31 6b 02 c0       	push   0xc0026b31
c001f96b:	e8 8b d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f977:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f97b:	50                   	push   eax
c001f97c:	50                   	push   eax
c001f97d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f984:	50                   	push   eax
c001f985:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f98b:	e8 10 eb ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001f990:	89 c2                	mov    edx,eax
c001f992:	89 f8                	mov    eax,edi
c001f994:	66 ef                	out    dx,ax
c001f996:	45                   	inc    ebp
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f9a0:	75 d1                	jne    c001f973 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	68 34 6b 02 c0       	push   0xc0026b34
c001f9aa:	e8 4c d3 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f9af:	eb 24                	jmp    c001f9d5 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f9b1:	51                   	push   ecx
c001f9b2:	51                   	push   ecx
c001f9b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9ba:	50                   	push   eax
c001f9bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c1:	e8 da ea ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001f9c6:	b9 00 01 00 00       	mov    ecx,0x100
c001f9cb:	89 c2                	mov    edx,eax
c001f9cd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f9d1:	fc                   	cld    
c001f9d2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	4e                   	dec    esi
c001f9d9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9e1:	e9 01 ff ff ff       	jmp    c001f8e7 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9e6:	31 ff                	xor    edi,edi
c001f9e8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9ed:	74 2f                	je     c001fa1e <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f9ef:	83 ec 0c             	sub    esp,0xc
c001f9f2:	68 37 6b 02 c0       	push   0xc0026b37
c001f9f7:	e8 ff d2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f9fc:	58                   	pop    eax
c001f9fd:	31 c0                	xor    eax,eax
c001f9ff:	5a                   	pop    edx
c001fa00:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fa05:	0f 94 c0             	sete   al
c001fa08:	50                   	push   eax
c001fa09:	53                   	push   ebx
c001fa0a:	e8 8d fb ff ff       	call   c001f59c <ATA::flush(bool)>
c001fa0f:	c7 04 24 3a 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b3a
c001fa16:	e8 e0 d2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	83 c4 2c             	add    esp,0x2c
c001fa21:	89 f8                	mov    eax,edi
c001fa23:	5b                   	pop    ebx
c001fa24:	5e                   	pop    esi
c001fa25:	5f                   	pop    edi
c001fa26:	5d                   	pop    ebp
c001fa27:	c3                   	ret    

c001fa28 <ATA::read(unsigned long long, int, void*)>:
c001fa28:	57                   	push   edi
c001fa29:	b8 04 00 00 00       	mov    eax,0x4
c001fa2e:	56                   	push   esi
c001fa2f:	53                   	push   ebx
c001fa30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa38:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa3f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa43:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa49:	77 25                	ja     c001fa70 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa4b:	b8 06 00 00 00       	mov    eax,0x6
c001fa50:	85 f6                	test   esi,esi
c001fa52:	74 1c                	je     c001fa70 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa54:	50                   	push   eax
c001fa55:	50                   	push   eax
c001fa56:	6a 00                	push   0x0
c001fa58:	56                   	push   esi
c001fa59:	52                   	push   edx
c001fa5a:	53                   	push   ebx
c001fa5b:	51                   	push   ecx
c001fa5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa60:	e8 cd fb ff ff       	call   c001f632 <ATA::access(unsigned long long, int, void*, bool)>
c001fa65:	83 c4 20             	add    esp,0x20
c001fa68:	85 c0                	test   eax,eax
c001fa6a:	0f 95 c0             	setne  al
c001fa6d:	0f b6 c0             	movzx  eax,al
c001fa70:	5b                   	pop    ebx
c001fa71:	5e                   	pop    esi
c001fa72:	5f                   	pop    edi
c001fa73:	c3                   	ret    

c001fa74 <ATA::write(unsigned long long, int, void*)>:
c001fa74:	55                   	push   ebp
c001fa75:	57                   	push   edi
c001fa76:	56                   	push   esi
c001fa77:	53                   	push   ebx
c001fa78:	83 ec 18             	sub    esp,0x18
c001fa7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa87:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa8b:	68 3d 6b 02 c0       	push   0xc0026b3d
c001fa90:	e8 66 d2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fa95:	8d 53 ff             	lea    edx,[ebx-0x1]
c001fa98:	83 c4 10             	add    esp,0x10
c001fa9b:	b8 04 00 00 00       	mov    eax,0x4
c001faa0:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001faa6:	77 25                	ja     c001facd <ATA::write(unsigned long long, int, void*)+0x59>
c001faa8:	b8 06 00 00 00       	mov    eax,0x6
c001faad:	85 f6                	test   esi,esi
c001faaf:	74 1c                	je     c001facd <ATA::write(unsigned long long, int, void*)+0x59>
c001fab1:	50                   	push   eax
c001fab2:	50                   	push   eax
c001fab3:	6a 01                	push   0x1
c001fab5:	56                   	push   esi
c001fab6:	53                   	push   ebx
c001fab7:	55                   	push   ebp
c001fab8:	57                   	push   edi
c001fab9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fabd:	e8 70 fb ff ff       	call   c001f632 <ATA::access(unsigned long long, int, void*, bool)>
c001fac2:	83 c4 20             	add    esp,0x20
c001fac5:	85 c0                	test   eax,eax
c001fac7:	0f 95 c0             	setne  al
c001faca:	0f b6 c0             	movzx  eax,al
c001facd:	83 c4 0c             	add    esp,0xc
c001fad0:	5b                   	pop    ebx
c001fad1:	5e                   	pop    esi
c001fad2:	5f                   	pop    edi
c001fad3:	5d                   	pop    ebp
c001fad4:	c3                   	ret    
c001fad5:	90                   	nop

c001fad6 <ATA::detectCHS()>:
c001fad6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fada:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fae0:	c1 e0 06             	shl    eax,0x6
c001fae3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fae9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001faf3:	c7 44 24 04 49 6b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026b49
c001fafb:	e9 c3 4e ff ff       	jmp    c00149c3 <Krnl::panic(char const*)>

c001fb00 <ATA::open(int, int, void*)>:
c001fb00:	53                   	push   ebx
c001fb01:	83 ec 08             	sub    esp,0x8
c001fb04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb10:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fb16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fb1c:	c1 e0 06             	shl    eax,0x6
c001fb1f:	01 d0                	add    eax,edx
c001fb21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fb28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb3f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb4c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb53:	75 0c                	jne    c001fb61 <ATA::open(int, int, void*)+0x61>
c001fb55:	83 ec 0c             	sub    esp,0xc
c001fb58:	53                   	push   ebx
c001fb59:	e8 78 ff ff ff       	call   c001fad6 <ATA::detectCHS()>
c001fb5e:	83 c4 10             	add    esp,0x10
c001fb61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb6d:	c1 e0 06             	shl    eax,0x6
c001fb70:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb81:	d1 e8                	shr    eax,1
c001fb83:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb89:	6a 04                	push   0x4
c001fb8b:	6a 0c                	push   0xc
c001fb8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb94:	50                   	push   eax
c001fb95:	52                   	push   edx
c001fb96:	e8 17 e9 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb9b:	90                   	nop
c001fb9c:	90                   	nop
c001fb9d:	6a 00                	push   0x0
c001fb9f:	6a 0c                	push   0xc
c001fba1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fba8:	50                   	push   eax
c001fba9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbaf:	e8 fe e8 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbb4:	83 c4 14             	add    esp,0x14
c001fbb7:	53                   	push   ebx
c001fbb8:	e8 1d eb fe ff       	call   c000e6da <PhysicalDisk::startCache()>
c001fbbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbc0:	e8 95 0b ff ff       	call   c001075a <createPartitionsForDisk(PhysicalDisk*)>
c001fbc5:	31 c0                	xor    eax,eax
c001fbc7:	83 c4 18             	add    esp,0x18
c001fbca:	5b                   	pop    ebx
c001fbcb:	c3                   	ret    

c001fbcc <ATAPI::write(unsigned long long, int, void*)>:
c001fbcc:	b8 03 00 00 00       	mov    eax,0x3
c001fbd1:	c3                   	ret    

c001fbd2 <ATAPI::close(int, int, void*)>:
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbdf:	85 c0                	test   eax,eax
c001fbe1:	74 0c                	je     c001fbef <ATAPI::close(int, int, void*)+0x1d>
c001fbe3:	83 ec 0c             	sub    esp,0xc
c001fbe6:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbe8:	50                   	push   eax
c001fbe9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	31 c0                	xor    eax,eax
c001fbf1:	83 c4 0c             	add    esp,0xc
c001fbf4:	c3                   	ret    
c001fbf5:	90                   	nop

c001fbf6 <ATAPI::ATAPI()>:
c001fbf6:	83 ec 0c             	sub    esp,0xc
c001fbf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfd:	83 ec 04             	sub    esp,0x4
c001fc00:	68 00 08 00 00       	push   0x800
c001fc05:	68 35 6e 02 c0       	push   0xc0026e35
c001fc0a:	50                   	push   eax
c001fc0b:	e8 62 ea fe ff       	call   c000e672 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc10:	83 c4 10             	add    esp,0x10
c001fc13:	ba c8 6b 02 c0       	mov    edx,0xc0026bc8
c001fc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1c:	89 10                	mov    DWORD PTR [eax],edx
c001fc1e:	90                   	nop
c001fc1f:	83 c4 0c             	add    esp,0xc
c001fc22:	c3                   	ret    
c001fc23:	90                   	nop

c001fc24 <ATAPI::readyForCommand()>:
c001fc24:	56                   	push   esi
c001fc25:	53                   	push   ebx
c001fc26:	53                   	push   ebx
c001fc27:	31 db                	xor    ebx,ebx
c001fc29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc2d:	51                   	push   ecx
c001fc2e:	6a 0c                	push   0xc
c001fc30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc37:	50                   	push   eax
c001fc38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc3e:	e8 2f e9 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	a8 88                	test   al,0x88
c001fc48:	74 25                	je     c001fc6f <ATAPI::readyForCommand()+0x4b>
c001fc4a:	43                   	inc    ebx
c001fc4b:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fc51:	7e da                	jle    c001fc2d <ATAPI::readyForCommand()+0x9>
c001fc53:	83 ec 0c             	sub    esp,0xc
c001fc56:	68 5e 01 00 00       	push   0x15e
c001fc5b:	e8 c0 8d ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c001fc60:	83 c4 10             	add    esp,0x10
c001fc63:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fc69:	75 c2                	jne    c001fc2d <ATAPI::readyForCommand()+0x9>
c001fc6b:	31 c0                	xor    eax,eax
c001fc6d:	eb 02                	jmp    c001fc71 <ATAPI::readyForCommand()+0x4d>
c001fc6f:	b0 01                	mov    al,0x1
c001fc71:	5a                   	pop    edx
c001fc72:	5b                   	pop    ebx
c001fc73:	5e                   	pop    esi
c001fc74:	c3                   	ret    
c001fc75:	90                   	nop

c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc76:	55                   	push   ebp
c001fc77:	57                   	push   edi
c001fc78:	56                   	push   esi
c001fc79:	53                   	push   ebx
c001fc7a:	83 ec 20             	sub    esp,0x20
c001fc7d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc81:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc85:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc8d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fc91:	6a 01                	push   0x1
c001fc93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc9a:	50                   	push   eax
c001fc9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fca1:	e8 14 ea ff ff       	call   c001e6ba <IDE::enableIRQs(unsigned char, bool)>
c001fca6:	5e                   	pop    esi
c001fca7:	58                   	pop    eax
c001fca8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcaf:	50                   	push   eax
c001fcb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcb6:	e8 d1 e7 ff ff       	call   c001e48c <IDE::prepareInterrupt(unsigned char)>
c001fcbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fcbe:	e8 61 ff ff ff       	call   c001fc24 <ATAPI::readyForCommand()>
c001fcc3:	83 c4 10             	add    esp,0x10
c001fcc6:	84 c0                	test   al,al
c001fcc8:	75 0a                	jne    c001fcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fcca:	bb 01 00 00 00       	mov    ebx,0x1
c001fccf:	e9 57 02 00 00       	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fcd4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fcda:	c1 e0 04             	shl    eax,0x4
c001fcdd:	0f b6 c0             	movzx  eax,al
c001fce0:	50                   	push   eax
c001fce1:	6a 06                	push   0x6
c001fce3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcea:	50                   	push   eax
c001fceb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcf1:	e8 bc e7 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fcf6:	6a 00                	push   0x0
c001fcf8:	6a 01                	push   0x1
c001fcfa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd01:	50                   	push   eax
c001fd02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd08:	e8 a5 e7 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd0d:	83 c4 20             	add    esp,0x20
c001fd10:	0f b6 c3             	movzx  eax,bl
c001fd13:	0f b6 df             	movzx  ebx,bh
c001fd16:	50                   	push   eax
c001fd17:	6a 04                	push   0x4
c001fd19:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd20:	50                   	push   eax
c001fd21:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd27:	e8 86 e7 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd2c:	53                   	push   ebx
c001fd2d:	6a 05                	push   0x5
c001fd2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd36:	50                   	push   eax
c001fd37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd3d:	e8 70 e7 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd42:	83 c4 20             	add    esp,0x20
c001fd45:	68 a0 00 00 00       	push   0xa0
c001fd4a:	6a 07                	push   0x7
c001fd4c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd53:	50                   	push   eax
c001fd54:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd5a:	e8 53 e7 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5f:	83 c4 0c             	add    esp,0xc
c001fd62:	6a 01                	push   0x1
c001fd64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd6b:	50                   	push   eax
c001fd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd72:	e8 d3 f1 ff ff       	call   c001ef4a <IDE::polling(unsigned char, unsigned int)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd80:	84 c0                	test   al,al
c001fd82:	74 23                	je     c001fda7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd84:	0f b6 d8             	movzx  ebx,al
c001fd87:	0f b6 d2             	movzx  edx,dl
c001fd8a:	53                   	push   ebx
c001fd8b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fd92:	50                   	push   eax
c001fd93:	52                   	push   edx
c001fd94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd9a:	e8 fb f0 ff ff       	call   c001ee9a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	e9 84 01 00 00       	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fda7:	0f b6 d2             	movzx  edx,dl
c001fdaa:	53                   	push   ebx
c001fdab:	53                   	push   ebx
c001fdac:	52                   	push   edx
c001fdad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdb3:	e8 e8 e6 ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001fdb8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fdbc:	b9 06 00 00 00       	mov    ecx,0x6
c001fdc1:	89 c2                	mov    edx,eax
c001fdc3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fdc6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fdca:	83 c4 10             	add    esp,0x10
c001fdcd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fdd3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdda:	85 db                	test   ebx,ebx
c001fddc:	0f 84 ec 00 00 00    	je     c001fece <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fde2:	51                   	push   ecx
c001fde3:	51                   	push   ecx
c001fde4:	52                   	push   edx
c001fde5:	50                   	push   eax
c001fde6:	e8 35 e8 ff ff       	call   c001e620 <IDE::waitInterrupt(unsigned char)>
c001fdeb:	83 c4 10             	add    esp,0x10
c001fdee:	84 c0                	test   al,al
c001fdf0:	0f 84 d4 fe ff ff    	je     c001fcca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdf6:	56                   	push   esi
c001fdf7:	56                   	push   esi
c001fdf8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdff:	50                   	push   eax
c001fe00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe06:	e8 81 e6 ff ff       	call   c001e48c <IDE::prepareInterrupt(unsigned char)>
c001fe0b:	83 c4 0c             	add    esp,0xc
c001fe0e:	6a 04                	push   0x4
c001fe10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe17:	50                   	push   eax
c001fe18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe1e:	e8 4f e7 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001fe23:	83 c4 0c             	add    esp,0xc
c001fe26:	89 c6                	mov    esi,eax
c001fe28:	6a 05                	push   0x5
c001fe2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe31:	50                   	push   eax
c001fe32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe38:	e8 35 e7 ff ff       	call   c001e572 <IDE::read(unsigned char, unsigned char)>
c001fe3d:	89 f1                	mov    ecx,esi
c001fe3f:	0f b6 c0             	movzx  eax,al
c001fe42:	0f b6 f1             	movzx  esi,cl
c001fe45:	c1 e0 08             	shl    eax,0x8
c001fe48:	09 c6                	or     esi,eax
c001fe4a:	d1 fe                	sar    esi,1
c001fe4c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe50:	83 c4 10             	add    esp,0x10
c001fe53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe58:	74 41                	je     c001fe9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe5a:	31 c9                	xor    ecx,ecx
c001fe5c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe62:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe69:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe6d:	75 0a                	jne    c001fe79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe6f:	01 c9                	add    ecx,ecx
c001fe71:	01 cd                	add    ebp,ecx
c001fe73:	4b                   	dec    ebx
c001fe74:	e9 54 ff ff ff       	jmp    c001fdcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe79:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe82:	51                   	push   ecx
c001fe83:	51                   	push   ecx
c001fe84:	52                   	push   edx
c001fe85:	50                   	push   eax
c001fe86:	e8 15 e6 ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001fe8b:	89 c2                	mov    edx,eax
c001fe8d:	89 f0                	mov    eax,esi
c001fe8f:	66 ef                	out    dx,ax
c001fe91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	41                   	inc    ecx
c001fe99:	eb c1                	jmp    c001fe5c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fe9b:	31 f6                	xor    esi,esi
c001fe9d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fea3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001feaa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001feae:	75 06                	jne    c001feb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001feb0:	01 f6                	add    esi,esi
c001feb2:	01 f5                	add    ebp,esi
c001feb4:	eb bd                	jmp    c001fe73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001feb6:	51                   	push   ecx
c001feb7:	51                   	push   ecx
c001feb8:	52                   	push   edx
c001feb9:	50                   	push   eax
c001feba:	e8 e1 e5 ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001febf:	89 c2                	mov    edx,eax
c001fec1:	66 ed                	in     ax,dx
c001fec3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fec8:	83 c4 10             	add    esp,0x10
c001fecb:	46                   	inc    esi
c001fecc:	eb cf                	jmp    c001fe9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fece:	51                   	push   ecx
c001fecf:	51                   	push   ecx
c001fed0:	52                   	push   edx
c001fed1:	50                   	push   eax
c001fed2:	e8 49 e7 ff ff       	call   c001e620 <IDE::waitInterrupt(unsigned char)>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	84 c0                	test   al,al
c001fedc:	0f 84 e8 fd ff ff    	je     c001fcca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fee2:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fee7:	52                   	push   edx
c001fee8:	52                   	push   edx
c001fee9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fef0:	50                   	push   eax
c001fef1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fef7:	e8 90 e5 ff ff       	call   c001e48c <IDE::prepareInterrupt(unsigned char)>
c001fefc:	83 c4 10             	add    esp,0x10
c001feff:	50                   	push   eax
c001ff00:	50                   	push   eax
c001ff01:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff08:	50                   	push   eax
c001ff09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff0f:	e8 8c e5 ff ff       	call   c001e4a0 <IDE::getBase(unsigned char)>
c001ff14:	8d 50 07             	lea    edx,[eax+0x7]
c001ff17:	ec                   	in     al,dx
c001ff18:	83 c4 10             	add    esp,0x10
c001ff1b:	a8 88                	test   al,0x88
c001ff1d:	74 0a                	je     c001ff29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ff1f:	4b                   	dec    ebx
c001ff20:	75 dd                	jne    c001feff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ff22:	bb 02 00 00 00       	mov    ebx,0x2
c001ff27:	eb 02                	jmp    c001ff2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff29:	31 db                	xor    ebx,ebx
c001ff2b:	83 c4 1c             	add    esp,0x1c
c001ff2e:	89 d8                	mov    eax,ebx
c001ff30:	5b                   	pop    ebx
c001ff31:	5e                   	pop    esi
c001ff32:	5f                   	pop    edi
c001ff33:	5d                   	pop    ebp
c001ff34:	c3                   	ret    
c001ff35:	90                   	nop

c001ff36 <ATAPI::diskRemoved()>:
c001ff36:	53                   	push   ebx
c001ff37:	83 ec 14             	sub    esp,0x14
c001ff3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff3e:	68 41 6e 02 c0       	push   0xc0026e41
c001ff43:	e8 b3 cd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ff48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ff4f:	c7 04 24 94 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b94
c001ff56:	e8 a0 cd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ff5b:	58                   	pop    eax
c001ff5c:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ff62:	e8 73 05 ff ff       	call   c00104da <LogicalDisk::unmount()>
c001ff67:	c7 44 24 20 a3 6b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ba3
c001ff6f:	83 c4 18             	add    esp,0x18
c001ff72:	5b                   	pop    ebx
c001ff73:	e9 83 cd fe ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c001ff78 <ATAPI::eject()>:
c001ff78:	57                   	push   edi
c001ff79:	b9 03 00 00 00       	mov    ecx,0x3
c001ff7e:	53                   	push   ebx
c001ff7f:	83 ec 14             	sub    esp,0x14
c001ff82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ff86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ff8a:	fc                   	cld    
c001ff8b:	31 c0                	xor    eax,eax
c001ff8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff8f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ff94:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ff99:	50                   	push   eax
c001ff9a:	50                   	push   eax
c001ff9b:	6a 00                	push   0x0
c001ff9d:	6a 00                	push   0x0
c001ff9f:	6a 00                	push   0x0
c001ffa1:	6a 02                	push   0x2
c001ffa3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ffa7:	50                   	push   eax
c001ffa8:	53                   	push   ebx
c001ffa9:	e8 c8 fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ffae:	83 c4 14             	add    esp,0x14
c001ffb1:	53                   	push   ebx
c001ffb2:	e8 7f ff ff ff       	call   c001ff36 <ATAPI::diskRemoved()>
c001ffb7:	83 c4 24             	add    esp,0x24
c001ffba:	31 c0                	xor    eax,eax
c001ffbc:	5b                   	pop    ebx
c001ffbd:	5f                   	pop    edi
c001ffbe:	c3                   	ret    
c001ffbf:	90                   	nop

c001ffc0 <ATAPI::diskInserted()>:
c001ffc0:	83 ec 18             	sub    esp,0x18
c001ffc3:	68 58 6e 02 c0       	push   0xc0026e58
c001ffc8:	e8 2e cd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ffcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffd1:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ffd8:	83 c4 1c             	add    esp,0x1c
c001ffdb:	c3                   	ret    

c001ffdc <ATAPI::detectMedia()>:
c001ffdc:	56                   	push   esi
c001ffdd:	53                   	push   ebx
c001ffde:	83 ec 28             	sub    esp,0x28
c001ffe1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ffe5:	6a 0c                	push   0xc
c001ffe7:	6a 00                	push   0x0
c001ffe9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ffed:	56                   	push   esi
c001ffee:	e8 91 06 fe ff       	call   c0000684 <memset>
c001fff3:	58                   	pop    eax
c001fff4:	5a                   	pop    edx
c001fff5:	6a 00                	push   0x0
c001fff7:	6a 00                	push   0x0
c001fff9:	6a 00                	push   0x0
c001fffb:	6a 00                	push   0x0
c001fffd:	56                   	push   esi
c001fffe:	53                   	push   ebx
c001ffff:	e8 72 fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020004:	83 c4 1c             	add    esp,0x1c
c0020007:	6a 0c                	push   0xc
c0020009:	6a 00                	push   0x0
c002000b:	56                   	push   esi
c002000c:	e8 73 06 fe ff       	call   c0000684 <memset>
c0020011:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020016:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002001b:	59                   	pop    ecx
c002001c:	58                   	pop    eax
c002001d:	6a 01                	push   0x1
c002001f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020023:	50                   	push   eax
c0020024:	6a 00                	push   0x0
c0020026:	6a 12                	push   0x12
c0020028:	56                   	push   esi
c0020029:	53                   	push   ebx
c002002a:	e8 47 fc ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002002f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020033:	83 c4 20             	add    esp,0x20
c0020036:	83 e0 7f             	and    eax,0x7f
c0020039:	3c 70                	cmp    al,0x70
c002003b:	74 15                	je     c0020052 <ATAPI::detectMedia()+0x76>
c002003d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020044:	75 0c                	jne    c0020052 <ATAPI::detectMedia()+0x76>
c0020046:	83 ec 0c             	sub    esp,0xc
c0020049:	53                   	push   ebx
c002004a:	e8 71 ff ff ff       	call   c001ffc0 <ATAPI::diskInserted()>
c002004f:	83 c4 10             	add    esp,0x10
c0020052:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020056:	83 e0 0f             	and    eax,0xf
c0020059:	3c 02                	cmp    al,0x2
c002005b:	75 1b                	jne    c0020078 <ATAPI::detectMedia()+0x9c>
c002005d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020062:	75 2d                	jne    c0020091 <ATAPI::detectMedia()+0xb5>
c0020064:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002006b:	74 24                	je     c0020091 <ATAPI::detectMedia()+0xb5>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	53                   	push   ebx
c0020071:	e8 c0 fe ff ff       	call   c001ff36 <ATAPI::diskRemoved()>
c0020076:	eb 16                	jmp    c002008e <ATAPI::detectMedia()+0xb2>
c0020078:	84 c0                	test   al,al
c002007a:	75 15                	jne    c0020091 <ATAPI::detectMedia()+0xb5>
c002007c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020083:	75 0c                	jne    c0020091 <ATAPI::detectMedia()+0xb5>
c0020085:	83 ec 0c             	sub    esp,0xc
c0020088:	53                   	push   ebx
c0020089:	e8 32 ff ff ff       	call   c001ffc0 <ATAPI::diskInserted()>
c002008e:	83 c4 10             	add    esp,0x10
c0020091:	83 c4 24             	add    esp,0x24
c0020094:	5b                   	pop    ebx
c0020095:	5e                   	pop    esi
c0020096:	c3                   	ret    
c0020097:	90                   	nop

c0020098 <ATAPI::open(int, int, void*)>:
c0020098:	56                   	push   esi
c0020099:	53                   	push   ebx
c002009a:	50                   	push   eax
c002009b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002009f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00200a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200a7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200ad:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200b3:	c1 e0 06             	shl    eax,0x6
c00200b6:	01 d0                	add    eax,edx
c00200b8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00200bf:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00200c5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00200cc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00200d6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00200dc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00200e3:	6a 04                	push   0x4
c00200e5:	6a 0c                	push   0xc
c00200e7:	51                   	push   ecx
c00200e8:	52                   	push   edx
c00200e9:	e8 c4 e3 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200ee:	90                   	nop
c00200ef:	90                   	nop
c00200f0:	6a 00                	push   0x0
c00200f2:	6a 0c                	push   0xc
c00200f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200fb:	50                   	push   eax
c00200fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020102:	e8 ab e3 ff ff       	call   c001e4b2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020107:	83 c4 14             	add    esp,0x14
c002010a:	68 74 01 00 00       	push   0x174
c002010f:	e8 fb 98 fe ff       	call   c0009a0f <malloc>
c0020114:	83 c4 0c             	add    esp,0xc
c0020117:	89 c6                	mov    esi,eax
c0020119:	6a 00                	push   0x0
c002011b:	68 ff ff ff 7f       	push   0x7fffffff
c0020120:	6a 00                	push   0x0
c0020122:	6a 00                	push   0x0
c0020124:	53                   	push   ebx
c0020125:	68 20 6f 02 c0       	push   0xc0026f20
c002012a:	50                   	push   eax
c002012b:	e8 b6 01 ff ff       	call   c00102e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020130:	83 c4 14             	add    esp,0x14
c0020133:	56                   	push   esi
c0020134:	e8 63 02 ff ff       	call   c001039c <LogicalDisk::assignDriveLetter()>
c0020139:	5a                   	pop    edx
c002013a:	0f be c0             	movsx  eax,al
c002013d:	59                   	pop    ecx
c002013e:	50                   	push   eax
c002013f:	68 b1 6b 02 c0       	push   0xc0026bb1
c0020144:	e8 b2 cb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020149:	58                   	pop    eax
c002014a:	5a                   	pop    edx
c002014b:	56                   	push   esi
c002014c:	53                   	push   ebx
c002014d:	e8 e8 e0 fe ff       	call   c000e23a <Device::addChild(Device*)>
c0020152:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020158:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002015b:	e8 7a e5 fe ff       	call   c000e6da <PhysicalDisk::startCache()>
c0020160:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002016a:	e8 6d fe ff ff       	call   c001ffdc <ATAPI::detectMedia()>
c002016f:	83 c4 14             	add    esp,0x14
c0020172:	31 c0                	xor    eax,eax
c0020174:	5b                   	pop    ebx
c0020175:	5e                   	pop    esi
c0020176:	c3                   	ret    
c0020177:	90                   	nop

c0020178 <ATAPI::read(unsigned long long, int, void*)>:
c0020178:	55                   	push   ebp
c0020179:	57                   	push   edi
c002017a:	56                   	push   esi
c002017b:	53                   	push   ebx
c002017c:	83 ec 1c             	sub    esp,0x1c
c002017f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020183:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020187:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002018b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020192:	74 41                	je     c00201d5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020194:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020198:	b9 03 00 00 00       	mov    ecx,0x3
c002019d:	fc                   	cld    
c002019e:	31 c0                	xor    eax,eax
c00201a0:	86 fb                	xchg   bl,bh
c00201a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00201a4:	c1 c3 10             	rol    ebx,0x10
c00201a7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00201ac:	89 e8                	mov    eax,ebp
c00201ae:	86 fb                	xchg   bl,bh
c00201b0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00201b4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00201b8:	50                   	push   eax
c00201b9:	50                   	push   eax
c00201ba:	55                   	push   ebp
c00201bb:	c1 e5 0b             	shl    ebp,0xb
c00201be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00201c2:	6a 00                	push   0x0
c00201c4:	55                   	push   ebp
c00201c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201c9:	50                   	push   eax
c00201ca:	56                   	push   esi
c00201cb:	e8 a6 fa ff ff       	call   c001fc76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00201d0:	83 c4 20             	add    esp,0x20
c00201d3:	eb 1a                	jmp    c00201ef <ATAPI::read(unsigned long long, int, void*)+0x77>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	56                   	push   esi
c00201d9:	e8 fe fd ff ff       	call   c001ffdc <ATAPI::detectMedia()>
c00201de:	83 c4 10             	add    esp,0x10
c00201e1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00201e8:	75 aa                	jne    c0020194 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00201ea:	b8 02 00 00 00       	mov    eax,0x2
c00201ef:	83 c4 1c             	add    esp,0x1c
c00201f2:	5b                   	pop    ebx
c00201f3:	5e                   	pop    esi
c00201f4:	5f                   	pop    edi
c00201f5:	5d                   	pop    ebp
c00201f6:	c3                   	ret    
c00201f7:	90                   	nop

c00201f8 <SATA::close(int, int, void*)>:
c00201f8:	83 ec 0c             	sub    esp,0xc
c00201fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020205:	85 c0                	test   eax,eax
c0020207:	74 0c                	je     c0020215 <SATA::close(int, int, void*)+0x1d>
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	8b 10                	mov    edx,DWORD PTR [eax]
c002020e:	50                   	push   eax
c002020f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020212:	83 c4 10             	add    esp,0x10
c0020215:	31 c0                	xor    eax,eax
c0020217:	83 c4 0c             	add    esp,0xc
c002021a:	c3                   	ret    
c002021b:	90                   	nop

c002021c <SATA::powerSaving(PowerSavingLevel)>:
c002021c:	c3                   	ret    
c002021d:	90                   	nop

c002021e <SATA::open(int, int, void*)>:
c002021e:	56                   	push   esi
c002021f:	53                   	push   ebx
c0020220:	51                   	push   ecx
c0020221:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020225:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002022c:	74 2d                	je     c002025b <SATA::open(int, int, void*)+0x3d>
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	68 f8 6b 02 c0       	push   0xc0026bf8
c0020236:	e8 2e 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002023b:	83 c4 10             	add    esp,0x10
c002023e:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020245:	75 14                	jne    c002025b <SATA::open(int, int, void*)+0x3d>
c0020247:	e4 60                	in     al,0x60
c0020249:	3c 5a                	cmp    al,0x5a
c002024b:	74 04                	je     c0020251 <SATA::open(int, int, void*)+0x33>
c002024d:	3c 1c                	cmp    al,0x1c
c002024f:	75 f6                	jne    c0020247 <SATA::open(int, int, void*)+0x29>
c0020251:	e4 60                	in     al,0x60
c0020253:	3c 5a                	cmp    al,0x5a
c0020255:	74 fa                	je     c0020251 <SATA::open(int, int, void*)+0x33>
c0020257:	3c 1c                	cmp    al,0x1c
c0020259:	74 f6                	je     c0020251 <SATA::open(int, int, void*)+0x33>
c002025b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002025f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020269:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002026f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002027d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020287:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002028d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020294:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002029b:	74 2d                	je     c00202ca <SATA::open(int, int, void*)+0xac>
c002029d:	83 ec 0c             	sub    esp,0xc
c00202a0:	68 05 6c 02 c0       	push   0xc0026c05
c00202a5:	e8 bf 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202aa:	83 c4 10             	add    esp,0x10
c00202ad:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00202b4:	75 14                	jne    c00202ca <SATA::open(int, int, void*)+0xac>
c00202b6:	e4 60                	in     al,0x60
c00202b8:	3c 1c                	cmp    al,0x1c
c00202ba:	74 04                	je     c00202c0 <SATA::open(int, int, void*)+0xa2>
c00202bc:	3c 5a                	cmp    al,0x5a
c00202be:	75 f6                	jne    c00202b6 <SATA::open(int, int, void*)+0x98>
c00202c0:	e4 60                	in     al,0x60
c00202c2:	3c 5a                	cmp    al,0x5a
c00202c4:	74 fa                	je     c00202c0 <SATA::open(int, int, void*)+0xa2>
c00202c6:	3c 1c                	cmp    al,0x1c
c00202c8:	74 f6                	je     c00202c0 <SATA::open(int, int, void*)+0xa2>
c00202ca:	e8 f7 9d fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00202cf:	89 c6                	mov    esi,eax
c00202d1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00202d7:	81 c6 00 10 00 00    	add    esi,0x1000
c00202dd:	e8 e4 9d fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00202e2:	39 c6                	cmp    esi,eax
c00202e4:	74 10                	je     c00202f6 <SATA::open(int, int, void*)+0xd8>
c00202e6:	83 ec 0c             	sub    esp,0xc
c00202e9:	68 12 6c 02 c0       	push   0xc0026c12
c00202ee:	e8 d0 46 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00202fd:	74 2d                	je     c002032c <SATA::open(int, int, void*)+0x10e>
c00202ff:	83 ec 0c             	sub    esp,0xc
c0020302:	68 26 6c 02 c0       	push   0xc0026c26
c0020307:	e8 5d 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002030c:	83 c4 10             	add    esp,0x10
c002030f:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020316:	75 14                	jne    c002032c <SATA::open(int, int, void*)+0x10e>
c0020318:	e4 60                	in     al,0x60
c002031a:	3c 1c                	cmp    al,0x1c
c002031c:	74 04                	je     c0020322 <SATA::open(int, int, void*)+0x104>
c002031e:	3c 5a                	cmp    al,0x5a
c0020320:	75 f6                	jne    c0020318 <SATA::open(int, int, void*)+0xfa>
c0020322:	e4 60                	in     al,0x60
c0020324:	3c 5a                	cmp    al,0x5a
c0020326:	74 fa                	je     c0020322 <SATA::open(int, int, void*)+0x104>
c0020328:	3c 1c                	cmp    al,0x1c
c002032a:	74 f6                	je     c0020322 <SATA::open(int, int, void*)+0x104>
c002032c:	83 ec 0c             	sub    esp,0xc
c002032f:	6a 02                	push   0x2
c0020331:	e8 9f b6 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0020336:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002033c:	6a 03                	push   0x3
c002033e:	50                   	push   eax
c002033f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020345:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c002034b:	e8 2c bd fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020350:	83 c4 20             	add    esp,0x20
c0020353:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002035a:	74 2d                	je     c0020389 <SATA::open(int, int, void*)+0x16b>
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	68 33 6c 02 c0       	push   0xc0026c33
c0020364:	e8 00 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020369:	83 c4 10             	add    esp,0x10
c002036c:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020373:	75 14                	jne    c0020389 <SATA::open(int, int, void*)+0x16b>
c0020375:	e4 60                	in     al,0x60
c0020377:	3c 1c                	cmp    al,0x1c
c0020379:	74 04                	je     c002037f <SATA::open(int, int, void*)+0x161>
c002037b:	3c 5a                	cmp    al,0x5a
c002037d:	75 f6                	jne    c0020375 <SATA::open(int, int, void*)+0x157>
c002037f:	e4 60                	in     al,0x60
c0020381:	3c 5a                	cmp    al,0x5a
c0020383:	74 fa                	je     c002037f <SATA::open(int, int, void*)+0x161>
c0020385:	3c 1c                	cmp    al,0x1c
c0020387:	74 f6                	je     c002037f <SATA::open(int, int, void*)+0x161>
c0020389:	83 ec 0c             	sub    esp,0xc
c002038c:	53                   	push   ebx
c002038d:	e8 48 e3 fe ff       	call   c000e6da <PhysicalDisk::startCache()>
c0020392:	83 c4 10             	add    esp,0x10
c0020395:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002039c:	74 2d                	je     c00203cb <SATA::open(int, int, void*)+0x1ad>
c002039e:	83 ec 0c             	sub    esp,0xc
c00203a1:	68 40 6c 02 c0       	push   0xc0026c40
c00203a6:	e8 be 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00203b5:	75 14                	jne    c00203cb <SATA::open(int, int, void*)+0x1ad>
c00203b7:	e4 60                	in     al,0x60
c00203b9:	3c 1c                	cmp    al,0x1c
c00203bb:	74 04                	je     c00203c1 <SATA::open(int, int, void*)+0x1a3>
c00203bd:	3c 5a                	cmp    al,0x5a
c00203bf:	75 f6                	jne    c00203b7 <SATA::open(int, int, void*)+0x199>
c00203c1:	e4 60                	in     al,0x60
c00203c3:	3c 5a                	cmp    al,0x5a
c00203c5:	74 fa                	je     c00203c1 <SATA::open(int, int, void*)+0x1a3>
c00203c7:	3c 1c                	cmp    al,0x1c
c00203c9:	74 f6                	je     c00203c1 <SATA::open(int, int, void*)+0x1a3>
c00203cb:	83 ec 0c             	sub    esp,0xc
c00203ce:	53                   	push   ebx
c00203cf:	e8 86 03 ff ff       	call   c001075a <createPartitionsForDisk(PhysicalDisk*)>
c00203d4:	83 c4 10             	add    esp,0x10
c00203d7:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00203de:	74 2d                	je     c002040d <SATA::open(int, int, void*)+0x1ef>
c00203e0:	83 ec 0c             	sub    esp,0xc
c00203e3:	68 4d 6c 02 c0       	push   0xc0026c4d
c00203e8:	e8 7c 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203ed:	83 c4 10             	add    esp,0x10
c00203f0:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00203f7:	75 14                	jne    c002040d <SATA::open(int, int, void*)+0x1ef>
c00203f9:	e4 60                	in     al,0x60
c00203fb:	3c 1c                	cmp    al,0x1c
c00203fd:	74 04                	je     c0020403 <SATA::open(int, int, void*)+0x1e5>
c00203ff:	3c 5a                	cmp    al,0x5a
c0020401:	75 f6                	jne    c00203f9 <SATA::open(int, int, void*)+0x1db>
c0020403:	e4 60                	in     al,0x60
c0020405:	3c 5a                	cmp    al,0x5a
c0020407:	74 fa                	je     c0020403 <SATA::open(int, int, void*)+0x1e5>
c0020409:	3c 1c                	cmp    al,0x1c
c002040b:	74 f6                	je     c0020403 <SATA::open(int, int, void*)+0x1e5>
c002040d:	5a                   	pop    edx
c002040e:	31 c0                	xor    eax,eax
c0020410:	5b                   	pop    ebx
c0020411:	5e                   	pop    esi
c0020412:	c3                   	ret    
c0020413:	90                   	nop

c0020414 <SATA::SATA()>:
c0020414:	83 ec 0c             	sub    esp,0xc
c0020417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041b:	83 ec 04             	sub    esp,0x4
c002041e:	68 00 02 00 00       	push   0x200
c0020423:	68 5a 6c 02 c0       	push   0xc0026c5a
c0020428:	50                   	push   eax
c0020429:	e8 44 e2 fe ff       	call   c000e672 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002042e:	83 c4 10             	add    esp,0x10
c0020431:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c0020436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043a:	89 10                	mov    DWORD PTR [eax],edx
c002043c:	90                   	nop
c002043d:	83 c4 0c             	add    esp,0xc
c0020440:	c3                   	ret    
c0020441:	90                   	nop

c0020442 <SATA::access(unsigned long long, int, void*, bool)>:
c0020442:	55                   	push   ebp
c0020443:	57                   	push   edi
c0020444:	56                   	push   esi
c0020445:	53                   	push   ebx
c0020446:	83 ec 2c             	sub    esp,0x2c
c0020449:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002044d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020451:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020455:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002045c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020460:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020464:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002046c:	75 19                	jne    c0020487 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002046e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020473:	7e 41                	jle    c00204b6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020475:	83 ec 0c             	sub    esp,0xc
c0020478:	68 79 6c 02 c0       	push   0xc0026c79
c002047d:	e8 41 45 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0020482:	83 c4 10             	add    esp,0x10
c0020485:	eb 2f                	jmp    c00204b6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020487:	83 ec 0c             	sub    esp,0xc
c002048a:	68 6a 6c 02 c0       	push   0xc0026c6a
c002048f:	e8 d5 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020494:	83 c4 10             	add    esp,0x10
c0020497:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c002049e:	75 ce                	jne    c002046e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204a0:	e4 60                	in     al,0x60
c00204a2:	3c 1c                	cmp    al,0x1c
c00204a4:	74 04                	je     c00204aa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204a6:	3c 5a                	cmp    al,0x5a
c00204a8:	75 f6                	jne    c00204a0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00204aa:	e4 60                	in     al,0x60
c00204ac:	3c 5a                	cmp    al,0x5a
c00204ae:	74 fa                	je     c00204aa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204b0:	3c 1c                	cmp    al,0x1c
c00204b2:	74 f6                	je     c00204aa <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204b4:	eb b8                	jmp    c002046e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204b6:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00204bd:	75 29                	jne    c00204e8 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00204bf:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204c5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00204cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204d1:	8d 75 02             	lea    esi,[ebp+0x2]
c00204d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204d8:	c1 e6 07             	shl    esi,0x7
c00204db:	01 c6                	add    esi,eax
c00204dd:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00204e4:	74 4a                	je     c0020530 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00204e6:	eb 2f                	jmp    c0020517 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00204e8:	83 ec 0c             	sub    esp,0xc
c00204eb:	68 b2 6c 02 c0       	push   0xc0026cb2
c00204f0:	e8 74 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204f5:	83 c4 10             	add    esp,0x10
c00204f8:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00204ff:	75 be                	jne    c00204bf <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020501:	e4 60                	in     al,0x60
c0020503:	3c 1c                	cmp    al,0x1c
c0020505:	74 04                	je     c002050b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020507:	3c 5a                	cmp    al,0x5a
c0020509:	75 f6                	jne    c0020501 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002050b:	e4 60                	in     al,0x60
c002050d:	3c 5a                	cmp    al,0x5a
c002050f:	74 fa                	je     c002050b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020511:	3c 1c                	cmp    al,0x1c
c0020513:	74 f6                	je     c002050b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020515:	eb a8                	jmp    c00204bf <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020517:	83 ec 0c             	sub    esp,0xc
c002051a:	68 c1 6c 02 c0       	push   0xc0026cc1
c002051f:	e8 45 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020524:	83 c4 10             	add    esp,0x10
c0020527:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c002052e:	74 3d                	je     c002056d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020530:	89 e8                	mov    eax,ebp
c0020532:	c1 e0 07             	shl    eax,0x7
c0020535:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020539:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020543:	52                   	push   edx
c0020544:	52                   	push   edx
c0020545:	56                   	push   esi
c0020546:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002054c:	e8 d9 ea ff ff       	call   c001f02a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020551:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	b8 01 00 00 00       	mov    eax,0x1
c002055d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020562:	75 1d                	jne    c0020581 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020564:	e9 c8 04 00 00       	jmp    c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020569:	3c 5a                	cmp    al,0x5a
c002056b:	74 0c                	je     c0020579 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002056d:	e4 60                	in     al,0x60
c002056f:	3c 1c                	cmp    al,0x1c
c0020571:	75 f6                	jne    c0020569 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020573:	eb 04                	jmp    c0020579 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020575:	3c 1c                	cmp    al,0x1c
c0020577:	75 b7                	jne    c0020530 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020579:	e4 60                	in     al,0x60
c002057b:	3c 5a                	cmp    al,0x5a
c002057d:	74 fa                	je     c0020579 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002057f:	eb f4                	jmp    c0020575 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020581:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020588:	74 3a                	je     c00205c4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c002058a:	83 ec 0c             	sub    esp,0xc
c002058d:	68 d0 6c 02 c0       	push   0xc0026cd0
c0020592:	e8 d2 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020597:	83 c4 10             	add    esp,0x10
c002059a:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00205a1:	74 0d                	je     c00205b0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00205a3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205a8:	74 34                	je     c00205de <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00205aa:	eb 1f                	jmp    c00205cb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00205ac:	3c 1c                	cmp    al,0x1c
c00205ae:	74 0c                	je     c00205bc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205b0:	e4 60                	in     al,0x60
c00205b2:	3c 5a                	cmp    al,0x5a
c00205b4:	75 f6                	jne    c00205ac <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00205b6:	eb 04                	jmp    c00205bc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205b8:	3c 1c                	cmp    al,0x1c
c00205ba:	75 e7                	jne    c00205a3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00205bc:	e4 60                	in     al,0x60
c00205be:	3c 5a                	cmp    al,0x5a
c00205c0:	74 fa                	je     c00205bc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205c2:	eb f4                	jmp    c00205b8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00205c4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205c9:	74 1c                	je     c00205e7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205cb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00205cf:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00205d5:	c1 e1 09             	shl    ecx,0x9
c00205d8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00205dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205de:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00205e5:	75 55                	jne    c002063c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c00205e7:	8d 45 02             	lea    eax,[ebp+0x2]
c00205ea:	c1 e0 07             	shl    eax,0x7
c00205ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205f1:	8b 38                	mov    edi,DWORD PTR [eax]
c00205f3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00205f9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c00205ff:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020609:	c1 e0 05             	shl    eax,0x5
c002060c:	01 c7                	add    edi,eax
c002060e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020612:	83 e0 01             	and    eax,0x1
c0020615:	c1 e0 06             	shl    eax,0x6
c0020618:	88 c2                	mov    dl,al
c002061a:	8a 07                	mov    al,BYTE PTR [edi]
c002061c:	83 e0 bf             	and    eax,0xffffffbf
c002061f:	09 d0                	or     eax,edx
c0020621:	88 07                	mov    BYTE PTR [edi],al
c0020623:	8b 07                	mov    eax,DWORD PTR [edi]
c0020625:	25 e0 ff 00 00       	and    eax,0xffe0
c002062a:	0d 05 00 01 00       	or     eax,0x10005
c002062f:	89 07                	mov    DWORD PTR [edi],eax
c0020631:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020638:	74 4d                	je     c0020687 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002063a:	eb 32                	jmp    c002066e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c002063c:	83 ec 0c             	sub    esp,0xc
c002063f:	68 df 6c 02 c0       	push   0xc0026cdf
c0020644:	e8 20 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020649:	83 c4 10             	add    esp,0x10
c002064c:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020653:	75 92                	jne    c00205e7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020655:	e4 60                	in     al,0x60
c0020657:	3c 1c                	cmp    al,0x1c
c0020659:	74 04                	je     c002065f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002065b:	3c 5a                	cmp    al,0x5a
c002065d:	75 f6                	jne    c0020655 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002065f:	e4 60                	in     al,0x60
c0020661:	3c 5a                	cmp    al,0x5a
c0020663:	74 fa                	je     c002065f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020665:	3c 1c                	cmp    al,0x1c
c0020667:	74 f6                	je     c002065f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020669:	e9 79 ff ff ff       	jmp    c00205e7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002066e:	83 ec 0c             	sub    esp,0xc
c0020671:	68 ee 6c 02 c0       	push   0xc0026cee
c0020676:	e8 ee 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002067b:	83 c4 10             	add    esp,0x10
c002067e:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020685:	74 3b                	je     c00206c2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020687:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002068d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020693:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020699:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c002069c:	50                   	push   eax
c002069d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00206a1:	83 c0 08             	add    eax,0x8
c00206a4:	c1 e0 04             	shl    eax,0x4
c00206a7:	50                   	push   eax
c00206a8:	6a 00                	push   0x0
c00206aa:	56                   	push   esi
c00206ab:	e8 d4 ff fd ff       	call   c0000684 <memset>
c00206b0:	83 c4 10             	add    esp,0x10
c00206b3:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00206ba:	74 33                	je     c00206ef <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00206bc:	eb 18                	jmp    c00206d6 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00206be:	3c 1c                	cmp    al,0x1c
c00206c0:	74 0c                	je     c00206ce <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206c2:	e4 60                	in     al,0x60
c00206c4:	3c 5a                	cmp    al,0x5a
c00206c6:	75 f6                	jne    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00206c8:	eb 04                	jmp    c00206ce <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206ca:	3c 1c                	cmp    al,0x1c
c00206cc:	75 b9                	jne    c0020687 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00206ce:	e4 60                	in     al,0x60
c00206d0:	3c 5a                	cmp    al,0x5a
c00206d2:	74 fa                	je     c00206ce <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206d4:	eb f4                	jmp    c00206ca <SATA::access(unsigned long long, int, void*, bool)+0x288>
c00206d6:	83 ec 0c             	sub    esp,0xc
c00206d9:	68 fd 6c 02 c0       	push   0xc0026cfd
c00206de:	e8 86 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00206ed:	74 48                	je     c0020737 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c00206ef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00206f5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00206fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00206ff:	c1 e0 09             	shl    eax,0x9
c0020702:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020706:	48                   	dec    eax
c0020707:	25 ff ff 3f 00       	and    eax,0x3fffff
c002070c:	89 c2                	mov    edx,eax
c002070e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020714:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020719:	09 d0                	or     eax,edx
c002071b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020721:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020728:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002072f:	74 33                	je     c0020764 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020731:	eb 18                	jmp    c002074b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020733:	3c 1c                	cmp    al,0x1c
c0020735:	74 0c                	je     c0020743 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020737:	e4 60                	in     al,0x60
c0020739:	3c 5a                	cmp    al,0x5a
c002073b:	75 f6                	jne    c0020733 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c002073d:	eb 04                	jmp    c0020743 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002073f:	3c 1c                	cmp    al,0x1c
c0020741:	75 ac                	jne    c00206ef <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020743:	e4 60                	in     al,0x60
c0020745:	3c 5a                	cmp    al,0x5a
c0020747:	74 fa                	je     c0020743 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020749:	eb f4                	jmp    c002073f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	68 0c 6d 02 c0       	push   0xc0026d0c
c0020753:	e8 11 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020758:	83 c4 10             	add    esp,0x10
c002075b:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020762:	74 63                	je     c00207c7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020764:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020767:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002076b:	66 25 00 7f          	and    ax,0x7f00
c002076f:	66 0d 27 80          	or     ax,0x8027
c0020773:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020778:	66 89 06             	mov    WORD PTR [esi],ax
c002077b:	19 c0                	sbb    eax,eax
c002077d:	83 e0 f0             	and    eax,0xfffffff0
c0020780:	83 c0 35             	add    eax,0x35
c0020783:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020786:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002078a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002078e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020792:	c1 e8 10             	shr    eax,0x10
c0020795:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002079c:	c1 e8 18             	shr    eax,0x18
c002079f:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00207a6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00207a9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00207ad:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00207b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207b4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00207b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00207bb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00207bf:	74 33                	je     c00207f4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00207c1:	eb 18                	jmp    c00207db <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00207c3:	3c 1c                	cmp    al,0x1c
c00207c5:	74 0c                	je     c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207c7:	e4 60                	in     al,0x60
c00207c9:	3c 5a                	cmp    al,0x5a
c00207cb:	75 f6                	jne    c00207c3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00207cd:	eb 04                	jmp    c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207cf:	3c 1c                	cmp    al,0x1c
c00207d1:	75 91                	jne    c0020764 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00207d3:	e4 60                	in     al,0x60
c00207d5:	3c 5a                	cmp    al,0x5a
c00207d7:	74 fa                	je     c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207d9:	eb f4                	jmp    c00207cf <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00207db:	83 ec 0c             	sub    esp,0xc
c00207de:	68 1b 6d 02 c0       	push   0xc0026d1b
c00207e3:	e8 81 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207e8:	83 c4 10             	add    esp,0x10
c00207eb:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00207f2:	74 11                	je     c0020805 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c00207f4:	89 e8                	mov    eax,ebp
c00207f6:	31 f6                	xor    esi,esi
c00207f8:	c1 e0 07             	shl    eax,0x7
c00207fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207ff:	eb 21                	jmp    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020801:	3c 1c                	cmp    al,0x1c
c0020803:	74 0c                	je     c0020811 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020805:	e4 60                	in     al,0x60
c0020807:	3c 5a                	cmp    al,0x5a
c0020809:	75 f6                	jne    c0020801 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002080b:	eb 04                	jmp    c0020811 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002080d:	3c 1c                	cmp    al,0x1c
c002080f:	75 e3                	jne    c00207f4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020811:	e4 60                	in     al,0x60
c0020813:	3c 5a                	cmp    al,0x5a
c0020815:	74 fa                	je     c0020811 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020817:	eb f4                	jmp    c002080d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020819:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002081f:	74 0c                	je     c002082d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020821:	46                   	inc    esi
c0020822:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020828:	80 e2 88             	and    dl,0x88
c002082b:	75 ec                	jne    c0020819 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002082d:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020834:	74 3d                	je     c0020873 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020836:	83 ec 0c             	sub    esp,0xc
c0020839:	68 2a 6d 02 c0       	push   0xc0026d2a
c002083e:	e8 26 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020843:	8b 15 c0 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280c0
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	f6 c2 80             	test   dl,0x80
c002084f:	74 0e                	je     c002085f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020851:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020857:	75 2f                	jne    c0020888 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020859:	eb 20                	jmp    c002087b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002085b:	3c 1c                	cmp    al,0x1c
c002085d:	74 0c                	je     c002086b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002085f:	e4 60                	in     al,0x60
c0020861:	3c 5a                	cmp    al,0x5a
c0020863:	75 f6                	jne    c002085b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020865:	eb 04                	jmp    c002086b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020867:	3c 1c                	cmp    al,0x1c
c0020869:	75 e6                	jne    c0020851 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002086b:	e4 60                	in     al,0x60
c002086d:	3c 5a                	cmp    al,0x5a
c002086f:	74 fa                	je     c002086b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020871:	eb f4                	jmp    c0020867 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020873:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020879:	75 13                	jne    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002087b:	83 ec 0c             	sub    esp,0xc
c002087e:	68 3a 6d 02 c0       	push   0xc0026d3a
c0020883:	e9 d2 00 00 00       	jmp    c002095a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020888:	0f ba e2 0b          	bt     edx,0xb
c002088c:	72 25                	jb     c00208b3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002088e:	be 01 00 00 00       	mov    esi,0x1
c0020893:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020897:	89 e8                	mov    eax,ebp
c0020899:	d3 e6                	shl    esi,cl
c002089b:	c1 e0 07             	shl    eax,0x7
c002089e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00208a2:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00208a9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00208af:	74 4a                	je     c00208fb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00208b1:	eb 2f                	jmp    c00208e2 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00208b3:	83 ec 0c             	sub    esp,0xc
c00208b6:	68 48 6d 02 c0       	push   0xc0026d48
c00208bb:	e8 a9 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208c0:	83 c4 10             	add    esp,0x10
c00208c3:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00208ca:	75 c2                	jne    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208cc:	e4 60                	in     al,0x60
c00208ce:	3c 5a                	cmp    al,0x5a
c00208d0:	74 04                	je     c00208d6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208d2:	3c 1c                	cmp    al,0x1c
c00208d4:	75 f6                	jne    c00208cc <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00208d6:	e4 60                	in     al,0x60
c00208d8:	3c 5a                	cmp    al,0x5a
c00208da:	74 fa                	je     c00208d6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208dc:	3c 1c                	cmp    al,0x1c
c00208de:	74 f6                	je     c00208d6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208e0:	eb ac                	jmp    c002088e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	68 58 6d 02 c0       	push   0xc0026d58
c00208ea:	e8 7a 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208ef:	83 c4 10             	add    esp,0x10
c00208f2:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00208f9:	74 0f                	je     c002090a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c00208fb:	89 e8                	mov    eax,ebp
c00208fd:	c1 e0 07             	shl    eax,0x7
c0020900:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020904:	eb 24                	jmp    c002092a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020906:	3c 1c                	cmp    al,0x1c
c0020908:	74 0c                	je     c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002090a:	e4 60                	in     al,0x60
c002090c:	3c 5a                	cmp    al,0x5a
c002090e:	75 f6                	jne    c0020906 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020910:	eb 04                	jmp    c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020912:	3c 1c                	cmp    al,0x1c
c0020914:	75 e5                	jne    c00208fb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020916:	e4 60                	in     al,0x60
c0020918:	3c 5a                	cmp    al,0x5a
c002091a:	74 fa                	je     c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002091c:	eb f4                	jmp    c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002091e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020924:	0f ba e2 1e          	bt     edx,0x1e
c0020928:	72 28                	jb     c0020952 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002092a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020930:	85 d6                	test   esi,edx
c0020932:	75 ea                	jne    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020934:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c002093b:	75 2f                	jne    c002096c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c002093d:	89 e8                	mov    eax,ebp
c002093f:	c1 e0 07             	shl    eax,0x7
c0020942:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020946:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002094c:	0f ba e0 1e          	bt     eax,0x1e
c0020950:	73 49                	jae    c002099b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	68 68 6d 02 c0       	push   0xc0026d68
c002095a:	e8 64 40 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	b8 01 00 00 00       	mov    eax,0x1
c0020967:	e9 c5 00 00 00       	jmp    c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002096c:	83 ec 0c             	sub    esp,0xc
c002096f:	68 79 6d 02 c0       	push   0xc0026d79
c0020974:	e8 f0 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020979:	83 c4 10             	add    esp,0x10
c002097c:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020983:	75 b8                	jne    c002093d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020985:	e4 60                	in     al,0x60
c0020987:	3c 5a                	cmp    al,0x5a
c0020989:	74 04                	je     c002098f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c002098b:	3c 1c                	cmp    al,0x1c
c002098d:	75 f6                	jne    c0020985 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002098f:	e4 60                	in     al,0x60
c0020991:	3c 5a                	cmp    al,0x5a
c0020993:	74 fa                	je     c002098f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020995:	3c 1c                	cmp    al,0x1c
c0020997:	74 f6                	je     c002098f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020999:	eb a2                	jmp    c002093d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c002099b:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00209a2:	74 3a                	je     c00209de <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00209a4:	83 ec 0c             	sub    esp,0xc
c00209a7:	68 89 6d 02 c0       	push   0xc0026d89
c00209ac:	e8 b8 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209b1:	83 c4 10             	add    esp,0x10
c00209b4:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c00209bb:	74 0d                	je     c00209ca <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00209bd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209c2:	75 31                	jne    c00209f5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00209c4:	eb 1f                	jmp    c00209e5 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00209c6:	3c 1c                	cmp    al,0x1c
c00209c8:	74 0c                	je     c00209d6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209ca:	e4 60                	in     al,0x60
c00209cc:	3c 5a                	cmp    al,0x5a
c00209ce:	75 f6                	jne    c00209c6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00209d0:	eb 04                	jmp    c00209d6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209d2:	3c 1c                	cmp    al,0x1c
c00209d4:	75 e7                	jne    c00209bd <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00209d6:	e4 60                	in     al,0x60
c00209d8:	3c 5a                	cmp    al,0x5a
c00209da:	74 fa                	je     c00209d6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209dc:	eb f4                	jmp    c00209d2 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00209de:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209e3:	75 19                	jne    c00209fe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00209e5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00209eb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00209ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00209f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209f5:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c00209fc:	75 04                	jne    c0020a02 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c00209fe:	31 c0                	xor    eax,eax
c0020a00:	eb 2f                	jmp    c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020a02:	83 ec 0c             	sub    esp,0xc
c0020a05:	68 99 6d 02 c0       	push   0xc0026d99
c0020a0a:	e8 5a 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020a19:	75 e3                	jne    c00209fe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a1b:	e4 60                	in     al,0x60
c0020a1d:	3c 1c                	cmp    al,0x1c
c0020a1f:	74 04                	je     c0020a25 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a21:	3c 5a                	cmp    al,0x5a
c0020a23:	75 f6                	jne    c0020a1b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020a25:	e4 60                	in     al,0x60
c0020a27:	3c 5a                	cmp    al,0x5a
c0020a29:	74 fa                	je     c0020a25 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a2b:	3c 1c                	cmp    al,0x1c
c0020a2d:	74 f6                	je     c0020a25 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a2f:	eb cd                	jmp    c00209fe <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a31:	83 c4 2c             	add    esp,0x2c
c0020a34:	5b                   	pop    ebx
c0020a35:	5e                   	pop    esi
c0020a36:	5f                   	pop    edi
c0020a37:	5d                   	pop    ebp
c0020a38:	c3                   	ret    
c0020a39:	90                   	nop

c0020a3a <SATA::read(unsigned long long, int, void*)>:
c0020a3a:	55                   	push   ebp
c0020a3b:	57                   	push   edi
c0020a3c:	56                   	push   esi
c0020a3d:	53                   	push   ebx
c0020a3e:	83 ec 0c             	sub    esp,0xc
c0020a41:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020a45:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020a49:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a4d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a51:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020a58:	74 2d                	je     c0020a87 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a5a:	83 ec 0c             	sub    esp,0xc
c0020a5d:	68 a9 6d 02 c0       	push   0xc0026da9
c0020a62:	e8 02 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a67:	83 c4 10             	add    esp,0x10
c0020a6a:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020a71:	75 14                	jne    c0020a87 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a73:	e4 60                	in     al,0x60
c0020a75:	3c 1c                	cmp    al,0x1c
c0020a77:	74 04                	je     c0020a7d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a79:	3c 5a                	cmp    al,0x5a
c0020a7b:	75 f6                	jne    c0020a73 <SATA::read(unsigned long long, int, void*)+0x39>
c0020a7d:	e4 60                	in     al,0x60
c0020a7f:	3c 5a                	cmp    al,0x5a
c0020a81:	74 fa                	je     c0020a7d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a83:	3c 1c                	cmp    al,0x1c
c0020a85:	74 f6                	je     c0020a7d <SATA::read(unsigned long long, int, void*)+0x43>
c0020a87:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020a8a:	b8 04 00 00 00       	mov    eax,0x4
c0020a8f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020a95:	0f 87 96 00 00 00    	ja     c0020b31 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020a9b:	b8 06 00 00 00       	mov    eax,0x6
c0020aa0:	85 ed                	test   ebp,ebp
c0020aa2:	0f 84 89 00 00 00    	je     c0020b31 <SATA::read(unsigned long long, int, void*)+0xf7>
c0020aa8:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020aaf:	74 2d                	je     c0020ade <SATA::read(unsigned long long, int, void*)+0xa4>
c0020ab1:	83 ec 0c             	sub    esp,0xc
c0020ab4:	68 b6 6d 02 c0       	push   0xc0026db6
c0020ab9:	e8 ab 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020abe:	83 c4 10             	add    esp,0x10
c0020ac1:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020ac8:	75 14                	jne    c0020ade <SATA::read(unsigned long long, int, void*)+0xa4>
c0020aca:	e4 60                	in     al,0x60
c0020acc:	3c 5a                	cmp    al,0x5a
c0020ace:	74 04                	je     c0020ad4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ad0:	3c 1c                	cmp    al,0x1c
c0020ad2:	75 f6                	jne    c0020aca <SATA::read(unsigned long long, int, void*)+0x90>
c0020ad4:	e4 60                	in     al,0x60
c0020ad6:	3c 5a                	cmp    al,0x5a
c0020ad8:	74 fa                	je     c0020ad4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ada:	3c 1c                	cmp    al,0x1c
c0020adc:	74 f6                	je     c0020ad4 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ade:	50                   	push   eax
c0020adf:	50                   	push   eax
c0020ae0:	6a 00                	push   0x0
c0020ae2:	55                   	push   ebp
c0020ae3:	53                   	push   ebx
c0020ae4:	57                   	push   edi
c0020ae5:	56                   	push   esi
c0020ae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020aea:	e8 53 f9 ff ff       	call   c0020442 <SATA::access(unsigned long long, int, void*, bool)>
c0020aef:	83 c4 20             	add    esp,0x20
c0020af2:	89 c3                	mov    ebx,eax
c0020af4:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020afb:	74 2d                	je     c0020b2a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020afd:	83 ec 0c             	sub    esp,0xc
c0020b00:	68 c3 6d 02 c0       	push   0xc0026dc3
c0020b05:	e8 5f 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b0a:	83 c4 10             	add    esp,0x10
c0020b0d:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020b14:	75 14                	jne    c0020b2a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b16:	e4 60                	in     al,0x60
c0020b18:	3c 5a                	cmp    al,0x5a
c0020b1a:	74 04                	je     c0020b20 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b1c:	3c 1c                	cmp    al,0x1c
c0020b1e:	75 f6                	jne    c0020b16 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020b20:	e4 60                	in     al,0x60
c0020b22:	3c 5a                	cmp    al,0x5a
c0020b24:	74 fa                	je     c0020b20 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b26:	3c 1c                	cmp    al,0x1c
c0020b28:	74 f6                	je     c0020b20 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b2a:	31 c0                	xor    eax,eax
c0020b2c:	85 db                	test   ebx,ebx
c0020b2e:	0f 95 c0             	setne  al
c0020b31:	83 c4 0c             	add    esp,0xc
c0020b34:	5b                   	pop    ebx
c0020b35:	5e                   	pop    esi
c0020b36:	5f                   	pop    edi
c0020b37:	5d                   	pop    ebp
c0020b38:	c3                   	ret    
c0020b39:	90                   	nop

c0020b3a <SATA::write(unsigned long long, int, void*)>:
c0020b3a:	55                   	push   ebp
c0020b3b:	57                   	push   edi
c0020b3c:	56                   	push   esi
c0020b3d:	53                   	push   ebx
c0020b3e:	83 ec 1c             	sub    esp,0x1c
c0020b41:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020b45:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020b49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020b4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020b51:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020b58:	74 2d                	je     c0020b87 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b5a:	83 ec 0c             	sub    esp,0xc
c0020b5d:	68 d0 6d 02 c0       	push   0xc0026dd0
c0020b62:	e8 02 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b67:	83 c4 10             	add    esp,0x10
c0020b6a:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020b71:	75 14                	jne    c0020b87 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b73:	e4 60                	in     al,0x60
c0020b75:	3c 1c                	cmp    al,0x1c
c0020b77:	74 04                	je     c0020b7d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b79:	3c 5a                	cmp    al,0x5a
c0020b7b:	75 f6                	jne    c0020b73 <SATA::write(unsigned long long, int, void*)+0x39>
c0020b7d:	e4 60                	in     al,0x60
c0020b7f:	3c 5a                	cmp    al,0x5a
c0020b81:	74 fa                	je     c0020b7d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b83:	3c 1c                	cmp    al,0x1c
c0020b85:	74 f6                	je     c0020b7d <SATA::write(unsigned long long, int, void*)+0x43>
c0020b87:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020b8a:	b8 04 00 00 00       	mov    eax,0x4
c0020b8f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020b95:	0f 87 bd 00 00 00    	ja     c0020c58 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020b9b:	b8 06 00 00 00       	mov    eax,0x6
c0020ba0:	85 db                	test   ebx,ebx
c0020ba2:	0f 84 b0 00 00 00    	je     c0020c58 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020ba8:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020baf:	74 2d                	je     c0020bde <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bb1:	83 ec 0c             	sub    esp,0xc
c0020bb4:	68 de 6d 02 c0       	push   0xc0026dde
c0020bb9:	e8 ab 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020bbe:	83 c4 10             	add    esp,0x10
c0020bc1:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020bc8:	75 14                	jne    c0020bde <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bca:	e4 60                	in     al,0x60
c0020bcc:	3c 1c                	cmp    al,0x1c
c0020bce:	74 04                	je     c0020bd4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bd0:	3c 5a                	cmp    al,0x5a
c0020bd2:	75 f6                	jne    c0020bca <SATA::write(unsigned long long, int, void*)+0x90>
c0020bd4:	e4 60                	in     al,0x60
c0020bd6:	3c 5a                	cmp    al,0x5a
c0020bd8:	74 fa                	je     c0020bd4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bda:	3c 1c                	cmp    al,0x1c
c0020bdc:	74 f6                	je     c0020bd4 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bde:	c1 e5 09             	shl    ebp,0x9
c0020be1:	01 dd                	add    ebp,ebx
c0020be3:	89 f0                	mov    eax,esi
c0020be5:	89 fa                	mov    edx,edi
c0020be7:	83 c0 01             	add    eax,0x1
c0020bea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bee:	83 d2 00             	adc    edx,0x0
c0020bf1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020bf5:	50                   	push   eax
c0020bf6:	50                   	push   eax
c0020bf7:	6a 01                	push   0x1
c0020bf9:	53                   	push   ebx
c0020bfa:	81 c3 00 02 00 00    	add    ebx,0x200
c0020c00:	6a 01                	push   0x1
c0020c02:	57                   	push   edi
c0020c03:	56                   	push   esi
c0020c04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020c08:	e8 35 f8 ff ff       	call   c0020442 <SATA::access(unsigned long long, int, void*, bool)>
c0020c0d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020c11:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020c15:	83 c4 20             	add    esp,0x20
c0020c18:	39 dd                	cmp    ebp,ebx
c0020c1a:	75 c7                	jne    c0020be3 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020c1c:	f6 05 c1 80 02 c0 08 	test   BYTE PTR ds:0xc00280c1,0x8
c0020c23:	75 04                	jne    c0020c29 <SATA::write(unsigned long long, int, void*)+0xef>
c0020c25:	31 c0                	xor    eax,eax
c0020c27:	eb 2f                	jmp    c0020c58 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020c29:	83 ec 0c             	sub    esp,0xc
c0020c2c:	68 ec 6d 02 c0       	push   0xc0026dec
c0020c31:	e8 33 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	f6 05 c0 80 02 c0 80 	test   BYTE PTR ds:0xc00280c0,0x80
c0020c40:	75 e3                	jne    c0020c25 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c42:	e4 60                	in     al,0x60
c0020c44:	3c 5a                	cmp    al,0x5a
c0020c46:	74 04                	je     c0020c4c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c48:	3c 1c                	cmp    al,0x1c
c0020c4a:	75 f6                	jne    c0020c42 <SATA::write(unsigned long long, int, void*)+0x108>
c0020c4c:	e4 60                	in     al,0x60
c0020c4e:	3c 5a                	cmp    al,0x5a
c0020c50:	74 fa                	je     c0020c4c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c52:	3c 1c                	cmp    al,0x1c
c0020c54:	74 f6                	je     c0020c4c <SATA::write(unsigned long long, int, void*)+0x112>
c0020c56:	eb cd                	jmp    c0020c25 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c58:	83 c4 1c             	add    esp,0x1c
c0020c5b:	5b                   	pop    ebx
c0020c5c:	5e                   	pop    esi
c0020c5d:	5f                   	pop    edi
c0020c5e:	5d                   	pop    ebp
c0020c5f:	c3                   	ret    

c0020c60 <SATAPI::write(unsigned long long, int, void*)>:
c0020c60:	b8 03 00 00 00       	mov    eax,0x3
c0020c65:	c3                   	ret    

c0020c66 <SATAPI::close(int, int, void*)>:
c0020c66:	83 ec 0c             	sub    esp,0xc
c0020c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c73:	85 c0                	test   eax,eax
c0020c75:	74 0c                	je     c0020c83 <SATAPI::close(int, int, void*)+0x1d>
c0020c77:	83 ec 0c             	sub    esp,0xc
c0020c7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c7c:	50                   	push   eax
c0020c7d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020c80:	83 c4 10             	add    esp,0x10
c0020c83:	31 c0                	xor    eax,eax
c0020c85:	83 c4 0c             	add    esp,0xc
c0020c88:	c3                   	ret    
c0020c89:	90                   	nop

c0020c8a <SATAPI::SATAPI()>:
c0020c8a:	83 ec 0c             	sub    esp,0xc
c0020c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c91:	83 ec 04             	sub    esp,0x4
c0020c94:	68 00 08 00 00       	push   0x800
c0020c99:	68 34 6e 02 c0       	push   0xc0026e34
c0020c9e:	50                   	push   eax
c0020c9f:	e8 ce d9 fe ff       	call   c000e672 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020ca4:	83 c4 10             	add    esp,0x10
c0020ca7:	ba 94 6f 02 c0       	mov    edx,0xc0026f94
c0020cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cb0:	89 10                	mov    DWORD PTR [eax],edx
c0020cb2:	90                   	nop
c0020cb3:	83 c4 0c             	add    esp,0xc
c0020cb6:	c3                   	ret    
c0020cb7:	90                   	nop

c0020cb8 <SATAPI::diskRemoved()>:
c0020cb8:	53                   	push   ebx
c0020cb9:	83 ec 14             	sub    esp,0x14
c0020cbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020cc0:	68 40 6e 02 c0       	push   0xc0026e40
c0020cc5:	e8 31 c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020cca:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020cd1:	c7 04 24 94 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b94
c0020cd8:	e8 1e c0 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020cdd:	58                   	pop    eax
c0020cde:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020ce4:	e8 f1 f7 fe ff       	call   c00104da <LogicalDisk::unmount()>
c0020ce9:	c7 44 24 20 a3 6b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ba3
c0020cf1:	83 c4 18             	add    esp,0x18
c0020cf4:	5b                   	pop    ebx
c0020cf5:	e9 01 c0 fe ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c0020cfa <SATAPI::diskInserted()>:
c0020cfa:	83 ec 18             	sub    esp,0x18
c0020cfd:	68 57 6e 02 c0       	push   0xc0026e57
c0020d02:	e8 f4 bf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d0b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020d12:	83 c4 1c             	add    esp,0x1c
c0020d15:	c3                   	ret    

c0020d16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020d16:	55                   	push   ebp
c0020d17:	57                   	push   edi
c0020d18:	56                   	push   esi
c0020d19:	53                   	push   ebx
c0020d1a:	83 ec 38             	sub    esp,0x38
c0020d1d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020d21:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020d25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020d29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d2d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020d31:	68 6f 6e 02 c0       	push   0xc0026e6f
c0020d36:	e8 c0 bf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020d3b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020d41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d4b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d55:	c1 e0 07             	shl    eax,0x7
c0020d58:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020d5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d60:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d6a:	5a                   	pop    edx
c0020d6b:	59                   	pop    ecx
c0020d6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d70:	8d 58 02             	lea    ebx,[eax+0x2]
c0020d73:	c1 e3 07             	shl    ebx,0x7
c0020d76:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020d7a:	53                   	push   ebx
c0020d7b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d81:	e8 a4 e2 ff ff       	call   c001f02a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d8a:	83 c4 10             	add    esp,0x10
c0020d8d:	b8 01 00 00 00       	mov    eax,0x1
c0020d92:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d97:	0f 84 04 02 00 00    	je     c0020fa1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020d9d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020da3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020da5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020dab:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020db1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020db5:	c1 e1 05             	shl    ecx,0x5
c0020db8:	01 c8                	add    eax,ecx
c0020dba:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020dbc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020dc2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020dc8:	89 08                	mov    DWORD PTR [eax],ecx
c0020dca:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020dd0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020dd6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020ddc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020ddf:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020de2:	50                   	push   eax
c0020de3:	68 90 00 00 00       	push   0x90
c0020de8:	6a 00                	push   0x0
c0020dea:	53                   	push   ebx
c0020deb:	e8 94 f8 fd ff       	call   c0000684 <memset>
c0020df0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0020df9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020dfb:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020e01:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020e05:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020e0b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020e0f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e13:	48                   	dec    eax
c0020e14:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020e19:	89 c1                	mov    ecx,eax
c0020e1b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020e21:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020e26:	09 c8                	or     eax,ecx
c0020e28:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020e2e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020e31:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020e38:	66 25 00 7f          	and    ax,0x7f00
c0020e3c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020e40:	66 0d 27 80          	or     ax,0x8027
c0020e44:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020e48:	66 89 03             	mov    WORD PTR [ebx],ax
c0020e4b:	89 d0                	mov    eax,edx
c0020e4d:	c1 ea 18             	shr    edx,0x18
c0020e50:	c1 e8 10             	shr    eax,0x10
c0020e53:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020e56:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e59:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020e5d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020e60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e64:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020e67:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e6b:	83 c4 10             	add    esp,0x10
c0020e6e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020e72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e76:	31 c0                	xor    eax,eax
c0020e78:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020e7e:	80 e1 88             	and    cl,0x88
c0020e81:	74 0a                	je     c0020e8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020e83:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e88:	74 0a                	je     c0020e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020e8a:	40                   	inc    eax
c0020e8b:	eb eb                	jmp    c0020e78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020e8d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e92:	75 0f                	jne    c0020ea3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020e94:	83 ec 0c             	sub    esp,0xc
c0020e97:	68 3a 6d 02 c0       	push   0xc0026d3a
c0020e9c:	e8 22 3b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0020ea1:	eb 48                	jmp    c0020eeb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020ea3:	be 01 00 00 00       	mov    esi,0x1
c0020ea8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020eac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020eb0:	d3 e6                	shl    esi,cl
c0020eb2:	c1 e7 07             	shl    edi,0x7
c0020eb5:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020ebb:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020ec0:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020ec4:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020eca:	85 c6                	test   esi,eax
c0020ecc:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020ed2:	0f 84 96 00 00 00    	je     c0020f6e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020ed8:	0f ba e0 1e          	bt     eax,0x1e
c0020edc:	73 1a                	jae    c0020ef8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020ede:	83 ec 0c             	sub    esp,0xc
c0020ee1:	68 89 6e 02 c0       	push   0xc0026e89
c0020ee6:	e8 10 be fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020eeb:	83 c4 10             	add    esp,0x10
c0020eee:	b8 01 00 00 00       	mov    eax,0x1
c0020ef3:	e9 a9 00 00 00       	jmp    c0020fa1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020ef8:	83 fb 0d             	cmp    ebx,0xd
c0020efb:	77 12                	ja     c0020f0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020efd:	83 ec 0c             	sub    esp,0xc
c0020f00:	68 c8 00 00 00       	push   0xc8
c0020f05:	e8 16 7b ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c0020f0a:	83 c4 10             	add    esp,0x10
c0020f0d:	eb 2a                	jmp    c0020f39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020f0f:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020f15:	83 f8 0d             	cmp    eax,0xd
c0020f18:	77 0a                	ja     c0020f24 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020f1a:	83 ec 0c             	sub    esp,0xc
c0020f1d:	68 58 02 00 00       	push   0x258
c0020f22:	eb 28                	jmp    c0020f4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020f24:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020f2a:	83 f8 0d             	cmp    eax,0xd
c0020f2d:	77 0a                	ja     c0020f39 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020f2f:	83 ec 0c             	sub    esp,0xc
c0020f32:	68 dc 05 00 00       	push   0x5dc
c0020f37:	eb 13                	jmp    c0020f4c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020f39:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020f3f:	83 f8 0d             	cmp    eax,0xd
c0020f42:	77 10                	ja     c0020f54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020f44:	83 ec 0c             	sub    esp,0xc
c0020f47:	68 c4 09 00 00       	push   0x9c4
c0020f4c:	e8 cf 7a ff ff       	call   c0018a20 <milliTenthSleep(unsigned int)>
c0020f51:	83 c4 10             	add    esp,0x10
c0020f54:	43                   	inc    ebx
c0020f55:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020f5b:	0f 85 63 ff ff ff    	jne    c0020ec4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020f61:	83 ec 0c             	sub    esp,0xc
c0020f64:	68 9c 6e 02 c0       	push   0xc0026e9c
c0020f69:	e9 78 ff ff ff       	jmp    c0020ee6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f6e:	0f ba e0 1e          	bt     eax,0x1e
c0020f72:	73 0d                	jae    c0020f81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020f74:	83 ec 0c             	sub    esp,0xc
c0020f77:	68 b0 6e 02 c0       	push   0xc0026eb0
c0020f7c:	e9 65 ff ff ff       	jmp    c0020ee6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f81:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020f86:	74 17                	je     c0020f9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f88:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020f8d:	74 10                	je     c0020f9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f8f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020f95:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020f99:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020f9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f9f:	31 c0                	xor    eax,eax
c0020fa1:	83 c4 2c             	add    esp,0x2c
c0020fa4:	5b                   	pop    ebx
c0020fa5:	5e                   	pop    esi
c0020fa6:	5f                   	pop    edi
c0020fa7:	5d                   	pop    ebp
c0020fa8:	c3                   	ret    
c0020fa9:	90                   	nop

c0020faa <SATAPI::eject()>:
c0020faa:	57                   	push   edi
c0020fab:	b9 03 00 00 00       	mov    ecx,0x3
c0020fb0:	53                   	push   ebx
c0020fb1:	83 ec 14             	sub    esp,0x14
c0020fb4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020fb8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020fbc:	fc                   	cld    
c0020fbd:	31 c0                	xor    eax,eax
c0020fbf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fc1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020fc6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020fcb:	50                   	push   eax
c0020fcc:	6a 00                	push   0x0
c0020fce:	6a 00                	push   0x0
c0020fd0:	6a 00                	push   0x0
c0020fd2:	6a 00                	push   0x0
c0020fd4:	6a 02                	push   0x2
c0020fd6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fda:	50                   	push   eax
c0020fdb:	53                   	push   ebx
c0020fdc:	e8 35 fd ff ff       	call   c0020d16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fe1:	83 c4 20             	add    esp,0x20
c0020fe4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020feb:	74 0c                	je     c0020ff9 <SATAPI::eject()+0x4f>
c0020fed:	83 ec 0c             	sub    esp,0xc
c0020ff0:	53                   	push   ebx
c0020ff1:	e8 c2 fc ff ff       	call   c0020cb8 <SATAPI::diskRemoved()>
c0020ff6:	83 c4 10             	add    esp,0x10
c0020ff9:	83 c4 14             	add    esp,0x14
c0020ffc:	31 c0                	xor    eax,eax
c0020ffe:	5b                   	pop    ebx
c0020fff:	5f                   	pop    edi
c0021000:	c3                   	ret    
c0021001:	90                   	nop

c0021002 <SATAPI::detectMedia()>:
c0021002:	56                   	push   esi
c0021003:	53                   	push   ebx
c0021004:	83 ec 30             	sub    esp,0x30
c0021007:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002100b:	68 c5 6e 02 c0       	push   0xc0026ec5
c0021010:	e8 e6 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021015:	83 c4 0c             	add    esp,0xc
c0021018:	6a 0c                	push   0xc
c002101a:	6a 00                	push   0x0
c002101c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021020:	56                   	push   esi
c0021021:	e8 5e f6 fd ff       	call   c0000684 <memset>
c0021026:	83 c4 0c             	add    esp,0xc
c0021029:	6a 00                	push   0x0
c002102b:	6a 00                	push   0x0
c002102d:	6a 00                	push   0x0
c002102f:	6a 00                	push   0x0
c0021031:	6a 00                	push   0x0
c0021033:	56                   	push   esi
c0021034:	53                   	push   ebx
c0021035:	e8 dc fc ff ff       	call   c0020d16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002103a:	83 c4 20             	add    esp,0x20
c002103d:	48                   	dec    eax
c002103e:	75 27                	jne    c0021067 <SATAPI::detectMedia()+0x65>
c0021040:	83 ec 0c             	sub    esp,0xc
c0021043:	68 d9 6e 02 c0       	push   0xc0026ed9
c0021048:	e8 ae bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002104d:	83 c4 10             	add    esp,0x10
c0021050:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021057:	74 0e                	je     c0021067 <SATAPI::detectMedia()+0x65>
c0021059:	83 ec 0c             	sub    esp,0xc
c002105c:	53                   	push   ebx
c002105d:	e8 56 fc ff ff       	call   c0020cb8 <SATAPI::diskRemoved()>
c0021062:	e9 d1 00 00 00       	jmp    c0021138 <SATAPI::detectMedia()+0x136>
c0021067:	50                   	push   eax
c0021068:	6a 0c                	push   0xc
c002106a:	6a 00                	push   0x0
c002106c:	56                   	push   esi
c002106d:	e8 12 f6 fd ff       	call   c0000684 <memset>
c0021072:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021077:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002107c:	83 c4 0c             	add    esp,0xc
c002107f:	6a 01                	push   0x1
c0021081:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021085:	50                   	push   eax
c0021086:	6a 00                	push   0x0
c0021088:	6a 00                	push   0x0
c002108a:	6a 12                	push   0x12
c002108c:	56                   	push   esi
c002108d:	53                   	push   ebx
c002108e:	e8 83 fc ff ff       	call   c0020d16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021093:	83 c4 20             	add    esp,0x20
c0021096:	48                   	dec    eax
c0021097:	75 19                	jne    c00210b2 <SATAPI::detectMedia()+0xb0>
c0021099:	83 ec 0c             	sub    esp,0xc
c002109c:	68 e3 6e 02 c0       	push   0xc0026ee3
c00210a1:	e8 55 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00210a6:	83 c4 10             	add    esp,0x10
c00210a9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210b0:	75 a7                	jne    c0021059 <SATAPI::detectMedia()+0x57>
c00210b2:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00210b6:	83 e0 7f             	and    eax,0x7f
c00210b9:	3c 70                	cmp    al,0x70
c00210bb:	74 25                	je     c00210e2 <SATAPI::detectMedia()+0xe0>
c00210bd:	83 ec 0c             	sub    esp,0xc
c00210c0:	68 ed 6e 02 c0       	push   0xc0026eed
c00210c5:	e8 31 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210d4:	75 0c                	jne    c00210e2 <SATAPI::detectMedia()+0xe0>
c00210d6:	83 ec 0c             	sub    esp,0xc
c00210d9:	53                   	push   ebx
c00210da:	e8 1b fc ff ff       	call   c0020cfa <SATAPI::diskInserted()>
c00210df:	83 c4 10             	add    esp,0x10
c00210e2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00210e6:	83 e0 0f             	and    eax,0xf
c00210e9:	3c 02                	cmp    al,0x2
c00210eb:	75 25                	jne    c0021112 <SATAPI::detectMedia()+0x110>
c00210ed:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00210f2:	75 47                	jne    c002113b <SATAPI::detectMedia()+0x139>
c00210f4:	83 ec 0c             	sub    esp,0xc
c00210f7:	68 f6 6e 02 c0       	push   0xc0026ef6
c00210fc:	e8 fa bb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021101:	83 c4 10             	add    esp,0x10
c0021104:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002110b:	74 2e                	je     c002113b <SATAPI::detectMedia()+0x139>
c002110d:	e9 47 ff ff ff       	jmp    c0021059 <SATAPI::detectMedia()+0x57>
c0021112:	84 c0                	test   al,al
c0021114:	75 25                	jne    c002113b <SATAPI::detectMedia()+0x139>
c0021116:	83 ec 0c             	sub    esp,0xc
c0021119:	68 ff 6e 02 c0       	push   0xc0026eff
c002111e:	e8 d8 bb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002112d:	75 0c                	jne    c002113b <SATAPI::detectMedia()+0x139>
c002112f:	83 ec 0c             	sub    esp,0xc
c0021132:	53                   	push   ebx
c0021133:	e8 c2 fb ff ff       	call   c0020cfa <SATAPI::diskInserted()>
c0021138:	83 c4 10             	add    esp,0x10
c002113b:	83 c4 24             	add    esp,0x24
c002113e:	5b                   	pop    ebx
c002113f:	5e                   	pop    esi
c0021140:	c3                   	ret    
c0021141:	90                   	nop

c0021142 <SATAPI::open(int, int, void*)>:
c0021142:	56                   	push   esi
c0021143:	53                   	push   ebx
c0021144:	51                   	push   ecx
c0021145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021149:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002114d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021157:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002115d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002116b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021175:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002117b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021182:	e8 3f 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0021187:	89 c6                	mov    esi,eax
c0021189:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002118f:	81 c6 00 10 00 00    	add    esi,0x1000
c0021195:	e8 2c 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002119a:	39 c6                	cmp    esi,eax
c002119c:	74 10                	je     c00211ae <SATAPI::open(int, int, void*)+0x6c>
c002119e:	83 ec 0c             	sub    esp,0xc
c00211a1:	68 09 6f 02 c0       	push   0xc0026f09
c00211a6:	e8 18 38 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00211ab:	83 c4 10             	add    esp,0x10
c00211ae:	83 ec 0c             	sub    esp,0xc
c00211b1:	6a 02                	push   0x2
c00211b3:	e8 1d a8 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c00211b8:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00211be:	6a 03                	push   0x3
c00211c0:	50                   	push   eax
c00211c1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00211c7:	ff 35 d0 81 02 c0    	push   DWORD PTR ds:0xc00281d0
c00211cd:	e8 aa ae fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c00211d2:	83 c4 14             	add    esp,0x14
c00211d5:	68 74 01 00 00       	push   0x174
c00211da:	e8 30 88 fe ff       	call   c0009a0f <malloc>
c00211df:	83 c4 0c             	add    esp,0xc
c00211e2:	89 c6                	mov    esi,eax
c00211e4:	6a 00                	push   0x0
c00211e6:	68 ff ff ff 7f       	push   0x7fffffff
c00211eb:	6a 00                	push   0x0
c00211ed:	6a 00                	push   0x0
c00211ef:	53                   	push   ebx
c00211f0:	68 1f 6f 02 c0       	push   0xc0026f1f
c00211f5:	50                   	push   eax
c00211f6:	e8 eb f0 fe ff       	call   c00102e6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00211fb:	83 c4 14             	add    esp,0x14
c00211fe:	56                   	push   esi
c00211ff:	e8 98 f1 fe ff       	call   c001039c <LogicalDisk::assignDriveLetter()>
c0021204:	5a                   	pop    edx
c0021205:	0f be c0             	movsx  eax,al
c0021208:	59                   	pop    ecx
c0021209:	50                   	push   eax
c002120a:	68 b1 6b 02 c0       	push   0xc0026bb1
c002120f:	e8 e7 ba fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021214:	58                   	pop    eax
c0021215:	5a                   	pop    edx
c0021216:	56                   	push   esi
c0021217:	53                   	push   ebx
c0021218:	e8 1d d0 fe ff       	call   c000e23a <Device::addChild(Device*)>
c002121d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021223:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021226:	e8 af d4 fe ff       	call   c000e6da <PhysicalDisk::startCache()>
c002122b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021232:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021235:	e8 c8 fd ff ff       	call   c0021002 <SATAPI::detectMedia()>
c002123a:	83 c4 14             	add    esp,0x14
c002123d:	31 c0                	xor    eax,eax
c002123f:	5b                   	pop    ebx
c0021240:	5e                   	pop    esi
c0021241:	c3                   	ret    

c0021242 <SATAPI::read(unsigned long long, int, void*)>:
c0021242:	55                   	push   ebp
c0021243:	57                   	push   edi
c0021244:	56                   	push   esi
c0021245:	53                   	push   ebx
c0021246:	83 ec 28             	sub    esp,0x28
c0021249:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002124d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021251:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021255:	68 2d 6f 02 c0       	push   0xc0026f2d
c002125a:	e8 9c ba fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002125f:	83 c4 10             	add    esp,0x10
c0021262:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021269:	75 2c                	jne    c0021297 <SATAPI::read(unsigned long long, int, void*)+0x55>
c002126b:	83 ec 0c             	sub    esp,0xc
c002126e:	55                   	push   ebp
c002126f:	e8 8e fd ff ff       	call   c0021002 <SATAPI::detectMedia()>
c0021274:	83 c4 10             	add    esp,0x10
c0021277:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002127e:	75 17                	jne    c0021297 <SATAPI::read(unsigned long long, int, void*)+0x55>
c0021280:	83 ec 0c             	sub    esp,0xc
c0021283:	68 3e 6f 02 c0       	push   0xc0026f3e
c0021288:	e8 6e ba fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002128d:	83 c4 10             	add    esp,0x10
c0021290:	b8 02 00 00 00       	mov    eax,0x2
c0021295:	eb 70                	jmp    c0021307 <SATAPI::read(unsigned long long, int, void*)+0xc5>
c0021297:	83 ec 0c             	sub    esp,0xc
c002129a:	68 4f 6f 02 c0       	push   0xc0026f4f
c002129f:	e8 57 ba fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00212a4:	83 c4 10             	add    esp,0x10
c00212a7:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00212ac:	7e 10                	jle    c00212be <SATAPI::read(unsigned long long, int, void*)+0x7c>
c00212ae:	83 ec 0c             	sub    esp,0xc
c00212b1:	68 60 6f 02 c0       	push   0xc0026f60
c00212b6:	e8 08 37 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c00212bb:	83 c4 10             	add    esp,0x10
c00212be:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00212c2:	b9 03 00 00 00       	mov    ecx,0x3
c00212c7:	fc                   	cld    
c00212c8:	31 c0                	xor    eax,eax
c00212ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00212cc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00212d1:	89 d8                	mov    eax,ebx
c00212d3:	86 e0                	xchg   al,ah
c00212d5:	c1 c0 10             	rol    eax,0x10
c00212d8:	86 e0                	xchg   al,ah
c00212da:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00212de:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00212e2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00212e6:	50                   	push   eax
c00212e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00212eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00212ef:	56                   	push   esi
c00212f0:	53                   	push   ebx
c00212f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00212f5:	c1 e0 0b             	shl    eax,0xb
c00212f8:	50                   	push   eax
c00212f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00212fd:	50                   	push   eax
c00212fe:	55                   	push   ebp
c00212ff:	e8 12 fa ff ff       	call   c0020d16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021304:	83 c4 20             	add    esp,0x20
c0021307:	83 c4 1c             	add    esp,0x1c
c002130a:	5b                   	pop    ebx
c002130b:	5e                   	pop    esi
c002130c:	5f                   	pop    edi
c002130d:	5d                   	pop    ebp
c002130e:	c3                   	ret    
c002130f:	90                   	nop

c0021310 <AVX::open(int, int, void*)>:
c0021310:	83 ec 0c             	sub    esp,0xc
c0021313:	e8 30 11 00 00       	call   c0022448 <avxInit>
c0021318:	b8 00 00 00 00       	mov    eax,0x0
c002131d:	83 c4 0c             	add    esp,0xc
c0021320:	c3                   	ret    
c0021321:	90                   	nop
c0021322:	66 90                	xchg   ax,ax

c0021324 <AVX::close(int, int, void*)>:
c0021324:	83 ec 0c             	sub    esp,0xc
c0021327:	e8 1d 11 00 00       	call   c0022449 <avxClose>
c002132c:	b8 00 00 00 00       	mov    eax,0x0
c0021331:	83 c4 0c             	add    esp,0xc
c0021334:	c3                   	ret    
c0021335:	90                   	nop
c0021336:	66 90                	xchg   ax,ax

c0021338 <AVX::available()>:
c0021338:	83 ec 0c             	sub    esp,0xc
c002133b:	e8 00 11 00 00       	call   c0022440 <avxDetect>
c0021340:	85 c0                	test   eax,eax
c0021342:	0f 95 c0             	setne  al
c0021345:	83 c4 0c             	add    esp,0xc
c0021348:	c3                   	ret    
c0021349:	90                   	nop
c002134a:	66 90                	xchg   ax,ax

c002134c <AVX::save(void*)>:
c002134c:	83 ec 0c             	sub    esp,0xc
c002134f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021353:	83 ec 0c             	sub    esp,0xc
c0021356:	50                   	push   eax
c0021357:	e8 ea 10 00 00       	call   c0022446 <avxSave>
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	90                   	nop
c0021360:	83 c4 0c             	add    esp,0xc
c0021363:	c3                   	ret    

c0021364 <AVX::load(void*)>:
c0021364:	83 ec 0c             	sub    esp,0xc
c0021367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002136b:	83 ec 0c             	sub    esp,0xc
c002136e:	50                   	push   eax
c002136f:	e8 d3 10 00 00       	call   c0022447 <avxLoad>
c0021374:	83 c4 10             	add    esp,0x10
c0021377:	90                   	nop
c0021378:	83 c4 0c             	add    esp,0xc
c002137b:	c3                   	ret    

c002137c <AVX::AVX()>:
c002137c:	83 ec 0c             	sub    esp,0xc
c002137f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021383:	83 ec 08             	sub    esp,0x8
c0021386:	68 c4 6f 02 c0       	push   0xc0026fc4
c002138b:	50                   	push   eax
c002138c:	e8 bf d3 fe ff       	call   c000e750 <FPU::FPU(char const*)>
c0021391:	83 c4 10             	add    esp,0x10
c0021394:	ba d4 6f 02 c0       	mov    edx,0xc0026fd4
c0021399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002139d:	89 10                	mov    DWORD PTR [eax],edx
c002139f:	90                   	nop
c00213a0:	83 c4 0c             	add    esp,0xc
c00213a3:	c3                   	ret    

c00213a4 <MMX::available()>:
c00213a4:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00213a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00213af:	83 e0 20             	and    eax,0x20
c00213b2:	84 c0                	test   al,al
c00213b4:	0f 95 c0             	setne  al
c00213b7:	c3                   	ret    

c00213b8 <MMX::open(int, int, void*)>:
c00213b8:	83 ec 0c             	sub    esp,0xc
c00213bb:	e8 12 11 00 00       	call   c00224d2 <x87Init>
c00213c0:	b8 00 00 00 00       	mov    eax,0x0
c00213c5:	83 c4 0c             	add    esp,0xc
c00213c8:	c3                   	ret    
c00213c9:	90                   	nop
c00213ca:	66 90                	xchg   ax,ax

c00213cc <MMX::close(int, int, void*)>:
c00213cc:	83 ec 0c             	sub    esp,0xc
c00213cf:	e8 18 11 00 00       	call   c00224ec <x87Close>
c00213d4:	b8 00 00 00 00       	mov    eax,0x0
c00213d9:	83 c4 0c             	add    esp,0xc
c00213dc:	c3                   	ret    
c00213dd:	90                   	nop
c00213de:	66 90                	xchg   ax,ax

c00213e0 <MMX::save(void*)>:
c00213e0:	83 ec 0c             	sub    esp,0xc
c00213e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213e7:	83 ec 0c             	sub    esp,0xc
c00213ea:	50                   	push   eax
c00213eb:	e8 d1 10 00 00       	call   c00224c1 <x87Save>
c00213f0:	83 c4 10             	add    esp,0x10
c00213f3:	90                   	nop
c00213f4:	83 c4 0c             	add    esp,0xc
c00213f7:	c3                   	ret    

c00213f8 <MMX::load(void*)>:
c00213f8:	83 ec 0c             	sub    esp,0xc
c00213fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213ff:	83 ec 0c             	sub    esp,0xc
c0021402:	50                   	push   eax
c0021403:	e8 c2 10 00 00       	call   c00224ca <x87Load>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	90                   	nop
c002140c:	83 c4 0c             	add    esp,0xc
c002140f:	c3                   	ret    

c0021410 <MMX::MMX()>:
c0021410:	83 ec 0c             	sub    esp,0xc
c0021413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021417:	83 ec 08             	sub    esp,0x8
c002141a:	68 04 70 02 c0       	push   0xc0027004
c002141f:	50                   	push   eax
c0021420:	e8 2b d3 fe ff       	call   c000e750 <FPU::FPU(char const*)>
c0021425:	83 c4 10             	add    esp,0x10
c0021428:	ba 14 70 02 c0       	mov    edx,0xc0027014
c002142d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021431:	89 10                	mov    DWORD PTR [eax],edx
c0021433:	90                   	nop
c0021434:	83 c4 0c             	add    esp,0xc
c0021437:	c3                   	ret    

c0021438 <SSE::open(int, int, void*)>:
c0021438:	83 ec 0c             	sub    esp,0xc
c002143b:	e8 44 10 00 00       	call   c0022484 <sseInit>
c0021440:	b8 00 00 00 00       	mov    eax,0x0
c0021445:	83 c4 0c             	add    esp,0xc
c0021448:	c3                   	ret    
c0021449:	90                   	nop
c002144a:	66 90                	xchg   ax,ax

c002144c <SSE::close(int, int, void*)>:
c002144c:	83 ec 0c             	sub    esp,0xc
c002144f:	e8 40 10 00 00       	call   c0022494 <sseClose>
c0021454:	b8 00 00 00 00       	mov    eax,0x0
c0021459:	83 c4 0c             	add    esp,0xc
c002145c:	c3                   	ret    
c002145d:	90                   	nop
c002145e:	66 90                	xchg   ax,ax

c0021460 <SSE::available()>:
c0021460:	83 ec 1c             	sub    esp,0x1c
c0021463:	e8 f8 0f 00 00       	call   c0022460 <absolutelyNoChanceInHell>
c0021468:	85 c0                	test   eax,eax
c002146a:	0f 95 c0             	setne  al
c002146d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021471:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021475:	83 c4 1c             	add    esp,0x1c
c0021478:	c3                   	ret    
c0021479:	90                   	nop
c002147a:	66 90                	xchg   ax,ax

c002147c <SSE::save(void*)>:
c002147c:	83 ec 0c             	sub    esp,0xc
c002147f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021483:	83 ec 0c             	sub    esp,0xc
c0021486:	50                   	push   eax
c0021487:	e8 ec 0f 00 00       	call   c0022478 <sseSave>
c002148c:	83 c4 10             	add    esp,0x10
c002148f:	90                   	nop
c0021490:	83 c4 0c             	add    esp,0xc
c0021493:	c3                   	ret    

c0021494 <SSE::load(void*)>:
c0021494:	83 ec 0c             	sub    esp,0xc
c0021497:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002149b:	83 ec 0c             	sub    esp,0xc
c002149e:	50                   	push   eax
c002149f:	e8 da 0f 00 00       	call   c002247e <sseLoad>
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	90                   	nop
c00214a8:	83 c4 0c             	add    esp,0xc
c00214ab:	c3                   	ret    

c00214ac <SSE::SSE()>:
c00214ac:	83 ec 0c             	sub    esp,0xc
c00214af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b3:	83 ec 08             	sub    esp,0x8
c00214b6:	68 44 70 02 c0       	push   0xc0027044
c00214bb:	50                   	push   eax
c00214bc:	e8 8f d2 fe ff       	call   c000e750 <FPU::FPU(char const*)>
c00214c1:	83 c4 10             	add    esp,0x10
c00214c4:	ba 54 70 02 c0       	mov    edx,0xc0027054
c00214c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214cd:	89 10                	mov    DWORD PTR [eax],edx
c00214cf:	90                   	nop
c00214d0:	83 c4 0c             	add    esp,0xc
c00214d3:	c3                   	ret    

c00214d4 <x87::open(int, int, void*)>:
c00214d4:	83 ec 0c             	sub    esp,0xc
c00214d7:	e8 f6 0f 00 00       	call   c00224d2 <x87Init>
c00214dc:	b8 00 00 00 00       	mov    eax,0x0
c00214e1:	83 c4 0c             	add    esp,0xc
c00214e4:	c3                   	ret    
c00214e5:	90                   	nop
c00214e6:	66 90                	xchg   ax,ax

c00214e8 <x87::close(int, int, void*)>:
c00214e8:	83 ec 0c             	sub    esp,0xc
c00214eb:	e8 fc 0f 00 00       	call   c00224ec <x87Close>
c00214f0:	b8 00 00 00 00       	mov    eax,0x0
c00214f5:	83 c4 0c             	add    esp,0xc
c00214f8:	c3                   	ret    
c00214f9:	90                   	nop
c00214fa:	66 90                	xchg   ax,ax

c00214fc <x87::available()>:
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	e8 a2 0f 00 00       	call   c00224a6 <x87Detect>
c0021504:	85 c0                	test   eax,eax
c0021506:	0f 95 c0             	setne  al
c0021509:	83 c4 0c             	add    esp,0xc
c002150c:	c3                   	ret    
c002150d:	90                   	nop
c002150e:	66 90                	xchg   ax,ax

c0021510 <x87::save(void*)>:
c0021510:	83 ec 0c             	sub    esp,0xc
c0021513:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021517:	83 ec 0c             	sub    esp,0xc
c002151a:	50                   	push   eax
c002151b:	e8 a1 0f 00 00       	call   c00224c1 <x87Save>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	90                   	nop
c0021524:	83 c4 0c             	add    esp,0xc
c0021527:	c3                   	ret    

c0021528 <x87::load(void*)>:
c0021528:	83 ec 0c             	sub    esp,0xc
c002152b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002152f:	83 ec 0c             	sub    esp,0xc
c0021532:	50                   	push   eax
c0021533:	e8 92 0f 00 00       	call   c00224ca <x87Load>
c0021538:	83 c4 10             	add    esp,0x10
c002153b:	90                   	nop
c002153c:	83 c4 0c             	add    esp,0xc
c002153f:	c3                   	ret    

c0021540 <x87::x87()>:
c0021540:	83 ec 0c             	sub    esp,0xc
c0021543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021547:	83 ec 08             	sub    esp,0x8
c002154a:	68 84 70 02 c0       	push   0xc0027084
c002154f:	50                   	push   eax
c0021550:	e8 fb d1 fe ff       	call   c000e750 <FPU::FPU(char const*)>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	ba 94 70 02 c0       	mov    edx,0xc0027094
c002155d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021561:	89 10                	mov    DWORD PTR [eax],edx
c0021563:	90                   	nop
c0021564:	83 c4 0c             	add    esp,0xc
c0021567:	c3                   	ret    

c0021568 <APIC::disable()>:
c0021568:	90                   	nop
c0021569:	c3                   	ret    

c002156a <APIC::close(int, int, void*)>:
c002156a:	55                   	push   ebp
c002156b:	89 e5                	mov    ebp,esp
c002156d:	83 ec 08             	sub    esp,0x8
c0021570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021573:	8b 00                	mov    eax,DWORD PTR [eax]
c0021575:	83 c0 3c             	add    eax,0x3c
c0021578:	8b 00                	mov    eax,DWORD PTR [eax]
c002157a:	83 ec 0c             	sub    esp,0xc
c002157d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021580:	ff d0                	call   eax
c0021582:	83 c4 10             	add    esp,0x10
c0021585:	b8 00 00 00 00       	mov    eax,0x0
c002158a:	c9                   	leave  
c002158b:	c3                   	ret    

c002158c <IOAPIC::close(int, int, void*)>:
c002158c:	b8 00 00 00 00       	mov    eax,0x0
c0021591:	c3                   	ret    

c0021592 <APIC::io_wait()>:
c0021592:	eb 00                	jmp    c0021594 <APIC::io_wait()+0x2>
c0021594:	eb 00                	jmp    c0021596 <APIC::io_wait()+0x4>
c0021596:	90                   	nop
c0021597:	c3                   	ret    

c0021598 <APIC::getBase()>:
c0021598:	55                   	push   ebp
c0021599:	89 e5                	mov    ebp,esp
c002159b:	83 ec 18             	sub    esp,0x18
c002159e:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00215a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00215a9:	83 e0 08             	and    eax,0x8
c00215ac:	84 c0                	test   al,al
c00215ae:	75 07                	jne    c00215b7 <APIC::getBase()+0x1f>
c00215b0:	b8 00 00 00 00       	mov    eax,0x0
c00215b5:	eb 21                	jmp    c00215d8 <APIC::getBase()+0x40>
c00215b7:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00215bc:	83 ec 08             	sub    esp,0x8
c00215bf:	6a 1b                	push   0x1b
c00215c1:	50                   	push   eax
c00215c2:	e8 63 79 fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00215cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00215d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00215d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00215d8:	c9                   	leave  
c00215d9:	c3                   	ret    

c00215da <APIC::eoi(unsigned char)>:
c00215da:	55                   	push   ebp
c00215db:	89 e5                	mov    ebp,esp
c00215dd:	83 ec 28             	sub    esp,0x28
c00215e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00215e6:	83 ec 0c             	sub    esp,0xc
c00215e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215ec:	e8 a7 ff ff ff       	call   c0021598 <APIC::getBase()>
c00215f1:	83 c4 10             	add    esp,0x10
c00215f4:	05 b0 00 00 00       	add    eax,0xb0
c00215f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00215fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00215ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021605:	90                   	nop
c0021606:	c9                   	leave  
c0021607:	c3                   	ret    

c0021608 <APIC::open(int, int, void*)>:
c0021608:	55                   	push   ebp
c0021609:	89 e5                	mov    ebp,esp
c002160b:	57                   	push   edi
c002160c:	56                   	push   esi
c002160d:	53                   	push   ebx
c002160e:	83 ec 2c             	sub    esp,0x2c
c0021611:	83 ec 0c             	sub    esp,0xc
c0021614:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021617:	e8 7c ff ff ff       	call   c0021598 <APIC::getBase()>
c002161c:	83 c4 10             	add    esp,0x10
c002161f:	89 c2                	mov    edx,eax
c0021621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021624:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002162a:	0f b6 f8             	movzx  edi,al
c002162d:	89 d0                	mov    eax,edx
c002162f:	ba 00 00 00 00       	mov    edx,0x0
c0021634:	89 c1                	mov    ecx,eax
c0021636:	80 e5 ff             	and    ch,0xff
c0021639:	89 cb                	mov    ebx,ecx
c002163b:	0f b6 f2             	movzx  esi,dl
c002163e:	89 d8                	mov    eax,ebx
c0021640:	89 f2                	mov    edx,esi
c0021642:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021645:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021648:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002164c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021650:	83 e0 00             	and    eax,0x0
c0021653:	09 d0                	or     eax,edx
c0021655:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002165c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021662:	8d 50 01             	lea    edx,[eax+0x1]
c0021665:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021668:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002166e:	0f b6 d0             	movzx  edx,al
c0021671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021674:	83 c2 08             	add    edx,0x8
c0021677:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002167b:	0f b6 c9             	movzx  ecx,cl
c002167e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021684:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002168e:	e8 05 ff ff ff       	call   c0021598 <APIC::getBase()>
c0021693:	83 c4 10             	add    esp,0x10
c0021696:	05 f0 00 00 00       	add    eax,0xf0
c002169b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002169e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00216a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00216a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00216a6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00216ad:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00216b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00216b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00216ba:	89 10                	mov    DWORD PTR [eax],edx
c00216bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00216c3:	a1 10 89 02 c0       	mov    eax,ds:0xc0028910
c00216c8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00216cb:	7d 7c                	jge    c0021749 <APIC::open(int, int, void*)+0x141>
c00216cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216d0:	8b 04 85 20 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76e0]
c00216d7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00216da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216dd:	8b 04 85 20 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76e0]
c00216e4:	c1 e8 08             	shr    eax,0x8
c00216e7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00216eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216ee:	8b 04 85 20 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76e0]
c00216f5:	c1 e8 18             	shr    eax,0x18
c00216f8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00216fb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00216ff:	75 40                	jne    c0021741 <APIC::open(int, int, void*)+0x139>
c0021701:	83 ec 0c             	sub    esp,0xc
c0021704:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021707:	e8 8c fe ff ff       	call   c0021598 <APIC::getBase()>
c002170c:	83 c4 10             	add    esp,0x10
c002170f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021713:	75 07                	jne    c002171c <APIC::open(int, int, void*)+0x114>
c0021715:	ba 60 03 00 00       	mov    edx,0x360
c002171a:	eb 05                	jmp    c0021721 <APIC::open(int, int, void*)+0x119>
c002171c:	ba 50 03 00 00       	mov    edx,0x350
c0021721:	01 d0                	add    eax,edx
c0021723:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021726:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021729:	8b 00                	mov    eax,DWORD PTR [eax]
c002172b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002172e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021735:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021739:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002173c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002173f:	89 10                	mov    DWORD PTR [eax],edx
c0021741:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021744:	e9 7a ff ff ff       	jmp    c00216c3 <APIC::open(int, int, void*)+0xbb>
c0021749:	b8 00 00 00 00       	mov    eax,0x0
c002174e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021751:	5b                   	pop    ebx
c0021752:	5e                   	pop    esi
c0021753:	5f                   	pop    edi
c0021754:	5d                   	pop    ebp
c0021755:	c3                   	ret    

c0021756 <IOAPIC::IOAPIC()>:
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175d:	83 ec 08             	sub    esp,0x8
c0021760:	68 c4 70 02 c0       	push   0xc00270c4
c0021765:	50                   	push   eax
c0021766:	e8 d3 cc fe ff       	call   c000e43e <Device::Device(char const*)>
c002176b:	83 c4 10             	add    esp,0x10
c002176e:	ba ec 71 02 c0       	mov    edx,0xc00271ec
c0021773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021777:	89 10                	mov    DWORD PTR [eax],edx
c0021779:	90                   	nop
c002177a:	83 c4 0c             	add    esp,0xc
c002177d:	c3                   	ret    

c002177e <APIC::APIC()>:
c002177e:	53                   	push   ebx
c002177f:	83 ec 18             	sub    esp,0x18
c0021782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021786:	83 ec 08             	sub    esp,0x8
c0021789:	68 cc 70 02 c0       	push   0xc00270cc
c002178e:	50                   	push   eax
c002178f:	e8 22 d4 fe ff       	call   c000ebb6 <InterruptController::InterruptController(char const*)>
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	ba a4 71 02 c0       	mov    edx,0xc00271a4
c002179c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217a0:	89 10                	mov    DWORD PTR [eax],edx
c00217a2:	a0 40 a0 02 c0       	mov    al,ds:0xc002a040
c00217a7:	83 f0 01             	xor    eax,0x1
c00217aa:	84 c0                	test   al,al
c00217ac:	0f 84 a1 00 00 00    	je     c0021853 <APIC::APIC()+0xd5>
c00217b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00217b7:	a0 c0 89 02 c0       	mov    al,ds:0xc00289c0
c00217bc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00217c0:	0f 83 86 00 00 00    	jae    c002184c <APIC::APIC()+0xce>
c00217c6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00217ce:	83 ec 0c             	sub    esp,0xc
c00217d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217d5:	e8 35 82 fe ff       	call   c0009a0f <malloc>
c00217da:	83 c4 10             	add    esp,0x10
c00217dd:	89 c3                	mov    ebx,eax
c00217df:	83 ec 0c             	sub    esp,0xc
c00217e2:	53                   	push   ebx
c00217e3:	e8 6e ff ff ff       	call   c0021756 <IOAPIC::IOAPIC()>
c00217e8:	83 c4 10             	add    esp,0x10
c00217eb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00217ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00217f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00217f8:	89 14 85 20 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fe0],edx
c00217ff:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c0021804:	40                   	inc    eax
c0021805:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c002180a:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c002180f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021815:	83 ec 08             	sub    esp,0x8
c0021818:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002181c:	50                   	push   eax
c002181d:	e8 18 ca fe ff       	call   c000e23a <Device::addChild(Device*)>
c0021822:	83 c4 10             	add    esp,0x10
c0021825:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021829:	8b 00                	mov    eax,DWORD PTR [eax]
c002182b:	83 c0 08             	add    eax,0x8
c002182e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021830:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021835:	6a 00                	push   0x0
c0021837:	6a 00                	push   0x0
c0021839:	52                   	push   edx
c002183a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002183e:	ff d0                	call   eax
c0021840:	83 c4 10             	add    esp,0x10
c0021843:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021847:	e9 6b ff ff ff       	jmp    c00217b7 <APIC::APIC()+0x39>
c002184c:	c6 05 40 a0 02 c0 01 	mov    BYTE PTR ds:0xc002a040,0x1
c0021853:	90                   	nop
c0021854:	83 c4 18             	add    esp,0x18
c0021857:	5b                   	pop    ebx
c0021858:	c3                   	ret    
c0021859:	90                   	nop

c002185a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002185a:	55                   	push   ebp
c002185b:	89 e5                	mov    ebp,esp
c002185d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021860:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021866:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021869:	72 1d                	jb     c0021888 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002186b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021877:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002187d:	01 d0                	add    eax,edx
c002187f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021882:	73 04                	jae    c0021888 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021884:	b0 01                	mov    al,0x1
c0021886:	eb 02                	jmp    c002188a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021888:	b0 00                	mov    al,0x0
c002188a:	5d                   	pop    ebp
c002188b:	c3                   	ret    

c002188c <IOAPIC::read(int)>:
c002188c:	55                   	push   ebp
c002188d:	89 e5                	mov    ebp,esp
c002188f:	83 ec 10             	sub    esp,0x10
c0021892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002189b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002189e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218a1:	0f b6 d0             	movzx  edx,al
c00218a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00218a7:	89 10                	mov    DWORD PTR [eax],edx
c00218a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00218ac:	83 c0 10             	add    eax,0x10
c00218af:	8b 00                	mov    eax,DWORD PTR [eax]
c00218b1:	c9                   	leave  
c00218b2:	c3                   	ret    
c00218b3:	90                   	nop

c00218b4 <IOAPIC::open(int, int, void*)>:
c00218b4:	55                   	push   ebp
c00218b5:	89 e5                	mov    ebp,esp
c00218b7:	57                   	push   edi
c00218b8:	56                   	push   esi
c00218b9:	53                   	push   ebx
c00218ba:	83 ec 0c             	sub    esp,0xc
c00218bd:	83 ec 0c             	sub    esp,0xc
c00218c0:	68 f7 70 02 c0       	push   0xc00270f7
c00218c5:	e8 31 b4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00218ca:	83 c4 10             	add    esp,0x10
c00218cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00218d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00218d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00218e2:	8b 14 85 00 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7600]
c00218e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00218f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00218fb:	8b 14 85 80 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7580]
c0021902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021905:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002190b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002190e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021917:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002191d:	0f b6 f8             	movzx  edi,al
c0021920:	89 d0                	mov    eax,edx
c0021922:	ba 00 00 00 00       	mov    edx,0x0
c0021927:	89 c1                	mov    ecx,eax
c0021929:	80 e5 ff             	and    ch,0xff
c002192c:	89 cb                	mov    ebx,ecx
c002192e:	0f b6 f2             	movzx  esi,dl
c0021931:	89 d8                	mov    eax,ebx
c0021933:	89 f2                	mov    edx,esi
c0021935:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021938:	8d 5f 08             	lea    ebx,[edi+0x8]
c002193b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002193f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021943:	83 e0 00             	and    eax,0x0
c0021946:	09 d0                	or     eax,edx
c0021948:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002194c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002194f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021955:	8d 50 01             	lea    edx,[eax+0x1]
c0021958:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002195b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021961:	0f b6 d0             	movzx  edx,al
c0021964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021967:	83 c2 08             	add    edx,0x8
c002196a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002196e:	0f b6 c9             	movzx  ecx,cl
c0021971:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021977:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002197b:	83 ec 08             	sub    esp,0x8
c002197e:	6a 01                	push   0x1
c0021980:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021983:	e8 04 ff ff ff       	call   c002188c <IOAPIC::read(int)>
c0021988:	83 c4 10             	add    esp,0x10
c002198b:	c1 f8 10             	sar    eax,0x10
c002198e:	0f b6 c0             	movzx  eax,al
c0021991:	8d 50 01             	lea    edx,[eax+0x1]
c0021994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021997:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002199d:	b8 00 00 00 00       	mov    eax,0x0
c00219a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00219a5:	5b                   	pop    ebx
c00219a6:	5e                   	pop    esi
c00219a7:	5f                   	pop    edi
c00219a8:	5d                   	pop    ebp
c00219a9:	c3                   	ret    

c00219aa <IOAPIC::write(int, int)>:
c00219aa:	55                   	push   ebp
c00219ab:	89 e5                	mov    ebp,esp
c00219ad:	83 ec 10             	sub    esp,0x10
c00219b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00219b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00219bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219bf:	0f b6 d0             	movzx  edx,al
c00219c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00219c5:	89 10                	mov    DWORD PTR [eax],edx
c00219c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00219ca:	8d 50 10             	lea    edx,[eax+0x10]
c00219cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219d0:	89 02                	mov    DWORD PTR [edx],eax
c00219d2:	90                   	nop
c00219d3:	c9                   	leave  
c00219d4:	c3                   	ret    
c00219d5:	90                   	nop

c00219d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00219d6:	55                   	push   ebp
c00219d7:	89 e5                	mov    ebp,esp
c00219d9:	53                   	push   ebx
c00219da:	83 ec 2c             	sub    esp,0x2c
c00219dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219e0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00219e3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00219e6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00219e9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00219ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219ef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00219f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00219f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00219f8:	88 d8                	mov    al,bl
c00219fa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00219fd:	88 c8                	mov    al,cl
c00219ff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a02:	88 d0                	mov    al,dl
c0021a04:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021a07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021a0b:	83 c0 08             	add    eax,0x8
c0021a0e:	01 c0                	add    eax,eax
c0021a10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021a13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021a17:	83 c0 08             	add    eax,0x8
c0021a1a:	01 c0                	add    eax,eax
c0021a1c:	40                   	inc    eax
c0021a1d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021a20:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021a23:	50                   	push   eax
c0021a24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a27:	e8 60 fe ff ff       	call   c002188c <IOAPIC::read(int)>
c0021a2c:	83 c4 08             	add    esp,0x8
c0021a2f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021a32:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021a39:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021a3c:	c1 e0 18             	shl    eax,0x18
c0021a3f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021a42:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021a45:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021a48:	52                   	push   edx
c0021a49:	50                   	push   eax
c0021a4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a4d:	e8 58 ff ff ff       	call   c00219aa <IOAPIC::write(int, int)>
c0021a52:	83 c4 0c             	add    esp,0xc
c0021a55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a58:	50                   	push   eax
c0021a59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a5c:	e8 2b fe ff ff       	call   c002188c <IOAPIC::read(int)>
c0021a61:	83 c4 08             	add    esp,0x8
c0021a64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021a67:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021a6e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021a75:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021a7c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a80:	74 09                	je     c0021a8b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021a82:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021a89:	eb 07                	jmp    c0021a92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021a8b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021a92:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021a96:	74 09                	je     c0021aa1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021a98:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021a9f:	eb 07                	jmp    c0021aa8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021aa1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021aa8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021aaf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021ab3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021ab6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021ab9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021abc:	52                   	push   edx
c0021abd:	50                   	push   eax
c0021abe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ac1:	e8 e4 fe ff ff       	call   c00219aa <IOAPIC::write(int, int)>
c0021ac6:	83 c4 0c             	add    esp,0xc
c0021ac9:	90                   	nop
c0021aca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021acd:	c9                   	leave  
c0021ace:	c3                   	ret    
c0021acf:	90                   	nop

c0021ad0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021ad0:	55                   	push   ebp
c0021ad1:	89 e5                	mov    ebp,esp
c0021ad3:	57                   	push   edi
c0021ad4:	56                   	push   esi
c0021ad5:	53                   	push   ebx
c0021ad6:	83 ec 2c             	sub    esp,0x2c
c0021ad9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021adc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021adf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021ae3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021ae7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021aeb:	74 5a                	je     c0021b47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021aed:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021af1:	7f 44                	jg     c0021b37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021af3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021af6:	05 a0 77 02 c0       	add    eax,0xc00277a0
c0021afb:	8a 00                	mov    al,BYTE PTR [eax]
c0021afd:	0f b6 c0             	movzx  eax,al
c0021b00:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021b03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b06:	66 8b 84 00 a0 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7660]
c0021b0e:	0f b7 c0             	movzx  eax,ax
c0021b11:	83 e0 02             	and    eax,0x2
c0021b14:	85 c0                	test   eax,eax
c0021b16:	74 04                	je     c0021b1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021b18:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021b1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b1f:	66 8b 84 00 a0 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7660]
c0021b27:	0f b7 c0             	movzx  eax,ax
c0021b2a:	83 e0 08             	and    eax,0x8
c0021b2d:	85 c0                	test   eax,eax
c0021b2f:	74 16                	je     c0021b47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021b31:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021b35:	eb 10                	jmp    c0021b47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021b37:	83 ec 0c             	sub    esp,0xc
c0021b3a:	68 08 71 02 c0       	push   0xc0027108
c0021b3f:	e8 7f 2e ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021b4b:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c0021b50:	83 ec 08             	sub    esp,0x8
c0021b53:	50                   	push   eax
c0021b54:	68 40 71 02 c0       	push   0xc0027140
c0021b59:	e8 9d b1 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021b5e:	83 c4 10             	add    esp,0x10
c0021b61:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021b68:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c0021b6d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021b70:	7d 67                	jge    c0021bd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b75:	8b 04 85 20 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fe0]
c0021b7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b7f:	83 ec 08             	sub    esp,0x8
c0021b82:	52                   	push   edx
c0021b83:	50                   	push   eax
c0021b84:	e8 d1 fc ff ff       	call   c002185a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021b89:	83 c4 10             	add    esp,0x10
c0021b8c:	84 c0                	test   al,al
c0021b8e:	74 44                	je     c0021bd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021b90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b93:	8b 1c 85 20 a0 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5fe0]
c0021b9a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021b9e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021ba1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021ba5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ba8:	83 c0 20             	add    eax,0x20
c0021bab:	0f b6 f0             	movzx  esi,al
c0021bae:	b8 00 00 00 00       	mov    eax,0x0
c0021bb3:	99                   	cdq    
c0021bb4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021bb7:	0f b6 c9             	movzx  ecx,cl
c0021bba:	83 ec 04             	sub    esp,0x4
c0021bbd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021bc0:	57                   	push   edi
c0021bc1:	56                   	push   esi
c0021bc2:	52                   	push   edx
c0021bc3:	50                   	push   eax
c0021bc4:	51                   	push   ecx
c0021bc5:	53                   	push   ebx
c0021bc6:	e8 0b fe ff ff       	call   c00219d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021bcb:	83 c4 20             	add    esp,0x20
c0021bce:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021bd2:	eb 05                	jmp    c0021bd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021bd4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021bd7:	eb 8f                	jmp    c0021b68 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021bd9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021bdc:	83 f0 01             	xor    eax,0x1
c0021bdf:	84 c0                	test   al,al
c0021be1:	74 10                	je     c0021bf3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021be3:	83 ec 0c             	sub    esp,0xc
c0021be6:	68 57 71 02 c0       	push   0xc0027157
c0021beb:	e8 d3 2d ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0021bf0:	83 c4 10             	add    esp,0x10
c0021bf3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021bf7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021bfe:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021c02:	7f 65                	jg     c0021c69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c0a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c11:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c14:	01 ca                	add    edx,ecx
c0021c16:	83 c2 54             	add    edx,0x54
c0021c19:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021c1d:	85 c0                	test   eax,eax
c0021c1f:	75 43                	jne    c0021c64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c24:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c2e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c31:	01 ca                	add    edx,ecx
c0021c33:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021c36:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021c39:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c4a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c4d:	01 ca                	add    edx,ecx
c0021c4f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021c55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021c58:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c5f:	83 e8 20             	sub    eax,0x20
c0021c62:	eb 1a                	jmp    c0021c7e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021c64:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021c67:	eb 95                	jmp    c0021bfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021c69:	83 ec 0c             	sub    esp,0xc
c0021c6c:	68 64 71 02 c0       	push   0xc0027164
c0021c71:	e8 4d 2d ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021c7e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021c81:	5b                   	pop    ebx
c0021c82:	5e                   	pop    esi
c0021c83:	5f                   	pop    edi
c0021c84:	5d                   	pop    ebp
c0021c85:	c3                   	ret    

c0021c86 <PIC::disable()>:
c0021c86:	55                   	push   ebp
c0021c87:	89 e5                	mov    ebp,esp
c0021c89:	83 ec 10             	sub    esp,0x10
c0021c8c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021c92:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021c96:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c99:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021c9d:	ee                   	out    dx,al
c0021c9e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021ca4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021ca8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021cab:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021caf:	ee                   	out    dx,al
c0021cb0:	90                   	nop
c0021cb1:	c9                   	leave  
c0021cb2:	c3                   	ret    
c0021cb3:	90                   	nop

c0021cb4 <PIC::close(int, int, void*)>:
c0021cb4:	55                   	push   ebp
c0021cb5:	89 e5                	mov    ebp,esp
c0021cb7:	83 ec 08             	sub    esp,0x8
c0021cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cbf:	83 c0 3c             	add    eax,0x3c
c0021cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cc4:	83 ec 0c             	sub    esp,0xc
c0021cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cca:	ff d0                	call   eax
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	b8 00 00 00 00       	mov    eax,0x0
c0021cd4:	c9                   	leave  
c0021cd5:	c3                   	ret    

c0021cd6 <PIC::PIC()>:
c0021cd6:	83 ec 0c             	sub    esp,0xc
c0021cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cdd:	83 ec 08             	sub    esp,0x8
c0021ce0:	68 10 72 02 c0       	push   0xc0027210
c0021ce5:	50                   	push   eax
c0021ce6:	e8 cb ce fe ff       	call   c000ebb6 <InterruptController::InterruptController(char const*)>
c0021ceb:	83 c4 10             	add    esp,0x10
c0021cee:	ba 3c 72 02 c0       	mov    edx,0xc002723c
c0021cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf7:	89 10                	mov    DWORD PTR [eax],edx
c0021cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d03:	0f b6 d0             	movzx  edx,al
c0021d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d1b:	0f b6 d0             	movzx  edx,al
c0021d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d22:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d31:	8d 50 01             	lea    edx,[eax+0x1]
c0021d34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d38:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d3e:	0f b6 d0             	movzx  edx,al
c0021d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d45:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021d49:	83 e1 3f             	and    ecx,0x3f
c0021d4c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d5a:	0f b6 d0             	movzx  edx,al
c0021d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d61:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d72:	0f b6 d0             	movzx  edx,al
c0021d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d79:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d88:	8d 50 01             	lea    edx,[eax+0x1]
c0021d8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d8f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d95:	0f b6 d0             	movzx  edx,al
c0021d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021da0:	83 e1 3f             	and    ecx,0x3f
c0021da3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021da7:	90                   	nop
c0021da8:	83 c4 0c             	add    esp,0xc
c0021dab:	c3                   	ret    

c0021dac <PIC::ioWait()>:
c0021dac:	eb 00                	jmp    c0021dae <PIC::ioWait()+0x2>
c0021dae:	eb 00                	jmp    c0021db0 <PIC::ioWait()+0x4>
c0021db0:	90                   	nop
c0021db1:	c3                   	ret    

c0021db2 <PIC::getIRQReg(int)>:
c0021db2:	55                   	push   ebp
c0021db3:	89 e5                	mov    ebp,esp
c0021db5:	83 ec 10             	sub    esp,0x10
c0021db8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021dbb:	0f b6 c0             	movzx  eax,al
c0021dbe:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021dc4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021dc7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021dca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021dce:	ee                   	out    dx,al
c0021dcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021dd2:	0f b6 c0             	movzx  eax,al
c0021dd5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021ddb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021dde:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021de1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021de5:	ee                   	out    dx,al
c0021de6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021dec:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021df0:	89 c2                	mov    edx,eax
c0021df2:	ec                   	in     al,dx
c0021df3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021df6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021df9:	0f b6 c0             	movzx  eax,al
c0021dfc:	c1 e0 08             	shl    eax,0x8
c0021dff:	89 c1                	mov    ecx,eax
c0021e01:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021e07:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021e0b:	89 c2                	mov    edx,eax
c0021e0d:	ec                   	in     al,dx
c0021e0e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021e11:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021e14:	0f b6 c0             	movzx  eax,al
c0021e17:	09 c8                	or     eax,ecx
c0021e19:	c9                   	leave  
c0021e1a:	c3                   	ret    
c0021e1b:	90                   	nop

c0021e1c <PIC::eoi(unsigned char)>:
c0021e1c:	55                   	push   ebp
c0021e1d:	89 e5                	mov    ebp,esp
c0021e1f:	83 ec 14             	sub    esp,0x14
c0021e22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e25:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021e28:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e2c:	75 1e                	jne    c0021e4c <PIC::eoi(unsigned char)+0x30>
c0021e2e:	6a 0b                	push   0xb
c0021e30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e33:	e8 7a ff ff ff       	call   c0021db2 <PIC::getIRQReg(int)>
c0021e38:	83 c4 08             	add    esp,0x8
c0021e3b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021e3f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021e43:	25 80 00 00 00       	and    eax,0x80
c0021e48:	85 c0                	test   eax,eax
c0021e4a:	74 5f                	je     c0021eab <PIC::eoi(unsigned char)+0x8f>
c0021e4c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021e50:	75 2d                	jne    c0021e7f <PIC::eoi(unsigned char)+0x63>
c0021e52:	6a 0b                	push   0xb
c0021e54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e57:	e8 56 ff ff ff       	call   c0021db2 <PIC::getIRQReg(int)>
c0021e5c:	83 c4 08             	add    esp,0x8
c0021e5f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021e63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e66:	66 85 c0             	test   ax,ax
c0021e69:	78 14                	js     c0021e7f <PIC::eoi(unsigned char)+0x63>
c0021e6b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021e71:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021e75:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021e78:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021e7c:	ee                   	out    dx,al
c0021e7d:	eb 2d                	jmp    c0021eac <PIC::eoi(unsigned char)+0x90>
c0021e7f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e83:	76 12                	jbe    c0021e97 <PIC::eoi(unsigned char)+0x7b>
c0021e85:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021e8b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021e8f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e92:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021e96:	ee                   	out    dx,al
c0021e97:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021e9d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021ea1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021ea4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021ea8:	ee                   	out    dx,al
c0021ea9:	eb 01                	jmp    c0021eac <PIC::eoi(unsigned char)+0x90>
c0021eab:	90                   	nop
c0021eac:	c9                   	leave  
c0021ead:	c3                   	ret    

c0021eae <PIC::remap()>:
c0021eae:	55                   	push   ebp
c0021eaf:	89 e5                	mov    ebp,esp
c0021eb1:	83 ec 48             	sub    esp,0x48
c0021eb4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021ebb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021ec2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021ec8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021ecb:	89 c2                	mov    edx,eax
c0021ecd:	ec                   	in     al,dx
c0021ece:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021ed1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021ed4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021ed7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021edd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021ee0:	89 c2                	mov    edx,eax
c0021ee2:	ec                   	in     al,dx
c0021ee3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021ee6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021ee9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021eec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021ef2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021ef6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021ef9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021efc:	ee                   	out    dx,al
c0021efd:	83 ec 0c             	sub    esp,0xc
c0021f00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f03:	e8 a4 fe ff ff       	call   c0021dac <PIC::ioWait()>
c0021f08:	83 c4 10             	add    esp,0x10
c0021f0b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021f11:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021f15:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021f18:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021f1b:	ee                   	out    dx,al
c0021f1c:	83 ec 0c             	sub    esp,0xc
c0021f1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f22:	e8 85 fe ff ff       	call   c0021dac <PIC::ioWait()>
c0021f27:	83 c4 10             	add    esp,0x10
c0021f2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021f2d:	0f b6 c0             	movzx  eax,al
c0021f30:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021f36:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021f39:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021f3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021f3f:	ee                   	out    dx,al
c0021f40:	83 ec 0c             	sub    esp,0xc
c0021f43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f46:	e8 61 fe ff ff       	call   c0021dac <PIC::ioWait()>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021f51:	0f b6 c0             	movzx  eax,al
c0021f54:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021f5a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021f5d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021f60:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021f63:	ee                   	out    dx,al
c0021f64:	83 ec 0c             	sub    esp,0xc
c0021f67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f6a:	e8 3d fe ff ff       	call   c0021dac <PIC::ioWait()>
c0021f6f:	83 c4 10             	add    esp,0x10
c0021f72:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021f78:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021f7c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021f7f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021f82:	ee                   	out    dx,al
c0021f83:	83 ec 0c             	sub    esp,0xc
c0021f86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f89:	e8 1e fe ff ff       	call   c0021dac <PIC::ioWait()>
c0021f8e:	83 c4 10             	add    esp,0x10
c0021f91:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021f97:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021f9b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021f9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021fa1:	ee                   	out    dx,al
c0021fa2:	83 ec 0c             	sub    esp,0xc
c0021fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fa8:	e8 ff fd ff ff       	call   c0021dac <PIC::ioWait()>
c0021fad:	83 c4 10             	add    esp,0x10
c0021fb0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021fb6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021fba:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021fbd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021fc0:	ee                   	out    dx,al
c0021fc1:	83 ec 0c             	sub    esp,0xc
c0021fc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fc7:	e8 e0 fd ff ff       	call   c0021dac <PIC::ioWait()>
c0021fcc:	83 c4 10             	add    esp,0x10
c0021fcf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021fd5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021fd9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021fdc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021fdf:	ee                   	out    dx,al
c0021fe0:	83 ec 0c             	sub    esp,0xc
c0021fe3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fe6:	e8 c1 fd ff ff       	call   c0021dac <PIC::ioWait()>
c0021feb:	83 c4 10             	add    esp,0x10
c0021fee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021ff2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021ff8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021ffb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021ffe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022001:	ee                   	out    dx,al
c0022002:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022006:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002200c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002200f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022012:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022015:	ee                   	out    dx,al
c0022016:	90                   	nop
c0022017:	c9                   	leave  
c0022018:	c3                   	ret    
c0022019:	90                   	nop

c002201a <PIC::open(int, int, void*)>:
c002201a:	55                   	push   ebp
c002201b:	89 e5                	mov    ebp,esp
c002201d:	83 ec 18             	sub    esp,0x18
c0022020:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022026:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002202a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002202d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022031:	ee                   	out    dx,al
c0022032:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022038:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002203c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002203f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022043:	ee                   	out    dx,al
c0022044:	83 ec 0c             	sub    esp,0xc
c0022047:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002204a:	e8 5f fe ff ff       	call   c0021eae <PIC::remap()>
c002204f:	83 c4 10             	add    esp,0x10
c0022052:	b8 00 00 00 00       	mov    eax,0x0
c0022057:	c9                   	leave  
c0022058:	c3                   	ret    
c0022059:	66 90                	xchg   ax,ax
c002205b:	90                   	nop

c002205c <APICTimer::close(int, int, void*)>:
c002205c:	b8 00 00 00 00       	mov    eax,0x0
c0022061:	c3                   	ret    
c0022062:	66 90                	xchg   ax,ax

c0022064 <apicTimerHandler(regs*, void*)>:
c0022064:	83 ec 0c             	sub    esp,0xc
c0022067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002206b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002206d:	b8 10 27 00 00       	mov    eax,0x2710
c0022072:	ba 00 00 00 00       	mov    edx,0x0
c0022077:	f7 f1                	div    ecx
c0022079:	83 ec 0c             	sub    esp,0xc
c002207c:	50                   	push   eax
c002207d:	e8 83 ea fe ff       	call   c0010b05 <timerHandler(unsigned int)>
c0022082:	83 c4 10             	add    esp,0x10
c0022085:	90                   	nop
c0022086:	83 c4 0c             	add    esp,0xc
c0022089:	c3                   	ret    
c002208a:	66 90                	xchg   ax,ax

c002208c <APICTimer::write(int)>:
c002208c:	83 ec 1c             	sub    esp,0x1c
c002208f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022093:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022097:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002209d:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c00220a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220a8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00220ae:	83 ec 0c             	sub    esp,0xc
c00220b1:	50                   	push   eax
c00220b2:	e8 e1 f4 ff ff       	call   c0021598 <APIC::getBase()>
c00220b7:	83 c4 10             	add    esp,0x10
c00220ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00220be:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c00220c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220cb:	05 e0 03 00 00       	add    eax,0x3e0
c00220d0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00220d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220da:	05 80 03 00 00       	add    eax,0x380
c00220df:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00220e5:	fb                   	sti    
c00220e6:	66 90                	xchg   ax,ax
c00220e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220ec:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00220f2:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c00220f7:	39 c2                	cmp    edx,eax
c00220f9:	76 05                	jbe    c0022100 <APICTimer::write(int)+0x74>
c00220fb:	eb eb                	jmp    c00220e8 <APICTimer::write(int)+0x5c>
c00220fd:	8d 76 00             	lea    esi,[esi+0x0]
c0022100:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022104:	05 20 03 00 00       	add    eax,0x320
c0022109:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002210f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022113:	05 90 03 00 00       	add    eax,0x390
c0022118:	8b 00                	mov    eax,DWORD PTR [eax]
c002211a:	f7 d0                	not    eax
c002211c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022120:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022128:	ba 00 00 00 00       	mov    edx,0x0
c002212d:	f7 f1                	div    ecx
c002212f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022136:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002213c:	0d 00 00 02 00       	or     eax,0x20000
c0022141:	89 c2                	mov    edx,eax
c0022143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022147:	05 20 03 00 00       	add    eax,0x320
c002214c:	89 10                	mov    DWORD PTR [eax],edx
c002214e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022152:	05 e0 03 00 00       	add    eax,0x3e0
c0022157:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002215d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022161:	05 80 03 00 00       	add    eax,0x380
c0022166:	89 c2                	mov    edx,eax
c0022168:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002216b:	89 02                	mov    DWORD PTR [edx],eax
c002216d:	90                   	nop
c002216e:	83 c4 1c             	add    esp,0x1c
c0022171:	c3                   	ret    
c0022172:	66 90                	xchg   ax,ax

c0022174 <APICTimer::open(int, int, void*)>:
c0022174:	57                   	push   edi
c0022175:	56                   	push   esi
c0022176:	53                   	push   ebx
c0022177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217b:	8b 00                	mov    eax,DWORD PTR [eax]
c002217d:	83 c0 24             	add    eax,0x24
c0022180:	8b 00                	mov    eax,DWORD PTR [eax]
c0022182:	83 ec 08             	sub    esp,0x8
c0022185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002218d:	ff d0                	call   eax
c002218f:	83 c4 10             	add    esp,0x10
c0022192:	a1 a8 80 02 c0       	mov    eax,ds:0xc00280a8
c0022197:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002219d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00221a3:	83 ec 0c             	sub    esp,0xc
c00221a6:	50                   	push   eax
c00221a7:	e8 ec f3 ff ff       	call   c0021598 <APIC::getBase()>
c00221ac:	83 c4 10             	add    esp,0x10
c00221af:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00221b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00221bf:	0f b6 f8             	movzx  edi,al
c00221c2:	89 d0                	mov    eax,edx
c00221c4:	ba 00 00 00 00       	mov    edx,0x0
c00221c9:	89 c1                	mov    ecx,eax
c00221cb:	80 e5 ff             	and    ch,0xff
c00221ce:	89 cb                	mov    ebx,ecx
c00221d0:	0f b6 f2             	movzx  esi,dl
c00221d3:	89 d8                	mov    eax,ebx
c00221d5:	89 f2                	mov    edx,esi
c00221d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00221de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00221e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00221e6:	83 e0 00             	and    eax,0x0
c00221e9:	09 d0                	or     eax,edx
c00221eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00221ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00221f9:	8d 50 01             	lea    edx,[eax+0x1]
c00221fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022200:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022206:	0f b6 d0             	movzx  edx,al
c0022209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220d:	83 c2 08             	add    edx,0x8
c0022210:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022214:	0f b6 c9             	movzx  ecx,cl
c0022217:	81 c9 00 00 01 00    	or     ecx,0x10000
c002221d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022225:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022229:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002222f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022237:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002223d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022241:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022247:	83 ec 0c             	sub    esp,0xc
c002224a:	51                   	push   ecx
c002224b:	6a 01                	push   0x1
c002224d:	68 64 20 02 c0       	push   0xc0022064
c0022252:	52                   	push   edx
c0022253:	50                   	push   eax
c0022254:	e8 59 bf fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022259:	83 c4 20             	add    esp,0x20
c002225c:	89 c2                	mov    edx,eax
c002225e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022262:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022268:	b8 00 00 00 00       	mov    eax,0x0
c002226d:	5b                   	pop    ebx
c002226e:	5e                   	pop    esi
c002226f:	5f                   	pop    edi
c0022270:	c3                   	ret    
c0022271:	90                   	nop
c0022272:	66 90                	xchg   ax,ax

c0022274 <APICTimer::APICTimer()>:
c0022274:	83 ec 0c             	sub    esp,0xc
c0022277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227b:	83 ec 08             	sub    esp,0x8
c002227e:	68 7c 72 02 c0       	push   0xc002727c
c0022283:	50                   	push   eax
c0022284:	e8 eb e7 fe ff       	call   c0010a74 <Timer::Timer(char const*)>
c0022289:	83 c4 10             	add    esp,0x10
c002228c:	ba 90 72 02 c0       	mov    edx,0xc0027290
c0022291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022295:	89 10                	mov    DWORD PTR [eax],edx
c0022297:	90                   	nop
c0022298:	83 c4 0c             	add    esp,0xc
c002229b:	c3                   	ret    

c002229c <PIT::write(int)>:
c002229c:	83 ec 10             	sub    esp,0x10
c002229f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00222a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00222ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00222b1:	a3 44 a0 02 c0       	mov    ds:0xc002a044,eax
c00222b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00222bb:	99                   	cdq    
c00222bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00222c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00222cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00222d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00222d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00222d9:	ee                   	out    dx,al
c00222da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222de:	0f b6 c0             	movzx  eax,al
c00222e1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00222e8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00222ec:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00222f0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00222f5:	ee                   	out    dx,al
c00222f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222fa:	c1 f8 08             	sar    eax,0x8
c00222fd:	0f b6 c0             	movzx  eax,al
c0022300:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022307:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002230b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002230f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022314:	ee                   	out    dx,al
c0022315:	90                   	nop
c0022316:	83 c4 10             	add    esp,0x10
c0022319:	c3                   	ret    
c002231a:	66 90                	xchg   ax,ax

c002231c <pitHandler(regs*, void*)>:
c002231c:	83 ec 0c             	sub    esp,0xc
c002231f:	8b 0d 44 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a044
c0022325:	b8 10 27 00 00       	mov    eax,0x2710
c002232a:	99                   	cdq    
c002232b:	f7 f9                	idiv   ecx
c002232d:	83 ec 0c             	sub    esp,0xc
c0022330:	50                   	push   eax
c0022331:	e8 cf e7 fe ff       	call   c0010b05 <timerHandler(unsigned int)>
c0022336:	83 c4 10             	add    esp,0x10
c0022339:	90                   	nop
c002233a:	83 c4 0c             	add    esp,0xc
c002233d:	c3                   	ret    
c002233e:	66 90                	xchg   ax,ax

c0022340 <PIT::open(int, int, void*)>:
c0022340:	83 ec 0c             	sub    esp,0xc
c0022343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022347:	8b 00                	mov    eax,DWORD PTR [eax]
c0022349:	83 c0 24             	add    eax,0x24
c002234c:	8b 00                	mov    eax,DWORD PTR [eax]
c002234e:	83 ec 08             	sub    esp,0x8
c0022351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022359:	ff d0                	call   eax
c002235b:	83 c4 10             	add    esp,0x10
c002235e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022362:	83 ec 0c             	sub    esp,0xc
c0022365:	6a 00                	push   0x0
c0022367:	6a 01                	push   0x1
c0022369:	68 1c 23 02 c0       	push   0xc002231c
c002236e:	6a 00                	push   0x0
c0022370:	50                   	push   eax
c0022371:	e8 3c be fe ff       	call   c000e1b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022376:	83 c4 20             	add    esp,0x20
c0022379:	89 c2                	mov    edx,eax
c002237b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022385:	b8 00 00 00 00       	mov    eax,0x0
c002238a:	83 c4 0c             	add    esp,0xc
c002238d:	c3                   	ret    
c002238e:	66 90                	xchg   ax,ax

c0022390 <PIT::close(int, int, void*)>:
c0022390:	83 ec 0c             	sub    esp,0xc
c0022393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022397:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00223a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a5:	6a 01                	push   0x1
c00223a7:	68 1c 23 02 c0       	push   0xc002231c
c00223ac:	6a 00                	push   0x0
c00223ae:	50                   	push   eax
c00223af:	e8 48 be fe ff       	call   c000e1fc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00223b4:	83 c4 10             	add    esp,0x10
c00223b7:	b8 00 00 00 00       	mov    eax,0x0
c00223bc:	83 c4 0c             	add    esp,0xc
c00223bf:	c3                   	ret    

c00223c0 <PIT::PIT()>:
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c7:	83 ec 08             	sub    esp,0x8
c00223ca:	68 b8 72 02 c0       	push   0xc00272b8
c00223cf:	50                   	push   eax
c00223d0:	e8 9f e6 fe ff       	call   c0010a74 <Timer::Timer(char const*)>
c00223d5:	83 c4 10             	add    esp,0x10
c00223d8:	ba e0 72 02 c0       	mov    edx,0xc00272e0
c00223dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e1:	89 10                	mov    DWORD PTR [eax],edx
c00223e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ed:	0f b6 d0             	movzx  edx,al
c00223f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00223fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022405:	0f b6 d0             	movzx  edx,al
c0022408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022415:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002241b:	8d 50 01             	lea    edx,[eax+0x1]
c002241e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022422:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022428:	0f b6 d0             	movzx  edx,al
c002242b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022433:	83 e1 3f             	and    ecx,0x3f
c0022436:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002243a:	90                   	nop
c002243b:	83 c4 0c             	add    esp,0xc
c002243e:	c3                   	ret    
c002243f:	90                   	nop

c0022440 <avxDetect>:
c0022440:	b8 00 00 00 00       	mov    eax,0x0
c0022445:	c3                   	ret    

c0022446 <avxSave>:
c0022446:	c3                   	ret    

c0022447 <avxLoad>:
c0022447:	c3                   	ret    

c0022448 <avxInit>:
c0022448:	c3                   	ret    

c0022449 <avxClose>:
c0022449:	c3                   	ret    

c002244a <wouldSheSayYes>:
c002244a:	c3                   	ret    
c002244b:	49                   	dec    ecx
c002244c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022450:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022454:	75 20                	jne    c0022476 <sseDetect.noSSE+0x1>
c0022456:	4e                   	dec    esi
c0022457:	79 61                	jns    c00224ba <x87Detect+0x14>
c0022459:	68 2e 2e 2e 00       	push   0x2e2e2e
c002245e:	66 90                	xchg   ax,ax

c0022460 <absolutelyNoChanceInHell>:
c0022460:	b8 01 00 00 00       	mov    eax,0x1
c0022465:	0f a2                	cpuid  
c0022467:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002246d:	74 06                	je     c0022475 <sseDetect.noSSE>
c002246f:	b8 01 00 00 00       	mov    eax,0x1
c0022474:	c3                   	ret    

c0022475 <sseDetect.noSSE>:
c0022475:	31 c0                	xor    eax,eax
c0022477:	c3                   	ret    

c0022478 <sseSave>:
c0022478:	0f ae 44 24 04       	fxsave [esp+0x4]
c002247d:	c3                   	ret    

c002247e <sseLoad>:
c002247e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022483:	c3                   	ret    

c0022484 <sseInit>:
c0022484:	e8 49 00 00 00       	call   c00224d2 <x87Init>
c0022489:	0f 20 e0             	mov    eax,cr4
c002248c:	66 0d 00 06          	or     ax,0x600
c0022490:	0f 22 e0             	mov    cr4,eax
c0022493:	c3                   	ret    

c0022494 <sseClose>:
c0022494:	c3                   	ret    
c0022495:	66 90                	xchg   ax,ax
c0022497:	66 90                	xchg   ax,ax
c0022499:	66 90                	xchg   ax,ax
c002249b:	66 90                	xchg   ax,ax
c002249d:	66 90                	xchg   ax,ax
c002249f:	90                   	nop

c00224a0 <value_37F>:
c00224a0:	7f 03                	jg     c00224a5 <value_37A+0x1>

c00224a2 <value_37E>:
c00224a2:	7e 03                	jle    c00224a7 <x87Detect+0x1>

c00224a4 <value_37A>:
c00224a4:	7a 03                	jp     c00224a9 <x87Detect+0x3>

c00224a6 <x87Detect>:
c00224a6:	b8 01 00 00 00       	mov    eax,0x1
c00224ab:	0f a2                	cpuid  
c00224ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00224b3:	74 06                	je     c00224bb <x87Detect.nox87>
c00224b5:	b8 01 00 00 00       	mov    eax,0x1
c00224ba:	c3                   	ret    

c00224bb <x87Detect.nox87>:
c00224bb:	b8 00 00 00 00       	mov    eax,0x0
c00224c0:	c3                   	ret    

c00224c1 <x87Save>:
c00224c1:	55                   	push   ebp
c00224c2:	89 e5                	mov    ebp,esp
c00224c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00224c8:	c9                   	leave  
c00224c9:	c3                   	ret    

c00224ca <x87Load>:
c00224ca:	55                   	push   ebp
c00224cb:	89 e5                	mov    ebp,esp
c00224cd:	dd 65 08             	frstor [ebp+0x8]
c00224d0:	c9                   	leave  
c00224d1:	c3                   	ret    

c00224d2 <x87Init>:
c00224d2:	9b db e3             	finit  
c00224d5:	0f 20 c0             	mov    eax,cr0
c00224d8:	66 25 fb ff          	and    ax,0xfffb
c00224dc:	66 0d 22 00          	or     ax,0x22
c00224e0:	0f 22 c0             	mov    cr0,eax
c00224e3:	0f 06                	clts   
c00224e5:	d9 2d a4 24 02 c0    	fldcw  WORD PTR ds:0xc00224a4
c00224eb:	c3                   	ret    

c00224ec <x87Close>:
c00224ec:	c3                   	ret    
c00224ed:	66 90                	xchg   ax,ax
c00224ef:	90                   	nop

c00224f0 <__do_global_ctors_aux>:
c00224f0:	a1 8c 36 02 c0       	mov    eax,ds:0xc002368c
c00224f5:	83 f8 ff             	cmp    eax,0xffffffff
c00224f8:	74 1a                	je     c0022514 <__do_global_ctors_aux+0x24>
c00224fa:	55                   	push   ebp
c00224fb:	89 e5                	mov    ebp,esp
c00224fd:	53                   	push   ebx
c00224fe:	52                   	push   edx
c00224ff:	bb 8c 36 02 c0       	mov    ebx,0xc002368c
c0022504:	ff d0                	call   eax
c0022506:	83 eb 04             	sub    ebx,0x4
c0022509:	8b 03                	mov    eax,DWORD PTR [ebx]
c002250b:	83 f8 ff             	cmp    eax,0xffffffff
c002250e:	75 f4                	jne    c0022504 <__do_global_ctors_aux+0x14>
c0022510:	58                   	pop    eax
c0022511:	5b                   	pop    ebx
c0022512:	5d                   	pop    ebp
c0022513:	c3                   	ret    
c0022514:	c3                   	ret    
c0022515:	66 90                	xchg   ax,ax
c0022517:	90                   	nop

c0022518 <__divdi3>:
c0022518:	55                   	push   ebp
c0022519:	57                   	push   edi
c002251a:	56                   	push   esi
c002251b:	53                   	push   ebx
c002251c:	83 ec 1c             	sub    esp,0x1c
c002251f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022523:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022527:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002252a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002252e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022532:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022536:	85 db                	test   ebx,ebx
c0022538:	0f 88 8e 00 00 00    	js     c00225cc <__divdi3+0xb4>
c002253e:	89 dd                	mov    ebp,ebx
c0022540:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022548:	89 d3                	mov    ebx,edx
c002254a:	85 d2                	test   edx,edx
c002254c:	79 0d                	jns    c002255b <__divdi3+0x43>
c002254e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022552:	f7 d8                	neg    eax
c0022554:	83 d2 00             	adc    edx,0x0
c0022557:	f7 da                	neg    edx
c0022559:	89 d3                	mov    ebx,edx
c002255b:	89 c7                	mov    edi,eax
c002255d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022560:	85 db                	test   ebx,ebx
c0022562:	75 48                	jne    c00225ac <__divdi3+0x94>
c0022564:	39 ef                	cmp    edi,ebp
c0022566:	76 24                	jbe    c002258c <__divdi3+0x74>
c0022568:	89 ea                	mov    edx,ebp
c002256a:	f7 f7                	div    edi
c002256c:	89 c1                	mov    ecx,eax
c002256e:	31 f6                	xor    esi,esi
c0022570:	89 c8                	mov    eax,ecx
c0022572:	89 f2                	mov    edx,esi
c0022574:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022578:	85 c9                	test   ecx,ecx
c002257a:	74 07                	je     c0022583 <__divdi3+0x6b>
c002257c:	f7 d8                	neg    eax
c002257e:	83 d2 00             	adc    edx,0x0
c0022581:	f7 da                	neg    edx
c0022583:	83 c4 1c             	add    esp,0x1c
c0022586:	5b                   	pop    ebx
c0022587:	5e                   	pop    esi
c0022588:	5f                   	pop    edi
c0022589:	5d                   	pop    ebp
c002258a:	c3                   	ret    
c002258b:	90                   	nop
c002258c:	85 ff                	test   edi,edi
c002258e:	75 0b                	jne    c002259b <__divdi3+0x83>
c0022590:	b8 01 00 00 00       	mov    eax,0x1
c0022595:	31 d2                	xor    edx,edx
c0022597:	f7 f3                	div    ebx
c0022599:	89 c7                	mov    edi,eax
c002259b:	31 d2                	xor    edx,edx
c002259d:	89 e8                	mov    eax,ebp
c002259f:	f7 f7                	div    edi
c00225a1:	89 c6                	mov    esi,eax
c00225a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00225a6:	f7 f7                	div    edi
c00225a8:	89 c1                	mov    ecx,eax
c00225aa:	eb c4                	jmp    c0022570 <__divdi3+0x58>
c00225ac:	39 eb                	cmp    ebx,ebp
c00225ae:	77 3c                	ja     c00225ec <__divdi3+0xd4>
c00225b0:	0f bd f3             	bsr    esi,ebx
c00225b3:	83 f6 1f             	xor    esi,0x1f
c00225b6:	75 40                	jne    c00225f8 <__divdi3+0xe0>
c00225b8:	39 eb                	cmp    ebx,ebp
c00225ba:	72 09                	jb     c00225c5 <__divdi3+0xad>
c00225bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00225bf:	0f 87 97 00 00 00    	ja     c002265c <__divdi3+0x144>
c00225c5:	b9 01 00 00 00       	mov    ecx,0x1
c00225ca:	eb a4                	jmp    c0022570 <__divdi3+0x58>
c00225cc:	f7 d9                	neg    ecx
c00225ce:	83 d3 00             	adc    ebx,0x0
c00225d1:	f7 db                	neg    ebx
c00225d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00225d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00225da:	89 dd                	mov    ebp,ebx
c00225dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00225e4:	e9 5f ff ff ff       	jmp    c0022548 <__divdi3+0x30>
c00225e9:	8d 76 00             	lea    esi,[esi+0x0]
c00225ec:	31 f6                	xor    esi,esi
c00225ee:	31 c9                	xor    ecx,ecx
c00225f0:	e9 7b ff ff ff       	jmp    c0022570 <__divdi3+0x58>
c00225f5:	8d 76 00             	lea    esi,[esi+0x0]
c00225f8:	b8 20 00 00 00       	mov    eax,0x20
c00225fd:	29 f0                	sub    eax,esi
c00225ff:	89 f1                	mov    ecx,esi
c0022601:	d3 e3                	shl    ebx,cl
c0022603:	89 fa                	mov    edx,edi
c0022605:	88 c1                	mov    cl,al
c0022607:	d3 ea                	shr    edx,cl
c0022609:	09 da                	or     edx,ebx
c002260b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002260f:	89 f1                	mov    ecx,esi
c0022611:	d3 e7                	shl    edi,cl
c0022613:	89 eb                	mov    ebx,ebp
c0022615:	88 c1                	mov    cl,al
c0022617:	d3 eb                	shr    ebx,cl
c0022619:	89 f1                	mov    ecx,esi
c002261b:	d3 e5                	shl    ebp,cl
c002261d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022620:	88 c1                	mov    cl,al
c0022622:	d3 ea                	shr    edx,cl
c0022624:	09 d5                	or     ebp,edx
c0022626:	89 e8                	mov    eax,ebp
c0022628:	89 da                	mov    edx,ebx
c002262a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002262e:	89 d3                	mov    ebx,edx
c0022630:	89 c5                	mov    ebp,eax
c0022632:	f7 e7                	mul    edi
c0022634:	39 d3                	cmp    ebx,edx
c0022636:	72 18                	jb     c0022650 <__divdi3+0x138>
c0022638:	74 0a                	je     c0022644 <__divdi3+0x12c>
c002263a:	89 e9                	mov    ecx,ebp
c002263c:	31 f6                	xor    esi,esi
c002263e:	e9 2d ff ff ff       	jmp    c0022570 <__divdi3+0x58>
c0022643:	90                   	nop
c0022644:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022647:	89 f1                	mov    ecx,esi
c0022649:	d3 e7                	shl    edi,cl
c002264b:	39 c7                	cmp    edi,eax
c002264d:	73 eb                	jae    c002263a <__divdi3+0x122>
c002264f:	90                   	nop
c0022650:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022653:	31 f6                	xor    esi,esi
c0022655:	e9 16 ff ff ff       	jmp    c0022570 <__divdi3+0x58>
c002265a:	66 90                	xchg   ax,ax
c002265c:	31 c9                	xor    ecx,ecx
c002265e:	e9 0d ff ff ff       	jmp    c0022570 <__divdi3+0x58>
c0022663:	90                   	nop

c0022664 <__moddi3>:
c0022664:	55                   	push   ebp
c0022665:	57                   	push   edi
c0022666:	56                   	push   esi
c0022667:	53                   	push   ebx
c0022668:	83 ec 2c             	sub    esp,0x2c
c002266b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002266f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022673:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022677:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002267b:	85 db                	test   ebx,ebx
c002267d:	0f 88 85 00 00 00    	js     c0022708 <__moddi3+0xa4>
c0022683:	89 de                	mov    esi,ebx
c0022685:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002268d:	89 d7                	mov    edi,edx
c002268f:	85 d2                	test   edx,edx
c0022691:	79 09                	jns    c002269c <__moddi3+0x38>
c0022693:	f7 d8                	neg    eax
c0022695:	83 d2 00             	adc    edx,0x0
c0022698:	f7 da                	neg    edx
c002269a:	89 d7                	mov    edi,edx
c002269c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226a0:	89 cd                	mov    ebp,ecx
c00226a2:	85 ff                	test   edi,edi
c00226a4:	75 52                	jne    c00226f8 <__moddi3+0x94>
c00226a6:	89 c3                	mov    ebx,eax
c00226a8:	39 f0                	cmp    eax,esi
c00226aa:	76 24                	jbe    c00226d0 <__moddi3+0x6c>
c00226ac:	89 c8                	mov    eax,ecx
c00226ae:	89 f2                	mov    edx,esi
c00226b0:	f7 f3                	div    ebx
c00226b2:	89 d6                	mov    esi,edx
c00226b4:	89 f0                	mov    eax,esi
c00226b6:	31 d2                	xor    edx,edx
c00226b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226bc:	85 c9                	test   ecx,ecx
c00226be:	74 07                	je     c00226c7 <__moddi3+0x63>
c00226c0:	f7 d8                	neg    eax
c00226c2:	83 d2 00             	adc    edx,0x0
c00226c5:	f7 da                	neg    edx
c00226c7:	83 c4 2c             	add    esp,0x2c
c00226ca:	5b                   	pop    ebx
c00226cb:	5e                   	pop    esi
c00226cc:	5f                   	pop    edi
c00226cd:	5d                   	pop    ebp
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop
c00226d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00226d4:	85 db                	test   ebx,ebx
c00226d6:	75 0d                	jne    c00226e5 <__moddi3+0x81>
c00226d8:	b8 01 00 00 00       	mov    eax,0x1
c00226dd:	31 d2                	xor    edx,edx
c00226df:	f7 f7                	div    edi
c00226e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226e5:	89 f0                	mov    eax,esi
c00226e7:	31 d2                	xor    edx,edx
c00226e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00226ed:	f7 f7                	div    edi
c00226ef:	89 e8                	mov    eax,ebp
c00226f1:	f7 f7                	div    edi
c00226f3:	89 d6                	mov    esi,edx
c00226f5:	eb bd                	jmp    c00226b4 <__moddi3+0x50>
c00226f7:	90                   	nop
c00226f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00226fc:	39 f7                	cmp    edi,esi
c00226fe:	76 20                	jbe    c0022720 <__moddi3+0xbc>
c0022700:	89 c8                	mov    eax,ecx
c0022702:	89 f2                	mov    edx,esi
c0022704:	eb b2                	jmp    c00226b8 <__moddi3+0x54>
c0022706:	66 90                	xchg   ax,ax
c0022708:	f7 d9                	neg    ecx
c002270a:	83 d3 00             	adc    ebx,0x0
c002270d:	f7 db                	neg    ebx
c002270f:	89 de                	mov    esi,ebx
c0022711:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022719:	e9 6f ff ff ff       	jmp    c002268d <__moddi3+0x29>
c002271e:	66 90                	xchg   ax,ax
c0022720:	0f bd c7             	bsr    eax,edi
c0022723:	83 f0 1f             	xor    eax,0x1f
c0022726:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002272a:	75 24                	jne    c0022750 <__moddi3+0xec>
c002272c:	39 f7                	cmp    edi,esi
c002272e:	72 06                	jb     c0022736 <__moddi3+0xd2>
c0022730:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022734:	77 0c                	ja     c0022742 <__moddi3+0xde>
c0022736:	89 e9                	mov    ecx,ebp
c0022738:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002273c:	19 fe                	sbb    esi,edi
c002273e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022746:	89 f2                	mov    edx,esi
c0022748:	e9 6b ff ff ff       	jmp    c00226b8 <__moddi3+0x54>
c002274d:	8d 76 00             	lea    esi,[esi+0x0]
c0022750:	b8 20 00 00 00       	mov    eax,0x20
c0022755:	89 c2                	mov    edx,eax
c0022757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002275b:	29 da                	sub    edx,ebx
c002275d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022761:	88 d9                	mov    cl,bl
c0022763:	d3 e7                	shl    edi,cl
c0022765:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022769:	88 d1                	mov    cl,dl
c002276b:	d3 e8                	shr    eax,cl
c002276d:	09 c7                	or     edi,eax
c002276f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022773:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022777:	89 d8                	mov    eax,ebx
c0022779:	88 d9                	mov    cl,bl
c002277b:	d3 e7                	shl    edi,cl
c002277d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022781:	89 f3                	mov    ebx,esi
c0022783:	88 d1                	mov    cl,dl
c0022785:	d3 eb                	shr    ebx,cl
c0022787:	89 c7                	mov    edi,eax
c0022789:	88 c1                	mov    cl,al
c002278b:	d3 e6                	shl    esi,cl
c002278d:	89 e8                	mov    eax,ebp
c002278f:	88 d1                	mov    cl,dl
c0022791:	d3 e8                	shr    eax,cl
c0022793:	09 f0                	or     eax,esi
c0022795:	89 f9                	mov    ecx,edi
c0022797:	d3 e5                	shl    ebp,cl
c0022799:	89 da                	mov    edx,ebx
c002279b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002279f:	89 d3                	mov    ebx,edx
c00227a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00227a5:	89 c6                	mov    esi,eax
c00227a7:	89 d1                	mov    ecx,edx
c00227a9:	39 d3                	cmp    ebx,edx
c00227ab:	72 27                	jb     c00227d4 <__moddi3+0x170>
c00227ad:	74 21                	je     c00227d0 <__moddi3+0x16c>
c00227af:	29 f5                	sub    ebp,esi
c00227b1:	19 cb                	sbb    ebx,ecx
c00227b3:	89 de                	mov    esi,ebx
c00227b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00227b9:	d3 e6                	shl    esi,cl
c00227bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00227bf:	89 f9                	mov    ecx,edi
c00227c1:	d3 ed                	shr    ebp,cl
c00227c3:	09 ee                	or     esi,ebp
c00227c5:	89 f0                	mov    eax,esi
c00227c7:	d3 eb                	shr    ebx,cl
c00227c9:	89 da                	mov    edx,ebx
c00227cb:	e9 e8 fe ff ff       	jmp    c00226b8 <__moddi3+0x54>
c00227d0:	39 c5                	cmp    ebp,eax
c00227d2:	73 db                	jae    c00227af <__moddi3+0x14b>
c00227d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00227d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00227dc:	89 d1                	mov    ecx,edx
c00227de:	89 c6                	mov    esi,eax
c00227e0:	eb cd                	jmp    c00227af <__moddi3+0x14b>
c00227e2:	66 90                	xchg   ax,ax

c00227e4 <__udivdi3>:
c00227e4:	55                   	push   ebp
c00227e5:	57                   	push   edi
c00227e6:	56                   	push   esi
c00227e7:	53                   	push   ebx
c00227e8:	83 ec 1c             	sub    esp,0x1c
c00227eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00227ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00227f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00227fb:	85 d2                	test   edx,edx
c00227fd:	75 41                	jne    c0022840 <__udivdi3+0x5c>
c00227ff:	39 f7                	cmp    edi,esi
c0022801:	76 15                	jbe    c0022818 <__udivdi3+0x34>
c0022803:	89 e8                	mov    eax,ebp
c0022805:	89 f2                	mov    edx,esi
c0022807:	f7 f7                	div    edi
c0022809:	31 db                	xor    ebx,ebx
c002280b:	89 da                	mov    edx,ebx
c002280d:	83 c4 1c             	add    esp,0x1c
c0022810:	5b                   	pop    ebx
c0022811:	5e                   	pop    esi
c0022812:	5f                   	pop    edi
c0022813:	5d                   	pop    ebp
c0022814:	c3                   	ret    
c0022815:	8d 76 00             	lea    esi,[esi+0x0]
c0022818:	89 f9                	mov    ecx,edi
c002281a:	85 ff                	test   edi,edi
c002281c:	75 0b                	jne    c0022829 <__udivdi3+0x45>
c002281e:	b8 01 00 00 00       	mov    eax,0x1
c0022823:	31 d2                	xor    edx,edx
c0022825:	f7 f7                	div    edi
c0022827:	89 c1                	mov    ecx,eax
c0022829:	31 d2                	xor    edx,edx
c002282b:	89 f0                	mov    eax,esi
c002282d:	f7 f1                	div    ecx
c002282f:	89 c3                	mov    ebx,eax
c0022831:	89 e8                	mov    eax,ebp
c0022833:	f7 f1                	div    ecx
c0022835:	89 da                	mov    edx,ebx
c0022837:	83 c4 1c             	add    esp,0x1c
c002283a:	5b                   	pop    ebx
c002283b:	5e                   	pop    esi
c002283c:	5f                   	pop    edi
c002283d:	5d                   	pop    ebp
c002283e:	c3                   	ret    
c002283f:	90                   	nop
c0022840:	39 f2                	cmp    edx,esi
c0022842:	77 1c                	ja     c0022860 <__udivdi3+0x7c>
c0022844:	0f bd da             	bsr    ebx,edx
c0022847:	83 f3 1f             	xor    ebx,0x1f
c002284a:	75 24                	jne    c0022870 <__udivdi3+0x8c>
c002284c:	39 f2                	cmp    edx,esi
c002284e:	72 08                	jb     c0022858 <__udivdi3+0x74>
c0022850:	39 ef                	cmp    edi,ebp
c0022852:	0f 87 84 00 00 00    	ja     c00228dc <__udivdi3+0xf8>
c0022858:	b8 01 00 00 00       	mov    eax,0x1
c002285d:	eb ac                	jmp    c002280b <__udivdi3+0x27>
c002285f:	90                   	nop
c0022860:	31 db                	xor    ebx,ebx
c0022862:	31 c0                	xor    eax,eax
c0022864:	89 da                	mov    edx,ebx
c0022866:	83 c4 1c             	add    esp,0x1c
c0022869:	5b                   	pop    ebx
c002286a:	5e                   	pop    esi
c002286b:	5f                   	pop    edi
c002286c:	5d                   	pop    ebp
c002286d:	c3                   	ret    
c002286e:	66 90                	xchg   ax,ax
c0022870:	b8 20 00 00 00       	mov    eax,0x20
c0022875:	29 d8                	sub    eax,ebx
c0022877:	88 d9                	mov    cl,bl
c0022879:	d3 e2                	shl    edx,cl
c002287b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002287f:	89 fa                	mov    edx,edi
c0022881:	88 c1                	mov    cl,al
c0022883:	d3 ea                	shr    edx,cl
c0022885:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022889:	09 d1                	or     ecx,edx
c002288b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002288f:	88 d9                	mov    cl,bl
c0022891:	d3 e7                	shl    edi,cl
c0022893:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022897:	89 f7                	mov    edi,esi
c0022899:	88 c1                	mov    cl,al
c002289b:	d3 ef                	shr    edi,cl
c002289d:	88 d9                	mov    cl,bl
c002289f:	d3 e6                	shl    esi,cl
c00228a1:	89 ea                	mov    edx,ebp
c00228a3:	88 c1                	mov    cl,al
c00228a5:	d3 ea                	shr    edx,cl
c00228a7:	09 d6                	or     esi,edx
c00228a9:	89 f0                	mov    eax,esi
c00228ab:	89 fa                	mov    edx,edi
c00228ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00228b1:	89 d7                	mov    edi,edx
c00228b3:	89 c6                	mov    esi,eax
c00228b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00228b9:	39 d7                	cmp    edi,edx
c00228bb:	72 13                	jb     c00228d0 <__udivdi3+0xec>
c00228bd:	74 09                	je     c00228c8 <__udivdi3+0xe4>
c00228bf:	89 f0                	mov    eax,esi
c00228c1:	31 db                	xor    ebx,ebx
c00228c3:	e9 43 ff ff ff       	jmp    c002280b <__udivdi3+0x27>
c00228c8:	88 d9                	mov    cl,bl
c00228ca:	d3 e5                	shl    ebp,cl
c00228cc:	39 c5                	cmp    ebp,eax
c00228ce:	73 ef                	jae    c00228bf <__udivdi3+0xdb>
c00228d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00228d3:	31 db                	xor    ebx,ebx
c00228d5:	e9 31 ff ff ff       	jmp    c002280b <__udivdi3+0x27>
c00228da:	66 90                	xchg   ax,ax
c00228dc:	31 c0                	xor    eax,eax
c00228de:	e9 28 ff ff ff       	jmp    c002280b <__udivdi3+0x27>
c00228e3:	90                   	nop

c00228e4 <__umoddi3>:
c00228e4:	55                   	push   ebp
c00228e5:	57                   	push   edi
c00228e6:	56                   	push   esi
c00228e7:	53                   	push   ebx
c00228e8:	83 ec 1c             	sub    esp,0x1c
c00228eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00228f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00228f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00228fb:	89 da                	mov    edx,ebx
c00228fd:	85 c0                	test   eax,eax
c00228ff:	75 37                	jne    c0022938 <__umoddi3+0x54>
c0022901:	39 df                	cmp    edi,ebx
c0022903:	76 13                	jbe    c0022918 <__umoddi3+0x34>
c0022905:	89 f0                	mov    eax,esi
c0022907:	f7 f7                	div    edi
c0022909:	89 d0                	mov    eax,edx
c002290b:	31 d2                	xor    edx,edx
c002290d:	83 c4 1c             	add    esp,0x1c
c0022910:	5b                   	pop    ebx
c0022911:	5e                   	pop    esi
c0022912:	5f                   	pop    edi
c0022913:	5d                   	pop    ebp
c0022914:	c3                   	ret    
c0022915:	8d 76 00             	lea    esi,[esi+0x0]
c0022918:	89 fd                	mov    ebp,edi
c002291a:	85 ff                	test   edi,edi
c002291c:	75 0b                	jne    c0022929 <__umoddi3+0x45>
c002291e:	b8 01 00 00 00       	mov    eax,0x1
c0022923:	31 d2                	xor    edx,edx
c0022925:	f7 f7                	div    edi
c0022927:	89 c5                	mov    ebp,eax
c0022929:	89 d8                	mov    eax,ebx
c002292b:	31 d2                	xor    edx,edx
c002292d:	f7 f5                	div    ebp
c002292f:	89 f0                	mov    eax,esi
c0022931:	f7 f5                	div    ebp
c0022933:	89 d0                	mov    eax,edx
c0022935:	eb d4                	jmp    c002290b <__umoddi3+0x27>
c0022937:	90                   	nop
c0022938:	89 f1                	mov    ecx,esi
c002293a:	39 d8                	cmp    eax,ebx
c002293c:	76 0a                	jbe    c0022948 <__umoddi3+0x64>
c002293e:	89 f0                	mov    eax,esi
c0022940:	83 c4 1c             	add    esp,0x1c
c0022943:	5b                   	pop    ebx
c0022944:	5e                   	pop    esi
c0022945:	5f                   	pop    edi
c0022946:	5d                   	pop    ebp
c0022947:	c3                   	ret    
c0022948:	0f bd e8             	bsr    ebp,eax
c002294b:	83 f5 1f             	xor    ebp,0x1f
c002294e:	75 1c                	jne    c002296c <__umoddi3+0x88>
c0022950:	39 d8                	cmp    eax,ebx
c0022952:	72 04                	jb     c0022958 <__umoddi3+0x74>
c0022954:	39 f7                	cmp    edi,esi
c0022956:	77 08                	ja     c0022960 <__umoddi3+0x7c>
c0022958:	89 da                	mov    edx,ebx
c002295a:	29 fe                	sub    esi,edi
c002295c:	19 c2                	sbb    edx,eax
c002295e:	89 f1                	mov    ecx,esi
c0022960:	89 c8                	mov    eax,ecx
c0022962:	83 c4 1c             	add    esp,0x1c
c0022965:	5b                   	pop    ebx
c0022966:	5e                   	pop    esi
c0022967:	5f                   	pop    edi
c0022968:	5d                   	pop    ebp
c0022969:	c3                   	ret    
c002296a:	66 90                	xchg   ax,ax
c002296c:	ba 20 00 00 00       	mov    edx,0x20
c0022971:	29 ea                	sub    edx,ebp
c0022973:	89 e9                	mov    ecx,ebp
c0022975:	d3 e0                	shl    eax,cl
c0022977:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002297b:	89 f8                	mov    eax,edi
c002297d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022981:	88 d1                	mov    cl,dl
c0022983:	d3 e8                	shr    eax,cl
c0022985:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022989:	09 c1                	or     ecx,eax
c002298b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002298f:	89 e9                	mov    ecx,ebp
c0022991:	d3 e7                	shl    edi,cl
c0022993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022997:	89 d8                	mov    eax,ebx
c0022999:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002299d:	88 d1                	mov    cl,dl
c002299f:	d3 e8                	shr    eax,cl
c00229a1:	89 c7                	mov    edi,eax
c00229a3:	89 e9                	mov    ecx,ebp
c00229a5:	d3 e3                	shl    ebx,cl
c00229a7:	89 f0                	mov    eax,esi
c00229a9:	88 d1                	mov    cl,dl
c00229ab:	d3 e8                	shr    eax,cl
c00229ad:	09 d8                	or     eax,ebx
c00229af:	89 e9                	mov    ecx,ebp
c00229b1:	d3 e6                	shl    esi,cl
c00229b3:	89 f3                	mov    ebx,esi
c00229b5:	89 fa                	mov    edx,edi
c00229b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00229bb:	89 d1                	mov    ecx,edx
c00229bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00229c1:	89 c6                	mov    esi,eax
c00229c3:	89 d7                	mov    edi,edx
c00229c5:	39 d1                	cmp    ecx,edx
c00229c7:	72 27                	jb     c00229f0 <__umoddi3+0x10c>
c00229c9:	74 21                	je     c00229ec <__umoddi3+0x108>
c00229cb:	89 ca                	mov    edx,ecx
c00229cd:	29 f3                	sub    ebx,esi
c00229cf:	19 fa                	sbb    edx,edi
c00229d1:	89 d0                	mov    eax,edx
c00229d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00229d7:	d3 e0                	shl    eax,cl
c00229d9:	89 e9                	mov    ecx,ebp
c00229db:	d3 eb                	shr    ebx,cl
c00229dd:	09 d8                	or     eax,ebx
c00229df:	d3 ea                	shr    edx,cl
c00229e1:	83 c4 1c             	add    esp,0x1c
c00229e4:	5b                   	pop    ebx
c00229e5:	5e                   	pop    esi
c00229e6:	5f                   	pop    edi
c00229e7:	5d                   	pop    ebp
c00229e8:	c3                   	ret    
c00229e9:	8d 76 00             	lea    esi,[esi+0x0]
c00229ec:	39 c3                	cmp    ebx,eax
c00229ee:	73 db                	jae    c00229cb <__umoddi3+0xe7>
c00229f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00229f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00229f8:	89 d7                	mov    edi,edx
c00229fa:	89 c6                	mov    esi,eax
c00229fc:	eb cd                	jmp    c00229cb <__umoddi3+0xe7>

Disassembly of section .init:

c00229fe <_init>:
c00229fe:	55                   	push   ebp
c00229ff:	89 e5                	mov    ebp,esp
c0022a01:	e8 12 d7 fd ff       	call   c0000118 <frame_dummy>
c0022a06:	e8 e5 fa ff ff       	call   c00224f0 <__do_global_ctors_aux>
c0022a0b:	5d                   	pop    ebp
c0022a0c:	c3                   	ret    

Disassembly of section .fini:

c0022a0d <_fini>:
c0022a0d:	55                   	push   ebp
c0022a0e:	89 e5                	mov    ebp,esp
c0022a10:	e8 93 d6 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022a15:	5d                   	pop    ebp
c0022a16:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022a18 <Computer::~Computer()>:
c0022a18:	83 ec 0c             	sub    esp,0xc
c0022a1b:	ba 34 40 02 c0       	mov    edx,0xc0024034
c0022a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a24:	89 10                	mov    DWORD PTR [eax],edx
c0022a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2a:	83 ec 0c             	sub    esp,0xc
c0022a2d:	50                   	push   eax
c0022a2e:	e8 d5 b6 fe ff       	call   c000e108 <Device::~Device()>
c0022a33:	83 c4 10             	add    esp,0x10
c0022a36:	90                   	nop
c0022a37:	83 c4 0c             	add    esp,0xc
c0022a3a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022a3c <Computer::~Computer()>:
c0022a3c:	83 ec 0c             	sub    esp,0xc
c0022a3f:	83 ec 0c             	sub    esp,0xc
c0022a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a46:	e8 cd ff ff ff       	call   c0022a18 <Computer::~Computer()>
c0022a4b:	83 c4 10             	add    esp,0x10
c0022a4e:	83 ec 08             	sub    esp,0x8
c0022a51:	68 ec 01 00 00       	push   0x1ec
c0022a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a5a:	e8 bb a1 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	83 c4 0c             	add    esp,0xc
c0022a65:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022a66 <idleCommon()>:
c0022a66:	83 ec 0c             	sub    esp,0xc
c0022a69:	fa                   	cli    
c0022a6a:	ff 05 c8 95 02 c0    	inc    DWORD PTR ds:0xc00295c8
c0022a70:	e8 b3 5c ff ff       	call   c0018728 <schedule()>
c0022a75:	a1 c8 95 02 c0       	mov    eax,ds:0xc00295c8
c0022a7a:	48                   	dec    eax
c0022a7b:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0022a80:	75 01                	jne    c0022a83 <idleCommon()+0x1d>
c0022a82:	fb                   	sti    
c0022a83:	83 c4 0c             	add    esp,0xc
c0022a86:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022a88 <LinkedList<UnixFile>::~LinkedList()>:
c0022a88:	90                   	nop
c0022a89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022a8a <LinkedList<UnixFile>::LinkedList()>:
c0022a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022a94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aa3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022abf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022aca:	90                   	nop
c0022acb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022acc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022acc:	83 ec 0c             	sub    esp,0xc
c0022acf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022ad4:	75 10                	jne    c0022ae6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022ad6:	83 ec 0c             	sub    esp,0xc
c0022ad9:	68 00 44 02 c0       	push   0xc0024400
c0022ade:	e8 e0 1e ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022ae3:	83 c4 10             	add    esp,0x10
c0022ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aec:	85 c0                	test   eax,eax
c0022aee:	74 34                	je     c0022b24 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022af7:	85 c0                	test   eax,eax
c0022af9:	74 29                	je     c0022b24 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b22:	eb 65                	jmp    c0022b89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b2a:	85 c0                	test   eax,eax
c0022b2c:	75 4b                	jne    c0022b79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b35:	85 c0                	test   eax,eax
c0022b37:	75 40                	jne    c0022b79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b41:	89 10                	mov    DWORD PTR [eax],edx
c0022b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b63:	85 c0                	test   eax,eax
c0022b65:	74 22                	je     c0022b89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b67:	83 ec 0c             	sub    esp,0xc
c0022b6a:	68 22 44 02 c0       	push   0xc0024422
c0022b6f:	e8 4f 1e ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022b74:	83 c4 10             	add    esp,0x10
c0022b77:	eb 10                	jmp    c0022b89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b79:	83 ec 0c             	sub    esp,0xc
c0022b7c:	68 2c 44 02 c0       	push   0xc002442c
c0022b81:	e8 3d 1e ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022b86:	83 c4 10             	add    esp,0x10
c0022b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b90:	8d 50 01             	lea    edx,[eax+0x1]
c0022b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b9a:	90                   	nop
c0022b9b:	83 c4 0c             	add    esp,0xc
c0022b9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022ba0 <LinkedList<UnixFile>::getFirstElement()>:
c0022ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ba6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022ba8 <LinkedList<UnixFile>::removeFirst()>:
c0022ba8:	83 ec 0c             	sub    esp,0xc
c0022bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bb1:	85 c0                	test   eax,eax
c0022bb3:	75 12                	jne    c0022bc7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022bb5:	83 ec 0c             	sub    esp,0xc
c0022bb8:	68 38 44 02 c0       	push   0xc0024438
c0022bbd:	e8 01 1e ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022bc2:	83 c4 10             	add    esp,0x10
c0022bc5:	eb 7e                	jmp    c0022c45 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bd1:	85 c0                	test   eax,eax
c0022bd3:	74 10                	je     c0022be5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022bd5:	83 ec 0c             	sub    esp,0xc
c0022bd8:	68 83 44 02 c0       	push   0xc0024483
c0022bdd:	e8 e1 1d ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022be2:	83 c4 10             	add    esp,0x10
c0022be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022beb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bee:	85 c0                	test   eax,eax
c0022bf0:	75 33                	jne    c0022c25 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c0e:	83 f8 01             	cmp    eax,0x1
c0022c11:	74 21                	je     c0022c34 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c13:	83 ec 0c             	sub    esp,0xc
c0022c16:	68 5c 44 02 c0       	push   0xc002445c
c0022c1b:	e8 a3 1d ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022c20:	83 c4 10             	add    esp,0x10
c0022c23:	eb 0f                	jmp    c0022c34 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c2b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c32:	89 10                	mov    DWORD PTR [eax],edx
c0022c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c3b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c45:	83 c4 0c             	add    esp,0xc
c0022c48:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022c4a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c4e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c51:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022c52 <DriverlessDevice::~DriverlessDevice()>:
c0022c52:	ba 9c 4c 02 c0       	mov    edx,0xc0024c9c
c0022c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c5b:	89 10                	mov    DWORD PTR [eax],edx
c0022c5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c61:	50                   	push   eax
c0022c62:	e8 a1 b4 fe ff       	call   c000e108 <Device::~Device()>
c0022c67:	83 c4 04             	add    esp,0x4
c0022c6a:	90                   	nop
c0022c6b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022c6c <DriverlessDevice::~DriverlessDevice()>:
c0022c6c:	83 ec 0c             	sub    esp,0xc
c0022c6f:	83 ec 0c             	sub    esp,0xc
c0022c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c76:	e8 d7 ff ff ff       	call   c0022c52 <DriverlessDevice::~DriverlessDevice()>
c0022c7b:	83 c4 10             	add    esp,0x10
c0022c7e:	83 ec 08             	sub    esp,0x8
c0022c81:	68 58 01 00 00       	push   0x158
c0022c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c8a:	e8 8b 9f fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022c8f:	83 c4 10             	add    esp,0x10
c0022c92:	83 c4 0c             	add    esp,0xc
c0022c95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022c96 <LinkedList<Device>::addElement(Device*)>:
c0022c96:	83 ec 0c             	sub    esp,0xc
c0022c99:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022c9e:	75 10                	jne    c0022cb0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022ca0:	83 ec 0c             	sub    esp,0xc
c0022ca3:	68 00 44 02 c0       	push   0xc0024400
c0022ca8:	e8 16 1d ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022cad:	83 c4 10             	add    esp,0x10
c0022cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cb6:	85 c0                	test   eax,eax
c0022cb8:	74 3a                	je     c0022cf4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cc1:	85 c0                	test   eax,eax
c0022cc3:	74 2f                	je     c0022cf4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ccc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cd0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cde:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ce8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022cf2:	eb 68                	jmp    c0022d5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cfa:	85 c0                	test   eax,eax
c0022cfc:	75 4e                	jne    c0022d4c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d05:	85 c0                	test   eax,eax
c0022d07:	75 43                	jne    c0022d4c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d11:	89 10                	mov    DWORD PTR [eax],edx
c0022d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d25:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d36:	85 c0                	test   eax,eax
c0022d38:	74 22                	je     c0022d5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d3a:	83 ec 0c             	sub    esp,0xc
c0022d3d:	68 22 44 02 c0       	push   0xc0024422
c0022d42:	e8 7c 1c ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022d47:	83 c4 10             	add    esp,0x10
c0022d4a:	eb 10                	jmp    c0022d5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d4c:	83 ec 0c             	sub    esp,0xc
c0022d4f:	68 2c 44 02 c0       	push   0xc002442c
c0022d54:	e8 6a 1c ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022d59:	83 c4 10             	add    esp,0x10
c0022d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d63:	8d 50 01             	lea    edx,[eax+0x1]
c0022d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d6d:	90                   	nop
c0022d6e:	83 c4 0c             	add    esp,0xc
c0022d71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022d72 <LinkedList<Device>::LinkedList()>:
c0022d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d8b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022da7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022db2:	90                   	nop
c0022db3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dba:	85 c0                	test   eax,eax
c0022dbc:	75 0e                	jne    c0022dcc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dc5:	85 c0                	test   eax,eax
c0022dc7:	75 03                	jne    c0022dcc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dc9:	b0 01                	mov    al,0x1
c0022dcb:	c3                   	ret    
c0022dcc:	b0 00                	mov    al,0x0
c0022dce:	90                   	nop
c0022dcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022dd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dd6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022dd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022dd8:	83 ec 0c             	sub    esp,0xc
c0022ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022de1:	85 c0                	test   eax,eax
c0022de3:	75 17                	jne    c0022dfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022de5:	83 ec 0c             	sub    esp,0xc
c0022de8:	68 38 44 02 c0       	push   0xc0024438
c0022ded:	e8 d1 1b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022df2:	83 c4 10             	add    esp,0x10
c0022df5:	e9 92 00 00 00       	jmp    c0022e8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022dfa:	66 90                	xchg   ax,ax
c0022dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e06:	85 c0                	test   eax,eax
c0022e08:	0f 95 c0             	setne  al
c0022e0b:	84 c0                	test   al,al
c0022e0d:	74 11                	je     c0022e20 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022e0f:	83 ec 0c             	sub    esp,0xc
c0022e12:	68 83 44 02 c0       	push   0xc0024483
c0022e17:	e8 a7 1b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022e1c:	83 c4 10             	add    esp,0x10
c0022e1f:	90                   	nop
c0022e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e29:	85 c0                	test   eax,eax
c0022e2b:	0f 94 c0             	sete   al
c0022e2e:	84 c0                	test   al,al
c0022e30:	74 36                	je     c0022e68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e4e:	83 f8 01             	cmp    eax,0x1
c0022e51:	74 25                	je     c0022e78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e53:	83 ec 0c             	sub    esp,0xc
c0022e56:	68 5c 44 02 c0       	push   0xc002445c
c0022e5b:	e8 63 1b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022e60:	83 c4 10             	add    esp,0x10
c0022e63:	eb 13                	jmp    c0022e78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e65:	8d 76 00             	lea    esi,[esi+0x0]
c0022e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e6e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e75:	89 10                	mov    DWORD PTR [eax],edx
c0022e77:	90                   	nop
c0022e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e7f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e89:	8d 76 00             	lea    esi,[esi+0x0]
c0022e8c:	83 c4 0c             	add    esp,0xc
c0022e8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022e90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022e90:	83 ec 0c             	sub    esp,0xc
c0022e93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022e98:	75 12                	jne    c0022eac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022e9a:	83 ec 0c             	sub    esp,0xc
c0022e9d:	68 00 44 02 c0       	push   0xc0024400
c0022ea2:	e8 1c 1b ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022ea7:	83 c4 10             	add    esp,0x10
c0022eaa:	66 90                	xchg   ax,ax
c0022eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eb2:	85 c0                	test   eax,eax
c0022eb4:	74 36                	je     c0022eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ebd:	85 c0                	test   eax,eax
c0022ebf:	74 2b                	je     c0022eec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ec8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ecc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ed7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ee1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ee8:	eb 6a                	jmp    c0022f54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022eea:	66 90                	xchg   ax,ax
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef2:	85 c0                	test   eax,eax
c0022ef4:	75 4e                	jne    c0022f44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022efd:	85 c0                	test   eax,eax
c0022eff:	75 43                	jne    c0022f44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f09:	89 10                	mov    DWORD PTR [eax],edx
c0022f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f1d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f2b:	85 c0                	test   eax,eax
c0022f2d:	74 25                	je     c0022f54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f2f:	83 ec 0c             	sub    esp,0xc
c0022f32:	68 22 44 02 c0       	push   0xc0024422
c0022f37:	e8 87 1a ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022f3c:	83 c4 10             	add    esp,0x10
c0022f3f:	eb 13                	jmp    c0022f54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f41:	8d 76 00             	lea    esi,[esi+0x0]
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	68 2c 44 02 c0       	push   0xc002442c
c0022f4c:	e8 72 1a ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f5b:	8d 50 01             	lea    edx,[eax+0x1]
c0022f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f65:	90                   	nop
c0022f66:	83 c4 0c             	add    esp,0xc
c0022f69:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022f6c <ACPI::~ACPI()>:
c0022f6c:	83 ec 0c             	sub    esp,0xc
c0022f6f:	ba 24 57 02 c0       	mov    edx,0xc0025724
c0022f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f78:	89 10                	mov    DWORD PTR [eax],edx
c0022f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7e:	83 ec 0c             	sub    esp,0xc
c0022f81:	50                   	push   eax
c0022f82:	e8 81 b1 fe ff       	call   c000e108 <Device::~Device()>
c0022f87:	83 c4 10             	add    esp,0x10
c0022f8a:	90                   	nop
c0022f8b:	83 c4 0c             	add    esp,0xc
c0022f8e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022f90 <ACPI::~ACPI()>:
c0022f90:	83 ec 0c             	sub    esp,0xc
c0022f93:	83 ec 0c             	sub    esp,0xc
c0022f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f9a:	e8 cd ff ff ff       	call   c0022f6c <ACPI::~ACPI()>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	83 ec 08             	sub    esp,0x8
c0022fa5:	68 64 12 00 00       	push   0x1264
c0022faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fae:	e8 67 9c fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022fb3:	83 c4 10             	add    esp,0x10
c0022fb6:	83 c4 0c             	add    esp,0xc
c0022fb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022fbc <LinkedList<Device>::~LinkedList()>:
c0022fbc:	90                   	nop
c0022fbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022fc0 <LinkedList<Device>::isEmpty()>:
c0022fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fc6:	85 c0                	test   eax,eax
c0022fc8:	75 0e                	jne    c0022fd8 <LinkedList<Device>::isEmpty()+0x18>
c0022fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022fd1:	85 c0                	test   eax,eax
c0022fd3:	75 03                	jne    c0022fd8 <LinkedList<Device>::isEmpty()+0x18>
c0022fd5:	b0 01                	mov    al,0x1
c0022fd7:	c3                   	ret    
c0022fd8:	b0 00                	mov    al,0x0
c0022fda:	90                   	nop
c0022fdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022fdc <LinkedList<Device>::getFirstElement()>:
c0022fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022fe4 <LinkedList<Device>::removeFirst()>:
c0022fe4:	83 ec 0c             	sub    esp,0xc
c0022fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fed:	85 c0                	test   eax,eax
c0022fef:	75 17                	jne    c0023008 <LinkedList<Device>::removeFirst()+0x24>
c0022ff1:	83 ec 0c             	sub    esp,0xc
c0022ff4:	68 38 44 02 c0       	push   0xc0024438
c0022ff9:	e8 c5 19 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0022ffe:	83 c4 10             	add    esp,0x10
c0023001:	e9 92 00 00 00       	jmp    c0023098 <LinkedList<Device>::removeFirst()+0xb4>
c0023006:	66 90                	xchg   ax,ax
c0023008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002300f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023015:	85 c0                	test   eax,eax
c0023017:	74 13                	je     c002302c <LinkedList<Device>::removeFirst()+0x48>
c0023019:	83 ec 0c             	sub    esp,0xc
c002301c:	68 83 44 02 c0       	push   0xc0024483
c0023021:	e8 9d 19 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c0023026:	83 c4 10             	add    esp,0x10
c0023029:	8d 76 00             	lea    esi,[esi+0x0]
c002302c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023030:	8b 00                	mov    eax,DWORD PTR [eax]
c0023032:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023038:	85 c0                	test   eax,eax
c002303a:	75 34                	jne    c0023070 <LinkedList<Device>::removeFirst()+0x8c>
c002303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023040:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023055:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023058:	83 f8 01             	cmp    eax,0x1
c002305b:	74 27                	je     c0023084 <LinkedList<Device>::removeFirst()+0xa0>
c002305d:	83 ec 0c             	sub    esp,0xc
c0023060:	68 5c 44 02 c0       	push   0xc002445c
c0023065:	e8 59 19 ff ff       	call   c00149c3 <Krnl::panic(char const*)>
c002306a:	83 c4 10             	add    esp,0x10
c002306d:	eb 15                	jmp    c0023084 <LinkedList<Device>::removeFirst()+0xa0>
c002306f:	90                   	nop
c0023070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023074:	8b 00                	mov    eax,DWORD PTR [eax]
c0023076:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023080:	89 10                	mov    DWORD PTR [eax],edx
c0023082:	66 90                	xchg   ax,ax
c0023084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023088:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002308b:	8d 50 ff             	lea    edx,[eax-0x1]
c002308e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023092:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023095:	8d 76 00             	lea    esi,[esi+0x0]
c0023098:	83 c4 0c             	add    esp,0xc
c002309b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002309c <CPU::~CPU()>:
c002309c:	83 ec 0c             	sub    esp,0xc
c002309f:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c00230a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a8:	89 10                	mov    DWORD PTR [eax],edx
c00230aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ae:	83 ec 0c             	sub    esp,0xc
c00230b1:	50                   	push   eax
c00230b2:	e8 51 b0 fe ff       	call   c000e108 <Device::~Device()>
c00230b7:	83 c4 10             	add    esp,0x10
c00230ba:	90                   	nop
c00230bb:	83 c4 0c             	add    esp,0xc
c00230be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00230c0 <CPU::~CPU()>:
c00230c0:	83 ec 0c             	sub    esp,0xc
c00230c3:	83 ec 0c             	sub    esp,0xc
c00230c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230ca:	e8 cd ff ff ff       	call   c002309c <CPU::~CPU()>
c00230cf:	83 c4 10             	add    esp,0x10
c00230d2:	83 ec 08             	sub    esp,0x8
c00230d5:	68 98 11 00 00       	push   0x1198
c00230da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230de:	e8 37 9b fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00230e3:	83 c4 10             	add    esp,0x10
c00230e6:	83 c4 0c             	add    esp,0xc
c00230e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00230ec <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00230ec:	90                   	nop
c00230ed:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00230f0 <ThreadControlBlock::ThreadControlBlock()>:
c00230f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230f4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00230fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230ff:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002310a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023115:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002311c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023120:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002312b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002312f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023133:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023137:	90                   	nop
c0023138:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002313c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002313c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023140:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002314a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023155:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002315c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002316a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023175:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002317c:	90                   	nop
c002317d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023180 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023184:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023187:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023188 <Vm::_FPUState::_FPUState()>:
c0023188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002318c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023193:	90                   	nop
c0023194:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023196 <PCI::~PCI()>:
c0023196:	83 ec 0c             	sub    esp,0xc
c0023199:	ba 08 69 02 c0       	mov    edx,0xc0026908
c002319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a2:	89 10                	mov    DWORD PTR [eax],edx
c00231a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231a8:	83 ec 0c             	sub    esp,0xc
c00231ab:	50                   	push   eax
c00231ac:	e8 27 a9 fe ff       	call   c000dad8 <Bus::~Bus()>
c00231b1:	83 c4 10             	add    esp,0x10
c00231b4:	90                   	nop
c00231b5:	83 c4 0c             	add    esp,0xc
c00231b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00231ba <PCI::~PCI()>:
c00231ba:	83 ec 0c             	sub    esp,0xc
c00231bd:	83 ec 0c             	sub    esp,0xc
c00231c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c4:	e8 cd ff ff ff       	call   c0023196 <PCI::~PCI()>
c00231c9:	83 c4 10             	add    esp,0x10
c00231cc:	83 ec 08             	sub    esp,0x8
c00231cf:	68 5c 01 00 00       	push   0x15c
c00231d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d8:	e8 3d 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00231dd:	83 c4 10             	add    esp,0x10
c00231e0:	83 c4 0c             	add    esp,0xc
c00231e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00231e4 <IDE::~IDE()>:
c00231e4:	83 ec 0c             	sub    esp,0xc
c00231e7:	ba bc 69 02 c0       	mov    edx,0xc00269bc
c00231ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f0:	89 10                	mov    DWORD PTR [eax],edx
c00231f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f6:	83 ec 0c             	sub    esp,0xc
c00231f9:	50                   	push   eax
c00231fa:	e8 21 b4 fe ff       	call   c000e620 <HardDiskController::~HardDiskController()>
c00231ff:	83 c4 10             	add    esp,0x10
c0023202:	90                   	nop
c0023203:	83 c4 0c             	add    esp,0xc
c0023206:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023208 <IDE::~IDE()>:
c0023208:	83 ec 0c             	sub    esp,0xc
c002320b:	83 ec 0c             	sub    esp,0xc
c002320e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023212:	e8 cd ff ff ff       	call   c00231e4 <IDE::~IDE()>
c0023217:	83 c4 10             	add    esp,0x10
c002321a:	83 ec 08             	sub    esp,0x8
c002321d:	68 70 02 00 00       	push   0x270
c0023222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023226:	e8 ef 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002322b:	83 c4 10             	add    esp,0x10
c002322e:	83 c4 0c             	add    esp,0xc
c0023231:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023232 <SATABus::~SATABus()>:
c0023232:	83 ec 0c             	sub    esp,0xc
c0023235:	ba ec 6a 02 c0       	mov    edx,0xc0026aec
c002323a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002323e:	89 10                	mov    DWORD PTR [eax],edx
c0023240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	50                   	push   eax
c0023248:	e8 d3 b3 fe ff       	call   c000e620 <HardDiskController::~HardDiskController()>
c002324d:	83 c4 10             	add    esp,0x10
c0023250:	90                   	nop
c0023251:	83 c4 0c             	add    esp,0xc
c0023254:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023256 <SATABus::~SATABus()>:
c0023256:	83 ec 0c             	sub    esp,0xc
c0023259:	83 ec 0c             	sub    esp,0xc
c002325c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023260:	e8 cd ff ff ff       	call   c0023232 <SATABus::~SATABus()>
c0023265:	83 c4 10             	add    esp,0x10
c0023268:	83 ec 08             	sub    esp,0x8
c002326b:	68 64 01 00 00       	push   0x164
c0023270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023274:	e8 a1 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023279:	83 c4 10             	add    esp,0x10
c002327c:	83 c4 0c             	add    esp,0xc
c002327f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023280 <ATA::~ATA()>:
c0023280:	83 ec 0c             	sub    esp,0xc
c0023283:	ba 64 6b 02 c0       	mov    edx,0xc0026b64
c0023288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328c:	89 10                	mov    DWORD PTR [eax],edx
c002328e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023292:	83 ec 0c             	sub    esp,0xc
c0023295:	50                   	push   eax
c0023296:	e8 67 b4 fe ff       	call   c000e702 <PhysicalDisk::~PhysicalDisk()>
c002329b:	83 c4 10             	add    esp,0x10
c002329e:	90                   	nop
c002329f:	83 c4 0c             	add    esp,0xc
c00232a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00232a4 <ATA::~ATA()>:
c00232a4:	83 ec 0c             	sub    esp,0xc
c00232a7:	83 ec 0c             	sub    esp,0xc
c00232aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232ae:	e8 cd ff ff ff       	call   c0023280 <ATA::~ATA()>
c00232b3:	83 c4 10             	add    esp,0x10
c00232b6:	83 ec 08             	sub    esp,0x8
c00232b9:	68 7c 01 00 00       	push   0x17c
c00232be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232c2:	e8 53 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00232c7:	83 c4 10             	add    esp,0x10
c00232ca:	83 c4 0c             	add    esp,0xc
c00232cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00232ce <ATAPI::~ATAPI()>:
c00232ce:	83 ec 0c             	sub    esp,0xc
c00232d1:	ba c8 6b 02 c0       	mov    edx,0xc0026bc8
c00232d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232da:	89 10                	mov    DWORD PTR [eax],edx
c00232dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e0:	83 ec 0c             	sub    esp,0xc
c00232e3:	50                   	push   eax
c00232e4:	e8 19 b4 fe ff       	call   c000e702 <PhysicalDisk::~PhysicalDisk()>
c00232e9:	83 c4 10             	add    esp,0x10
c00232ec:	90                   	nop
c00232ed:	83 c4 0c             	add    esp,0xc
c00232f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00232f2 <ATAPI::~ATAPI()>:
c00232f2:	83 ec 0c             	sub    esp,0xc
c00232f5:	83 ec 0c             	sub    esp,0xc
c00232f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232fc:	e8 cd ff ff ff       	call   c00232ce <ATAPI::~ATAPI()>
c0023301:	83 c4 10             	add    esp,0x10
c0023304:	83 ec 08             	sub    esp,0x8
c0023307:	68 84 01 00 00       	push   0x184
c002330c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023310:	e8 05 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023315:	83 c4 10             	add    esp,0x10
c0023318:	83 c4 0c             	add    esp,0xc
c002331b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002331c <SATA::~SATA()>:
c002331c:	83 ec 0c             	sub    esp,0xc
c002331f:	ba 04 6e 02 c0       	mov    edx,0xc0026e04
c0023324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023328:	89 10                	mov    DWORD PTR [eax],edx
c002332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332e:	83 ec 0c             	sub    esp,0xc
c0023331:	50                   	push   eax
c0023332:	e8 cb b3 fe ff       	call   c000e702 <PhysicalDisk::~PhysicalDisk()>
c0023337:	83 c4 10             	add    esp,0x10
c002333a:	90                   	nop
c002333b:	83 c4 0c             	add    esp,0xc
c002333e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023340 <SATA::~SATA()>:
c0023340:	83 ec 0c             	sub    esp,0xc
c0023343:	83 ec 0c             	sub    esp,0xc
c0023346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334a:	e8 cd ff ff ff       	call   c002331c <SATA::~SATA()>
c002334f:	83 c4 10             	add    esp,0x10
c0023352:	83 ec 08             	sub    esp,0x8
c0023355:	68 7c 01 00 00       	push   0x17c
c002335a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335e:	e8 b7 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023363:	83 c4 10             	add    esp,0x10
c0023366:	83 c4 0c             	add    esp,0xc
c0023369:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002336a <SATAPI::~SATAPI()>:
c002336a:	83 ec 0c             	sub    esp,0xc
c002336d:	ba 94 6f 02 c0       	mov    edx,0xc0026f94
c0023372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023376:	89 10                	mov    DWORD PTR [eax],edx
c0023378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337c:	83 ec 0c             	sub    esp,0xc
c002337f:	50                   	push   eax
c0023380:	e8 7d b3 fe ff       	call   c000e702 <PhysicalDisk::~PhysicalDisk()>
c0023385:	83 c4 10             	add    esp,0x10
c0023388:	90                   	nop
c0023389:	83 c4 0c             	add    esp,0xc
c002338c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002338e <SATAPI::~SATAPI()>:
c002338e:	83 ec 0c             	sub    esp,0xc
c0023391:	83 ec 0c             	sub    esp,0xc
c0023394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023398:	e8 cd ff ff ff       	call   c002336a <SATAPI::~SATAPI()>
c002339d:	83 c4 10             	add    esp,0x10
c00233a0:	83 ec 08             	sub    esp,0x8
c00233a3:	68 84 01 00 00       	push   0x184
c00233a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233ac:	e8 69 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00233b1:	83 c4 10             	add    esp,0x10
c00233b4:	83 c4 0c             	add    esp,0xc
c00233b7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00233b8 <AVX::~AVX()>:
c00233b8:	83 ec 0c             	sub    esp,0xc
c00233bb:	ba d4 6f 02 c0       	mov    edx,0xc0026fd4
c00233c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c4:	89 10                	mov    DWORD PTR [eax],edx
c00233c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	50                   	push   eax
c00233ce:	e8 b5 b3 fe ff       	call   c000e788 <FPU::~FPU()>
c00233d3:	83 c4 10             	add    esp,0x10
c00233d6:	90                   	nop
c00233d7:	83 c4 0c             	add    esp,0xc
c00233da:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00233dc <AVX::~AVX()>:
c00233dc:	83 ec 0c             	sub    esp,0xc
c00233df:	83 ec 0c             	sub    esp,0xc
c00233e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233e6:	e8 cd ff ff ff       	call   c00233b8 <AVX::~AVX()>
c00233eb:	83 c4 10             	add    esp,0x10
c00233ee:	83 ec 08             	sub    esp,0x8
c00233f1:	68 58 01 00 00       	push   0x158
c00233f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233fa:	e8 1b 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00233ff:	83 c4 10             	add    esp,0x10
c0023402:	83 c4 0c             	add    esp,0xc
c0023405:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023408 <MMX::~MMX()>:
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	ba 14 70 02 c0       	mov    edx,0xc0027014
c0023410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023414:	89 10                	mov    DWORD PTR [eax],edx
c0023416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002341a:	83 ec 0c             	sub    esp,0xc
c002341d:	50                   	push   eax
c002341e:	e8 65 b3 fe ff       	call   c000e788 <FPU::~FPU()>
c0023423:	83 c4 10             	add    esp,0x10
c0023426:	90                   	nop
c0023427:	83 c4 0c             	add    esp,0xc
c002342a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002342c <MMX::~MMX()>:
c002342c:	83 ec 0c             	sub    esp,0xc
c002342f:	83 ec 0c             	sub    esp,0xc
c0023432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023436:	e8 cd ff ff ff       	call   c0023408 <MMX::~MMX()>
c002343b:	83 c4 10             	add    esp,0x10
c002343e:	83 ec 08             	sub    esp,0x8
c0023441:	68 58 01 00 00       	push   0x158
c0023446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002344a:	e8 cb 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002344f:	83 c4 10             	add    esp,0x10
c0023452:	83 c4 0c             	add    esp,0xc
c0023455:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023458 <SSE::~SSE()>:
c0023458:	83 ec 0c             	sub    esp,0xc
c002345b:	ba 54 70 02 c0       	mov    edx,0xc0027054
c0023460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023464:	89 10                	mov    DWORD PTR [eax],edx
c0023466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346a:	83 ec 0c             	sub    esp,0xc
c002346d:	50                   	push   eax
c002346e:	e8 15 b3 fe ff       	call   c000e788 <FPU::~FPU()>
c0023473:	83 c4 10             	add    esp,0x10
c0023476:	90                   	nop
c0023477:	83 c4 0c             	add    esp,0xc
c002347a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002347c <SSE::~SSE()>:
c002347c:	83 ec 0c             	sub    esp,0xc
c002347f:	83 ec 0c             	sub    esp,0xc
c0023482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023486:	e8 cd ff ff ff       	call   c0023458 <SSE::~SSE()>
c002348b:	83 c4 10             	add    esp,0x10
c002348e:	83 ec 08             	sub    esp,0x8
c0023491:	68 58 01 00 00       	push   0x158
c0023496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002349a:	e8 7b 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002349f:	83 c4 10             	add    esp,0x10
c00234a2:	83 c4 0c             	add    esp,0xc
c00234a5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00234a8 <x87::~x87()>:
c00234a8:	83 ec 0c             	sub    esp,0xc
c00234ab:	ba 94 70 02 c0       	mov    edx,0xc0027094
c00234b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b4:	89 10                	mov    DWORD PTR [eax],edx
c00234b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ba:	83 ec 0c             	sub    esp,0xc
c00234bd:	50                   	push   eax
c00234be:	e8 c5 b2 fe ff       	call   c000e788 <FPU::~FPU()>
c00234c3:	83 c4 10             	add    esp,0x10
c00234c6:	90                   	nop
c00234c7:	83 c4 0c             	add    esp,0xc
c00234ca:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00234cc <x87::~x87()>:
c00234cc:	83 ec 0c             	sub    esp,0xc
c00234cf:	83 ec 0c             	sub    esp,0xc
c00234d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234d6:	e8 cd ff ff ff       	call   c00234a8 <x87::~x87()>
c00234db:	83 c4 10             	add    esp,0x10
c00234de:	83 ec 08             	sub    esp,0x8
c00234e1:	68 58 01 00 00       	push   0x158
c00234e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ea:	e8 2b 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00234ef:	83 c4 10             	add    esp,0x10
c00234f2:	83 c4 0c             	add    esp,0xc
c00234f5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00234f6 <IOAPIC::~IOAPIC()>:
c00234f6:	83 ec 0c             	sub    esp,0xc
c00234f9:	ba ec 71 02 c0       	mov    edx,0xc00271ec
c00234fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023502:	89 10                	mov    DWORD PTR [eax],edx
c0023504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023508:	83 ec 0c             	sub    esp,0xc
c002350b:	50                   	push   eax
c002350c:	e8 f7 ab fe ff       	call   c000e108 <Device::~Device()>
c0023511:	83 c4 10             	add    esp,0x10
c0023514:	90                   	nop
c0023515:	83 c4 0c             	add    esp,0xc
c0023518:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002351a <IOAPIC::~IOAPIC()>:
c002351a:	83 ec 0c             	sub    esp,0xc
c002351d:	83 ec 0c             	sub    esp,0xc
c0023520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023524:	e8 cd ff ff ff       	call   c00234f6 <IOAPIC::~IOAPIC()>
c0023529:	83 c4 10             	add    esp,0x10
c002352c:	83 ec 08             	sub    esp,0x8
c002352f:	68 68 01 00 00       	push   0x168
c0023534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023538:	e8 dd 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002353d:	83 c4 10             	add    esp,0x10
c0023540:	83 c4 0c             	add    esp,0xc
c0023543:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023544 <APIC::~APIC()>:
c0023544:	83 ec 0c             	sub    esp,0xc
c0023547:	ba a4 71 02 c0       	mov    edx,0xc00271a4
c002354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023550:	89 10                	mov    DWORD PTR [eax],edx
c0023552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023556:	83 ec 0c             	sub    esp,0xc
c0023559:	50                   	push   eax
c002355a:	e8 fd b6 fe ff       	call   c000ec5c <InterruptController::~InterruptController()>
c002355f:	83 c4 10             	add    esp,0x10
c0023562:	90                   	nop
c0023563:	83 c4 0c             	add    esp,0xc
c0023566:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023568 <APIC::~APIC()>:
c0023568:	83 ec 0c             	sub    esp,0xc
c002356b:	83 ec 0c             	sub    esp,0xc
c002356e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023572:	e8 cd ff ff ff       	call   c0023544 <APIC::~APIC()>
c0023577:	83 c4 10             	add    esp,0x10
c002357a:	83 ec 08             	sub    esp,0x8
c002357d:	68 58 21 00 00       	push   0x2158
c0023582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023586:	e8 8f 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002358b:	83 c4 10             	add    esp,0x10
c002358e:	83 c4 0c             	add    esp,0xc
c0023591:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023592 <PIC::~PIC()>:
c0023592:	83 ec 0c             	sub    esp,0xc
c0023595:	ba 3c 72 02 c0       	mov    edx,0xc002723c
c002359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359e:	89 10                	mov    DWORD PTR [eax],edx
c00235a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a4:	83 ec 0c             	sub    esp,0xc
c00235a7:	50                   	push   eax
c00235a8:	e8 af b6 fe ff       	call   c000ec5c <InterruptController::~InterruptController()>
c00235ad:	83 c4 10             	add    esp,0x10
c00235b0:	90                   	nop
c00235b1:	83 c4 0c             	add    esp,0xc
c00235b4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00235b6 <PIC::~PIC()>:
c00235b6:	83 ec 0c             	sub    esp,0xc
c00235b9:	83 ec 0c             	sub    esp,0xc
c00235bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235c0:	e8 cd ff ff ff       	call   c0023592 <PIC::~PIC()>
c00235c5:	83 c4 10             	add    esp,0x10
c00235c8:	83 ec 08             	sub    esp,0x8
c00235cb:	68 58 21 00 00       	push   0x2158
c00235d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235d4:	e8 41 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00235d9:	83 c4 10             	add    esp,0x10
c00235dc:	83 c4 0c             	add    esp,0xc
c00235df:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00235e0 <APICTimer::~APICTimer()>:
c00235e0:	83 ec 0c             	sub    esp,0xc
c00235e3:	ba 90 72 02 c0       	mov    edx,0xc0027290
c00235e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ec:	89 10                	mov    DWORD PTR [eax],edx
c00235ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235f2:	83 ec 0c             	sub    esp,0xc
c00235f5:	50                   	push   eax
c00235f6:	e8 b1 d4 fe ff       	call   c0010aac <Timer::~Timer()>
c00235fb:	83 c4 10             	add    esp,0x10
c00235fe:	90                   	nop
c00235ff:	83 c4 0c             	add    esp,0xc
c0023602:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023604 <APICTimer::~APICTimer()>:
c0023604:	83 ec 0c             	sub    esp,0xc
c0023607:	83 ec 0c             	sub    esp,0xc
c002360a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002360e:	e8 cd ff ff ff       	call   c00235e0 <APICTimer::~APICTimer()>
c0023613:	83 c4 10             	add    esp,0x10
c0023616:	83 ec 08             	sub    esp,0x8
c0023619:	68 60 01 00 00       	push   0x160
c002361e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023622:	e8 f3 95 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023627:	83 c4 10             	add    esp,0x10
c002362a:	83 c4 0c             	add    esp,0xc
c002362d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023630 <PIT::~PIT()>:
c0023630:	83 ec 0c             	sub    esp,0xc
c0023633:	ba e0 72 02 c0       	mov    edx,0xc00272e0
c0023638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002363c:	89 10                	mov    DWORD PTR [eax],edx
c002363e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023642:	83 ec 0c             	sub    esp,0xc
c0023645:	50                   	push   eax
c0023646:	e8 61 d4 fe ff       	call   c0010aac <Timer::~Timer()>
c002364b:	83 c4 10             	add    esp,0x10
c002364e:	90                   	nop
c002364f:	83 c4 0c             	add    esp,0xc
c0023652:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023654 <PIT::~PIT()>:
c0023654:	83 ec 0c             	sub    esp,0xc
c0023657:	83 ec 0c             	sub    esp,0xc
c002365a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002365e:	e8 cd ff ff ff       	call   c0023630 <PIT::~PIT()>
c0023663:	83 c4 10             	add    esp,0x10
c0023666:	83 ec 08             	sub    esp,0x8
c0023669:	68 5c 01 00 00       	push   0x15c
c002366e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023672:	e8 a3 95 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023677:	83 c4 10             	add    esp,0x10
c002367a:	83 c4 0c             	add    esp,0xc
c002367d:	c3                   	ret    
