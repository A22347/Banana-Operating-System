
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 fb f3 00 00       	call   c000f41b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 50 02 00       	call   c0025108 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c8 5b 02 c0       	mov    ebx,0xc0025bc8
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d4 5b 02 c0    	cmp    ebx,0xc0025bd4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 0c 9a 02 c0       	mov    eax,0xc0029a0c
c0000049:	3d 0c 9a 02 c0       	cmp    eax,0xc0029a0c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 0c 9a 02 c0       	push   0xc0029a0c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 0c 9a 02 c0       	mov    eax,0xc0029a0c
c0000075:	2d 0c 9a 02 c0       	sub    eax,0xc0029a0c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 0c 9a 02 c0       	push   0xc0029a0c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 3c a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a03c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb dc 5b 02 c0       	mov    ebx,0xc0025bdc
c00000bb:	81 eb d8 5b 02 c0    	sub    ebx,0xc0025bd8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d8 5b 02 c0       	mov    esi,0xc0025bd8
c00000ca:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 0c 9a 02 c0       	push   0xc0029a0c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 3c a0 02 c0 01 	mov    BYTE PTR ds:0xc002a03c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 44 a0 02 c0       	push   0xc002a044
c000012c:	68 0c 9a 02 c0       	push   0xc0029a0c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 e6 b1 01 00       	call   c001b538 <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 c9 1c 01 00       	call   c0012033 <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 c4 b1 01 00       	call   c001b538 <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 ba b5 01 00       	call   c001b94d <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 68 bb 01 00       	call   c001bf04 <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 70 a4 02 c0 	lgdtd  ds:0xc002a470
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 4b 39 01 00       	call   c0013ecb <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 5c a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a05c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 5c a0 02 c0       	mov    ds:0xc002a05c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 5c a0 02 c0       	mov    eax,ds:0xc002a05c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 5c a0 02 c0    	mov    DWORD PTR ds:0xc002a05c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 e0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda420],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 e0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda420],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 e0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda420],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d 60 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a060
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d 60 a0 02 c0    	mov    DWORD PTR ds:0xc002a060,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 64 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5f9c]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 64 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f9c],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d 60 a0 02 c0    	mov    DWORD PTR ds:0xc002a060,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 8c a0 02 c0    	cmp    DWORD PTR ds:0xc002a08c,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d 9c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a09c
c0000c02:	c7 42 0c 94 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a094
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 60 a0 02 c0 02 	test   BYTE PTR ds:0xc002a060,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 a0 e2 00 00       	call   c000ef83 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 e2 e1 00 00       	call   c000ef83 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 cc e1 00 00       	call   c000ef83 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 a8 e1 00 00       	call   c000ef83 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d 60 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a060
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 64 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5f9c]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 64 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5f9c],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 94 a0 02 c0 	lea    edx,[eax*8-0x3ffd5f6c]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d a0 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a0
c0000f84:	81 fb 94 a0 02 c0    	cmp    ebx,0xc002a094
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d 94 a0 02 c0       	cmp    eax,0xc002a094
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d 90 a0 02 c0    	cmp    DWORD PTR ds:0xc002a090,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 9c a0 02 c0       	mov    ds:0xc002a09c,eax
c0000fc0:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c0000fc5:	a3 90 a0 02 c0       	mov    ds:0xc002a090,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 94 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a094
c0000fd3:	c7 40 0c 94 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a094
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 94 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a094
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 58 a0 02 c0 	lea    ebp,[edx*4-0x3ffd5fa8]
c0001024:	8b 14 95 60 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5fa0]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 60 a0 02 c0 	lea    ecx,[edx*4-0x3ffd5fa0]
c000103f:	8b 14 95 60 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5fa0]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd 94 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5c6c],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 94 a0 02 c0 	lea    eax,[eax*8-0x3ffd5f6c]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,ecx
c00010f9:	89 0d a0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0a0,ecx
c00010ff:	c7 41 08 94 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a094
c0001106:	c7 41 0c 94 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a094
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd 8c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5f74]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d 94 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5c6c]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d 94 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5c6c]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 8c a0 02 c0 	lea    edx,[eax*4-0x3ffd5f74]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d 94 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5c6c],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d 9c a0 02 c0    	mov    DWORD PTR ds:0xc002a09c,edi
c00011cc:	89 3d a0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0a0,edi
c00011d2:	c7 47 08 94 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a094
c00011d9:	c7 47 0c 94 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a094
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d 90 a0 02 c0    	mov    DWORD PTR ds:0xc002a090,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 8c a0 02 c0       	mov    eax,ds:0xc002a08c
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba 60 a0 02 c0       	mov    edx,0xc002a060
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d b4 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a3b4
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 b4 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a3b4,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d b4 a3 02 c0    	mov    DWORD PTR ds:0xc002a3b4,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 8c a0 02 c0    	cmp    DWORD PTR ds:0xc002a08c,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d 8c a0 02 c0    	mov    DWORD PTR ds:0xc002a08c,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 bc a3 02 c0    	push   DWORD PTR ds:0xc002a3bc
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d 60 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a060,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 bc a3 02 c0       	mov    eax,ds:0xc002a3bc
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d 8c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a08c,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 8c a0 02 c0       	mov    eax,ds:0xc002a08c
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 64 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5f9c]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 94 a0 02 c0       	mov    eax,0xc002a094
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d 8c a3 02 c0       	cmp    eax,0xc002a38c
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 c8 a3 02 c0       	mov    eax,ds:0xc002a3c8
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 b0 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3b0
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 c4 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3c4
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 d4 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a3d4
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 60 a0 02 c0       	mov    eax,0xc002a060
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 e4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda31c]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 60 a0 02 c0       	mov    eax,ds:0xc002a060
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 60 a0 02 c0       	mov    ds:0xc002a060,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d a4 a3 02 c0    	mov    DWORD PTR ds:0xc002a3a4,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d a8 a3 02 c0    	mov    DWORD PTR ds:0xc002a3a8,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d ac a3 02 c0    	mov    DWORD PTR ds:0xc002a3ac,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 b4 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a3b4,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 a0 cb 01 00       	jmp    c001e56e <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 d1 cb 01 00       	jmp    c001e5b5 <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 a0 ba 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4560]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 f9 cb 01 00       	jmp    c001e5fc <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 86 17 02 00       	call   c002346c <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 00 5e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda200]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 00 5e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda200]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba 14 8b 02 c0       	mov    edx,0xc0028b14
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba 2c 5e 02 c0       	mov    edx,0xc0025e2c
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 00 a4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c00]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 e0 a3 02 c0    	mov    ax,ds:0xc002a3e0
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 e0 a3 02 c0    	mov    ds:0xc002a3e0,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 83 05 02 00       	call   c002346c <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 32 5e 02 c0       	mov    eax,0xc0025e32
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad 80 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda280]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 3b 5e 02 c0       	mov    eax,0xc0025e3b
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 00 5e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda200]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 4e ef 01 00       	call   c002346c <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 00 a4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c00]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 00 a4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c00],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 15 d9 01 00       	call   c002346c <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 fb d8 01 00       	call   c002346c <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 57 5d 02 c0       	mov    eax,0xc0025d57
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 00 a4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c00]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 40 5d 02 c0       	mov    esi,0xc0025d40
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 3e c0 01 00       	call   c002346c <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba 20 5d 02 c0       	mov    edx,0xc0025d20
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba 30 5d 02 c0       	mov    edx,0xc0025d30
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 4e 5e 02 c0       	mov    edx,0xc0025e4e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba 62 5e 02 c0       	mov    edx,0xc0025e62
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 e7 6e 00 00       	call   c000f12c <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 e1 6e 00 00       	call   c000f13c <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c 80 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026180
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 80 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026180
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 80 5f 02 c0       	mov    eax,0xc0025f80
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 80 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda180]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <is_bad_src_ratio>:
c00084b6:	83 ec 1c             	sub    esp,0x1c
c00084b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00084c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00084c9:	b8 00 00 00 00       	mov    eax,0x0
c00084ce:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00084d3:	52                   	push   edx
c00084d4:	50                   	push   eax
c00084d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084dd:	e8 5d ca 01 00       	call   c0024f3f <__ltdf2>
c00084e2:	83 c4 10             	add    esp,0x10
c00084e5:	85 c0                	test   eax,eax
c00084e7:	78 20                	js     c0008509 <is_bad_src_ratio+0x53>
c00084e9:	b8 00 00 00 00       	mov    eax,0x0
c00084ee:	ba 00 00 70 40       	mov    edx,0x40700000
c00084f3:	52                   	push   edx
c00084f4:	50                   	push   eax
c00084f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084fd:	e8 1f ca 01 00       	call   c0024f21 <__gtdf2>
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	85 c0                	test   eax,eax
c0008507:	7e 07                	jle    c0008510 <is_bad_src_ratio+0x5a>
c0008509:	b8 01 00 00 00       	mov    eax,0x1
c000850e:	eb 05                	jmp    c0008515 <is_bad_src_ratio+0x5f>
c0008510:	b8 00 00 00 00       	mov    eax,0x0
c0008515:	83 c4 1c             	add    esp,0x1c
c0008518:	c3                   	ret    

c0008519 <psrc_set_converter>:
c0008519:	56                   	push   esi
c000851a:	89 d6                	mov    esi,edx
c000851c:	53                   	push   ebx
c000851d:	89 c3                	mov    ebx,eax
c000851f:	83 ec 0c             	sub    esp,0xc
c0008522:	52                   	push   edx
c0008523:	50                   	push   eax
c0008524:	e8 58 51 00 00       	call   c000d681 <sinc_set_converter>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	85 c0                	test   eax,eax
c000852e:	74 25                	je     c0008555 <psrc_set_converter+0x3c>
c0008530:	50                   	push   eax
c0008531:	50                   	push   eax
c0008532:	56                   	push   esi
c0008533:	53                   	push   ebx
c0008534:	e8 2a 59 00 00       	call   c000de63 <zoh_set_converter>
c0008539:	83 c4 10             	add    esp,0x10
c000853c:	85 c0                	test   eax,eax
c000853e:	74 15                	je     c0008555 <psrc_set_converter+0x3c>
c0008540:	51                   	push   ecx
c0008541:	51                   	push   ecx
c0008542:	56                   	push   esi
c0008543:	53                   	push   ebx
c0008544:	e8 77 10 00 00       	call   c00095c0 <linear_set_converter>
c0008549:	83 c4 10             	add    esp,0x10
c000854c:	ba 0a 00 00 00       	mov    edx,0xa
c0008551:	85 c0                	test   eax,eax
c0008553:	75 02                	jne    c0008557 <psrc_set_converter+0x3e>
c0008555:	31 d2                	xor    edx,edx
c0008557:	89 d0                	mov    eax,edx
c0008559:	5a                   	pop    edx
c000855a:	5b                   	pop    ebx
c000855b:	5e                   	pop    esi
c000855c:	c3                   	ret    

c000855d <src_delete>:
c000855d:	53                   	push   ebx
c000855e:	83 ec 08             	sub    esp,0x8
c0008561:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008565:	85 db                	test   ebx,ebx
c0008567:	74 29                	je     c0008592 <src_delete+0x35>
c0008569:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856c:	85 c0                	test   eax,eax
c000856e:	74 0c                	je     c000857c <src_delete+0x1f>
c0008570:	83 ec 0c             	sub    esp,0xc
c0008573:	50                   	push   eax
c0008574:	e8 c3 6b 00 00       	call   c000f13c <free>
c0008579:	83 c4 10             	add    esp,0x10
c000857c:	50                   	push   eax
c000857d:	6a 3c                	push   0x3c
c000857f:	6a 00                	push   0x0
c0008581:	53                   	push   ebx
c0008582:	e8 f6 80 ff ff       	call   c000067d <memset>
c0008587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858a:	e8 ad 6b 00 00       	call   c000f13c <free>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	31 c0                	xor    eax,eax
c0008594:	83 c4 08             	add    esp,0x8
c0008597:	5b                   	pop    ebx
c0008598:	c3                   	ret    

c0008599 <src_process>:
c0008599:	56                   	push   esi
c000859a:	53                   	push   ebx
c000859b:	83 ec 14             	sub    esp,0x14
c000859e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085a6:	85 f6                	test   esi,esi
c00085a8:	0f 84 2a 01 00 00    	je     c00086d8 <src_process+0x13f>
c00085ae:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b2:	0f 84 27 01 00 00    	je     c00086df <src_process+0x146>
c00085b8:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bc:	0f 84 1d 01 00 00    	je     c00086df <src_process+0x146>
c00085c2:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085c9:	0f 85 17 01 00 00    	jne    c00086e6 <src_process+0x14d>
c00085cf:	85 db                	test   ebx,ebx
c00085d1:	0f 84 16 01 00 00    	je     c00086ed <src_process+0x154>
c00085d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085da:	0f 84 14 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085e0:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e4:	0f 84 0a 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085ea:	50                   	push   eax
c00085eb:	50                   	push   eax
c00085ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f2:	e8 bf fe ff ff       	call   c00084b6 <is_bad_src_ratio>
c00085f7:	83 c4 10             	add    esp,0x10
c00085fa:	85 c0                	test   eax,eax
c00085fc:	0f 85 f9 00 00 00    	jne    c00086fb <src_process+0x162>
c0008602:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008606:	79 07                	jns    c000860f <src_process+0x76>
c0008608:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860f:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008613:	79 07                	jns    c000861c <src_process+0x83>
c0008615:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008621:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008624:	39 ca                	cmp    edx,ecx
c0008626:	73 0b                	jae    c0008633 <src_process+0x9a>
c0008628:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862c:	8d 04 82             	lea    eax,[edx+eax*4]
c000862f:	39 c1                	cmp    ecx,eax
c0008631:	eb 09                	jmp    c000863c <src_process+0xa3>
c0008633:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008637:	8d 04 81             	lea    eax,[ecx+eax*4]
c000863a:	39 c2                	cmp    edx,eax
c000863c:	0f 82 c0 00 00 00    	jb     c0008702 <src_process+0x169>
c0008642:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008649:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008650:	68 00 00 70 3f       	push   0x3f700000
c0008655:	6a 00                	push   0x0
c0008657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000865a:	ff 36                	push   DWORD PTR [esi]
c000865c:	e8 de c8 01 00       	call   c0024f3f <__ltdf2>
c0008661:	83 c4 10             	add    esp,0x10
c0008664:	85 c0                	test   eax,eax
c0008666:	79 0b                	jns    c0008673 <src_process+0xda>
c0008668:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000866b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000866e:	89 06                	mov    DWORD PTR [esi],eax
c0008670:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0008673:	83 ec 10             	sub    esp,0x10
c0008676:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008679:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000867c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000867f:	ff 36                	push   DWORD PTR [esi]
c0008681:	e8 be bf 01 00       	call   c0024644 <__subdf3>
c0008686:	83 c4 18             	add    esp,0x18
c0008689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000868d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008691:	52                   	push   edx
c0008692:	50                   	push   eax
c0008693:	e8 38 ca 01 00       	call   c00250d0 <fabs>
c0008698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000869c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086a0:	83 c4 10             	add    esp,0x10
c00086a3:	68 af 03 d2 3c       	push   0x3cd203af
c00086a8:	68 16 56 e7 9e       	push   0x9ee75616
c00086ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b5:	e8 85 c8 01 00       	call   c0024f3f <__ltdf2>
c00086ba:	83 c4 10             	add    esp,0x10
c00086bd:	85 c0                	test   eax,eax
c00086bf:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00086c3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00086c7:	79 05                	jns    c00086ce <src_process+0x135>
c00086c9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086cc:	eb 03                	jmp    c00086d1 <src_process+0x138>
c00086ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086d1:	83 c4 14             	add    esp,0x14
c00086d4:	5b                   	pop    ebx
c00086d5:	5e                   	pop    esi
c00086d6:	ff e0                	jmp    eax
c00086d8:	b8 02 00 00 00       	mov    eax,0x2
c00086dd:	eb 28                	jmp    c0008707 <src_process+0x16e>
c00086df:	b8 07 00 00 00       	mov    eax,0x7
c00086e4:	eb 21                	jmp    c0008707 <src_process+0x16e>
c00086e6:	b8 12 00 00 00       	mov    eax,0x12
c00086eb:	eb 1a                	jmp    c0008707 <src_process+0x16e>
c00086ed:	b8 03 00 00 00       	mov    eax,0x3
c00086f2:	eb 13                	jmp    c0008707 <src_process+0x16e>
c00086f4:	b8 04 00 00 00       	mov    eax,0x4
c00086f9:	eb 0c                	jmp    c0008707 <src_process+0x16e>
c00086fb:	b8 06 00 00 00       	mov    eax,0x6
c0008700:	eb 05                	jmp    c0008707 <src_process+0x16e>
c0008702:	b8 10 00 00 00       	mov    eax,0x10
c0008707:	83 c4 14             	add    esp,0x14
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	c3                   	ret    

c000870d <src_callback_read>:
c000870d:	55                   	push   ebp
c000870e:	57                   	push   edi
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	83 ec 3c             	sub    esp,0x3c
c0008714:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008718:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000871c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008720:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008724:	85 ed                	test   ebp,ebp
c0008726:	0f 8e 30 01 00 00    	jle    c000885c <src_callback_read+0x14f>
c000872c:	85 db                	test   ebx,ebx
c000872e:	0f 84 28 01 00 00    	je     c000885c <src_callback_read+0x14f>
c0008734:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000873b:	74 0c                	je     c0008749 <src_callback_read+0x3c>
c000873d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008744:	e9 13 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008749:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000874d:	75 0c                	jne    c000875b <src_callback_read+0x4e>
c000874f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008756:	e9 01 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c000875b:	51                   	push   ecx
c000875c:	6a 24                	push   0x24
c000875e:	6a 00                	push   0x0
c0008760:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008764:	50                   	push   eax
c0008765:	e8 13 7f ff ff       	call   c000067d <memset>
c000876a:	58                   	pop    eax
c000876b:	5a                   	pop    edx
c000876c:	57                   	push   edi
c000876d:	56                   	push   esi
c000876e:	e8 43 fd ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008773:	83 c4 10             	add    esp,0x10
c0008776:	85 c0                	test   eax,eax
c0008778:	74 0c                	je     c0008786 <src_callback_read+0x79>
c000877a:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008781:	e9 d6 00 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008786:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000878a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008792:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008796:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008799:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087a1:	31 f6                	xor    esi,esi
c00087a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087af:	75 30                	jne    c00087e1 <src_callback_read+0xd4>
c00087b1:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	52                   	push   edx
c00087ba:	52                   	push   edx
c00087bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087bf:	50                   	push   eax
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	85 c0                	test   eax,eax
c00087d7:	75 08                	jne    c00087e1 <src_callback_read+0xd4>
c00087d9:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e1:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e8:	50                   	push   eax
c00087e9:	50                   	push   eax
c00087ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087ee:	50                   	push   eax
c00087ef:	53                   	push   ebx
c00087f0:	e8 a4 fd ff ff       	call   c0008599 <src_process>
c00087f5:	83 c4 10             	add    esp,0x10
c00087f8:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087ff:	85 c0                	test   eax,eax
c0008801:	75 42                	jne    c0008845 <src_callback_read+0x138>
c0008803:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008807:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000880a:	89 f9                	mov    ecx,edi
c000880c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008810:	0f af ca             	imul   ecx,edx
c0008813:	c1 e1 02             	shl    ecx,0x2
c0008816:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000881a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000881e:	0f af d1             	imul   edx,ecx
c0008821:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008825:	c1 e2 02             	shl    edx,0x2
c0008828:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000882c:	8d 14 31             	lea    edx,[ecx+esi*1]
c000882f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008834:	75 04                	jne    c000883a <src_callback_read+0x12d>
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0b                	je     c0008845 <src_callback_read+0x138>
c000883a:	39 d5                	cmp    ebp,edx
c000883c:	7e 09                	jle    c0008847 <src_callback_read+0x13a>
c000883e:	89 d6                	mov    esi,edx
c0008840:	e9 65 ff ff ff       	jmp    c00087aa <src_callback_read+0x9d>
c0008845:	89 f2                	mov    edx,esi
c0008847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884b:	85 c0                	test   eax,eax
c000884d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008854:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008857:	74 05                	je     c000885e <src_callback_read+0x151>
c0008859:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885c:	31 d2                	xor    edx,edx
c000885e:	83 c4 3c             	add    esp,0x3c
c0008861:	89 d0                	mov    eax,edx
c0008863:	5b                   	pop    ebx
c0008864:	5e                   	pop    esi
c0008865:	5f                   	pop    edi
c0008866:	5d                   	pop    ebp
c0008867:	c3                   	ret    

c0008868 <src_set_ratio>:
c0008868:	57                   	push   edi
c0008869:	b8 02 00 00 00       	mov    eax,0x2
c000886e:	56                   	push   esi
c000886f:	53                   	push   ebx
c0008870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887c:	85 db                	test   ebx,ebx
c000887e:	74 2d                	je     c00088ad <src_set_ratio+0x45>
c0008880:	b8 07 00 00 00       	mov    eax,0x7
c0008885:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008889:	74 22                	je     c00088ad <src_set_ratio+0x45>
c000888b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888f:	74 1c                	je     c00088ad <src_set_ratio+0x45>
c0008891:	50                   	push   eax
c0008892:	50                   	push   eax
c0008893:	57                   	push   edi
c0008894:	56                   	push   esi
c0008895:	e8 1c fc ff ff       	call   c00084b6 <is_bad_src_ratio>
c000889a:	83 c4 10             	add    esp,0x10
c000889d:	85 c0                	test   eax,eax
c000889f:	75 07                	jne    c00088a8 <src_set_ratio+0x40>
c00088a1:	89 33                	mov    DWORD PTR [ebx],esi
c00088a3:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088a6:	eb 05                	jmp    c00088ad <src_set_ratio+0x45>
c00088a8:	b8 06 00 00 00       	mov    eax,0x6
c00088ad:	5b                   	pop    ebx
c00088ae:	5e                   	pop    esi
c00088af:	5f                   	pop    edi
c00088b0:	c3                   	ret    

c00088b1 <src_get_channels>:
c00088b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088b5:	b8 02 00 00 00       	mov    eax,0x2
c00088ba:	85 d2                	test   edx,edx
c00088bc:	74 14                	je     c00088d2 <src_get_channels+0x21>
c00088be:	b8 07 00 00 00       	mov    eax,0x7
c00088c3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088c7:	74 09                	je     c00088d2 <src_get_channels+0x21>
c00088c9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088cd:	74 03                	je     c00088d2 <src_get_channels+0x21>
c00088cf:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088d2:	c3                   	ret    

c00088d3 <src_reset>:
c00088d3:	53                   	push   ebx
c00088d4:	b8 02 00 00 00       	mov    eax,0x2
c00088d9:	83 ec 08             	sub    esp,0x8
c00088dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088e0:	85 db                	test   ebx,ebx
c00088e2:	74 36                	je     c000891a <src_reset+0x47>
c00088e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088e7:	85 c0                	test   eax,eax
c00088e9:	74 09                	je     c00088f4 <src_reset+0x21>
c00088eb:	83 ec 0c             	sub    esp,0xc
c00088ee:	53                   	push   ebx
c00088ef:	ff d0                	call   eax
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	31 c0                	xor    eax,eax
c00088f6:	31 d2                	xor    edx,edx
c00088f8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00088fb:	89 03                	mov    DWORD PTR [ebx],eax
c00088fd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008900:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008903:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000890a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008911:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008918:	31 c0                	xor    eax,eax
c000891a:	83 c4 08             	add    esp,0x8
c000891d:	5b                   	pop    ebx
c000891e:	c3                   	ret    

c000891f <src_new>:
c000891f:	57                   	push   edi
c0008920:	56                   	push   esi
c0008921:	53                   	push   ebx
c0008922:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008926:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000892a:	85 f6                	test   esi,esi
c000892c:	74 73                	je     c00089a1 <src_new+0x82>
c000892e:	85 ff                	test   edi,edi
c0008930:	7f 08                	jg     c000893a <src_new+0x1b>
c0008932:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008938:	eb 1e                	jmp    c0008958 <src_new+0x39>
c000893a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008940:	50                   	push   eax
c0008941:	50                   	push   eax
c0008942:	6a 3c                	push   0x3c
c0008944:	6a 01                	push   0x1
c0008946:	e8 11 68 00 00       	call   c000f15c <calloc>
c000894b:	83 c4 10             	add    esp,0x10
c000894e:	89 c3                	mov    ebx,eax
c0008950:	85 c0                	test   eax,eax
c0008952:	75 10                	jne    c0008964 <src_new+0x45>
c0008954:	85 f6                	test   esi,esi
c0008956:	75 04                	jne    c000895c <src_new+0x3d>
c0008958:	31 db                	xor    ebx,ebx
c000895a:	eb 4b                	jmp    c00089a7 <src_new+0x88>
c000895c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008962:	eb 43                	jmp    c00089a7 <src_new+0x88>
c0008964:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008967:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000896e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008972:	e8 a2 fb ff ff       	call   c0008519 <psrc_set_converter>
c0008977:	85 c0                	test   eax,eax
c0008979:	74 18                	je     c0008993 <src_new+0x74>
c000897b:	85 f6                	test   esi,esi
c000897d:	74 06                	je     c0008985 <src_new+0x66>
c000897f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008985:	83 ec 0c             	sub    esp,0xc
c0008988:	53                   	push   ebx
c0008989:	31 db                	xor    ebx,ebx
c000898b:	e8 ac 67 00 00       	call   c000f13c <free>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	83 ec 0c             	sub    esp,0xc
c0008996:	53                   	push   ebx
c0008997:	e8 37 ff ff ff       	call   c00088d3 <src_reset>
c000899c:	83 c4 10             	add    esp,0x10
c000899f:	eb 06                	jmp    c00089a7 <src_new+0x88>
c00089a1:	85 ff                	test   edi,edi
c00089a3:	7f 9b                	jg     c0008940 <src_new+0x21>
c00089a5:	eb b1                	jmp    c0008958 <src_new+0x39>
c00089a7:	89 d8                	mov    eax,ebx
c00089a9:	5b                   	pop    ebx
c00089aa:	5e                   	pop    esi
c00089ab:	5f                   	pop    edi
c00089ac:	c3                   	ret    

c00089ad <src_callback_new>:
c00089ad:	56                   	push   esi
c00089ae:	53                   	push   ebx
c00089af:	53                   	push   ebx
c00089b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b8:	85 f6                	test   esi,esi
c00089ba:	75 0e                	jne    c00089ca <src_callback_new+0x1d>
c00089bc:	31 db                	xor    ebx,ebx
c00089be:	85 c0                	test   eax,eax
c00089c0:	74 47                	je     c0008a09 <src_callback_new+0x5c>
c00089c2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089c8:	eb 3f                	jmp    c0008a09 <src_callback_new+0x5c>
c00089ca:	85 c0                	test   eax,eax
c00089cc:	74 06                	je     c00089d4 <src_callback_new+0x27>
c00089ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089d4:	51                   	push   ecx
c00089d5:	50                   	push   eax
c00089d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089de:	e8 3c ff ff ff       	call   c000891f <src_new>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	89 c3                	mov    ebx,eax
c00089e8:	85 c0                	test   eax,eax
c00089ea:	74 1d                	je     c0008a09 <src_callback_new+0x5c>
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	50                   	push   eax
c00089f0:	e8 de fe ff ff       	call   c00088d3 <src_reset>
c00089f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f9:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a00:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a03:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	89 d8                	mov    eax,ebx
c0008a0b:	5a                   	pop    edx
c0008a0c:	5b                   	pop    ebx
c0008a0d:	5e                   	pop    esi
c0008a0e:	c3                   	ret    

c0008a0f <src_get_name>:
c0008a0f:	53                   	push   ebx
c0008a10:	83 ec 14             	sub    esp,0x14
c0008a13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a17:	53                   	push   ebx
c0008a18:	e8 3e 4c 00 00       	call   c000d65b <sinc_get_name>
c0008a1d:	83 c4 10             	add    esp,0x10
c0008a20:	85 c0                	test   eax,eax
c0008a22:	75 1d                	jne    c0008a41 <src_get_name+0x32>
c0008a24:	83 ec 0c             	sub    esp,0xc
c0008a27:	53                   	push   ebx
c0008a28:	e8 18 54 00 00       	call   c000de45 <zoh_get_name>
c0008a2d:	83 c4 10             	add    esp,0x10
c0008a30:	85 c0                	test   eax,eax
c0008a32:	75 0d                	jne    c0008a41 <src_get_name+0x32>
c0008a34:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a38:	83 c4 08             	add    esp,0x8
c0008a3b:	5b                   	pop    ebx
c0008a3c:	e9 61 0b 00 00       	jmp    c00095a2 <linear_get_name>
c0008a41:	83 c4 08             	add    esp,0x8
c0008a44:	5b                   	pop    ebx
c0008a45:	c3                   	ret    

c0008a46 <src_get_description>:
c0008a46:	53                   	push   ebx
c0008a47:	83 ec 14             	sub    esp,0x14
c0008a4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a4e:	53                   	push   ebx
c0008a4f:	e8 1a 4c 00 00       	call   c000d66e <sinc_get_description>
c0008a54:	83 c4 10             	add    esp,0x10
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 1d                	jne    c0008a78 <src_get_description+0x32>
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	53                   	push   ebx
c0008a5f:	e8 f0 53 00 00       	call   c000de54 <zoh_get_description>
c0008a64:	83 c4 10             	add    esp,0x10
c0008a67:	85 c0                	test   eax,eax
c0008a69:	75 0d                	jne    c0008a78 <src_get_description+0x32>
c0008a6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a6f:	83 c4 08             	add    esp,0x8
c0008a72:	5b                   	pop    ebx
c0008a73:	e9 39 0b 00 00       	jmp    c00095b1 <linear_get_description>
c0008a78:	83 c4 08             	add    esp,0x8
c0008a7b:	5b                   	pop    ebx
c0008a7c:	c3                   	ret    

c0008a7d <src_get_version>:
c0008a7d:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0008a82:	c3                   	ret    

c0008a83 <src_is_valid_ratio>:
c0008a83:	83 ec 14             	sub    esp,0x14
c0008a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8e:	e8 23 fa ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008a93:	85 c0                	test   eax,eax
c0008a95:	0f 94 c0             	sete   al
c0008a98:	83 c4 1c             	add    esp,0x1c
c0008a9b:	0f b6 c0             	movzx  eax,al
c0008a9e:	c3                   	ret    

c0008a9f <src_error>:
c0008a9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aa3:	31 c0                	xor    eax,eax
c0008aa5:	85 d2                	test   edx,edx
c0008aa7:	74 03                	je     c0008aac <src_error+0xd>
c0008aa9:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008aac:	c3                   	ret    

c0008aad <src_strerror>:
c0008aad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ab1:	31 c0                	xor    eax,eax
c0008ab3:	83 fa 17             	cmp    edx,0x17
c0008ab6:	77 07                	ja     c0008abf <src_strerror+0x12>
c0008ab8:	8b 04 95 e0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9920]
c0008abf:	c3                   	ret    

c0008ac0 <src_simple>:
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 18             	sub    esp,0x18
c0008ac5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ac9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008acd:	50                   	push   eax
c0008ace:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad6:	e8 44 fe ff ff       	call   c000891f <src_new>
c0008adb:	83 c4 10             	add    esp,0x10
c0008ade:	85 c0                	test   eax,eax
c0008ae0:	75 06                	jne    c0008ae8 <src_simple+0x28>
c0008ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ae6:	eb 25                	jmp    c0008b0d <src_simple+0x4d>
c0008ae8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008aef:	89 c3                	mov    ebx,eax
c0008af1:	50                   	push   eax
c0008af2:	50                   	push   eax
c0008af3:	56                   	push   esi
c0008af4:	53                   	push   ebx
c0008af5:	e8 9f fa ff ff       	call   c0008599 <src_process>
c0008afa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008afd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b01:	e8 57 fa ff ff       	call   c000855d <src_delete>
c0008b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0a:	83 c4 10             	add    esp,0x10
c0008b0d:	83 c4 14             	add    esp,0x14
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	c3                   	ret    

c0008b13 <src_short_to_float_array>:
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 18             	sub    esp,0x18
c0008b17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b1b:	85 db                	test   ebx,ebx
c0008b1d:	74 54                	je     c0008b73 <src_short_to_float_array+0x60>
c0008b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b23:	4b                   	dec    ebx
c0008b24:	83 ec 0c             	sub    esp,0xc
c0008b27:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b2b:	50                   	push   eax
c0008b2c:	e8 a2 c1 01 00       	call   c0024cd3 <__floatsidf>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b3c:	68 00 00 00 3f       	push   0x3f000000
c0008b41:	6a 00                	push   0x0
c0008b43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b4b:	e8 20 bb 01 00       	call   c0024670 <__muldf3>
c0008b50:	59                   	pop    ecx
c0008b51:	59                   	pop    ecx
c0008b52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008b5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b62:	e8 dc c3 01 00       	call   c0024f43 <__truncdfsf2>
c0008b67:	83 c4 10             	add    esp,0x10
c0008b6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b6e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008b71:	eb a8                	jmp    c0008b1b <src_short_to_float_array+0x8>
c0008b73:	83 c4 18             	add    esp,0x18
c0008b76:	5b                   	pop    ebx
c0008b77:	c3                   	ret    

c0008b78 <src_float_to_short_array>:
c0008b78:	56                   	push   esi
c0008b79:	53                   	push   ebx
c0008b7a:	83 ec 14             	sub    esp,0x14
c0008b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b85:	85 db                	test   ebx,ebx
c0008b87:	0f 84 a4 00 00 00    	je     c0008c31 <src_float_to_short_array+0xb9>
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	4b                   	dec    ebx
c0008b91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008b95:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008b98:	e8 ca c4 01 00       	call   c0025067 <__extendsfdf2>
c0008b9d:	83 c4 10             	add    esp,0x10
c0008ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba8:	68 00 00 e0 41       	push   0x41e00000
c0008bad:	6a 00                	push   0x0
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb7:	e8 b4 ba 01 00       	call   c0024670 <__muldf3>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bc7:	68 ff ff df 41       	push   0x41dfffff
c0008bcc:	68 00 00 c0 ff       	push   0xffc00000
c0008bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd9:	e8 5f c3 01 00       	call   c0024f3d <__gedf2>
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	85 c0                	test   eax,eax
c0008be3:	78 08                	js     c0008bed <src_float_to_short_array+0x75>
c0008be5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008beb:	eb 98                	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008bed:	68 00 00 e0 c1       	push   0xc1e00000
c0008bf2:	6a 00                	push   0x0
c0008bf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfc:	e8 40 c3 01 00       	call   c0024f41 <__ledf2>
c0008c01:	83 c4 10             	add    esp,0x10
c0008c04:	85 c0                	test   eax,eax
c0008c06:	7f 0b                	jg     c0008c13 <src_float_to_short_array+0x9b>
c0008c08:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c0e:	e9 72 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c13:	50                   	push   eax
c0008c14:	50                   	push   eax
c0008c15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	e8 ce c4 01 00       	call   c00250f0 <lrint>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	c1 f8 10             	sar    eax,0x10
c0008c28:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c2c:	e9 54 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c31:	83 c4 14             	add    esp,0x14
c0008c34:	5b                   	pop    ebx
c0008c35:	5e                   	pop    esi
c0008c36:	c3                   	ret    

c0008c37 <src_int_to_float_array>:
c0008c37:	53                   	push   ebx
c0008c38:	83 ec 18             	sub    esp,0x18
c0008c3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c3f:	85 db                	test   ebx,ebx
c0008c41:	74 52                	je     c0008c95 <src_int_to_float_array+0x5e>
c0008c43:	83 ec 0c             	sub    esp,0xc
c0008c46:	4b                   	dec    ebx
c0008c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c4b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c4e:	e8 80 c0 01 00       	call   c0024cd3 <__floatsidf>
c0008c53:	83 c4 10             	add    esp,0x10
c0008c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c5e:	68 00 00 00 3e       	push   0x3e000000
c0008c63:	6a 00                	push   0x0
c0008c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6d:	e8 fe b9 01 00       	call   c0024670 <__muldf3>
c0008c72:	59                   	pop    ecx
c0008c73:	59                   	pop    ecx
c0008c74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c84:	e8 ba c2 01 00       	call   c0024f43 <__truncdfsf2>
c0008c89:	83 c4 10             	add    esp,0x10
c0008c8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c90:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c93:	eb aa                	jmp    c0008c3f <src_int_to_float_array+0x8>
c0008c95:	83 c4 18             	add    esp,0x18
c0008c98:	5b                   	pop    ebx
c0008c99:	c3                   	ret    

c0008c9a <src_float_to_int_array>:
c0008c9a:	56                   	push   esi
c0008c9b:	53                   	push   ebx
c0008c9c:	83 ec 14             	sub    esp,0x14
c0008c9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	0f 84 a2 00 00 00    	je     c0008d51 <src_float_to_int_array+0xb7>
c0008caf:	83 ec 0c             	sub    esp,0xc
c0008cb2:	4b                   	dec    ebx
c0008cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cba:	e8 a8 c3 01 00       	call   c0025067 <__extendsfdf2>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cca:	68 00 00 e0 41       	push   0x41e00000
c0008ccf:	6a 00                	push   0x0
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd9:	e8 92 b9 01 00       	call   c0024670 <__muldf3>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ce9:	68 ff ff df 41       	push   0x41dfffff
c0008cee:	68 00 00 c0 ff       	push   0xffc00000
c0008cf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cfb:	e8 3d c2 01 00       	call   c0024f3d <__gedf2>
c0008d00:	83 c4 10             	add    esp,0x10
c0008d03:	85 c0                	test   eax,eax
c0008d05:	78 09                	js     c0008d10 <src_float_to_int_array+0x76>
c0008d07:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d0e:	eb 97                	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d10:	68 00 00 e0 c1       	push   0xc1e00000
c0008d15:	6a 00                	push   0x0
c0008d17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	e8 1d c2 01 00       	call   c0024f41 <__ledf2>
c0008d24:	83 c4 10             	add    esp,0x10
c0008d27:	85 c0                	test   eax,eax
c0008d29:	7f 0c                	jg     c0008d37 <src_float_to_int_array+0x9d>
c0008d2b:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d32:	e9 70 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d37:	50                   	push   eax
c0008d38:	50                   	push   eax
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 aa c3 01 00       	call   c00250f0 <lrint>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d4c:	e9 56 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d51:	83 c4 14             	add    esp,0x14
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	c3                   	ret    

c0008d57 <is_bad_src_ratio>:
c0008d57:	83 ec 1c             	sub    esp,0x1c
c0008d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d6a:	b8 00 00 00 00       	mov    eax,0x0
c0008d6f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008d74:	52                   	push   edx
c0008d75:	50                   	push   eax
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7e:	e8 bc c1 01 00       	call   c0024f3f <__ltdf2>
c0008d83:	83 c4 10             	add    esp,0x10
c0008d86:	85 c0                	test   eax,eax
c0008d88:	78 20                	js     c0008daa <is_bad_src_ratio+0x53>
c0008d8a:	b8 00 00 00 00       	mov    eax,0x0
c0008d8f:	ba 00 00 70 40       	mov    edx,0x40700000
c0008d94:	52                   	push   edx
c0008d95:	50                   	push   eax
c0008d96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9e:	e8 7e c1 01 00       	call   c0024f21 <__gtdf2>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	85 c0                	test   eax,eax
c0008da8:	7e 07                	jle    c0008db1 <is_bad_src_ratio+0x5a>
c0008daa:	b8 01 00 00 00       	mov    eax,0x1
c0008daf:	eb 05                	jmp    c0008db6 <is_bad_src_ratio+0x5f>
c0008db1:	b8 00 00 00 00       	mov    eax,0x0
c0008db6:	83 c4 1c             	add    esp,0x1c
c0008db9:	c3                   	ret    

c0008dba <fmod_one>:
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008dc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dcd:	83 ec 08             	sub    esp,0x8
c0008dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd8:	e8 13 c3 01 00       	call   c00250f0 <lrint>
c0008ddd:	83 c4 10             	add    esp,0x10
c0008de0:	83 ec 0c             	sub    esp,0xc
c0008de3:	50                   	push   eax
c0008de4:	e8 ea be 01 00       	call   c0024cd3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	52                   	push   edx
c0008ded:	50                   	push   eax
c0008dee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df6:	e8 49 b8 01 00       	call   c0024644 <__subdf3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e06:	b8 00 00 00 00       	mov    eax,0x0
c0008e0b:	ba 00 00 00 00       	mov    edx,0x0
c0008e10:	52                   	push   edx
c0008e11:	50                   	push   eax
c0008e12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e1a:	e8 20 c1 01 00       	call   c0024f3f <__ltdf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	85 c0                	test   eax,eax
c0008e24:	79 1e                	jns    c0008e44 <fmod_one+0x8a>
c0008e26:	b8 00 00 00 00       	mov    eax,0x0
c0008e2b:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e30:	52                   	push   edx
c0008e31:	50                   	push   eax
c0008e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e3a:	e8 b4 b1 01 00       	call   c0023ff3 <__adddf3>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	eb 08                	jmp    c0008e4c <fmod_one+0x92>
c0008e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e4c:	83 c4 2c             	add    esp,0x2c
c0008e4f:	c3                   	ret    

c0008e50 <linear_vari_process>:
c0008e50:	55                   	push   ebp
c0008e51:	57                   	push   edi
c0008e52:	56                   	push   esi
c0008e53:	53                   	push   ebx
c0008e54:	83 ec 3c             	sub    esp,0x3c
c0008e57:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e5b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008e63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e67:	0f 8e f7 06 00 00    	jle    c0009564 <linear_vari_process+0x714>
c0008e6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e71:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008e79:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e7c:	85 db                	test   ebx,ebx
c0008e7e:	0f 84 e0 06 00 00    	je     c0009564 <linear_vari_process+0x714>
c0008e84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e87:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e8b:	74 19                	je     c0008ea6 <linear_vari_process+0x56>
c0008e8d:	31 d2                	xor    edx,edx
c0008e8f:	39 c2                	cmp    edx,eax
c0008e91:	7d 0c                	jge    c0008e9f <linear_vari_process+0x4f>
c0008e93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e95:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e98:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e9c:	42                   	inc    edx
c0008e9d:	eb f0                	jmp    c0008e8f <linear_vari_process+0x3f>
c0008e9f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ea6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ea9:	0f af d0             	imul   edx,eax
c0008eac:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008eaf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008eb3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008eba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008ebd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ec4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ecd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ed1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ed5:	57                   	push   edi
c0008ed6:	57                   	push   edi
c0008ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 73 fe ff ff       	call   c0008d57 <is_bad_src_ratio>
c0008ee4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008ef0:	0f 85 66 06 00 00    	jne    c000955c <linear_vari_process+0x70c>
c0008ef6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008efa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008efd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f08:	68 00 00 f0 3f       	push   0x3ff00000
c0008f0d:	6a 00                	push   0x0
c0008f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f17:	e8 23 c0 01 00       	call   c0024f3f <__ltdf2>
c0008f1c:	83 c4 10             	add    esp,0x10
c0008f1f:	85 c0                	test   eax,eax
c0008f21:	0f 89 89 02 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008f27:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f2a:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f2d:	0f 8d 7d 02 00 00    	jge    c00091b0 <linear_vari_process+0x360>
c0008f33:	83 ec 0c             	sub    esp,0xc
c0008f36:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f39:	e8 95 bd 01 00       	call   c0024cd3 <__floatsidf>
c0008f3e:	83 c4 10             	add    esp,0x10
c0008f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f48:	68 00 00 f0 3f       	push   0x3ff00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 97 b0 01 00       	call   c0023ff3 <__adddf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f67:	52                   	push   edx
c0008f68:	50                   	push   eax
c0008f69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f71:	e8 fa b6 01 00       	call   c0024670 <__muldf3>
c0008f76:	5d                   	pop    ebp
c0008f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f7f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f82:	e8 4c bd 01 00       	call   c0024cd3 <__floatsidf>
c0008f87:	83 c4 10             	add    esp,0x10
c0008f8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f92:	52                   	push   edx
c0008f93:	50                   	push   eax
c0008f94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9c:	e8 52 b0 01 00       	call   c0023ff3 <__adddf3>
c0008fa1:	59                   	pop    ecx
c0008fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fa6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008faa:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008fad:	e8 21 bd 01 00       	call   c0024cd3 <__floatsidf>
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fbd:	52                   	push   edx
c0008fbe:	50                   	push   eax
c0008fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc7:	e8 71 bf 01 00       	call   c0024f3d <__gedf2>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	85 c0                	test   eax,eax
c0008fd1:	0f 89 d9 01 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008fd7:	85 ff                	test   edi,edi
c0008fd9:	0f 8e f4 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0008fdf:	83 ec 10             	sub    esp,0x10
c0008fe2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fe5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fe8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fec:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fef:	ff 30                	push   DWORD PTR [eax]
c0008ff1:	e8 4e b6 01 00       	call   c0024644 <__subdf3>
c0008ff6:	83 c4 18             	add    esp,0x18
c0008ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ffd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009001:	52                   	push   edx
c0009002:	50                   	push   eax
c0009003:	e8 c8 c0 01 00       	call   c00250d0 <fabs>
c0009008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009010:	83 c4 10             	add    esp,0x10
c0009013:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009018:	68 23 42 92 0c       	push   0xc924223
c000901d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009021:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009025:	e8 f7 be 01 00       	call   c0024f21 <__gtdf2>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	85 c0                	test   eax,eax
c000902f:	0f 8e 9e 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0009035:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009039:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000903c:	8b 00                	mov    eax,DWORD PTR [eax]
c000903e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009042:	89 04 24             	mov    DWORD PTR [esp],eax
c0009045:	52                   	push   edx
c0009046:	50                   	push   eax
c0009047:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000904a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000904d:	e8 f2 b5 01 00       	call   c0024644 <__subdf3>
c0009052:	59                   	pop    ecx
c0009053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009057:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000905b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000905e:	e8 70 bc 01 00       	call   c0024cd3 <__floatsidf>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000906a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000906e:	52                   	push   edx
c000906f:	50                   	push   eax
c0009070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	e8 f3 b5 01 00       	call   c0024670 <__muldf3>
c000907d:	5f                   	pop    edi
c000907e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009082:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009086:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009089:	e8 45 bc 01 00       	call   c0024cd3 <__floatsidf>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009095:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009099:	52                   	push   edx
c000909a:	50                   	push   eax
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a3:	e8 ac b8 01 00       	call   c0024954 <__divdf3>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c3:	e8 2b af 01 00       	call   c0023ff3 <__adddf3>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090d3:	31 ff                	xor    edi,edi
c00090d5:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00090d8:	0f 8e 9d 00 00 00    	jle    c000917b <linear_vari_process+0x32b>
c00090de:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090e1:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00090f1:	52                   	push   edx
c00090f2:	52                   	push   edx
c00090f3:	55                   	push   ebp
c00090f4:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090f7:	47                   	inc    edi
c00090f8:	e8 8b a8 01 00       	call   c0023988 <__subsf3>
c00090fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009100:	e8 62 bf 01 00       	call   c0025067 <__extendsfdf2>
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000910c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009120:	e8 4b b5 01 00       	call   c0024670 <__muldf3>
c0009125:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009128:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000912c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009130:	e8 32 bf 01 00       	call   c0025067 <__extendsfdf2>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000913c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009140:	52                   	push   edx
c0009141:	50                   	push   eax
c0009142:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009146:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000914a:	e8 a4 ae 01 00       	call   c0023ff3 <__adddf3>
c000914f:	59                   	pop    ecx
c0009150:	5d                   	pop    ebp
c0009151:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009155:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009159:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009161:	e8 dd bd 01 00       	call   c0024f43 <__truncdfsf2>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000916c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009170:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009173:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009176:	e9 5a ff ff ff       	jmp    c00090d5 <linear_vari_process+0x285>
c000917b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009183:	68 00 00 f0 3f       	push   0x3ff00000
c0009188:	6a 00                	push   0x0
c000918a:	e8 c5 b7 01 00       	call   c0024954 <__divdf3>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 04 24             	mov    DWORD PTR [esp],eax
c0009195:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000919f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091a3:	e8 4b ae 01 00       	call   c0023ff3 <__adddf3>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	e9 50 fd ff ff       	jmp    c0008f00 <linear_vari_process+0xb0>
c00091b0:	50                   	push   eax
c00091b1:	50                   	push   eax
c00091b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	e8 fb fb ff ff       	call   c0008dba <fmod_one>
c00091bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091da:	e8 65 b4 01 00       	call   c0024644 <__subdf3>
c00091df:	83 c4 18             	add    esp,0x18
c00091e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ea:	52                   	push   edx
c00091eb:	50                   	push   eax
c00091ec:	e8 ff be 01 00       	call   c00250f0 <lrint>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	0f af f8             	imul   edi,eax
c00091f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091fa:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091fd:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009200:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009203:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009206:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000920a:	0f 8d b4 02 00 00    	jge    c00094c4 <linear_vari_process+0x674>
c0009210:	83 ec 0c             	sub    esp,0xc
c0009213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009216:	e8 b8 ba 01 00       	call   c0024cd3 <__floatsidf>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009226:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009236:	e8 35 b4 01 00       	call   c0024670 <__muldf3>
c000923b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000923e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009246:	e8 88 ba 01 00       	call   c0024cd3 <__floatsidf>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009252:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009256:	52                   	push   edx
c0009257:	50                   	push   eax
c0009258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009260:	e8 8e ad 01 00       	call   c0023ff3 <__adddf3>
c0009265:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009268:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009270:	e8 5e ba 01 00       	call   c0024cd3 <__floatsidf>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009280:	52                   	push   edx
c0009281:	50                   	push   eax
c0009282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000928a:	e8 b0 bc 01 00       	call   c0024f3f <__ltdf2>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	85 c0                	test   eax,eax
c0009294:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009298:	0f 89 26 02 00 00    	jns    c00094c4 <linear_vari_process+0x674>
c000929e:	85 c9                	test   ecx,ecx
c00092a0:	0f 8e f5 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092a6:	83 ec 10             	sub    esp,0x10
c00092a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092af:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092b6:	ff 30                	push   DWORD PTR [eax]
c00092b8:	e8 87 b3 01 00       	call   c0024644 <__subdf3>
c00092bd:	83 c4 18             	add    esp,0x18
c00092c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	e8 01 be 01 00       	call   c00250d0 <fabs>
c00092cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092df:	68 23 42 92 0c       	push   0xc924223
c00092e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	e8 30 bc 01 00       	call   c0024f21 <__gtdf2>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	85 c0                	test   eax,eax
c00092f6:	0f 8e 9f 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009300:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009303:	8b 00                	mov    eax,DWORD PTR [eax]
c0009305:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000930d:	52                   	push   edx
c000930e:	50                   	push   eax
c000930f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009312:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009315:	e8 2a b3 01 00       	call   c0024644 <__subdf3>
c000931a:	5f                   	pop    edi
c000931b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000931f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009323:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009326:	e8 a8 b9 01 00       	call   c0024cd3 <__floatsidf>
c000932b:	83 c4 10             	add    esp,0x10
c000932e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009332:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009336:	52                   	push   edx
c0009337:	50                   	push   eax
c0009338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000933c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009340:	e8 2b b3 01 00       	call   c0024670 <__muldf3>
c0009345:	5d                   	pop    ebp
c0009346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000934a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000934e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009351:	e8 7d b9 01 00       	call   c0024cd3 <__floatsidf>
c0009356:	83 c4 10             	add    esp,0x10
c0009359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000935d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009361:	52                   	push   edx
c0009362:	50                   	push   eax
c0009363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000936b:	e8 e4 b5 01 00       	call   c0024954 <__divdf3>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009377:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000937b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000937f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938b:	e8 63 ac 01 00       	call   c0023ff3 <__adddf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009397:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939b:	31 ff                	xor    edi,edi
c000939d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093a0:	39 f8                	cmp    eax,edi
c00093a2:	0f 8e ac 00 00 00    	jle    c0009454 <linear_vari_process+0x604>
c00093a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00093aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093ad:	29 c1                	sub    ecx,eax
c00093af:	89 c8                	mov    eax,ecx
c00093b1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093b4:	01 f8                	add    eax,edi
c00093b6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093ba:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093c7:	51                   	push   ecx
c00093c8:	01 f8                	add    eax,edi
c00093ca:	51                   	push   ecx
c00093cb:	47                   	inc    edi
c00093cc:	55                   	push   ebp
c00093cd:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093d0:	e8 b3 a5 01 00       	call   c0023988 <__subsf3>
c00093d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d8:	e8 8a bc 01 00       	call   c0025067 <__extendsfdf2>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 73 b2 01 00       	call   c0024670 <__muldf3>
c00093fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009404:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009408:	e8 5a bc 01 00       	call   c0025067 <__extendsfdf2>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009414:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009418:	52                   	push   edx
c0009419:	50                   	push   eax
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009422:	e8 cc ab 01 00       	call   c0023ff3 <__adddf3>
c0009427:	5d                   	pop    ebp
c0009428:	59                   	pop    ecx
c0009429:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000942d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009431:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009435:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009439:	e8 05 bb 01 00       	call   c0024f43 <__truncdfsf2>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009445:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009449:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000944c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000944f:	e9 49 ff ff ff       	jmp    c000939d <linear_vari_process+0x54d>
c0009454:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945c:	68 00 00 f0 3f       	push   0x3ff00000
c0009461:	6a 00                	push   0x0
c0009463:	e8 ec b4 01 00       	call   c0024954 <__divdf3>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000946f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009473:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009477:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000947b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009483:	e8 6b ab 01 00       	call   c0023ff3 <__adddf3>
c0009488:	59                   	pop    ecx
c0009489:	5f                   	pop    edi
c000948a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949a:	e8 1b f9 ff ff       	call   c0008dba <fmod_one>
c000949f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094ba:	e8 85 b1 01 00       	call   c0024644 <__subdf3>
c00094bf:	e9 1b fd ff ff       	jmp    c00091df <linear_vari_process+0x38f>
c00094c4:	39 fd                	cmp    ebp,edi
c00094c6:	7d 38                	jge    c0009500 <linear_vari_process+0x6b0>
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	89 f8                	mov    eax,edi
c00094cd:	29 e8                	sub    eax,ebp
c00094cf:	99                   	cdq    
c00094d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00094d3:	50                   	push   eax
c00094d4:	e8 fa b7 01 00       	call   c0024cd3 <__floatsidf>
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e4:	52                   	push   edx
c00094e5:	50                   	push   eax
c00094e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ee:	e8 00 ab 01 00       	call   c0023ff3 <__adddf3>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00094f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00094fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009500:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009504:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009507:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000950b:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000950e:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009511:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009514:	85 c0                	test   eax,eax
c0009516:	7f 27                	jg     c000953f <linear_vari_process+0x6ef>
c0009518:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009524:	89 01                	mov    DWORD PTR [ecx],eax
c0009526:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009529:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000952c:	99                   	cdq    
c000952d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009530:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009533:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009536:	99                   	cdq    
c0009537:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000953a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000953d:	eb 25                	jmp    c0009564 <linear_vari_process+0x714>
c000953f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009542:	31 d2                	xor    edx,edx
c0009544:	29 c8                	sub    eax,ecx
c0009546:	c1 e0 02             	shl    eax,0x2
c0009549:	39 d1                	cmp    ecx,edx
c000954b:	7e cb                	jle    c0009518 <linear_vari_process+0x6c8>
c000954d:	8b 3e                	mov    edi,DWORD PTR [esi]
c000954f:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009552:	83 c0 04             	add    eax,0x4
c0009555:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009559:	42                   	inc    edx
c000955a:	eb ed                	jmp    c0009549 <linear_vari_process+0x6f9>
c000955c:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c0009564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009568:	83 c4 3c             	add    esp,0x3c
c000956b:	5b                   	pop    ebx
c000956c:	5e                   	pop    esi
c000956d:	5f                   	pop    edi
c000956e:	5d                   	pop    ebp
c000956f:	c3                   	ret    

c0009570 <linear_reset>:
c0009570:	83 ec 0c             	sub    esp,0xc
c0009573:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009577:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000957a:	85 c0                	test   eax,eax
c000957c:	74 20                	je     c000959e <linear_reset+0x2e>
c000957e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009581:	83 c0 1c             	add    eax,0x1c
c0009584:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009587:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000958e:	c1 e2 02             	shl    edx,0x2
c0009591:	51                   	push   ecx
c0009592:	52                   	push   edx
c0009593:	6a 00                	push   0x0
c0009595:	50                   	push   eax
c0009596:	e8 e2 70 ff ff       	call   c000067d <memset>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 c4 0c             	add    esp,0xc
c00095a1:	c3                   	ret    

c00095a2 <linear_get_name>:
c00095a2:	31 c0                	xor    eax,eax
c00095a4:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095a9:	75 05                	jne    c00095b0 <linear_get_name+0xe>
c00095ab:	b8 40 67 02 c0       	mov    eax,0xc0026740
c00095b0:	c3                   	ret    

c00095b1 <linear_get_description>:
c00095b1:	31 c0                	xor    eax,eax
c00095b3:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095b8:	75 05                	jne    c00095bf <linear_get_description+0xe>
c00095ba:	b8 54 67 02 c0       	mov    eax,0xc0026754
c00095bf:	c3                   	ret    

c00095c0 <linear_set_converter>:
c00095c0:	53                   	push   ebx
c00095c1:	b8 0a 00 00 00       	mov    eax,0xa
c00095c6:	83 ec 08             	sub    esp,0x8
c00095c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00095cd:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00095d2:	75 6e                	jne    c0009642 <linear_set_converter+0x82>
c00095d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00095d7:	85 c0                	test   eax,eax
c00095d9:	74 13                	je     c00095ee <linear_set_converter+0x2e>
c00095db:	83 ec 0c             	sub    esp,0xc
c00095de:	50                   	push   eax
c00095df:	e8 58 5b 00 00       	call   c000f13c <free>
c00095e4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00095eb:	83 c4 10             	add    esp,0x10
c00095ee:	50                   	push   eax
c00095ef:	50                   	push   eax
c00095f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00095f3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00095fa:	50                   	push   eax
c00095fb:	6a 01                	push   0x1
c00095fd:	e8 5a 5b 00 00       	call   c000f15c <calloc>
c0009602:	83 c4 10             	add    esp,0x10
c0009605:	89 c2                	mov    edx,eax
c0009607:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000960a:	85 d2                	test   edx,edx
c000960c:	b8 01 00 00 00       	mov    eax,0x1
c0009611:	74 2f                	je     c0009642 <linear_set_converter+0x82>
c0009613:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009616:	83 ec 0c             	sub    esp,0xc
c0009619:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000961c:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009622:	c7 43 24 50 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e50
c0009629:	c7 43 20 50 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e50
c0009630:	c7 43 28 70 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009570
c0009637:	53                   	push   ebx
c0009638:	e8 33 ff ff ff       	call   c0009570 <linear_reset>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	31 c0                	xor    eax,eax
c0009642:	83 c4 08             	add    esp,0x8
c0009645:	5b                   	pop    ebx
c0009646:	c3                   	ret    

c0009647 <is_bad_src_ratio>:
c0009647:	83 ec 1c             	sub    esp,0x1c
c000964a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000964e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009652:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000965a:	b8 00 00 00 00       	mov    eax,0x0
c000965f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0009664:	52                   	push   edx
c0009665:	50                   	push   eax
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 cc b8 01 00       	call   c0024f3f <__ltdf2>
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	85 c0                	test   eax,eax
c0009678:	78 20                	js     c000969a <is_bad_src_ratio+0x53>
c000967a:	b8 00 00 00 00       	mov    eax,0x0
c000967f:	ba 00 00 70 40       	mov    edx,0x40700000
c0009684:	52                   	push   edx
c0009685:	50                   	push   eax
c0009686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968e:	e8 8e b8 01 00       	call   c0024f21 <__gtdf2>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	85 c0                	test   eax,eax
c0009698:	7e 07                	jle    c00096a1 <is_bad_src_ratio+0x5a>
c000969a:	b8 01 00 00 00       	mov    eax,0x1
c000969f:	eb 05                	jmp    c00096a6 <is_bad_src_ratio+0x5f>
c00096a1:	b8 00 00 00 00       	mov    eax,0x0
c00096a6:	83 c4 1c             	add    esp,0x1c
c00096a9:	c3                   	ret    

c00096aa <int_to_fp>:
c00096aa:	c1 e0 0c             	shl    eax,0xc
c00096ad:	c3                   	ret    

c00096ae <fp_to_int>:
c00096ae:	c1 f8 0c             	sar    eax,0xc
c00096b1:	c3                   	ret    

c00096b2 <fp_fraction_part>:
c00096b2:	25 ff 0f 00 00       	and    eax,0xfff
c00096b7:	c3                   	ret    

c00096b8 <fp_to_double>:
c00096b8:	83 ec 1c             	sub    esp,0x1c
c00096bb:	e8 f2 ff ff ff       	call   c00096b2 <fp_fraction_part>
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	50                   	push   eax
c00096c4:	e8 0a b6 01 00       	call   c0024cd3 <__floatsidf>
c00096c9:	83 c4 10             	add    esp,0x10
c00096cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d4:	68 00 00 30 3f       	push   0x3f300000
c00096d9:	6a 00                	push   0x0
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 88 af 01 00       	call   c0024670 <__muldf3>
c00096e8:	83 c4 2c             	add    esp,0x2c
c00096eb:	c3                   	ret    

c00096ec <calc_output_single>:
c00096ec:	55                   	push   ebp
c00096ed:	57                   	push   edi
c00096ee:	56                   	push   esi
c00096ef:	89 c6                	mov    esi,eax
c00096f1:	53                   	push   ebx
c00096f2:	89 d3                	mov    ebx,edx
c00096f4:	83 ec 4c             	sub    esp,0x4c
c00096f7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096fe:	e8 a7 ff ff ff       	call   c00096aa <int_to_fp>
c0009703:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009706:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000970a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000970e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009712:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009715:	99                   	cdq    
c0009716:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000971e:	f7 fb                	idiv   ebx
c0009720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009728:	89 da                	mov    edx,ebx
c000972a:	0f af d0             	imul   edx,eax
c000972d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009731:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009735:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009739:	29 c2                	sub    edx,eax
c000973b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000973e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009742:	83 c5 04             	add    ebp,0x4
c0009745:	e8 6e ff ff ff       	call   c00096b8 <fp_to_double>
c000974a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000974e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009756:	e8 53 ff ff ff       	call   c00096ae <fp_to_int>
c000975b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000975e:	52                   	push   edx
c000975f:	52                   	push   edx
c0009760:	51                   	push   ecx
c0009761:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009765:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009769:	e8 1a a2 01 00       	call   c0023988 <__subsf3>
c000976e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009771:	e8 f1 b8 01 00       	call   c0025067 <__extendsfdf2>
c0009776:	83 c4 10             	add    esp,0x10
c0009779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000977d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000978d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009791:	e8 da ae 01 00       	call   c0024670 <__muldf3>
c0009796:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000979a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000979e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097a1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097a5:	e8 bd b8 01 00       	call   c0025067 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 2f a8 01 00       	call   c0023ff3 <__adddf3>
c00097c4:	59                   	pop    ecx
c00097c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097c9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097cd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097d3:	e8 8f b8 01 00       	call   c0025067 <__extendsfdf2>
c00097d8:	83 c4 10             	add    esp,0x10
c00097db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097e3:	52                   	push   edx
c00097e4:	50                   	push   eax
c00097e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097ed:	e8 7e ae 01 00       	call   c0024670 <__muldf3>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009807:	e8 e7 a7 01 00       	call   c0023ff3 <__adddf3>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009817:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000981b:	0f 89 1d ff ff ff    	jns    c000973e <calc_output_single+0x52>
c0009821:	89 d9                	mov    ecx,ebx
c0009823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009827:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000982b:	89 dd                	mov    ebp,ebx
c000982d:	29 c8                	sub    eax,ecx
c000982f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009837:	99                   	cdq    
c0009838:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009840:	f7 fb                	idiv   ebx
c0009842:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009846:	0f af e8             	imul   ebp,eax
c0009849:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000984d:	01 cd                	add    ebp,ecx
c000984f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009852:	89 e8                	mov    eax,ebp
c0009854:	83 ee 04             	sub    esi,0x4
c0009857:	e8 5c fe ff ff       	call   c00096b8 <fp_to_double>
c000985c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009864:	89 e8                	mov    eax,ebp
c0009866:	29 dd                	sub    ebp,ebx
c0009868:	e8 41 fe ff ff       	call   c00096ae <fp_to_int>
c000986d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009870:	52                   	push   edx
c0009871:	52                   	push   edx
c0009872:	51                   	push   ecx
c0009873:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009877:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000987b:	e8 08 a1 01 00       	call   c0023988 <__subsf3>
c0009880:	89 04 24             	mov    DWORD PTR [esp],eax
c0009883:	e8 df b7 01 00       	call   c0025067 <__extendsfdf2>
c0009888:	83 c4 10             	add    esp,0x10
c000988b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000988f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000989b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000989f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098a3:	e8 c8 ad 01 00       	call   c0024670 <__muldf3>
c00098a8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098b7:	e8 ab b7 01 00       	call   c0025067 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 1d a7 01 00       	call   c0023ff3 <__adddf3>
c00098d6:	59                   	pop    ecx
c00098d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098e5:	e8 7d b7 01 00       	call   c0025067 <__extendsfdf2>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098f5:	52                   	push   edx
c00098f6:	50                   	push   eax
c00098f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ff:	e8 6c ad 01 00       	call   c0024670 <__muldf3>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000990b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009919:	e8 d5 a6 01 00       	call   c0023ff3 <__adddf3>
c000991e:	83 c4 10             	add    esp,0x10
c0009921:	85 ed                	test   ebp,ebp
c0009923:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009927:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000992b:	0f 8f 21 ff ff ff    	jg     c0009852 <calc_output_single+0x166>
c0009931:	52                   	push   edx
c0009932:	50                   	push   eax
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000993b:	e8 b3 a6 01 00       	call   c0023ff3 <__adddf3>
c0009940:	83 c4 5c             	add    esp,0x5c
c0009943:	5b                   	pop    ebx
c0009944:	5e                   	pop    esi
c0009945:	5f                   	pop    edi
c0009946:	5d                   	pop    ebp
c0009947:	c3                   	ret    

c0009948 <calc_output_stereo>:
c0009948:	55                   	push   ebp
c0009949:	89 cd                	mov    ebp,ecx
c000994b:	57                   	push   edi
c000994c:	56                   	push   esi
c000994d:	53                   	push   ebx
c000994e:	89 c3                	mov    ebx,eax
c0009950:	83 ec 6c             	sub    esp,0x6c
c0009953:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009957:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000995e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009965:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009969:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000996d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009970:	e8 35 fd ff ff       	call   c00096aa <int_to_fp>
c0009975:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000997d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009981:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009989:	29 c8                	sub    eax,ecx
c000998b:	99                   	cdq    
c000998c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009994:	0f af d0             	imul   edx,eax
c0009997:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000999a:	31 d2                	xor    edx,edx
c000999c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099a4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099a7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099ab:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099b6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099b9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099be:	29 c1                	sub    ecx,eax
c00099c0:	31 c0                	xor    eax,eax
c00099c2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099cd:	83 c7 08             	add    edi,0x8
c00099d0:	e8 e3 fc ff ff       	call   c00096b8 <fp_to_double>
c00099d5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e1:	e8 c8 fc ff ff       	call   c00096ae <fp_to_int>
c00099e6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099e9:	52                   	push   edx
c00099ea:	52                   	push   edx
c00099eb:	51                   	push   ecx
c00099ec:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099f4:	e8 8f 9f 01 00       	call   c0023988 <__subsf3>
c00099f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099fc:	e8 66 b6 01 00       	call   c0025067 <__extendsfdf2>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a08:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a14:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a1c:	e8 4f ac 01 00       	call   c0024670 <__muldf3>
c0009a21:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a25:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a29:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a2c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a30:	e8 32 b6 01 00       	call   c0025067 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	52                   	push   edx
c0009a41:	50                   	push   eax
c0009a42:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a46:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a4a:	e8 a4 a5 01 00       	call   c0023ff3 <__adddf3>
c0009a4f:	59                   	pop    ecx
c0009a50:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a54:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a58:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a5e:	e8 04 b6 01 00       	call   c0025067 <__extendsfdf2>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7e:	e8 ed ab 01 00       	call   c0024670 <__muldf3>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	52                   	push   edx
c0009a8f:	50                   	push   eax
c0009a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a98:	e8 56 a5 01 00       	call   c0023ff3 <__adddf3>
c0009a9d:	59                   	pop    ecx
c0009a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aa6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009aac:	e8 b6 b5 01 00       	call   c0025067 <__extendsfdf2>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009abc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acc:	e8 9f ab 01 00       	call   c0024670 <__muldf3>
c0009ad1:	83 c4 10             	add    esp,0x10
c0009ad4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ad8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009adc:	52                   	push   edx
c0009add:	50                   	push   eax
c0009ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae6:	e8 08 a5 01 00       	call   c0023ff3 <__adddf3>
c0009aeb:	83 c4 10             	add    esp,0x10
c0009aee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009af2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009afa:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009afe:	0f 89 c5 fe ff ff    	jns    c00099c9 <calc_output_stereo+0x81>
c0009b04:	29 e9                	sub    ecx,ebp
c0009b06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b0a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b0e:	29 c8                	sub    eax,ecx
c0009b10:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b18:	99                   	cdq    
c0009b19:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b1d:	31 d2                	xor    edx,edx
c0009b1f:	0f af f8             	imul   edi,eax
c0009b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b26:	40                   	inc    eax
c0009b27:	01 cf                	add    edi,ecx
c0009b29:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b2e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b32:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b3a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b3d:	31 c0                	xor    eax,eax
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 f8                	mov    eax,edi
c0009b45:	83 eb 08             	sub    ebx,0x8
c0009b48:	e8 6b fb ff ff       	call   c00096b8 <fp_to_double>
c0009b4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b55:	89 f8                	mov    eax,edi
c0009b57:	e8 52 fb ff ff       	call   c00096ae <fp_to_int>
c0009b5c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b5f:	52                   	push   edx
c0009b60:	52                   	push   edx
c0009b61:	55                   	push   ebp
c0009b62:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b66:	e8 1d 9e 01 00       	call   c0023988 <__subsf3>
c0009b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b6e:	e8 f4 b4 01 00       	call   c0025067 <__extendsfdf2>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8e:	e8 dd aa 01 00       	call   c0024670 <__muldf3>
c0009b93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9e:	e8 c4 b4 01 00       	call   c0025067 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	52                   	push   edx
c0009baf:	50                   	push   eax
c0009bb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb8:	e8 36 a4 01 00       	call   c0023ff3 <__adddf3>
c0009bbd:	59                   	pop    ecx
c0009bbe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bc2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bc6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bcc:	e8 96 b4 01 00       	call   c0025067 <__extendsfdf2>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009be8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bec:	e8 7f aa 01 00       	call   c0024670 <__muldf3>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	52                   	push   edx
c0009bfd:	50                   	push   eax
c0009bfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c06:	e8 e8 a3 01 00       	call   c0023ff3 <__adddf3>
c0009c0b:	5d                   	pop    ebp
c0009c0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c10:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c14:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c1a:	e8 48 b4 01 00       	call   c0025067 <__extendsfdf2>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c26:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c3a:	e8 31 aa 01 00       	call   c0024670 <__muldf3>
c0009c3f:	83 c4 10             	add    esp,0x10
c0009c42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c4a:	52                   	push   edx
c0009c4b:	50                   	push   eax
c0009c4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c54:	e8 9a a3 01 00       	call   c0023ff3 <__adddf3>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c68:	85 ff                	test   edi,edi
c0009c6a:	0f 8f d3 fe ff ff    	jg     c0009b43 <calc_output_stereo+0x1fb>
c0009c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c80:	e8 6e a3 01 00       	call   c0023ff3 <__adddf3>
c0009c85:	83 c4 10             	add    esp,0x10
c0009c88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c90:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ca0:	e8 cb a9 01 00       	call   c0024670 <__muldf3>
c0009ca5:	59                   	pop    ecx
c0009ca6:	5b                   	pop    ebx
c0009ca7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009caf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb7:	e8 87 b2 01 00       	call   c0024f43 <__truncdfsf2>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cc6:	89 03                	mov    DWORD PTR [ebx],eax
c0009cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	e8 16 a3 01 00       	call   c0023ff3 <__adddf3>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ce8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf8:	e8 73 a9 01 00       	call   c0024670 <__muldf3>
c0009cfd:	5e                   	pop    esi
c0009cfe:	5f                   	pop    edi
c0009cff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d03:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 2f b2 01 00       	call   c0024f43 <__truncdfsf2>
c0009d14:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d1b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d1e:	83 c4 7c             	add    esp,0x7c
c0009d21:	5b                   	pop    ebx
c0009d22:	5e                   	pop    esi
c0009d23:	5f                   	pop    edi
c0009d24:	5d                   	pop    ebp
c0009d25:	c3                   	ret    

c0009d26 <calc_output_quad>:
c0009d26:	55                   	push   ebp
c0009d27:	57                   	push   edi
c0009d28:	56                   	push   esi
c0009d29:	89 c6                	mov    esi,eax
c0009d2b:	53                   	push   ebx
c0009d2c:	83 ec 7c             	sub    esp,0x7c
c0009d2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d37:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d3e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d50:	e8 55 f9 ff ff       	call   c00096aa <int_to_fp>
c0009d55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d58:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d5b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d5f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d63:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d67:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d6b:	99                   	cdq    
c0009d6c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d70:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d74:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d77:	31 d2                	xor    edx,edx
c0009d79:	0f af d8             	imul   ebx,eax
c0009d7c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d84:	0f af c7             	imul   eax,edi
c0009d87:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d8b:	29 c1                	sub    ecx,eax
c0009d8d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d9e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009daa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009db2:	89 d8                	mov    eax,ebx
c0009db4:	83 c7 10             	add    edi,0x10
c0009db7:	e8 fc f8 ff ff       	call   c00096b8 <fp_to_double>
c0009dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc4:	89 d8                	mov    eax,ebx
c0009dc6:	e8 e3 f8 ff ff       	call   c00096ae <fp_to_int>
c0009dcb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009dcf:	52                   	push   edx
c0009dd0:	52                   	push   edx
c0009dd1:	51                   	push   ecx
c0009dd2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009dd6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dda:	e8 a9 9b 01 00       	call   c0023988 <__subsf3>
c0009ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009de2:	e8 80 b2 01 00       	call   c0025067 <__extendsfdf2>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dfe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e02:	e8 69 a8 01 00       	call   c0024670 <__muldf3>
c0009e07:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e16:	e8 4c b2 01 00       	call   c0025067 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e30:	e8 be a1 01 00       	call   c0023ff3 <__adddf3>
c0009e35:	59                   	pop    ecx
c0009e36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e3a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e3e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e44:	e8 1e b2 01 00       	call   c0025067 <__extendsfdf2>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e60:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e64:	e8 07 a8 01 00       	call   c0024670 <__muldf3>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	52                   	push   edx
c0009e75:	50                   	push   eax
c0009e76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7e:	e8 70 a1 01 00       	call   c0023ff3 <__adddf3>
c0009e83:	59                   	pop    ecx
c0009e84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e88:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e8c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e92:	e8 d0 b1 01 00       	call   c0025067 <__extendsfdf2>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eaa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb2:	e8 b9 a7 01 00       	call   c0024670 <__muldf3>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	52                   	push   edx
c0009ec3:	50                   	push   eax
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	e8 22 a1 01 00       	call   c0023ff3 <__adddf3>
c0009ed1:	59                   	pop    ecx
c0009ed2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ed6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eda:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ee0:	e8 82 b1 01 00       	call   c0025067 <__extendsfdf2>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f00:	e8 6b a7 01 00       	call   c0024670 <__muldf3>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	52                   	push   edx
c0009f11:	50                   	push   eax
c0009f12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f1a:	e8 d4 a0 01 00       	call   c0023ff3 <__adddf3>
c0009f1f:	59                   	pop    ecx
c0009f20:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f24:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f28:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f2e:	e8 34 b1 01 00       	call   c0025067 <__extendsfdf2>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f3a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4e:	e8 1d a7 01 00       	call   c0024670 <__muldf3>
c0009f53:	83 c4 10             	add    esp,0x10
c0009f56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f5e:	52                   	push   edx
c0009f5f:	50                   	push   eax
c0009f60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f68:	e8 86 a0 01 00       	call   c0023ff3 <__adddf3>
c0009f6d:	83 c4 10             	add    esp,0x10
c0009f70:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f74:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f78:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f7c:	0f 89 30 fe ff ff    	jns    c0009db2 <calc_output_quad+0x8c>
c0009f82:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f8e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f9a:	29 c8                	sub    eax,ecx
c0009f9c:	99                   	cdq    
c0009f9d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa1:	31 d2                	xor    edx,edx
c0009fa3:	0f af d8             	imul   ebx,eax
c0009fa6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009faa:	40                   	inc    eax
c0009fab:	01 cb                	add    ebx,ecx
c0009fad:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fb2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fb6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fbe:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fc1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fc9:	31 c0                	xor    eax,eax
c0009fcb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fd7:	89 d8                	mov    eax,ebx
c0009fd9:	83 ee 10             	sub    esi,0x10
c0009fdc:	e8 d7 f6 ff ff       	call   c00096b8 <fp_to_double>
c0009fe1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fe9:	89 d8                	mov    eax,ebx
c0009feb:	e8 be f6 ff ff       	call   c00096ae <fp_to_int>
c0009ff0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009ff4:	52                   	push   edx
c0009ff5:	52                   	push   edx
c0009ff6:	57                   	push   edi
c0009ff7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009ffb:	e8 88 99 01 00       	call   c0023988 <__subsf3>
c000a000:	89 04 24             	mov    DWORD PTR [esp],eax
c000a003:	e8 5f b0 01 00       	call   c0025067 <__extendsfdf2>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a01b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a01f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a023:	e8 48 a6 01 00       	call   c0024670 <__muldf3>
c000a028:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a02b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a02f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a033:	e8 2f b0 01 00       	call   c0025067 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	52                   	push   edx
c000a044:	50                   	push   eax
c000a045:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a049:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04d:	e8 a1 9f 01 00       	call   c0023ff3 <__adddf3>
c000a052:	59                   	pop    ecx
c000a053:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a057:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a05b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a061:	e8 01 b0 01 00       	call   c0025067 <__extendsfdf2>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a079:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a081:	e8 ea a5 01 00       	call   c0024670 <__muldf3>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	52                   	push   edx
c000a092:	50                   	push   eax
c000a093:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a097:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a09b:	e8 53 9f 01 00       	call   c0023ff3 <__adddf3>
c000a0a0:	5f                   	pop    edi
c000a0a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0a5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0a9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0af:	e8 b3 af 01 00       	call   c0025067 <__extendsfdf2>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cf:	e8 9c a5 01 00       	call   c0024670 <__muldf3>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	52                   	push   edx
c000a0e0:	50                   	push   eax
c000a0e1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e9:	e8 05 9f 01 00       	call   c0023ff3 <__adddf3>
c000a0ee:	59                   	pop    ecx
c000a0ef:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0f3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0f7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0fd:	e8 65 af 01 00       	call   c0025067 <__extendsfdf2>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a115:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a119:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11d:	e8 4e a5 01 00       	call   c0024670 <__muldf3>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	52                   	push   edx
c000a12e:	50                   	push   eax
c000a12f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a133:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a137:	e8 b7 9e 01 00       	call   c0023ff3 <__adddf3>
c000a13c:	5f                   	pop    edi
c000a13d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a141:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a145:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a14b:	e8 17 af 01 00       	call   c0025067 <__extendsfdf2>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a157:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a163:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a167:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16b:	e8 00 a5 01 00       	call   c0024670 <__muldf3>
c000a170:	83 c4 10             	add    esp,0x10
c000a173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a177:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a17b:	52                   	push   edx
c000a17c:	50                   	push   eax
c000a17d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a181:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a185:	e8 69 9e 01 00       	call   c0023ff3 <__adddf3>
c000a18a:	83 c4 10             	add    esp,0x10
c000a18d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a191:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a195:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a199:	85 db                	test   ebx,ebx
c000a19b:	0f 8f 36 fe ff ff    	jg     c0009fd7 <calc_output_quad+0x2b1>
c000a1a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b1:	e8 3d 9e 01 00       	call   c0023ff3 <__adddf3>
c000a1b6:	83 c4 10             	add    esp,0x10
c000a1b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d1:	e8 9a a4 01 00       	call   c0024670 <__muldf3>
c000a1d6:	59                   	pop    ecx
c000a1d7:	5b                   	pop    ebx
c000a1d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e8:	e8 56 ad 01 00       	call   c0024f43 <__truncdfsf2>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1f7:	89 06                	mov    DWORD PTR [esi],eax
c000a1f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a205:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a209:	e8 e5 9d 01 00       	call   c0023ff3 <__adddf3>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a215:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a229:	e8 42 a4 01 00       	call   c0024670 <__muldf3>
c000a22e:	5e                   	pop    esi
c000a22f:	5f                   	pop    edi
c000a230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 fe ac 01 00       	call   c0024f43 <__truncdfsf2>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a24f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a252:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a256:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a25a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a25e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a262:	e8 8c 9d 01 00       	call   c0023ff3 <__adddf3>
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a26e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a282:	e8 e9 a3 01 00       	call   c0024670 <__muldf3>
c000a287:	5d                   	pop    ebp
c000a288:	59                   	pop    ecx
c000a289:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a28d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a299:	e8 a5 ac 01 00       	call   c0024f43 <__truncdfsf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2a8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2bb:	e8 33 9d 01 00       	call   c0023ff3 <__adddf3>
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2db:	e8 90 a3 01 00       	call   c0024670 <__muldf3>
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f2:	e8 4c ac 01 00       	call   c0024f43 <__truncdfsf2>
c000a2f7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2fe:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a301:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a307:	5b                   	pop    ebx
c000a308:	5e                   	pop    esi
c000a309:	5f                   	pop    edi
c000a30a:	5d                   	pop    ebp
c000a30b:	c3                   	ret    

c000a30c <calc_output_hex>:
c000a30c:	55                   	push   ebp
c000a30d:	89 cd                	mov    ebp,ecx
c000a30f:	57                   	push   edi
c000a310:	56                   	push   esi
c000a311:	53                   	push   ebx
c000a312:	89 c3                	mov    ebx,eax
c000a314:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a31a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a31d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a324:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a32b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a32f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a333:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a336:	e8 6f f3 ff ff       	call   c00096aa <int_to_fp>
c000a33b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a33e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a342:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a345:	29 c8                	sub    eax,ecx
c000a347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a34b:	99                   	cdq    
c000a34c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a354:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a357:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a35f:	0f af f8             	imul   edi,eax
c000a362:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a365:	01 cf                	add    edi,ecx
c000a367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a36b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a36e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a372:	0f af c2             	imul   eax,edx
c000a375:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a379:	29 c1                	sub    ecx,eax
c000a37b:	31 d2                	xor    edx,edx
c000a37d:	31 c0                	xor    eax,eax
c000a37f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a38e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a392:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a396:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a39a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a39e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3aa:	89 f8                	mov    eax,edi
c000a3ac:	e8 07 f3 ff ff       	call   c00096b8 <fp_to_double>
c000a3b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3b9:	89 f8                	mov    eax,edi
c000a3bb:	e8 ee f2 ff ff       	call   c00096ae <fp_to_int>
c000a3c0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3c4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3c7:	52                   	push   edx
c000a3c8:	52                   	push   edx
c000a3c9:	51                   	push   ecx
c000a3ca:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3d9:	e8 aa 95 01 00       	call   c0023988 <__subsf3>
c000a3de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e1:	e8 81 ac 01 00       	call   c0025067 <__extendsfdf2>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a401:	e8 6a a2 01 00       	call   c0024670 <__muldf3>
c000a406:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a40e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a411:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a415:	e8 4d ac 01 00       	call   c0025067 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	52                   	push   edx
c000a426:	50                   	push   eax
c000a427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42f:	e8 bf 9b 01 00       	call   c0023ff3 <__adddf3>
c000a434:	59                   	pop    ecx
c000a435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a439:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a43d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a443:	e8 1f ac 01 00       	call   c0025067 <__extendsfdf2>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a45f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a463:	e8 08 a2 01 00       	call   c0024670 <__muldf3>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	52                   	push   edx
c000a474:	50                   	push   eax
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a47d:	e8 71 9b 01 00       	call   c0023ff3 <__adddf3>
c000a482:	59                   	pop    ecx
c000a483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a487:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a48b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a491:	e8 d1 ab 01 00       	call   c0025067 <__extendsfdf2>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b1:	e8 ba a1 01 00       	call   c0024670 <__muldf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	52                   	push   edx
c000a4c2:	50                   	push   eax
c000a4c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cb:	e8 23 9b 01 00       	call   c0023ff3 <__adddf3>
c000a4d0:	59                   	pop    ecx
c000a4d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4d5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4d9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4df:	e8 83 ab 01 00       	call   c0025067 <__extendsfdf2>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ff:	e8 6c a1 01 00       	call   c0024670 <__muldf3>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	52                   	push   edx
c000a510:	50                   	push   eax
c000a511:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a515:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a519:	e8 d5 9a 01 00       	call   c0023ff3 <__adddf3>
c000a51e:	59                   	pop    ecx
c000a51f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a523:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a527:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a52d:	e8 35 ab 01 00       	call   c0025067 <__extendsfdf2>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54d:	e8 1e a1 01 00       	call   c0024670 <__muldf3>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	52                   	push   edx
c000a55e:	50                   	push   eax
c000a55f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a563:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a567:	e8 87 9a 01 00       	call   c0023ff3 <__adddf3>
c000a56c:	59                   	pop    ecx
c000a56d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a571:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a575:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a57b:	e8 e7 aa 01 00       	call   c0025067 <__extendsfdf2>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a587:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59b:	e8 d0 a0 01 00       	call   c0024670 <__muldf3>
c000a5a0:	83 c4 10             	add    esp,0x10
c000a5a3:	83 c6 18             	add    esi,0x18
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	52                   	push   edx
c000a5af:	50                   	push   eax
c000a5b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b8:	e8 36 9a 01 00       	call   c0023ff3 <__adddf3>
c000a5bd:	59                   	pop    ecx
c000a5be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5c2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5c6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5cc:	e8 96 aa 01 00       	call   c0025067 <__extendsfdf2>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ec:	e8 7f a0 01 00       	call   c0024670 <__muldf3>
c000a5f1:	83 c4 10             	add    esp,0x10
c000a5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5fc:	52                   	push   edx
c000a5fd:	50                   	push   eax
c000a5fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a602:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a606:	e8 e8 99 01 00       	call   c0023ff3 <__adddf3>
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a612:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a616:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a619:	0f 89 8b fd ff ff    	jns    c000a3aa <calc_output_hex+0x9e>
c000a61f:	31 f6                	xor    esi,esi
c000a621:	31 ff                	xor    edi,edi
c000a623:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a627:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a62a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a62e:	29 e9                	sub    ecx,ebp
c000a630:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a634:	29 c8                	sub    eax,ecx
c000a636:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a639:	99                   	cdq    
c000a63a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a63e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a641:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a645:	0f af e8             	imul   ebp,eax
c000a648:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a64c:	40                   	inc    eax
c000a64d:	01 cd                	add    ebp,ecx
c000a64f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a654:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a658:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a65c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a660:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a663:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a667:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a66b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a66f:	89 e8                	mov    eax,ebp
c000a671:	e8 42 f0 ff ff       	call   c00096b8 <fp_to_double>
c000a676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a67e:	89 e8                	mov    eax,ebp
c000a680:	e8 29 f0 ff ff       	call   c00096ae <fp_to_int>
c000a685:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a689:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a68c:	52                   	push   edx
c000a68d:	52                   	push   edx
c000a68e:	51                   	push   ecx
c000a68f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a696:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a69d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6a1:	e8 e2 92 01 00       	call   c0023988 <__subsf3>
c000a6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a9:	e8 b9 a9 01 00       	call   c0025067 <__extendsfdf2>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6b5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c9:	e8 a2 9f 01 00       	call   c0024670 <__muldf3>
c000a6ce:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6e0:	e8 82 a9 01 00       	call   c0025067 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	52                   	push   edx
c000a6f1:	50                   	push   eax
c000a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 f4 98 01 00       	call   c0023ff3 <__adddf3>
c000a6ff:	59                   	pop    ecx
c000a700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a704:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a708:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a70e:	e8 54 a9 01 00       	call   c0025067 <__extendsfdf2>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a726:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72e:	e8 3d 9f 01 00       	call   c0024670 <__muldf3>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	52                   	push   edx
c000a73f:	50                   	push   eax
c000a740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a748:	e8 a6 98 01 00       	call   c0023ff3 <__adddf3>
c000a74d:	59                   	pop    ecx
c000a74e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a752:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a756:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a75c:	e8 06 a9 01 00       	call   c0025067 <__extendsfdf2>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a774:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a778:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77c:	e8 ef 9e 01 00       	call   c0024670 <__muldf3>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	52                   	push   edx
c000a78d:	50                   	push   eax
c000a78e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a792:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a796:	e8 58 98 01 00       	call   c0023ff3 <__adddf3>
c000a79b:	59                   	pop    ecx
c000a79c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7a0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7a4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7aa:	e8 b8 a8 01 00       	call   c0025067 <__extendsfdf2>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ca:	e8 a1 9e 01 00       	call   c0024670 <__muldf3>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	52                   	push   edx
c000a7db:	50                   	push   eax
c000a7dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e4:	e8 0a 98 01 00       	call   c0023ff3 <__adddf3>
c000a7e9:	59                   	pop    ecx
c000a7ea:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ee:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7f2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7f8:	e8 6a a8 01 00       	call   c0025067 <__extendsfdf2>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a814:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a818:	e8 53 9e 01 00       	call   c0024670 <__muldf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	52                   	push   edx
c000a829:	50                   	push   eax
c000a82a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a82e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a832:	e8 bc 97 01 00       	call   c0023ff3 <__adddf3>
c000a837:	59                   	pop    ecx
c000a838:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a83c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a840:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a846:	e8 1c a8 01 00       	call   c0025067 <__extendsfdf2>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a852:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a856:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a862:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a866:	e8 05 9e 01 00       	call   c0024670 <__muldf3>
c000a86b:	83 c4 10             	add    esp,0x10
c000a86e:	83 eb 18             	sub    ebx,0x18
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	52                   	push   edx
c000a87a:	50                   	push   eax
c000a87b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a87f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a883:	e8 6b 97 01 00       	call   c0023ff3 <__adddf3>
c000a888:	59                   	pop    ecx
c000a889:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a88d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a891:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a897:	e8 cb a7 01 00       	call   c0025067 <__extendsfdf2>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b7:	e8 b4 9d 01 00       	call   c0024670 <__muldf3>
c000a8bc:	83 c4 10             	add    esp,0x10
c000a8bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8c7:	52                   	push   edx
c000a8c8:	50                   	push   eax
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	e8 23 97 01 00       	call   c0023ff3 <__adddf3>
c000a8d0:	83 c4 10             	add    esp,0x10
c000a8d3:	89 c6                	mov    esi,eax
c000a8d5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8d8:	89 d7                	mov    edi,edx
c000a8da:	85 ed                	test   ebp,ebp
c000a8dc:	0f 8f 8d fd ff ff    	jg     c000a66f <calc_output_hex+0x363>
c000a8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f2:	e8 fc 96 01 00       	call   c0023ff3 <__adddf3>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a901:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a90d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a911:	e8 5a 9d 01 00       	call   c0024670 <__muldf3>
c000a916:	59                   	pop    ecx
c000a917:	5b                   	pop    ebx
c000a918:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a91c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a920:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a928:	e8 16 a6 01 00       	call   c0024f43 <__truncdfsf2>
c000a92d:	83 c4 10             	add    esp,0x10
c000a930:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a937:	89 03                	mov    DWORD PTR [ebx],eax
c000a939:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a93d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a941:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a945:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a949:	e8 a5 96 01 00       	call   c0023ff3 <__adddf3>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	89 04 24             	mov    DWORD PTR [esp],eax
c000a954:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a958:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a968:	e8 03 9d 01 00       	call   c0024670 <__muldf3>
c000a96d:	5d                   	pop    ebp
c000a96e:	59                   	pop    ecx
c000a96f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a977:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97f:	e8 bf a5 01 00       	call   c0024f43 <__truncdfsf2>
c000a984:	83 c4 10             	add    esp,0x10
c000a987:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a98e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a991:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a995:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a99d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9a1:	e8 4d 96 01 00       	call   c0023ff3 <__adddf3>
c000a9a6:	83 c4 10             	add    esp,0x10
c000a9a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c0:	e8 ab 9c 01 00       	call   c0024670 <__muldf3>
c000a9c5:	5b                   	pop    ebx
c000a9c6:	5d                   	pop    ebp
c000a9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 67 a5 01 00       	call   c0024f43 <__truncdfsf2>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9e6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9ed:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f9:	e8 f5 95 01 00       	call   c0023ff3 <__adddf3>
c000a9fe:	83 c4 10             	add    esp,0x10
c000aa01:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa18:	e8 53 9c 01 00       	call   c0024670 <__muldf3>
c000aa1d:	59                   	pop    ecx
c000aa1e:	5b                   	pop    ebx
c000aa1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 0f a5 01 00       	call   c0024f43 <__truncdfsf2>
c000aa34:	83 c4 10             	add    esp,0x10
c000aa37:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa3e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa51:	e8 9d 95 01 00       	call   c0023ff3 <__adddf3>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa70:	e8 fb 9b 01 00       	call   c0024670 <__muldf3>
c000aa75:	5d                   	pop    ebp
c000aa76:	59                   	pop    ecx
c000aa77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 b7 a4 01 00       	call   c0024f43 <__truncdfsf2>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa96:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa99:	57                   	push   edi
c000aa9a:	56                   	push   esi
c000aa9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa9f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaa3:	e8 4b 95 01 00       	call   c0023ff3 <__adddf3>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aab2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac2:	e8 a9 9b 01 00       	call   c0024670 <__muldf3>
c000aac7:	5b                   	pop    ebx
c000aac8:	5e                   	pop    esi
c000aac9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aacd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 65 a4 01 00       	call   c0024f43 <__truncdfsf2>
c000aade:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aae5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aae8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aaee:	5b                   	pop    ebx
c000aaef:	5e                   	pop    esi
c000aaf0:	5f                   	pop    edi
c000aaf1:	5d                   	pop    ebp
c000aaf2:	c3                   	ret    

c000aaf3 <sinc_reset>:
c000aaf3:	56                   	push   esi
c000aaf4:	53                   	push   ebx
c000aaf5:	51                   	push   ecx
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aafd:	85 db                	test   ebx,ebx
c000aaff:	74 59                	je     c000ab5a <sinc_reset+0x67>
c000ab01:	31 d2                	xor    edx,edx
c000ab03:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab0a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab0d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab10:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab17:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab1e:	31 c0                	xor    eax,eax
c000ab20:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab26:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab2c:	52                   	push   edx
c000ab2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab30:	c1 e0 02             	shl    eax,0x2
c000ab33:	50                   	push   eax
c000ab34:	6a 00                	push   0x0
c000ab36:	56                   	push   esi
c000ab37:	e8 41 5b ff ff       	call   c000067d <memset>
c000ab3c:	83 c4 0c             	add    esp,0xc
c000ab3f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab42:	c1 e0 02             	shl    eax,0x2
c000ab45:	50                   	push   eax
c000ab46:	68 aa 00 00 00       	push   0xaa
c000ab4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab4e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab51:	50                   	push   eax
c000ab52:	e8 26 5b ff ff       	call   c000067d <memset>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	58                   	pop    eax
c000ab5b:	5b                   	pop    ebx
c000ab5c:	5e                   	pop    esi
c000ab5d:	c3                   	ret    

c000ab5e <calc_output_multi>:
c000ab5e:	55                   	push   ebp
c000ab5f:	57                   	push   edi
c000ab60:	56                   	push   esi
c000ab61:	89 c6                	mov    esi,eax
c000ab63:	53                   	push   ebx
c000ab64:	83 ec 4c             	sub    esp,0x4c
c000ab67:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab6b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab73:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab77:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab83:	8d 46 44             	lea    eax,[esi+0x44]
c000ab86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab89:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab93:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab96:	e8 0f eb ff ff       	call   c00096aa <int_to_fp>
c000ab9b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab9e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000aba2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000aba6:	99                   	cdq    
c000aba7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abaf:	0f af d0             	imul   edx,eax
c000abb2:	0f af c3             	imul   eax,ebx
c000abb5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abb9:	29 c1                	sub    ecx,eax
c000abbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abc3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abce:	57                   	push   edi
c000abcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abd3:	6a 00                	push   0x0
c000abd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd9:	e8 9f 5a ff ff       	call   c000067d <memset>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abe5:	89 df                	mov    edi,ebx
c000abe7:	e8 cc ea ff ff       	call   c00096b8 <fp_to_double>
c000abec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abf0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abf8:	e8 b1 ea ff ff       	call   c00096ae <fp_to_int>
c000abfd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac00:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac03:	51                   	push   ecx
c000ac04:	51                   	push   ecx
c000ac05:	55                   	push   ebp
c000ac06:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac0a:	e8 79 8d 01 00       	call   c0023988 <__subsf3>
c000ac0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac12:	e8 50 a4 01 00       	call   c0025067 <__extendsfdf2>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac32:	e8 39 9a 01 00       	call   c0024670 <__muldf3>
c000ac37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac42:	e8 20 a4 01 00       	call   c0025067 <__extendsfdf2>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac52:	52                   	push   edx
c000ac53:	50                   	push   eax
c000ac54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5c:	e8 92 93 01 00       	call   c0023ff3 <__adddf3>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac6c:	89 f8                	mov    eax,edi
c000ac6e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac73:	99                   	cdq    
c000ac74:	f7 f9                	idiv   ecx
c000ac76:	4a                   	dec    edx
c000ac77:	83 fa 06             	cmp    edx,0x6
c000ac7a:	77 07                	ja     c000ac83 <calc_output_multi+0x125>
c000ac7c:	ff 24 95 84 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd987c]
c000ac83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac86:	4f                   	dec    edi
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac91:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac98:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac9c:	e8 c6 a3 01 00       	call   c0025067 <__extendsfdf2>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acbc:	e8 af 99 01 00       	call   c0024670 <__muldf3>
c000acc1:	83 c4 10             	add    esp,0x10
c000acc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000accc:	52                   	push   edx
c000accd:	50                   	push   eax
c000acce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acd1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acd4:	e8 1a 93 01 00       	call   c0023ff3 <__adddf3>
c000acd9:	83 c4 10             	add    esp,0x10
c000acdc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acdf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ace2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ace5:	4f                   	dec    edi
c000ace6:	83 ec 0c             	sub    esp,0xc
c000ace9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acf0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acf7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acfb:	e8 67 a3 01 00       	call   c0025067 <__extendsfdf2>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad1b:	e8 50 99 01 00       	call   c0024670 <__muldf3>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad27:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad2b:	52                   	push   edx
c000ad2c:	50                   	push   eax
c000ad2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad30:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad33:	e8 bb 92 01 00       	call   c0023ff3 <__adddf3>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad3e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad44:	4f                   	dec    edi
c000ad45:	83 ec 0c             	sub    esp,0xc
c000ad48:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad4f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad56:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad5a:	e8 08 a3 01 00       	call   c0025067 <__extendsfdf2>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad7a:	e8 f1 98 01 00       	call   c0024670 <__muldf3>
c000ad7f:	83 c4 10             	add    esp,0x10
c000ad82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad8a:	52                   	push   edx
c000ad8b:	50                   	push   eax
c000ad8c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad8f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad92:	e8 5c 92 01 00       	call   c0023ff3 <__adddf3>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad9d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ada0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ada3:	4f                   	dec    edi
c000ada4:	83 ec 0c             	sub    esp,0xc
c000ada7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adae:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adb5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adb9:	e8 a9 a2 01 00       	call   c0025067 <__extendsfdf2>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add9:	e8 92 98 01 00       	call   c0024670 <__muldf3>
c000adde:	83 c4 10             	add    esp,0x10
c000ade1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ade5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade9:	52                   	push   edx
c000adea:	50                   	push   eax
c000adeb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adf1:	e8 fd 91 01 00       	call   c0023ff3 <__adddf3>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adfc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae02:	4f                   	dec    edi
c000ae03:	83 ec 0c             	sub    esp,0xc
c000ae06:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae0d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae14:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae18:	e8 4a a2 01 00       	call   c0025067 <__extendsfdf2>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae38:	e8 33 98 01 00       	call   c0024670 <__muldf3>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae4d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae50:	e8 9e 91 01 00       	call   c0023ff3 <__adddf3>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae61:	4f                   	dec    edi
c000ae62:	83 ec 0c             	sub    esp,0xc
c000ae65:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae6c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae77:	e8 eb a1 01 00       	call   c0025067 <__extendsfdf2>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae97:	e8 d4 97 01 00       	call   c0024670 <__muldf3>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea7:	52                   	push   edx
c000aea8:	50                   	push   eax
c000aea9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeaf:	e8 3f 91 01 00       	call   c0023ff3 <__adddf3>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aebd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aec0:	4f                   	dec    edi
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aecb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed6:	e8 8c a1 01 00       	call   c0025067 <__extendsfdf2>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef6:	e8 75 97 01 00       	call   c0024670 <__muldf3>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af02:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af06:	52                   	push   edx
c000af07:	50                   	push   eax
c000af08:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af0b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0e:	e8 e0 90 01 00       	call   c0023ff3 <__adddf3>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af19:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1f:	4f                   	dec    edi
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af2a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af31:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af35:	e8 2d a1 01 00       	call   c0025067 <__extendsfdf2>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af55:	e8 16 97 01 00       	call   c0024670 <__muldf3>
c000af5a:	83 c4 10             	add    esp,0x10
c000af5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af65:	52                   	push   edx
c000af66:	50                   	push   eax
c000af67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af6a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6d:	e8 81 90 01 00       	call   c0023ff3 <__adddf3>
c000af72:	83 c4 10             	add    esp,0x10
c000af75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af78:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af7b:	85 ff                	test   edi,edi
c000af7d:	0f 8f e9 fc ff ff    	jg     c000ac6c <calc_output_multi+0x10e>
c000af83:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af8b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af8f:	0f 89 4c fc ff ff    	jns    c000abe1 <calc_output_multi+0x83>
c000af95:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af9d:	29 c8                	sub    eax,ecx
c000af9f:	99                   	cdq    
c000afa0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afa8:	0f af d0             	imul   edx,eax
c000afab:	40                   	inc    eax
c000afac:	01 d1                	add    ecx,edx
c000afae:	0f af c3             	imul   eax,ebx
c000afb1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afb5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afbc:	55                   	push   ebp
c000afbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afc1:	6a 00                	push   0x0
c000afc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afc7:	e8 b1 56 ff ff       	call   c000067d <memset>
c000afcc:	83 c4 10             	add    esp,0x10
c000afcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afd3:	e8 e0 e6 ff ff       	call   c00096b8 <fp_to_double>
c000afd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afe4:	e8 c5 e6 ff ff       	call   c00096ae <fp_to_int>
c000afe9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afec:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afef:	57                   	push   edi
c000aff0:	57                   	push   edi
c000aff1:	89 df                	mov    edi,ebx
c000aff3:	55                   	push   ebp
c000aff4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aff8:	e8 8b 89 01 00       	call   c0023988 <__subsf3>
c000affd:	89 04 24             	mov    DWORD PTR [esp],eax
c000b000:	e8 62 a0 01 00       	call   c0025067 <__extendsfdf2>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b01c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b020:	e8 4b 96 01 00       	call   c0024670 <__muldf3>
c000b025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b028:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b02c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b030:	e8 32 a0 01 00       	call   c0025067 <__extendsfdf2>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b040:	52                   	push   edx
c000b041:	50                   	push   eax
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04a:	e8 a4 8f 01 00       	call   c0023ff3 <__adddf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b05a:	89 f8                	mov    eax,edi
c000b05c:	b9 08 00 00 00       	mov    ecx,0x8
c000b061:	99                   	cdq    
c000b062:	f7 f9                	idiv   ecx
c000b064:	4a                   	dec    edx
c000b065:	83 fa 06             	cmp    edx,0x6
c000b068:	77 07                	ja     c000b071 <calc_output_multi+0x513>
c000b06a:	ff 24 95 a0 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9860]
c000b071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b075:	4f                   	dec    edi
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b080:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b087:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b08b:	e8 d7 9f 01 00       	call   c0025067 <__extendsfdf2>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ab:	e8 c0 95 01 00       	call   c0024670 <__muldf3>
c000b0b0:	83 c4 10             	add    esp,0x10
c000b0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0bb:	52                   	push   edx
c000b0bc:	50                   	push   eax
c000b0bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c3:	e8 2b 8f 01 00       	call   c0023ff3 <__adddf3>
c000b0c8:	83 c4 10             	add    esp,0x10
c000b0cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d5:	4f                   	dec    edi
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0eb:	e8 77 9f 01 00       	call   c0025067 <__extendsfdf2>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b103:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b107:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b10b:	e8 60 95 01 00       	call   c0024670 <__muldf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b117:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b11b:	52                   	push   edx
c000b11c:	50                   	push   eax
c000b11d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b120:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b123:	e8 cb 8e 01 00       	call   c0023ff3 <__adddf3>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b135:	4f                   	dec    edi
c000b136:	83 ec 0c             	sub    esp,0xc
c000b139:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b13c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b140:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b147:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b14b:	e8 17 9f 01 00       	call   c0025067 <__extendsfdf2>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b163:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b167:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b16b:	e8 00 95 01 00       	call   c0024670 <__muldf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b177:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b17b:	52                   	push   edx
c000b17c:	50                   	push   eax
c000b17d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b180:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b183:	e8 6b 8e 01 00       	call   c0023ff3 <__adddf3>
c000b188:	83 c4 10             	add    esp,0x10
c000b18b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b195:	4f                   	dec    edi
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b19c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1ab:	e8 b7 9e 01 00       	call   c0025067 <__extendsfdf2>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1cb:	e8 a0 94 01 00       	call   c0024670 <__muldf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1db:	52                   	push   edx
c000b1dc:	50                   	push   eax
c000b1dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1e3:	e8 0b 8e 01 00       	call   c0023ff3 <__adddf3>
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f5:	4f                   	dec    edi
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b200:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b207:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b20b:	e8 57 9e 01 00       	call   c0025067 <__extendsfdf2>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22b:	e8 40 94 01 00       	call   c0024670 <__muldf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b23b:	52                   	push   edx
c000b23c:	50                   	push   eax
c000b23d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b240:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b243:	e8 ab 8d 01 00       	call   c0023ff3 <__adddf3>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b24e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b255:	4f                   	dec    edi
c000b256:	83 ec 0c             	sub    esp,0xc
c000b259:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b25c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b260:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b267:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b26b:	e8 f7 9d 01 00       	call   c0025067 <__extendsfdf2>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b27f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b283:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b287:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b28b:	e8 e0 93 01 00       	call   c0024670 <__muldf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b29b:	52                   	push   edx
c000b29c:	50                   	push   eax
c000b29d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2a3:	e8 4b 8d 01 00       	call   c0023ff3 <__adddf3>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2b5:	4f                   	dec    edi
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2cb:	e8 97 9d 01 00       	call   c0025067 <__extendsfdf2>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2eb:	e8 80 93 01 00       	call   c0024670 <__muldf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2fb:	52                   	push   edx
c000b2fc:	50                   	push   eax
c000b2fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b300:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b303:	e8 eb 8c 01 00       	call   c0023ff3 <__adddf3>
c000b308:	83 c4 10             	add    esp,0x10
c000b30b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b30e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b315:	4f                   	dec    edi
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b31c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b320:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b327:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b32b:	e8 37 9d 01 00       	call   c0025067 <__extendsfdf2>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b343:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b34b:	e8 20 93 01 00       	call   c0024670 <__muldf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b35b:	52                   	push   edx
c000b35c:	50                   	push   eax
c000b35d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b360:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b363:	e8 8b 8c 01 00       	call   c0023ff3 <__adddf3>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b36e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b371:	85 ff                	test   edi,edi
c000b373:	0f 8f e1 fc ff ff    	jg     c000b05a <calc_output_multi+0x4fc>
c000b379:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b37d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b381:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b385:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b38a:	0f 8f 3f fc ff ff    	jg     c000afcf <calc_output_multi+0x471>
c000b390:	be 08 00 00 00       	mov    esi,0x8
c000b395:	89 d8                	mov    eax,ebx
c000b397:	99                   	cdq    
c000b398:	f7 fe                	idiv   esi
c000b39a:	4a                   	dec    edx
c000b39b:	83 fa 06             	cmp    edx,0x6
c000b39e:	77 07                	ja     c000b3a7 <calc_output_multi+0x849>
c000b3a0:	ff 24 95 bc 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9844]
c000b3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3ab:	4b                   	dec    ebx
c000b3ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3be:	e8 30 8c 01 00       	call   c0023ff3 <__adddf3>
c000b3c3:	83 c4 10             	add    esp,0x10
c000b3c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3de:	e8 8d 92 01 00       	call   c0024670 <__muldf3>
c000b3e3:	5d                   	pop    ebp
c000b3e4:	59                   	pop    ecx
c000b3e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f5:	e8 49 9b 01 00       	call   c0024f43 <__truncdfsf2>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b401:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b408:	4b                   	dec    ebx
c000b409:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b40d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b414:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b418:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41b:	e8 d3 8b 01 00       	call   c0023ff3 <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43b:	e8 30 92 01 00       	call   c0024670 <__muldf3>
c000b440:	59                   	pop    ecx
c000b441:	5f                   	pop    edi
c000b442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b452:	e8 ec 9a 01 00       	call   c0024f43 <__truncdfsf2>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b45e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b465:	4b                   	dec    ebx
c000b466:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b46a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b46d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b471:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b475:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b478:	e8 76 8b 01 00       	call   c0023ff3 <__adddf3>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b498:	e8 d3 91 01 00       	call   c0024670 <__muldf3>
c000b49d:	5f                   	pop    edi
c000b49e:	5d                   	pop    ebp
c000b49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	e8 8f 9a 01 00       	call   c0024f43 <__truncdfsf2>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4bb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	4b                   	dec    ebx
c000b4c3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ce:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d5:	e8 19 8b 01 00       	call   c0023ff3 <__adddf3>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	e8 76 91 01 00       	call   c0024670 <__muldf3>
c000b4fa:	5d                   	pop    ebp
c000b4fb:	59                   	pop    ecx
c000b4fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50c:	e8 32 9a 01 00       	call   c0024f43 <__truncdfsf2>
c000b511:	83 c4 10             	add    esp,0x10
c000b514:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b518:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51f:	4b                   	dec    ebx
c000b520:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b524:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b52b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b52f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b532:	e8 bc 8a 01 00       	call   c0023ff3 <__adddf3>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b53e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b54e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b552:	e8 19 91 01 00       	call   c0024670 <__muldf3>
c000b557:	59                   	pop    ecx
c000b558:	5f                   	pop    edi
c000b559:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b55d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b569:	e8 d5 99 01 00       	call   c0024f43 <__truncdfsf2>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b575:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b57c:	4b                   	dec    ebx
c000b57d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b581:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b588:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b58f:	e8 5f 8a 01 00       	call   c0023ff3 <__adddf3>
c000b594:	83 c4 10             	add    esp,0x10
c000b597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b59b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5af:	e8 bc 90 01 00       	call   c0024670 <__muldf3>
c000b5b4:	5f                   	pop    edi
c000b5b5:	5d                   	pop    ebp
c000b5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c6:	e8 78 99 01 00       	call   c0024f43 <__truncdfsf2>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5d2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5d9:	4b                   	dec    ebx
c000b5da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ec:	e8 02 8a 01 00       	call   c0023ff3 <__adddf3>
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b604:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60c:	e8 5f 90 01 00       	call   c0024670 <__muldf3>
c000b611:	5d                   	pop    ebp
c000b612:	59                   	pop    ecx
c000b613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b617:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b623:	e8 1b 99 01 00       	call   c0024f43 <__truncdfsf2>
c000b628:	83 c4 10             	add    esp,0x10
c000b62b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b62f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b636:	4b                   	dec    ebx
c000b637:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b642:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b646:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b649:	e8 a5 89 01 00       	call   c0023ff3 <__adddf3>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b661:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b669:	e8 02 90 01 00       	call   c0024670 <__muldf3>
c000b66e:	59                   	pop    ecx
c000b66f:	5f                   	pop    edi
c000b670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b674:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b680:	e8 be 98 01 00       	call   c0024f43 <__truncdfsf2>
c000b685:	83 c4 10             	add    esp,0x10
c000b688:	85 db                	test   ebx,ebx
c000b68a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b691:	0f 8f fe fc ff ff    	jg     c000b395 <calc_output_multi+0x837>
c000b697:	83 c4 4c             	add    esp,0x4c
c000b69a:	5b                   	pop    ebx
c000b69b:	5e                   	pop    esi
c000b69c:	5f                   	pop    edi
c000b69d:	5d                   	pop    ebp
c000b69e:	c3                   	ret    

c000b69f <double_to_fp>:
c000b69f:	83 ec 0c             	sub    esp,0xc
c000b6a2:	68 00 00 b0 40       	push   0x40b00000
c000b6a7:	6a 00                	push   0x0
c000b6a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b1:	e8 ba 8f 01 00       	call   c0024670 <__muldf3>
c000b6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6be:	83 c4 1c             	add    esp,0x1c
c000b6c1:	e9 2a 9a 01 00       	jmp    c00250f0 <lrint>

c000b6c6 <fmod_one>:
c000b6c6:	83 ec 2c             	sub    esp,0x2c
c000b6c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b6d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6d9:	83 ec 08             	sub    esp,0x8
c000b6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e4:	e8 07 9a 01 00       	call   c00250f0 <lrint>
c000b6e9:	83 c4 10             	add    esp,0x10
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	50                   	push   eax
c000b6f0:	e8 de 95 01 00       	call   c0024cd3 <__floatsidf>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	52                   	push   edx
c000b6f9:	50                   	push   eax
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 3d 8f 01 00       	call   c0024644 <__subdf3>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b70e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b712:	b8 00 00 00 00       	mov    eax,0x0
c000b717:	ba 00 00 00 00       	mov    edx,0x0
c000b71c:	52                   	push   edx
c000b71d:	50                   	push   eax
c000b71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b722:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b726:	e8 14 98 01 00       	call   c0024f3f <__ltdf2>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	85 c0                	test   eax,eax
c000b730:	79 1e                	jns    c000b750 <fmod_one+0x8a>
c000b732:	b8 00 00 00 00       	mov    eax,0x0
c000b737:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b73c:	52                   	push   edx
c000b73d:	50                   	push   eax
c000b73e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b742:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b746:	e8 a8 88 01 00       	call   c0023ff3 <__adddf3>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	eb 08                	jmp    c000b758 <fmod_one+0x92>
c000b750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b754:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b758:	83 c4 2c             	add    esp,0x2c
c000b75b:	c3                   	ret    

c000b75c <prepare_data>:
c000b75c:	55                   	push   ebp
c000b75d:	57                   	push   edi
c000b75e:	56                   	push   esi
c000b75f:	53                   	push   ebx
c000b760:	83 ec 1c             	sub    esp,0x1c
c000b763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b767:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b76b:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b76f:	0f 89 57 01 00 00    	jns    c000b8cc <prepare_data+0x170>
c000b775:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b778:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b77b:	85 d2                	test   edx,edx
c000b77d:	75 0d                	jne    c000b78c <prepare_data+0x30>
c000b77f:	8d 14 36             	lea    edx,[esi+esi*1]
c000b782:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b785:	29 d0                	sub    eax,edx
c000b787:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b78a:	eb 44                	jmp    c000b7d0 <prepare_data+0x74>
c000b78c:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b78f:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b792:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b795:	39 c1                	cmp    ecx,eax
c000b797:	7d 04                	jge    c000b79d <prepare_data+0x41>
c000b799:	29 d0                	sub    eax,edx
c000b79b:	eb 2d                	jmp    c000b7ca <prepare_data+0x6e>
c000b79d:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7a3:	29 d7                	sub    edi,edx
c000b7a5:	01 f7                	add    edi,esi
c000b7a7:	51                   	push   ecx
c000b7a8:	29 f2                	sub    edx,esi
c000b7aa:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7b1:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7b4:	51                   	push   ecx
c000b7b5:	52                   	push   edx
c000b7b6:	50                   	push   eax
c000b7b7:	e8 53 4e ff ff       	call   c000060f <memmove>
c000b7bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7bf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7c2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7c5:	29 f0                	sub    eax,esi
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	29 f0                	sub    eax,esi
c000b7cc:	79 02                	jns    c000b7d0 <prepare_data+0x74>
c000b7ce:	31 c0                	xor    eax,eax
c000b7d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b7d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b7d6:	29 ef                	sub    edi,ebp
c000b7d8:	39 c7                	cmp    edi,eax
c000b7da:	7e 02                	jle    c000b7de <prepare_data+0x82>
c000b7dc:	89 c7                	mov    edi,eax
c000b7de:	89 f8                	mov    eax,edi
c000b7e0:	99                   	cdq    
c000b7e1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b7e4:	b8 15 00 00 00       	mov    eax,0x15
c000b7e9:	29 d7                	sub    edi,edx
c000b7eb:	0f 88 dd 00 00 00    	js     c000b8ce <prepare_data+0x172>
c000b7f1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b7f4:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b7f7:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b7fa:	0f 8f ce 00 00 00    	jg     c000b8ce <prepare_data+0x172>
c000b800:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b806:	50                   	push   eax
c000b807:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b80e:	50                   	push   eax
c000b80f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b813:	8b 00                	mov    eax,DWORD PTR [eax]
c000b815:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b818:	50                   	push   eax
c000b819:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b81c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b820:	50                   	push   eax
c000b821:	e8 21 4e ff ff       	call   c0000647 <memcpy>
c000b826:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b829:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b82c:	01 fd                	add    ebp,edi
c000b82e:	01 f9                	add    ecx,edi
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b836:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b839:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b83c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b840:	0f 85 86 00 00 00    	jne    c000b8cc <prepare_data+0x170>
c000b846:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b849:	89 e8                	mov    eax,ebp
c000b84b:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b84e:	29 c8                	sub    eax,ecx
c000b850:	39 f8                	cmp    eax,edi
c000b852:	7d 78                	jge    c000b8cc <prepare_data+0x170>
c000b854:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b858:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b85c:	74 6e                	je     c000b8cc <prepare_data+0x170>
c000b85e:	8d 7e 04             	lea    edi,[esi+0x4]
c000b861:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b865:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b868:	29 ef                	sub    edi,ebp
c000b86a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b86e:	7c 29                	jl     c000b899 <prepare_data+0x13d>
c000b870:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b873:	29 f1                	sub    ecx,esi
c000b875:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b87c:	55                   	push   ebp
c000b87d:	50                   	push   eax
c000b87e:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b881:	50                   	push   eax
c000b882:	52                   	push   edx
c000b883:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b887:	e8 83 4d ff ff       	call   c000060f <memmove>
c000b88c:	83 c4 10             	add    esp,0x10
c000b88f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b892:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b899:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b89c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b89f:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8a2:	83 c6 05             	add    esi,0x5
c000b8a5:	78 07                	js     c000b8ae <prepare_data+0x152>
c000b8a7:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8aa:	39 cf                	cmp    edi,ecx
c000b8ac:	7e 04                	jle    c000b8b2 <prepare_data+0x156>
c000b8ae:	89 ce                	mov    esi,ecx
c000b8b0:	29 c6                	sub    esi,eax
c000b8b2:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8b5:	51                   	push   ecx
c000b8b6:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b8bd:	51                   	push   ecx
c000b8be:	6a 00                	push   0x0
c000b8c0:	50                   	push   eax
c000b8c1:	e8 b7 4d ff ff       	call   c000067d <memset>
c000b8c6:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b8c9:	83 c4 10             	add    esp,0x10
c000b8cc:	31 c0                	xor    eax,eax
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <sinc_multichan_vari_process>:
c000b8d6:	55                   	push   ebp
c000b8d7:	b8 05 00 00 00       	mov    eax,0x5
c000b8dc:	57                   	push   edi
c000b8dd:	56                   	push   esi
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 4c             	sub    esp,0x4c
c000b8e2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b8e6:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b8ea:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b8ed:	85 db                	test   ebx,ebx
c000b8ef:	0f 84 b5 05 00 00    	je     c000beaa <sinc_multichan_vari_process+0x5d4>
c000b8f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b8f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8fb:	0f af d0             	imul   edx,eax
c000b8fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b901:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b905:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b90c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b90f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b916:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b919:	8b 06                	mov    eax,DWORD PTR [esi]
c000b91b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b923:	57                   	push   edi
c000b924:	57                   	push   edi
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	e8 15 dd ff ff       	call   c0009647 <is_bad_src_ratio>
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	89 c2                	mov    edx,eax
c000b937:	b8 16 00 00 00       	mov    eax,0x16
c000b93c:	85 d2                	test   edx,edx
c000b93e:	0f 85 66 05 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b94a:	e8 84 93 01 00       	call   c0024cd3 <__floatsidf>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 04 24             	mov    DWORD PTR [esp],eax
c000b955:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b959:	68 00 00 00 40       	push   0x40000000
c000b95e:	6a 00                	push   0x0
c000b960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b968:	e8 86 86 01 00       	call   c0023ff3 <__adddf3>
c000b96d:	59                   	pop    ecx
c000b96e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b972:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b976:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b979:	e8 55 93 01 00       	call   c0024cd3 <__floatsidf>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b985:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b989:	52                   	push   edx
c000b98a:	50                   	push   eax
c000b98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b993:	e8 bc 8f 01 00       	call   c0024954 <__divdf3>
c000b998:	83 c4 10             	add    esp,0x10
c000b99b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b99f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9af:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9bd:	52                   	push   edx
c000b9be:	50                   	push   eax
c000b9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c7:	e8 73 95 01 00       	call   c0024f3f <__ltdf2>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	85 c0                	test   eax,eax
c000b9d1:	79 1d                	jns    c000b9f0 <sinc_multichan_vari_process+0x11a>
c000b9d3:	68 00 00 f0 3f       	push   0x3ff00000
c000b9d8:	6a 00                	push   0x0
c000b9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e2:	e8 58 95 01 00       	call   c0024f3f <__ltdf2>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	85 c0                	test   eax,eax
c000b9ec:	78 2c                	js     c000ba1a <sinc_multichan_vari_process+0x144>
c000b9ee:	eb 4a                	jmp    c000ba3a <sinc_multichan_vari_process+0x164>
c000b9f0:	68 00 00 f0 3f       	push   0x3ff00000
c000b9f5:	6a 00                	push   0x0
c000b9f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ff:	e8 3b 95 01 00       	call   c0024f3f <__ltdf2>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	85 c0                	test   eax,eax
c000ba09:	79 2f                	jns    c000ba3a <sinc_multichan_vari_process+0x164>
c000ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba1a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba1e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba2a:	e8 25 8f 01 00       	call   c0024954 <__divdf3>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba3a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba3d:	50                   	push   eax
c000ba3e:	50                   	push   eax
c000ba3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba47:	e8 a4 96 01 00       	call   c00250f0 <lrint>
c000ba4c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba4f:	40                   	inc    eax
c000ba50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba54:	0f af c7             	imul   eax,edi
c000ba57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba5b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba62:	58                   	pop    eax
c000ba63:	5a                   	pop    edx
c000ba64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6c:	e8 55 fc ff ff       	call   c000b6c6 <fmod_one>
c000ba71:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba7c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba93:	e8 ac 8b 01 00       	call   c0024644 <__subdf3>
c000ba98:	83 c4 18             	add    esp,0x18
c000ba9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	52                   	push   edx
c000baa4:	50                   	push   eax
c000baa5:	e8 46 96 01 00       	call   c00250f0 <lrint>
c000baaa:	0f af f8             	imul   edi,eax
c000baad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab1:	01 f8                	add    eax,edi
c000bab3:	99                   	cdq    
c000bab4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bab7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000baba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac2:	68 00 00 f0 3f       	push   0x3ff00000
c000bac7:	6a 00                	push   0x0
c000bac9:	e8 86 8e 01 00       	call   c0024954 <__divdf3>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bade:	68 23 42 92 0c       	push   0xc924223
c000bae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baeb:	e8 03 85 01 00       	call   c0023ff3 <__adddf3>
c000baf0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000baf8:	83 c4 20             	add    esp,0x20
c000bafb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb03:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb0e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb11:	7d 4e                	jge    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bb13:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb16:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb19:	01 c8                	add    eax,ecx
c000bb1b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb1e:	99                   	cdq    
c000bb1f:	f7 f9                	idiv   ecx
c000bb21:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb25:	7d 0c                	jge    c000bb33 <sinc_multichan_vari_process+0x25d>
c000bb27:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb2a:	85 ff                	test   edi,edi
c000bb2c:	79 68                	jns    c000bb96 <sinc_multichan_vari_process+0x2c0>
c000bb2e:	e9 e3 00 00 00       	jmp    c000bc16 <sinc_multichan_vari_process+0x340>
c000bb33:	50                   	push   eax
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	55                   	push   ebp
c000bb39:	53                   	push   ebx
c000bb3a:	e8 1d fc ff ff       	call   c000b75c <prepare_data>
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb45:	85 c0                	test   eax,eax
c000bb47:	0f 85 5d 03 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb53:	01 c8                	add    eax,ecx
c000bb55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb58:	99                   	cdq    
c000bb59:	f7 f9                	idiv   ecx
c000bb5b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb5f:	7c c6                	jl     c000bb27 <sinc_multichan_vari_process+0x251>
c000bb61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bb64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bb68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb76:	89 06                	mov    DWORD PTR [esi],eax
c000bb78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb7e:	99                   	cdq    
c000bb7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb82:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bb85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb88:	99                   	cdq    
c000bb89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8c:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bb8f:	31 c0                	xor    eax,eax
c000bb91:	e9 14 03 00 00       	jmp    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb9c:	e8 32 91 01 00       	call   c0024cd3 <__floatsidf>
c000bba1:	83 c4 10             	add    esp,0x10
c000bba4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bba8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbbc:	e8 32 84 01 00       	call   c0023ff3 <__adddf3>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbdc:	e8 12 84 01 00       	call   c0023ff3 <__adddf3>
c000bbe1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bbe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbec:	e8 e2 90 01 00       	call   c0024cd3 <__floatsidf>
c000bbf1:	83 c4 10             	add    esp,0x10
c000bbf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfc:	52                   	push   edx
c000bbfd:	50                   	push   eax
c000bbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	e8 32 93 01 00       	call   c0024f3d <__gedf2>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	85 c0                	test   eax,eax
c000bc10:	0f 89 4b ff ff ff    	jns    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bc16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc1a:	0f 8e ed 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc20:	83 ec 10             	sub    esp,0x10
c000bc23:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc26:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc2c:	ff 36                	push   DWORD PTR [esi]
c000bc2e:	e8 11 8a 01 00       	call   c0024644 <__subdf3>
c000bc33:	83 c4 18             	add    esp,0x18
c000bc36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc3a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	e8 8b 94 01 00       	call   c00250d0 <fabs>
c000bc45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc62:	e8 ba 92 01 00       	call   c0024f21 <__gtdf2>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 8e 9b 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc72:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc84:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc87:	e8 b8 89 01 00       	call   c0024644 <__subdf3>
c000bc8c:	59                   	pop    ecx
c000bc8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc91:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bc95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc98:	e8 36 90 01 00       	call   c0024cd3 <__floatsidf>
c000bc9d:	83 c4 10             	add    esp,0x10
c000bca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca8:	52                   	push   edx
c000bca9:	50                   	push   eax
c000bcaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcb2:	e8 b9 89 01 00       	call   c0024670 <__muldf3>
c000bcb7:	5f                   	pop    edi
c000bcb8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcbc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcc0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcc3:	e8 0b 90 01 00       	call   c0024cd3 <__floatsidf>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bccf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcdd:	e8 72 8c 01 00       	call   c0024954 <__divdf3>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bce9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bced:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfd:	e8 f1 82 01 00       	call   c0023ff3 <__adddf3>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd0d:	83 ec 0c             	sub    esp,0xc
c000bd10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd13:	e8 bb 8f 01 00       	call   c0024cd3 <__floatsidf>
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd33:	e8 07 92 01 00       	call   c0024f3f <__ltdf2>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	85 c0                	test   eax,eax
c000bd3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd45:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd4d:	78 10                	js     c000bd5f <sinc_multichan_vari_process+0x489>
c000bd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6f:	e8 fc 88 01 00       	call   c0024670 <__muldf3>
c000bd74:	59                   	pop    ecx
c000bd75:	5f                   	pop    edi
c000bd76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd86:	e8 14 f9 ff ff       	call   c000b69f <double_to_fp>
c000bd8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8f:	89 c7                	mov    edi,eax
c000bd91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9d:	e8 ce 88 01 00       	call   c0024670 <__muldf3>
c000bda2:	83 c4 18             	add    esp,0x18
c000bda5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bda9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdad:	52                   	push   edx
c000bdae:	50                   	push   eax
c000bdaf:	e8 eb f8 ff ff       	call   c000b69f <double_to_fp>
c000bdb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdbb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000bdbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc1:	50                   	push   eax
c000bdc2:	50                   	push   eax
c000bdc3:	50                   	push   eax
c000bdc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdc7:	e8 07 8f 01 00       	call   c0024cd3 <__floatsidf>
c000bdcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bddc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde4:	e8 6b 8b 01 00       	call   c0024954 <__divdf3>
c000bde9:	83 c4 1c             	add    esp,0x1c
c000bdec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bdf4:	52                   	push   edx
c000bdf5:	89 fa                	mov    edx,edi
c000bdf7:	50                   	push   eax
c000bdf8:	89 d8                	mov    eax,ebx
c000bdfa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdfd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be01:	e8 58 ed ff ff       	call   c000ab5e <calc_output_multi>
c000be06:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be09:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be1c:	e8 33 8b 01 00       	call   c0024954 <__divdf3>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be3c:	e8 b2 81 01 00       	call   c0023ff3 <__adddf3>
c000be41:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be45:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be49:	83 c4 28             	add    esp,0x28
c000be4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be54:	e8 6d f8 ff ff       	call   c000b6c6 <fmod_one>
c000be59:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be7b:	e8 c4 87 01 00       	call   c0024644 <__subdf3>
c000be80:	83 c4 18             	add    esp,0x18
c000be83:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be8b:	52                   	push   edx
c000be8c:	50                   	push   eax
c000be8d:	e8 5e 92 01 00       	call   c00250f0 <lrint>
c000be92:	0f af f8             	imul   edi,eax
c000be95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	01 f8                	add    eax,edi
c000be9e:	99                   	cdq    
c000be9f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bea2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bea5:	e9 61 fc ff ff       	jmp    c000bb0b <sinc_multichan_vari_process+0x235>
c000beaa:	83 c4 4c             	add    esp,0x4c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <sinc_hex_vari_process>:
c000beb2:	55                   	push   ebp
c000beb3:	b8 05 00 00 00       	mov    eax,0x5
c000beb8:	57                   	push   edi
c000beb9:	56                   	push   esi
c000beba:	53                   	push   ebx
c000bebb:	83 ec 4c             	sub    esp,0x4c
c000bebe:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bec2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bec6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bec9:	85 db                	test   ebx,ebx
c000becb:	0f 84 b7 05 00 00    	je     c000c488 <sinc_hex_vari_process+0x5d6>
c000bed1:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bed4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bed7:	0f af d0             	imul   edx,eax
c000beda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bedd:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bee1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bee8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000beeb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bef2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bef8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000befc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf00:	57                   	push   edi
c000bf01:	57                   	push   edi
c000bf02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf0a:	e8 38 d7 ff ff       	call   c0009647 <is_bad_src_ratio>
c000bf0f:	83 c4 10             	add    esp,0x10
c000bf12:	89 c2                	mov    edx,eax
c000bf14:	b8 16 00 00 00       	mov    eax,0x16
c000bf19:	85 d2                	test   edx,edx
c000bf1b:	0f 85 67 05 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000bf21:	83 ec 0c             	sub    esp,0xc
c000bf24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf27:	e8 a7 8d 01 00       	call   c0024cd3 <__floatsidf>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf36:	68 00 00 00 40       	push   0x40000000
c000bf3b:	6a 00                	push   0x0
c000bf3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf45:	e8 a9 80 01 00       	call   c0023ff3 <__adddf3>
c000bf4a:	59                   	pop    ecx
c000bf4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf4f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 78 8d 01 00       	call   c0024cd3 <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf66:	52                   	push   edx
c000bf67:	50                   	push   eax
c000bf68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf70:	e8 df 89 01 00       	call   c0024954 <__divdf3>
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bf80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf86:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf8d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bf90:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bf93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf9b:	52                   	push   edx
c000bf9c:	50                   	push   eax
c000bf9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa5:	e8 95 8f 01 00       	call   c0024f3f <__ltdf2>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	79 1d                	jns    c000bfce <sinc_hex_vari_process+0x11c>
c000bfb1:	68 00 00 f0 3f       	push   0x3ff00000
c000bfb6:	6a 00                	push   0x0
c000bfb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfc0:	e8 7a 8f 01 00       	call   c0024f3f <__ltdf2>
c000bfc5:	83 c4 10             	add    esp,0x10
c000bfc8:	85 c0                	test   eax,eax
c000bfca:	78 2c                	js     c000bff8 <sinc_hex_vari_process+0x146>
c000bfcc:	eb 4a                	jmp    c000c018 <sinc_hex_vari_process+0x166>
c000bfce:	68 00 00 f0 3f       	push   0x3ff00000
c000bfd3:	6a 00                	push   0x0
c000bfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfdd:	e8 5d 8f 01 00       	call   c0024f3f <__ltdf2>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	85 c0                	test   eax,eax
c000bfe7:	79 2f                	jns    c000c018 <sinc_hex_vari_process+0x166>
c000bfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bff1:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bff8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c000:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c004:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c008:	e8 47 89 01 00       	call   c0024954 <__divdf3>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c018:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c01b:	50                   	push   eax
c000c01c:	50                   	push   eax
c000c01d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c021:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c025:	e8 c6 90 01 00       	call   c00250f0 <lrint>
c000c02a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c02d:	40                   	inc    eax
c000c02e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c032:	0f af c7             	imul   eax,edi
c000c035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c040:	58                   	pop    eax
c000c041:	5a                   	pop    edx
c000c042:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04a:	e8 77 f6 ff ff       	call   c000b6c6 <fmod_one>
c000c04f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c05a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c065:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c06d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c071:	e8 ce 85 01 00       	call   c0024644 <__subdf3>
c000c076:	83 c4 18             	add    esp,0x18
c000c079:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	52                   	push   edx
c000c082:	50                   	push   eax
c000c083:	e8 68 90 01 00       	call   c00250f0 <lrint>
c000c088:	0f af f8             	imul   edi,eax
c000c08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08f:	01 f8                	add    eax,edi
c000c091:	99                   	cdq    
c000c092:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c095:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a0:	68 00 00 f0 3f       	push   0x3ff00000
c000c0a5:	6a 00                	push   0x0
c000c0a7:	e8 a8 88 01 00       	call   c0024954 <__divdf3>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c0bc:	68 23 42 92 0c       	push   0xc924223
c000c0c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c9:	e8 25 7f 01 00       	call   c0023ff3 <__adddf3>
c000c0ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c0d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c0d6:	83 c4 20             	add    esp,0x20
c000c0d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c0e1:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c0e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c0ec:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c0ef:	7d 4e                	jge    c000c13f <sinc_hex_vari_process+0x28d>
c000c0f1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c0f4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c0f7:	01 c8                	add    eax,ecx
c000c0f9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c0fc:	99                   	cdq    
c000c0fd:	f7 f9                	idiv   ecx
c000c0ff:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c103:	7d 0c                	jge    c000c111 <sinc_hex_vari_process+0x25f>
c000c105:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c108:	85 ff                	test   edi,edi
c000c10a:	79 69                	jns    c000c175 <sinc_hex_vari_process+0x2c3>
c000c10c:	e9 e4 00 00 00       	jmp    c000c1f5 <sinc_hex_vari_process+0x343>
c000c111:	50                   	push   eax
c000c112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c116:	56                   	push   esi
c000c117:	53                   	push   ebx
c000c118:	e8 3f f6 ff ff       	call   c000b75c <prepare_data>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c123:	85 c0                	test   eax,eax
c000c125:	0f 85 5d 03 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000c12b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c12e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c131:	01 c8                	add    eax,ecx
c000c133:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c136:	99                   	cdq    
c000c137:	f7 f9                	idiv   ecx
c000c139:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c13d:	7c c6                	jl     c000c105 <sinc_hex_vari_process+0x253>
c000c13f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c142:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c146:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c149:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c150:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c154:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c157:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c15a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c15d:	99                   	cdq    
c000c15e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c161:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c164:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c167:	99                   	cdq    
c000c168:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c16b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c16e:	31 c0                	xor    eax,eax
c000c170:	e9 13 03 00 00       	jmp    c000c488 <sinc_hex_vari_process+0x5d6>
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c17b:	e8 53 8b 01 00       	call   c0024cd3 <__floatsidf>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c187:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c18b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c18f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c19b:	e8 53 7e 01 00       	call   c0023ff3 <__adddf3>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1bb:	e8 33 7e 01 00       	call   c0023ff3 <__adddf3>
c000c1c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1cb:	e8 03 8b 01 00       	call   c0024cd3 <__floatsidf>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1db:	52                   	push   edx
c000c1dc:	50                   	push   eax
c000c1dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e5:	e8 53 8d 01 00       	call   c0024f3d <__gedf2>
c000c1ea:	83 c4 10             	add    esp,0x10
c000c1ed:	85 c0                	test   eax,eax
c000c1ef:	0f 89 4a ff ff ff    	jns    c000c13f <sinc_hex_vari_process+0x28d>
c000c1f5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c1f9:	0f 8e ef 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c1ff:	83 ec 10             	sub    esp,0x10
c000c202:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c205:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c208:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c20b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c20e:	e8 31 84 01 00       	call   c0024644 <__subdf3>
c000c213:	83 c4 18             	add    esp,0x18
c000c216:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c21a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c21e:	52                   	push   edx
c000c21f:	50                   	push   eax
c000c220:	e8 ab 8e 01 00       	call   c00250d0 <fabs>
c000c225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c229:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c235:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c23a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c23e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c242:	e8 da 8c 01 00       	call   c0024f21 <__gtdf2>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	85 c0                	test   eax,eax
c000c24c:	0f 8e 9c 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c255:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c260:	52                   	push   edx
c000c261:	50                   	push   eax
c000c262:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c265:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c268:	e8 d7 83 01 00       	call   c0024644 <__subdf3>
c000c26d:	59                   	pop    ecx
c000c26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c272:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c276:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c279:	e8 55 8a 01 00       	call   c0024cd3 <__floatsidf>
c000c27e:	83 c4 10             	add    esp,0x10
c000c281:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c285:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c289:	52                   	push   edx
c000c28a:	50                   	push   eax
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c293:	e8 d8 83 01 00       	call   c0024670 <__muldf3>
c000c298:	5f                   	pop    edi
c000c299:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c29d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2a1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2a4:	e8 2a 8a 01 00       	call   c0024cd3 <__floatsidf>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b4:	52                   	push   edx
c000c2b5:	50                   	push   eax
c000c2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2be:	e8 91 86 01 00       	call   c0024954 <__divdf3>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2de:	e8 10 7d 01 00       	call   c0023ff3 <__adddf3>
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2ee:	83 ec 0c             	sub    esp,0xc
c000c2f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c2f4:	e8 da 89 01 00       	call   c0024cd3 <__floatsidf>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c314:	e8 26 8c 01 00       	call   c0024f3f <__ltdf2>
c000c319:	83 c4 10             	add    esp,0x10
c000c31c:	85 c0                	test   eax,eax
c000c31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c322:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c326:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c32a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c32e:	78 10                	js     c000c340 <sinc_hex_vari_process+0x48e>
c000c330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c334:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c33c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c348:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c350:	e8 1b 83 01 00       	call   c0024670 <__muldf3>
c000c355:	59                   	pop    ecx
c000c356:	5f                   	pop    edi
c000c357:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c35b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c35f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c363:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c367:	e8 33 f3 ff ff       	call   c000b69f <double_to_fp>
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	89 c7                	mov    edi,eax
c000c372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	e8 ed 82 01 00       	call   c0024670 <__muldf3>
c000c383:	83 c4 18             	add    esp,0x18
c000c386:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c38e:	52                   	push   edx
c000c38f:	50                   	push   eax
c000c390:	e8 0a f3 ff ff       	call   c000b69f <double_to_fp>
c000c395:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c398:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c39c:	83 c4 0c             	add    esp,0xc
c000c39f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3a2:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3a5:	50                   	push   eax
c000c3a6:	50                   	push   eax
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 24 89 01 00       	call   c0024cd3 <__floatsidf>
c000c3af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c7:	e8 88 85 01 00       	call   c0024954 <__divdf3>
c000c3cc:	83 c4 18             	add    esp,0x18
c000c3cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3d7:	52                   	push   edx
c000c3d8:	89 fa                	mov    edx,edi
c000c3da:	50                   	push   eax
c000c3db:	89 d8                	mov    eax,ebx
c000c3dd:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c3e1:	e8 26 df ff ff       	call   c000a30c <calc_output_hex>
c000c3e6:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fa:	e8 55 85 01 00       	call   c0024954 <__divdf3>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c406:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41a:	e8 d4 7b 01 00       	call   c0023ff3 <__adddf3>
c000c41f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c423:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c427:	83 c4 18             	add    esp,0x18
c000c42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c432:	e8 8f f2 ff ff       	call   c000b6c6 <fmod_one>
c000c437:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c43a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c43e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c442:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c445:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c451:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c455:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c459:	e8 e6 81 01 00       	call   c0024644 <__subdf3>
c000c45e:	83 c4 18             	add    esp,0x18
c000c461:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c465:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c469:	52                   	push   edx
c000c46a:	50                   	push   eax
c000c46b:	e8 80 8c 01 00       	call   c00250f0 <lrint>
c000c470:	0f af f8             	imul   edi,eax
c000c473:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c477:	83 c4 10             	add    esp,0x10
c000c47a:	01 f8                	add    eax,edi
c000c47c:	99                   	cdq    
c000c47d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c480:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c483:	e9 61 fc ff ff       	jmp    c000c0e9 <sinc_hex_vari_process+0x237>
c000c488:	83 c4 4c             	add    esp,0x4c
c000c48b:	5b                   	pop    ebx
c000c48c:	5e                   	pop    esi
c000c48d:	5f                   	pop    edi
c000c48e:	5d                   	pop    ebp
c000c48f:	c3                   	ret    

c000c490 <sinc_quad_vari_process>:
c000c490:	55                   	push   ebp
c000c491:	b8 05 00 00 00       	mov    eax,0x5
c000c496:	57                   	push   edi
c000c497:	56                   	push   esi
c000c498:	53                   	push   ebx
c000c499:	83 ec 4c             	sub    esp,0x4c
c000c49c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4a0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4a4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4a7:	85 db                	test   ebx,ebx
c000c4a9:	0f 84 b7 05 00 00    	je     c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4af:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4b5:	0f af d0             	imul   edx,eax
c000c4b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c4bb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c4bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c4c6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c4c9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c4d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c4d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c4d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4de:	57                   	push   edi
c000c4df:	57                   	push   edi
c000c4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e8:	e8 5a d1 ff ff       	call   c0009647 <is_bad_src_ratio>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	89 c2                	mov    edx,eax
c000c4f2:	b8 16 00 00 00       	mov    eax,0x16
c000c4f7:	85 d2                	test   edx,edx
c000c4f9:	0f 85 67 05 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c505:	e8 c9 87 01 00       	call   c0024cd3 <__floatsidf>
c000c50a:	83 c4 10             	add    esp,0x10
c000c50d:	89 04 24             	mov    DWORD PTR [esp],eax
c000c510:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c514:	68 00 00 00 40       	push   0x40000000
c000c519:	6a 00                	push   0x0
c000c51b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c523:	e8 cb 7a 01 00       	call   c0023ff3 <__adddf3>
c000c528:	59                   	pop    ecx
c000c529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c52d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c531:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c534:	e8 9a 87 01 00       	call   c0024cd3 <__floatsidf>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c540:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c544:	52                   	push   edx
c000c545:	50                   	push   eax
c000c546:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54e:	e8 01 84 01 00       	call   c0024954 <__divdf3>
c000c553:	83 c4 10             	add    esp,0x10
c000c556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c55a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c55e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c561:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c564:	89 04 24             	mov    DWORD PTR [esp],eax
c000c567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c56b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c56e:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c571:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c575:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c579:	52                   	push   edx
c000c57a:	50                   	push   eax
c000c57b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c57f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c583:	e8 b7 89 01 00       	call   c0024f3f <__ltdf2>
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	85 c0                	test   eax,eax
c000c58d:	79 1d                	jns    c000c5ac <sinc_quad_vari_process+0x11c>
c000c58f:	68 00 00 f0 3f       	push   0x3ff00000
c000c594:	6a 00                	push   0x0
c000c596:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59e:	e8 9c 89 01 00       	call   c0024f3f <__ltdf2>
c000c5a3:	83 c4 10             	add    esp,0x10
c000c5a6:	85 c0                	test   eax,eax
c000c5a8:	78 2c                	js     c000c5d6 <sinc_quad_vari_process+0x146>
c000c5aa:	eb 4a                	jmp    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5ac:	68 00 00 f0 3f       	push   0x3ff00000
c000c5b1:	6a 00                	push   0x0
c000c5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5bb:	e8 7f 89 01 00       	call   c0024f3f <__ltdf2>
c000c5c0:	83 c4 10             	add    esp,0x10
c000c5c3:	85 c0                	test   eax,eax
c000c5c5:	79 2f                	jns    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e6:	e8 69 83 01 00       	call   c0024954 <__divdf3>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5f9:	50                   	push   eax
c000c5fa:	50                   	push   eax
c000c5fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c603:	e8 e8 8a 01 00       	call   c00250f0 <lrint>
c000c608:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c60b:	40                   	inc    eax
c000c60c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c610:	0f af c7             	imul   eax,edi
c000c613:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c61e:	58                   	pop    eax
c000c61f:	5a                   	pop    edx
c000c620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c624:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c628:	e8 99 f0 ff ff       	call   c000b6c6 <fmod_one>
c000c62d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c630:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c634:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c638:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c63b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c647:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64f:	e8 f0 7f 01 00       	call   c0024644 <__subdf3>
c000c654:	83 c4 18             	add    esp,0x18
c000c657:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	52                   	push   edx
c000c660:	50                   	push   eax
c000c661:	e8 8a 8a 01 00       	call   c00250f0 <lrint>
c000c666:	0f af f8             	imul   edi,eax
c000c669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c66d:	01 f8                	add    eax,edi
c000c66f:	99                   	cdq    
c000c670:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c673:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67e:	68 00 00 f0 3f       	push   0x3ff00000
c000c683:	6a 00                	push   0x0
c000c685:	e8 ca 82 01 00       	call   c0024954 <__divdf3>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c695:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c69a:	68 23 42 92 0c       	push   0xc924223
c000c69f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a7:	e8 47 79 01 00       	call   c0023ff3 <__adddf3>
c000c6ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6b0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6b4:	83 c4 20             	add    esp,0x20
c000c6b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c6bf:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c6c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c6ca:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c6cd:	7d 4e                	jge    c000c71d <sinc_quad_vari_process+0x28d>
c000c6cf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c6d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c6d5:	01 c8                	add    eax,ecx
c000c6d7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c6da:	99                   	cdq    
c000c6db:	f7 f9                	idiv   ecx
c000c6dd:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c6e1:	7d 0c                	jge    c000c6ef <sinc_quad_vari_process+0x25f>
c000c6e3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c6e6:	85 ff                	test   edi,edi
c000c6e8:	79 69                	jns    c000c753 <sinc_quad_vari_process+0x2c3>
c000c6ea:	e9 e4 00 00 00       	jmp    c000c7d3 <sinc_quad_vari_process+0x343>
c000c6ef:	50                   	push   eax
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	56                   	push   esi
c000c6f5:	53                   	push   ebx
c000c6f6:	e8 61 f0 ff ff       	call   c000b75c <prepare_data>
c000c6fb:	83 c4 10             	add    esp,0x10
c000c6fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c701:	85 c0                	test   eax,eax
c000c703:	0f 85 5d 03 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c709:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c70c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c70f:	01 c8                	add    eax,ecx
c000c711:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c714:	99                   	cdq    
c000c715:	f7 f9                	idiv   ecx
c000c717:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c71b:	7c c6                	jl     c000c6e3 <sinc_quad_vari_process+0x253>
c000c71d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c724:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c727:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c72a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c72e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c732:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c735:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c738:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c73b:	99                   	cdq    
c000c73c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c73f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c745:	99                   	cdq    
c000c746:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c749:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c74c:	31 c0                	xor    eax,eax
c000c74e:	e9 13 03 00 00       	jmp    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c753:	83 ec 0c             	sub    esp,0xc
c000c756:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c759:	e8 75 85 01 00       	call   c0024cd3 <__floatsidf>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c765:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c769:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c76d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c779:	e8 75 78 01 00       	call   c0023ff3 <__adddf3>
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c785:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c799:	e8 55 78 01 00       	call   c0023ff3 <__adddf3>
c000c79e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a9:	e8 25 85 01 00       	call   c0024cd3 <__floatsidf>
c000c7ae:	83 c4 10             	add    esp,0x10
c000c7b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b9:	52                   	push   edx
c000c7ba:	50                   	push   eax
c000c7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c3:	e8 75 87 01 00       	call   c0024f3d <__gedf2>
c000c7c8:	83 c4 10             	add    esp,0x10
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	0f 89 4a ff ff ff    	jns    c000c71d <sinc_quad_vari_process+0x28d>
c000c7d3:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c7d7:	0f 8e ef 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c7dd:	83 ec 10             	sub    esp,0x10
c000c7e0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c7e3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c7e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c7e9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c7ec:	e8 53 7e 01 00       	call   c0024644 <__subdf3>
c000c7f1:	83 c4 18             	add    esp,0x18
c000c7f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7fc:	52                   	push   edx
c000c7fd:	50                   	push   eax
c000c7fe:	e8 cd 88 01 00       	call   c00250d0 <fabs>
c000c803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c813:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c818:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c81c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c820:	e8 fc 86 01 00       	call   c0024f21 <__gtdf2>
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	85 c0                	test   eax,eax
c000c82a:	0f 8e 9c 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c833:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c83a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c83e:	52                   	push   edx
c000c83f:	50                   	push   eax
c000c840:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c843:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c846:	e8 f9 7d 01 00       	call   c0024644 <__subdf3>
c000c84b:	59                   	pop    ecx
c000c84c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c850:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c854:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c857:	e8 77 84 01 00       	call   c0024cd3 <__floatsidf>
c000c85c:	83 c4 10             	add    esp,0x10
c000c85f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c863:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c867:	52                   	push   edx
c000c868:	50                   	push   eax
c000c869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c871:	e8 fa 7d 01 00       	call   c0024670 <__muldf3>
c000c876:	5f                   	pop    edi
c000c877:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c87b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c87f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c882:	e8 4c 84 01 00       	call   c0024cd3 <__floatsidf>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c88e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c892:	52                   	push   edx
c000c893:	50                   	push   eax
c000c894:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c89c:	e8 b3 80 01 00       	call   c0024954 <__divdf3>
c000c8a1:	83 c4 10             	add    esp,0x10
c000c8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8bc:	e8 32 77 01 00       	call   c0023ff3 <__adddf3>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cc:	83 ec 0c             	sub    esp,0xc
c000c8cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8d2:	e8 fc 83 01 00       	call   c0024cd3 <__floatsidf>
c000c8d7:	83 c4 10             	add    esp,0x10
c000c8da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f2:	e8 48 86 01 00       	call   c0024f3f <__ltdf2>
c000c8f7:	83 c4 10             	add    esp,0x10
c000c8fa:	85 c0                	test   eax,eax
c000c8fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c904:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c908:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c90c:	78 10                	js     c000c91e <sinc_quad_vari_process+0x48e>
c000c90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c916:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c91a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	e8 3d 7d 01 00       	call   c0024670 <__muldf3>
c000c933:	59                   	pop    ecx
c000c934:	5f                   	pop    edi
c000c935:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c939:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c941:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c945:	e8 55 ed ff ff       	call   c000b69f <double_to_fp>
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	89 c7                	mov    edi,eax
c000c950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95c:	e8 0f 7d 01 00       	call   c0024670 <__muldf3>
c000c961:	83 c4 18             	add    esp,0x18
c000c964:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c968:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c96c:	52                   	push   edx
c000c96d:	50                   	push   eax
c000c96e:	e8 2c ed ff ff       	call   c000b69f <double_to_fp>
c000c973:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c976:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c97a:	83 c4 0c             	add    esp,0xc
c000c97d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c980:	8d 04 90             	lea    eax,[eax+edx*4]
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c988:	e8 46 83 01 00       	call   c0024cd3 <__floatsidf>
c000c98d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c991:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c99d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a5:	e8 aa 7f 01 00       	call   c0024954 <__divdf3>
c000c9aa:	83 c4 18             	add    esp,0x18
c000c9ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9b5:	52                   	push   edx
c000c9b6:	89 fa                	mov    edx,edi
c000c9b8:	50                   	push   eax
c000c9b9:	89 d8                	mov    eax,ebx
c000c9bb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c9bf:	e8 62 d3 ff ff       	call   c0009d26 <calc_output_quad>
c000c9c4:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d8:	e8 77 7f 01 00       	call   c0024954 <__divdf3>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f8:	e8 f6 75 01 00       	call   c0023ff3 <__adddf3>
c000c9fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca01:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca05:	83 c4 18             	add    esp,0x18
c000ca08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca10:	e8 b1 ec ff ff       	call   c000b6c6 <fmod_one>
c000ca15:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca20:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca37:	e8 08 7c 01 00       	call   c0024644 <__subdf3>
c000ca3c:	83 c4 18             	add    esp,0x18
c000ca3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca47:	52                   	push   edx
c000ca48:	50                   	push   eax
c000ca49:	e8 a2 86 01 00       	call   c00250f0 <lrint>
c000ca4e:	0f af f8             	imul   edi,eax
c000ca51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	01 f8                	add    eax,edi
c000ca5a:	99                   	cdq    
c000ca5b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca61:	e9 61 fc ff ff       	jmp    c000c6c7 <sinc_quad_vari_process+0x237>
c000ca66:	83 c4 4c             	add    esp,0x4c
c000ca69:	5b                   	pop    ebx
c000ca6a:	5e                   	pop    esi
c000ca6b:	5f                   	pop    edi
c000ca6c:	5d                   	pop    ebp
c000ca6d:	c3                   	ret    

c000ca6e <sinc_stereo_vari_process>:
c000ca6e:	55                   	push   ebp
c000ca6f:	b8 05 00 00 00       	mov    eax,0x5
c000ca74:	57                   	push   edi
c000ca75:	56                   	push   esi
c000ca76:	53                   	push   ebx
c000ca77:	83 ec 4c             	sub    esp,0x4c
c000ca7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca85:	85 db                	test   ebx,ebx
c000ca87:	0f 84 b7 05 00 00    	je     c000d044 <sinc_stereo_vari_process+0x5d6>
c000ca8d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ca90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca93:	0f af d0             	imul   edx,eax
c000ca96:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000ca99:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ca9d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caa4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caa7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cab1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cab4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cab8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cabc:	57                   	push   edi
c000cabd:	57                   	push   edi
c000cabe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac6:	e8 7c cb ff ff       	call   c0009647 <is_bad_src_ratio>
c000cacb:	83 c4 10             	add    esp,0x10
c000cace:	89 c2                	mov    edx,eax
c000cad0:	b8 16 00 00 00       	mov    eax,0x16
c000cad5:	85 d2                	test   edx,edx
c000cad7:	0f 85 67 05 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cadd:	83 ec 0c             	sub    esp,0xc
c000cae0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cae3:	e8 eb 81 01 00       	call   c0024cd3 <__floatsidf>
c000cae8:	83 c4 10             	add    esp,0x10
c000caeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000caee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caf2:	68 00 00 00 40       	push   0x40000000
c000caf7:	6a 00                	push   0x0
c000caf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cafd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb01:	e8 ed 74 01 00       	call   c0023ff3 <__adddf3>
c000cb06:	59                   	pop    ecx
c000cb07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb12:	e8 bc 81 01 00       	call   c0024cd3 <__floatsidf>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb22:	52                   	push   edx
c000cb23:	50                   	push   eax
c000cb24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb2c:	e8 23 7e 01 00       	call   c0024954 <__divdf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb3f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb42:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb49:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb4c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb57:	52                   	push   edx
c000cb58:	50                   	push   eax
c000cb59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb61:	e8 d9 83 01 00       	call   c0024f3f <__ltdf2>
c000cb66:	83 c4 10             	add    esp,0x10
c000cb69:	85 c0                	test   eax,eax
c000cb6b:	79 1d                	jns    c000cb8a <sinc_stereo_vari_process+0x11c>
c000cb6d:	68 00 00 f0 3f       	push   0x3ff00000
c000cb72:	6a 00                	push   0x0
c000cb74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7c:	e8 be 83 01 00       	call   c0024f3f <__ltdf2>
c000cb81:	83 c4 10             	add    esp,0x10
c000cb84:	85 c0                	test   eax,eax
c000cb86:	78 2c                	js     c000cbb4 <sinc_stereo_vari_process+0x146>
c000cb88:	eb 4a                	jmp    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cb8a:	68 00 00 f0 3f       	push   0x3ff00000
c000cb8f:	6a 00                	push   0x0
c000cb91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb99:	e8 a1 83 01 00       	call   c0024f3f <__ltdf2>
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	85 c0                	test   eax,eax
c000cba3:	79 2f                	jns    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbad:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc4:	e8 8b 7d 01 00       	call   c0024954 <__divdf3>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbd4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cbd7:	50                   	push   eax
c000cbd8:	50                   	push   eax
c000cbd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe1:	e8 0a 85 01 00       	call   c00250f0 <lrint>
c000cbe6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cbe9:	40                   	inc    eax
c000cbea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbee:	0f af c7             	imul   eax,edi
c000cbf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbfc:	58                   	pop    eax
c000cbfd:	5a                   	pop    edx
c000cbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc06:	e8 bb ea ff ff       	call   c000b6c6 <fmod_one>
c000cc0b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc2d:	e8 12 7a 01 00       	call   c0024644 <__subdf3>
c000cc32:	83 c4 18             	add    esp,0x18
c000cc35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	52                   	push   edx
c000cc3e:	50                   	push   eax
c000cc3f:	e8 ac 84 01 00       	call   c00250f0 <lrint>
c000cc44:	0f af f8             	imul   edi,eax
c000cc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc4b:	01 f8                	add    eax,edi
c000cc4d:	99                   	cdq    
c000cc4e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc51:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5c:	68 00 00 f0 3f       	push   0x3ff00000
c000cc61:	6a 00                	push   0x0
c000cc63:	e8 ec 7c 01 00       	call   c0024954 <__divdf3>
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc73:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc78:	68 23 42 92 0c       	push   0xc924223
c000cc7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc85:	e8 69 73 01 00       	call   c0023ff3 <__adddf3>
c000cc8a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc8e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc92:	83 c4 20             	add    esp,0x20
c000cc95:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cc9d:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cca5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cca8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccab:	7d 4e                	jge    c000ccfb <sinc_stereo_vari_process+0x28d>
c000ccad:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccb3:	01 c8                	add    eax,ecx
c000ccb5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccb8:	99                   	cdq    
c000ccb9:	f7 f9                	idiv   ecx
c000ccbb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccbf:	7d 0c                	jge    c000cccd <sinc_stereo_vari_process+0x25f>
c000ccc1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ccc4:	85 ff                	test   edi,edi
c000ccc6:	79 69                	jns    c000cd31 <sinc_stereo_vari_process+0x2c3>
c000ccc8:	e9 e4 00 00 00       	jmp    c000cdb1 <sinc_stereo_vari_process+0x343>
c000cccd:	50                   	push   eax
c000ccce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccd2:	56                   	push   esi
c000ccd3:	53                   	push   ebx
c000ccd4:	e8 83 ea ff ff       	call   c000b75c <prepare_data>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	0f 85 5d 03 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cce7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccea:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cced:	01 c8                	add    eax,ecx
c000ccef:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccf2:	99                   	cdq    
c000ccf3:	f7 f9                	idiv   ecx
c000ccf5:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccf9:	7c c6                	jl     c000ccc1 <sinc_stereo_vari_process+0x253>
c000ccfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ccfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd02:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd05:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd10:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd13:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd16:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd19:	99                   	cdq    
c000cd1a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd1d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd23:	99                   	cdq    
c000cd24:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd27:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd2a:	31 c0                	xor    eax,eax
c000cd2c:	e9 13 03 00 00       	jmp    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cd31:	83 ec 0c             	sub    esp,0xc
c000cd34:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd37:	e8 97 7f 01 00       	call   c0024cd3 <__floatsidf>
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd47:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd57:	e8 97 72 01 00       	call   c0023ff3 <__adddf3>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd77:	e8 77 72 01 00       	call   c0023ff3 <__adddf3>
c000cd7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd87:	e8 47 7f 01 00       	call   c0024cd3 <__floatsidf>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd97:	52                   	push   edx
c000cd98:	50                   	push   eax
c000cd99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda1:	e8 97 81 01 00       	call   c0024f3d <__gedf2>
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	85 c0                	test   eax,eax
c000cdab:	0f 89 4a ff ff ff    	jns    c000ccfb <sinc_stereo_vari_process+0x28d>
c000cdb1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdb5:	0f 8e ef 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000cdbb:	83 ec 10             	sub    esp,0x10
c000cdbe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdc1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdca:	e8 75 78 01 00       	call   c0024644 <__subdf3>
c000cdcf:	83 c4 18             	add    esp,0x18
c000cdd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cdd6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cdda:	52                   	push   edx
c000cddb:	50                   	push   eax
c000cddc:	e8 ef 82 01 00       	call   c00250d0 <fabs>
c000cde1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdf1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cdf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	e8 1e 81 01 00       	call   c0024f21 <__gtdf2>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	85 c0                	test   eax,eax
c000ce08:	0f 8e 9c 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000ce0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce11:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce1c:	52                   	push   edx
c000ce1d:	50                   	push   eax
c000ce1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce21:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce24:	e8 1b 78 01 00       	call   c0024644 <__subdf3>
c000ce29:	59                   	pop    ecx
c000ce2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce32:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce35:	e8 99 7e 01 00       	call   c0024cd3 <__floatsidf>
c000ce3a:	83 c4 10             	add    esp,0x10
c000ce3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce45:	52                   	push   edx
c000ce46:	50                   	push   eax
c000ce47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4f:	e8 1c 78 01 00       	call   c0024670 <__muldf3>
c000ce54:	5f                   	pop    edi
c000ce55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce59:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce5d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce60:	e8 6e 7e 01 00       	call   c0024cd3 <__floatsidf>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce70:	52                   	push   edx
c000ce71:	50                   	push   eax
c000ce72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce7a:	e8 d5 7a 01 00       	call   c0024954 <__divdf3>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9a:	e8 54 71 01 00       	call   c0023ff3 <__adddf3>
c000ce9f:	83 c4 10             	add    esp,0x10
c000cea2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ceb0:	e8 1e 7e 01 00       	call   c0024cd3 <__floatsidf>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cebc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ced0:	e8 6a 80 01 00       	call   c0024f3f <__ltdf2>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	85 c0                	test   eax,eax
c000ceda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cede:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cee2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ceea:	78 10                	js     c000cefc <sinc_stereo_vari_process+0x48e>
c000ceec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cef4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cef8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf0c:	e8 5f 77 01 00       	call   c0024670 <__muldf3>
c000cf11:	59                   	pop    ecx
c000cf12:	5f                   	pop    edi
c000cf13:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf23:	e8 77 e7 ff ff       	call   c000b69f <double_to_fp>
c000cf28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2c:	89 c7                	mov    edi,eax
c000cf2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 31 77 01 00       	call   c0024670 <__muldf3>
c000cf3f:	83 c4 18             	add    esp,0x18
c000cf42:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf4a:	52                   	push   edx
c000cf4b:	50                   	push   eax
c000cf4c:	e8 4e e7 ff ff       	call   c000b69f <double_to_fp>
c000cf51:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf58:	83 c4 0c             	add    esp,0xc
c000cf5b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf5e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf61:	50                   	push   eax
c000cf62:	50                   	push   eax
c000cf63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf66:	e8 68 7d 01 00       	call   c0024cd3 <__floatsidf>
c000cf6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf83:	e8 cc 79 01 00       	call   c0024954 <__divdf3>
c000cf88:	83 c4 18             	add    esp,0x18
c000cf8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf8f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf93:	52                   	push   edx
c000cf94:	89 fa                	mov    edx,edi
c000cf96:	50                   	push   eax
c000cf97:	89 d8                	mov    eax,ebx
c000cf99:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cf9d:	e8 a6 c9 ff ff       	call   c0009948 <calc_output_stereo>
c000cfa2:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb6:	e8 99 79 01 00       	call   c0024954 <__divdf3>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cfc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd6:	e8 18 70 01 00       	call   c0023ff3 <__adddf3>
c000cfdb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfdf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfe3:	83 c4 18             	add    esp,0x18
c000cfe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfee:	e8 d3 e6 ff ff       	call   c000b6c6 <fmod_one>
c000cff3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cff6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cffa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d001:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d015:	e8 2a 76 01 00       	call   c0024644 <__subdf3>
c000d01a:	83 c4 18             	add    esp,0x18
c000d01d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d025:	52                   	push   edx
c000d026:	50                   	push   eax
c000d027:	e8 c4 80 01 00       	call   c00250f0 <lrint>
c000d02c:	0f af f8             	imul   edi,eax
c000d02f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	01 f8                	add    eax,edi
c000d038:	99                   	cdq    
c000d039:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d03c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d03f:	e9 61 fc ff ff       	jmp    c000cca5 <sinc_stereo_vari_process+0x237>
c000d044:	83 c4 4c             	add    esp,0x4c
c000d047:	5b                   	pop    ebx
c000d048:	5e                   	pop    esi
c000d049:	5f                   	pop    edi
c000d04a:	5d                   	pop    ebp
c000d04b:	c3                   	ret    

c000d04c <sinc_mono_vari_process>:
c000d04c:	55                   	push   ebp
c000d04d:	b8 05 00 00 00       	mov    eax,0x5
c000d052:	57                   	push   edi
c000d053:	56                   	push   esi
c000d054:	53                   	push   ebx
c000d055:	83 ec 4c             	sub    esp,0x4c
c000d058:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d05c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d060:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d063:	85 db                	test   ebx,ebx
c000d065:	0f 84 e8 05 00 00    	je     c000d653 <sinc_mono_vari_process+0x607>
c000d06b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d06e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d071:	0f af d0             	imul   edx,eax
c000d074:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d077:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d07b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d082:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d085:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d08c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d092:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d09a:	57                   	push   edi
c000d09b:	57                   	push   edi
c000d09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a4:	e8 9e c5 ff ff       	call   c0009647 <is_bad_src_ratio>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 c2                	mov    edx,eax
c000d0ae:	b8 16 00 00 00       	mov    eax,0x16
c000d0b3:	85 d2                	test   edx,edx
c000d0b5:	0f 85 98 05 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d0bb:	83 ec 0c             	sub    esp,0xc
c000d0be:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d0c1:	e8 0d 7c 01 00       	call   c0024cd3 <__floatsidf>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0d0:	68 00 00 00 40       	push   0x40000000
c000d0d5:	6a 00                	push   0x0
c000d0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0df:	e8 0f 6f 01 00       	call   c0023ff3 <__adddf3>
c000d0e4:	59                   	pop    ecx
c000d0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0e9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d0ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d0f0:	e8 de 7b 01 00       	call   c0024cd3 <__floatsidf>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d100:	52                   	push   edx
c000d101:	50                   	push   eax
c000d102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d106:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d10a:	e8 45 78 01 00       	call   c0024954 <__divdf3>
c000d10f:	83 c4 10             	add    esp,0x10
c000d112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d11a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d11d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d120:	89 04 24             	mov    DWORD PTR [esp],eax
c000d123:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d127:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d12a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d12d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d131:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d135:	52                   	push   edx
c000d136:	50                   	push   eax
c000d137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13f:	e8 fb 7d 01 00       	call   c0024f3f <__ltdf2>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	85 c0                	test   eax,eax
c000d149:	79 1d                	jns    c000d168 <sinc_mono_vari_process+0x11c>
c000d14b:	68 00 00 f0 3f       	push   0x3ff00000
c000d150:	6a 00                	push   0x0
c000d152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d15a:	e8 e0 7d 01 00       	call   c0024f3f <__ltdf2>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	85 c0                	test   eax,eax
c000d164:	78 2c                	js     c000d192 <sinc_mono_vari_process+0x146>
c000d166:	eb 4a                	jmp    c000d1b2 <sinc_mono_vari_process+0x166>
c000d168:	68 00 00 f0 3f       	push   0x3ff00000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d177:	e8 c3 7d 01 00       	call   c0024f3f <__ltdf2>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	85 c0                	test   eax,eax
c000d181:	79 2f                	jns    c000d1b2 <sinc_mono_vari_process+0x166>
c000d183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d187:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d18b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d192:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d196:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d19a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d19e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1a2:	e8 ad 77 01 00       	call   c0024954 <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1b5:	50                   	push   eax
c000d1b6:	50                   	push   eax
c000d1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bf:	e8 2c 7f 01 00       	call   c00250f0 <lrint>
c000d1c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d1c7:	40                   	inc    eax
c000d1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1cc:	0f af c7             	imul   eax,edi
c000d1cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1da:	58                   	pop    eax
c000d1db:	5a                   	pop    edx
c000d1dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e4:	e8 dd e4 ff ff       	call   c000b6c6 <fmod_one>
c000d1e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1f4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d1f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d20b:	e8 34 74 01 00       	call   c0024644 <__subdf3>
c000d210:	83 c4 18             	add    esp,0x18
c000d213:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	52                   	push   edx
c000d21c:	50                   	push   eax
c000d21d:	e8 ce 7e 01 00       	call   c00250f0 <lrint>
c000d222:	0f af f8             	imul   edi,eax
c000d225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d229:	01 f8                	add    eax,edi
c000d22b:	99                   	cdq    
c000d22c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d22f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	68 00 00 f0 3f       	push   0x3ff00000
c000d23f:	6a 00                	push   0x0
c000d241:	e8 0e 77 01 00       	call   c0024954 <__divdf3>
c000d246:	83 c4 10             	add    esp,0x10
c000d249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d251:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d256:	68 23 42 92 0c       	push   0xc924223
c000d25b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	e8 8b 6d 01 00       	call   c0023ff3 <__adddf3>
c000d268:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d26c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d270:	83 c4 20             	add    esp,0x20
c000d273:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d27b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d283:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d286:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d289:	7d 4e                	jge    c000d2d9 <sinc_mono_vari_process+0x28d>
c000d28b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d28e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d291:	01 c8                	add    eax,ecx
c000d293:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d296:	99                   	cdq    
c000d297:	f7 f9                	idiv   ecx
c000d299:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d29d:	7d 0c                	jge    c000d2ab <sinc_mono_vari_process+0x25f>
c000d29f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2a2:	85 ff                	test   edi,edi
c000d2a4:	79 69                	jns    c000d30f <sinc_mono_vari_process+0x2c3>
c000d2a6:	e9 e4 00 00 00       	jmp    c000d38f <sinc_mono_vari_process+0x343>
c000d2ab:	57                   	push   edi
c000d2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b0:	56                   	push   esi
c000d2b1:	53                   	push   ebx
c000d2b2:	e8 a5 e4 ff ff       	call   c000b75c <prepare_data>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d2bd:	85 c0                	test   eax,eax
c000d2bf:	0f 85 8e 03 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d2c5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2c8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2cb:	01 c8                	add    eax,ecx
c000d2cd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2d0:	99                   	cdq    
c000d2d1:	f7 f9                	idiv   ecx
c000d2d3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2d7:	7c c6                	jl     c000d29f <sinc_mono_vari_process+0x253>
c000d2d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2e0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d2e3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2ee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d2f1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d2f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d2f7:	99                   	cdq    
c000d2f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d2fb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d2fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d301:	99                   	cdq    
c000d302:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d305:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d308:	31 c0                	xor    eax,eax
c000d30a:	e9 44 03 00 00       	jmp    c000d653 <sinc_mono_vari_process+0x607>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d315:	e8 b9 79 01 00       	call   c0024cd3 <__floatsidf>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d321:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d325:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d329:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d32d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d331:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d335:	e8 b9 6c 01 00       	call   c0023ff3 <__adddf3>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d341:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d345:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d349:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d351:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d355:	e8 99 6c 01 00       	call   c0023ff3 <__adddf3>
c000d35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d35d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d361:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d365:	e8 69 79 01 00       	call   c0024cd3 <__floatsidf>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d375:	52                   	push   edx
c000d376:	50                   	push   eax
c000d377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37f:	e8 9d 7b 01 00       	call   c0024f21 <__gtdf2>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	85 c0                	test   eax,eax
c000d389:	0f 8f 4a ff ff ff    	jg     c000d2d9 <sinc_mono_vari_process+0x28d>
c000d38f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d393:	0f 8e ef 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d399:	83 ec 10             	sub    esp,0x10
c000d39c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d39f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3a8:	e8 97 72 01 00       	call   c0024644 <__subdf3>
c000d3ad:	83 c4 18             	add    esp,0x18
c000d3b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3b4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b8:	52                   	push   edx
c000d3b9:	50                   	push   eax
c000d3ba:	e8 11 7d 01 00       	call   c00250d0 <fabs>
c000d3bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d3cf:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	e8 40 7b 01 00       	call   c0024f21 <__gtdf2>
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 8e 9c 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d3ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3ef:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d3f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3fa:	52                   	push   edx
c000d3fb:	50                   	push   eax
c000d3fc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3ff:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d402:	e8 3d 72 01 00       	call   c0024644 <__subdf3>
c000d407:	5f                   	pop    edi
c000d408:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d40c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d410:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d413:	e8 bb 78 01 00       	call   c0024cd3 <__floatsidf>
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d41f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d423:	52                   	push   edx
c000d424:	50                   	push   eax
c000d425:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d429:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42d:	e8 3e 72 01 00       	call   c0024670 <__muldf3>
c000d432:	59                   	pop    ecx
c000d433:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d437:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d43b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d43e:	e8 90 78 01 00       	call   c0024cd3 <__floatsidf>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d44e:	52                   	push   edx
c000d44f:	50                   	push   eax
c000d450:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d458:	e8 f7 74 01 00       	call   c0024954 <__divdf3>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d464:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d46c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d470:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d474:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d478:	e8 76 6b 01 00       	call   c0023ff3 <__adddf3>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d488:	83 ec 0c             	sub    esp,0xc
c000d48b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d48e:	e8 40 78 01 00       	call   c0024cd3 <__floatsidf>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d49a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ae:	e8 8c 7a 01 00       	call   c0024f3f <__ltdf2>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	85 c0                	test   eax,eax
c000d4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d4bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d4c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d4c4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d4c8:	78 10                	js     c000d4da <sinc_mono_vari_process+0x48e>
c000d4ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ea:	e8 81 71 01 00       	call   c0024670 <__muldf3>
c000d4ef:	59                   	pop    ecx
c000d4f0:	5f                   	pop    edi
c000d4f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d4f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d501:	e8 99 e1 ff ff       	call   c000b69f <double_to_fp>
c000d506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d50a:	89 c7                	mov    edi,eax
c000d50c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d518:	e8 53 71 01 00       	call   c0024670 <__muldf3>
c000d51d:	83 c4 18             	add    esp,0x18
c000d520:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d524:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d528:	52                   	push   edx
c000d529:	50                   	push   eax
c000d52a:	e8 70 e1 ff ff       	call   c000b69f <double_to_fp>
c000d52f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d533:	83 ec 0c             	sub    esp,0xc
c000d536:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d539:	e8 95 77 01 00       	call   c0024cd3 <__floatsidf>
c000d53e:	83 c4 10             	add    esp,0x10
c000d541:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d545:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d549:	52                   	push   edx
c000d54a:	50                   	push   eax
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	e8 fc 73 01 00       	call   c0024954 <__divdf3>
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d55f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d563:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d567:	89 d8                	mov    eax,ebx
c000d569:	89 fa                	mov    edx,edi
c000d56b:	e8 7c c1 ff ff       	call   c00096ec <calc_output_single>
c000d570:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d573:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d576:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d582:	52                   	push   edx
c000d583:	50                   	push   eax
c000d584:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d588:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d58c:	e8 df 70 01 00       	call   c0024670 <__muldf3>
c000d591:	59                   	pop    ecx
c000d592:	59                   	pop    ecx
c000d593:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d597:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a3:	e8 9b 79 01 00       	call   c0024f43 <__truncdfsf2>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5af:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5b2:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c5:	e8 8a 73 01 00       	call   c0024954 <__divdf3>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e5:	e8 09 6a 01 00       	call   c0023ff3 <__adddf3>
c000d5ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5f2:	83 c4 18             	add    esp,0x18
c000d5f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5fd:	e8 c4 e0 ff ff       	call   c000b6c6 <fmod_one>
c000d602:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d609:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d60d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d610:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d61c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d624:	e8 1b 70 01 00       	call   c0024644 <__subdf3>
c000d629:	83 c4 18             	add    esp,0x18
c000d62c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d634:	52                   	push   edx
c000d635:	50                   	push   eax
c000d636:	e8 b5 7a 01 00       	call   c00250f0 <lrint>
c000d63b:	0f af f8             	imul   edi,eax
c000d63e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	01 f8                	add    eax,edi
c000d647:	99                   	cdq    
c000d648:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d64b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d64e:	e9 30 fc ff ff       	jmp    c000d283 <sinc_mono_vari_process+0x237>
c000d653:	83 c4 4c             	add    esp,0x4c
c000d656:	5b                   	pop    ebx
c000d657:	5e                   	pop    esi
c000d658:	5f                   	pop    edi
c000d659:	5d                   	pop    ebp
c000d65a:	c3                   	ret    

c000d65b <sinc_get_name>:
c000d65b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d65f:	31 c0                	xor    eax,eax
c000d661:	83 fa 02             	cmp    edx,0x2
c000d664:	77 07                	ja     c000d66d <sinc_get_name+0x12>
c000d666:	8b 04 95 e4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd981c]
c000d66d:	c3                   	ret    

c000d66e <sinc_get_description>:
c000d66e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d672:	31 c0                	xor    eax,eax
c000d674:	83 fa 02             	cmp    edx,0x2
c000d677:	77 07                	ja     c000d680 <sinc_get_description+0x12>
c000d679:	8b 04 95 d8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9828]
c000d680:	c3                   	ret    

c000d681 <sinc_set_converter>:
c000d681:	53                   	push   ebx
c000d682:	81 ec 58 08 00 00    	sub    esp,0x858
c000d688:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d68f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d692:	85 c0                	test   eax,eax
c000d694:	74 13                	je     c000d6a9 <sinc_set_converter+0x28>
c000d696:	83 ec 0c             	sub    esp,0xc
c000d699:	50                   	push   eax
c000d69a:	e8 9d 1a 00 00       	call   c000f13c <free>
c000d69f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	50                   	push   eax
c000d6aa:	68 44 08 00 00       	push   0x844
c000d6af:	6a 00                	push   0x0
c000d6b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6b5:	50                   	push   eax
c000d6b6:	e8 c2 2f ff ff       	call   c000067d <memset>
c000d6bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d6be:	83 c4 10             	add    esp,0x10
c000d6c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c6:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d6cc:	7f 6e                	jg     c000d73c <sinc_set_converter+0xbb>
c000d6ce:	83 fa 01             	cmp    edx,0x1
c000d6d1:	75 10                	jne    c000d6e3 <sinc_set_converter+0x62>
c000d6d3:	c7 43 24 4c d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d04c
c000d6da:	c7 43 20 4c d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d04c
c000d6e1:	eb 4d                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6e3:	83 fa 02             	cmp    edx,0x2
c000d6e6:	75 10                	jne    c000d6f8 <sinc_set_converter+0x77>
c000d6e8:	c7 43 24 6e ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ca6e
c000d6ef:	c7 43 20 6e ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ca6e
c000d6f6:	eb 38                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6f8:	83 fa 04             	cmp    edx,0x4
c000d6fb:	75 10                	jne    c000d70d <sinc_set_converter+0x8c>
c000d6fd:	c7 43 24 90 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c490
c000d704:	c7 43 20 90 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c490
c000d70b:	eb 23                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d70d:	83 fa 06             	cmp    edx,0x6
c000d710:	75 10                	jne    c000d722 <sinc_set_converter+0xa1>
c000d712:	c7 43 24 b2 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000beb2
c000d719:	c7 43 20 b2 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000beb2
c000d720:	eb 0e                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d722:	c7 43 24 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b8d6
c000d729:	c7 43 20 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b8d6
c000d730:	c7 43 28 f3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aaf3
c000d737:	b8 0a 00 00 00       	mov    eax,0xa
c000d73c:	81 c4 58 08 00 00    	add    esp,0x858
c000d742:	5b                   	pop    ebx
c000d743:	c3                   	ret    

c000d744 <is_bad_src_ratio>:
c000d744:	83 ec 1c             	sub    esp,0x1c
c000d747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d74f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d757:	b8 00 00 00 00       	mov    eax,0x0
c000d75c:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d761:	52                   	push   edx
c000d762:	50                   	push   eax
c000d763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d76b:	e8 cf 77 01 00       	call   c0024f3f <__ltdf2>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	85 c0                	test   eax,eax
c000d775:	78 20                	js     c000d797 <is_bad_src_ratio+0x53>
c000d777:	b8 00 00 00 00       	mov    eax,0x0
c000d77c:	ba 00 00 70 40       	mov    edx,0x40700000
c000d781:	52                   	push   edx
c000d782:	50                   	push   eax
c000d783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78b:	e8 91 77 01 00       	call   c0024f21 <__gtdf2>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	85 c0                	test   eax,eax
c000d795:	7e 07                	jle    c000d79e <is_bad_src_ratio+0x5a>
c000d797:	b8 01 00 00 00       	mov    eax,0x1
c000d79c:	eb 05                	jmp    c000d7a3 <is_bad_src_ratio+0x5f>
c000d79e:	b8 00 00 00 00       	mov    eax,0x0
c000d7a3:	83 c4 1c             	add    esp,0x1c
c000d7a6:	c3                   	ret    

c000d7a7 <fmod_one>:
c000d7a7:	83 ec 2c             	sub    esp,0x2c
c000d7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ba:	83 ec 08             	sub    esp,0x8
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c5:	e8 26 79 01 00       	call   c00250f0 <lrint>
c000d7ca:	83 c4 10             	add    esp,0x10
c000d7cd:	83 ec 0c             	sub    esp,0xc
c000d7d0:	50                   	push   eax
c000d7d1:	e8 fd 74 01 00       	call   c0024cd3 <__floatsidf>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	52                   	push   edx
c000d7da:	50                   	push   eax
c000d7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e3:	e8 5c 6e 01 00       	call   c0024644 <__subdf3>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d7f3:	b8 00 00 00 00       	mov    eax,0x0
c000d7f8:	ba 00 00 00 00       	mov    edx,0x0
c000d7fd:	52                   	push   edx
c000d7fe:	50                   	push   eax
c000d7ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d807:	e8 33 77 01 00       	call   c0024f3f <__ltdf2>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	85 c0                	test   eax,eax
c000d811:	79 1e                	jns    c000d831 <fmod_one+0x8a>
c000d813:	b8 00 00 00 00       	mov    eax,0x0
c000d818:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d81d:	52                   	push   edx
c000d81e:	50                   	push   eax
c000d81f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d823:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d827:	e8 c7 67 01 00       	call   c0023ff3 <__adddf3>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb 08                	jmp    c000d839 <fmod_one+0x92>
c000d831:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d835:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d839:	83 c4 2c             	add    esp,0x2c
c000d83c:	c3                   	ret    

c000d83d <zoh_vari_process>:
c000d83d:	55                   	push   ebp
c000d83e:	57                   	push   edi
c000d83f:	56                   	push   esi
c000d840:	53                   	push   ebx
c000d841:	83 ec 3c             	sub    esp,0x3c
c000d844:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d848:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d84c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d854:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d858:	0f 8e a9 05 00 00    	jle    c000de07 <zoh_vari_process+0x5ca>
c000d85e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d861:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d869:	85 db                	test   ebx,ebx
c000d86b:	0f 84 96 05 00 00    	je     c000de07 <zoh_vari_process+0x5ca>
c000d871:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d874:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d878:	74 19                	je     c000d893 <zoh_vari_process+0x56>
c000d87a:	31 d2                	xor    edx,edx
c000d87c:	39 c2                	cmp    edx,eax
c000d87e:	7d 0c                	jge    c000d88c <zoh_vari_process+0x4f>
c000d880:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d882:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d885:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d889:	42                   	inc    edx
c000d88a:	eb f0                	jmp    c000d87c <zoh_vari_process+0x3f>
c000d88c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d893:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d896:	0f af d0             	imul   edx,eax
c000d899:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d89c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8a0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8a7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8aa:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8b4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8bf:	57                   	push   edi
c000d8c0:	57                   	push   edi
c000d8c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c9:	e8 76 fe ff ff       	call   c000d744 <is_bad_src_ratio>
c000d8ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d8da:	0f 85 1f 05 00 00    	jne    c000ddff <zoh_vari_process+0x5c2>
c000d8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d8e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8ee:	68 00 00 f0 3f       	push   0x3ff00000
c000d8f3:	6a 00                	push   0x0
c000d8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fd:	e8 3d 76 01 00       	call   c0024f3f <__ltdf2>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	85 c0                	test   eax,eax
c000d907:	0f 89 dc 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d90d:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d910:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d913:	0f 8d d0 01 00 00    	jge    c000dae9 <zoh_vari_process+0x2ac>
c000d919:	83 ec 0c             	sub    esp,0xc
c000d91c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d91f:	e8 af 73 01 00       	call   c0024cd3 <__floatsidf>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	89 04 24             	mov    DWORD PTR [esp],eax
c000d92a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93e:	e8 2d 6d 01 00       	call   c0024670 <__muldf3>
c000d943:	59                   	pop    ecx
c000d944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d948:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d94c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d94f:	e8 7f 73 01 00       	call   c0024cd3 <__floatsidf>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d95b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d95f:	52                   	push   edx
c000d960:	50                   	push   eax
c000d961:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d965:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d969:	e8 85 66 01 00       	call   c0023ff3 <__adddf3>
c000d96e:	59                   	pop    ecx
c000d96f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d973:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d977:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d97a:	e8 54 73 01 00       	call   c0024cd3 <__floatsidf>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d986:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d98a:	52                   	push   edx
c000d98b:	50                   	push   eax
c000d98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d994:	e8 a4 75 01 00       	call   c0024f3d <__gedf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	0f 89 45 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d9a4:	85 ff                	test   edi,edi
c000d9a6:	0f 8e ee 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ac:	83 ec 10             	sub    esp,0x10
c000d9af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9b2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d9b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d9bb:	e8 84 6c 01 00       	call   c0024644 <__subdf3>
c000d9c0:	83 c4 18             	add    esp,0x18
c000d9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9cb:	52                   	push   edx
c000d9cc:	50                   	push   eax
c000d9cd:	e8 fe 76 01 00       	call   c00250d0 <fabs>
c000d9d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d9e2:	68 23 42 92 0c       	push   0xc924223
c000d9e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ef:	e8 2d 75 01 00       	call   c0024f21 <__gtdf2>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	85 c0                	test   eax,eax
c000d9f9:	0f 8e 9b 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da05:	89 04 24             	mov    DWORD PTR [esp],eax
c000da08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da0c:	52                   	push   edx
c000da0d:	50                   	push   eax
c000da0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da14:	e8 2b 6c 01 00       	call   c0024644 <__subdf3>
c000da19:	59                   	pop    ecx
c000da1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da25:	e8 a9 72 01 00       	call   c0024cd3 <__floatsidf>
c000da2a:	83 c4 10             	add    esp,0x10
c000da2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da35:	52                   	push   edx
c000da36:	50                   	push   eax
c000da37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3f:	e8 2c 6c 01 00       	call   c0024670 <__muldf3>
c000da44:	5f                   	pop    edi
c000da45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da50:	e8 7e 72 01 00       	call   c0024cd3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da60:	52                   	push   edx
c000da61:	50                   	push   eax
c000da62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da6a:	e8 e5 6e 01 00       	call   c0024954 <__divdf3>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da7e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8a:	e8 64 65 01 00       	call   c0023ff3 <__adddf3>
c000da8f:	83 c4 10             	add    esp,0x10
c000da92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da9a:	31 c0                	xor    eax,eax
c000da9c:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000da9f:	7e 13                	jle    c000dab4 <zoh_vari_process+0x277>
c000daa1:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daa5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daa8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daab:	40                   	inc    eax
c000daac:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daaf:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dab2:	eb e8                	jmp    c000da9c <zoh_vari_process+0x25f>
c000dab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dab8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dabc:	68 00 00 f0 3f       	push   0x3ff00000
c000dac1:	6a 00                	push   0x0
c000dac3:	e8 8c 6e 01 00       	call   c0024954 <__divdf3>
c000dac8:	83 c4 10             	add    esp,0x10
c000dacb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dace:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dad2:	52                   	push   edx
c000dad3:	50                   	push   eax
c000dad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	e8 12 65 01 00       	call   c0023ff3 <__adddf3>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	e9 fd fd ff ff       	jmp    c000d8e6 <zoh_vari_process+0xa9>
c000dae9:	57                   	push   edi
c000daea:	57                   	push   edi
c000daeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf3:	e8 af fc ff ff       	call   c000d7a7 <fmod_one>
c000daf8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dafb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db13:	e8 2c 6b 01 00       	call   c0024644 <__subdf3>
c000db18:	83 c4 18             	add    esp,0x18
c000db1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db23:	52                   	push   edx
c000db24:	50                   	push   eax
c000db25:	e8 c6 75 01 00       	call   c00250f0 <lrint>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	0f af f8             	imul   edi,eax
c000db30:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db33:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db36:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db3d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db44:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db47:	0f 8d 1d 02 00 00    	jge    c000dd6a <zoh_vari_process+0x52d>
c000db4d:	83 ec 0c             	sub    esp,0xc
c000db50:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db53:	e8 7b 71 01 00       	call   c0024cd3 <__floatsidf>
c000db58:	83 c4 10             	add    esp,0x10
c000db5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db63:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db67:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	e8 f8 6a 01 00       	call   c0024670 <__muldf3>
c000db78:	59                   	pop    ecx
c000db79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000db81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db85:	e8 49 71 01 00       	call   c0024cd3 <__floatsidf>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000db91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000db95:	52                   	push   edx
c000db96:	50                   	push   eax
c000db97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9f:	e8 4f 64 01 00       	call   c0023ff3 <__adddf3>
c000dba4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbaf:	e8 1f 71 01 00       	call   c0024cd3 <__floatsidf>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbbf:	52                   	push   edx
c000dbc0:	50                   	push   eax
c000dbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc9:	e8 73 73 01 00       	call   c0024f41 <__ledf2>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	85 c0                	test   eax,eax
c000dbd3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbd7:	0f 8f 8d 01 00 00    	jg     c000dd6a <zoh_vari_process+0x52d>
c000dbdd:	85 c9                	test   ecx,ecx
c000dbdf:	0f 8e ef 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dbe5:	83 ec 10             	sub    esp,0x10
c000dbe8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbeb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dbf1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dbf4:	e8 4b 6a 01 00       	call   c0024644 <__subdf3>
c000dbf9:	83 c4 18             	add    esp,0x18
c000dbfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc04:	52                   	push   edx
c000dc05:	50                   	push   eax
c000dc06:	e8 c5 74 01 00       	call   c00250d0 <fabs>
c000dc0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc1b:	68 23 42 92 0c       	push   0xc924223
c000dc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc28:	e8 f4 72 01 00       	call   c0024f21 <__gtdf2>
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	85 c0                	test   eax,eax
c000dc32:	0f 8e 9c 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dc38:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc3b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc46:	52                   	push   edx
c000dc47:	50                   	push   eax
c000dc48:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc4b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc4e:	e8 f1 69 01 00       	call   c0024644 <__subdf3>
c000dc53:	5f                   	pop    edi
c000dc54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc58:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dc5f:	e8 6f 70 01 00       	call   c0024cd3 <__floatsidf>
c000dc64:	83 c4 10             	add    esp,0x10
c000dc67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc6f:	52                   	push   edx
c000dc70:	50                   	push   eax
c000dc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc79:	e8 f2 69 01 00       	call   c0024670 <__muldf3>
c000dc7e:	59                   	pop    ecx
c000dc7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc83:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc87:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dc8a:	e8 44 70 01 00       	call   c0024cd3 <__floatsidf>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc9a:	52                   	push   edx
c000dc9b:	50                   	push   eax
c000dc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca4:	e8 ab 6c 01 00       	call   c0024954 <__divdf3>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc4:	e8 2a 63 01 00       	call   c0023ff3 <__adddf3>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcd4:	31 c0                	xor    eax,eax
c000dcd6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dcd9:	39 c2                	cmp    edx,eax
c000dcdb:	7e 1d                	jle    c000dcfa <zoh_vari_process+0x4bd>
c000dcdd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dce0:	29 d1                	sub    ecx,edx
c000dce2:	89 ca                	mov    edx,ecx
c000dce4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dce6:	01 c2                	add    edx,eax
c000dce8:	40                   	inc    eax
c000dce9:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dcec:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dcef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dcf2:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dcf5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dcf8:	eb dc                	jmp    c000dcd6 <zoh_vari_process+0x499>
c000dcfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd02:	68 00 00 f0 3f       	push   0x3ff00000
c000dd07:	6a 00                	push   0x0
c000dd09:	e8 46 6c 01 00       	call   c0024954 <__divdf3>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd19:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd1d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd29:	e8 c5 62 01 00       	call   c0023ff3 <__adddf3>
c000dd2e:	5f                   	pop    edi
c000dd2f:	59                   	pop    ecx
c000dd30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd40:	e8 62 fa ff ff       	call   c000d7a7 <fmod_one>
c000dd45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd60:	e8 df 68 01 00       	call   c0024644 <__subdf3>
c000dd65:	e9 ae fd ff ff       	jmp    c000db18 <zoh_vari_process+0x2db>
c000dd6a:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000dd6e:	7d 3a                	jge    c000ddaa <zoh_vari_process+0x56d>
c000dd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	29 f8                	sub    eax,edi
c000dd79:	99                   	cdq    
c000dd7a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dd7d:	50                   	push   eax
c000dd7e:	e8 50 6f 01 00       	call   c0024cd3 <__floatsidf>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd8e:	52                   	push   edx
c000dd8f:	50                   	push   eax
c000dd90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd98:	e8 56 62 01 00       	call   c0023ff3 <__adddf3>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000dda3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddb1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddb4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddb7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddba:	85 c0                	test   eax,eax
c000ddbc:	7f 24                	jg     c000dde2 <zoh_vari_process+0x5a5>
c000ddbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddc6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ddc9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ddcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddcf:	99                   	cdq    
c000ddd0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddd3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ddd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ddd9:	99                   	cdq    
c000ddda:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dddd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dde0:	eb 25                	jmp    c000de07 <zoh_vari_process+0x5ca>
c000dde2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000dde5:	31 d2                	xor    edx,edx
c000dde7:	29 c8                	sub    eax,ecx
c000dde9:	c1 e0 02             	shl    eax,0x2
c000ddec:	39 d1                	cmp    ecx,edx
c000ddee:	7e ce                	jle    c000ddbe <zoh_vari_process+0x581>
c000ddf0:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ddf2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000ddf5:	83 c0 04             	add    eax,0x4
c000ddf8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000ddfc:	42                   	inc    edx
c000ddfd:	eb ed                	jmp    c000ddec <zoh_vari_process+0x5af>
c000ddff:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de0b:	83 c4 3c             	add    esp,0x3c
c000de0e:	5b                   	pop    ebx
c000de0f:	5e                   	pop    esi
c000de10:	5f                   	pop    edi
c000de11:	5d                   	pop    ebp
c000de12:	c3                   	ret    

c000de13 <zoh_reset>:
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de1a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de1d:	85 c0                	test   eax,eax
c000de1f:	74 20                	je     c000de41 <zoh_reset+0x2e>
c000de21:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de24:	83 c0 1c             	add    eax,0x1c
c000de27:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de2a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de31:	c1 e2 02             	shl    edx,0x2
c000de34:	51                   	push   ecx
c000de35:	52                   	push   edx
c000de36:	6a 00                	push   0x0
c000de38:	50                   	push   eax
c000de39:	e8 3f 28 ff ff       	call   c000067d <memset>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	83 c4 0c             	add    esp,0xc
c000de44:	c3                   	ret    

c000de45 <zoh_get_name>:
c000de45:	31 c0                	xor    eax,eax
c000de47:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de4c:	75 05                	jne    c000de53 <zoh_get_name+0xe>
c000de4e:	b8 fe 68 02 c0       	mov    eax,0xc00268fe
c000de53:	c3                   	ret    

c000de54 <zoh_get_description>:
c000de54:	31 c0                	xor    eax,eax
c000de56:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de5b:	75 05                	jne    c000de62 <zoh_get_description+0xe>
c000de5d:	b8 0f 69 02 c0       	mov    eax,0xc002690f
c000de62:	c3                   	ret    

c000de63 <zoh_set_converter>:
c000de63:	53                   	push   ebx
c000de64:	b8 0a 00 00 00       	mov    eax,0xa
c000de69:	83 ec 08             	sub    esp,0x8
c000de6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de70:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000de75:	75 6e                	jne    c000dee5 <zoh_set_converter+0x82>
c000de77:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000de7a:	85 c0                	test   eax,eax
c000de7c:	74 13                	je     c000de91 <zoh_set_converter+0x2e>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	50                   	push   eax
c000de82:	e8 b5 12 00 00       	call   c000f13c <free>
c000de87:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000de8e:	83 c4 10             	add    esp,0x10
c000de91:	50                   	push   eax
c000de92:	50                   	push   eax
c000de93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000de96:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000de9d:	50                   	push   eax
c000de9e:	6a 01                	push   0x1
c000dea0:	e8 b7 12 00 00       	call   c000f15c <calloc>
c000dea5:	83 c4 10             	add    esp,0x10
c000dea8:	89 c2                	mov    edx,eax
c000deaa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dead:	85 d2                	test   edx,edx
c000deaf:	b8 01 00 00 00       	mov    eax,0x1
c000deb4:	74 2f                	je     c000dee5 <zoh_set_converter+0x82>
c000deb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000deb9:	83 ec 0c             	sub    esp,0xc
c000debc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000debf:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000dec5:	c7 43 24 3d d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d83d
c000decc:	c7 43 20 3d d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d83d
c000ded3:	c7 43 28 13 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de13
c000deda:	53                   	push   ebx
c000dedb:	e8 33 ff ff ff       	call   c000de13 <zoh_reset>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	31 c0                	xor    eax,eax
c000dee5:	83 c4 08             	add    esp,0x8
c000dee8:	5b                   	pop    ebx
c000dee9:	c3                   	ret    

c000deea <CPU::current()>:
c000deea:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000deef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000def5:	90                   	nop
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Computer::close(int, int, void*)>:
c000def8:	57                   	push   edi
c000def9:	56                   	push   esi
c000defa:	53                   	push   ebx
c000defb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000deff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df07:	83 ec 0c             	sub    esp,0xc
c000df0a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df10:	e8 8f 58 00 00       	call   c00137a4 <Device::closeAll()>
c000df15:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	8b 10                	mov    edx,DWORD PTR [eax]
c000df20:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df24:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df2c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df34:	5b                   	pop    ebx
c000df35:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df38:	5e                   	pop    esi
c000df39:	5f                   	pop    edi
c000df3a:	ff e0                	jmp    eax

c000df3c <Computer::Computer()>:
c000df3c:	83 ec 0c             	sub    esp,0xc
c000df3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df43:	83 ec 08             	sub    esp,0x8
c000df46:	68 46 69 02 c0       	push   0xc0026946
c000df4b:	50                   	push   eax
c000df4c:	e8 cd 58 00 00       	call   c001381e <Device::Device(char const*)>
c000df51:	83 c4 10             	add    esp,0x10
c000df54:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c000df59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5d:	89 10                	mov    DWORD PTR [eax],edx
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000df85:	83 ca 04             	or     edx,0x4
c000df88:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000df8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000df98:	0f b6 d0             	movzx  edx,al
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfb0:	0f b6 d0             	movzx  edx,al
c000dfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfc6:	8d 50 01             	lea    edx,[eax+0x1]
c000dfc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfcd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000dfd3:	0f b6 d0             	movzx  edx,al
c000dfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfda:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000dfde:	83 e1 3f             	and    ecx,0x3f
c000dfe1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000dfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfef:	0f b6 d0             	movzx  edx,al
c000dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff6:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000dffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e001:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e007:	0f b6 d0             	movzx  edx,al
c000e00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e017:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e01d:	8d 50 01             	lea    edx,[eax+0x1]
c000e020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e024:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e02a:	0f b6 d0             	movzx  edx,al
c000e02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e031:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e035:	83 e1 3f             	and    ecx,0x3f
c000e038:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e040:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e046:	0f b6 d0             	movzx  edx,al
c000e049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04d:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e058:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e05e:	0f b6 d0             	movzx  edx,al
c000e061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e065:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e074:	8d 50 01             	lea    edx,[eax+0x1]
c000e077:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e07b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e081:	0f b6 d0             	movzx  edx,al
c000e084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e088:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e08c:	83 e1 3f             	and    ecx,0x3f
c000e08f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e093:	90                   	nop
c000e094:	83 c4 0c             	add    esp,0xc
c000e097:	c3                   	ret    

c000e098 <Computer::setBootMessage(char const*)>:
c000e098:	c3                   	ret    
c000e099:	90                   	nop

c000e09a <Computer::start()>:
c000e09a:	56                   	push   esi
c000e09b:	53                   	push   ebx
c000e09c:	50                   	push   eax
c000e09d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0a1:	e8 74 d8 00 00       	call   c001b91a <lockScheduler()>
c000e0a6:	e8 ab db 00 00       	call   c001bc56 <schedule()>
c000e0ab:	e8 6c d8 00 00       	call   c001b91c <unlockScheduler()>
c000e0b0:	fb                   	sti    
c000e0b1:	83 ec 0c             	sub    esp,0xc
c000e0b4:	68 3b 07 00 00       	push   0x73b
c000e0b9:	e8 a6 40 00 00       	call   c0012164 <operator new(unsigned long)>
c000e0be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0c5:	89 c6                	mov    esi,eax
c000e0c7:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c000e0cd:	68 4f 69 02 c0       	push   0xc002694f
c000e0d2:	6a 01                	push   0x1
c000e0d4:	50                   	push   eax
c000e0d5:	e8 a0 d6 00 00       	call   c001b77a <Process::Process(bool, char const*, Process*, char**)>
c000e0da:	83 c4 20             	add    esp,0x20
c000e0dd:	68 ff 00 00 00       	push   0xff
c000e0e2:	6a 00                	push   0x0
c000e0e4:	68 c1 ea 00 c0       	push   0xc000eac1
c000e0e9:	56                   	push   esi
c000e0ea:	e8 5d d9 00 00       	call   c001ba4c <Process::createThread(void (*)(void*), void*, int)>
c000e0ef:	6a 7a                	push   0x7a
c000e0f1:	6a 00                	push   0x0
c000e0f3:	68 85 c2 01 c0       	push   0xc001c285
c000e0f8:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c000e0fe:	e8 49 d9 00 00       	call   c001ba4c <Process::createThread(void (*)(void*), void*, int)>
c000e103:	83 c4 20             	add    esp,0x20
c000e106:	a3 28 b9 02 c0       	mov    ds:0xc002b928,eax
c000e10b:	c6 05 6d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a46d,0x1
c000e112:	e8 97 44 00 00       	call   c00125ae <initVFS()>
c000e117:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e11d:	8b 10                	mov    edx,DWORD PTR [eax]
c000e11f:	6a 00                	push   0x0
c000e121:	6a 00                	push   0x0
c000e123:	6a 00                	push   0x0
c000e125:	50                   	push   eax
c000e126:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e129:	e8 48 c0 00 00       	call   c001a176 <setupSystemCalls()>
c000e12e:	e8 79 4f 00 00       	call   c00130ac <loadClockSettings()>
c000e133:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e136:	e8 3d 56 00 00       	call   c0013778 <Device::loadDriversForAll()>
c000e13b:	5a                   	pop    edx
c000e13c:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c000e142:	59                   	pop    ecx
c000e143:	6a 01                	push   0x1
c000e145:	68 5c 69 02 c0       	push   0xc002695c
c000e14a:	e8 f9 d1 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c000e14f:	5e                   	pop    esi
c000e150:	5a                   	pop    edx
c000e151:	53                   	push   ebx
c000e152:	50                   	push   eax
c000e153:	e8 b6 d3 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c000e158:	c7 04 24 e0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ae0
c000e15f:	e8 ef 40 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e164:	83 c4 10             	add    esp,0x10
c000e167:	83 ec 0c             	sub    esp,0xc
c000e16a:	6a 02                	push   0x2
c000e16c:	e8 3f dc 00 00       	call   c001bdb0 <blockTask(TaskState)>
c000e171:	83 c4 10             	add    esp,0x10
c000e174:	eb f1                	jmp    c000e167 <Computer::start()+0xcd>

c000e176 <firstTask()>:
c000e176:	83 ec 18             	sub    esp,0x18
c000e179:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c000e17f:	e8 16 ff ff ff       	call   c000e09a <Computer::start()>

c000e184 <Computer::detectFeatures()>:
c000e184:	55                   	push   ebp
c000e185:	57                   	push   edi
c000e186:	56                   	push   esi
c000e187:	53                   	push   ebx
c000e188:	83 ec 1c             	sub    esp,0x1c
c000e18b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e18f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e199:	e8 fb 20 ff ff       	call   c0000299 <detectCPUID>
c000e19e:	85 c0                	test   eax,eax
c000e1a0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1a6:	0f 95 c2             	setne  dl
c000e1a9:	83 e0 fd             	and    eax,0xfffffffd
c000e1ac:	d1 e2                	shl    edx,1
c000e1ae:	09 d0                	or     eax,edx
c000e1b0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1b6:	a8 02                	test   al,0x2
c000e1b8:	75 46                	jne    c000e200 <Computer::detectFeatures()+0x7c>
c000e1ba:	f6 05 81 a4 02 c0 04 	test   BYTE PTR ds:0xc002a481,0x4
c000e1c1:	74 07                	je     c000e1ca <Computer::detectFeatures()+0x46>
c000e1c3:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e1ca:	e8 67 4f 01 00       	call   c0023136 <x87Detect>
c000e1cf:	83 e0 01             	and    eax,0x1
c000e1d2:	c1 e0 04             	shl    eax,0x4
c000e1d5:	88 c2                	mov    dl,al
c000e1d7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1dd:	83 e0 ef             	and    eax,0xffffffef
c000e1e0:	09 d0                	or     eax,edx
c000e1e2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1e8:	a8 10                	test   al,0x10
c000e1ea:	0f 85 2a 01 00 00    	jne    c000e31a <Computer::detectFeatures()+0x196>
c000e1f0:	84 c0                	test   al,al
c000e1f2:	0f 88 45 01 00 00    	js     c000e33d <Computer::detectFeatures()+0x1b9>
c000e1f8:	83 c4 1c             	add    esp,0x1c
c000e1fb:	5b                   	pop    ebx
c000e1fc:	5e                   	pop    esi
c000e1fd:	5f                   	pop    edi
c000e1fe:	5d                   	pop    ebp
c000e1ff:	c3                   	ret    
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	6a 20                	push   0x20
c000e205:	e8 24 96 00 00       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c000e20a:	83 e0 01             	and    eax,0x1
c000e20d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e214:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e21a:	83 e0 f7             	and    eax,0xfffffff7
c000e21d:	09 d0                	or     eax,edx
c000e21f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e225:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e22c:	e8 fd 95 00 00       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c000e231:	83 e0 01             	and    eax,0x1
c000e234:	88 c2                	mov    dl,al
c000e236:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e23c:	83 e0 fe             	and    eax,0xfffffffe
c000e23f:	09 d0                	or     eax,edx
c000e241:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e247:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e24e:	e8 db 95 00 00       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c000e253:	c1 e0 07             	shl    eax,0x7
c000e256:	88 c2                	mov    dl,al
c000e258:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e25e:	83 e0 7f             	and    eax,0x7f
c000e261:	09 d0                	or     eax,edx
c000e263:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e269:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e270:	e8 b9 95 00 00       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c000e275:	83 c4 10             	add    esp,0x10
c000e278:	83 e0 01             	and    eax,0x1
c000e27b:	c1 e0 05             	shl    eax,0x5
c000e27e:	88 c2                	mov    dl,al
c000e280:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e286:	83 e0 df             	and    eax,0xffffffdf
c000e289:	09 d0                	or     eax,edx
c000e28b:	f7 05 80 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a480,0x401
c000e295:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e29b:	0f 84 c2 00 00 00    	je     c000e363 <Computer::detectFeatures()+0x1df>
c000e2a1:	83 e0 fe             	and    eax,0xfffffffe
c000e2a4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2aa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2b0:	88 c2                	mov    dl,al
c000e2b2:	83 e2 09             	and    edx,0x9
c000e2b5:	fe ca                	dec    dl
c000e2b7:	75 09                	jne    c000e2c2 <Computer::detectFeatures()+0x13e>
c000e2b9:	83 e0 fe             	and    eax,0xfffffffe
c000e2bc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2c2:	83 ec 0c             	sub    esp,0xc
c000e2c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2c9:	50                   	push   eax
c000e2ca:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2ce:	55                   	push   ebp
c000e2cf:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2d3:	57                   	push   edi
c000e2d4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2d8:	56                   	push   esi
c000e2d9:	68 00 00 00 80       	push   0x80000000
c000e2de:	e8 c7 94 00 00       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2e3:	83 c4 20             	add    esp,0x20
c000e2e6:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e2ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2f1:	0f 86 c3 fe ff ff    	jbe    c000e1ba <Computer::detectFeatures()+0x36>
c000e2f7:	83 ec 0c             	sub    esp,0xc
c000e2fa:	50                   	push   eax
c000e2fb:	55                   	push   ebp
c000e2fc:	57                   	push   edi
c000e2fd:	56                   	push   esi
c000e2fe:	68 01 00 00 80       	push   0x80000001
c000e303:	e8 a2 94 00 00       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e308:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e312:	83 c4 20             	add    esp,0x20
c000e315:	e9 a0 fe ff ff       	jmp    c000e1ba <Computer::detectFeatures()+0x36>
c000e31a:	e8 d1 4d 01 00       	call   c00230f0 <sseDetect>
c000e31f:	88 c2                	mov    dl,al
c000e321:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e327:	c1 e2 07             	shl    edx,0x7
c000e32a:	83 e0 7f             	and    eax,0x7f
c000e32d:	09 d0                	or     eax,edx
c000e32f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e335:	84 c0                	test   al,al
c000e337:	0f 89 bb fe ff ff    	jns    c000e1f8 <Computer::detectFeatures()+0x74>
c000e33d:	e8 9e 4d 01 00       	call   c00230e0 <avxDetect>
c000e342:	83 e0 01             	and    eax,0x1
c000e345:	c1 e0 05             	shl    eax,0x5
c000e348:	88 c2                	mov    dl,al
c000e34a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e350:	83 e0 df             	and    eax,0xffffffdf
c000e353:	09 d0                	or     eax,edx
c000e355:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e35b:	83 c4 1c             	add    esp,0x1c
c000e35e:	5b                   	pop    ebx
c000e35f:	5e                   	pop    esi
c000e360:	5f                   	pop    edi
c000e361:	5d                   	pop    ebp
c000e362:	c3                   	ret    
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	68 00 02 00 00       	push   0x200
c000e36b:	e8 be 94 00 00       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	83 e0 01             	and    eax,0x1
c000e376:	88 c2                	mov    dl,al
c000e378:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e37e:	83 e0 fe             	and    eax,0xfffffffe
c000e381:	09 d0                	or     eax,edx
c000e383:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e389:	e9 1c ff ff ff       	jmp    c000e2aa <Computer::detectFeatures()+0x126>

c000e38e <Computer::displayFeatures()>:
c000e38e:	53                   	push   ebx
c000e38f:	83 ec 14             	sub    esp,0x14
c000e392:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e396:	68 7f 69 02 c0       	push   0xc002697f
c000e39b:	e8 b3 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3aa:	0f 85 73 02 00 00    	jne    c000e623 <Computer::displayFeatures()+0x295>
c000e3b0:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3b5:	83 ec 08             	sub    esp,0x8
c000e3b8:	50                   	push   eax
c000e3b9:	68 92 69 02 c0       	push   0xc0026992
c000e3be:	e8 90 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e3c3:	83 c4 10             	add    esp,0x10
c000e3c6:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3cd:	0f 85 8c 02 00 00    	jne    c000e65f <Computer::displayFeatures()+0x2d1>
c000e3d3:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3d8:	83 ec 08             	sub    esp,0x8
c000e3db:	50                   	push   eax
c000e3dc:	68 a3 69 02 c0       	push   0xc00269a3
c000e3e1:	e8 6d 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e3e6:	83 c4 10             	add    esp,0x10
c000e3e9:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e3f0:	0f 85 5f 02 00 00    	jne    c000e655 <Computer::displayFeatures()+0x2c7>
c000e3f6:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3fb:	83 ec 08             	sub    esp,0x8
c000e3fe:	50                   	push   eax
c000e3ff:	68 b4 69 02 c0       	push   0xc00269b4
c000e404:	e8 4a 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e409:	83 c4 10             	add    esp,0x10
c000e40c:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e413:	0f 85 32 02 00 00    	jne    c000e64b <Computer::displayFeatures()+0x2bd>
c000e419:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e41e:	83 ec 08             	sub    esp,0x8
c000e421:	50                   	push   eax
c000e422:	68 c5 69 02 c0       	push   0xc00269c5
c000e427:	e8 27 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e42c:	83 c4 10             	add    esp,0x10
c000e42f:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e436:	0f 85 05 02 00 00    	jne    c000e641 <Computer::displayFeatures()+0x2b3>
c000e43c:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e441:	83 ec 08             	sub    esp,0x8
c000e444:	50                   	push   eax
c000e445:	68 d6 69 02 c0       	push   0xc00269d6
c000e44a:	e8 04 3e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e459:	0f 85 d8 01 00 00    	jne    c000e637 <Computer::displayFeatures()+0x2a9>
c000e45f:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e464:	83 ec 08             	sub    esp,0x8
c000e467:	50                   	push   eax
c000e468:	68 e7 69 02 c0       	push   0xc00269e7
c000e46d:	e8 e1 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e472:	83 c4 10             	add    esp,0x10
c000e475:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e47c:	0f 85 ab 01 00 00    	jne    c000e62d <Computer::displayFeatures()+0x29f>
c000e482:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e487:	83 ec 08             	sub    esp,0x8
c000e48a:	50                   	push   eax
c000e48b:	68 f8 69 02 c0       	push   0xc00269f8
c000e490:	e8 be 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e49f:	0f 88 1b 02 00 00    	js     c000e6c0 <Computer::displayFeatures()+0x332>
c000e4a5:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4aa:	83 ec 08             	sub    esp,0x8
c000e4ad:	50                   	push   eax
c000e4ae:	68 09 6a 02 c0       	push   0xc0026a09
c000e4b3:	e8 9b 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e4b8:	83 c4 10             	add    esp,0x10
c000e4bb:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4c2:	0f 85 a1 01 00 00    	jne    c000e669 <Computer::displayFeatures()+0x2db>
c000e4c8:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4cd:	83 ec 08             	sub    esp,0x8
c000e4d0:	50                   	push   eax
c000e4d1:	68 1a 6a 02 c0       	push   0xc0026a1a
c000e4d6:	e8 78 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e4db:	83 c4 10             	add    esp,0x10
c000e4de:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4e5:	0f 85 cb 01 00 00    	jne    c000e6b6 <Computer::displayFeatures()+0x328>
c000e4eb:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4f0:	83 ec 08             	sub    esp,0x8
c000e4f3:	50                   	push   eax
c000e4f4:	68 2b 6a 02 c0       	push   0xc0026a2b
c000e4f9:	e8 55 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e4fe:	83 c4 10             	add    esp,0x10
c000e501:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e508:	0f 85 9e 01 00 00    	jne    c000e6ac <Computer::displayFeatures()+0x31e>
c000e50e:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e513:	83 ec 08             	sub    esp,0x8
c000e516:	50                   	push   eax
c000e517:	68 3c 6a 02 c0       	push   0xc0026a3c
c000e51c:	e8 32 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e521:	83 c4 10             	add    esp,0x10
c000e524:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e52b:	0f 85 71 01 00 00    	jne    c000e6a2 <Computer::displayFeatures()+0x314>
c000e531:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e536:	83 ec 08             	sub    esp,0x8
c000e539:	50                   	push   eax
c000e53a:	68 4d 6a 02 c0       	push   0xc0026a4d
c000e53f:	e8 0f 3d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e54e:	0f 85 44 01 00 00    	jne    c000e698 <Computer::displayFeatures()+0x30a>
c000e554:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e559:	83 ec 08             	sub    esp,0x8
c000e55c:	50                   	push   eax
c000e55d:	68 5e 6a 02 c0       	push   0xc0026a5e
c000e562:	e8 ec 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e571:	0f 85 17 01 00 00    	jne    c000e68e <Computer::displayFeatures()+0x300>
c000e577:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e57c:	83 ec 08             	sub    esp,0x8
c000e57f:	50                   	push   eax
c000e580:	68 6f 6a 02 c0       	push   0xc0026a6f
c000e585:	e8 c9 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e58a:	83 c4 10             	add    esp,0x10
c000e58d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e594:	0f 85 ea 00 00 00    	jne    c000e684 <Computer::displayFeatures()+0x2f6>
c000e59a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e59f:	83 ec 08             	sub    esp,0x8
c000e5a2:	50                   	push   eax
c000e5a3:	68 80 6a 02 c0       	push   0xc0026a80
c000e5a8:	e8 a6 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5b7:	0f 88 0d 01 00 00    	js     c000e6ca <Computer::displayFeatures()+0x33c>
c000e5bd:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5c2:	83 ec 08             	sub    esp,0x8
c000e5c5:	50                   	push   eax
c000e5c6:	68 91 6a 02 c0       	push   0xc0026a91
c000e5cb:	e8 83 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e5d0:	83 c4 10             	add    esp,0x10
c000e5d3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5da:	0f 85 9a 00 00 00    	jne    c000e67a <Computer::displayFeatures()+0x2ec>
c000e5e0:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5e5:	83 ec 08             	sub    esp,0x8
c000e5e8:	50                   	push   eax
c000e5e9:	68 a2 6a 02 c0       	push   0xc0026aa2
c000e5ee:	e8 60 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e5f3:	83 c4 10             	add    esp,0x10
c000e5f6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e5fd:	75 74                	jne    c000e673 <Computer::displayFeatures()+0x2e5>
c000e5ff:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e604:	83 ec 08             	sub    esp,0x8
c000e607:	50                   	push   eax
c000e608:	68 b3 6a 02 c0       	push   0xc0026ab3
c000e60d:	e8 41 3c 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e612:	c7 44 24 20 da 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc00280da
c000e61a:	83 c4 18             	add    esp,0x18
c000e61d:	5b                   	pop    ebx
c000e61e:	e9 30 3c 00 00       	jmp    c0012253 <Dbg::kprintf(char const*, ...)>
c000e623:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e628:	e9 88 fd ff ff       	jmp    c000e3b5 <Computer::displayFeatures()+0x27>
c000e62d:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e632:	e9 50 fe ff ff       	jmp    c000e487 <Computer::displayFeatures()+0xf9>
c000e637:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e63c:	e9 23 fe ff ff       	jmp    c000e464 <Computer::displayFeatures()+0xd6>
c000e641:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e646:	e9 f6 fd ff ff       	jmp    c000e441 <Computer::displayFeatures()+0xb3>
c000e64b:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e650:	e9 c9 fd ff ff       	jmp    c000e41e <Computer::displayFeatures()+0x90>
c000e655:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e65a:	e9 9c fd ff ff       	jmp    c000e3fb <Computer::displayFeatures()+0x6d>
c000e65f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e664:	e9 6f fd ff ff       	jmp    c000e3d8 <Computer::displayFeatures()+0x4a>
c000e669:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e66e:	e9 5a fe ff ff       	jmp    c000e4cd <Computer::displayFeatures()+0x13f>
c000e673:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e678:	eb 8a                	jmp    c000e604 <Computer::displayFeatures()+0x276>
c000e67a:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e67f:	e9 61 ff ff ff       	jmp    c000e5e5 <Computer::displayFeatures()+0x257>
c000e684:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e689:	e9 11 ff ff ff       	jmp    c000e59f <Computer::displayFeatures()+0x211>
c000e68e:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e693:	e9 e4 fe ff ff       	jmp    c000e57c <Computer::displayFeatures()+0x1ee>
c000e698:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e69d:	e9 b7 fe ff ff       	jmp    c000e559 <Computer::displayFeatures()+0x1cb>
c000e6a2:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6a7:	e9 8a fe ff ff       	jmp    c000e536 <Computer::displayFeatures()+0x1a8>
c000e6ac:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6b1:	e9 5d fe ff ff       	jmp    c000e513 <Computer::displayFeatures()+0x185>
c000e6b6:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6bb:	e9 30 fe ff ff       	jmp    c000e4f0 <Computer::displayFeatures()+0x162>
c000e6c0:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6c5:	e9 e0 fd ff ff       	jmp    c000e4aa <Computer::displayFeatures()+0x11c>
c000e6ca:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6cf:	e9 ee fe ff ff       	jmp    c000e5c2 <Computer::displayFeatures()+0x234>

c000e6d4 <Computer::rdmsr(unsigned int)>:
c000e6d4:	83 ec 0c             	sub    esp,0xc
c000e6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6db:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6e2:	74 0a                	je     c000e6ee <Computer::rdmsr(unsigned int)+0x1a>
c000e6e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6e8:	0f 32                	rdmsr  
c000e6ea:	83 c4 0c             	add    esp,0xc
c000e6ed:	c3                   	ret    
c000e6ee:	83 ec 0c             	sub    esp,0xc
c000e6f1:	68 c4 6a 02 c0       	push   0xc0026ac4
c000e6f6:	e8 d6 a2 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000e6fb:	83 c4 10             	add    esp,0x10
c000e6fe:	eb e4                	jmp    c000e6e4 <Computer::rdmsr(unsigned int)+0x10>

c000e700 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e700:	57                   	push   edi
c000e701:	56                   	push   esi
c000e702:	52                   	push   edx
c000e703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e707:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e70b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e70f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e716:	74 0e                	je     c000e726 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e718:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71c:	89 f0                	mov    eax,esi
c000e71e:	89 fa                	mov    edx,edi
c000e720:	0f 30                	wrmsr  
c000e722:	58                   	pop    eax
c000e723:	5e                   	pop    esi
c000e724:	5f                   	pop    edi
c000e725:	c3                   	ret    
c000e726:	83 ec 0c             	sub    esp,0xc
c000e729:	68 ca 6a 02 c0       	push   0xc0026aca
c000e72e:	e8 9e a2 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	eb e0                	jmp    c000e718 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e738 <Computer::nmiEnabled()>:
c000e738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e73c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <Computer::readCMOS(unsigned char)>:
c000e744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e748:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e74f:	19 c0                	sbb    eax,eax
c000e751:	83 e0 80             	and    eax,0xffffff80
c000e754:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e758:	e6 70                	out    0x70,al
c000e75a:	e4 71                	in     al,0x71
c000e75c:	c3                   	ret    
c000e75d:	90                   	nop

c000e75e <Computer::enableNMI(bool)>:
c000e75e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e766:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e76c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e774:	eb ce                	jmp    c000e744 <Computer::readCMOS(unsigned char)>

c000e776 <Computer::open(int, int, void*)>:
c000e776:	56                   	push   esi
c000e777:	53                   	push   ebx
c000e778:	83 ec 10             	sub    esp,0x10
c000e77b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e77f:	f6 05 80 a4 02 c0 04 	test   BYTE PTR ds:0xc002a480,0x4
c000e786:	68 68 22 00 00       	push   0x2268
c000e78b:	0f 94 05 20 94 02 c0 	sete   BYTE PTR ds:0xc0029420
c000e792:	e8 cd 39 00 00       	call   c0012164 <operator new(unsigned long)>
c000e797:	89 04 24             	mov    DWORD PTR [esp],eax
c000e79a:	89 c6                	mov    esi,eax
c000e79c:	e8 cb 86 00 00       	call   c0016e6c <ACPI::ACPI()>
c000e7a1:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7a7:	58                   	pop    eax
c000e7a8:	5a                   	pop    edx
c000e7a9:	56                   	push   esi
c000e7aa:	53                   	push   ebx
c000e7ab:	e8 7e 4e 00 00       	call   c001362e <Device::addChild(Device*)>
c000e7b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7b3:	e8 cc f9 ff ff       	call   c000e184 <Computer::detectFeatures()>
c000e7b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7bb:	e8 ce fb ff ff       	call   c000e38e <Computer::displayFeatures()>
c000e7c0:	59                   	pop    ecx
c000e7c1:	5e                   	pop    esi
c000e7c2:	6a 01                	push   0x1
c000e7c4:	53                   	push   ebx
c000e7c5:	e8 94 ff ff ff       	call   c000e75e <Computer::enableNMI(bool)>
c000e7ca:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7d1:	e8 8e 39 00 00       	call   c0012164 <operator new(unsigned long)>
c000e7d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d9:	89 c6                	mov    esi,eax
c000e7db:	e8 06 91 00 00       	call   c00178e6 <CPU::CPU()>
c000e7e0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7e6:	58                   	pop    eax
c000e7e7:	5a                   	pop    edx
c000e7e8:	56                   	push   esi
c000e7e9:	53                   	push   ebx
c000e7ea:	e8 3f 4e 00 00       	call   c001362e <Device::addChild(Device*)>
c000e7ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e7f5:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7fb:	6a 00                	push   0x0
c000e7fd:	6a 00                	push   0x0
c000e7ff:	50                   	push   eax
c000e800:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e803:	83 c4 20             	add    esp,0x20
c000e806:	e8 8b 53 00 00       	call   c0013b96 <setupFPU()>
c000e80b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e811:	85 c0                	test   eax,eax
c000e813:	74 1f                	je     c000e834 <Computer::open(int, int, void*)+0xbe>
c000e815:	83 ec 08             	sub    esp,0x8
c000e818:	50                   	push   eax
c000e819:	53                   	push   ebx
c000e81a:	e8 0f 4e 00 00       	call   c001362e <Device::addChild(Device*)>
c000e81f:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e825:	8b 10                	mov    edx,DWORD PTR [eax]
c000e827:	6a 00                	push   0x0
c000e829:	6a 00                	push   0x0
c000e82b:	6a 00                	push   0x0
c000e82d:	50                   	push   eax
c000e82e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e831:	83 c4 20             	add    esp,0x20
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	68 76 e1 00 c0       	push   0xc000e176
c000e83c:	e8 0b d3 00 00       	call   c001bb4c <setupMultitasking(void (*)())>
c000e841:	83 c4 14             	add    esp,0x14
c000e844:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e849:	5b                   	pop    ebx
c000e84a:	5e                   	pop    esi
c000e84b:	c3                   	ret    

c000e84c <Computer::disableNMI()>:
c000e84c:	6a 00                	push   0x0
c000e84e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e852:	e8 07 ff ff ff       	call   c000e75e <Computer::enableNMI(bool)>
c000e857:	58                   	pop    eax
c000e858:	5a                   	pop    edx
c000e859:	c3                   	ret    

c000e85a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e85e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e865:	19 c0                	sbb    eax,eax
c000e867:	83 e0 80             	and    eax,0xffffff80
c000e86a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e86e:	e6 70                	out    0x70,al
c000e870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e874:	e6 71                	out    0x71,al
c000e876:	c3                   	ret    
c000e877:	90                   	nop

c000e878 <Computer::handleNMI()>:
c000e878:	56                   	push   esi
c000e879:	53                   	push   ebx
c000e87a:	83 ec 10             	sub    esp,0x10
c000e87d:	e4 92                	in     al,0x92
c000e87f:	89 c6                	mov    esi,eax
c000e881:	e4 61                	in     al,0x61
c000e883:	68 d0 6a 02 c0       	push   0xc0026ad0
c000e888:	88 c3                	mov    bl,al
c000e88a:	e8 c4 39 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	83 e6 10             	and    esi,0x10
c000e895:	75 0d                	jne    c000e8a4 <Computer::handleNMI()+0x2c>
c000e897:	f6 c3 40             	test   bl,0x40
c000e89a:	75 1d                	jne    c000e8b9 <Computer::handleNMI()+0x41>
c000e89c:	84 db                	test   bl,bl
c000e89e:	78 2d                	js     c000e8cd <Computer::handleNMI()+0x55>
c000e8a0:	58                   	pop    eax
c000e8a1:	5b                   	pop    ebx
c000e8a2:	5e                   	pop    esi
c000e8a3:	c3                   	ret    
c000e8a4:	83 ec 0c             	sub    esp,0xc
c000e8a7:	68 e1 6a 02 c0       	push   0xc0026ae1
c000e8ac:	e8 20 a1 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000e8b1:	83 c4 10             	add    esp,0x10
c000e8b4:	f6 c3 40             	test   bl,0x40
c000e8b7:	74 e3                	je     c000e89c <Computer::handleNMI()+0x24>
c000e8b9:	83 ec 0c             	sub    esp,0xc
c000e8bc:	68 ee 6a 02 c0       	push   0xc0026aee
c000e8c1:	e8 0b a1 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000e8c6:	83 c4 10             	add    esp,0x10
c000e8c9:	84 db                	test   bl,bl
c000e8cb:	79 d3                	jns    c000e8a0 <Computer::handleNMI()+0x28>
c000e8cd:	c7 44 24 10 f8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026af8
c000e8d5:	5a                   	pop    edx
c000e8d6:	5b                   	pop    ebx
c000e8d7:	5e                   	pop    esi
c000e8d8:	e9 f4 a0 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>
c000e8dd:	90                   	nop

c000e8de <Computer::setDiskActivityLight(int, bool)>:
c000e8de:	56                   	push   esi
c000e8df:	53                   	push   ebx
c000e8e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8e4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8e9:	77 1b                	ja     c000e906 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8eb:	e4 92                	in     al,0x92
c000e8ed:	bb 40 00 00 00       	mov    ebx,0x40
c000e8f2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e8f6:	89 da                	mov    edx,ebx
c000e8f8:	d3 e2                	shl    edx,cl
c000e8fa:	89 f1                	mov    ecx,esi
c000e8fc:	f7 d2                	not    edx
c000e8fe:	d3 e3                	shl    ebx,cl
c000e900:	21 d0                	and    eax,edx
c000e902:	09 d8                	or     eax,ebx
c000e904:	e6 92                	out    0x92,al
c000e906:	5b                   	pop    ebx
c000e907:	5e                   	pop    esi
c000e908:	c3                   	ret    
c000e909:	90                   	nop

c000e90a <GDTEntry::setBase(unsigned int)>:
c000e90a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e90e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e912:	89 c1                	mov    ecx,eax
c000e914:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e918:	c1 e9 10             	shr    ecx,0x10
c000e91b:	c1 e8 18             	shr    eax,0x18
c000e91e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e921:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e924:	c3                   	ret    
c000e925:	90                   	nop

c000e926 <GDTEntry::setLimit(unsigned int)>:
c000e926:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e92a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e92e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e931:	66 89 01             	mov    WORD PTR [ecx],ax
c000e934:	83 e2 f0             	and    edx,0xfffffff0
c000e937:	c1 e8 10             	shr    eax,0x10
c000e93a:	83 e0 0f             	and    eax,0xf
c000e93d:	09 d0                	or     eax,edx
c000e93f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <GDT::GDT()>:
c000e944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e948:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e94e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e952:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e958:	90                   	nop
c000e959:	c3                   	ret    

c000e95a <GDT::addEntry(GDTEntry)>:
c000e95a:	53                   	push   ebx
c000e95b:	83 ec 0c             	sub    esp,0xc
c000e95e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e962:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e964:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e96b:	52                   	push   edx
c000e96c:	50                   	push   eax
c000e96d:	68 34 6b 02 c0       	push   0xc0026b34
c000e972:	e8 dc 38 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000e977:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e979:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e97d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e981:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e985:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e989:	8d 50 01             	lea    edx,[eax+0x1]
c000e98c:	c1 e0 03             	shl    eax,0x3
c000e98f:	89 13                	mov    DWORD PTR [ebx],edx
c000e991:	83 c4 18             	add    esp,0x18
c000e994:	5b                   	pop    ebx
c000e995:	c3                   	ret    

c000e996 <GDT::getNumberOfEntries()>:
c000e996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e99a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e99c:	c3                   	ret    
c000e99d:	90                   	nop

c000e99e <GDT::flush()>:
c000e99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9a4:	83 c0 04             	add    eax,0x4
c000e9a7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9ae:	a3 72 a4 02 c0       	mov    ds:0xc002a472,eax
c000e9b3:	66 89 15 70 a4 02 c0 	mov    WORD PTR ds:0xc002a470,dx
c000e9ba:	e9 40 1a ff ff       	jmp    c00003ff <loadGDT>
c000e9bf:	90                   	nop

c000e9c0 <GDT::setup()>:
c000e9c0:	55                   	push   ebp
c000e9c1:	57                   	push   edi
c000e9c2:	56                   	push   esi
c000e9c3:	53                   	push   ebx
c000e9c4:	83 ec 3c             	sub    esp,0x3c
c000e9c7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9cb:	6a 00                	push   0x0
c000e9cd:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9d1:	53                   	push   ebx
c000e9d2:	e8 33 ff ff ff       	call   c000e90a <GDTEntry::setBase(unsigned int)>
c000e9d7:	6a 00                	push   0x0
c000e9d9:	53                   	push   ebx
c000e9da:	e8 47 ff ff ff       	call   c000e926 <GDTEntry::setLimit(unsigned int)>
c000e9df:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9e7:	6a 00                	push   0x0
c000e9e9:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000e9ed:	53                   	push   ebx
c000e9ee:	e8 17 ff ff ff       	call   c000e90a <GDTEntry::setBase(unsigned int)>
c000e9f3:	68 ff ff ff 00       	push   0xffffff
c000e9f8:	53                   	push   ebx
c000e9f9:	e8 28 ff ff ff       	call   c000e926 <GDTEntry::setLimit(unsigned int)>
c000e9fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea02:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea07:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea0c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea10:	83 c4 20             	add    esp,0x20
c000ea13:	6a 00                	push   0x0
c000ea15:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea19:	53                   	push   ebx
c000ea1a:	e8 eb fe ff ff       	call   c000e90a <GDTEntry::setBase(unsigned int)>
c000ea1f:	68 ff ff ff 00       	push   0xffffff
c000ea24:	53                   	push   ebx
c000ea25:	e8 fc fe ff ff       	call   c000e926 <GDTEntry::setLimit(unsigned int)>
c000ea2a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea32:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea36:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea3e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea43:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea48:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea4c:	89 d8                	mov    eax,ebx
c000ea4e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea52:	80 cc 60             	or     ah,0x60
c000ea55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea59:	83 c4 0c             	add    esp,0xc
c000ea5c:	89 f8                	mov    eax,edi
c000ea5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea62:	80 cc 60             	or     ah,0x60
c000ea65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea69:	89 c7                	mov    edi,eax
c000ea6b:	55                   	push   ebp
c000ea6c:	e8 e9 fe ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c000ea71:	83 c4 0c             	add    esp,0xc
c000ea74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea7c:	55                   	push   ebp
c000ea7d:	e8 d8 fe ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c000ea82:	83 c4 0c             	add    esp,0xc
c000ea85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea8d:	55                   	push   ebp
c000ea8e:	e8 c7 fe ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c000ea93:	83 c4 0c             	add    esp,0xc
c000ea96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea9e:	53                   	push   ebx
c000ea9f:	51                   	push   ecx
c000eaa0:	55                   	push   ebp
c000eaa1:	e8 b4 fe ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c000eaa6:	83 c4 0c             	add    esp,0xc
c000eaa9:	57                   	push   edi
c000eaaa:	56                   	push   esi
c000eaab:	55                   	push   ebp
c000eaac:	e8 a9 fe ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c000eab1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eab4:	e8 e5 fe ff ff       	call   c000e99e <GDT::flush()>
c000eab9:	83 c4 4c             	add    esp,0x4c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    

c000eac1 <idleFunction(void*)>:
c000eac1:	53                   	push   ebx
c000eac2:	83 ec 08             	sub    esp,0x8
c000eac5:	e8 52 ce 00 00       	call   c001b91c <unlockScheduler()>
c000eaca:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000eacf:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ead5:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000eadc:	74 3c                	je     c000eb1a <idleFunction(void*)+0x59>
c000eade:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eae5:	74 33                	je     c000eb1a <idleFunction(void*)+0x59>
c000eae7:	31 db                	xor    ebx,ebx
c000eae9:	52                   	push   edx
c000eaea:	52                   	push   edx
c000eaeb:	68 e1 00 00 00       	push   0xe1
c000eaf0:	50                   	push   eax
c000eaf1:	e8 de fb ff ff       	call   c000e6d4 <Computer::rdmsr(unsigned int)>
c000eaf6:	53                   	push   ebx
c000eaf7:	83 e0 02             	and    eax,0x2
c000eafa:	50                   	push   eax
c000eafb:	68 e1 00 00 00       	push   0xe1
c000eb00:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c000eb06:	e8 f5 fb ff ff       	call   c000e700 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb0b:	83 c4 20             	add    esp,0x20
c000eb0e:	e8 21 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb13:	e8 58 66 01 00       	call   c0025170 <idleCommon()>
c000eb18:	eb f4                	jmp    c000eb0e <idleFunction(void*)+0x4d>
c000eb1a:	fb                   	sti    
c000eb1b:	f4                   	hlt    
c000eb1c:	e8 4f 66 01 00       	call   c0025170 <idleCommon()>
c000eb21:	eb f7                	jmp    c000eb1a <idleFunction(void*)+0x59>
c000eb23:	90                   	nop

c000eb24 <IDTEntry::IDTEntry(bool)>:
c000eb24:	83 ec 04             	sub    esp,0x4
c000eb27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb2b:	88 04 24             	mov    BYTE PTR [esp],al
c000eb2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb32:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb3c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb44:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb47:	83 e2 f0             	and    edx,0xfffffff0
c000eb4a:	83 ca 0e             	or     edx,0xe
c000eb4d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb54:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb57:	83 e2 ef             	and    edx,0xffffffef
c000eb5a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb5d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb61:	74 04                	je     c000eb67 <IDTEntry::IDTEntry(bool)+0x43>
c000eb63:	b2 03                	mov    dl,0x3
c000eb65:	eb 02                	jmp    c000eb69 <IDTEntry::IDTEntry(bool)+0x45>
c000eb67:	b2 00                	mov    dl,0x0
c000eb69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6d:	83 e2 03             	and    edx,0x3
c000eb70:	88 d1                	mov    cl,dl
c000eb72:	c1 e1 05             	shl    ecx,0x5
c000eb75:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb78:	83 e2 9f             	and    edx,0xffffff9f
c000eb7b:	09 ca                	or     edx,ecx
c000eb7d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb84:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb87:	83 ca 80             	or     edx,0xffffff80
c000eb8a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb8d:	90                   	nop
c000eb8e:	83 c4 04             	add    esp,0x4
c000eb91:	c3                   	ret    

c000eb92 <IDTEntry::setOffset(unsigned int)>:
c000eb92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb9a:	66 89 02             	mov    WORD PTR [edx],ax
c000eb9d:	c1 e8 10             	shr    eax,0x10
c000eba0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eba4:	c3                   	ret    
c000eba5:	90                   	nop

c000eba6 <IDT::IDT()>:
c000eba6:	90                   	nop
c000eba7:	c3                   	ret    

c000eba8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebac:	83 c0 30             	add    eax,0x30
c000ebaf:	c3                   	ret    

c000ebb0 <IDT::addEntry(IDTEntry, int)>:
c000ebb0:	53                   	push   ebx
c000ebb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebc1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebc4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebc8:	5b                   	pop    ebx
c000ebc9:	c3                   	ret    

c000ebca <IDT::addEntry(int, void (*)(), bool)>:
c000ebca:	53                   	push   ebx
c000ebcb:	83 ec 10             	sub    esp,0x10
c000ebce:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebd3:	50                   	push   eax
c000ebd4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebd8:	53                   	push   ebx
c000ebd9:	e8 46 ff ff ff       	call   c000eb24 <IDTEntry::IDTEntry(bool)>
c000ebde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebe2:	53                   	push   ebx
c000ebe3:	e8 aa ff ff ff       	call   c000eb92 <IDTEntry::setOffset(unsigned int)>
c000ebe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebf0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebf8:	e8 b3 ff ff ff       	call   c000ebb0 <IDT::addEntry(IDTEntry, int)>
c000ebfd:	83 c4 30             	add    esp,0x30
c000ec00:	5b                   	pop    ebx
c000ec01:	c3                   	ret    

c000ec02 <IDT::flush()>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	66 c7 05 78 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a478,0x7ff
c000ec0f:	a3 7a a4 02 c0       	mov    ds:0xc002a47a,eax
c000ec14:	0f 01 1d 78 a4 02 c0 	lidtd  ds:0xc002a478
c000ec1b:	c3                   	ret    

c000ec1c <IDT::setup()>:
c000ec1c:	57                   	push   edi
c000ec1d:	56                   	push   esi
c000ec1e:	53                   	push   ebx
c000ec1f:	83 ec 10             	sub    esp,0x10
c000ec22:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec26:	6a 00                	push   0x0
c000ec28:	68 1f 04 00 c0       	push   0xc000041f
c000ec2d:	6a 00                	push   0x0
c000ec2f:	53                   	push   ebx
c000ec30:	e8 95 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec35:	6a 00                	push   0x0
c000ec37:	68 2f 04 00 c0       	push   0xc000042f
c000ec3c:	6a 01                	push   0x1
c000ec3e:	53                   	push   ebx
c000ec3f:	e8 86 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec44:	83 c4 20             	add    esp,0x20
c000ec47:	6a 00                	push   0x0
c000ec49:	68 39 04 00 c0       	push   0xc0000439
c000ec4e:	6a 02                	push   0x2
c000ec50:	53                   	push   ebx
c000ec51:	e8 74 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec56:	6a 00                	push   0x0
c000ec58:	68 43 04 00 c0       	push   0xc0000443
c000ec5d:	6a 03                	push   0x3
c000ec5f:	53                   	push   ebx
c000ec60:	e8 65 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec65:	83 c4 20             	add    esp,0x20
c000ec68:	6a 00                	push   0x0
c000ec6a:	68 4d 04 00 c0       	push   0xc000044d
c000ec6f:	6a 04                	push   0x4
c000ec71:	53                   	push   ebx
c000ec72:	e8 53 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec77:	6a 00                	push   0x0
c000ec79:	68 57 04 00 c0       	push   0xc0000457
c000ec7e:	6a 05                	push   0x5
c000ec80:	53                   	push   ebx
c000ec81:	e8 44 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec86:	83 c4 20             	add    esp,0x20
c000ec89:	6a 00                	push   0x0
c000ec8b:	68 61 04 00 c0       	push   0xc0000461
c000ec90:	6a 06                	push   0x6
c000ec92:	53                   	push   ebx
c000ec93:	e8 32 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ec98:	6a 00                	push   0x0
c000ec9a:	68 6b 04 00 c0       	push   0xc000046b
c000ec9f:	6a 07                	push   0x7
c000eca1:	53                   	push   ebx
c000eca2:	e8 23 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eca7:	83 c4 20             	add    esp,0x20
c000ecaa:	6a 00                	push   0x0
c000ecac:	68 75 04 00 c0       	push   0xc0000475
c000ecb1:	6a 08                	push   0x8
c000ecb3:	53                   	push   ebx
c000ecb4:	e8 11 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ecb9:	6a 00                	push   0x0
c000ecbb:	68 7d 04 00 c0       	push   0xc000047d
c000ecc0:	6a 09                	push   0x9
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 02 ff ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ecc8:	83 c4 20             	add    esp,0x20
c000eccb:	6a 00                	push   0x0
c000eccd:	68 87 04 00 c0       	push   0xc0000487
c000ecd2:	6a 0a                	push   0xa
c000ecd4:	53                   	push   ebx
c000ecd5:	e8 f0 fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ecda:	6a 00                	push   0x0
c000ecdc:	68 8f 04 00 c0       	push   0xc000048f
c000ece1:	6a 0b                	push   0xb
c000ece3:	53                   	push   ebx
c000ece4:	e8 e1 fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ece9:	83 c4 20             	add    esp,0x20
c000ecec:	6a 00                	push   0x0
c000ecee:	68 97 04 00 c0       	push   0xc0000497
c000ecf3:	6a 0c                	push   0xc
c000ecf5:	53                   	push   ebx
c000ecf6:	e8 cf fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ecfb:	6a 00                	push   0x0
c000ecfd:	68 9f 04 00 c0       	push   0xc000049f
c000ed02:	6a 0d                	push   0xd
c000ed04:	53                   	push   ebx
c000ed05:	e8 c0 fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed0a:	83 c4 20             	add    esp,0x20
c000ed0d:	6a 00                	push   0x0
c000ed0f:	68 a7 04 00 c0       	push   0xc00004a7
c000ed14:	6a 0e                	push   0xe
c000ed16:	53                   	push   ebx
c000ed17:	e8 ae fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed1c:	6a 00                	push   0x0
c000ed1e:	68 af 04 00 c0       	push   0xc00004af
c000ed23:	6a 0f                	push   0xf
c000ed25:	53                   	push   ebx
c000ed26:	e8 9f fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed2b:	83 c4 20             	add    esp,0x20
c000ed2e:	6a 00                	push   0x0
c000ed30:	68 b9 04 00 c0       	push   0xc00004b9
c000ed35:	6a 10                	push   0x10
c000ed37:	53                   	push   ebx
c000ed38:	e8 8d fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed3d:	6a 00                	push   0x0
c000ed3f:	68 c3 04 00 c0       	push   0xc00004c3
c000ed44:	6a 11                	push   0x11
c000ed46:	53                   	push   ebx
c000ed47:	e8 7e fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed4c:	83 c4 20             	add    esp,0x20
c000ed4f:	6a 00                	push   0x0
c000ed51:	68 cd 04 00 c0       	push   0xc00004cd
c000ed56:	6a 12                	push   0x12
c000ed58:	53                   	push   ebx
c000ed59:	e8 6c fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed5e:	6a 01                	push   0x1
c000ed60:	68 67 05 00 c0       	push   0xc0000567
c000ed65:	6a 60                	push   0x60
c000ed67:	53                   	push   ebx
c000ed68:	e8 5d fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed6d:	83 c4 20             	add    esp,0x20
c000ed70:	6a 00                	push   0x0
c000ed72:	68 6e 05 00 c0       	push   0xc000056e
c000ed77:	6a 20                	push   0x20
c000ed79:	53                   	push   ebx
c000ed7a:	e8 4b fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	68 59 05 00 c0       	push   0xc0000559
c000ed86:	6a 21                	push   0x21
c000ed88:	53                   	push   ebx
c000ed89:	e8 3c fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ed8e:	83 c4 20             	add    esp,0x20
c000ed91:	6a 00                	push   0x0
c000ed93:	68 60 05 00 c0       	push   0xc0000560
c000ed98:	6a 22                	push   0x22
c000ed9a:	53                   	push   ebx
c000ed9b:	e8 2a fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eda0:	6a 00                	push   0x0
c000eda2:	68 d7 04 00 c0       	push   0xc00004d7
c000eda7:	6a 23                	push   0x23
c000eda9:	53                   	push   ebx
c000edaa:	e8 1b fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000edaf:	83 c4 20             	add    esp,0x20
c000edb2:	6a 00                	push   0x0
c000edb4:	68 e1 04 00 c0       	push   0xc00004e1
c000edb9:	6a 24                	push   0x24
c000edbb:	53                   	push   ebx
c000edbc:	e8 09 fe ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000edc1:	6a 00                	push   0x0
c000edc3:	68 eb 04 00 c0       	push   0xc00004eb
c000edc8:	6a 25                	push   0x25
c000edca:	53                   	push   ebx
c000edcb:	e8 fa fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000edd0:	83 c4 20             	add    esp,0x20
c000edd3:	6a 00                	push   0x0
c000edd5:	68 f5 04 00 c0       	push   0xc00004f5
c000edda:	6a 26                	push   0x26
c000eddc:	53                   	push   ebx
c000eddd:	e8 e8 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ede2:	6a 00                	push   0x0
c000ede4:	68 ff 04 00 c0       	push   0xc00004ff
c000ede9:	6a 27                	push   0x27
c000edeb:	53                   	push   ebx
c000edec:	e8 d9 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000edf1:	83 c4 20             	add    esp,0x20
c000edf4:	6a 00                	push   0x0
c000edf6:	68 09 05 00 c0       	push   0xc0000509
c000edfb:	6a 28                	push   0x28
c000edfd:	53                   	push   ebx
c000edfe:	e8 c7 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee03:	6a 00                	push   0x0
c000ee05:	68 13 05 00 c0       	push   0xc0000513
c000ee0a:	6a 29                	push   0x29
c000ee0c:	53                   	push   ebx
c000ee0d:	e8 b8 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee12:	83 c4 20             	add    esp,0x20
c000ee15:	6a 00                	push   0x0
c000ee17:	68 1d 05 00 c0       	push   0xc000051d
c000ee1c:	6a 2a                	push   0x2a
c000ee1e:	53                   	push   ebx
c000ee1f:	e8 a6 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee24:	6a 00                	push   0x0
c000ee26:	68 27 05 00 c0       	push   0xc0000527
c000ee2b:	6a 2b                	push   0x2b
c000ee2d:	53                   	push   ebx
c000ee2e:	e8 97 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee33:	83 c4 20             	add    esp,0x20
c000ee36:	6a 00                	push   0x0
c000ee38:	68 31 05 00 c0       	push   0xc0000531
c000ee3d:	6a 2c                	push   0x2c
c000ee3f:	53                   	push   ebx
c000ee40:	e8 85 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee45:	6a 00                	push   0x0
c000ee47:	68 3b 05 00 c0       	push   0xc000053b
c000ee4c:	6a 2d                	push   0x2d
c000ee4e:	53                   	push   ebx
c000ee4f:	e8 76 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee54:	83 c4 20             	add    esp,0x20
c000ee57:	6a 00                	push   0x0
c000ee59:	68 45 05 00 c0       	push   0xc0000545
c000ee5e:	6a 2e                	push   0x2e
c000ee60:	53                   	push   ebx
c000ee61:	e8 64 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee66:	6a 00                	push   0x0
c000ee68:	68 4f 05 00 c0       	push   0xc000054f
c000ee6d:	6a 2f                	push   0x2f
c000ee6f:	53                   	push   ebx
c000ee70:	e8 55 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee75:	83 c4 20             	add    esp,0x20
c000ee78:	6a 00                	push   0x0
c000ee7a:	68 94 05 00 c0       	push   0xc0000594
c000ee7f:	6a 30                	push   0x30
c000ee81:	53                   	push   ebx
c000ee82:	e8 43 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee87:	6a 00                	push   0x0
c000ee89:	68 9e 05 00 c0       	push   0xc000059e
c000ee8e:	6a 31                	push   0x31
c000ee90:	53                   	push   ebx
c000ee91:	e8 34 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000ee96:	83 c4 20             	add    esp,0x20
c000ee99:	6a 00                	push   0x0
c000ee9b:	68 a8 05 00 c0       	push   0xc00005a8
c000eea0:	6a 32                	push   0x32
c000eea2:	53                   	push   ebx
c000eea3:	e8 22 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eea8:	6a 00                	push   0x0
c000eeaa:	68 b2 05 00 c0       	push   0xc00005b2
c000eeaf:	6a 33                	push   0x33
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 13 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eeb7:	83 c4 20             	add    esp,0x20
c000eeba:	6a 00                	push   0x0
c000eebc:	68 bc 05 00 c0       	push   0xc00005bc
c000eec1:	6a 34                	push   0x34
c000eec3:	53                   	push   ebx
c000eec4:	e8 01 fd ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eec9:	6a 00                	push   0x0
c000eecb:	68 c6 05 00 c0       	push   0xc00005c6
c000eed0:	6a 35                	push   0x35
c000eed2:	53                   	push   ebx
c000eed3:	e8 f2 fc ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eed8:	83 c4 20             	add    esp,0x20
c000eedb:	6a 00                	push   0x0
c000eedd:	68 d0 05 00 c0       	push   0xc00005d0
c000eee2:	6a 36                	push   0x36
c000eee4:	53                   	push   ebx
c000eee5:	e8 e0 fc ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eeea:	6a 00                	push   0x0
c000eeec:	68 da 05 00 c0       	push   0xc00005da
c000eef1:	6a 37                	push   0x37
c000eef3:	53                   	push   ebx
c000eef4:	e8 d1 fc ff ff       	call   c000ebca <IDT::addEntry(int, void (*)(), bool)>
c000eef9:	83 c4 20             	add    esp,0x20
c000eefc:	e8 fe 24 00 00       	call   c00113ff <Virt::getAKernelVAS()>
c000ef01:	52                   	push   edx
c000ef02:	6a 03                	push   0x3
c000ef04:	6a 02                	push   0x2
c000ef06:	50                   	push   eax
c000ef07:	e8 24 2b 00 00       	call   c0011a30 <VAS::allocatePages(int, int)>
c000ef0c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef13:	89 c6                	mov    esi,eax
c000ef15:	e8 4a 32 00 00       	call   c0012164 <operator new(unsigned long)>
c000ef1a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef23:	89 c7                	mov    edi,eax
c000ef25:	e8 b6 1c 00 00       	call   c0010be0 <TSS::TSS()>
c000ef2a:	83 c4 0c             	add    esp,0xc
c000ef2d:	68 75 04 00 c0       	push   0xc0000475
c000ef32:	56                   	push   esi
c000ef33:	57                   	push   edi
c000ef34:	e8 e7 1c 00 00       	call   c0010c20 <TSS::setup(unsigned long, unsigned long)>
c000ef39:	59                   	pop    ecx
c000ef3a:	89 c6                	mov    esi,eax
c000ef3c:	5f                   	pop    edi
c000ef3d:	6a 00                	push   0x0
c000ef3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef43:	50                   	push   eax
c000ef44:	e8 db fb ff ff       	call   c000eb24 <IDTEntry::IDTEntry(bool)>
c000ef49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef4d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef52:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef59:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef63:	80 ce 05             	or     dh,0x5
c000ef66:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef71:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef77:	e8 86 fc ff ff       	call   c000ec02 <IDT::flush()>
c000ef7c:	83 c4 20             	add    esp,0x20
c000ef7f:	5b                   	pop    ebx
c000ef80:	5e                   	pop    esi
c000ef81:	5f                   	pop    edi
c000ef82:	c3                   	ret    

c000ef83 <sbrk>:
c000ef83:	55                   	push   ebp
c000ef84:	57                   	push   edi
c000ef85:	56                   	push   esi
c000ef86:	53                   	push   ebx
c000ef87:	83 ec 1c             	sub    esp,0x1c
c000ef8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef8e:	85 c0                	test   eax,eax
c000ef90:	74 3e                	je     c000efd0 <sbrk+0x4d>
c000ef92:	78 43                	js     c000efd7 <sbrk+0x54>
c000ef94:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c000ef9a:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000efa0:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000efa6:	83 e2 01             	and    edx,0x1
c000efa9:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000efad:	8b 0d fc 93 02 c0    	mov    ecx,DWORD PTR ds:0xc00293fc
c000efb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000efb7:	05 ff 0f 00 00       	add    eax,0xfff
c000efbc:	89 c2                	mov    edx,eax
c000efbe:	78 2f                	js     c000efef <sbrk+0x6c>
c000efc0:	c1 fa 0c             	sar    edx,0xc
c000efc3:	89 d7                	mov    edi,edx
c000efc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000efc9:	be 00 00 00 00       	mov    esi,0x0
c000efce:	eb 36                	jmp    c000f006 <sbrk+0x83>
c000efd0:	a1 fc 93 02 c0       	mov    eax,ds:0xc00293fc
c000efd5:	eb 74                	jmp    c000f04b <sbrk+0xc8>
c000efd7:	83 ec 08             	sub    esp,0x8
c000efda:	50                   	push   eax
c000efdb:	68 50 6b 02 c0       	push   0xc0026b50
c000efe0:	e8 6e 32 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000efe5:	83 c4 10             	add    esp,0x10
c000efe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efed:	eb 5c                	jmp    c000f04b <sbrk+0xc8>
c000efef:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000eff5:	eb c9                	jmp    c000efc0 <sbrk+0x3d>
c000eff7:	81 05 fc 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293fc,0x1000
c000f001:	46                   	inc    esi
c000f002:	39 f7                	cmp    edi,esi
c000f004:	74 34                	je     c000f03a <sbrk+0xb7>
c000f006:	e8 f4 23 00 00       	call   c00113ff <Virt::getAKernelVAS()>
c000f00b:	89 c3                	mov    ebx,eax
c000f00d:	8b 2d fc 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293fc
c000f013:	e8 be 06 00 00       	call   c000f6d6 <Phys::allocatePage()>
c000f018:	68 01 04 00 00       	push   0x401
c000f01d:	55                   	push   ebp
c000f01e:	50                   	push   eax
c000f01f:	53                   	push   ebx
c000f020:	e8 0b 29 00 00       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f025:	83 c4 10             	add    esp,0x10
c000f028:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f02d:	74 c8                	je     c000eff7 <sbrk+0x74>
c000f02f:	8b 1d fc 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293fc
c000f035:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f038:	eb bd                	jmp    c000eff7 <sbrk+0x74>
c000f03a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f03f:	75 12                	jne    c000f053 <sbrk+0xd0>
c000f041:	0f 20 d8             	mov    eax,cr3
c000f044:	0f 22 d8             	mov    cr3,eax
c000f047:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04b:	83 c4 1c             	add    esp,0x1c
c000f04e:	5b                   	pop    ebx
c000f04f:	5e                   	pop    esi
c000f050:	5f                   	pop    edi
c000f051:	5d                   	pop    ebp
c000f052:	c3                   	ret    
c000f053:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f057:	89 cb                	mov    ebx,ecx
c000f059:	c1 eb 0a             	shr    ebx,0xa
c000f05c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f062:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f06c:	c1 e0 0c             	shl    eax,0xc
c000f06f:	01 c8                	add    eax,ecx
c000f071:	c1 e8 0a             	shr    eax,0xa
c000f074:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f079:	2d 00 00 40 00       	sub    eax,0x400000
c000f07e:	39 c3                	cmp    ebx,eax
c000f080:	77 c5                	ja     c000f047 <sbrk+0xc4>
c000f082:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f085:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f08b:	39 d8                	cmp    eax,ebx
c000f08d:	73 f3                	jae    c000f082 <sbrk+0xff>
c000f08f:	eb b6                	jmp    c000f047 <sbrk+0xc4>

c000f091 <mmap>:
c000f091:	83 ec 18             	sub    esp,0x18
c000f094:	68 80 6b 02 c0       	push   0xc0026b80
c000f099:	e8 33 99 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f09e:	b8 00 00 00 00       	mov    eax,0x0
c000f0a3:	83 c4 1c             	add    esp,0x1c
c000f0a6:	c3                   	ret    

c000f0a7 <munmap>:
c000f0a7:	83 ec 18             	sub    esp,0x18
c000f0aa:	68 85 6b 02 c0       	push   0xc0026b85
c000f0af:	e8 1d 99 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f0b4:	b8 00 00 00 00       	mov    eax,0x0
c000f0b9:	83 c4 1c             	add    esp,0x1c
c000f0bc:	c3                   	ret    

c000f0bd <liballoc_lock()>:
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	e8 55 c8 00 00       	call   c001b91a <lockScheduler()>
c000f0c5:	b8 00 00 00 00       	mov    eax,0x0
c000f0ca:	83 c4 0c             	add    esp,0xc
c000f0cd:	c3                   	ret    

c000f0ce <liballoc_unlock()>:
c000f0ce:	83 ec 0c             	sub    esp,0xc
c000f0d1:	e8 46 c8 00 00       	call   c001b91c <unlockScheduler()>
c000f0d6:	b8 00 00 00 00       	mov    eax,0x0
c000f0db:	83 c4 0c             	add    esp,0xc
c000f0de:	c3                   	ret    

c000f0df <liballoc_alloc(int)>:
c000f0df:	83 ec 0c             	sub    esp,0xc
c000f0e2:	e8 18 23 00 00       	call   c00113ff <Virt::getAKernelVAS()>
c000f0e7:	83 ec 04             	sub    esp,0x4
c000f0ea:	6a 01                	push   0x1
c000f0ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0f0:	50                   	push   eax
c000f0f1:	e8 3a 29 00 00       	call   c0011a30 <VAS::allocatePages(int, int)>
c000f0f6:	83 c4 1c             	add    esp,0x1c
c000f0f9:	c3                   	ret    

c000f0fa <liballoc_free(void*, int)>:
c000f0fa:	83 ec 0c             	sub    esp,0xc
c000f0fd:	e8 fd 22 00 00       	call   c00113ff <Virt::getAKernelVAS()>
c000f102:	83 ec 08             	sub    esp,0x8
c000f105:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f109:	50                   	push   eax
c000f10a:	e8 dd 25 00 00       	call   c00116ec <VAS::freeAllocatedPages(unsigned long)>
c000f10f:	b8 00 00 00 00       	mov    eax,0x0
c000f114:	83 c4 1c             	add    esp,0x1c
c000f117:	c3                   	ret    

c000f118 <realloc>:
c000f118:	83 ec 14             	sub    esp,0x14
c000f11b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f11f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f123:	e8 ce 22 ff ff       	call   c00013f6 <dlrealloc>
c000f128:	83 c4 1c             	add    esp,0x1c
c000f12b:	c3                   	ret    

c000f12c <malloc>:
c000f12c:	83 ec 18             	sub    esp,0x18
c000f12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f133:	e8 81 1d ff ff       	call   c0000eb9 <dlmalloc>
c000f138:	83 c4 1c             	add    esp,0x1c
c000f13b:	c3                   	ret    

c000f13c <free>:
c000f13c:	83 ec 18             	sub    esp,0x18
c000f13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f143:	e8 16 1a ff ff       	call   c0000b5e <dlfree>
c000f148:	83 c4 1c             	add    esp,0x1c
c000f14b:	c3                   	ret    

c000f14c <rfree>:
c000f14c:	83 ec 18             	sub    esp,0x18
c000f14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f153:	e8 e4 ff ff ff       	call   c000f13c <free>
c000f158:	83 c4 1c             	add    esp,0x1c
c000f15b:	c3                   	ret    

c000f15c <calloc>:
c000f15c:	56                   	push   esi
c000f15d:	53                   	push   ebx
c000f15e:	83 ec 10             	sub    esp,0x10
c000f161:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f165:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f16a:	53                   	push   ebx
c000f16b:	e8 bc ff ff ff       	call   c000f12c <malloc>
c000f170:	89 c6                	mov    esi,eax
c000f172:	83 c4 0c             	add    esp,0xc
c000f175:	53                   	push   ebx
c000f176:	6a 00                	push   0x0
c000f178:	50                   	push   eax
c000f179:	e8 ff 14 ff ff       	call   c000067d <memset>
c000f17e:	89 f0                	mov    eax,esi
c000f180:	83 c4 14             	add    esp,0x14
c000f183:	5b                   	pop    ebx
c000f184:	5e                   	pop    esi
c000f185:	c3                   	ret    

c000f186 <hwTextMode_loadInData(VgaText*)>:
c000f186:	57                   	push   edi
c000f187:	56                   	push   esi
c000f188:	53                   	push   ebx
c000f189:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f18d:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f193:	85 c0                	test   eax,eax
c000f195:	7e 30                	jle    c000f1c7 <hwTextMode_loadInData(VgaText*)+0x41>
c000f197:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f19a:	31 f6                	xor    esi,esi
c000f19c:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f19f:	31 c0                	xor    eax,eax
c000f1a1:	c1 e1 05             	shl    ecx,0x5
c000f1a4:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1aa:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1ae:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1b2:	40                   	inc    eax
c000f1b3:	83 f8 50             	cmp    eax,0x50
c000f1b6:	75 f2                	jne    c000f1aa <hwTextMode_loadInData(VgaText*)+0x24>
c000f1b8:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1be:	46                   	inc    esi
c000f1bf:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1c5:	7f d5                	jg     c000f19c <hwTextMode_loadInData(VgaText*)+0x16>
c000f1c7:	5b                   	pop    ebx
c000f1c8:	5e                   	pop    esi
c000f1c9:	5f                   	pop    edi
c000f1ca:	c3                   	ret    

c000f1cb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1cb:	56                   	push   esi
c000f1cc:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1d1:	53                   	push   ebx
c000f1d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1da:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1e0:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f1e6:	c1 e0 04             	shl    eax,0x4
c000f1e9:	83 e6 0f             	and    esi,0xf
c000f1ec:	0f b6 c0             	movzx  eax,al
c000f1ef:	41                   	inc    ecx
c000f1f0:	09 f0                	or     eax,esi
c000f1f2:	83 c2 02             	add    edx,0x2
c000f1f5:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f1f9:	c1 e0 08             	shl    eax,0x8
c000f1fc:	09 f0                	or     eax,esi
c000f1fe:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f202:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f208:	75 d0                	jne    c000f1da <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f20a:	5b                   	pop    ebx
c000f20b:	5e                   	pop    esi
c000f20c:	c3                   	ret    

c000f20d <hwTextMode_showCursor(VgaText*, bool)>:
c000f20d:	56                   	push   esi
c000f20e:	53                   	push   ebx
c000f20f:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f214:	74 38                	je     c000f24e <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f216:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f21b:	b0 0a                	mov    al,0xa
c000f21d:	89 da                	mov    edx,ebx
c000f21f:	ee                   	out    dx,al
c000f220:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f225:	89 ca                	mov    edx,ecx
c000f227:	ec                   	in     al,dx
c000f228:	b2 0f                	mov    dl,0xf
c000f22a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f22e:	83 e0 c0             	and    eax,0xffffffc0
c000f231:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f237:	09 d0                	or     eax,edx
c000f239:	89 ca                	mov    edx,ecx
c000f23b:	ee                   	out    dx,al
c000f23c:	b0 0b                	mov    al,0xb
c000f23e:	89 da                	mov    edx,ebx
c000f240:	ee                   	out    dx,al
c000f241:	89 ca                	mov    edx,ecx
c000f243:	ec                   	in     al,dx
c000f244:	83 e0 e0             	and    eax,0xffffffe0
c000f247:	83 c8 0f             	or     eax,0xf
c000f24a:	ee                   	out    dx,al
c000f24b:	5b                   	pop    ebx
c000f24c:	5e                   	pop    esi
c000f24d:	c3                   	ret    
c000f24e:	b0 0a                	mov    al,0xa
c000f250:	ba d4 03 00 00       	mov    edx,0x3d4
c000f255:	ee                   	out    dx,al
c000f256:	b0 20                	mov    al,0x20
c000f258:	ba d5 03 00 00       	mov    edx,0x3d5
c000f25d:	ee                   	out    dx,al
c000f25e:	5b                   	pop    ebx
c000f25f:	5e                   	pop    esi
c000f260:	c3                   	ret    

c000f261 <hwTextMode_update(VgaText*)>:
c000f261:	c3                   	ret    

c000f262 <hwTextMode_updateCursor(VgaText*)>:
c000f262:	56                   	push   esi
c000f263:	b9 19 00 00 00       	mov    ecx,0x19
c000f268:	53                   	push   ebx
c000f269:	be d4 03 00 00       	mov    esi,0x3d4
c000f26e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f272:	89 f2                	mov    edx,esi
c000f274:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f27a:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f280:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f283:	c1 e1 04             	shl    ecx,0x4
c000f286:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f28c:	b0 0f                	mov    al,0xf
c000f28e:	ee                   	out    dx,al
c000f28f:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f294:	88 c8                	mov    al,cl
c000f296:	89 da                	mov    edx,ebx
c000f298:	ee                   	out    dx,al
c000f299:	b0 0e                	mov    al,0xe
c000f29b:	89 f2                	mov    edx,esi
c000f29d:	ee                   	out    dx,al
c000f29e:	89 c8                	mov    eax,ecx
c000f2a0:	89 da                	mov    edx,ebx
c000f2a2:	66 c1 e8 08          	shr    ax,0x8
c000f2a6:	ee                   	out    dx,al
c000f2a7:	5b                   	pop    ebx
c000f2a8:	5e                   	pop    esi
c000f2a9:	c3                   	ret    

c000f2aa <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2aa:	ba da 03 00 00       	mov    edx,0x3da
c000f2af:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2b4:	75 18                	jne    c000f2ce <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2b6:	ec                   	in     al,dx
c000f2b7:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2bc:	b0 30                	mov    al,0x30
c000f2be:	89 ca                	mov    edx,ecx
c000f2c0:	ee                   	out    dx,al
c000f2c1:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2c6:	ec                   	in     al,dx
c000f2c7:	83 c8 08             	or     eax,0x8
c000f2ca:	89 ca                	mov    edx,ecx
c000f2cc:	ee                   	out    dx,al
c000f2cd:	c3                   	ret    
c000f2ce:	ec                   	in     al,dx
c000f2cf:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2d4:	b0 30                	mov    al,0x30
c000f2d6:	89 ca                	mov    edx,ecx
c000f2d8:	ee                   	out    dx,al
c000f2d9:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2de:	ec                   	in     al,dx
c000f2df:	83 e0 f7             	and    eax,0xfffffff7
c000f2e2:	89 ca                	mov    edx,ecx
c000f2e4:	ee                   	out    dx,al
c000f2e5:	c3                   	ret    

c000f2e6 <hwTextMode_scrollScreen(VgaText*)>:
c000f2e6:	55                   	push   ebp
c000f2e7:	bd 02 00 00 00       	mov    ebp,0x2
c000f2ec:	57                   	push   edi
c000f2ed:	56                   	push   esi
c000f2ee:	53                   	push   ebx
c000f2ef:	83 ec 1c             	sub    esp,0x1c
c000f2f2:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f2fa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2fe:	31 c0                	xor    eax,eax
c000f300:	eb 0b                	jmp    c000f30d <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f302:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f308:	74 57                	je     c000f361 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f30a:	43                   	inc    ebx
c000f30b:	89 f0                	mov    eax,esi
c000f30d:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f313:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f319:	88 13                	mov    BYTE PTR [ebx],dl
c000f31b:	8d 70 01             	lea    esi,[eax+0x1]
c000f31e:	83 fd 18             	cmp    ebp,0x18
c000f321:	75 df                	jne    c000f302 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f323:	a8 01                	test   al,0x1
c000f325:	75 13                	jne    c000f33a <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f327:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f32a:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f330:	75 d8                	jne    c000f30a <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f332:	83 c4 1c             	add    esp,0x1c
c000f335:	5b                   	pop    ebx
c000f336:	5e                   	pop    esi
c000f337:	5f                   	pop    edi
c000f338:	5d                   	pop    ebp
c000f339:	c3                   	ret    
c000f33a:	83 ec 08             	sub    esp,0x8
c000f33d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f341:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f348:	50                   	push   eax
c000f349:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f34d:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f354:	50                   	push   eax
c000f355:	e8 66 0b 00 00       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c000f35a:	83 c4 10             	add    esp,0x10
c000f35d:	88 07                	mov    BYTE PTR [edi],al
c000f35f:	eb c9                	jmp    c000f32a <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f361:	45                   	inc    ebp
c000f362:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f36a:	eb 8e                	jmp    c000f2fa <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f36c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f36c:	56                   	push   esi
c000f36d:	53                   	push   ebx
c000f36e:	83 ec 0c             	sub    esp,0xc
c000f371:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f375:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f379:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f37e:	50                   	push   eax
c000f37f:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f384:	50                   	push   eax
c000f385:	e8 36 0b 00 00       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c000f38a:	5a                   	pop    edx
c000f38b:	0f b6 c0             	movzx  eax,al
c000f38e:	59                   	pop    ecx
c000f38f:	50                   	push   eax
c000f390:	89 f0                	mov    eax,esi
c000f392:	0f be f0             	movsx  esi,al
c000f395:	56                   	push   esi
c000f396:	e8 cb 0b 00 00       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c000f39b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f39f:	ba 19 00 00 00       	mov    edx,0x19
c000f3a4:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3aa:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3ad:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3b0:	c1 e1 04             	shl    ecx,0x4
c000f3b3:	c1 e2 04             	shl    edx,0x4
c000f3b6:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3ba:	01 ca                	add    edx,ecx
c000f3bc:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3c4:	83 c4 14             	add    esp,0x14
c000f3c7:	5b                   	pop    ebx
c000f3c8:	5e                   	pop    esi
c000f3c9:	c3                   	ret    

c000f3ca <setupTextMode()>:
c000f3ca:	c7 05 18 a5 02 c0 aa f2 00 c0 	mov    DWORD PTR ds:0xc002a518,0xc000f2aa
c000f3d4:	c7 05 04 a5 02 c0 86 f1 00 c0 	mov    DWORD PTR ds:0xc002a504,0xc000f186
c000f3de:	c7 05 00 a5 02 c0 cb f1 00 c0 	mov    DWORD PTR ds:0xc002a500,0xc000f1cb
c000f3e8:	c7 05 0c a5 02 c0 e6 f2 00 c0 	mov    DWORD PTR ds:0xc002a50c,0xc000f2e6
c000f3f2:	c7 05 14 a5 02 c0 0d f2 00 c0 	mov    DWORD PTR ds:0xc002a514,0xc000f20d
c000f3fc:	c7 05 08 a5 02 c0 61 f2 00 c0 	mov    DWORD PTR ds:0xc002a508,0xc000f261
c000f406:	c7 05 10 a5 02 c0 62 f2 00 c0 	mov    DWORD PTR ds:0xc002a510,0xc000f262
c000f410:	c7 05 1c a5 02 c0 6c f3 00 c0 	mov    DWORD PTR ds:0xc002a51c,0xc000f36c
c000f41a:	c3                   	ret    

c000f41b <kernel_main>:
c000f41b:	57                   	push   edi
c000f41c:	bf f9 03 00 00       	mov    edi,0x3f9
c000f421:	56                   	push   esi
c000f422:	31 f6                	xor    esi,esi
c000f424:	53                   	push   ebx
c000f425:	83 ec 10             	sub    esp,0x10
c000f428:	e8 ed 08 00 00       	call   c000fd1a <installVgaTextImplementation()>
c000f42d:	e8 98 ff ff ff       	call   c000f3ca <setupTextMode()>
c000f432:	89 f0                	mov    eax,esi
c000f434:	89 fa                	mov    edx,edi
c000f436:	ee                   	out    dx,al
c000f437:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f43c:	b0 80                	mov    al,0x80
c000f43e:	89 da                	mov    edx,ebx
c000f440:	ee                   	out    dx,al
c000f441:	b1 03                	mov    cl,0x3
c000f443:	ba f8 03 00 00       	mov    edx,0x3f8
c000f448:	88 c8                	mov    al,cl
c000f44a:	ee                   	out    dx,al
c000f44b:	89 f0                	mov    eax,esi
c000f44d:	89 fa                	mov    edx,edi
c000f44f:	ee                   	out    dx,al
c000f450:	88 c8                	mov    al,cl
c000f452:	89 da                	mov    edx,ebx
c000f454:	ee                   	out    dx,al
c000f455:	b0 c7                	mov    al,0xc7
c000f457:	ba fa 03 00 00       	mov    edx,0x3fa
c000f45c:	ee                   	out    dx,al
c000f45d:	b0 0b                	mov    al,0xb
c000f45f:	ba fc 03 00 00       	mov    edx,0x3fc
c000f464:	ee                   	out    dx,al
c000f465:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f46a:	83 ec 0c             	sub    esp,0xc
c000f46d:	05 ff 0f 00 00       	add    eax,0xfff
c000f472:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f477:	50                   	push   eax
c000f478:	e8 59 03 00 00       	call   c000f7d6 <Phys::physicalMemorySetup(unsigned int)>
c000f47d:	e8 fe 1e 00 00       	call   c0011380 <Virt::virtualMemorySetup()>
c000f482:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f491:	75 0e                	jne    c000f4a1 <kernel_main+0x86>
c000f493:	89 d8                	mov    eax,ebx
c000f495:	25 48 03 00 00       	and    eax,0x348
c000f49a:	3d 00 03 00 00       	cmp    eax,0x300
c000f49f:	74 10                	je     c000f4b1 <kernel_main+0x96>
c000f4a1:	83 ec 0c             	sub    esp,0xc
c000f4a4:	68 db 80 02 c0       	push   0xc00280db
c000f4a9:	e8 23 95 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f4ae:	83 c4 10             	add    esp,0x10
c000f4b1:	83 ec 0c             	sub    esp,0xc
c000f4b4:	89 1d 80 a4 02 c0    	mov    DWORD PTR ds:0xc002a480,ebx
c000f4ba:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4be:	53                   	push   ebx
c000f4bf:	e8 66 20 00 00       	call   c001152a <VAS::VAS()>
c000f4c4:	89 1d c4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5c4,ebx
c000f4ca:	e8 51 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4cf:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4d6:	e8 89 2c 00 00       	call   c0012164 <operator new(unsigned long)>
c000f4db:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4de:	89 c6                	mov    esi,eax
c000f4e0:	e8 57 ea ff ff       	call   c000df3c <Computer::Computer()>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	89 35 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,esi
c000f4ed:	6a 00                	push   0x0
c000f4ef:	6a 00                	push   0x0
c000f4f1:	56                   	push   esi
c000f4f2:	e8 7f f2 ff ff       	call   c000e776 <Computer::open(int, int, void*)>
c000f4f7:	83 c4 14             	add    esp,0x14
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 c4 22 00 00       	call   c00117c4 <VAS::~VAS()>
c000f500:	c7 04 24 8c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b8c
c000f507:	e8 c5 94 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f50c:	83 c4 20             	add    esp,0x20
c000f50f:	5b                   	pop    ebx
c000f510:	5e                   	pop    esi
c000f511:	5f                   	pop    edi
c000f512:	c3                   	ret    

c000f513 <Phys::allocateDMA(unsigned long)>:
c000f513:	55                   	push   ebp
c000f514:	31 d2                	xor    edx,edx
c000f516:	57                   	push   edi
c000f517:	31 ed                	xor    ebp,ebp
c000f519:	56                   	push   esi
c000f51a:	31 c9                	xor    ecx,ecx
c000f51c:	53                   	push   ebx
c000f51d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f521:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f527:	31 c0                	xor    eax,eax
c000f529:	c1 ee 0c             	shr    esi,0xc
c000f52c:	eb 17                	jmp    c000f545 <Phys::allocateDMA(unsigned long)+0x32>
c000f52e:	85 c9                	test   ecx,ecx
c000f530:	75 04                	jne    c000f536 <Phys::allocateDMA(unsigned long)+0x23>
c000f532:	89 d5                	mov    ebp,edx
c000f534:	89 d0                	mov    eax,edx
c000f536:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f539:	39 de                	cmp    esi,ebx
c000f53b:	74 20                	je     c000f55d <Phys::allocateDMA(unsigned long)+0x4a>
c000f53d:	42                   	inc    edx
c000f53e:	89 d9                	mov    ecx,ebx
c000f540:	83 fa 2f             	cmp    edx,0x2f
c000f543:	7f 11                	jg     c000f556 <Phys::allocateDMA(unsigned long)+0x43>
c000f545:	80 ba c0 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5b40],0x0
c000f54c:	74 e0                	je     c000f52e <Phys::allocateDMA(unsigned long)+0x1b>
c000f54e:	31 c9                	xor    ecx,ecx
c000f550:	42                   	inc    edx
c000f551:	83 fa 2f             	cmp    edx,0x2f
c000f554:	7e ef                	jle    c000f545 <Phys::allocateDMA(unsigned long)+0x32>
c000f556:	5b                   	pop    ebx
c000f557:	31 c0                	xor    eax,eax
c000f559:	5e                   	pop    esi
c000f55a:	5f                   	pop    edi
c000f55b:	5d                   	pop    ebp
c000f55c:	c3                   	ret    
c000f55d:	8d 14 30             	lea    edx,[eax+esi*1]
c000f560:	89 d7                	mov    edi,edx
c000f562:	4f                   	dec    edi
c000f563:	79 03                	jns    c000f568 <Phys::allocateDMA(unsigned long)+0x55>
c000f565:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f568:	c1 ff 04             	sar    edi,0x4
c000f56b:	89 c2                	mov    edx,eax
c000f56d:	c1 fa 04             	sar    edx,0x4
c000f570:	39 fa                	cmp    edx,edi
c000f572:	75 2f                	jne    c000f5a3 <Phys::allocateDMA(unsigned long)+0x90>
c000f574:	85 db                	test   ebx,ebx
c000f576:	74 1a                	je     c000f592 <Phys::allocateDMA(unsigned long)+0x7f>
c000f578:	be c0 a4 02 c0       	mov    esi,0xc002a4c0
c000f57d:	8d 90 c0 a4 02 c0    	lea    edx,[eax-0x3ffd5b40]
c000f583:	f7 d6                	not    esi
c000f585:	29 c6                	sub    esi,eax
c000f587:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f58a:	42                   	inc    edx
c000f58b:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f58e:	39 d9                	cmp    ecx,ebx
c000f590:	7f f5                	jg     c000f587 <Phys::allocateDMA(unsigned long)+0x74>
c000f592:	85 ff                	test   edi,edi
c000f594:	74 13                	je     c000f5a9 <Phys::allocateDMA(unsigned long)+0x96>
c000f596:	5b                   	pop    ebx
c000f597:	05 50 20 0c 00       	add    eax,0xc2050
c000f59c:	5e                   	pop    esi
c000f59d:	c1 e0 0c             	shl    eax,0xc
c000f5a0:	5f                   	pop    edi
c000f5a1:	5d                   	pop    ebp
c000f5a2:	c3                   	ret    
c000f5a3:	89 ea                	mov    edx,ebp
c000f5a5:	31 c9                	xor    ecx,ecx
c000f5a7:	eb a7                	jmp    c000f550 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5a9:	5b                   	pop    ebx
c000f5aa:	c1 e0 0c             	shl    eax,0xc
c000f5ad:	5e                   	pop    esi
c000f5ae:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5b3:	5f                   	pop    edi
c000f5b4:	5d                   	pop    ebp
c000f5b5:	c3                   	ret    

c000f5b6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5be:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5c4:	c1 e9 0c             	shr    ecx,0xc
c000f5c7:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5cc:	76 25                	jbe    c000f5f3 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5ce:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5d3:	c1 e8 0c             	shr    eax,0xc
c000f5d6:	8d 50 10             	lea    edx,[eax+0x10]
c000f5d9:	85 c9                	test   ecx,ecx
c000f5db:	74 15                	je     c000f5f2 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5dd:	8d 82 c0 a4 02 c0    	lea    eax,[edx-0x3ffd5b40]
c000f5e3:	8d 94 11 c0 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5b40]
c000f5ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f5ed:	40                   	inc    eax
c000f5ee:	39 d0                	cmp    eax,edx
c000f5f0:	75 f8                	jne    c000f5ea <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f5f2:	c3                   	ret    
c000f5f3:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f5f9:	c1 ea 0c             	shr    edx,0xc
c000f5fc:	eb db                	jmp    c000f5d9 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f5fe <Phys::setPageState(unsigned long, bool)>:
c000f5fe:	56                   	push   esi
c000f5ff:	ba 01 00 00 00       	mov    edx,0x1
c000f604:	53                   	push   ebx
c000f605:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000f60b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f60f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f613:	89 c8                	mov    eax,ecx
c000f615:	83 e1 07             	and    ecx,0x7
c000f618:	c1 e8 03             	shr    eax,0x3
c000f61b:	d3 e3                	shl    ebx,cl
c000f61d:	01 c6                	add    esi,eax
c000f61f:	d3 e2                	shl    edx,cl
c000f621:	f7 d2                	not    edx
c000f623:	20 16                	and    BYTE PTR [esi],dl
c000f625:	03 05 00 94 02 c0    	add    eax,DWORD PTR ds:0xc0029400
c000f62b:	08 18                	or     BYTE PTR [eax],bl
c000f62d:	5b                   	pop    ebx
c000f62e:	5e                   	pop    esi
c000f62f:	c3                   	ret    

c000f630 <Phys::getPageState(unsigned long)>:
c000f630:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f634:	8b 15 00 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029400
c000f63a:	89 c8                	mov    eax,ecx
c000f63c:	83 e1 07             	and    ecx,0x7
c000f63f:	c1 e8 03             	shr    eax,0x3
c000f642:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f646:	d3 f8                	sar    eax,cl
c000f648:	83 e0 01             	and    eax,0x1
c000f64b:	c3                   	ret    

c000f64c <Phys::freePage(unsigned long)>:
c000f64c:	53                   	push   ebx
c000f64d:	83 ec 08             	sub    esp,0x8
c000f650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f654:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f65a:	76 57                	jbe    c000f6b3 <Phys::freePage(unsigned long)+0x67>
c000f65c:	c1 eb 0c             	shr    ebx,0xc
c000f65f:	53                   	push   ebx
c000f660:	e8 cb ff ff ff       	call   c000f630 <Phys::getPageState(unsigned long)>
c000f665:	5a                   	pop    edx
c000f666:	84 c0                	test   al,al
c000f668:	74 5b                	je     c000f6c5 <Phys::freePage(unsigned long)+0x79>
c000f66a:	a1 ac a4 02 c0       	mov    eax,ds:0xc002a4ac
c000f66f:	48                   	dec    eax
c000f670:	a3 ac a4 02 c0       	mov    ds:0xc002a4ac,eax
c000f675:	8d 04 80             	lea    eax,[eax+eax*4]
c000f678:	8d 04 80             	lea    eax,[eax+eax*4]
c000f67b:	c1 e0 02             	shl    eax,0x2
c000f67e:	99                   	cdq    
c000f67f:	f7 3d b0 a4 02 c0    	idiv   DWORD PTR ds:0xc002a4b0
c000f685:	39 05 a8 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a8,eax
c000f68b:	75 13                	jne    c000f6a0 <Phys::freePage(unsigned long)+0x54>
c000f68d:	83 ec 08             	sub    esp,0x8
c000f690:	6a 00                	push   0x0
c000f692:	53                   	push   ebx
c000f693:	e8 66 ff ff ff       	call   c000f5fe <Phys::setPageState(unsigned long, bool)>
c000f698:	83 c4 10             	add    esp,0x10
c000f69b:	83 c4 08             	add    esp,0x8
c000f69e:	5b                   	pop    ebx
c000f69f:	c3                   	ret    
c000f6a0:	83 ec 0c             	sub    esp,0xc
c000f6a3:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c000f6a8:	50                   	push   eax
c000f6a9:	e8 00 0a 00 00       	call   c00100ae <VgaText::updateRAMUsageDisplay(int)>
c000f6ae:	83 c4 10             	add    esp,0x10
c000f6b1:	eb da                	jmp    c000f68d <Phys::freePage(unsigned long)+0x41>
c000f6b3:	68 00 10 00 00       	push   0x1000
c000f6b8:	53                   	push   ebx
c000f6b9:	e8 f8 fe ff ff       	call   c000f5b6 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6be:	59                   	pop    ecx
c000f6bf:	5b                   	pop    ebx
c000f6c0:	83 c4 08             	add    esp,0x8
c000f6c3:	5b                   	pop    ebx
c000f6c4:	c3                   	ret    
c000f6c5:	c7 44 24 10 a7 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ba7
c000f6cd:	83 c4 08             	add    esp,0x8
c000f6d0:	5b                   	pop    ebx
c000f6d1:	e9 fb 92 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>

c000f6d6 <Phys::allocatePage()>:
c000f6d6:	56                   	push   esi
c000f6d7:	53                   	push   ebx
c000f6d8:	51                   	push   ecx
c000f6d9:	8b 35 a0 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a4a0
c000f6df:	89 f3                	mov    ebx,esi
c000f6e1:	eb 0a                	jmp    c000f6ed <Phys::allocatePage()+0x17>
c000f6e3:	89 1d a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,ebx
c000f6e9:	39 de                	cmp    esi,ebx
c000f6eb:	74 24                	je     c000f711 <Phys::allocatePage()+0x3b>
c000f6ed:	53                   	push   ebx
c000f6ee:	e8 3d ff ff ff       	call   c000f630 <Phys::getPageState(unsigned long)>
c000f6f3:	5a                   	pop    edx
c000f6f4:	84 c0                	test   al,al
c000f6f6:	74 5a                	je     c000f752 <Phys::allocatePage()+0x7c>
c000f6f8:	43                   	inc    ebx
c000f6f9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f6ff:	75 e2                	jne    c000f6e3 <Phys::allocatePage()+0xd>
c000f701:	31 db                	xor    ebx,ebx
c000f703:	c7 05 a0 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4a0,0x0
c000f70d:	39 de                	cmp    esi,ebx
c000f70f:	75 dc                	jne    c000f6ed <Phys::allocatePage()+0x17>
c000f711:	83 ec 0c             	sub    esp,0xc
c000f714:	68 bd 6b 02 c0       	push   0xc0026bbd
c000f719:	e8 35 2b 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000f71e:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f725:	e8 e9 fd ff ff       	call   c000f513 <Phys::allocateDMA(unsigned long)>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 56                	jne    c000f787 <Phys::allocatePage()+0xb1>
c000f731:	83 ec 0c             	sub    esp,0xc
c000f734:	68 ce 6b 02 c0       	push   0xc0026bce
c000f739:	e8 93 92 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	8b 1d a0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4a0
c000f747:	53                   	push   ebx
c000f748:	e8 e3 fe ff ff       	call   c000f630 <Phys::getPageState(unsigned long)>
c000f74d:	5a                   	pop    edx
c000f74e:	84 c0                	test   al,al
c000f750:	75 a6                	jne    c000f6f8 <Phys::allocatePage()+0x22>
c000f752:	6a 01                	push   0x1
c000f754:	53                   	push   ebx
c000f755:	e8 a4 fe ff ff       	call   c000f5fe <Phys::setPageState(unsigned long, bool)>
c000f75a:	a1 ac a4 02 c0       	mov    eax,ds:0xc002a4ac
c000f75f:	59                   	pop    ecx
c000f760:	40                   	inc    eax
c000f761:	5b                   	pop    ebx
c000f762:	a3 ac a4 02 c0       	mov    ds:0xc002a4ac,eax
c000f767:	8d 04 80             	lea    eax,[eax+eax*4]
c000f76a:	8d 04 80             	lea    eax,[eax+eax*4]
c000f76d:	c1 e0 02             	shl    eax,0x2
c000f770:	99                   	cdq    
c000f771:	f7 3d b0 a4 02 c0    	idiv   DWORD PTR ds:0xc002a4b0
c000f777:	39 05 a8 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a8,eax
c000f77d:	75 0c                	jne    c000f78b <Phys::allocatePage()+0xb5>
c000f77f:	a1 a0 a4 02 c0       	mov    eax,ds:0xc002a4a0
c000f784:	c1 e0 0c             	shl    eax,0xc
c000f787:	5a                   	pop    edx
c000f788:	5b                   	pop    ebx
c000f789:	5e                   	pop    esi
c000f78a:	c3                   	ret    
c000f78b:	83 ec 0c             	sub    esp,0xc
c000f78e:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c000f793:	50                   	push   eax
c000f794:	e8 15 09 00 00       	call   c00100ae <VgaText::updateRAMUsageDisplay(int)>
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	eb e1                	jmp    c000f77f <Phys::allocatePage()+0xa9>

c000f79e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f79e:	56                   	push   esi
c000f79f:	53                   	push   ebx
c000f7a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7a4:	39 1d a4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4a4,ebx
c000f7aa:	73 06                	jae    c000f7b2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7ac:	89 1d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,ebx
c000f7b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b6:	c1 eb 0c             	shr    ebx,0xc
c000f7b9:	c1 e8 0c             	shr    eax,0xc
c000f7bc:	39 d8                	cmp    eax,ebx
c000f7be:	73 13                	jae    c000f7d3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7c0:	6a 00                	push   0x0
c000f7c2:	8d 70 01             	lea    esi,[eax+0x1]
c000f7c5:	50                   	push   eax
c000f7c6:	e8 33 fe ff ff       	call   c000f5fe <Phys::setPageState(unsigned long, bool)>
c000f7cb:	5a                   	pop    edx
c000f7cc:	89 f0                	mov    eax,esi
c000f7ce:	59                   	pop    ecx
c000f7cf:	39 f3                	cmp    ebx,esi
c000f7d1:	75 ed                	jne    c000f7c0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7d3:	5b                   	pop    ebx
c000f7d4:	5e                   	pop    esi
c000f7d5:	c3                   	ret    

c000f7d6 <Phys::physicalMemorySetup(unsigned int)>:
c000f7d6:	55                   	push   ebp
c000f7d7:	57                   	push   edi
c000f7d8:	56                   	push   esi
c000f7d9:	53                   	push   ebx
c000f7da:	31 db                	xor    ebx,ebx
c000f7dc:	83 ec 40             	sub    esp,0x40
c000f7df:	6a 30                	push   0x30
c000f7e1:	6a 00                	push   0x0
c000f7e3:	68 c0 a4 02 c0       	push   0xc002a4c0
c000f7e8:	e8 90 0e ff ff       	call   c000067d <memset>
c000f7ed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f6:	05 00 10 00 00       	add    eax,0x1000
c000f7fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f7ff:	83 c4 10             	add    esp,0x10
c000f802:	83 ec 08             	sub    esp,0x8
c000f805:	6a 01                	push   0x1
c000f807:	53                   	push   ebx
c000f808:	43                   	inc    ebx
c000f809:	e8 f0 fd ff ff       	call   c000f5fe <Phys::setPageState(unsigned long, bool)>
c000f80e:	83 c4 10             	add    esp,0x10
c000f811:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f817:	75 e9                	jne    c000f802 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f819:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f820:	66 85 c0             	test   ax,ax
c000f823:	0f 84 8e 01 00 00    	je     c000f9b7 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f829:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f82d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f835:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f839:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f83e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f842:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f84a:	eb 15                	jmp    c000f861 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f84c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f850:	83 c3 18             	add    ebx,0x18
c000f853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f857:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f85b:	0f 84 66 01 00 00    	je     c000f9c7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f861:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f864:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f867:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f86a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f86e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f872:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f874:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f877:	01 f0                	add    eax,esi
c000f879:	55                   	push   ebp
c000f87a:	11 fa                	adc    edx,edi
c000f87c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f880:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f884:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f888:	56                   	push   esi
c000f889:	68 08 6c 02 c0       	push   0xc0026c08
c000f88e:	e8 c0 29 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000f893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	09 f8                	or     eax,edi
c000f89c:	0f 85 25 01 00 00    	jne    c000f9c7 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8a2:	4d                   	dec    ebp
c000f8a3:	75 a7                	jne    c000f84c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8a5:	ba 00 00 08 00       	mov    edx,0x80000
c000f8aa:	89 c1                	mov    ecx,eax
c000f8ac:	39 f2                	cmp    edx,esi
c000f8ae:	19 f9                	sbb    ecx,edi
c000f8b0:	0f 82 a7 00 00 00    	jb     c000f95d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8b6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8ba:	89 c1                	mov    ecx,eax
c000f8bc:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8c0:	0f 83 97 00 00 00    	jae    c000f95d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8c6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8cb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8d3:	39 fa                	cmp    edx,edi
c000f8d5:	19 e8                	sbb    eax,ebp
c000f8d7:	0f 82 14 01 00 00    	jb     c000f9f1 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8dd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8e1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8e5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f8eb:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f8f0:	83 d5 ff             	adc    ebp,0xffffffff
c000f8f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f8f7:	31 c0                	xor    eax,eax
c000f8f9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f8fd:	39 fa                	cmp    edx,edi
c000f8ff:	89 c1                	mov    ecx,eax
c000f901:	19 e9                	sbb    ecx,ebp
c000f903:	0f 83 43 ff ff ff    	jae    c000f84c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f909:	be 00 00 08 00       	mov    esi,0x80000
c000f90e:	50                   	push   eax
c000f90f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f913:	57                   	push   edi
c000f914:	56                   	push   esi
c000f915:	68 2c 6c 02 c0       	push   0xc0026c2c
c000f91a:	e8 34 29 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000f91f:	5a                   	pop    edx
c000f920:	59                   	pop    ecx
c000f921:	57                   	push   edi
c000f922:	56                   	push   esi
c000f923:	e8 76 fe ff ff       	call   c000f79e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f928:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f92c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f930:	83 c4 0c             	add    esp,0xc
c000f933:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f937:	03 05 b0 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a4b0
c000f93d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f944:	a3 b0 a4 02 c0       	mov    ds:0xc002a4b0,eax
c000f949:	52                   	push   edx
c000f94a:	50                   	push   eax
c000f94b:	68 ea 6b 02 c0       	push   0xc0026bea
c000f950:	e8 fe 28 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c000f955:	83 c4 10             	add    esp,0x10
c000f958:	e9 ef fe ff ff       	jmp    c000f84c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f95d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f961:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f965:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f969:	39 ea                	cmp    edx,ebp
c000f96b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f96f:	0f 82 d7 fe ff ff    	jb     c000f84c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f975:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f97a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f97e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f982:	0f 83 c4 fe ff ff    	jae    c000f84c <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f988:	39 ee                	cmp    esi,ebp
c000f98a:	89 f8                	mov    eax,edi
c000f98c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f990:	0f 83 78 ff ff ff    	jae    c000f90e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f99a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f99e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9a6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9b2:	e9 57 ff ff ff       	jmp    c000f90e <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	68 dc 6b 02 c0       	push   0xc0026bdc
c000f9bf:	e8 0d 90 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	bb 40 01 00 00       	mov    ebx,0x140
c000f9cc:	83 ec 08             	sub    esp,0x8
c000f9cf:	6a 00                	push   0x0
c000f9d1:	53                   	push   ebx
c000f9d2:	43                   	inc    ebx
c000f9d3:	e8 26 fc ff ff       	call   c000f5fe <Phys::setPageState(unsigned long, bool)>
c000f9d8:	ff 05 b0 a4 02 c0    	inc    DWORD PTR ds:0xc002a4b0
c000f9de:	83 c4 10             	add    esp,0x10
c000f9e1:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000f9e7:	75 e3                	jne    c000f9cc <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000f9e9:	83 c4 3c             	add    esp,0x3c
c000f9ec:	5b                   	pop    ebx
c000f9ed:	5e                   	pop    esi
c000f9ee:	5f                   	pop    edi
c000f9ef:	5d                   	pop    ebp
c000f9f0:	c3                   	ret    
c000f9f1:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f9f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa01:	e9 d7 fe ff ff       	jmp    c000f8dd <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa06 <Pipe::isAtty()>:
c000fa06:	31 c0                	xor    eax,eax
c000fa08:	c3                   	ret    
c000fa09:	90                   	nop

c000fa0a <Pipe::~Pipe()>:
c000fa0a:	83 ec 0c             	sub    esp,0xc
c000fa0d:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa16:	89 10                	mov    DWORD PTR [eax],edx
c000fa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1c:	83 ec 0c             	sub    esp,0xc
c000fa1f:	50                   	push   eax
c000fa20:	e8 e9 15 00 00       	call   c001100e <UnixFile::~UnixFile()>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	90                   	nop
c000fa29:	83 c4 0c             	add    esp,0xc
c000fa2c:	c3                   	ret    
c000fa2d:	90                   	nop

c000fa2e <Pipe::~Pipe()>:
c000fa2e:	83 ec 0c             	sub    esp,0xc
c000fa31:	83 ec 0c             	sub    esp,0xc
c000fa34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa38:	e8 cd ff ff ff       	call   c000fa0a <Pipe::~Pipe()>
c000fa3d:	83 c4 10             	add    esp,0x10
c000fa40:	83 ec 08             	sub    esp,0x8
c000fa43:	6a 20                	push   0x20
c000fa45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa49:	e8 25 27 00 00       	call   c0012173 <operator delete(void*, unsigned long)>
c000fa4e:	83 c4 10             	add    esp,0x10
c000fa51:	83 c4 0c             	add    esp,0xc
c000fa54:	c3                   	ret    
c000fa55:	90                   	nop

c000fa56 <Pipe::read(unsigned long long, void*, int*)>:
c000fa56:	55                   	push   ebp
c000fa57:	57                   	push   edi
c000fa58:	56                   	push   esi
c000fa59:	53                   	push   ebx
c000fa5a:	83 ec 1c             	sub    esp,0x1c
c000fa5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa69:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa6c:	89 c8                	mov    eax,ecx
c000fa6e:	99                   	cdq    
c000fa6f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa73:	74 19                	je     c000fa8e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa75:	39 f9                	cmp    ecx,edi
c000fa77:	89 d1                	mov    ecx,edx
c000fa79:	19 f1                	sbb    ecx,esi
c000fa7b:	73 11                	jae    c000fa8e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa7d:	e8 98 be 00 00       	call   c001b91a <lockScheduler()>
c000fa82:	e8 cf c1 00 00       	call   c001bc56 <schedule()>
c000fa87:	e8 90 be 00 00       	call   c001b91c <unlockScheduler()>
c000fa8c:	eb db                	jmp    c000fa69 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fa8e:	39 f8                	cmp    eax,edi
c000fa90:	89 d1                	mov    ecx,edx
c000fa92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fa96:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fa9a:	19 f1                	sbb    ecx,esi
c000fa9c:	73 08                	jae    c000faa6 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fa9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000faa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faa9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000faac:	29 c6                	sub    esi,eax
c000faae:	89 f1                	mov    ecx,esi
c000fab0:	c1 f9 1f             	sar    ecx,0x1f
c000fab3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fab7:	89 ca                	mov    edx,ecx
c000fab9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fabd:	19 d1                	sbb    ecx,edx
c000fabf:	73 04                	jae    c000fac5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fac1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fac5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fac9:	89 fd                	mov    ebp,edi
c000facb:	29 f5                	sub    ebp,esi
c000facd:	85 f6                	test   esi,esi
c000facf:	74 12                	je     c000fae3 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fad1:	52                   	push   edx
c000fad2:	56                   	push   esi
c000fad3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fad6:	50                   	push   eax
c000fad7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fadb:	e8 67 0b ff ff       	call   c0000647 <memcpy>
c000fae0:	83 c4 10             	add    esp,0x10
c000fae3:	85 ed                	test   ebp,ebp
c000fae5:	74 12                	je     c000faf9 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fae7:	50                   	push   eax
c000fae8:	55                   	push   ebp
c000fae9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000faec:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000faf0:	56                   	push   esi
c000faf1:	e8 51 0b ff ff       	call   c0000647 <memcpy>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fafc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faff:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb02:	99                   	cdq    
c000fb03:	89 f7                	mov    edi,esi
c000fb05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb0d:	c1 ff 1f             	sar    edi,0x1f
c000fb10:	57                   	push   edi
c000fb11:	56                   	push   esi
c000fb12:	52                   	push   edx
c000fb13:	50                   	push   eax
c000fb14:	e8 53 3a 01 00       	call   c002356c <__umoddi3>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb1f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb24:	75 10                	jne    c000fb36 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb26:	83 ec 0c             	sub    esp,0xc
c000fb29:	68 55 6c 02 c0       	push   0xc0026c55
c000fb2e:	e8 9e 8e 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb3e:	89 10                	mov    DWORD PTR [eax],edx
c000fb40:	83 c4 1c             	add    esp,0x1c
c000fb43:	31 c0                	xor    eax,eax
c000fb45:	5b                   	pop    ebx
c000fb46:	5e                   	pop    esi
c000fb47:	5f                   	pop    edi
c000fb48:	5d                   	pop    ebp
c000fb49:	c3                   	ret    

c000fb4a <Pipe::write(unsigned long long, void*, int*)>:
c000fb4a:	55                   	push   ebp
c000fb4b:	57                   	push   edi
c000fb4c:	56                   	push   esi
c000fb4d:	53                   	push   ebx
c000fb4e:	83 ec 1c             	sub    esp,0x1c
c000fb51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb55:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb60:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb63:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb6a:	89 de                	mov    esi,ebx
c000fb6c:	89 df                	mov    edi,ebx
c000fb6e:	c1 ff 1f             	sar    edi,0x1f
c000fb71:	01 c6                	add    esi,eax
c000fb73:	89 c8                	mov    eax,ecx
c000fb75:	11 d7                	adc    edi,edx
c000fb77:	99                   	cdq    
c000fb78:	39 f1                	cmp    ecx,esi
c000fb7a:	89 d0                	mov    eax,edx
c000fb7c:	19 f8                	sbb    eax,edi
c000fb7e:	b8 01 00 00 00       	mov    eax,0x1
c000fb83:	0f 82 80 00 00 00    	jb     c000fc09 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fb89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fb8c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fb8f:	01 d8                	add    eax,ebx
c000fb91:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fb95:	99                   	cdq    
c000fb96:	f7 f9                	idiv   ecx
c000fb98:	29 d1                	sub    ecx,edx
c000fb9a:	89 d7                	mov    edi,edx
c000fb9c:	89 c8                	mov    eax,ecx
c000fb9e:	99                   	cdq    
c000fb9f:	39 ce                	cmp    esi,ecx
c000fba1:	19 d3                	sbb    ebx,edx
c000fba3:	bb 00 00 00 00       	mov    ebx,0x0
c000fba8:	72 04                	jb     c000fbae <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbaa:	89 f3                	mov    ebx,esi
c000fbac:	29 cb                	sub    ebx,ecx
c000fbae:	89 f1                	mov    ecx,esi
c000fbb0:	29 d9                	sub    ecx,ebx
c000fbb2:	74 1a                	je     c000fbce <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbb4:	52                   	push   edx
c000fbb5:	51                   	push   ecx
c000fbb6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbbe:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbc1:	57                   	push   edi
c000fbc2:	e8 80 0a ff ff       	call   c0000647 <memcpy>
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbce:	85 db                	test   ebx,ebx
c000fbd0:	74 12                	je     c000fbe4 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbd2:	50                   	push   eax
c000fbd3:	53                   	push   ebx
c000fbd4:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbd8:	51                   	push   ecx
c000fbd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbdc:	e8 66 0a ff ff       	call   c0000647 <memcpy>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fbe7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fbec:	75 10                	jne    c000fbfe <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fbee:	83 ec 0c             	sub    esp,0xc
c000fbf1:	68 71 6c 02 c0       	push   0xc0026c71
c000fbf6:	e8 d6 8d 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc05:	89 38                	mov    DWORD PTR [eax],edi
c000fc07:	31 c0                	xor    eax,eax
c000fc09:	83 c4 1c             	add    esp,0x1c
c000fc0c:	5b                   	pop    ebx
c000fc0d:	5e                   	pop    esi
c000fc0e:	5f                   	pop    edi
c000fc0f:	5d                   	pop    ebp
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Pipe::Pipe(int)>:
c000fc12:	83 ec 0c             	sub    esp,0xc
c000fc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc19:	83 ec 08             	sub    esp,0x8
c000fc1c:	6a 00                	push   0x0
c000fc1e:	50                   	push   eax
c000fc1f:	e8 48 12 00 00       	call   c0010e6c <UnixFile::UnixFile(int)>
c000fc24:	83 c4 10             	add    esp,0x10
c000fc27:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc30:	89 10                	mov    DWORD PTR [eax],edx
c000fc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc41:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc57:	83 ec 0c             	sub    esp,0xc
c000fc5a:	50                   	push   eax
c000fc5b:	e8 cc f4 ff ff       	call   c000f12c <malloc>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	89 c2                	mov    edx,eax
c000fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc70:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc74:	90                   	nop
c000fc75:	83 c4 0c             	add    esp,0xc
c000fc78:	c3                   	ret    
c000fc79:	90                   	nop

c000fc7a <VgaText::isAtty()>:
c000fc7a:	b0 01                	mov    al,0x1
c000fc7c:	c3                   	ret    
c000fc7d:	90                   	nop

c000fc7e <VgaText::~VgaText()>:
c000fc7e:	83 ec 0c             	sub    esp,0xc
c000fc81:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c000fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8a:	89 10                	mov    DWORD PTR [eax],edx
c000fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	50                   	push   eax
c000fc94:	e8 75 13 00 00       	call   c001100e <UnixFile::~UnixFile()>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	90                   	nop
c000fc9d:	83 c4 0c             	add    esp,0xc
c000fca0:	c3                   	ret    
c000fca1:	90                   	nop

c000fca2 <VgaText::~VgaText()>:
c000fca2:	83 ec 0c             	sub    esp,0xc
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcac:	e8 cd ff ff ff       	call   c000fc7e <VgaText::~VgaText()>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	83 ec 08             	sub    esp,0x8
c000fcb7:	68 60 12 00 00       	push   0x1260
c000fcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc0:	e8 ae 24 00 00       	call   c0012173 <operator delete(void*, unsigned long)>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	83 c4 0c             	add    esp,0xc
c000fccb:	c3                   	ret    

c000fccc <VgaText::read(unsigned long long, void*, int*)>:
c000fccc:	83 ec 10             	sub    esp,0x10
c000fccf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcdb:	e8 fe 56 00 00       	call   c00153de <readKeyboard(VgaText*, char*, unsigned long)>
c000fce0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fce4:	89 02                	mov    DWORD PTR [edx],eax
c000fce6:	31 c0                	xor    eax,eax
c000fce8:	83 c4 1c             	add    esp,0x1c
c000fceb:	c3                   	ret    

c000fcec <setTerminalScrollLock(bool)>:
c000fcec:	c3                   	ret    

c000fced <addToTerminalCycle(VgaText*)>:
c000fced:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c000fcf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcf7:	85 d2                	test   edx,edx
c000fcf9:	75 0c                	jne    c000fd07 <addToTerminalCycle(VgaText*)+0x1a>
c000fcfb:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd01:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c000fd06:	c3                   	ret    
c000fd07:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd0d:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd13:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd19:	c3                   	ret    

c000fd1a <installVgaTextImplementation()>:
c000fd1a:	83 ec 10             	sub    esp,0x10
c000fd1d:	6a 20                	push   0x20
c000fd1f:	6a 00                	push   0x0
c000fd21:	68 00 a5 02 c0       	push   0xc002a500
c000fd26:	e8 52 09 ff ff       	call   c000067d <memset>
c000fd2b:	83 c4 1c             	add    esp,0x1c
c000fd2e:	c3                   	ret    

c000fd2f <scrollTerminalScrollLock(int)>:
c000fd2f:	c3                   	ret    

c000fd30 <VgaText::load()>:
c000fd30:	53                   	push   ebx
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	83 ec 58             	sub    esp,0x58
c000fd36:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd3a:	89 e2                	mov    edx,esp
c000fd3c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd40:	40                   	inc    eax
c000fd41:	83 f8 50             	cmp    eax,0x50
c000fd44:	75 f6                	jne    c000fd3c <VgaText::load()+0xc>
c000fd46:	31 c0                	xor    eax,eax
c000fd48:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd4f:	84 c9                	test   cl,cl
c000fd51:	74 06                	je     c000fd59 <VgaText::load()+0x29>
c000fd53:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd56:	40                   	inc    eax
c000fd57:	eb ef                	jmp    c000fd48 <VgaText::load()+0x18>
c000fd59:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd5f:	85 c0                	test   eax,eax
c000fd61:	74 09                	je     c000fd6c <VgaText::load()+0x3c>
c000fd63:	51                   	push   ecx
c000fd64:	51                   	push   ecx
c000fd65:	52                   	push   edx
c000fd66:	53                   	push   ebx
c000fd67:	ff d0                	call   eax
c000fd69:	83 c4 10             	add    esp,0x10
c000fd6c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd72:	85 c0                	test   eax,eax
c000fd74:	74 09                	je     c000fd7f <VgaText::load()+0x4f>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	53                   	push   ebx
c000fd7a:	ff d0                	call   eax
c000fd7c:	83 c4 10             	add    esp,0x10
c000fd7f:	83 c4 58             	add    esp,0x58
c000fd82:	5b                   	pop    ebx
c000fd83:	c3                   	ret    

c000fd84 <VgaText::updateCursor()>:
c000fd84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd88:	39 05 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,eax
c000fd8e:	75 0c                	jne    c000fd9c <VgaText::updateCursor()+0x18>
c000fd90:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fd96:	85 c0                	test   eax,eax
c000fd98:	74 02                	je     c000fd9c <VgaText::updateCursor()+0x18>
c000fd9a:	ff e0                	jmp    eax
c000fd9c:	c3                   	ret    
c000fd9d:	90                   	nop

c000fd9e <VgaText::showCursor(bool)>:
c000fd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fda6:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <VgaText::disableBlink(bool)>:
c000fdae:	56                   	push   esi
c000fdaf:	53                   	push   ebx
c000fdb0:	51                   	push   ecx
c000fdb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdb9:	39 1d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebx
c000fdbf:	75 18                	jne    c000fdd9 <VgaText::disableBlink(bool)+0x2b>
c000fdc1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdc7:	85 c0                	test   eax,eax
c000fdc9:	74 0e                	je     c000fdd9 <VgaText::disableBlink(bool)+0x2b>
c000fdcb:	89 f1                	mov    ecx,esi
c000fdcd:	52                   	push   edx
c000fdce:	52                   	push   edx
c000fdcf:	0f b6 d1             	movzx  edx,cl
c000fdd2:	52                   	push   edx
c000fdd3:	53                   	push   ebx
c000fdd4:	ff d0                	call   eax
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	89 f0                	mov    eax,esi
c000fddb:	83 f0 01             	xor    eax,0x1
c000fdde:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fde4:	58                   	pop    eax
c000fde5:	5b                   	pop    ebx
c000fde6:	5e                   	pop    esi
c000fde7:	c3                   	ret    

c000fde8 <VgaText::doANSI_SGR(int)>:
c000fde8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf0:	85 d2                	test   edx,edx
c000fdf2:	75 14                	jne    c000fe08 <VgaText::doANSI_SGR(int)+0x20>
c000fdf4:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fdfa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe00:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe06:	eb 65                	jmp    c000fe6d <VgaText::doANSI_SGR(int)+0x85>
c000fe08:	83 fa 07             	cmp    edx,0x7
c000fe0b:	75 14                	jne    c000fe21 <VgaText::doANSI_SGR(int)+0x39>
c000fe0d:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe13:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe19:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe1f:	eb 4c                	jmp    c000fe6d <VgaText::doANSI_SGR(int)+0x85>
c000fe21:	83 fa 1b             	cmp    edx,0x1b
c000fe24:	74 ce                	je     c000fdf4 <VgaText::doANSI_SGR(int)+0xc>
c000fe26:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe29:	83 f9 07             	cmp    ecx,0x7
c000fe2c:	77 09                	ja     c000fe37 <VgaText::doANSI_SGR(int)+0x4f>
c000fe2e:	8b 14 8d 40 94 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6bc0]
c000fe35:	eb 20                	jmp    c000fe57 <VgaText::doANSI_SGR(int)+0x6f>
c000fe37:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe3a:	83 f9 07             	cmp    ecx,0x7
c000fe3d:	77 09                	ja     c000fe48 <VgaText::doANSI_SGR(int)+0x60>
c000fe3f:	8b 14 8d 40 94 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6bc0]
c000fe46:	eb 25                	jmp    c000fe6d <VgaText::doANSI_SGR(int)+0x85>
c000fe48:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe4b:	83 f9 07             	cmp    ecx,0x7
c000fe4e:	77 0e                	ja     c000fe5e <VgaText::doANSI_SGR(int)+0x76>
c000fe50:	8b 14 95 f8 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d08]
c000fe57:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe5d:	c3                   	ret    
c000fe5e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe61:	83 f9 07             	cmp    ecx,0x7
c000fe64:	77 0d                	ja     c000fe73 <VgaText::doANSI_SGR(int)+0x8b>
c000fe66:	8b 14 95 d0 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d30]
c000fe6d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe73:	c3                   	ret    

c000fe74 <VgaText::setDefaultBgColour(VgaColour)>:
c000fe74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe7c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe82:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe88:	c3                   	ret    
c000fe89:	90                   	nop

c000fe8a <VgaText::setDefaultFgColour(VgaColour)>:
c000fe8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe92:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fe98:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe9e:	c3                   	ret    
c000fe9f:	90                   	nop

c000fea0 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fea0:	53                   	push   ebx
c000fea1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fea5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fea9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fead:	51                   	push   ecx
c000feae:	e8 c1 ff ff ff       	call   c000fe74 <VgaText::setDefaultBgColour(VgaColour)>
c000feb3:	58                   	pop    eax
c000feb4:	5a                   	pop    edx
c000feb5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feb9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000febd:	5b                   	pop    ebx
c000febe:	eb ca                	jmp    c000fe8a <VgaText::setDefaultFgColour(VgaColour)>

c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fec0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fec4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fec9:	83 e0 0f             	and    eax,0xf
c000fecc:	c1 e2 04             	shl    edx,0x4
c000fecf:	09 d0                	or     eax,edx
c000fed1:	c3                   	ret    

c000fed2 <VgaText::scrollScreen()>:
c000fed2:	57                   	push   edi
c000fed3:	56                   	push   esi
c000fed4:	be 01 00 00 00       	mov    esi,0x1
c000fed9:	53                   	push   ebx
c000feda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fede:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fee4:	31 ff                	xor    edi,edi
c000fee6:	01 d9                	add    ecx,ebx
c000fee8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000feeb:	83 fe 17             	cmp    esi,0x17
c000feee:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fef4:	75 28                	jne    c000ff1e <VgaText::scrollScreen()+0x4c>
c000fef6:	f7 c7 01 00 00 00    	test   edi,0x1
c000fefc:	74 1c                	je     c000ff1a <VgaText::scrollScreen()+0x48>
c000fefe:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff05:	50                   	push   eax
c000ff06:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff0d:	50                   	push   eax
c000ff0e:	e8 ad ff ff ff       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff13:	5a                   	pop    edx
c000ff14:	5a                   	pop    edx
c000ff15:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff18:	eb 04                	jmp    c000ff1e <VgaText::scrollScreen()+0x4c>
c000ff1a:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff1e:	47                   	inc    edi
c000ff1f:	41                   	inc    ecx
c000ff20:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff26:	75 c0                	jne    c000fee8 <VgaText::scrollScreen()+0x16>
c000ff28:	46                   	inc    esi
c000ff29:	83 fe 18             	cmp    esi,0x18
c000ff2c:	75 b0                	jne    c000fede <VgaText::scrollScreen()+0xc>
c000ff2e:	39 1d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebx
c000ff34:	75 24                	jne    c000ff5a <VgaText::scrollScreen()+0x88>
c000ff36:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff3d:	74 08                	je     c000ff47 <VgaText::scrollScreen()+0x75>
c000ff3f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff45:	eb 13                	jmp    c000ff5a <VgaText::scrollScreen()+0x88>
c000ff47:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff4d:	85 c0                	test   eax,eax
c000ff4f:	74 09                	je     c000ff5a <VgaText::scrollScreen()+0x88>
c000ff51:	83 ec 0c             	sub    esp,0xc
c000ff54:	53                   	push   ebx
c000ff55:	ff d0                	call   eax
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	5f                   	pop    edi
c000ff61:	e9 1e fe ff ff       	jmp    c000fd84 <VgaText::updateCursor()>

c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff6b:	c1 e0 08             	shl    eax,0x8
c000ff6e:	89 c2                	mov    edx,eax
c000ff70:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff75:	09 d0                	or     eax,edx
c000ff77:	c3                   	ret    

c000ff78 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff78:	53                   	push   ebx
c000ff79:	83 ec 08             	sub    esp,0x8
c000ff7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff80:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff85:	50                   	push   eax
c000ff86:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff8b:	50                   	push   eax
c000ff8c:	e8 2f ff ff ff       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff91:	5a                   	pop    edx
c000ff92:	0f b6 c0             	movzx  eax,al
c000ff95:	5b                   	pop    ebx
c000ff96:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ff9b:	50                   	push   eax
c000ff9c:	53                   	push   ebx
c000ff9d:	e8 c4 ff ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffa2:	5a                   	pop    edx
c000ffa3:	5a                   	pop    edx
c000ffa4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffaa:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffae:	0f b7 d2             	movzx  edx,dx
c000ffb1:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffb6:	39 0d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ecx
c000ffbc:	75 14                	jne    c000ffd2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffbe:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffc4:	85 c0                	test   eax,eax
c000ffc6:	74 0a                	je     c000ffd2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffc8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffcc:	83 c4 08             	add    esp,0x8
c000ffcf:	5b                   	pop    ebx
c000ffd0:	ff e0                	jmp    eax
c000ffd2:	83 c4 08             	add    esp,0x8
c000ffd5:	5b                   	pop    ebx
c000ffd6:	c3                   	ret    
c000ffd7:	90                   	nop

c000ffd8 <VgaText::getCursorX()>:
c000ffd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffdc:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <VgaText::getCursorY()>:
c000ffe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ffee:	c3                   	ret    
c000ffef:	90                   	nop

c000fff0 <VgaText::setCursor(int, int)>:
c000fff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fff8:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fffe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010002:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010008:	e9 77 fd ff ff       	jmp    c000fd84 <VgaText::updateCursor()>
c001000d:	90                   	nop

c001000e <VgaText::setCursorX(int)>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010015:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001001b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001f:	50                   	push   eax
c0010020:	e8 cb ff ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c0010025:	83 c4 1c             	add    esp,0x1c
c0010028:	c3                   	ret    
c0010029:	90                   	nop

c001002a <VgaText::setCursorY(int)>:
c001002a:	83 ec 10             	sub    esp,0x10
c001002d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010035:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001003b:	50                   	push   eax
c001003c:	e8 af ff ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c0010041:	83 c4 1c             	add    esp,0x1c
c0010044:	c3                   	ret    
c0010045:	90                   	nop

c0010046 <VgaText::incrementCursor(bool)>:
c0010046:	56                   	push   esi
c0010047:	53                   	push   ebx
c0010048:	51                   	push   ecx
c0010049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001004d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010051:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010057:	40                   	inc    eax
c0010058:	83 f8 50             	cmp    eax,0x50
c001005b:	74 08                	je     c0010065 <VgaText::incrementCursor(bool)+0x1f>
c001005d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010063:	eb 33                	jmp    c0010098 <VgaText::incrementCursor(bool)+0x52>
c0010065:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001006b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010075:	8d 50 01             	lea    edx,[eax+0x1]
c0010078:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001007e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010084:	75 12                	jne    c0010098 <VgaText::incrementCursor(bool)+0x52>
c0010086:	83 ec 0c             	sub    esp,0xc
c0010089:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001008f:	53                   	push   ebx
c0010090:	e8 3d fe ff ff       	call   c000fed2 <VgaText::scrollScreen()>
c0010095:	83 c4 10             	add    esp,0x10
c0010098:	89 f0                	mov    eax,esi
c001009a:	84 c0                	test   al,al
c001009c:	74 0c                	je     c00100aa <VgaText::incrementCursor(bool)+0x64>
c001009e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100a2:	5a                   	pop    edx
c00100a3:	5b                   	pop    ebx
c00100a4:	5e                   	pop    esi
c00100a5:	e9 da fc ff ff       	jmp    c000fd84 <VgaText::updateCursor()>
c00100aa:	58                   	pop    eax
c00100ab:	5b                   	pop    ebx
c00100ac:	5e                   	pop    esi
c00100ad:	c3                   	ret    

c00100ae <VgaText::updateRAMUsageDisplay(int)>:
c00100ae:	53                   	push   ebx
c00100af:	bb 0a 00 00 00       	mov    ebx,0xa
c00100b4:	6a 0f                	push   0xf
c00100b6:	6a 00                	push   0x0
c00100b8:	e8 03 fe ff ff       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c00100bd:	5a                   	pop    edx
c00100be:	59                   	pop    ecx
c00100bf:	0f b6 c8             	movzx  ecx,al
c00100c2:	51                   	push   ecx
c00100c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100c7:	99                   	cdq    
c00100c8:	f7 fb                	idiv   ebx
c00100ca:	89 d3                	mov    ebx,edx
c00100cc:	83 c0 30             	add    eax,0x30
c00100cf:	83 c3 30             	add    ebx,0x30
c00100d2:	0f be c0             	movsx  eax,al
c00100d5:	0f b6 db             	movzx  ebx,bl
c00100d8:	50                   	push   eax
c00100d9:	e8 88 fe ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00100de:	5a                   	pop    edx
c00100df:	5a                   	pop    edx
c00100e0:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00100e6:	51                   	push   ecx
c00100e7:	53                   	push   ebx
c00100e8:	e8 79 fe ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00100ed:	5b                   	pop    ebx
c00100ee:	5a                   	pop    edx
c00100ef:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00100f5:	51                   	push   ecx
c00100f6:	6a 25                	push   0x25
c00100f8:	e8 69 fe ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00100fd:	59                   	pop    ecx
c00100fe:	5b                   	pop    ebx
c00100ff:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010105:	5b                   	pop    ebx
c0010106:	c3                   	ret    
c0010107:	90                   	nop

c0010108 <VgaText::updateDiskUsage()>:
c0010108:	55                   	push   ebp
c0010109:	bd 10 27 00 00       	mov    ebp,0x2710
c001010e:	57                   	push   edi
c001010f:	56                   	push   esi
c0010110:	53                   	push   ebx
c0010111:	6a 0f                	push   0xf
c0010113:	6a 00                	push   0x0
c0010115:	e8 a6 fd ff ff       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c001011a:	5a                   	pop    edx
c001011b:	0f b6 d8             	movzx  ebx,al
c001011e:	59                   	pop    ecx
c001011f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010124:	53                   	push   ebx
c0010125:	b9 0a 00 00 00       	mov    ecx,0xa
c001012a:	99                   	cdq    
c001012b:	f7 fd                	idiv   ebp
c001012d:	99                   	cdq    
c001012e:	f7 f9                	idiv   ecx
c0010130:	8d 42 30             	lea    eax,[edx+0x30]
c0010133:	0f b6 c0             	movzx  eax,al
c0010136:	50                   	push   eax
c0010137:	e8 2a fe ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c001013c:	5e                   	pop    esi
c001013d:	5f                   	pop    edi
c001013e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010144:	bf e8 03 00 00       	mov    edi,0x3e8
c0010149:	53                   	push   ebx
c001014a:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c001014f:	99                   	cdq    
c0010150:	f7 ff                	idiv   edi
c0010152:	99                   	cdq    
c0010153:	f7 f9                	idiv   ecx
c0010155:	8d 42 30             	lea    eax,[edx+0x30]
c0010158:	0f b6 c0             	movzx  eax,al
c001015b:	50                   	push   eax
c001015c:	e8 05 fe ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010161:	5a                   	pop    edx
c0010162:	5e                   	pop    esi
c0010163:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010169:	be 64 00 00 00       	mov    esi,0x64
c001016e:	53                   	push   ebx
c001016f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010174:	99                   	cdq    
c0010175:	f7 fe                	idiv   esi
c0010177:	99                   	cdq    
c0010178:	f7 f9                	idiv   ecx
c001017a:	8d 42 30             	lea    eax,[edx+0x30]
c001017d:	0f b6 c0             	movzx  eax,al
c0010180:	50                   	push   eax
c0010181:	e8 e0 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010186:	5a                   	pop    edx
c0010187:	5a                   	pop    edx
c0010188:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001018e:	53                   	push   ebx
c001018f:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0010194:	99                   	cdq    
c0010195:	f7 f9                	idiv   ecx
c0010197:	99                   	cdq    
c0010198:	f7 f9                	idiv   ecx
c001019a:	8d 42 30             	lea    eax,[edx+0x30]
c001019d:	0f b6 c0             	movzx  eax,al
c00101a0:	50                   	push   eax
c00101a1:	e8 c0 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a6:	5a                   	pop    edx
c00101a7:	5a                   	pop    edx
c00101a8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101ae:	53                   	push   ebx
c00101af:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c00101b4:	99                   	cdq    
c00101b5:	f7 f9                	idiv   ecx
c00101b7:	8d 42 30             	lea    eax,[edx+0x30]
c00101ba:	0f b6 c0             	movzx  eax,al
c00101bd:	50                   	push   eax
c00101be:	e8 a3 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c3:	5a                   	pop    edx
c00101c4:	5a                   	pop    edx
c00101c5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101cb:	53                   	push   ebx
c00101cc:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c00101d1:	99                   	cdq    
c00101d2:	f7 fd                	idiv   ebp
c00101d4:	99                   	cdq    
c00101d5:	f7 f9                	idiv   ecx
c00101d7:	8d 42 30             	lea    eax,[edx+0x30]
c00101da:	0f b6 c0             	movzx  eax,al
c00101dd:	50                   	push   eax
c00101de:	e8 83 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c00101e3:	5d                   	pop    ebp
c00101e4:	5a                   	pop    edx
c00101e5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00101eb:	53                   	push   ebx
c00101ec:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c00101f1:	99                   	cdq    
c00101f2:	f7 ff                	idiv   edi
c00101f4:	99                   	cdq    
c00101f5:	f7 f9                	idiv   ecx
c00101f7:	8d 42 30             	lea    eax,[edx+0x30]
c00101fa:	0f b6 c0             	movzx  eax,al
c00101fd:	50                   	push   eax
c00101fe:	e8 63 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010203:	5f                   	pop    edi
c0010204:	5d                   	pop    ebp
c0010205:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001020b:	53                   	push   ebx
c001020c:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010211:	99                   	cdq    
c0010212:	f7 fe                	idiv   esi
c0010214:	99                   	cdq    
c0010215:	f7 f9                	idiv   ecx
c0010217:	8d 42 30             	lea    eax,[edx+0x30]
c001021a:	0f b6 c0             	movzx  eax,al
c001021d:	50                   	push   eax
c001021e:	e8 43 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010223:	5a                   	pop    edx
c0010224:	5e                   	pop    esi
c0010225:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001022b:	53                   	push   ebx
c001022c:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010231:	99                   	cdq    
c0010232:	f7 f9                	idiv   ecx
c0010234:	99                   	cdq    
c0010235:	f7 f9                	idiv   ecx
c0010237:	8d 42 30             	lea    eax,[edx+0x30]
c001023a:	0f b6 c0             	movzx  eax,al
c001023d:	50                   	push   eax
c001023e:	e8 23 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010243:	5f                   	pop    edi
c0010244:	5d                   	pop    ebp
c0010245:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001024b:	53                   	push   ebx
c001024c:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0010251:	99                   	cdq    
c0010252:	f7 f9                	idiv   ecx
c0010254:	83 c2 30             	add    edx,0x30
c0010257:	0f b6 d2             	movzx  edx,dl
c001025a:	52                   	push   edx
c001025b:	e8 06 fd ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010260:	5a                   	pop    edx
c0010261:	59                   	pop    ecx
c0010262:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010268:	5b                   	pop    ebx
c0010269:	5e                   	pop    esi
c001026a:	5f                   	pop    edi
c001026b:	5d                   	pop    ebp
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <VgaText::updateTitle()>:
c001026e:	53                   	push   ebx
c001026f:	31 c0                	xor    eax,eax
c0010271:	83 ec 58             	sub    esp,0x58
c0010274:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010278:	89 e1                	mov    ecx,esp
c001027a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001027e:	40                   	inc    eax
c001027f:	83 f8 50             	cmp    eax,0x50
c0010282:	75 f6                	jne    c001027a <VgaText::updateTitle()+0xc>
c0010284:	31 c0                	xor    eax,eax
c0010286:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001028d:	84 db                	test   bl,bl
c001028f:	74 06                	je     c0010297 <VgaText::updateTitle()+0x29>
c0010291:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010294:	40                   	inc    eax
c0010295:	eb ef                	jmp    c0010286 <VgaText::updateTitle()+0x18>
c0010297:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001029d:	85 c0                	test   eax,eax
c001029f:	74 09                	je     c00102aa <VgaText::updateTitle()+0x3c>
c00102a1:	53                   	push   ebx
c00102a2:	53                   	push   ebx
c00102a3:	51                   	push   ecx
c00102a4:	52                   	push   edx
c00102a5:	ff d0                	call   eax
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	e8 59 fe ff ff       	call   c0010108 <VgaText::updateDiskUsage()>
c00102af:	83 c4 58             	add    esp,0x58
c00102b2:	5b                   	pop    ebx
c00102b3:	c3                   	ret    

c00102b4 <VgaText::setTitleTextColour(VgaColour)>:
c00102b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102bc:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102c2:	eb aa                	jmp    c001026e <VgaText::updateTitle()>

c00102c4 <VgaText::setTitleColour(VgaColour)>:
c00102c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102cc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102d2:	eb 9a                	jmp    c001026e <VgaText::updateTitle()>

c00102d4 <VgaText::setTitle(char*)>:
c00102d4:	53                   	push   ebx
c00102d5:	83 ec 10             	sub    esp,0x10
c00102d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00102e6:	50                   	push   eax
c00102e7:	e8 30 04 ff ff       	call   c000071c <strcpy>
c00102ec:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102f0:	83 c4 18             	add    esp,0x18
c00102f3:	5b                   	pop    ebx
c00102f4:	e9 75 ff ff ff       	jmp    c001026e <VgaText::updateTitle()>
c00102f9:	90                   	nop

c00102fa <VgaText::decrementCursor(bool)>:
c00102fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010302:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010308:	85 c0                	test   eax,eax
c001030a:	74 07                	je     c0010313 <VgaText::decrementCursor(bool)+0x19>
c001030c:	48                   	dec    eax
c001030d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010313:	84 c9                	test   cl,cl
c0010315:	74 09                	je     c0010320 <VgaText::decrementCursor(bool)+0x26>
c0010317:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001031b:	e9 64 fa ff ff       	jmp    c000fd84 <VgaText::updateCursor()>
c0010320:	c3                   	ret    
c0010321:	90                   	nop

c0010322 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010322:	53                   	push   ebx
c0010323:	83 ec 08             	sub    esp,0x8
c0010326:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001032a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001032e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010332:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010336:	3c 07                	cmp    al,0x7
c0010338:	75 2a                	jne    c0010364 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001033a:	a1 cc a5 02 c0       	mov    eax,ds:0xc002a5cc
c001033f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010347:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001034f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001035b:	83 c4 08             	add    esp,0x8
c001035e:	5b                   	pop    ebx
c001035f:	e9 da 2c 00 00       	jmp    c001303e <Buzzer::beep(int, int, bool)>
c0010364:	3c 0d                	cmp    al,0xd
c0010366:	75 0c                	jne    c0010374 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010368:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010372:	eb 3b                	jmp    c00103af <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010374:	3c 0a                	cmp    al,0xa
c0010376:	75 40                	jne    c00103b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010378:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001037e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010388:	8d 50 01             	lea    edx,[eax+0x1]
c001038b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010391:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010397:	75 12                	jne    c00103ab <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010399:	83 ec 0c             	sub    esp,0xc
c001039c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103a2:	53                   	push   ebx
c00103a3:	e8 2a fb ff ff       	call   c000fed2 <VgaText::scrollScreen()>
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103af:	83 c4 08             	add    esp,0x8
c00103b2:	5b                   	pop    ebx
c00103b3:	e9 cc f9 ff ff       	jmp    c000fd84 <VgaText::updateCursor()>
c00103b8:	3c 08                	cmp    al,0x8
c00103ba:	75 31                	jne    c00103ed <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103bc:	50                   	push   eax
c00103bd:	50                   	push   eax
c00103be:	6a 01                	push   0x1
c00103c0:	53                   	push   ebx
c00103c1:	e8 34 ff ff ff       	call   c00102fa <VgaText::decrementCursor(bool)>
c00103c6:	5a                   	pop    edx
c00103c7:	59                   	pop    ecx
c00103c8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103ce:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103d4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103da:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103e0:	6a 20                	push   0x20
c00103e2:	53                   	push   ebx
c00103e3:	e8 90 fb ff ff       	call   c000ff78 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103e8:	83 c4 28             	add    esp,0x28
c00103eb:	5b                   	pop    ebx
c00103ec:	c3                   	ret    
c00103ed:	83 ec 08             	sub    esp,0x8
c00103f0:	0f be c0             	movsx  eax,al
c00103f3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103f9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103ff:	51                   	push   ecx
c0010400:	52                   	push   edx
c0010401:	50                   	push   eax
c0010402:	53                   	push   ebx
c0010403:	e8 70 fb ff ff       	call   c000ff78 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010408:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001040c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010414:	83 c4 28             	add    esp,0x28
c0010417:	5b                   	pop    ebx
c0010418:	e9 29 fc ff ff       	jmp    c0010046 <VgaText::incrementCursor(bool)>
c001041d:	90                   	nop

c001041e <VgaText::isShowingCursor()>:
c001041e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010422:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <VgaText::isBlinkDisabled()>:
c001042a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010434:	83 f0 01             	xor    eax,0x1
c0010437:	c3                   	ret    

c0010438 <VgaText::setCursorHeight(int)>:
c0010438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010440:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010446:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001044d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010451:	e9 48 f9 ff ff       	jmp    c000fd9e <VgaText::showCursor(bool)>

c0010456 <VgaText::getCursorHeight()>:
c0010456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010460:	c3                   	ret    

c0010461 <setActiveTerminal(VgaText*)>:
c0010461:	53                   	push   ebx
c0010462:	83 ec 08             	sub    esp,0x8
c0010465:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010469:	85 db                	test   ebx,ebx
c001046b:	75 11                	jne    c001047e <setActiveTerminal(VgaText*)+0x1d>
c001046d:	c7 44 24 10 ac 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026cac
c0010475:	83 c4 08             	add    esp,0x8
c0010478:	5b                   	pop    ebx
c0010479:	e9 53 85 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>
c001047e:	50                   	push   eax
c001047f:	50                   	push   eax
c0010480:	53                   	push   ebx
c0010481:	68 ba 6c 02 c0       	push   0xc0026cba
c0010486:	e8 c8 1d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001048b:	a1 24 a5 02 c0       	mov    eax,ds:0xc002a524
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	85 c0                	test   eax,eax
c0010495:	74 0c                	je     c00104a3 <setActiveTerminal(VgaText*)+0x42>
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	50                   	push   eax
c001049b:	e8 e4 f8 ff ff       	call   c000fd84 <VgaText::updateCursor()>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	89 1d 24 a5 02 c0    	mov    DWORD PTR ds:0xc002a524,ebx
c00104a9:	51                   	push   ecx
c00104aa:	51                   	push   ecx
c00104ab:	53                   	push   ebx
c00104ac:	68 d2 6c 02 c0       	push   0xc0026cd2
c00104b1:	e8 9d 1d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00104b6:	83 c4 0c             	add    esp,0xc
c00104b9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104bf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104c5:	53                   	push   ebx
c00104c6:	e8 25 fb ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c00104cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104ce:	e8 57 ff ff ff       	call   c001042a <VgaText::isBlinkDisabled()>
c00104d3:	5a                   	pop    edx
c00104d4:	0f b6 c0             	movzx  eax,al
c00104d7:	59                   	pop    ecx
c00104d8:	50                   	push   eax
c00104d9:	53                   	push   ebx
c00104da:	e8 cf f8 ff ff       	call   c000fdae <VgaText::disableBlink(bool)>
c00104df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104e2:	e8 6f ff ff ff       	call   c0010456 <VgaText::getCursorHeight()>
c00104e7:	5a                   	pop    edx
c00104e8:	59                   	pop    ecx
c00104e9:	50                   	push   eax
c00104ea:	53                   	push   ebx
c00104eb:	e8 48 ff ff ff       	call   c0010438 <VgaText::setCursorHeight(int)>
c00104f0:	83 c4 10             	add    esp,0x10
c00104f3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00104fa:	75 0a                	jne    c0010506 <setActiveTerminal(VgaText*)+0xa5>
c00104fc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010506:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001050a:	83 c4 08             	add    esp,0x8
c001050d:	5b                   	pop    ebx
c001050e:	e9 1d f8 ff ff       	jmp    c000fd30 <VgaText::load()>

c0010513 <doTerminalCycle()>:
c0010513:	83 ec 18             	sub    esp,0x18
c0010516:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c001051b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010521:	50                   	push   eax
c0010522:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0010527:	e8 35 ff ff ff       	call   c0010461 <setActiveTerminal(VgaText*)>
c001052c:	83 c4 1c             	add    esp,0x1c
c001052f:	c3                   	ret    

c0010530 <VgaText::doUpdate()>:
c0010530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010534:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001053a:	85 c0                	test   eax,eax
c001053c:	74 02                	je     c0010540 <VgaText::doUpdate()+0x10>
c001053e:	ff e0                	jmp    eax
c0010540:	c3                   	ret    
c0010541:	90                   	nop

c0010542 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010542:	55                   	push   ebp
c0010543:	57                   	push   edi
c0010544:	56                   	push   esi
c0010545:	53                   	push   ebx
c0010546:	83 ec 1c             	sub    esp,0x1c
c0010549:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001054d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010552:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010559:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001055c:	50                   	push   eax
c001055d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010562:	50                   	push   eax
c0010563:	e8 58 f9 ff ff       	call   c000fec0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010568:	59                   	pop    ecx
c0010569:	0f b6 c0             	movzx  eax,al
c001056c:	5b                   	pop    ebx
c001056d:	31 c9                	xor    ecx,ecx
c001056f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010577:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001057b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010581:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010585:	0f b7 db             	movzx  ebx,bx
c0010588:	01 db                	add    ebx,ebx
c001058a:	01 fb                	add    ebx,edi
c001058c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001058f:	84 c0                	test   al,al
c0010591:	0f 84 38 01 00 00    	je     c00106cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010597:	3c 0d                	cmp    al,0xd
c0010599:	75 0f                	jne    c00105aa <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001059b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105a5:	e9 1f 01 00 00       	jmp    c00106c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105aa:	3c 0a                	cmp    al,0xa
c00105ac:	75 5b                	jne    c0010609 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105ae:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105b4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105be:	8d 48 01             	lea    ecx,[eax+0x1]
c00105c1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105c7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105cd:	75 12                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105cf:	83 ec 0c             	sub    esp,0xc
c00105d2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105d8:	55                   	push   ebp
c00105d9:	e8 f4 f8 ff ff       	call   c000fed2 <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	55                   	push   ebp
c00105e5:	e8 9a f7 ff ff       	call   c000fd84 <VgaText::updateCursor()>
c00105ea:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105fb:	31 c9                	xor    ecx,ecx
c00105fd:	0f b7 db             	movzx  ebx,bx
c0010600:	01 db                	add    ebx,ebx
c0010602:	01 fb                	add    ebx,edi
c0010604:	e9 c0 00 00 00       	jmp    c00106c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010609:	3c 08                	cmp    al,0x8
c001060b:	75 4e                	jne    c001065b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001060d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010611:	53                   	push   ebx
c0010612:	53                   	push   ebx
c0010613:	6a 01                	push   0x1
c0010615:	55                   	push   ebp
c0010616:	e8 df fc ff ff       	call   c00102fa <VgaText::decrementCursor(bool)>
c001061b:	58                   	pop    eax
c001061c:	5a                   	pop    edx
c001061d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010623:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010629:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c001062f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010635:	6a 20                	push   0x20
c0010637:	55                   	push   ebp
c0010638:	e8 3b f9 ff ff       	call   c000ff78 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001063d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010645:	83 c4 20             	add    esp,0x20
c0010648:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001064e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010652:	0f b7 db             	movzx  ebx,bx
c0010655:	01 db                	add    ebx,ebx
c0010657:	01 fb                	add    ebx,edi
c0010659:	eb 6e                	jmp    c00106c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001065b:	51                   	push   ecx
c001065c:	51                   	push   ecx
c001065d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010661:	50                   	push   eax
c0010662:	e8 ff f8 ff ff       	call   c000ff66 <VgaText::combineCharAndColour(char, unsigned char)>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	66 89 03             	mov    WORD PTR [ebx],ax
c001066d:	39 2d 24 a5 02 c0    	cmp    DWORD PTR ds:0xc002a524,ebp
c0010673:	75 2a                	jne    c001069f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010675:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c001067b:	85 c0                	test   eax,eax
c001067d:	74 20                	je     c001069f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001067f:	52                   	push   edx
c0010680:	52                   	push   edx
c0010681:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010687:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001068d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010691:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010695:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010698:	51                   	push   ecx
c0010699:	55                   	push   ebp
c001069a:	ff d0                	call   eax
c001069c:	83 c4 20             	add    esp,0x20
c001069f:	83 c3 02             	add    ebx,0x2
c00106a2:	50                   	push   eax
c00106a3:	50                   	push   eax
c00106a4:	6a 00                	push   0x0
c00106a6:	55                   	push   ebp
c00106a7:	e8 9a f9 ff ff       	call   c0010046 <VgaText::incrementCursor(bool)>
c00106ac:	83 c4 10             	add    esp,0x10
c00106af:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106b6:	75 0f                	jne    c00106c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106b8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106c0:	0f b7 db             	movzx  ebx,bx
c00106c3:	01 db                	add    ebx,ebx
c00106c5:	01 fb                	add    ebx,edi
c00106c7:	b1 01                	mov    cl,0x1
c00106c9:	46                   	inc    esi
c00106ca:	e9 bd fe ff ff       	jmp    c001058c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	55                   	push   ebp
c00106d7:	e8 a8 f6 ff ff       	call   c000fd84 <VgaText::updateCursor()>
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106e3:	84 c9                	test   cl,cl
c00106e5:	74 0c                	je     c00106f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00106e7:	83 ec 0c             	sub    esp,0xc
c00106ea:	55                   	push   ebp
c00106eb:	e8 40 fe ff ff       	call   c0010530 <VgaText::doUpdate()>
c00106f0:	83 c4 10             	add    esp,0x10
c00106f3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00106fa:	83 c4 1c             	add    esp,0x1c
c00106fd:	5b                   	pop    ebx
c00106fe:	5e                   	pop    esi
c00106ff:	5f                   	pop    edi
c0010700:	5d                   	pop    ebp
c0010701:	c3                   	ret    

c0010702 <VgaText::clearScreen()>:
c0010702:	57                   	push   edi
c0010703:	56                   	push   esi
c0010704:	31 f6                	xor    esi,esi
c0010706:	53                   	push   ebx
c0010707:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001070b:	52                   	push   edx
c001070c:	6a 00                	push   0x0
c001070e:	6a 00                	push   0x0
c0010710:	53                   	push   ebx
c0010711:	e8 da f8 ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c0010716:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001071d:	83 c4 10             	add    esp,0x10
c0010720:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010726:	7e 26                	jle    c001074e <VgaText::clearScreen()+0x4c>
c0010728:	31 ff                	xor    edi,edi
c001072a:	50                   	push   eax
c001072b:	50                   	push   eax
c001072c:	56                   	push   esi
c001072d:	57                   	push   edi
c001072e:	47                   	inc    edi
c001072f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010735:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001073b:	6a 20                	push   0x20
c001073d:	53                   	push   ebx
c001073e:	e8 35 f8 ff ff       	call   c000ff78 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010743:	83 c4 20             	add    esp,0x20
c0010746:	83 ff 50             	cmp    edi,0x50
c0010749:	75 df                	jne    c001072a <VgaText::clearScreen()+0x28>
c001074b:	46                   	inc    esi
c001074c:	eb d2                	jmp    c0010720 <VgaText::clearScreen()+0x1e>
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	53                   	push   ebx
c0010752:	e8 d9 fd ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010757:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001075e:	83 c4 10             	add    esp,0x10
c0010761:	5b                   	pop    ebx
c0010762:	5e                   	pop    esi
c0010763:	5f                   	pop    edi
c0010764:	c3                   	ret    
c0010765:	90                   	nop

c0010766 <VgaText::putchar(char)>:
c0010766:	56                   	push   esi
c0010767:	53                   	push   ebx
c0010768:	83 ec 14             	sub    esp,0x14
c001076b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001076f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010773:	3c 5b                	cmp    al,0x5b
c0010775:	75 21                	jne    c0010798 <VgaText::putchar(char)+0x32>
c0010777:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001077e:	74 28                	je     c00107a8 <VgaText::putchar(char)+0x42>
c0010780:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010789:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010793:	e9 e2 00 00 00       	jmp    c001087a <VgaText::putchar(char)+0x114>
c0010798:	3c 1b                	cmp    al,0x1b
c001079a:	75 0c                	jne    c00107a8 <VgaText::putchar(char)+0x42>
c001079c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107a3:	e9 d2 00 00 00       	jmp    c001087a <VgaText::putchar(char)+0x114>
c00107a8:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107ae:	84 c9                	test   cl,cl
c00107b0:	0f 84 ab 00 00 00    	je     c0010861 <VgaText::putchar(char)+0xfb>
c00107b6:	8d 50 c0             	lea    edx,[eax-0x40]
c00107b9:	80 fa 3e             	cmp    dl,0x3e
c00107bc:	0f 87 82 00 00 00    	ja     c0010844 <VgaText::putchar(char)+0xde>
c00107c2:	3c 6d                	cmp    al,0x6d
c00107c4:	75 4d                	jne    c0010813 <VgaText::putchar(char)+0xad>
c00107c6:	31 f6                	xor    esi,esi
c00107c8:	31 d2                	xor    edx,edx
c00107ca:	31 c0                	xor    eax,eax
c00107cc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107d2:	7e 30                	jle    c0010804 <VgaText::putchar(char)+0x9e>
c00107d4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107dc:	80 fa 3b             	cmp    dl,0x3b
c00107df:	75 17                	jne    c00107f8 <VgaText::putchar(char)+0x92>
c00107e1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107e5:	50                   	push   eax
c00107e6:	53                   	push   ebx
c00107e7:	e8 fc f5 ff ff       	call   c000fde8 <VgaText::doANSI_SGR(int)>
c00107ec:	59                   	pop    ecx
c00107ed:	31 d2                	xor    edx,edx
c00107ef:	58                   	pop    eax
c00107f0:	31 c0                	xor    eax,eax
c00107f2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107f6:	eb 09                	jmp    c0010801 <VgaText::putchar(char)+0x9b>
c00107f8:	6b c0 0a             	imul   eax,eax,0xa
c00107fb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ff:	88 ca                	mov    dl,cl
c0010801:	46                   	inc    esi
c0010802:	eb c8                	jmp    c00107cc <VgaText::putchar(char)+0x66>
c0010804:	84 d2                	test   dl,dl
c0010806:	74 31                	je     c0010839 <VgaText::putchar(char)+0xd3>
c0010808:	50                   	push   eax
c0010809:	53                   	push   ebx
c001080a:	e8 d9 f5 ff ff       	call   c000fde8 <VgaText::doANSI_SGR(int)>
c001080f:	58                   	pop    eax
c0010810:	5a                   	pop    edx
c0010811:	eb 26                	jmp    c0010839 <VgaText::putchar(char)+0xd3>
c0010813:	3c 4a                	cmp    al,0x4a
c0010815:	75 22                	jne    c0010839 <VgaText::putchar(char)+0xd3>
c0010817:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001081e:	75 19                	jne    c0010839 <VgaText::putchar(char)+0xd3>
c0010820:	83 ec 0c             	sub    esp,0xc
c0010823:	53                   	push   ebx
c0010824:	e8 d9 fe ff ff       	call   c0010702 <VgaText::clearScreen()>
c0010829:	83 c4 0c             	add    esp,0xc
c001082c:	6a 00                	push   0x0
c001082e:	6a 00                	push   0x0
c0010830:	53                   	push   ebx
c0010831:	e8 ba f7 ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010842:	eb 36                	jmp    c001087a <VgaText::putchar(char)+0x114>
c0010844:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001084a:	83 fa 0e             	cmp    edx,0xe
c001084d:	7f 2b                	jg     c001087a <VgaText::putchar(char)+0x114>
c001084f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010852:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010858:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001085f:	eb 19                	jmp    c001087a <VgaText::putchar(char)+0x114>
c0010861:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010867:	0f be c0             	movsx  eax,al
c001086a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010870:	50                   	push   eax
c0010871:	53                   	push   ebx
c0010872:	e8 ab fa ff ff       	call   c0010322 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010877:	83 c4 10             	add    esp,0x10
c001087a:	83 c4 14             	add    esp,0x14
c001087d:	5b                   	pop    ebx
c001087e:	5e                   	pop    esi
c001087f:	c3                   	ret    

c0010880 <VgaText::puts(char const*)>:
c0010880:	53                   	push   ebx
c0010881:	83 ec 08             	sub    esp,0x8
c0010884:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010888:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001088b:	84 c0                	test   al,al
c001088d:	74 12                	je     c00108a1 <VgaText::puts(char const*)+0x21>
c001088f:	43                   	inc    ebx
c0010890:	51                   	push   ecx
c0010891:	51                   	push   ecx
c0010892:	50                   	push   eax
c0010893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010897:	e8 ca fe ff ff       	call   c0010766 <VgaText::putchar(char)>
c001089c:	83 c4 10             	add    esp,0x10
c001089f:	eb e7                	jmp    c0010888 <VgaText::puts(char const*)+0x8>
c00108a1:	83 c4 08             	add    esp,0x8
c00108a4:	5b                   	pop    ebx
c00108a5:	c3                   	ret    

c00108a6 <VgaText::putx(unsigned int)>:
c00108a6:	57                   	push   edi
c00108a7:	b9 11 00 00 00       	mov    ecx,0x11
c00108ac:	56                   	push   esi
c00108ad:	be ee 6c 02 c0       	mov    esi,0xc0026cee
c00108b2:	53                   	push   ebx
c00108b3:	83 ec 20             	sub    esp,0x20
c00108b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108be:	fc                   	cld    
c00108bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108c1:	be 08 00 00 00       	mov    esi,0x8
c00108c6:	50                   	push   eax
c00108c7:	50                   	push   eax
c00108c8:	89 d8                	mov    eax,ebx
c00108ca:	c1 e3 04             	shl    ebx,0x4
c00108cd:	c1 e8 1c             	shr    eax,0x1c
c00108d0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108d5:	50                   	push   eax
c00108d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108da:	e8 87 fe ff ff       	call   c0010766 <VgaText::putchar(char)>
c00108df:	83 c4 10             	add    esp,0x10
c00108e2:	4e                   	dec    esi
c00108e3:	75 e1                	jne    c00108c6 <VgaText::putx(unsigned int)+0x20>
c00108e5:	83 c4 20             	add    esp,0x20
c00108e8:	5b                   	pop    ebx
c00108e9:	5e                   	pop    esi
c00108ea:	5f                   	pop    edi
c00108eb:	c3                   	ret    

c00108ec <VgaText::VgaText(char const*)>:
c00108ec:	57                   	push   edi
c00108ed:	56                   	push   esi
c00108ee:	53                   	push   ebx
c00108ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f3:	83 ec 08             	sub    esp,0x8
c00108f6:	6a 00                	push   0x0
c00108f8:	50                   	push   eax
c00108f9:	e8 6e 05 00 00       	call   c0010e6c <UnixFile::UnixFile(int)>
c00108fe:	83 c4 10             	add    esp,0x10
c0010901:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	89 10                	mov    DWORD PTR [eax],edx
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001091a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010937:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001093e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010942:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001095a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010969:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001097a:	bb 00 a5 02 c0       	mov    ebx,0xc002a500
c001097f:	b8 08 00 00 00       	mov    eax,0x8
c0010984:	fc                   	cld    
c0010985:	89 d7                	mov    edi,edx
c0010987:	89 de                	mov    esi,ebx
c0010989:	89 c1                	mov    ecx,eax
c001098b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001098d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010991:	05 1e 10 00 00       	add    eax,0x101e
c0010996:	83 ec 08             	sub    esp,0x8
c0010999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001099d:	50                   	push   eax
c001099e:	e8 79 fd fe ff       	call   c000071c <strcpy>
c00109a3:	83 c4 10             	add    esp,0x10
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b8:	83 c0 0c             	add    eax,0xc
c00109bb:	83 ec 04             	sub    esp,0x4
c00109be:	68 00 0f 00 00       	push   0xf00
c00109c3:	6a 00                	push   0x0
c00109c5:	50                   	push   eax
c00109c6:	e8 b2 fc fe ff       	call   c000067d <memset>
c00109cb:	83 c4 10             	add    esp,0x10
c00109ce:	83 ec 04             	sub    esp,0x4
c00109d1:	6a 00                	push   0x0
c00109d3:	6a 07                	push   0x7
c00109d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d9:	e8 c2 f4 ff ff       	call   c000fea0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109de:	83 c4 10             	add    esp,0x10
c00109e1:	83 ec 08             	sub    esp,0x8
c00109e4:	6a 02                	push   0x2
c00109e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ea:	e8 49 fa ff ff       	call   c0010438 <VgaText::setCursorHeight(int)>
c00109ef:	83 c4 10             	add    esp,0x10
c00109f2:	83 ec 04             	sub    esp,0x4
c00109f5:	6a 00                	push   0x0
c00109f7:	6a 00                	push   0x0
c00109f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fd:	e8 ee f5 ff ff       	call   c000fff0 <VgaText::setCursor(int, int)>
c0010a02:	83 c4 10             	add    esp,0x10
c0010a05:	83 ec 08             	sub    esp,0x8
c0010a08:	6a 01                	push   0x1
c0010a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0e:	e8 8b f3 ff ff       	call   c000fd9e <VgaText::showCursor(bool)>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	83 ec 08             	sub    esp,0x8
c0010a19:	6a 01                	push   0x1
c0010a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1f:	e8 8a f3 ff ff       	call   c000fdae <VgaText::disableBlink(bool)>
c0010a24:	83 c4 10             	add    esp,0x10
c0010a27:	83 ec 0c             	sub    esp,0xc
c0010a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2e:	e8 cf fc ff ff       	call   c0010702 <VgaText::clearScreen()>
c0010a33:	83 c4 10             	add    esp,0x10
c0010a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a45:	05 9e 10 00 00       	add    eax,0x109e
c0010a4a:	83 ec 04             	sub    esp,0x4
c0010a4d:	68 96 00 00 00       	push   0x96
c0010a52:	6a 00                	push   0x0
c0010a54:	50                   	push   eax
c0010a55:	e8 23 fc fe ff       	call   c000067d <memset>
c0010a5a:	83 c4 10             	add    esp,0x10
c0010a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a61:	05 34 11 00 00       	add    eax,0x1134
c0010a66:	83 ec 04             	sub    esp,0x4
c0010a69:	68 2c 01 00 00       	push   0x12c
c0010a6e:	6a 00                	push   0x0
c0010a70:	50                   	push   eax
c0010a71:	e8 07 fc fe ff       	call   c000067d <memset>
c0010a76:	83 c4 10             	add    esp,0x10
c0010a79:	90                   	nop
c0010a7a:	5b                   	pop    ebx
c0010a7b:	5e                   	pop    esi
c0010a7c:	5f                   	pop    edi
c0010a7d:	c3                   	ret    

c0010a7e <VgaText::receiveKey(unsigned char)>:
c0010a7e:	55                   	push   ebp
c0010a7f:	57                   	push   edi
c0010a80:	56                   	push   esi
c0010a81:	53                   	push   ebx
c0010a82:	83 ec 1c             	sub    esp,0x1c
c0010a85:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a8d:	84 db                	test   bl,bl
c0010a8f:	0f 84 c9 00 00 00    	je     c0010b5e <VgaText::receiveKey(unsigned char)+0xe0>
c0010a95:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010a9b:	80 fb 08             	cmp    bl,0x8
c0010a9e:	75 2c                	jne    c0010acc <VgaText::receiveKey(unsigned char)+0x4e>
c0010aa0:	83 ec 0c             	sub    esp,0xc
c0010aa3:	57                   	push   edi
c0010aa4:	e8 f1 fb fe ff       	call   c000069a <strlen>
c0010aa9:	83 c4 10             	add    esp,0x10
c0010aac:	85 c0                	test   eax,eax
c0010aae:	74 41                	je     c0010af1 <VgaText::receiveKey(unsigned char)+0x73>
c0010ab0:	50                   	push   eax
c0010ab1:	50                   	push   eax
c0010ab2:	6a 08                	push   0x8
c0010ab4:	56                   	push   esi
c0010ab5:	e8 ac fc ff ff       	call   c0010766 <VgaText::putchar(char)>
c0010aba:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010abd:	e8 d8 fb fe ff       	call   c000069a <strlen>
c0010ac2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010aca:	eb 22                	jmp    c0010aee <VgaText::receiveKey(unsigned char)+0x70>
c0010acc:	0f be c3             	movsx  eax,bl
c0010acf:	52                   	push   edx
c0010ad0:	52                   	push   edx
c0010ad1:	50                   	push   eax
c0010ad2:	56                   	push   esi
c0010ad3:	e8 8e fc ff ff       	call   c0010766 <VgaText::putchar(char)>
c0010ad8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010adc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ae1:	59                   	pop    ecx
c0010ae2:	5d                   	pop    ebp
c0010ae3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ae7:	50                   	push   eax
c0010ae8:	57                   	push   edi
c0010ae9:	e8 e5 fc fe ff       	call   c00007d3 <strcat>
c0010aee:	83 c4 10             	add    esp,0x10
c0010af1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010af8:	75 05                	jne    c0010aff <VgaText::receiveKey(unsigned char)+0x81>
c0010afa:	80 fb 0a             	cmp    bl,0xa
c0010afd:	75 53                	jne    c0010b52 <VgaText::receiveKey(unsigned char)+0xd4>
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b08:	53                   	push   ebx
c0010b09:	e8 8c fb fe ff       	call   c000069a <strlen>
c0010b0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b11:	89 c5                	mov    ebp,eax
c0010b13:	e8 82 fb fe ff       	call   c000069a <strlen>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b1f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b24:	76 10                	jbe    c0010b36 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b26:	83 ec 0c             	sub    esp,0xc
c0010b29:	68 ff 6c 02 c0       	push   0xc0026cff
c0010b2e:	e8 9e 7e 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0010b33:	83 c4 10             	add    esp,0x10
c0010b36:	50                   	push   eax
c0010b37:	50                   	push   eax
c0010b38:	57                   	push   edi
c0010b39:	53                   	push   ebx
c0010b3a:	e8 94 fc fe ff       	call   c00007d3 <strcat>
c0010b3f:	83 c4 0c             	add    esp,0xc
c0010b42:	68 96 00 00 00       	push   0x96
c0010b47:	6a 00                	push   0x0
c0010b49:	57                   	push   edi
c0010b4a:	e8 2e fb fe ff       	call   c000067d <memset>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	56                   	push   esi
c0010b56:	e8 d5 f9 ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	83 c4 1c             	add    esp,0x1c
c0010b61:	5b                   	pop    ebx
c0010b62:	5e                   	pop    esi
c0010b63:	5f                   	pop    edi
c0010b64:	5d                   	pop    ebp
c0010b65:	c3                   	ret    

c0010b66 <VgaText::write(unsigned long long, void*, int*)>:
c0010b66:	55                   	push   ebp
c0010b67:	57                   	push   edi
c0010b68:	56                   	push   esi
c0010b69:	53                   	push   ebx
c0010b6a:	83 ec 0c             	sub    esp,0xc
c0010b6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b71:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b75:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b79:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b80:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b83:	39 eb                	cmp    ebx,ebp
c0010b85:	74 13                	je     c0010b9a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b87:	43                   	inc    ebx
c0010b88:	50                   	push   eax
c0010b89:	50                   	push   eax
c0010b8a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b8e:	50                   	push   eax
c0010b8f:	56                   	push   esi
c0010b90:	e8 d1 fb ff ff       	call   c0010766 <VgaText::putchar(char)>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	eb e9                	jmp    c0010b83 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010ba4:	56                   	push   esi
c0010ba5:	e8 86 f9 ff ff       	call   c0010530 <VgaText::doUpdate()>
c0010baa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bae:	89 38                	mov    DWORD PTR [eax],edi
c0010bb0:	83 c4 1c             	add    esp,0x1c
c0010bb3:	31 c0                	xor    eax,eax
c0010bb5:	5b                   	pop    ebx
c0010bb6:	5e                   	pop    esi
c0010bb7:	5f                   	pop    edi
c0010bb8:	5d                   	pop    ebp
c0010bb9:	c3                   	ret    

c0010bba <newTerminal(char*)>:
c0010bba:	83 ec 28             	sub    esp,0x28
c0010bbd:	68 60 12 00 00       	push   0x1260
c0010bc2:	e8 9d 15 00 00       	call   c0012164 <operator new(unsigned long)>
c0010bc7:	5a                   	pop    edx
c0010bc8:	59                   	pop    ecx
c0010bc9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010bcd:	50                   	push   eax
c0010bce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bd2:	e8 15 fd ff ff       	call   c00108ec <VgaText::VgaText(char const*)>
c0010bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bdb:	83 c4 2c             	add    esp,0x2c
c0010bde:	c3                   	ret    
c0010bdf:	90                   	nop

c0010be0 <TSS::TSS()>:
c0010be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010be4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010beb:	90                   	nop
c0010bec:	c3                   	ret    
c0010bed:	90                   	nop

c0010bee <TSS::setESP(unsigned long)>:
c0010bee:	55                   	push   ebp
c0010bef:	89 e5                	mov    ebp,esp
c0010bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfd:	90                   	nop
c0010bfe:	5d                   	pop    ebp
c0010bff:	c3                   	ret    

c0010c00 <TSS::flush()>:
c0010c00:	55                   	push   ebp
c0010c01:	89 e5                	mov    ebp,esp
c0010c03:	83 ec 10             	sub    esp,0x10
c0010c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0b:	83 c8 03             	or     eax,0x3
c0010c0e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c12:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c16:	66 89 d0             	mov    ax,dx
c0010c19:	0f 00 d8             	ltr    ax
c0010c1c:	90                   	nop
c0010c1d:	c9                   	leave  
c0010c1e:	c3                   	ret    
c0010c1f:	90                   	nop

c0010c20 <TSS::setup(unsigned long, unsigned long)>:
c0010c20:	55                   	push   ebp
c0010c21:	89 e5                	mov    ebp,esp
c0010c23:	83 ec 18             	sub    esp,0x18
c0010c26:	83 ec 0c             	sub    esp,0xc
c0010c29:	6a 68                	push   0x68
c0010c2b:	e8 fc e4 ff ff       	call   c000f12c <malloc>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	89 c2                	mov    edx,eax
c0010c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c41:	83 ec 04             	sub    esp,0x4
c0010c44:	6a 68                	push   0x68
c0010c46:	6a 00                	push   0x0
c0010c48:	50                   	push   eax
c0010c49:	e8 2f fa fe ff       	call   c000067d <memset>
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c57:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c63:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c72:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c87:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c93:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cab:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010cc6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ccf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cdb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce8:	0f 20 da             	mov    edx,cr3
c0010ceb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010cee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010cf1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfa:	83 ec 08             	sub    esp,0x8
c0010cfd:	50                   	push   eax
c0010cfe:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010d01:	50                   	push   eax
c0010d02:	e8 03 dc ff ff       	call   c000e90a <GDTEntry::setBase(unsigned int)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	83 ec 08             	sub    esp,0x8
c0010d0d:	6a 68                	push   0x68
c0010d0f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010d12:	50                   	push   eax
c0010d13:	e8 0e dc ff ff       	call   c000e926 <GDTEntry::setLimit(unsigned int)>
c0010d18:	83 c4 10             	add    esp,0x10
c0010d1b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010d1f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010d22:	83 e0 0f             	and    eax,0xf
c0010d25:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010d28:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010d2b:	83 c8 40             	or     eax,0x40
c0010d2e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010d31:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0010d36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d3c:	05 78 01 00 00       	add    eax,0x178
c0010d41:	83 ec 04             	sub    esp,0x4
c0010d44:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d47:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010d4a:	50                   	push   eax
c0010d4b:	e8 0a dc ff ff       	call   c000e95a <GDT::addEntry(GDTEntry)>
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	89 c2                	mov    edx,eax
c0010d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d58:	89 10                	mov    DWORD PTR [eax],edx
c0010d5a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0010d5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d65:	05 78 01 00 00       	add    eax,0x178
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	50                   	push   eax
c0010d6e:	e8 2b dc ff ff       	call   c000e99e <GDT::flush()>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d7b:	83 ec 08             	sub    esp,0x8
c0010d7e:	50                   	push   eax
c0010d7f:	68 68 6d 02 c0       	push   0xc0026d68
c0010d84:	e8 ca 14 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d91:	c9                   	leave  
c0010d92:	c3                   	ret    
c0010d93:	90                   	nop

c0010d94 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d9f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010da4:	75 08                	jne    c0010dae <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010da6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dac:	eb 38                	jmp    c0010de6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010db3:	75 17                	jne    c0010dcc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010db5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dbd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dc9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010dcc:	89 c1                	mov    ecx,eax
c0010dce:	83 e1 fd             	and    ecx,0xfffffffd
c0010dd1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010dd7:	74 cd                	je     c0010da6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dd9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dde:	83 e0 ef             	and    eax,0xffffffef
c0010de1:	83 f8 08             	cmp    eax,0x8
c0010de4:	76 c0                	jbe    c0010da6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010de6:	31 c0                	xor    eax,eax
c0010de8:	c3                   	ret    
c0010de9:	90                   	nop

c0010dea <ReservedFilename::isAtty()>:
c0010dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010df1:	31 c0                	xor    eax,eax
c0010df3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010df9:	74 09                	je     c0010e04 <ReservedFilename::isAtty()+0x1a>
c0010dfb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e01:	0f 94 c0             	sete   al
c0010e04:	c3                   	ret    
c0010e05:	90                   	nop

c0010e06 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e15:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e1a:	75 08                	jne    c0010e24 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e1c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e22:	eb 3d                	jmp    c0010e61 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e24:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e29:	75 17                	jne    c0010e42 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e33:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e39:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e3f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e42:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e47:	75 04                	jne    c0010e4d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e49:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e4b:	eb 14                	jmp    c0010e61 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e4d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e52:	74 c8                	je     c0010e1c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e54:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e59:	83 e0 ef             	and    eax,0xffffffef
c0010e5c:	83 f8 08             	cmp    eax,0x8
c0010e5f:	76 bb                	jbe    c0010e1c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e61:	31 c0                	xor    eax,eax
c0010e63:	c3                   	ret    

c0010e64 <UnixFile::getFileDescriptor()>:
c0010e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6b:	c3                   	ret    

c0010e6c <UnixFile::UnixFile(int)>:
c0010e6c:	53                   	push   ebx
c0010e6d:	83 ec 18             	sub    esp,0x18
c0010e70:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c0010e75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e79:	89 10                	mov    DWORD PTR [eax],edx
c0010e7b:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e83:	0f 8f 4d 01 00 00    	jg     c0010fd6 <UnixFile::UnixFile(int)+0x16a>
c0010e89:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c0010e8e:	8d 50 01             	lea    edx,[eax+0x1]
c0010e91:	89 15 80 94 02 c0    	mov    DWORD PTR ds:0xc0029480,edx
c0010e97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010e9b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e9e:	83 ec 08             	sub    esp,0x8
c0010ea1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ea5:	68 b8 a5 02 c0       	push   0xc002a5b8
c0010eaa:	e8 31 43 01 00       	call   c00251e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	a0 b4 a5 02 c0       	mov    al,ds:0xc002a5b4
c0010eb7:	83 f0 01             	xor    eax,0x1
c0010eba:	84 c0                	test   al,al
c0010ebc:	0f 84 15 01 00 00    	je     c0010fd7 <UnixFile::UnixFile(int)+0x16b>
c0010ec2:	c6 05 b4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5b4,0x1
c0010ec9:	83 ec 0c             	sub    esp,0xc
c0010ecc:	6a 0c                	push   0xc
c0010ece:	e8 91 12 00 00       	call   c0012164 <operator new(unsigned long)>
c0010ed3:	83 c4 10             	add    esp,0x10
c0010ed6:	89 c3                	mov    ebx,eax
c0010ed8:	83 ec 08             	sub    esp,0x8
c0010edb:	68 03 ff ff 0f       	push   0xfffff03
c0010ee0:	53                   	push   ebx
c0010ee1:	e8 f6 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	89 1d ac a5 02 c0    	mov    DWORD PTR ds:0xc002a5ac,ebx
c0010eef:	83 ec 0c             	sub    esp,0xc
c0010ef2:	6a 0c                	push   0xc
c0010ef4:	e8 6b 12 00 00       	call   c0012164 <operator new(unsigned long)>
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	89 c3                	mov    ebx,eax
c0010efe:	83 ec 08             	sub    esp,0x8
c0010f01:	68 01 ff ff 0f       	push   0xfffff01
c0010f06:	53                   	push   ebx
c0010f07:	e8 d0 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	89 1d b0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5b0,ebx
c0010f15:	83 ec 0c             	sub    esp,0xc
c0010f18:	6a 0c                	push   0xc
c0010f1a:	e8 45 12 00 00       	call   c0012164 <operator new(unsigned long)>
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	89 c3                	mov    ebx,eax
c0010f24:	83 ec 08             	sub    esp,0x8
c0010f27:	68 00 ff ff 0f       	push   0xfffff00
c0010f2c:	53                   	push   ebx
c0010f2d:	e8 aa 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	89 1d a4 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a4,ebx
c0010f3b:	83 ec 0c             	sub    esp,0xc
c0010f3e:	6a 0c                	push   0xc
c0010f40:	e8 1f 12 00 00       	call   c0012164 <operator new(unsigned long)>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	89 c3                	mov    ebx,eax
c0010f4a:	83 ec 08             	sub    esp,0x8
c0010f4d:	68 02 ff ff 0f       	push   0xfffff02
c0010f52:	53                   	push   ebx
c0010f53:	e8 84 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	89 1d a8 a5 02 c0    	mov    DWORD PTR ds:0xc002a5a8,ebx
c0010f61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f69:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f6e:	7f 67                	jg     c0010fd7 <UnixFile::UnixFile(int)+0x16b>
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	6a 0c                	push   0xc
c0010f75:	e8 ea 11 00 00       	call   c0012164 <operator new(unsigned long)>
c0010f7a:	83 c4 10             	add    esp,0x10
c0010f7d:	89 c3                	mov    ebx,eax
c0010f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f83:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	50                   	push   eax
c0010f8c:	53                   	push   ebx
c0010f8d:	e8 4a 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010f92:	83 c4 10             	add    esp,0x10
c0010f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f99:	89 1c 85 80 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a80],ebx
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	6a 0c                	push   0xc
c0010fa5:	e8 ba 11 00 00       	call   c0012164 <operator new(unsigned long)>
c0010faa:	83 c4 10             	add    esp,0x10
c0010fad:	89 c3                	mov    ebx,eax
c0010faf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb3:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fb8:	83 ec 08             	sub    esp,0x8
c0010fbb:	50                   	push   eax
c0010fbc:	53                   	push   ebx
c0010fbd:	e8 1a 00 00 00       	call   c0010fdc <ReservedFilename::ReservedFilename(int)>
c0010fc2:	83 c4 10             	add    esp,0x10
c0010fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc9:	89 1c 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],ebx
c0010fd0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fd4:	eb 93                	jmp    c0010f69 <UnixFile::UnixFile(int)+0xfd>
c0010fd6:	90                   	nop
c0010fd7:	83 c4 18             	add    esp,0x18
c0010fda:	5b                   	pop    ebx
c0010fdb:	c3                   	ret    

c0010fdc <ReservedFilename::ReservedFilename(int)>:
c0010fdc:	83 ec 0c             	sub    esp,0xc
c0010fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe3:	83 ec 08             	sub    esp,0x8
c0010fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fea:	50                   	push   eax
c0010feb:	e8 7c fe ff ff       	call   c0010e6c <UnixFile::UnixFile(int)>
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c0010ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffc:	89 10                	mov    DWORD PTR [eax],edx
c0010ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011002:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011006:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011009:	90                   	nop
c001100a:	83 c4 0c             	add    esp,0xc
c001100d:	c3                   	ret    

c001100e <UnixFile::~UnixFile()>:
c001100e:	83 ec 1c             	sub    esp,0x1c
c0011011:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c0011016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101a:	89 10                	mov    DWORD PTR [eax],edx
c001101c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011023:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011028:	7f 73                	jg     c001109d <UnixFile::~UnixFile()+0x8f>
c001102a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011032:	83 ec 0c             	sub    esp,0xc
c0011035:	68 b8 a5 02 c0       	push   0xc002a5b8
c001103a:	e8 75 42 01 00       	call   c00252b4 <LinkedList<UnixFile>::getFirstElement()>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011046:	83 ec 0c             	sub    esp,0xc
c0011049:	68 b8 a5 02 c0       	push   0xc002a5b8
c001104e:	e8 69 42 01 00       	call   c00252bc <LinkedList<UnixFile>::removeFirst()>
c0011053:	83 c4 10             	add    esp,0x10
c0011056:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001105a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001105e:	74 40                	je     c00110a0 <UnixFile::~UnixFile()+0x92>
c0011060:	83 ec 08             	sub    esp,0x8
c0011063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011067:	68 b8 a5 02 c0       	push   0xc002a5b8
c001106c:	e8 6f 41 01 00       	call   c00251e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011078:	8d 50 01             	lea    edx,[eax+0x1]
c001107b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001107f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011084:	0f 94 c0             	sete   al
c0011087:	84 c0                	test   al,al
c0011089:	74 a7                	je     c0011032 <UnixFile::~UnixFile()+0x24>
c001108b:	83 ec 0c             	sub    esp,0xc
c001108e:	68 2c 6e 02 c0       	push   0xc0026e2c
c0011093:	e8 39 79 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	eb 95                	jmp    c0011032 <UnixFile::~UnixFile()+0x24>
c001109d:	90                   	nop
c001109e:	eb 01                	jmp    c00110a1 <UnixFile::~UnixFile()+0x93>
c00110a0:	90                   	nop
c00110a1:	90                   	nop
c00110a2:	83 c4 1c             	add    esp,0x1c
c00110a5:	c3                   	ret    

c00110a6 <UnixFile::~UnixFile()>:
c00110a6:	83 ec 0c             	sub    esp,0xc
c00110a9:	83 ec 0c             	sub    esp,0xc
c00110ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b0:	e8 59 ff ff ff       	call   c001100e <UnixFile::~UnixFile()>
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	83 ec 08             	sub    esp,0x8
c00110bb:	6a 0c                	push   0xc
c00110bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c1:	e8 ad 10 00 00       	call   c0012173 <operator delete(void*, unsigned long)>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	83 c4 0c             	add    esp,0xc
c00110cc:	c3                   	ret    
c00110cd:	90                   	nop

c00110ce <ReservedFilename::~ReservedFilename()>:
c00110ce:	83 ec 0c             	sub    esp,0xc
c00110d1:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c00110d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110da:	89 10                	mov    DWORD PTR [eax],edx
c00110dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	50                   	push   eax
c00110e4:	e8 25 ff ff ff       	call   c001100e <UnixFile::~UnixFile()>
c00110e9:	83 c4 10             	add    esp,0x10
c00110ec:	90                   	nop
c00110ed:	83 c4 0c             	add    esp,0xc
c00110f0:	c3                   	ret    
c00110f1:	90                   	nop

c00110f2 <ReservedFilename::~ReservedFilename()>:
c00110f2:	83 ec 0c             	sub    esp,0xc
c00110f5:	83 ec 0c             	sub    esp,0xc
c00110f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fc:	e8 cd ff ff ff       	call   c00110ce <ReservedFilename::~ReservedFilename()>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	83 ec 08             	sub    esp,0x8
c0011107:	6a 0c                	push   0xc
c0011109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110d:	e8 61 10 00 00       	call   c0012173 <operator delete(void*, unsigned long)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	83 c4 0c             	add    esp,0xc
c0011118:	c3                   	ret    

c0011119 <getFromFileDescriptor(int)>:
c0011119:	53                   	push   ebx
c001111a:	83 ec 08             	sub    esp,0x8
c001111d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011121:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011127:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001112d:	7f 2c                	jg     c001115b <getFromFileDescriptor(int)+0x42>
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011137:	e8 78 41 01 00       	call   c00252b4 <LinkedList<UnixFile>::getFirstElement()>
c001113c:	83 c4 10             	add    esp,0x10
c001113f:	85 c0                	test   eax,eax
c0011141:	75 04                	jne    c0011147 <getFromFileDescriptor(int)+0x2e>
c0011143:	31 c0                	xor    eax,eax
c0011145:	eb 6e                	jmp    c00111b5 <getFromFileDescriptor(int)+0x9c>
c0011147:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001114a:	74 69                	je     c00111b5 <getFromFileDescriptor(int)+0x9c>
c001114c:	52                   	push   edx
c001114d:	52                   	push   edx
c001114e:	50                   	push   eax
c001114f:	68 b8 a5 02 c0       	push   0xc002a5b8
c0011154:	e8 05 42 01 00       	call   c002535e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011159:	eb e1                	jmp    c001113c <getFromFileDescriptor(int)+0x23>
c001115b:	a1 ac a5 02 c0       	mov    eax,ds:0xc002a5ac
c0011160:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011166:	74 4d                	je     c00111b5 <getFromFileDescriptor(int)+0x9c>
c0011168:	a1 b0 a5 02 c0       	mov    eax,ds:0xc002a5b0
c001116d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011173:	74 40                	je     c00111b5 <getFromFileDescriptor(int)+0x9c>
c0011175:	a1 a8 a5 02 c0       	mov    eax,ds:0xc002a5a8
c001117a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011180:	74 33                	je     c00111b5 <getFromFileDescriptor(int)+0x9c>
c0011182:	a1 a4 a5 02 c0       	mov    eax,ds:0xc002a5a4
c0011187:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001118d:	74 26                	je     c00111b5 <getFromFileDescriptor(int)+0x9c>
c001118f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011195:	83 f8 08             	cmp    eax,0x8
c0011198:	77 09                	ja     c00111a3 <getFromFileDescriptor(int)+0x8a>
c001119a:	8b 04 85 80 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5a80]
c00111a1:	eb 12                	jmp    c00111b5 <getFromFileDescriptor(int)+0x9c>
c00111a3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111a9:	83 fb 08             	cmp    ebx,0x8
c00111ac:	77 95                	ja     c0011143 <getFromFileDescriptor(int)+0x2a>
c00111ae:	8b 04 9d 40 a5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5ac0]
c00111b5:	83 c4 08             	add    esp,0x8
c00111b8:	5b                   	pop    ebx
c00111b9:	c3                   	ret    

c00111ba <__static_initialization_and_destruction_0(int, int)>:
c00111ba:	83 ec 0c             	sub    esp,0xc
c00111bd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111c2:	75 34                	jne    c00111f8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111c4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111cc:	75 2a                	jne    c00111f8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	68 b8 a5 02 c0       	push   0xc002a5b8
c00111d6:	e8 ad 3f 01 00       	call   c0025188 <LinkedList<UnixFile>::LinkedList()>
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	83 ec 04             	sub    esp,0x4
c00111e1:	68 f8 93 02 c0       	push   0xc00293f8
c00111e6:	68 b8 a5 02 c0       	push   0xc002a5b8
c00111eb:	68 86 51 02 c0       	push   0xc0025186
c00111f0:	e8 fa 0e 00 00       	call   c00120ef <__cxa_atexit>
c00111f5:	83 c4 10             	add    esp,0x10
c00111f8:	90                   	nop
c00111f9:	83 c4 0c             	add    esp,0xc
c00111fc:	c3                   	ret    

c00111fd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111fd:	83 ec 0c             	sub    esp,0xc
c0011200:	83 ec 08             	sub    esp,0x8
c0011203:	68 ff ff 00 00       	push   0xffff
c0011208:	6a 01                	push   0x1
c001120a:	e8 ab ff ff ff       	call   c00111ba <__static_initialization_and_destruction_0(int, int)>
c001120f:	83 c4 10             	add    esp,0x10
c0011212:	83 c4 0c             	add    esp,0xc
c0011215:	c3                   	ret    

c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011216:	53                   	push   ebx
c0011217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001121b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001121f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011225:	89 c8                	mov    eax,ecx
c0011227:	d1 e8                	shr    eax,1
c0011229:	03 05 88 94 02 c0    	add    eax,DWORD PTR ds:0xc0029488
c001122f:	83 e1 01             	and    ecx,0x1
c0011232:	8a 10                	mov    dl,BYTE PTR [eax]
c0011234:	75 09                	jne    c001123f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011236:	83 e2 f0             	and    edx,0xfffffff0
c0011239:	09 da                	or     edx,ebx
c001123b:	88 10                	mov    BYTE PTR [eax],dl
c001123d:	5b                   	pop    ebx
c001123e:	c3                   	ret    
c001123f:	c1 e3 04             	shl    ebx,0x4
c0011242:	83 e2 0f             	and    edx,0xf
c0011245:	09 da                	or     edx,ebx
c0011247:	88 10                	mov    BYTE PTR [eax],dl
c0011249:	5b                   	pop    ebx
c001124a:	c3                   	ret    

c001124b <Virt::getPageState(unsigned long)>:
c001124b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001124f:	8b 0d 88 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029488
c0011255:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001125b:	89 d0                	mov    eax,edx
c001125d:	d1 e8                	shr    eax,1
c001125f:	83 e2 01             	and    edx,0x1
c0011262:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011265:	75 04                	jne    c001126b <Virt::getPageState(unsigned long)+0x20>
c0011267:	83 e0 0f             	and    eax,0xf
c001126a:	c3                   	ret    
c001126b:	c0 e8 04             	shr    al,0x4
c001126e:	c3                   	ret    

c001126f <Virt::allocateKernelVirtualPages(int)>:
c001126f:	55                   	push   ebp
c0011270:	31 ed                	xor    ebp,ebp
c0011272:	57                   	push   edi
c0011273:	56                   	push   esi
c0011274:	53                   	push   ebx
c0011275:	31 db                	xor    ebx,ebx
c0011277:	83 ec 1c             	sub    esp,0x1c
c001127a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001127e:	8b 3d 84 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029484
c0011284:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011289:	57                   	push   edi
c001128a:	e8 bc ff ff ff       	call   c001124b <Virt::getPageState(unsigned long)>
c001128f:	5a                   	pop    edx
c0011290:	84 c0                	test   al,al
c0011292:	75 3a                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011294:	85 db                	test   ebx,ebx
c0011296:	75 02                	jne    c001129a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011298:	89 fd                	mov    ebp,edi
c001129a:	43                   	inc    ebx
c001129b:	39 f3                	cmp    ebx,esi
c001129d:	74 5a                	je     c00112f9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001129f:	47                   	inc    edi
c00112a0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112a6:	76 31                	jbe    c00112d9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112a8:	c7 05 84 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029484,0xc8000
c00112b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112b7:	75 28                	jne    c00112e1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112b9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112be:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112c3:	57                   	push   edi
c00112c4:	e8 82 ff ff ff       	call   c001124b <Virt::getPageState(unsigned long)>
c00112c9:	5a                   	pop    edx
c00112ca:	84 c0                	test   al,al
c00112cc:	74 c6                	je     c0011294 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112ce:	31 db                	xor    ebx,ebx
c00112d0:	47                   	inc    edi
c00112d1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112d7:	77 cf                	ja     c00112a8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112d9:	89 3d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edi
c00112df:	eb a8                	jmp    c0011289 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112e1:	83 ec 0c             	sub    esp,0xc
c00112e4:	68 84 6e 02 c0       	push   0xc0026e84
c00112e9:	e8 e3 76 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00112ee:	8b 3d 84 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029484
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	eb 90                	jmp    c0011289 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f9:	89 2d 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,ebp
c00112ff:	4b                   	dec    ebx
c0011300:	74 5f                	je     c0011361 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011302:	85 f6                	test   esi,esi
c0011304:	74 3d                	je     c0011343 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011306:	89 e8                	mov    eax,ebp
c0011308:	31 db                	xor    ebx,ebx
c001130a:	8d 7e ff             	lea    edi,[esi-0x1]
c001130d:	eb 14                	jmp    c0011323 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001130f:	6a 01                	push   0x1
c0011311:	43                   	inc    ebx
c0011312:	50                   	push   eax
c0011313:	e8 fe fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011318:	58                   	pop    eax
c0011319:	39 f3                	cmp    ebx,esi
c001131b:	5a                   	pop    edx
c001131c:	74 25                	je     c0011343 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001131e:	a1 84 94 02 c0       	mov    eax,ds:0xc0029484
c0011323:	8d 50 01             	lea    edx,[eax+0x1]
c0011326:	85 db                	test   ebx,ebx
c0011328:	89 15 84 94 02 c0    	mov    DWORD PTR ds:0xc0029484,edx
c001132e:	74 20                	je     c0011350 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011330:	39 df                	cmp    edi,ebx
c0011332:	75 db                	jne    c001130f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011334:	6a 03                	push   0x3
c0011336:	43                   	inc    ebx
c0011337:	50                   	push   eax
c0011338:	e8 d9 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001133d:	59                   	pop    ecx
c001133e:	39 f3                	cmp    ebx,esi
c0011340:	58                   	pop    eax
c0011341:	75 db                	jne    c001131e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011343:	83 c4 1c             	add    esp,0x1c
c0011346:	89 e8                	mov    eax,ebp
c0011348:	5b                   	pop    ebx
c0011349:	c1 e0 0c             	shl    eax,0xc
c001134c:	5e                   	pop    esi
c001134d:	5f                   	pop    edi
c001134e:	5d                   	pop    ebp
c001134f:	c3                   	ret    
c0011350:	6a 02                	push   0x2
c0011352:	bb 01 00 00 00       	mov    ebx,0x1
c0011357:	50                   	push   eax
c0011358:	e8 b9 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001135d:	58                   	pop    eax
c001135e:	5a                   	pop    edx
c001135f:	eb bd                	jmp    c001131e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011361:	6a 04                	push   0x4
c0011363:	8d 45 01             	lea    eax,[ebp+0x1]
c0011366:	55                   	push   ebp
c0011367:	a3 84 94 02 c0       	mov    ds:0xc0029484,eax
c001136c:	e8 a5 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011371:	59                   	pop    ecx
c0011372:	89 e8                	mov    eax,ebp
c0011374:	5b                   	pop    ebx
c0011375:	c1 e0 0c             	shl    eax,0xc
c0011378:	83 c4 1c             	add    esp,0x1c
c001137b:	5b                   	pop    ebx
c001137c:	5e                   	pop    esi
c001137d:	5f                   	pop    edi
c001137e:	5d                   	pop    ebp
c001137f:	c3                   	ret    

c0011380 <Virt::virtualMemorySetup()>:
c0011380:	53                   	push   ebx
c0011381:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011386:	83 ec 08             	sub    esp,0x8
c0011389:	6a 0f                	push   0xf
c001138b:	53                   	push   ebx
c001138c:	43                   	inc    ebx
c001138d:	e8 84 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011392:	59                   	pop    ecx
c0011393:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011399:	58                   	pop    eax
c001139a:	75 ed                	jne    c0011389 <Virt::virtualMemorySetup()+0x9>
c001139c:	83 ec 08             	sub    esp,0x8
c001139f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113a4:	68 00 00 00 c8       	push   0xc8000000
c00113a9:	68 0b 70 02 c0       	push   0xc002700b
c00113ae:	e8 a0 0e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00113b3:	58                   	pop    eax
c00113b4:	5a                   	pop    edx
c00113b5:	68 00 f0 ff ef       	push   0xeffff000
c00113ba:	68 1f 70 02 c0       	push   0xc002701f
c00113bf:	e8 8f 0e 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	83 ec 08             	sub    esp,0x8
c00113ca:	6a 00                	push   0x0
c00113cc:	53                   	push   ebx
c00113cd:	43                   	inc    ebx
c00113ce:	e8 43 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d3:	83 c4 10             	add    esp,0x10
c00113d6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113dc:	75 e9                	jne    c00113c7 <Virt::virtualMemorySetup()+0x47>
c00113de:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113e3:	83 ec 08             	sub    esp,0x8
c00113e6:	6a 0f                	push   0xf
c00113e8:	53                   	push   ebx
c00113e9:	43                   	inc    ebx
c00113ea:	e8 27 fe ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113f8:	75 e9                	jne    c00113e3 <Virt::virtualMemorySetup()+0x63>
c00113fa:	83 c4 08             	add    esp,0x8
c00113fd:	5b                   	pop    ebx
c00113fe:	c3                   	ret    

c00113ff <Virt::getAKernelVAS()>:
c00113ff:	a1 c4 a5 02 c0       	mov    eax,ds:0xc002a5c4
c0011404:	c3                   	ret    

c0011405 <Virt::setupPageSwapping(int)>:
c0011405:	57                   	push   edi
c0011406:	56                   	push   esi
c0011407:	53                   	push   ebx
c0011408:	83 ec 1c             	sub    esp,0x1c
c001140b:	68 14 01 00 00       	push   0x114
c0011410:	e8 4f 0d 00 00       	call   c0012164 <operator new(unsigned long)>
c0011415:	83 c4 0c             	add    esp,0xc
c0011418:	89 c6                	mov    esi,eax
c001141a:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c0011420:	68 33 70 02 c0       	push   0xc0027033
c0011425:	50                   	push   eax
c0011426:	e8 57 13 00 00       	call   c0012782 <File::File(char const*, Process*)>
c001142b:	89 34 24             	mov    DWORD PTR [esp],esi
c001142e:	e8 2b 15 00 00       	call   c001295e <File::unlink()>
c0011433:	58                   	pop    eax
c0011434:	5a                   	pop    edx
c0011435:	6a 12                	push   0x12
c0011437:	56                   	push   esi
c0011438:	e8 a9 13 00 00       	call   c00127e6 <File::open(FileOpenMode)>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	85 c0                	test   eax,eax
c0011442:	0f 85 bf 00 00 00    	jne    c0011507 <Virt::setupPageSwapping(int)+0x102>
c0011448:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001144c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011454:	c1 e3 08             	shl    ebx,0x8
c0011457:	83 ec 0c             	sub    esp,0xc
c001145a:	68 00 00 01 00       	push   0x10000
c001145f:	e8 c8 dc ff ff       	call   c000f12c <malloc>
c0011464:	83 c4 0c             	add    esp,0xc
c0011467:	89 c7                	mov    edi,eax
c0011469:	68 00 00 01 00       	push   0x10000
c001146e:	6a 00                	push   0x0
c0011470:	50                   	push   eax
c0011471:	e8 07 f2 fe ff       	call   c000067d <memset>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	85 db                	test   ebx,ebx
c001147b:	79 03                	jns    c0011480 <Virt::setupPageSwapping(int)+0x7b>
c001147d:	83 c3 0f             	add    ebx,0xf
c0011480:	c1 fb 04             	sar    ebx,0x4
c0011483:	4b                   	dec    ebx
c0011484:	83 fb ff             	cmp    ebx,0xffffffff
c0011487:	74 4b                	je     c00114d4 <Virt::setupPageSwapping(int)+0xcf>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	8b 06                	mov    eax,DWORD PTR [esi]
c001148e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011492:	52                   	push   edx
c0011493:	57                   	push   edi
c0011494:	6a 00                	push   0x0
c0011496:	68 00 00 01 00       	push   0x10000
c001149b:	56                   	push   esi
c001149c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001149f:	83 c4 20             	add    esp,0x20
c00114a2:	85 c0                	test   eax,eax
c00114a4:	75 4e                	jne    c00114f4 <Virt::setupPageSwapping(int)+0xef>
c00114a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114aa:	3d 00 00 01 00       	cmp    eax,0x10000
c00114af:	74 d2                	je     c0011483 <Virt::setupPageSwapping(int)+0x7e>
c00114b1:	83 ec 08             	sub    esp,0x8
c00114b4:	4b                   	dec    ebx
c00114b5:	50                   	push   eax
c00114b6:	68 86 70 02 c0       	push   0xc0027086
c00114bb:	e8 93 0d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00114c0:	c7 04 24 8f 70 02 c0 	mov    DWORD PTR [esp],0xc002708f
c00114c7:	e8 05 75 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	83 fb ff             	cmp    ebx,0xffffffff
c00114d2:	75 b5                	jne    c0011489 <Virt::setupPageSwapping(int)+0x84>
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	56                   	push   esi
c00114d8:	e8 67 13 00 00       	call   c0012844 <File::close()>
c00114dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114e0:	e8 67 dc ff ff       	call   c000f14c <rfree>
c00114e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00114ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114ed:	83 c4 20             	add    esp,0x20
c00114f0:	5b                   	pop    ebx
c00114f1:	5e                   	pop    esi
c00114f2:	5f                   	pop    edi
c00114f3:	c3                   	ret    
c00114f4:	83 ec 08             	sub    esp,0x8
c00114f7:	50                   	push   eax
c00114f8:	68 6e 70 02 c0       	push   0xc002706e
c00114fd:	e8 51 0d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	eb 9f                	jmp    c00114a6 <Virt::setupPageSwapping(int)+0xa1>
c0011507:	83 ec 08             	sub    esp,0x8
c001150a:	50                   	push   eax
c001150b:	68 4a 70 02 c0       	push   0xc002704a
c0011510:	e8 3e 0d 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0011515:	c7 04 24 53 70 02 c0 	mov    DWORD PTR [esp],0xc0027053
c001151c:	e8 b0 74 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	e9 1f ff ff ff       	jmp    c0011448 <Virt::setupPageSwapping(int)+0x43>
c0011529:	90                   	nop

c001152a <VAS::VAS()>:
c001152a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011539:	a3 c4 a5 02 c0       	mov    ds:0xc002a5c4,eax
c001153e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011542:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001154d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011551:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011558:	90                   	nop
c0011559:	c3                   	ret    

c001155a <VAS::VAS(VAS*)>:
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011561:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	68 a4 6e 02 c0       	push   0xc0026ea4
c0011570:	e8 5c 74 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	90                   	nop
c0011579:	83 c4 0c             	add    esp,0xc
c001157c:	c3                   	ret    
c001157d:	90                   	nop

c001157e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001157e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011582:	89 c2                	mov    edx,eax
c0011584:	c1 e8 0a             	shr    eax,0xa
c0011587:	c1 ea 16             	shr    edx,0x16
c001158a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001158f:	19 c9                	sbb    ecx,ecx
c0011591:	c1 e2 0c             	shl    edx,0xc
c0011594:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001159a:	25 fc 0f 00 00       	and    eax,0xffc
c001159f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115a6:	01 d0                	add    eax,edx
c00115a8:	c3                   	ret    
c00115a9:	90                   	nop

c00115aa <VAS::getPageTableEntry(unsigned long)>:
c00115aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115ae:	89 ca                	mov    edx,ecx
c00115b0:	c1 e9 0a             	shr    ecx,0xa
c00115b3:	c1 ea 16             	shr    edx,0x16
c00115b6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115bc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115c2:	c1 e0 0c             	shl    eax,0xc
c00115c5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115c8:	c3                   	ret    

c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115c9:	57                   	push   edi
c00115ca:	56                   	push   esi
c00115cb:	be 01 00 00 00       	mov    esi,0x1
c00115d0:	53                   	push   ebx
c00115d1:	83 ec 10             	sub    esp,0x10
c00115d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115d8:	c1 eb 0c             	shr    ebx,0xc
c00115db:	eb 3f                	jmp    c001161c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115dd:	e8 1d fe ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c00115e2:	83 ec 08             	sub    esp,0x8
c00115e5:	57                   	push   edi
c00115e6:	50                   	push   eax
c00115e7:	e8 be ff ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115f5:	f6 c4 04             	test   ah,0x4
c00115f8:	75 5f                	jne    c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00115fa:	80 fa 04             	cmp    dl,0x4
c00115fd:	74 78                	je     c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00115ff:	80 fa 02             	cmp    dl,0x2
c0011602:	0f 84 88 00 00 00    	je     c0011690 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011608:	80 fa 03             	cmp    dl,0x3
c001160b:	0f 84 ad 00 00 00    	je     c00116be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011611:	fe ca                	dec    dl
c0011613:	0f 84 92 00 00 00    	je     c00116ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011619:	43                   	inc    ebx
c001161a:	31 f6                	xor    esi,esi
c001161c:	53                   	push   ebx
c001161d:	e8 29 fc ff ff       	call   c001124b <Virt::getPageState(unsigned long)>
c0011622:	5f                   	pop    edi
c0011623:	89 df                	mov    edi,ebx
c0011625:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011629:	c1 e7 0c             	shl    edi,0xc
c001162c:	84 c0                	test   al,al
c001162e:	75 ad                	jne    c00115dd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	68 95 70 02 c0       	push   0xc0027095
c0011638:	e8 94 73 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c001163d:	e8 bd fd ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c0011642:	5a                   	pop    edx
c0011643:	59                   	pop    ecx
c0011644:	57                   	push   edi
c0011645:	50                   	push   eax
c0011646:	e8 5f ff ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c001164b:	83 c4 10             	add    esp,0x10
c001164e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011650:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011654:	f6 c4 04             	test   ah,0x4
c0011657:	74 c0                	je     c0011619 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011659:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001165d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	50                   	push   eax
c0011666:	e8 e1 df ff ff       	call   c000f64c <Phys::freePage(unsigned long)>
c001166b:	83 c4 10             	add    esp,0x10
c001166e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011672:	80 fa 04             	cmp    dl,0x4
c0011675:	75 88                	jne    c00115ff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011677:	89 f0                	mov    eax,esi
c0011679:	84 c0                	test   al,al
c001167b:	75 47                	jne    c00116c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001167d:	c7 44 24 20 c8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ec8
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	5b                   	pop    ebx
c0011689:	5e                   	pop    esi
c001168a:	5f                   	pop    edi
c001168b:	e9 41 73 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>
c0011690:	89 f0                	mov    eax,esi
c0011692:	84 c0                	test   al,al
c0011694:	75 15                	jne    c00116ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011696:	83 ec 0c             	sub    esp,0xc
c0011699:	68 b1 70 02 c0       	push   0xc00270b1
c001169e:	e8 2e 73 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00116a3:	83 c4 10             	add    esp,0x10
c00116a6:	e9 6e ff ff ff       	jmp    c0011619 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ab:	83 ec 08             	sub    esp,0x8
c00116ae:	6a 00                	push   0x0
c00116b0:	53                   	push   ebx
c00116b1:	e8 60 fb ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	e9 5b ff ff ff       	jmp    c0011619 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116be:	89 f0                	mov    eax,esi
c00116c0:	84 c0                	test   al,al
c00116c2:	75 15                	jne    c00116d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	6a 00                	push   0x0
c00116c9:	53                   	push   ebx
c00116ca:	e8 47 fb ff ff       	call   c0011216 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	5b                   	pop    ebx
c00116d6:	5e                   	pop    esi
c00116d7:	5f                   	pop    edi
c00116d8:	c3                   	ret    
c00116d9:	c7 44 24 20 cd 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270cd
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	5b                   	pop    ebx
c00116e5:	5e                   	pop    esi
c00116e6:	5f                   	pop    edi
c00116e7:	e9 e5 72 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>

c00116ec <VAS::freeAllocatedPages(unsigned long)>:
c00116ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00116f8:	74 09                	je     c0011703 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00116fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00116fe:	e9 c6 fe ff ff       	jmp    c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011703:	c7 44 24 04 ec 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026eec
c001170b:	e9 43 0b 00 00       	jmp    c0012253 <Dbg::kprintf(char const*, ...)>

c0011710 <VAS::virtualToPhysical(unsigned long)>:
c0011710:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011714:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011718:	e8 8d fe ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c001171d:	5a                   	pop    edx
c001171e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011720:	59                   	pop    ecx
c0011721:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011726:	c3                   	ret    
c0011727:	90                   	nop

c0011728 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011728:	55                   	push   ebp
c0011729:	57                   	push   edi
c001172a:	56                   	push   esi
c001172b:	53                   	push   ebx
c001172c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011730:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011738:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001173c:	85 db                	test   ebx,ebx
c001173e:	7e 22                	jle    c0011762 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011740:	c1 e3 0c             	shl    ebx,0xc
c0011743:	01 f3                	add    ebx,esi
c0011745:	56                   	push   esi
c0011746:	81 c6 00 10 00 00    	add    esi,0x1000
c001174c:	55                   	push   ebp
c001174d:	e8 58 fe ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c0011752:	5a                   	pop    edx
c0011753:	59                   	pop    ecx
c0011754:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011756:	21 f9                	and    ecx,edi
c0011758:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001175c:	39 f3                	cmp    ebx,esi
c001175e:	89 08                	mov    DWORD PTR [eax],ecx
c0011760:	75 e3                	jne    c0011745 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011762:	5b                   	pop    ebx
c0011763:	5e                   	pop    esi
c0011764:	5f                   	pop    edi
c0011765:	5d                   	pop    ebp
c0011766:	c3                   	ret    
c0011767:	90                   	nop

c0011768 <VAS::setToWriteCombining(unsigned long, int)>:
c0011768:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001176d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011773:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001177a:	75 01                	jne    c001177d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001177c:	c3                   	ret    
c001177d:	68 80 00 00 00       	push   0x80
c0011782:	6a ff                	push   0xffffffff
c0011784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001178c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011790:	e8 93 ff ff ff       	call   c0011728 <VAS::reflagRange(unsigned long, int, int, int)>
c0011795:	83 c4 14             	add    esp,0x14
c0011798:	c3                   	ret    
c0011799:	90                   	nop

c001179a <VAS::mapOtherVASIn(bool, VAS*)>:
c001179a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001179f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117a3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117ad:	19 c0                	sbb    eax,eax
c00117af:	83 ca 03             	or     edx,0x3
c00117b2:	83 e0 fc             	and    eax,0xfffffffc
c00117b5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117bc:	0f 20 d8             	mov    eax,cr3
c00117bf:	0f 22 d8             	mov    cr3,eax
c00117c2:	c3                   	ret    
c00117c3:	90                   	nop

c00117c4 <VAS::~VAS()>:
c00117c4:	83 ec 2c             	sub    esp,0x2c
c00117c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117cf:	e8 46 a1 00 00       	call   c001b91a <lockScheduler()>
c00117d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00117db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117de:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117e4:	83 ec 04             	sub    esp,0x4
c00117e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117eb:	6a 01                	push   0x1
c00117ed:	50                   	push   eax
c00117ee:	e8 a7 ff ff ff       	call   c001179a <VAS::mapOtherVASIn(bool, VAS*)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117fe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011806:	0f 8f d7 00 00 00    	jg     c00118e3 <VAS::~VAS()+0x11f>
c001180c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011810:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011817:	c1 e2 02             	shl    edx,0x2
c001181a:	01 d0                	add    eax,edx
c001181c:	8b 00                	mov    eax,DWORD PTR [eax]
c001181e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	83 e0 01             	and    eax,0x1
c0011829:	0f 84 ab 00 00 00    	je     c00118da <VAS::~VAS()+0x116>
c001182f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011837:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001183f:	7f 75                	jg     c00118b6 <VAS::~VAS()+0xf2>
c0011841:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011845:	c1 e0 0a             	shl    eax,0xa
c0011848:	89 c2                	mov    edx,eax
c001184a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001184e:	01 d0                	add    eax,edx
c0011850:	c1 e0 0c             	shl    eax,0xc
c0011853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011857:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001185c:	8b 00                	mov    eax,DWORD PTR [eax]
c001185e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011861:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011867:	83 ec 04             	sub    esp,0x4
c001186a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001186e:	6a 01                	push   0x1
c0011870:	50                   	push   eax
c0011871:	e8 08 fd ff ff       	call   c001157e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001187d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011881:	8b 00                	mov    eax,DWORD PTR [eax]
c0011883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188b:	25 01 04 00 00       	and    eax,0x401
c0011890:	3d 01 04 00 00       	cmp    eax,0x401
c0011895:	75 19                	jne    c00118b0 <VAS::~VAS()+0xec>
c0011897:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	50                   	push   eax
c00118a4:	e8 a3 dd ff ff       	call   c000f64c <Phys::freePage(unsigned long)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118b0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118b4:	eb 81                	jmp    c0011837 <VAS::~VAS()+0x73>
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	25 00 04 00 00       	and    eax,0x400
c00118bf:	74 19                	je     c00118da <VAS::~VAS()+0x116>
c00118c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	50                   	push   eax
c00118ce:	e8 79 dd ff ff       	call   c000f64c <Phys::freePage(unsigned long)>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118da:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118de:	e9 1b ff ff ff       	jmp    c00117fe <VAS::~VAS()+0x3a>
c00118e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118ea:	83 ec 0c             	sub    esp,0xc
c00118ed:	50                   	push   eax
c00118ee:	e8 d6 fc ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	50                   	push   eax
c0011901:	e8 46 dd ff ff       	call   c000f64c <Phys::freePage(unsigned long)>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001190d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011911:	c1 e0 02             	shl    eax,0x2
c0011914:	83 ec 08             	sub    esp,0x8
c0011917:	50                   	push   eax
c0011918:	68 10 6f 02 c0       	push   0xc0026f10
c001191d:	e8 31 09 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	e8 f2 9f 00 00       	call   c001b91c <unlockScheduler()>
c001192a:	90                   	nop
c001192b:	83 c4 2c             	add    esp,0x2c
c001192e:	c3                   	ret    
c001192f:	90                   	nop

c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011930:	55                   	push   ebp
c0011931:	57                   	push   edi
c0011932:	56                   	push   esi
c0011933:	53                   	push   ebx
c0011934:	83 ec 1c             	sub    esp,0x1c
c0011937:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001193b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001193f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011945:	77 08                	ja     c001194f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011947:	0f 20 d8             	mov    eax,cr3
c001194a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001194d:	75 47                	jne    c0011996 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001194f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011953:	09 d8                	or     eax,ebx
c0011955:	a9 ff 0f 00 00       	test   eax,0xfff
c001195a:	75 57                	jne    c00119b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001195c:	89 de                	mov    esi,ebx
c001195e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011961:	c1 ee 16             	shr    esi,0x16
c0011964:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001196b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001196f:	74 54                	je     c00119c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011971:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011975:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001197b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001197f:	c1 e6 0c             	shl    esi,0xc
c0011982:	c1 eb 0a             	shr    ebx,0xa
c0011985:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001198b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001198e:	83 c4 1c             	add    esp,0x1c
c0011991:	5b                   	pop    ebx
c0011992:	5e                   	pop    esi
c0011993:	5f                   	pop    edi
c0011994:	5d                   	pop    ebp
c0011995:	c3                   	ret    
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	68 30 6f 02 c0       	push   0xc0026f30
c001199e:	e8 b0 08 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119aa:	09 d8                	or     eax,ebx
c00119ac:	a9 ff 0f 00 00       	test   eax,0xfff
c00119b1:	74 a9                	je     c001195c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	68 98 6f 02 c0       	push   0xc0026f98
c00119bb:	e8 11 70 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	eb 97                	jmp    c001195c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119c9:	e8 08 dd ff ff       	call   c000f6d6 <Phys::allocatePage()>
c00119ce:	89 c5                	mov    ebp,eax
c00119d0:	e8 2a fa ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119dc:	6a 01                	push   0x1
c00119de:	e8 8c f8 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c00119e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119ea:	6a 01                	push   0x1
c00119ec:	50                   	push   eax
c00119ed:	55                   	push   ebp
c00119ee:	81 cd 07 04 00 00    	or     ebp,0x407
c00119f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119f8:	51                   	push   ecx
c00119f9:	e8 26 02 00 00       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119fe:	83 c4 1c             	add    esp,0x1c
c0011a01:	68 00 10 00 00       	push   0x1000
c0011a06:	6a 00                	push   0x0
c0011a08:	50                   	push   eax
c0011a09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a0d:	e8 6b ec fe ff       	call   c000067d <memset>
c0011a12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a16:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a19:	e8 ab fb ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a22:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a2b:	e9 41 ff ff ff       	jmp    c0011971 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a30 <VAS::allocatePages(int, int)>:
c0011a30:	55                   	push   ebp
c0011a31:	57                   	push   edi
c0011a32:	56                   	push   esi
c0011a33:	53                   	push   ebx
c0011a34:	83 ec 1c             	sub    esp,0x1c
c0011a37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a3b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011a40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a46:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a4c:	83 e0 01             	and    eax,0x1
c0011a4f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a53:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a57:	0f 85 cc 00 00 00    	jne    c0011b29 <VAS::allocatePages(int, int)+0xf9>
c0011a5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a64:	85 c0                	test   eax,eax
c0011a66:	0f 84 a1 00 00 00    	je     c0011b0d <VAS::allocatePages(int, int)+0xdd>
c0011a6c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a74:	c1 e6 0c             	shl    esi,0xc
c0011a77:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a7b:	85 c0                	test   eax,eax
c0011a7d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a80:	7e 33                	jle    c0011ab5 <VAS::allocatePages(int, int)+0x85>
c0011a82:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a86:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a8a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a90:	e8 41 dc ff ff       	call   c000f6d6 <Phys::allocatePage()>
c0011a95:	55                   	push   ebp
c0011a96:	53                   	push   ebx
c0011a97:	50                   	push   eax
c0011a98:	57                   	push   edi
c0011a99:	e8 92 fe ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a9e:	83 c4 10             	add    esp,0x10
c0011aa1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aa6:	74 03                	je     c0011aab <VAS::allocatePages(int, int)+0x7b>
c0011aa8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aab:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ab1:	39 de                	cmp    esi,ebx
c0011ab3:	75 db                	jne    c0011a90 <VAS::allocatePages(int, int)+0x60>
c0011ab5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aba:	75 12                	jne    c0011ace <VAS::allocatePages(int, int)+0x9e>
c0011abc:	0f 20 d8             	mov    eax,cr3
c0011abf:	0f 22 d8             	mov    cr3,eax
c0011ac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ac6:	83 c4 1c             	add    esp,0x1c
c0011ac9:	5b                   	pop    ebx
c0011aca:	5e                   	pop    esi
c0011acb:	5f                   	pop    edi
c0011acc:	5d                   	pop    ebp
c0011acd:	c3                   	ret    
c0011ace:	c1 ee 0a             	shr    esi,0xa
c0011ad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011adb:	c1 eb 0a             	shr    ebx,0xa
c0011ade:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ae4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011aea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011af0:	39 c3                	cmp    ebx,eax
c0011af2:	77 ce                	ja     c0011ac2 <VAS::allocatePages(int, int)+0x92>
c0011af4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011af7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011afd:	39 d8                	cmp    eax,ebx
c0011aff:	73 f3                	jae    c0011af4 <VAS::allocatePages(int, int)+0xc4>
c0011b01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b05:	83 c4 1c             	add    esp,0x1c
c0011b08:	5b                   	pop    ebx
c0011b09:	5e                   	pop    esi
c0011b0a:	5f                   	pop    edi
c0011b0b:	5d                   	pop    ebp
c0011b0c:	c3                   	ret    
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	68 bc 6f 02 c0       	push   0xc0026fbc
c0011b15:	e8 b7 6e 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0011b1a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	e9 43 ff ff ff       	jmp    c0011a6c <VAS::allocatePages(int, int)+0x3c>
c0011b29:	83 ec 0c             	sub    esp,0xc
c0011b2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b30:	e8 3a f7 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c0011b35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b41:	0f 87 9b 00 00 00    	ja     c0011be2 <VAS::allocatePages(int, int)+0x1b2>
c0011b47:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b4b:	85 d2                	test   edx,edx
c0011b4d:	7e 3c                	jle    c0011b8b <VAS::allocatePages(int, int)+0x15b>
c0011b4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b53:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b5b:	c1 e5 0c             	shl    ebp,0xc
c0011b5e:	81 ce 00 04 00 00    	or     esi,0x400
c0011b64:	01 dd                	add    ebp,ebx
c0011b66:	e8 6b db ff ff       	call   c000f6d6 <Phys::allocatePage()>
c0011b6b:	56                   	push   esi
c0011b6c:	53                   	push   ebx
c0011b6d:	50                   	push   eax
c0011b6e:	57                   	push   edi
c0011b6f:	e8 bc fd ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b74:	83 c4 10             	add    esp,0x10
c0011b77:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b7c:	74 03                	je     c0011b81 <VAS::allocatePages(int, int)+0x151>
c0011b7e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b81:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b87:	39 dd                	cmp    ebp,ebx
c0011b89:	75 db                	jne    c0011b66 <VAS::allocatePages(int, int)+0x136>
c0011b8b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b90:	0f 84 26 ff ff ff    	je     c0011abc <VAS::allocatePages(int, int)+0x8c>
c0011b96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b9e:	89 d3                	mov    ebx,edx
c0011ba0:	c1 e0 0c             	shl    eax,0xc
c0011ba3:	c1 eb 0a             	shr    ebx,0xa
c0011ba6:	01 d0                	add    eax,edx
c0011ba8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bae:	c1 e8 0a             	shr    eax,0xa
c0011bb1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bbc:	2d 00 00 40 00       	sub    eax,0x400000
c0011bc1:	39 c3                	cmp    ebx,eax
c0011bc3:	0f 87 f9 fe ff ff    	ja     c0011ac2 <VAS::allocatePages(int, int)+0x92>
c0011bc9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bcc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bd2:	39 d8                	cmp    eax,ebx
c0011bd4:	73 f3                	jae    c0011bc9 <VAS::allocatePages(int, int)+0x199>
c0011bd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bda:	83 c4 1c             	add    esp,0x1c
c0011bdd:	5b                   	pop    ebx
c0011bde:	5e                   	pop    esi
c0011bdf:	5f                   	pop    edi
c0011be0:	5d                   	pop    ebp
c0011be1:	c3                   	ret    
c0011be2:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011be7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bed:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011bf4:	0f 84 4d ff ff ff    	je     c0011b47 <VAS::allocatePages(int, int)+0x117>
c0011bfa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c02:	e9 40 ff ff ff       	jmp    c0011b47 <VAS::allocatePages(int, int)+0x117>
c0011c07:	90                   	nop

c0011c08 <VAS::setCPUSpecific(unsigned long)>:
c0011c08:	83 ec 0c             	sub    esp,0xc
c0011c0b:	6a 05                	push   0x5
c0011c0d:	68 00 00 40 c2       	push   0xc2400000
c0011c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c1a:	e8 11 fd ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	c3                   	ret    
c0011c23:	90                   	nop

c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c24:	55                   	push   ebp
c0011c25:	57                   	push   edi
c0011c26:	56                   	push   esi
c0011c27:	53                   	push   ebx
c0011c28:	83 ec 1c             	sub    esp,0x1c
c0011c2b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011c30:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c3e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c44:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c48:	83 e0 01             	and    eax,0x1
c0011c4b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c53:	85 c0                	test   eax,eax
c0011c55:	7e 39                	jle    c0011c90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c5b:	89 f3                	mov    ebx,esi
c0011c5d:	c1 e0 0c             	shl    eax,0xc
c0011c60:	01 f0                	add    eax,esi
c0011c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c66:	55                   	push   ebp
c0011c67:	53                   	push   ebx
c0011c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6c:	29 f0                	sub    eax,esi
c0011c6e:	01 d8                	add    eax,ebx
c0011c70:	50                   	push   eax
c0011c71:	57                   	push   edi
c0011c72:	e8 b9 fc ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c77:	83 c4 10             	add    esp,0x10
c0011c7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c7f:	74 03                	je     c0011c84 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011c81:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c84:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c8a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c8e:	75 d6                	jne    c0011c66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011c90:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c95:	75 10                	jne    c0011ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011c97:	0f 20 d8             	mov    eax,cr3
c0011c9a:	0f 22 d8             	mov    cr3,eax
c0011c9d:	83 c4 1c             	add    esp,0x1c
c0011ca0:	89 f0                	mov    eax,esi
c0011ca2:	5b                   	pop    ebx
c0011ca3:	5e                   	pop    esi
c0011ca4:	5f                   	pop    edi
c0011ca5:	5d                   	pop    ebp
c0011ca6:	c3                   	ret    
c0011ca7:	89 f3                	mov    ebx,esi
c0011ca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cad:	c1 eb 0a             	shr    ebx,0xa
c0011cb0:	c1 e0 0c             	shl    eax,0xc
c0011cb3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cb9:	01 f0                	add    eax,esi
c0011cbb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cc1:	c1 e8 0a             	shr    eax,0xa
c0011cc4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cc9:	2d 00 00 40 00       	sub    eax,0x400000
c0011cce:	39 c3                	cmp    ebx,eax
c0011cd0:	77 cb                	ja     c0011c9d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011cd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdb:	39 d8                	cmp    eax,ebx
c0011cdd:	73 f3                	jae    c0011cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011cdf:	83 c4 1c             	add    esp,0x1c
c0011ce2:	89 f0                	mov    eax,esi
c0011ce4:	5b                   	pop    ebx
c0011ce5:	5e                   	pop    esi
c0011ce6:	5f                   	pop    edi
c0011ce7:	5d                   	pop    ebp
c0011ce8:	c3                   	ret    
c0011ce9:	90                   	nop

c0011cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011cea:	55                   	push   ebp
c0011ceb:	57                   	push   edi
c0011cec:	56                   	push   esi
c0011ced:	53                   	push   ebx
c0011cee:	83 ec 1c             	sub    esp,0x1c
c0011cf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011cf9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011cfd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d01:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d06:	75 4a                	jne    c0011d52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d08:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d0c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d0f:	c1 eb 16             	shr    ebx,0x16
c0011d12:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d19:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d1d:	74 4d                	je     c0011d6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d23:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d27:	c1 e8 0a             	shr    eax,0xa
c0011d2a:	80 fa 01             	cmp    dl,0x1
c0011d2d:	19 d2                	sbb    edx,edx
c0011d2f:	c1 e3 0c             	shl    ebx,0xc
c0011d32:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d36:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d3c:	25 fc 0f 00 00       	and    eax,0xffc
c0011d41:	01 d8                	add    eax,ebx
c0011d43:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d4a:	83 c4 1c             	add    esp,0x1c
c0011d4d:	5b                   	pop    ebx
c0011d4e:	5e                   	pop    esi
c0011d4f:	5f                   	pop    edi
c0011d50:	5d                   	pop    ebp
c0011d51:	c3                   	ret    
c0011d52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d56:	83 ec 0c             	sub    esp,0xc
c0011d59:	68 e8 6f 02 c0       	push   0xc0026fe8
c0011d5e:	e8 6e 6c 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d6a:	eb 9c                	jmp    c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d70:	e8 61 d9 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c0011d75:	89 c5                	mov    ebp,eax
c0011d77:	e8 83 f6 ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c0011d7c:	83 ec 0c             	sub    esp,0xc
c0011d7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d83:	6a 01                	push   0x1
c0011d85:	e8 e5 f4 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c0011d8a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d91:	6a 01                	push   0x1
c0011d93:	50                   	push   eax
c0011d94:	55                   	push   ebp
c0011d95:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d9b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d9f:	51                   	push   ecx
c0011da0:	e8 7f fe ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011da5:	83 c4 1c             	add    esp,0x1c
c0011da8:	68 00 10 00 00       	push   0x1000
c0011dad:	6a 00                	push   0x0
c0011daf:	50                   	push   eax
c0011db0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011db4:	e8 c4 e8 fe ff       	call   c000067d <memset>
c0011db9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dbd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dc0:	e8 04 f8 ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dc5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dc8:	83 c4 10             	add    esp,0x10
c0011dcb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dd2:	e9 48 ff ff ff       	jmp    c0011d1f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011dd7:	90                   	nop

c0011dd8 <VAS::VAS(bool)>:
c0011dd8:	53                   	push   ebx
c0011dd9:	83 ec 28             	sub    esp,0x28
c0011ddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011de0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011df3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011df7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011dfa:	e8 d7 d8 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c0011dff:	89 c2                	mov    edx,eax
c0011e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e08:	e8 f2 f5 ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c0011e0d:	89 c3                	mov    ebx,eax
c0011e0f:	83 ec 0c             	sub    esp,0xc
c0011e12:	6a 01                	push   0x1
c0011e14:	e8 56 f4 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c0011e19:	83 c4 10             	add    esp,0x10
c0011e1c:	89 c2                	mov    edx,eax
c0011e1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e25:	83 ec 0c             	sub    esp,0xc
c0011e28:	6a 03                	push   0x3
c0011e2a:	6a 01                	push   0x1
c0011e2c:	52                   	push   edx
c0011e2d:	50                   	push   eax
c0011e2e:	53                   	push   ebx
c0011e2f:	e8 f0 fd ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e34:	83 c4 20             	add    esp,0x20
c0011e37:	89 c2                	mov    edx,eax
c0011e39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e40:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e48:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e50:	7f 1c                	jg     c0011e6e <VAS::VAS(bool)+0x96>
c0011e52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e5d:	c1 e2 02             	shl    edx,0x2
c0011e60:	01 d0                	add    eax,edx
c0011e62:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e68:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e6c:	eb da                	jmp    c0011e48 <VAS::VAS(bool)+0x70>
c0011e6e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e76:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e7e:	7f 7a                	jg     c0011efa <VAS::VAS(bool)+0x122>
c0011e80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e84:	2d 00 02 00 00       	sub    eax,0x200
c0011e89:	c1 e0 0c             	shl    eax,0xc
c0011e8c:	83 c8 03             	or     eax,0x3
c0011e8f:	89 c2                	mov    edx,eax
c0011e91:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011e96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ea2:	83 e0 10             	and    eax,0x10
c0011ea5:	84 c0                	test   al,al
c0011ea7:	74 07                	je     c0011eb0 <VAS::VAS(bool)+0xd8>
c0011ea9:	b8 00 01 00 00       	mov    eax,0x100
c0011eae:	eb 05                	jmp    c0011eb5 <VAS::VAS(bool)+0xdd>
c0011eb0:	b8 00 00 00 00       	mov    eax,0x0
c0011eb5:	09 d0                	or     eax,edx
c0011eb7:	89 c1                	mov    ecx,eax
c0011eb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ec0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ec4:	c1 e2 02             	shl    edx,0x2
c0011ec7:	01 d0                	add    eax,edx
c0011ec9:	89 ca                	mov    edx,ecx
c0011ecb:	89 10                	mov    DWORD PTR [eax],edx
c0011ecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ed1:	2d 40 03 00 00       	sub    eax,0x340
c0011ed6:	83 f8 7f             	cmp    eax,0x7f
c0011ed9:	77 16                	ja     c0011ef1 <VAS::VAS(bool)+0x119>
c0011edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011edf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ee2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ee6:	c1 e2 02             	shl    edx,0x2
c0011ee9:	01 d0                	add    eax,edx
c0011eeb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ef1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ef5:	e9 7c ff ff ff       	jmp    c0011e76 <VAS::VAS(bool)+0x9e>
c0011efa:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011eff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f05:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f0b:	83 e0 10             	and    eax,0x10
c0011f0e:	84 c0                	test   al,al
c0011f10:	74 07                	je     c0011f19 <VAS::VAS(bool)+0x141>
c0011f12:	b8 03 41 00 00       	mov    eax,0x4103
c0011f17:	eb 05                	jmp    c0011f1e <VAS::VAS(bool)+0x146>
c0011f19:	b8 03 40 00 00       	mov    eax,0x4003
c0011f1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f22:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f25:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f2b:	89 02                	mov    DWORD PTR [edx],eax
c0011f2d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f38:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f3e:	83 ec 08             	sub    esp,0x8
c0011f41:	50                   	push   eax
c0011f42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f46:	e8 bd fc ff ff       	call   c0011c08 <VAS::setCPUSpecific(unsigned long)>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f52:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011f55:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f60:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f66:	83 e0 10             	and    eax,0x10
c0011f69:	84 c0                	test   al,al
c0011f6b:	74 07                	je     c0011f74 <VAS::VAS(bool)+0x19c>
c0011f6d:	b8 00 01 00 00       	mov    eax,0x100
c0011f72:	eb 05                	jmp    c0011f79 <VAS::VAS(bool)+0x1a1>
c0011f74:	b8 00 00 00 00       	mov    eax,0x0
c0011f79:	09 c2                	or     edx,eax
c0011f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f82:	05 fc 0f 00 00       	add    eax,0xffc
c0011f87:	83 ca 03             	or     edx,0x3
c0011f8a:	89 10                	mov    DWORD PTR [eax],edx
c0011f8c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011f91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f97:	83 ec 0c             	sub    esp,0xc
c0011f9a:	50                   	push   eax
c0011f9b:	e8 70 19 00 00       	call   c0013910 <Device::getName()>
c0011fa0:	83 c4 10             	add    esp,0x10
c0011fa3:	83 ec 08             	sub    esp,0x8
c0011fa6:	68 e7 70 02 c0       	push   0xc00270e7
c0011fab:	50                   	push   eax
c0011fac:	e8 bc e7 fe ff       	call   c000076d <strcmp>
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	85 c0                	test   eax,eax
c0011fb6:	0f 94 c0             	sete   al
c0011fb9:	84 c0                	test   al,al
c0011fbb:	74 70                	je     c001202d <VAS::VAS(bool)+0x255>
c0011fbd:	e8 3b 99 00 00       	call   c001b8fd <disableIRQs()>
c0011fc2:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011fc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcd:	05 7c 09 00 00       	add    eax,0x97c
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	50                   	push   eax
c0011fd6:	e8 cd cb ff ff       	call   c000eba8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe3:	89 c3                	mov    ebx,eax
c0011fe5:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011fea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff0:	05 7c 09 00 00       	add    eax,0x97c
c0011ff5:	83 ec 0c             	sub    esp,0xc
c0011ff8:	50                   	push   eax
c0011ff9:	e8 aa cb ff ff       	call   c000eba8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ffe:	83 c4 10             	add    esp,0x10
c0012001:	83 ec 08             	sub    esp,0x8
c0012004:	50                   	push   eax
c0012005:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012009:	e8 9c f5 ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c001200e:	83 c4 10             	add    esp,0x10
c0012011:	8b 00                	mov    eax,DWORD PTR [eax]
c0012013:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012018:	6a 11                	push   0x11
c001201a:	53                   	push   ebx
c001201b:	50                   	push   eax
c001201c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012020:	e8 0b f9 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	e8 de 98 00 00       	call   c001b90b <enableIRQs()>
c001202d:	90                   	nop
c001202e:	83 c4 28             	add    esp,0x28
c0012031:	5b                   	pop    ebx
c0012032:	c3                   	ret    

c0012033 <mapVASFirstTime>:
c0012033:	55                   	push   ebp
c0012034:	57                   	push   edi
c0012035:	56                   	push   esi
c0012036:	53                   	push   ebx
c0012037:	83 ec 0c             	sub    esp,0xc
c001203a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001203f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012042:	4a                   	dec    edx
c0012043:	0f 84 8e 00 00 00    	je     c00120d7 <mapVASFirstTime+0xa4>
c0012049:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001204c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001204f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012054:	c1 e5 15             	shl    ebp,0x15
c0012057:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001205c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012062:	29 eb                	sub    ebx,ebp
c0012064:	29 ee                	sub    esi,ebp
c0012066:	e8 6b d6 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	68 03 04 00 00       	push   0x403
c0012073:	6a 01                	push   0x1
c0012075:	53                   	push   ebx
c0012076:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001207c:	50                   	push   eax
c001207d:	57                   	push   edi
c001207e:	e8 a1 fb ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012083:	83 c4 20             	add    esp,0x20
c0012086:	39 f3                	cmp    ebx,esi
c0012088:	75 dc                	jne    c0012066 <mapVASFirstTime+0x33>
c001208a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001208f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012094:	29 ee                	sub    esi,ebp
c0012096:	29 e8                	sub    eax,ebp
c0012098:	89 c5                	mov    ebp,eax
c001209a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001209e:	19 db                	sbb    ebx,ebx
c00120a0:	e8 31 d6 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c00120a5:	83 e3 04             	and    ebx,0x4
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	81 c3 03 04 00 00    	add    ebx,0x403
c00120b1:	53                   	push   ebx
c00120b2:	6a 01                	push   0x1
c00120b4:	56                   	push   esi
c00120b5:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120bb:	50                   	push   eax
c00120bc:	57                   	push   edi
c00120bd:	e8 62 fb ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120c2:	83 c4 20             	add    esp,0x20
c00120c5:	39 f5                	cmp    ebp,esi
c00120c7:	75 d1                	jne    c001209a <mapVASFirstTime+0x67>
c00120c9:	0f 20 d8             	mov    eax,cr3
c00120cc:	0f 22 d8             	mov    cr3,eax
c00120cf:	83 c4 0c             	add    esp,0xc
c00120d2:	5b                   	pop    ebx
c00120d3:	5e                   	pop    esi
c00120d4:	5f                   	pop    edi
c00120d5:	5d                   	pop    ebp
c00120d6:	c3                   	ret    
c00120d7:	83 ec 0c             	sub    esp,0xc
c00120da:	68 f5 70 02 c0       	push   0xc00270f5
c00120df:	e8 6f 01 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00120e4:	83 c4 10             	add    esp,0x10
c00120e7:	83 c4 0c             	add    esp,0xc
c00120ea:	5b                   	pop    ebx
c00120eb:	5e                   	pop    esi
c00120ec:	5f                   	pop    edi
c00120ed:	5d                   	pop    ebp
c00120ee:	c3                   	ret    

c00120ef <__cxa_atexit>:
c00120ef:	31 c0                	xor    eax,eax
c00120f1:	c3                   	ret    

c00120f2 <__cxa_finalize>:
c00120f2:	c3                   	ret    

c00120f3 <__stack_chk_fail>:
c00120f3:	55                   	push   ebp
c00120f4:	89 e5                	mov    ebp,esp
c00120f6:	83 ec 10             	sub    esp,0x10
c00120f9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120fc:	68 0e 71 02 c0       	push   0xc002710e
c0012101:	e8 4d 01 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0012106:	58                   	pop    eax
c0012107:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001210a:	5a                   	pop    edx
c001210b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210e:	68 0e 71 02 c0       	push   0xc002710e
c0012113:	e8 3b 01 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0012118:	59                   	pop    ecx
c0012119:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211c:	5a                   	pop    edx
c001211d:	8b 00                	mov    eax,DWORD PTR [eax]
c001211f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012122:	68 0e 71 02 c0       	push   0xc002710e
c0012127:	e8 27 01 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001212c:	59                   	pop    ecx
c001212d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012130:	5a                   	pop    edx
c0012131:	8b 00                	mov    eax,DWORD PTR [eax]
c0012133:	8b 00                	mov    eax,DWORD PTR [eax]
c0012135:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012138:	68 0e 71 02 c0       	push   0xc002710e
c001213d:	e8 11 01 00 00       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0012142:	c7 04 24 16 71 02 c0 	mov    DWORD PTR [esp],0xc0027116
c0012149:	e8 83 68 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	c9                   	leave  
c0012152:	c3                   	ret    

c0012153 <__cxa_pure_virtual>:
c0012153:	83 ec 18             	sub    esp,0x18
c0012156:	68 2e 71 02 c0       	push   0xc002712e
c001215b:	e8 71 68 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0012160:	83 c4 1c             	add    esp,0x1c
c0012163:	c3                   	ret    

c0012164 <operator new(unsigned long)>:
c0012164:	e9 c3 cf ff ff       	jmp    c000f12c <malloc>

c0012169 <operator new[](unsigned long)>:
c0012169:	e9 be cf ff ff       	jmp    c000f12c <malloc>

c001216e <operator delete(void*)>:
c001216e:	e9 d9 cf ff ff       	jmp    c000f14c <rfree>

c0012173 <operator delete(void*, unsigned long)>:
c0012173:	e9 d4 cf ff ff       	jmp    c000f14c <rfree>

c0012178 <operator delete[](void*)>:
c0012178:	e9 cf cf ff ff       	jmp    c000f14c <rfree>

c001217d <operator delete[](void*, unsigned long)>:
c001217d:	e9 ca cf ff ff       	jmp    c000f14c <rfree>

c0012182 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012182:	57                   	push   edi
c0012183:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012188:	56                   	push   esi
c0012189:	be 44 71 02 c0       	mov    esi,0xc0027144
c001218e:	53                   	push   ebx
c001218f:	83 ec 40             	sub    esp,0x40
c0012192:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012196:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001219a:	fc                   	cld    
c001219b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001219d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00121a1:	83 f9 3e             	cmp    ecx,0x3e
c00121a4:	7e 05                	jle    c00121ab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121a6:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121ab:	89 df                	mov    edi,ebx
c00121ad:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121b1:	eb 02                	jmp    c00121b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b3:	89 c7                	mov    edi,eax
c00121b5:	31 d2                	xor    edx,edx
c00121b7:	46                   	inc    esi
c00121b8:	89 f8                	mov    eax,edi
c00121ba:	f7 f1                	div    ecx
c00121bc:	39 cf                	cmp    edi,ecx
c00121be:	73 f3                	jae    c00121b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121c0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c3:	eb 02                	jmp    c00121c7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c5:	89 c3                	mov    ebx,eax
c00121c7:	31 d2                	xor    edx,edx
c00121c9:	4e                   	dec    esi
c00121ca:	89 d8                	mov    eax,ebx
c00121cc:	f7 f1                	div    ecx
c00121ce:	39 cb                	cmp    ebx,ecx
c00121d0:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d4:	88 16                	mov    BYTE PTR [esi],dl
c00121d6:	73 ed                	jae    c00121c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121d8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121dc:	83 c4 40             	add    esp,0x40
c00121df:	5b                   	pop    ebx
c00121e0:	5e                   	pop    esi
c00121e1:	5f                   	pop    edi
c00121e2:	c3                   	ret    

c00121e3 <Dbg::logc(char)>:
c00121e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121e7:	ba fd 03 00 00       	mov    edx,0x3fd
c00121ec:	ec                   	in     al,dx
c00121ed:	a8 20                	test   al,0x20
c00121ef:	74 fb                	je     c00121ec <Dbg::logc(char)+0x9>
c00121f1:	ba f8 03 00 00       	mov    edx,0x3f8
c00121f6:	88 c8                	mov    al,cl
c00121f8:	ee                   	out    dx,al
c00121f9:	c3                   	ret    

c00121fa <Dbg::logs(char*)>:
c00121fa:	53                   	push   ebx
c00121fb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012202:	84 c0                	test   al,al
c0012204:	74 0f                	je     c0012215 <Dbg::logs(char*)+0x1b>
c0012206:	50                   	push   eax
c0012207:	43                   	inc    ebx
c0012208:	e8 d6 ff ff ff       	call   c00121e3 <Dbg::logc(char)>
c001220d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012210:	5a                   	pop    edx
c0012211:	84 c0                	test   al,al
c0012213:	75 f1                	jne    c0012206 <Dbg::logs(char*)+0xc>
c0012215:	5b                   	pop    ebx
c0012216:	c3                   	ret    

c0012217 <Dbg::logWriteInt(unsigned int)>:
c0012217:	83 ec 10             	sub    esp,0x10
c001221a:	6a 0a                	push   0xa
c001221c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012220:	50                   	push   eax
c0012221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012225:	e8 58 ff ff ff       	call   c0012182 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001222a:	50                   	push   eax
c001222b:	e8 ca ff ff ff       	call   c00121fa <Dbg::logs(char*)>
c0012230:	83 c4 20             	add    esp,0x20
c0012233:	c3                   	ret    

c0012234 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012234:	83 ec 10             	sub    esp,0x10
c0012237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001223b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001223f:	50                   	push   eax
c0012240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012244:	e8 39 ff ff ff       	call   c0012182 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012249:	50                   	push   eax
c001224a:	e8 ab ff ff ff       	call   c00121fa <Dbg::logs(char*)>
c001224f:	83 c4 20             	add    esp,0x20
c0012252:	c3                   	ret    

c0012253 <Dbg::kprintf(char const*, ...)>:
c0012253:	55                   	push   ebp
c0012254:	57                   	push   edi
c0012255:	56                   	push   esi
c0012256:	53                   	push   ebx
c0012257:	83 ec 0c             	sub    esp,0xc
c001225a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001225e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012262:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012266:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012269:	84 c0                	test   al,al
c001226b:	74 4a                	je     c00122b7 <Dbg::kprintf(char const*, ...)+0x64>
c001226d:	31 db                	xor    ebx,ebx
c001226f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012272:	3c 25                	cmp    al,0x25
c0012274:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012277:	0f 85 e4 00 00 00    	jne    c0012361 <Dbg::kprintf(char const*, ...)+0x10e>
c001227d:	83 c3 02             	add    ebx,0x2
c0012280:	8a 07                	mov    al,BYTE PTR [edi]
c0012282:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012285:	83 e8 25             	sub    eax,0x25
c0012288:	3c 53                	cmp    al,0x53
c001228a:	0f 87 ba 00 00 00    	ja     c001234a <Dbg::kprintf(char const*, ...)+0xf7>
c0012290:	0f b6 c0             	movzx  eax,al
c0012293:	ff 24 85 84 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e7c]
c001229a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001229e:	89 c8                	mov    eax,ecx
c00122a0:	83 c1 04             	add    ecx,0x4
c00122a3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122a7:	ff 30                	push   DWORD PTR [eax]
c00122a9:	e8 4c ff ff ff       	call   c00121fa <Dbg::logs(char*)>
c00122ae:	58                   	pop    eax
c00122af:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b3:	84 c0                	test   al,al
c00122b5:	75 b8                	jne    c001226f <Dbg::kprintf(char const*, ...)+0x1c>
c00122b7:	83 c4 0c             	add    esp,0xc
c00122ba:	5b                   	pop    ebx
c00122bb:	5e                   	pop    esi
c00122bc:	5f                   	pop    edi
c00122bd:	5d                   	pop    ebp
c00122be:	c3                   	ret    
c00122bf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c3:	89 d0                	mov    eax,edx
c00122c5:	83 c2 04             	add    edx,0x4
c00122c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122cc:	ff 30                	push   DWORD PTR [eax]
c00122ce:	e8 44 ff ff ff       	call   c0012217 <Dbg::logWriteInt(unsigned int)>
c00122d3:	58                   	pop    eax
c00122d4:	eb d9                	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c00122d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122da:	89 d0                	mov    eax,edx
c00122dc:	83 c2 04             	add    edx,0x4
c00122df:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122e6:	50                   	push   eax
c00122e7:	e8 f7 fe ff ff       	call   c00121e3 <Dbg::logc(char)>
c00122ec:	58                   	pop    eax
c00122ed:	eb c0                	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c00122ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f3:	89 c8                	mov    eax,ecx
c00122f5:	83 c1 04             	add    ecx,0x4
c00122f8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122fc:	ff 30                	push   DWORD PTR [eax]
c00122fe:	e8 14 ff ff ff       	call   c0012217 <Dbg::logWriteInt(unsigned int)>
c0012303:	5f                   	pop    edi
c0012304:	eb a9                	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c0012306:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001230a:	89 c8                	mov    eax,ecx
c001230c:	83 c1 04             	add    ecx,0x4
c001230f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012313:	6a 10                	push   0x10
c0012315:	ff 30                	push   DWORD PTR [eax]
c0012317:	e8 18 ff ff ff       	call   c0012234 <Dbg::logWriteIntBase(unsigned int, int)>
c001231c:	59                   	pop    ecx
c001231d:	5f                   	pop    edi
c001231e:	eb 8f                	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c0012320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012324:	89 d0                	mov    eax,edx
c0012326:	83 c2 08             	add    edx,0x8
c0012329:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001232d:	6a 10                	push   0x10
c001232f:	ff 30                	push   DWORD PTR [eax]
c0012331:	e8 fe fe ff ff       	call   c0012234 <Dbg::logWriteIntBase(unsigned int, int)>
c0012336:	58                   	pop    eax
c0012337:	5a                   	pop    edx
c0012338:	e9 72 ff ff ff       	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c001233d:	6a 25                	push   0x25
c001233f:	e8 9f fe ff ff       	call   c00121e3 <Dbg::logc(char)>
c0012344:	58                   	pop    eax
c0012345:	e9 65 ff ff ff       	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c001234a:	6a 25                	push   0x25
c001234c:	e8 92 fe ff ff       	call   c00121e3 <Dbg::logc(char)>
c0012351:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012354:	50                   	push   eax
c0012355:	e8 89 fe ff ff       	call   c00121e3 <Dbg::logc(char)>
c001235a:	5a                   	pop    edx
c001235b:	59                   	pop    ecx
c001235c:	e9 4e ff ff ff       	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c0012361:	50                   	push   eax
c0012362:	89 eb                	mov    ebx,ebp
c0012364:	e8 7a fe ff ff       	call   c00121e3 <Dbg::logc(char)>
c0012369:	89 fd                	mov    ebp,edi
c001236b:	58                   	pop    eax
c001236c:	e9 3e ff ff ff       	jmp    c00122af <Dbg::kprintf(char const*, ...)+0x5c>
c0012371:	90                   	nop

c0012372 <File::read(unsigned long long, void*, int*)>:
c0012372:	53                   	push   ebx
c0012373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012377:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001237b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012382:	3c 19                	cmp    al,0x19
c0012384:	77 35                	ja     c00123bb <File::read(unsigned long long, void*, int*)+0x49>
c0012386:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001238d:	85 c0                	test   eax,eax
c001238f:	74 2a                	je     c00123bb <File::read(unsigned long long, void*, int*)+0x49>
c0012391:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012397:	85 c0                	test   eax,eax
c0012399:	74 20                	je     c00123bb <File::read(unsigned long long, void*, int*)+0x49>
c001239b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001239f:	74 21                	je     c00123c2 <File::read(unsigned long long, void*, int*)+0x50>
c00123a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b5:	5b                   	pop    ebx
c00123b6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123b9:	ff e0                	jmp    eax
c00123bb:	b8 0b 00 00 00       	mov    eax,0xb
c00123c0:	eb 05                	jmp    c00123c7 <File::read(unsigned long long, void*, int*)+0x55>
c00123c2:	b8 05 00 00 00       	mov    eax,0x5
c00123c7:	5b                   	pop    ebx
c00123c8:	c3                   	ret    
c00123c9:	90                   	nop

c00123ca <File::write(unsigned long long, void*, int*)>:
c00123ca:	53                   	push   ebx
c00123cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123da:	3c 19                	cmp    al,0x19
c00123dc:	77 35                	ja     c0012413 <File::write(unsigned long long, void*, int*)+0x49>
c00123de:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c00123e5:	85 c0                	test   eax,eax
c00123e7:	74 2a                	je     c0012413 <File::write(unsigned long long, void*, int*)+0x49>
c00123e9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123ef:	85 c0                	test   eax,eax
c00123f1:	74 20                	je     c0012413 <File::write(unsigned long long, void*, int*)+0x49>
c00123f3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123f7:	74 21                	je     c001241a <File::write(unsigned long long, void*, int*)+0x50>
c00123f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123ff:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012405:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012409:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240d:	5b                   	pop    ebx
c001240e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012411:	ff e0                	jmp    eax
c0012413:	b8 0b 00 00 00       	mov    eax,0xb
c0012418:	eb 05                	jmp    c001241f <File::write(unsigned long long, void*, int*)+0x55>
c001241a:	b8 05 00 00 00       	mov    eax,0x5
c001241f:	5b                   	pop    ebx
c0012420:	c3                   	ret    
c0012421:	90                   	nop

c0012422 <Directory::read(unsigned long long, void*, int*)>:
c0012422:	53                   	push   ebx
c0012423:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012427:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012432:	3c 19                	cmp    al,0x19
c0012434:	77 35                	ja     c001246b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012436:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001243d:	85 c0                	test   eax,eax
c001243f:	74 2a                	je     c001246b <Directory::read(unsigned long long, void*, int*)+0x49>
c0012441:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012447:	85 c0                	test   eax,eax
c0012449:	74 20                	je     c001246b <Directory::read(unsigned long long, void*, int*)+0x49>
c001244b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001244f:	74 21                	je     c0012472 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012451:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012453:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012457:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001245d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012461:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012465:	5b                   	pop    ebx
c0012466:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012469:	ff e0                	jmp    eax
c001246b:	b8 0b 00 00 00       	mov    eax,0xb
c0012470:	eb 05                	jmp    c0012477 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012472:	b8 05 00 00 00       	mov    eax,0x5
c0012477:	5b                   	pop    ebx
c0012478:	c3                   	ret    
c0012479:	90                   	nop

c001247a <Directory::write(unsigned long long, void*, int*)>:
c001247a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012485:	b8 0b 00 00 00       	mov    eax,0xb
c001248a:	80 fa 19             	cmp    dl,0x19
c001248d:	77 18                	ja     c00124a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248f:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012496:	85 d2                	test   edx,edx
c0012498:	74 0d                	je     c00124a7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001249a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124a1:	19 c0                	sbb    eax,eax
c00124a3:	83 e0 0a             	and    eax,0xa
c00124a6:	40                   	inc    eax
c00124a7:	c3                   	ret    

c00124a8 <File::isAtty()>:
c00124a8:	31 c0                	xor    eax,eax
c00124aa:	c3                   	ret    
c00124ab:	90                   	nop

c00124ac <Directory::isAtty()>:
c00124ac:	31 c0                	xor    eax,eax
c00124ae:	c3                   	ret    
c00124af:	90                   	nop

c00124b0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124b0:	b8 0a 00 00 00       	mov    eax,0xa
c00124b5:	c3                   	ret    

c00124b6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124b6:	b8 0a 00 00 00       	mov    eax,0xa
c00124bb:	c3                   	ret    

c00124bc <File::~File()>:
c00124bc:	83 ec 0c             	sub    esp,0xc
c00124bf:	ba 40 73 02 c0       	mov    edx,0xc0027340
c00124c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c8:	89 10                	mov    DWORD PTR [eax],edx
c00124ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ce:	83 ec 0c             	sub    esp,0xc
c00124d1:	50                   	push   eax
c00124d2:	e8 37 eb ff ff       	call   c001100e <UnixFile::~UnixFile()>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	90                   	nop
c00124db:	83 c4 0c             	add    esp,0xc
c00124de:	c3                   	ret    
c00124df:	90                   	nop

c00124e0 <File::~File()>:
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ea:	e8 cd ff ff ff       	call   c00124bc <File::~File()>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	83 ec 08             	sub    esp,0x8
c00124f5:	68 14 01 00 00       	push   0x114
c00124fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fe:	e8 70 fc ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	83 c4 0c             	add    esp,0xc
c0012509:	c3                   	ret    

c001250a <Directory::~Directory()>:
c001250a:	83 ec 0c             	sub    esp,0xc
c001250d:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012516:	89 10                	mov    DWORD PTR [eax],edx
c0012518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	50                   	push   eax
c0012520:	e8 e9 ea ff ff       	call   c001100e <UnixFile::~UnixFile()>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	90                   	nop
c0012529:	83 c4 0c             	add    esp,0xc
c001252c:	c3                   	ret    
c001252d:	90                   	nop

c001252e <Directory::~Directory()>:
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012538:	e8 cd ff ff ff       	call   c001250a <Directory::~Directory()>
c001253d:	83 c4 10             	add    esp,0x10
c0012540:	83 ec 08             	sub    esp,0x8
c0012543:	68 14 01 00 00       	push   0x114
c0012548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254c:	e8 22 fc ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0012551:	83 c4 10             	add    esp,0x10
c0012554:	83 c4 0c             	add    esp,0xc
c0012557:	c3                   	ret    

c0012558 <Filesystem::Filesystem()>:
c0012558:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c001255d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012561:	89 10                	mov    DWORD PTR [eax],edx
c0012563:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c0012569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012574:	a3 c8 a5 02 c0       	mov    ds:0xc002a5c8,eax
c0012579:	90                   	nop
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <Filesystem::~Filesystem()>:
c001257c:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c0012581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012585:	89 10                	mov    DWORD PTR [eax],edx
c0012587:	90                   	nop
c0012588:	c3                   	ret    
c0012589:	90                   	nop

c001258a <Filesystem::~Filesystem()>:
c001258a:	83 ec 0c             	sub    esp,0xc
c001258d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012591:	e8 e6 ff ff ff       	call   c001257c <Filesystem::~Filesystem()>
c0012596:	83 c4 04             	add    esp,0x4
c0012599:	83 ec 08             	sub    esp,0x8
c001259c:	6a 08                	push   0x8
c001259e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a2:	e8 cc fb ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	83 c4 0c             	add    esp,0xc
c00125ad:	c3                   	ret    

c00125ae <initVFS()>:
c00125ae:	83 ec 18             	sub    esp,0x18
c00125b1:	6a 08                	push   0x8
c00125b3:	e8 ac fb ff ff       	call   c0012164 <operator new(unsigned long)>
c00125b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00125bb:	e8 40 c1 00 00       	call   c001e700 <FAT::FAT()>
c00125c0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125c7:	e8 98 fb ff ff       	call   c0012164 <operator new(unsigned long)>
c00125cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00125cf:	e8 a2 d3 00 00       	call   c001f976 <ISO9660::ISO9660()>
c00125d4:	83 c4 1c             	add    esp,0x1c
c00125d7:	c3                   	ret    

c00125d8 <standardiseFiles(char*, char const*, char const*)>:
c00125d8:	55                   	push   ebp
c00125d9:	57                   	push   edi
c00125da:	56                   	push   esi
c00125db:	53                   	push   ebx
c00125dc:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125e9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125f0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125f7:	68 00 04 00 00       	push   0x400
c00125fc:	6a 00                	push   0x0
c00125fe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012602:	56                   	push   esi
c0012603:	e8 75 e0 fe ff       	call   c000067d <memset>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001260f:	75 0b                	jne    c001261c <standardiseFiles(char*, char const*, char const*)+0x44>
c0012611:	50                   	push   eax
c0012612:	50                   	push   eax
c0012613:	57                   	push   edi
c0012614:	56                   	push   esi
c0012615:	e8 02 e1 fe ff       	call   c000071c <strcpy>
c001261a:	eb 41                	jmp    c001265d <standardiseFiles(char*, char const*, char const*)+0x85>
c001261c:	8a 07                	mov    al,BYTE PTR [edi]
c001261e:	3c 5c                	cmp    al,0x5c
c0012620:	74 04                	je     c0012626 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012622:	3c 2f                	cmp    al,0x2f
c0012624:	75 18                	jne    c001263e <standardiseFiles(char*, char const*, char const*)+0x66>
c0012626:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012629:	3c 60                	cmp    al,0x60
c001262b:	7e 03                	jle    c0012630 <standardiseFiles(char*, char const*, char const*)+0x58>
c001262d:	83 e8 20             	sub    eax,0x20
c0012630:	88 04 24             	mov    BYTE PTR [esp],al
c0012633:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001263a:	50                   	push   eax
c001263b:	50                   	push   eax
c001263c:	eb 18                	jmp    c0012656 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001263e:	50                   	push   eax
c001263f:	50                   	push   eax
c0012640:	55                   	push   ebp
c0012641:	56                   	push   esi
c0012642:	e8 d5 e0 fe ff       	call   c000071c <strcpy>
c0012647:	5a                   	pop    edx
c0012648:	59                   	pop    ecx
c0012649:	68 28 86 02 c0       	push   0xc0028628
c001264e:	56                   	push   esi
c001264f:	e8 7f e1 fe ff       	call   c00007d3 <strcat>
c0012654:	5d                   	pop    ebp
c0012655:	58                   	pop    eax
c0012656:	57                   	push   edi
c0012657:	56                   	push   esi
c0012658:	e8 76 e1 fe ff       	call   c00007d3 <strcat>
c001265d:	83 c4 10             	add    esp,0x10
c0012660:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012663:	3c 60                	cmp    al,0x60
c0012665:	7e 03                	jle    c001266a <standardiseFiles(char*, char const*, char const*)+0x92>
c0012667:	83 e8 20             	sub    eax,0x20
c001266a:	88 04 24             	mov    BYTE PTR [esp],al
c001266d:	88 03                	mov    BYTE PTR [ebx],al
c001266f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012676:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001267c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012680:	bf 03 00 00 00       	mov    edi,0x3
c0012685:	b8 03 00 00 00       	mov    eax,0x3
c001268a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001268d:	84 d2                	test   dl,dl
c001268f:	0f 84 91 00 00 00    	je     c0012726 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012695:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012698:	80 fa 5c             	cmp    dl,0x5c
c001269b:	74 05                	je     c00126a2 <standardiseFiles(char*, char const*, char const*)+0xca>
c001269d:	80 fa 2f             	cmp    dl,0x2f
c00126a0:	75 12                	jne    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a2:	89 c5                	mov    ebp,eax
c00126a4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126a9:	74 09                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126ab:	40                   	inc    eax
c00126ac:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126b0:	89 cf                	mov    edi,ecx
c00126b2:	eb d6                	jmp    c001268a <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126b9:	75 5b                	jne    c0012716 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126bb:	80 fa 2e             	cmp    dl,0x2e
c00126be:	75 56                	jne    c0012716 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126c0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c4:	74 19                	je     c00126df <standardiseFiles(char*, char const*, char const*)+0x107>
c00126c6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126cb:	74 53                	je     c0012720 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126cd:	89 f9                	mov    ecx,edi
c00126cf:	41                   	inc    ecx
c00126d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d3:	80 fa 2f             	cmp    dl,0x2f
c00126d6:	74 f7                	je     c00126cf <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d8:	80 fa 5c             	cmp    dl,0x5c
c00126db:	74 f2                	je     c00126cf <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126dd:	eb d1                	jmp    c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126df:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e4:	74 3a                	je     c0012720 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126e6:	83 f8 03             	cmp    eax,0x3
c00126e9:	74 c5                	je     c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126eb:	41                   	inc    ecx
c00126ec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126ef:	80 fa 2f             	cmp    dl,0x2f
c00126f2:	74 f7                	je     c00126eb <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f4:	80 fa 5c             	cmp    dl,0x5c
c00126f7:	74 f2                	je     c00126eb <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f9:	48                   	dec    eax
c00126fa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fe:	75 06                	jne    c0012706 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012700:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012704:	eb f3                	jmp    c00126f9 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012706:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001270a:	74 07                	je     c0012713 <standardiseFiles(char*, char const*, char const*)+0x13b>
c001270c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012710:	48                   	dec    eax
c0012711:	eb f3                	jmp    c0012706 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012713:	40                   	inc    eax
c0012714:	eb 9a                	jmp    c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012716:	80 fa 2f             	cmp    dl,0x2f
c0012719:	74 95                	je     c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271b:	80 fa 5c             	cmp    dl,0x5c
c001271e:	74 90                	je     c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012720:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012723:	40                   	inc    eax
c0012724:	eb 8a                	jmp    c00126b0 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012726:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001272a:	83 ec 0c             	sub    esp,0xc
c001272d:	53                   	push   ebx
c001272e:	e8 67 df fe ff       	call   c000069a <strlen>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001273b:	75 26                	jne    c0012763 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001273d:	83 ec 0c             	sub    esp,0xc
c0012740:	53                   	push   ebx
c0012741:	e8 54 df fe ff       	call   c000069a <strlen>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001274e:	74 26                	je     c0012776 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012750:	83 ec 0c             	sub    esp,0xc
c0012753:	53                   	push   ebx
c0012754:	e8 41 df fe ff       	call   c000069a <strlen>
c0012759:	83 c4 10             	add    esp,0x10
c001275c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012761:	eb c7                	jmp    c001272a <standardiseFiles(char*, char const*, char const*)+0x152>
c0012763:	83 ec 0c             	sub    esp,0xc
c0012766:	53                   	push   ebx
c0012767:	e8 2e df fe ff       	call   c000069a <strlen>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012774:	74 c7                	je     c001273d <standardiseFiles(char*, char const*, char const*)+0x165>
c0012776:	81 c4 0c 04 00 00    	add    esp,0x40c
c001277c:	5b                   	pop    ebx
c001277d:	5e                   	pop    esi
c001277e:	5f                   	pop    edi
c001277f:	5d                   	pop    ebp
c0012780:	c3                   	ret    
c0012781:	90                   	nop

c0012782 <File::File(char const*, Process*)>:
c0012782:	83 ec 0c             	sub    esp,0xc
c0012785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012789:	83 ec 08             	sub    esp,0x8
c001278c:	6a 00                	push   0x0
c001278e:	50                   	push   eax
c001278f:	e8 d8 e6 ff ff       	call   c0010e6c <UnixFile::UnixFile(int)>
c0012794:	83 c4 10             	add    esp,0x10
c0012797:	ba 40 73 02 c0       	mov    edx,0xc0027340
c001279c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a0:	89 10                	mov    DWORD PTR [eax],edx
c00127a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b0:	83 c0 0d             	add    eax,0xd
c00127b3:	83 ec 04             	sub    esp,0x4
c00127b6:	52                   	push   edx
c00127b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127bb:	50                   	push   eax
c00127bc:	e8 17 fe ff ff       	call   c00125d8 <standardiseFiles(char*, char const*, char const*)>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127cb:	8d 50 bf             	lea    edx,[eax-0x41]
c00127ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127dc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127e0:	90                   	nop
c00127e1:	83 c4 0c             	add    esp,0xc
c00127e4:	c3                   	ret    
c00127e5:	90                   	nop

c00127e6 <File::open(FileOpenMode)>:
c00127e6:	53                   	push   ebx
c00127e7:	b8 0b 00 00 00       	mov    eax,0xb
c00127ec:	83 ec 08             	sub    esp,0x8
c00127ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127fa:	80 fa 19             	cmp    dl,0x19
c00127fd:	77 40                	ja     c001283f <File::open(FileOpenMode)+0x59>
c00127ff:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012806:	85 d2                	test   edx,edx
c0012808:	74 35                	je     c001283f <File::open(FileOpenMode)+0x59>
c001280a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012810:	85 d2                	test   edx,edx
c0012812:	74 2b                	je     c001283f <File::open(FileOpenMode)+0x59>
c0012814:	b8 06 00 00 00       	mov    eax,0x6
c0012819:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001281d:	75 20                	jne    c001283f <File::open(FileOpenMode)+0x59>
c001281f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012821:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001282b:	51                   	push   ecx
c001282c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001282f:	51                   	push   ecx
c0012830:	52                   	push   edx
c0012831:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012834:	83 c4 10             	add    esp,0x10
c0012837:	85 c0                	test   eax,eax
c0012839:	75 04                	jne    c001283f <File::open(FileOpenMode)+0x59>
c001283b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001283f:	83 c4 08             	add    esp,0x8
c0012842:	5b                   	pop    ebx
c0012843:	c3                   	ret    

c0012844 <File::close()>:
c0012844:	53                   	push   ebx
c0012845:	b8 0b 00 00 00       	mov    eax,0xb
c001284a:	83 ec 08             	sub    esp,0x8
c001284d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012851:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012858:	80 fa 19             	cmp    dl,0x19
c001285b:	77 41                	ja     c001289e <File::close()+0x5a>
c001285d:	8b 1c 95 60 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd55a0]
c0012864:	85 db                	test   ebx,ebx
c0012866:	74 36                	je     c001289e <File::close()+0x5a>
c0012868:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001286f:	74 2d                	je     c001289e <File::close()+0x5a>
c0012871:	b8 05 00 00 00       	mov    eax,0x5
c0012876:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001287a:	74 22                	je     c001289e <File::close()+0x5a>
c001287c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012880:	8b 04 95 60 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55a0]
c0012887:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001288d:	53                   	push   ebx
c001288e:	53                   	push   ebx
c001288f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012891:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012897:	50                   	push   eax
c0012898:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	83 c4 08             	add    esp,0x8
c00128a1:	5b                   	pop    ebx
c00128a2:	c3                   	ret    
c00128a3:	90                   	nop

c00128a4 <File::seek(unsigned long long)>:
c00128a4:	56                   	push   esi
c00128a5:	53                   	push   ebx
c00128a6:	b8 0b 00 00 00       	mov    eax,0xb
c00128ab:	51                   	push   ecx
c00128ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bf:	80 fa 19             	cmp    dl,0x19
c00128c2:	77 31                	ja     c00128f5 <File::seek(unsigned long long)+0x51>
c00128c4:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c00128cb:	85 d2                	test   edx,edx
c00128cd:	74 26                	je     c00128f5 <File::seek(unsigned long long)+0x51>
c00128cf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d5:	85 d2                	test   edx,edx
c00128d7:	74 1c                	je     c00128f5 <File::seek(unsigned long long)+0x51>
c00128d9:	b8 05 00 00 00       	mov    eax,0x5
c00128de:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e2:	74 11                	je     c00128f5 <File::seek(unsigned long long)+0x51>
c00128e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00128e6:	53                   	push   ebx
c00128e7:	51                   	push   ecx
c00128e8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ee:	52                   	push   edx
c00128ef:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f2:	83 c4 10             	add    esp,0x10
c00128f5:	5a                   	pop    edx
c00128f6:	5b                   	pop    ebx
c00128f7:	5e                   	pop    esi
c00128f8:	c3                   	ret    
c00128f9:	90                   	nop

c00128fa <File::tell(unsigned long long*)>:
c00128fa:	83 ec 0c             	sub    esp,0xc
c00128fd:	b8 0b 00 00 00       	mov    eax,0xb
c0012902:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012906:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001290d:	80 fa 19             	cmp    dl,0x19
c0012910:	77 34                	ja     c0012946 <File::tell(unsigned long long*)+0x4c>
c0012912:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012919:	85 d2                	test   edx,edx
c001291b:	74 29                	je     c0012946 <File::tell(unsigned long long*)+0x4c>
c001291d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012923:	85 d2                	test   edx,edx
c0012925:	74 1f                	je     c0012946 <File::tell(unsigned long long*)+0x4c>
c0012927:	b8 05 00 00 00       	mov    eax,0x5
c001292c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012930:	74 14                	je     c0012946 <File::tell(unsigned long long*)+0x4c>
c0012932:	50                   	push   eax
c0012933:	8b 02                	mov    eax,DWORD PTR [edx]
c0012935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012939:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001293f:	52                   	push   edx
c0012940:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012943:	83 c4 10             	add    esp,0x10
c0012946:	83 c4 0c             	add    esp,0xc
c0012949:	c3                   	ret    

c001294a <File::rewind()>:
c001294a:	83 ec 10             	sub    esp,0x10
c001294d:	6a 00                	push   0x0
c001294f:	6a 00                	push   0x0
c0012951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012955:	e8 4a ff ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001295a:	83 c4 1c             	add    esp,0x1c
c001295d:	c3                   	ret    

c001295e <File::unlink()>:
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	b8 0b 00 00 00       	mov    eax,0xb
c0012966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001296a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012971:	80 f9 19             	cmp    cl,0x19
c0012974:	77 2f                	ja     c00129a5 <File::unlink()+0x47>
c0012976:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c001297d:	85 c9                	test   ecx,ecx
c001297f:	74 24                	je     c00129a5 <File::unlink()+0x47>
c0012981:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012987:	85 c9                	test   ecx,ecx
c0012989:	74 1a                	je     c00129a5 <File::unlink()+0x47>
c001298b:	b8 06 00 00 00       	mov    eax,0x6
c0012990:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012994:	75 0f                	jne    c00129a5 <File::unlink()+0x47>
c0012996:	83 c2 0d             	add    edx,0xd
c0012999:	50                   	push   eax
c001299a:	50                   	push   eax
c001299b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001299d:	52                   	push   edx
c001299e:	51                   	push   ecx
c001299f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	83 c4 0c             	add    esp,0xc
c00129a8:	c3                   	ret    
c00129a9:	90                   	nop

c00129aa <File::rename(char const*)>:
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	b8 0b 00 00 00       	mov    eax,0xb
c00129b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129bd:	80 f9 19             	cmp    cl,0x19
c00129c0:	77 32                	ja     c00129f4 <File::rename(char const*)+0x4a>
c00129c2:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c00129c9:	85 c9                	test   ecx,ecx
c00129cb:	74 27                	je     c00129f4 <File::rename(char const*)+0x4a>
c00129cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d3:	85 c9                	test   ecx,ecx
c00129d5:	74 1d                	je     c00129f4 <File::rename(char const*)+0x4a>
c00129d7:	b8 06 00 00 00       	mov    eax,0x6
c00129dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129e0:	75 12                	jne    c00129f4 <File::rename(char const*)+0x4a>
c00129e2:	83 c2 0d             	add    edx,0xd
c00129e5:	50                   	push   eax
c00129e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ec:	52                   	push   edx
c00129ed:	51                   	push   ecx
c00129ee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129f1:	83 c4 10             	add    esp,0x10
c00129f4:	83 c4 0c             	add    esp,0xc
c00129f7:	c3                   	ret    

c00129f8 <File::chfatattr(unsigned char, unsigned char)>:
c00129f8:	57                   	push   edi
c00129f9:	b8 0b 00 00 00       	mov    eax,0xb
c00129fe:	56                   	push   esi
c00129ff:	53                   	push   ebx
c0012a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a0f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a13:	80 f9 19             	cmp    cl,0x19
c0012a16:	77 37                	ja     c0012a4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a18:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012a1f:	85 c9                	test   ecx,ecx
c0012a21:	74 2c                	je     c0012a4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a23:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a29:	85 c9                	test   ecx,ecx
c0012a2b:	74 22                	je     c0012a4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2d:	b8 06 00 00 00       	mov    eax,0x6
c0012a32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a36:	75 17                	jne    c0012a4f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a38:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a3a:	89 f0                	mov    eax,esi
c0012a3c:	83 c2 0d             	add    edx,0xd
c0012a3f:	0f b6 f0             	movzx  esi,al
c0012a42:	0f b6 db             	movzx  ebx,bl
c0012a45:	56                   	push   esi
c0012a46:	53                   	push   ebx
c0012a47:	52                   	push   edx
c0012a48:	51                   	push   ecx
c0012a49:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a4c:	83 c4 10             	add    esp,0x10
c0012a4f:	5b                   	pop    ebx
c0012a50:	5e                   	pop    esi
c0012a51:	5f                   	pop    edi
c0012a52:	c3                   	ret    
c0012a53:	90                   	nop

c0012a54 <File::exists()>:
c0012a54:	83 ec 0c             	sub    esp,0xc
c0012a57:	31 c0                	xor    eax,eax
c0012a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a64:	80 f9 19             	cmp    cl,0x19
c0012a67:	77 24                	ja     c0012a8d <File::exists()+0x39>
c0012a69:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012a70:	85 c9                	test   ecx,ecx
c0012a72:	74 19                	je     c0012a8d <File::exists()+0x39>
c0012a74:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a7a:	85 c9                	test   ecx,ecx
c0012a7c:	74 0f                	je     c0012a8d <File::exists()+0x39>
c0012a7e:	83 c2 0d             	add    edx,0xd
c0012a81:	50                   	push   eax
c0012a82:	50                   	push   eax
c0012a83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a85:	52                   	push   edx
c0012a86:	51                   	push   ecx
c0012a87:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a8a:	83 c4 10             	add    esp,0x10
c0012a8d:	83 c4 0c             	add    esp,0xc
c0012a90:	c3                   	ret    
c0012a91:	90                   	nop

c0012a92 <File::stat(unsigned long long*, bool*)>:
c0012a92:	56                   	push   esi
c0012a93:	53                   	push   ebx
c0012a94:	50                   	push   eax
c0012a95:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a9e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aa9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aad:	80 f9 19             	cmp    cl,0x19
c0012ab0:	77 3d                	ja     c0012aef <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab2:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012ab9:	85 c9                	test   ecx,ecx
c0012abb:	74 32                	je     c0012aef <File::stat(unsigned long long*, bool*)+0x5d>
c0012abd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	74 28                	je     c0012aef <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acd:	74 13                	je     c0012ae2 <File::stat(unsigned long long*, bool*)+0x50>
c0012acf:	83 ec 04             	sub    esp,0x4
c0012ad2:	56                   	push   esi
c0012ad3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ad9:	51                   	push   ecx
c0012ada:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012add:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ae0:	eb 0a                	jmp    c0012aec <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae2:	53                   	push   ebx
c0012ae3:	83 c2 0d             	add    edx,0xd
c0012ae6:	56                   	push   esi
c0012ae7:	52                   	push   edx
c0012ae8:	51                   	push   ecx
c0012ae9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012aec:	83 c4 10             	add    esp,0x10
c0012aef:	5a                   	pop    edx
c0012af0:	5b                   	pop    ebx
c0012af1:	5e                   	pop    esi
c0012af2:	c3                   	ret    

c0012af3 <getcwd(Process*, char*, int)>:
c0012af3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af7:	31 c0                	xor    eax,eax
c0012af9:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012afc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b00:	7d 15                	jge    c0012b17 <getcwd(Process*, char*, int)+0x24>
c0012b02:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b06:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b10:	84 c9                	test   cl,cl
c0012b12:	74 06                	je     c0012b1a <getcwd(Process*, char*, int)+0x27>
c0012b14:	40                   	inc    eax
c0012b15:	eb e2                	jmp    c0012af9 <getcwd(Process*, char*, int)+0x6>
c0012b17:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b1a:	31 c0                	xor    eax,eax
c0012b1c:	c3                   	ret    

c0012b1d <setcwd(Process*, char*)>:
c0012b1d:	55                   	push   ebp
c0012b1e:	57                   	push   edi
c0012b1f:	56                   	push   esi
c0012b20:	53                   	push   ebx
c0012b21:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b27:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b2e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b34:	57                   	push   edi
c0012b35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b3c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b40:	56                   	push   esi
c0012b41:	e8 92 fa ff ff       	call   c00125d8 <standardiseFiles(char*, char const*, char const*)>
c0012b46:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b49:	e8 4c db fe ff       	call   c000069a <strlen>
c0012b4e:	83 c4 10             	add    esp,0x10
c0012b51:	83 f8 02             	cmp    eax,0x2
c0012b54:	77 17                	ja     c0012b6d <setcwd(Process*, char*)+0x50>
c0012b56:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b5b:	83 e8 41             	sub    eax,0x41
c0012b5e:	83 f8 19             	cmp    eax,0x19
c0012b61:	76 24                	jbe    c0012b87 <setcwd(Process*, char*)+0x6a>
c0012b63:	b8 03 00 00 00       	mov    eax,0x3
c0012b68:	e9 cb 00 00 00       	jmp    c0012c38 <setcwd(Process*, char*)+0x11b>
c0012b6d:	83 ec 0c             	sub    esp,0xc
c0012b70:	56                   	push   esi
c0012b71:	e8 24 db fe ff       	call   c000069a <strlen>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	83 f8 03             	cmp    eax,0x3
c0012b7c:	75 33                	jne    c0012bb1 <setcwd(Process*, char*)+0x94>
c0012b7e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b83:	75 2c                	jne    c0012bb1 <setcwd(Process*, char*)+0x94>
c0012b85:	eb cf                	jmp    c0012b56 <setcwd(Process*, char*)+0x39>
c0012b87:	8b 14 85 60 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd55a0]
c0012b8e:	b8 05 00 00 00       	mov    eax,0x5
c0012b93:	85 d2                	test   edx,edx
c0012b95:	0f 84 9d 00 00 00    	je     c0012c38 <setcwd(Process*, char*)+0x11b>
c0012b9b:	b8 06 00 00 00       	mov    eax,0x6
c0012ba0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ba7:	0f 84 8b 00 00 00    	je     c0012c38 <setcwd(Process*, char*)+0x11b>
c0012bad:	51                   	push   ecx
c0012bae:	51                   	push   ecx
c0012baf:	eb 7b                	jmp    c0012c2c <setcwd(Process*, char*)+0x10f>
c0012bb1:	83 ec 0c             	sub    esp,0xc
c0012bb4:	68 14 01 00 00       	push   0x114
c0012bb9:	e8 a6 f5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0012bbe:	83 c4 0c             	add    esp,0xc
c0012bc1:	89 c3                	mov    ebx,eax
c0012bc3:	55                   	push   ebp
c0012bc4:	56                   	push   esi
c0012bc5:	50                   	push   eax
c0012bc6:	e8 b7 fb ff ff       	call   c0012782 <File::File(char const*, Process*)>
c0012bcb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bd0:	83 c4 0c             	add    esp,0xc
c0012bd3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bd7:	50                   	push   eax
c0012bd8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bdc:	50                   	push   eax
c0012bdd:	53                   	push   ebx
c0012bde:	e8 af fe ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012be8:	83 f8 02             	cmp    eax,0x2
c0012beb:	75 09                	jne    c0012bf6 <setcwd(Process*, char*)+0xd9>
c0012bed:	83 ec 0c             	sub    esp,0xc
c0012bf0:	53                   	push   ebx
c0012bf1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf4:	eb 0d                	jmp    c0012c03 <setcwd(Process*, char*)+0xe6>
c0012bf6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bf9:	85 c0                	test   eax,eax
c0012bfb:	74 10                	je     c0012c0d <setcwd(Process*, char*)+0xf0>
c0012bfd:	83 ec 0c             	sub    esp,0xc
c0012c00:	53                   	push   ebx
c0012c01:	ff d2                	call   edx
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	b8 01 00 00 00       	mov    eax,0x1
c0012c0b:	eb 2b                	jmp    c0012c38 <setcwd(Process*, char*)+0x11b>
c0012c0d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c12:	75 10                	jne    c0012c24 <setcwd(Process*, char*)+0x107>
c0012c14:	83 ec 0c             	sub    esp,0xc
c0012c17:	53                   	push   ebx
c0012c18:	ff d2                	call   edx
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	b8 02 00 00 00       	mov    eax,0x2
c0012c22:	eb 14                	jmp    c0012c38 <setcwd(Process*, char*)+0x11b>
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	53                   	push   ebx
c0012c28:	ff d2                	call   edx
c0012c2a:	58                   	pop    eax
c0012c2b:	5a                   	pop    edx
c0012c2c:	56                   	push   esi
c0012c2d:	57                   	push   edi
c0012c2e:	e8 e9 da fe ff       	call   c000071c <strcpy>
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	31 c0                	xor    eax,eax
c0012c38:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c3e:	5b                   	pop    ebx
c0012c3f:	5e                   	pop    esi
c0012c40:	5f                   	pop    edi
c0012c41:	5d                   	pop    ebp
c0012c42:	c3                   	ret    
c0012c43:	90                   	nop

c0012c44 <Directory::Directory(char const*, Process*)>:
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4b:	83 ec 08             	sub    esp,0x8
c0012c4e:	6a 00                	push   0x0
c0012c50:	50                   	push   eax
c0012c51:	e8 16 e2 ff ff       	call   c0010e6c <UnixFile::UnixFile(int)>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c62:	89 10                	mov    DWORD PTR [eax],edx
c0012c64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c68:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c72:	83 c0 0d             	add    eax,0xd
c0012c75:	83 ec 04             	sub    esp,0x4
c0012c78:	52                   	push   edx
c0012c79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7d:	50                   	push   eax
c0012c7e:	e8 55 f9 ff ff       	call   c00125d8 <standardiseFiles(char*, char const*, char const*)>
c0012c83:	83 c4 10             	add    esp,0x10
c0012c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c8d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c94:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca2:	90                   	nop
c0012ca3:	83 c4 0c             	add    esp,0xc
c0012ca6:	c3                   	ret    
c0012ca7:	90                   	nop

c0012ca8 <Directory::open()>:
c0012ca8:	53                   	push   ebx
c0012ca9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cae:	83 ec 08             	sub    esp,0x8
c0012cb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cbc:	80 fa 19             	cmp    dl,0x19
c0012cbf:	77 3d                	ja     c0012cfe <Directory::open()+0x56>
c0012cc1:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012cc8:	85 d2                	test   edx,edx
c0012cca:	74 32                	je     c0012cfe <Directory::open()+0x56>
c0012ccc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd2:	85 d2                	test   edx,edx
c0012cd4:	74 28                	je     c0012cfe <Directory::open()+0x56>
c0012cd6:	b8 06 00 00 00       	mov    eax,0x6
c0012cdb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdf:	75 1d                	jne    c0012cfe <Directory::open()+0x56>
c0012ce1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce7:	50                   	push   eax
c0012ce8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cea:	51                   	push   ecx
c0012ceb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cee:	51                   	push   ecx
c0012cef:	52                   	push   edx
c0012cf0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	85 c0                	test   eax,eax
c0012cf8:	75 04                	jne    c0012cfe <Directory::open()+0x56>
c0012cfa:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cfe:	83 c4 08             	add    esp,0x8
c0012d01:	5b                   	pop    ebx
c0012d02:	c3                   	ret    
c0012d03:	90                   	nop

c0012d04 <Directory::close()>:
c0012d04:	53                   	push   ebx
c0012d05:	b8 0b 00 00 00       	mov    eax,0xb
c0012d0a:	83 ec 08             	sub    esp,0x8
c0012d0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d11:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d18:	80 fa 19             	cmp    dl,0x19
c0012d1b:	77 41                	ja     c0012d5e <Directory::close()+0x5a>
c0012d1d:	8b 1c 95 60 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd55a0]
c0012d24:	85 db                	test   ebx,ebx
c0012d26:	74 36                	je     c0012d5e <Directory::close()+0x5a>
c0012d28:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2f:	74 2d                	je     c0012d5e <Directory::close()+0x5a>
c0012d31:	b8 05 00 00 00       	mov    eax,0x5
c0012d36:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d3a:	74 22                	je     c0012d5e <Directory::close()+0x5a>
c0012d3c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d40:	8b 04 95 60 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd55a0]
c0012d47:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d4d:	53                   	push   ebx
c0012d4e:	53                   	push   ebx
c0012d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d51:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d57:	50                   	push   eax
c0012d58:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	83 c4 08             	add    esp,0x8
c0012d61:	5b                   	pop    ebx
c0012d62:	c3                   	ret    
c0012d63:	90                   	nop

c0012d64 <Directory::unlink()>:
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d77:	80 f9 19             	cmp    cl,0x19
c0012d7a:	77 2f                	ja     c0012dab <Directory::unlink()+0x47>
c0012d7c:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012d83:	85 c9                	test   ecx,ecx
c0012d85:	74 24                	je     c0012dab <Directory::unlink()+0x47>
c0012d87:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d8d:	85 c9                	test   ecx,ecx
c0012d8f:	74 1a                	je     c0012dab <Directory::unlink()+0x47>
c0012d91:	b8 06 00 00 00       	mov    eax,0x6
c0012d96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d9a:	75 0f                	jne    c0012dab <Directory::unlink()+0x47>
c0012d9c:	83 c2 0d             	add    edx,0xd
c0012d9f:	50                   	push   eax
c0012da0:	50                   	push   eax
c0012da1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da3:	52                   	push   edx
c0012da4:	51                   	push   ecx
c0012da5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012da8:	83 c4 10             	add    esp,0x10
c0012dab:	83 c4 0c             	add    esp,0xc
c0012dae:	c3                   	ret    
c0012daf:	90                   	nop

c0012db0 <Directory::rename(char const*)>:
c0012db0:	83 ec 0c             	sub    esp,0xc
c0012db3:	b8 0b 00 00 00       	mov    eax,0xb
c0012db8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc3:	80 f9 19             	cmp    cl,0x19
c0012dc6:	77 32                	ja     c0012dfa <Directory::rename(char const*)+0x4a>
c0012dc8:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012dcf:	85 c9                	test   ecx,ecx
c0012dd1:	74 27                	je     c0012dfa <Directory::rename(char const*)+0x4a>
c0012dd3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd9:	85 c9                	test   ecx,ecx
c0012ddb:	74 1d                	je     c0012dfa <Directory::rename(char const*)+0x4a>
c0012ddd:	b8 06 00 00 00       	mov    eax,0x6
c0012de2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de6:	75 12                	jne    c0012dfa <Directory::rename(char const*)+0x4a>
c0012de8:	83 c2 0d             	add    edx,0xd
c0012deb:	50                   	push   eax
c0012dec:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df2:	52                   	push   edx
c0012df3:	51                   	push   ecx
c0012df4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	83 c4 0c             	add    esp,0xc
c0012dfd:	c3                   	ret    

c0012dfe <Directory::exists()>:
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	31 c0                	xor    eax,eax
c0012e03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e07:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0e:	80 f9 19             	cmp    cl,0x19
c0012e11:	77 24                	ja     c0012e37 <Directory::exists()+0x39>
c0012e13:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012e1a:	85 c9                	test   ecx,ecx
c0012e1c:	74 19                	je     c0012e37 <Directory::exists()+0x39>
c0012e1e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e24:	85 c9                	test   ecx,ecx
c0012e26:	74 0f                	je     c0012e37 <Directory::exists()+0x39>
c0012e28:	83 c2 0d             	add    edx,0xd
c0012e2b:	50                   	push   eax
c0012e2c:	50                   	push   eax
c0012e2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2f:	52                   	push   edx
c0012e30:	51                   	push   ecx
c0012e31:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	83 c4 0c             	add    esp,0xc
c0012e3a:	c3                   	ret    
c0012e3b:	90                   	nop

c0012e3c <Directory::read(dirent*)>:
c0012e3c:	83 ec 1c             	sub    esp,0x1c
c0012e3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e44:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e48:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4f:	80 fa 19             	cmp    dl,0x19
c0012e52:	77 30                	ja     c0012e84 <Directory::read(dirent*)+0x48>
c0012e54:	8b 14 95 60 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd55a0]
c0012e5b:	85 d2                	test   edx,edx
c0012e5d:	74 25                	je     c0012e84 <Directory::read(dirent*)+0x48>
c0012e5f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e66:	74 1c                	je     c0012e84 <Directory::read(dirent*)+0x48>
c0012e68:	83 ec 0c             	sub    esp,0xc
c0012e6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e71:	52                   	push   edx
c0012e72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e76:	6a 00                	push   0x0
c0012e78:	68 10 01 00 00       	push   0x110
c0012e7d:	51                   	push   ecx
c0012e7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e81:	83 c4 20             	add    esp,0x20
c0012e84:	83 c4 1c             	add    esp,0x1c
c0012e87:	c3                   	ret    

c0012e88 <Directory::create()>:
c0012e88:	83 ec 0c             	sub    esp,0xc
c0012e8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9b:	80 f9 19             	cmp    cl,0x19
c0012e9e:	77 2f                	ja     c0012ecf <Directory::create()+0x47>
c0012ea0:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0012ea7:	85 c9                	test   ecx,ecx
c0012ea9:	74 24                	je     c0012ecf <Directory::create()+0x47>
c0012eab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb1:	85 c9                	test   ecx,ecx
c0012eb3:	74 1a                	je     c0012ecf <Directory::create()+0x47>
c0012eb5:	b8 06 00 00 00       	mov    eax,0x6
c0012eba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebe:	75 0f                	jne    c0012ecf <Directory::create()+0x47>
c0012ec0:	83 c2 0d             	add    edx,0xd
c0012ec3:	50                   	push   eax
c0012ec4:	50                   	push   eax
c0012ec5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec7:	52                   	push   edx
c0012ec8:	51                   	push   ecx
c0012ec9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ecc:	83 c4 10             	add    esp,0x10
c0012ecf:	83 c4 0c             	add    esp,0xc
c0012ed2:	c3                   	ret    
c0012ed3:	90                   	nop

c0012ed4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed4:	b8 0a 00 00 00       	mov    eax,0xa
c0012ed9:	c3                   	ret    

c0012eda <Bus::Bus(char const*)>:
c0012eda:	83 ec 0c             	sub    esp,0xc
c0012edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee1:	83 ec 08             	sub    esp,0x8
c0012ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee8:	50                   	push   eax
c0012ee9:	e8 30 09 00 00       	call   c001381e <Device::Device(char const*)>
c0012eee:	83 c4 10             	add    esp,0x10
c0012ef1:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efa:	89 10                	mov    DWORD PTR [eax],edx
c0012efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f00:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f0a:	90                   	nop
c0012f0b:	83 c4 0c             	add    esp,0xc
c0012f0e:	c3                   	ret    
c0012f0f:	90                   	nop

c0012f10 <Bus::~Bus()>:
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1c:	89 10                	mov    DWORD PTR [eax],edx
c0012f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f22:	83 ec 0c             	sub    esp,0xc
c0012f25:	50                   	push   eax
c0012f26:	e8 d5 05 00 00       	call   c0013500 <Device::~Device()>
c0012f2b:	83 c4 10             	add    esp,0x10
c0012f2e:	90                   	nop
c0012f2f:	83 c4 0c             	add    esp,0xc
c0012f32:	c3                   	ret    
c0012f33:	90                   	nop

c0012f34 <Bus::~Bus()>:
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3e:	e8 cd ff ff ff       	call   c0012f10 <Bus::~Bus()>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	83 ec 08             	sub    esp,0x8
c0012f49:	68 58 01 00 00       	push   0x158
c0012f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f52:	e8 1c f2 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	83 c4 0c             	add    esp,0xc
c0012f5d:	c3                   	ret    

c0012f5e <Buzzer::Buzzer(char const*)>:
c0012f5e:	83 ec 0c             	sub    esp,0xc
c0012f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f65:	83 ec 08             	sub    esp,0x8
c0012f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6c:	50                   	push   eax
c0012f6d:	e8 ac 08 00 00       	call   c001381e <Device::Device(char const*)>
c0012f72:	83 c4 10             	add    esp,0x10
c0012f75:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7e:	89 10                	mov    DWORD PTR [eax],edx
c0012f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f84:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f92:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f9c:	90                   	nop
c0012f9d:	83 c4 0c             	add    esp,0xc
c0012fa0:	c3                   	ret    
c0012fa1:	90                   	nop

c0012fa2 <Buzzer::~Buzzer()>:
c0012fa2:	83 ec 0c             	sub    esp,0xc
c0012fa5:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fae:	89 10                	mov    DWORD PTR [eax],edx
c0012fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb4:	83 ec 0c             	sub    esp,0xc
c0012fb7:	50                   	push   eax
c0012fb8:	e8 43 05 00 00       	call   c0013500 <Device::~Device()>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	90                   	nop
c0012fc1:	83 c4 0c             	add    esp,0xc
c0012fc4:	c3                   	ret    
c0012fc5:	90                   	nop

c0012fc6 <Buzzer::~Buzzer()>:
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	83 ec 0c             	sub    esp,0xc
c0012fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd0:	e8 cd ff ff ff       	call   c0012fa2 <Buzzer::~Buzzer()>
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	83 ec 08             	sub    esp,0x8
c0012fdb:	68 5c 01 00 00       	push   0x15c
c0012fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe4:	e8 8a f1 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	83 c4 0c             	add    esp,0xc
c0012fef:	c3                   	ret    

c0012ff0 <Buzzer::stop()>:
c0012ff0:	83 ec 14             	sub    esp,0x14
c0012ff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff9:	6a 00                	push   0x0
c0012ffb:	50                   	push   eax
c0012ffc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012fff:	83 c4 1c             	add    esp,0x1c
c0013002:	c3                   	ret    

c0013003 <beepThread(void*)>:
c0013003:	53                   	push   ebx
c0013004:	83 ec 08             	sub    esp,0x8
c0013007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001300b:	e8 0c 89 00 00       	call   c001b91c <unlockScheduler()>
c0013010:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013015:	52                   	push   edx
c0013016:	52                   	push   edx
c0013017:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001301d:	52                   	push   edx
c001301e:	50                   	push   eax
c001301f:	e8 46 8e 00 00       	call   c001be6a <nanoSleep(unsigned long long)>
c0013024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013027:	e8 c4 ff ff ff       	call   c0012ff0 <Buzzer::stop()>
c001302c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013034:	83 c4 18             	add    esp,0x18
c0013037:	5b                   	pop    ebx
c0013038:	e9 73 8d 00 00       	jmp    c001bdb0 <blockTask(TaskState)>
c001303d:	90                   	nop

c001303e <Buzzer::beep(int, int, bool)>:
c001303e:	57                   	push   edi
c001303f:	56                   	push   esi
c0013040:	53                   	push   ebx
c0013041:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013045:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013049:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001304d:	52                   	push   edx
c001304e:	52                   	push   edx
c001304f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013055:	56                   	push   esi
c0013056:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013059:	83 c4 10             	add    esp,0x10
c001305c:	89 f8                	mov    eax,edi
c001305e:	84 c0                	test   al,al
c0013060:	74 1f                	je     c0013081 <Buzzer::beep(int, int, bool)+0x43>
c0013062:	50                   	push   eax
c0013063:	50                   	push   eax
c0013064:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001306a:	99                   	cdq    
c001306b:	52                   	push   edx
c001306c:	50                   	push   eax
c001306d:	e8 f8 8d 00 00       	call   c001be6a <nanoSleep(unsigned long long)>
c0013072:	83 c4 10             	add    esp,0x10
c0013075:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013079:	5b                   	pop    ebx
c001307a:	5e                   	pop    esi
c001307b:	5f                   	pop    edi
c001307c:	e9 6f ff ff ff       	jmp    c0012ff0 <Buzzer::stop()>
c0013081:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013087:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001308c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013094:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013098:	c7 44 24 14 03 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013003
c00130a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a4:	5b                   	pop    ebx
c00130a5:	5e                   	pop    esi
c00130a6:	5f                   	pop    edi
c00130a7:	e9 a0 89 00 00       	jmp    c001ba4c <Process::createThread(void (*)(void*), void*, int)>

c00130ac <loadClockSettings()>:
c00130ac:	c7 05 d4 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a5d4,0xa
c00130b6:	c6 05 d1 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a5d1,0x0
c00130bd:	c6 05 d0 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5d0,0x1
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <Clock::Clock(char const*)>:
c00130c6:	83 ec 0c             	sub    esp,0xc
c00130c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cd:	83 ec 08             	sub    esp,0x8
c00130d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d4:	50                   	push   eax
c00130d5:	e8 44 07 00 00       	call   c001381e <Device::Device(char const*)>
c00130da:	83 c4 10             	add    esp,0x10
c00130dd:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c00130e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e6:	89 10                	mov    DWORD PTR [eax],edx
c00130e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130f6:	90                   	nop
c00130f7:	83 c4 0c             	add    esp,0xc
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop

c00130fc <Clock::~Clock()>:
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c0013104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013108:	89 10                	mov    DWORD PTR [eax],edx
c001310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310e:	83 ec 0c             	sub    esp,0xc
c0013111:	50                   	push   eax
c0013112:	e8 e9 03 00 00       	call   c0013500 <Device::~Device()>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	90                   	nop
c001311b:	83 c4 0c             	add    esp,0xc
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <Clock::~Clock()>:
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	83 ec 0c             	sub    esp,0xc
c0013126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312a:	e8 cd ff ff ff       	call   c00130fc <Clock::~Clock()>
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	83 ec 08             	sub    esp,0x8
c0013135:	68 58 01 00 00       	push   0x158
c001313a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313e:	e8 30 f0 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	83 c4 0c             	add    esp,0xc
c0013149:	c3                   	ret    

c001314a <Clock::timeInSecondsLocal()>:
c001314a:	53                   	push   ebx
c001314b:	83 ec 14             	sub    esp,0x14
c001314e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013152:	8b 10                	mov    edx,DWORD PTR [eax]
c0013154:	50                   	push   eax
c0013155:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013158:	0f b6 0d d0 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a5d0
c001315f:	03 0d d4 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a5d4
c0013165:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001316b:	89 cb                	mov    ebx,ecx
c001316d:	c1 fb 1f             	sar    ebx,0x1f
c0013170:	01 c8                	add    eax,ecx
c0013172:	11 da                	adc    edx,ebx
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	31 c9                	xor    ecx,ecx
c0013179:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c0013180:	74 05                	je     c0013187 <Clock::timeInSecondsLocal()+0x3d>
c0013182:	b9 08 07 00 00       	mov    ecx,0x708
c0013187:	31 db                	xor    ebx,ebx
c0013189:	01 c8                	add    eax,ecx
c001318b:	11 da                	adc    edx,ebx
c001318d:	83 c4 08             	add    esp,0x8
c0013190:	5b                   	pop    ebx
c0013191:	c3                   	ret    

c0013192 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013192:	57                   	push   edi
c0013193:	56                   	push   esi
c0013194:	53                   	push   ebx
c0013195:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013199:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001319d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131a6:	0f b6 05 d0 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a5d0
c00131ad:	03 05 d4 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a5d4
c00131b3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131b9:	99                   	cdq    
c00131ba:	29 c6                	sub    esi,eax
c00131bc:	19 d7                	sbb    edi,edx
c00131be:	89 f0                	mov    eax,esi
c00131c0:	89 fa                	mov    edx,edi
c00131c2:	31 f6                	xor    esi,esi
c00131c4:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c00131cb:	74 05                	je     c00131d2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131cd:	be 08 07 00 00       	mov    esi,0x708
c00131d2:	31 ff                	xor    edi,edi
c00131d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131d8:	29 f0                	sub    eax,esi
c00131da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131de:	19 fa                	sbb    edx,edi
c00131e0:	89 d8                	mov    eax,ebx
c00131e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131e6:	5b                   	pop    ebx
c00131e7:	5e                   	pop    esi
c00131e8:	5f                   	pop    edi
c00131e9:	ff e0                	jmp    eax

c00131eb <datetimeToSeconds(datetime_t)>:
c00131eb:	55                   	push   ebp
c00131ec:	57                   	push   edi
c00131ed:	56                   	push   esi
c00131ee:	53                   	push   ebx
c00131ef:	83 ec 14             	sub    esp,0x14
c00131f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131fa:	89 d3                	mov    ebx,edx
c00131fc:	0f b6 c6             	movzx  eax,dh
c00131ff:	c1 eb 10             	shr    ebx,0x10
c0013202:	48                   	dec    eax
c0013203:	66 81 eb 6c 07       	sub    bx,0x76c
c0013208:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001320c:	0f b6 f5             	movzx  esi,ch
c001320f:	89 cf                	mov    edi,ecx
c0013211:	6b f6 3c             	imul   esi,esi,0x3c
c0013214:	c1 ef 10             	shr    edi,0x10
c0013217:	0f b6 c9             	movzx  ecx,cl
c001321a:	89 f8                	mov    eax,edi
c001321c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013222:	0f b6 f8             	movzx  edi,al
c0013225:	0f b6 d2             	movzx  edx,dl
c0013228:	01 fe                	add    esi,edi
c001322a:	01 f1                	add    ecx,esi
c001322c:	0f b7 f3             	movzx  esi,bx
c001322f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013233:	c1 f9 1f             	sar    ecx,0x1f
c0013236:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001323b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001323f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013244:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001324b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001324f:	76 29                	jbe    c001327a <datetimeToSeconds(datetime_t)+0x8f>
c0013251:	f6 c3 03             	test   bl,0x3
c0013254:	75 24                	jne    c001327a <datetimeToSeconds(datetime_t)+0x8f>
c0013256:	31 d2                	xor    edx,edx
c0013258:	bf 64 00 00 00       	mov    edi,0x64
c001325d:	89 d8                	mov    eax,ebx
c001325f:	66 f7 f7             	div    di
c0013262:	66 85 d2             	test   dx,dx
c0013265:	75 12                	jne    c0013279 <datetimeToSeconds(datetime_t)+0x8e>
c0013267:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001326d:	bf 90 01 00 00       	mov    edi,0x190
c0013272:	99                   	cdq    
c0013273:	f7 ff                	idiv   edi
c0013275:	85 d2                	test   edx,edx
c0013277:	75 01                	jne    c001327a <datetimeToSeconds(datetime_t)+0x8f>
c0013279:	41                   	inc    ecx
c001327a:	66 83 fb 46          	cmp    bx,0x46
c001327e:	76 45                	jbe    c00132c5 <datetimeToSeconds(datetime_t)+0xda>
c0013280:	bb 46 00 00 00       	mov    ebx,0x46
c0013285:	bf 64 00 00 00       	mov    edi,0x64
c001328a:	bd 90 01 00 00       	mov    ebp,0x190
c001328f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013294:	f6 c3 03             	test   bl,0x3
c0013297:	75 23                	jne    c00132bc <datetimeToSeconds(datetime_t)+0xd1>
c0013299:	89 d8                	mov    eax,ebx
c001329b:	99                   	cdq    
c001329c:	f7 ff                	idiv   edi
c001329e:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a3:	85 d2                	test   edx,edx
c00132a5:	75 15                	jne    c00132bc <datetimeToSeconds(datetime_t)+0xd1>
c00132a7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132ad:	99                   	cdq    
c00132ae:	f7 fd                	idiv   ebp
c00132b0:	83 fa 01             	cmp    edx,0x1
c00132b3:	19 c0                	sbb    eax,eax
c00132b5:	f7 d0                	not    eax
c00132b7:	05 6e 01 00 00       	add    eax,0x16e
c00132bc:	01 c1                	add    ecx,eax
c00132be:	43                   	inc    ebx
c00132bf:	39 f3                	cmp    ebx,esi
c00132c1:	7c cc                	jl     c001328f <datetimeToSeconds(datetime_t)+0xa4>
c00132c3:	eb 35                	jmp    c00132fa <datetimeToSeconds(datetime_t)+0x10f>
c00132c5:	74 33                	je     c00132fa <datetimeToSeconds(datetime_t)+0x10f>
c00132c7:	b8 45 00 00 00       	mov    eax,0x45
c00132cc:	89 c2                	mov    edx,eax
c00132ce:	83 e2 03             	and    edx,0x3
c00132d1:	39 f0                	cmp    eax,esi
c00132d3:	7e 0f                	jle    c00132e4 <datetimeToSeconds(datetime_t)+0xf9>
c00132d5:	83 fa 01             	cmp    edx,0x1
c00132d8:	19 d2                	sbb    edx,edx
c00132da:	48                   	dec    eax
c00132db:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e2:	eb e8                	jmp    c00132cc <datetimeToSeconds(datetime_t)+0xe1>
c00132e4:	b8 6d 01 00 00       	mov    eax,0x16d
c00132e9:	85 d2                	test   edx,edx
c00132eb:	75 0b                	jne    c00132f8 <datetimeToSeconds(datetime_t)+0x10d>
c00132ed:	66 83 fb 01          	cmp    bx,0x1
c00132f1:	19 c0                	sbb    eax,eax
c00132f3:	05 6e 01 00 00       	add    eax,0x16e
c00132f8:	29 c1                	sub    ecx,eax
c00132fa:	b8 80 51 01 00       	mov    eax,0x15180
c00132ff:	f7 e9                	imul   ecx
c0013301:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013305:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013309:	83 c4 14             	add    esp,0x14
c001330c:	5b                   	pop    ebx
c001330d:	5e                   	pop    esi
c001330e:	5f                   	pop    edi
c001330f:	5d                   	pop    ebp
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013312:	57                   	push   edi
c0013313:	56                   	push   esi
c0013314:	53                   	push   ebx
c0013315:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013319:	8b 06                	mov    eax,DWORD PTR [esi]
c001331b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001331e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013326:	e8 c0 fe ff ff       	call   c00131eb <datetimeToSeconds(datetime_t)>
c001332b:	59                   	pop    ecx
c001332c:	0f b6 0d d0 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a5d0
c0013333:	5b                   	pop    ebx
c0013334:	03 0d d4 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a5d4
c001333a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013340:	89 cb                	mov    ebx,ecx
c0013342:	c1 fb 1f             	sar    ebx,0x1f
c0013345:	29 c8                	sub    eax,ecx
c0013347:	19 da                	sbb    edx,ebx
c0013349:	31 c9                	xor    ecx,ecx
c001334b:	80 3d d1 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5d1,0x0
c0013352:	74 05                	je     c0013359 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013354:	b9 08 07 00 00       	mov    ecx,0x708
c0013359:	31 db                	xor    ebx,ebx
c001335b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001335f:	29 c8                	sub    eax,ecx
c0013361:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013365:	19 da                	sbb    edx,ebx
c0013367:	89 f8                	mov    eax,edi
c0013369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001336d:	5b                   	pop    ebx
c001336e:	5e                   	pop    esi
c001336f:	5f                   	pop    edi
c0013370:	ff e0                	jmp    eax

c0013372 <secondsToDatetime(unsigned long long)>:
c0013372:	55                   	push   ebp
c0013373:	57                   	push   edi
c0013374:	56                   	push   esi
c0013375:	53                   	push   ebx
c0013376:	83 ec 1c             	sub    esp,0x1c
c0013379:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001337d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013381:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013385:	6a 00                	push   0x0
c0013387:	68 80 51 01 00       	push   0x15180
c001338c:	55                   	push   ebp
c001338d:	57                   	push   edi
c001338e:	e8 d9 00 01 00       	call   c002346c <__udivdi3>
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001339c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133a0:	6a 00                	push   0x0
c00133a2:	68 80 51 01 00       	push   0x15180
c00133a7:	55                   	push   ebp
c00133a8:	57                   	push   edi
c00133a9:	bf 10 0e 00 00       	mov    edi,0xe10
c00133ae:	e8 b9 01 01 00       	call   c002356c <__umoddi3>
c00133b3:	83 c4 10             	add    esp,0x10
c00133b6:	99                   	cdq    
c00133b7:	f7 ff                	idiv   edi
c00133b9:	bf 3c 00 00 00       	mov    edi,0x3c
c00133be:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133c1:	89 d0                	mov    eax,edx
c00133c3:	99                   	cdq    
c00133c4:	f7 ff                	idiv   edi
c00133c6:	85 db                	test   ebx,ebx
c00133c8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133cb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133ce:	79 11                	jns    c00133e1 <secondsToDatetime(unsigned long long)+0x6f>
c00133d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133da:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133df:	eb 07                	jmp    c00133e8 <secondsToDatetime(unsigned long long)+0x76>
c00133e1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e6:	89 d8                	mov    eax,ebx
c00133e8:	bf b4 05 00 00       	mov    edi,0x5b4
c00133ed:	99                   	cdq    
c00133ee:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f3:	f7 f9                	idiv   ecx
c00133f5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133fe:	31 d2                	xor    edx,edx
c0013400:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013408:	01 c3                	add    ebx,eax
c001340a:	89 d8                	mov    eax,ebx
c001340c:	f7 f1                	div    ecx
c001340e:	31 d2                	xor    edx,edx
c0013410:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013413:	89 d8                	mov    eax,ebx
c0013415:	f7 f7                	div    edi
c0013417:	31 d2                	xor    edx,edx
c0013419:	29 c1                	sub    ecx,eax
c001341b:	89 d8                	mov    eax,ebx
c001341d:	f7 f5                	div    ebp
c001341f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013424:	29 c1                	sub    ecx,eax
c0013426:	31 d2                	xor    edx,edx
c0013428:	89 c8                	mov    eax,ecx
c001342a:	f7 f5                	div    ebp
c001342c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013435:	31 d2                	xor    edx,edx
c0013437:	89 c8                	mov    eax,ecx
c0013439:	f7 f5                	div    ebp
c001343b:	31 d2                	xor    edx,edx
c001343d:	01 c3                	add    ebx,eax
c001343f:	89 c8                	mov    eax,ecx
c0013441:	f7 f7                	div    edi
c0013443:	bf 99 00 00 00       	mov    edi,0x99
c0013448:	29 c3                	sub    ebx,eax
c001344a:	31 d2                	xor    edx,edx
c001344c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013454:	29 c3                	sub    ebx,eax
c0013456:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013459:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001345c:	bb 05 00 00 00       	mov    ebx,0x5
c0013461:	83 c1 02             	add    ecx,0x2
c0013464:	89 c8                	mov    eax,ecx
c0013466:	f7 f7                	div    edi
c0013468:	31 d2                	xor    edx,edx
c001346a:	89 c7                	mov    edi,eax
c001346c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013472:	83 c0 02             	add    eax,0x2
c0013475:	f7 f3                	div    ebx
c0013477:	89 eb                	mov    ebx,ebp
c0013479:	29 c3                	sub    ebx,eax
c001347b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013481:	88 1e                	mov    BYTE PTR [esi],bl
c0013483:	19 c0                	sbb    eax,eax
c0013485:	31 d2                	xor    edx,edx
c0013487:	83 e0 0c             	and    eax,0xc
c001348a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001348e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013496:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001349a:	83 f9 01             	cmp    ecx,0x1
c001349d:	0f 96 c2             	setbe  dl
c00134a0:	41                   	inc    ecx
c00134a1:	01 d0                	add    eax,edx
c00134a3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134a6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134aa:	83 c4 1c             	add    esp,0x1c
c00134ad:	89 f0                	mov    eax,esi
c00134af:	5b                   	pop    ebx
c00134b0:	5e                   	pop    esi
c00134b1:	5f                   	pop    edi
c00134b2:	5d                   	pop    ebp
c00134b3:	c2 04 00             	ret    0x4

c00134b6 <Clock::timeInDatetimeLocal()>:
c00134b6:	53                   	push   ebx
c00134b7:	83 ec 14             	sub    esp,0x14
c00134ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c2:	e8 83 fc ff ff       	call   c001314a <Clock::timeInSecondsLocal()>
c00134c7:	83 c4 0c             	add    esp,0xc
c00134ca:	52                   	push   edx
c00134cb:	50                   	push   eax
c00134cc:	53                   	push   ebx
c00134cd:	e8 a0 fe ff ff       	call   c0013372 <secondsToDatetime(unsigned long long)>
c00134d2:	89 d8                	mov    eax,ebx
c00134d4:	83 c4 14             	add    esp,0x14
c00134d7:	5b                   	pop    ebx
c00134d8:	c2 04 00             	ret    0x4
c00134db:	90                   	nop

c00134dc <Device::hibernate()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <Device::wake()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Device::detect()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::disableLegacy()>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <Device::powerSaving(PowerSavingLevel)>:
c00134e4:	c3                   	ret    
c00134e5:	90                   	nop

c00134e6 <DriverlessDevice::close(int, int, void*)>:
c00134e6:	31 c0                	xor    eax,eax
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::detect()>:
c00134ea:	c3                   	ret    
c00134eb:	90                   	nop

c00134ec <DriverlessDevice::open(int, int, void*)>:
c00134ec:	83 ec 18             	sub    esp,0x18
c00134ef:	68 50 74 02 c0       	push   0xc0027450
c00134f4:	e8 d8 54 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00134f9:	83 c8 ff             	or     eax,0xffffffff
c00134fc:	83 c4 1c             	add    esp,0x1c
c00134ff:	c3                   	ret    

c0013500 <Device::~Device()>:
c0013500:	ba 78 74 02 c0       	mov    edx,0xc0027478
c0013505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013509:	89 10                	mov    DWORD PTR [eax],edx
c001350b:	90                   	nop
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <Device::~Device()>:
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013515:	e8 e6 ff ff ff       	call   c0013500 <Device::~Device()>
c001351a:	83 c4 04             	add    esp,0x4
c001351d:	83 ec 08             	sub    esp,0x8
c0013520:	68 58 01 00 00       	push   0x158
c0013525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013529:	e8 45 ec ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001352e:	83 c4 10             	add    esp,0x10
c0013531:	83 c4 0c             	add    esp,0xc
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Device::findAndLoadDriver()>:
c0013536:	c3                   	ret    
c0013537:	90                   	nop

c0013538 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013538:	57                   	push   edi
c0013539:	b9 09 00 00 00       	mov    ecx,0x9
c001353e:	56                   	push   esi
c001353f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013543:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013547:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013551:	81 c7 18 01 00 00    	add    edi,0x118
c0013557:	fc                   	cld    
c0013558:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001355a:	5e                   	pop    esi
c001355b:	5f                   	pop    edi
c001355c:	c3                   	ret    
c001355d:	90                   	nop

c001355e <Device::preOpenACPI(void*, char*, char*)>:
c001355e:	56                   	push   esi
c001355f:	53                   	push   ebx
c0013560:	83 ec 08             	sub    esp,0x8
c0013563:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013567:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001356b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013579:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001357f:	6a 1e                	push   0x1e
c0013581:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013587:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001358b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013591:	50                   	push   eax
c0013592:	e8 b0 d0 fe ff       	call   c0000647 <memcpy>
c0013597:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001359b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001359f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135a7:	83 c4 14             	add    esp,0x14
c00135aa:	5b                   	pop    ebx
c00135ab:	5e                   	pop    esi
c00135ac:	e9 96 d0 fe ff       	jmp    c0000647 <memcpy>
c00135b1:	90                   	nop

c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00135bb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135c2:	75 0b                	jne    c00135cf <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00135c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00135ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135cd:	eb 1e                	jmp    c00135ed <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00135cf:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00135d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00135da:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00135e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00135e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00135ed:	ff e0                	jmp    eax
c00135ef:	90                   	nop

c00135f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00135f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00135f9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013600:	75 0b                	jne    c001360d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013602:	8b 00                	mov    eax,DWORD PTR [eax]
c0013604:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013608:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001360b:	eb 1e                	jmp    c001362b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001360d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013618:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001361e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013620:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013624:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013628:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001362b:	ff e0                	jmp    eax
c001362d:	90                   	nop

c001362e <Device::addChild(Device*)>:
c001362e:	53                   	push   ebx
c001362f:	83 ec 08             	sub    esp,0x8
c0013632:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001363a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013640:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013646:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013648:	85 d2                	test   edx,edx
c001364a:	74 04                	je     c0013650 <Device::addChild(Device*)+0x22>
c001364c:	89 d3                	mov    ebx,edx
c001364e:	eb f6                	jmp    c0013646 <Device::addChild(Device*)+0x18>
c0013650:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	6a 08                	push   0x8
c0013658:	e8 07 eb ff ff       	call   c0012164 <operator new(unsigned long)>
c001365d:	89 03                	mov    DWORD PTR [ebx],eax
c001365f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013665:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001366c:	83 c4 18             	add    esp,0x18
c001366f:	5b                   	pop    ebx
c0013670:	c3                   	ret    
c0013671:	90                   	nop

c0013672 <Device::removeAllChildren()>:
c0013672:	56                   	push   esi
c0013673:	53                   	push   ebx
c0013674:	52                   	push   edx
c0013675:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013679:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001367f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013682:	74 17                	je     c001369b <Device::removeAllChildren()+0x29>
c0013684:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013687:	85 c0                	test   eax,eax
c0013689:	74 0c                	je     c0013697 <Device::removeAllChildren()+0x25>
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013690:	50                   	push   eax
c0013691:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013694:	83 c4 10             	add    esp,0x10
c0013697:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013699:	eb e4                	jmp    c001367f <Device::removeAllChildren()+0xd>
c001369b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136b4:	58                   	pop    eax
c00136b5:	5b                   	pop    ebx
c00136b6:	5e                   	pop    esi
c00136b7:	c3                   	ret    

c00136b8 <Device::hibernateAll()>:
c00136b8:	53                   	push   ebx
c00136b9:	83 ec 14             	sub    esp,0x14
c00136bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136c2:	53                   	push   ebx
c00136c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136cc:	83 c4 10             	add    esp,0x10
c00136cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136d2:	74 0f                	je     c00136e3 <Device::hibernateAll()+0x2b>
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136da:	e8 d9 ff ff ff       	call   c00136b8 <Device::hibernateAll()>
c00136df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136e1:	eb e9                	jmp    c00136cc <Device::hibernateAll()+0x14>
c00136e3:	83 c4 08             	add    esp,0x8
c00136e6:	5b                   	pop    ebx
c00136e7:	c3                   	ret    

c00136e8 <Device::wakeAll()>:
c00136e8:	53                   	push   ebx
c00136e9:	83 ec 14             	sub    esp,0x14
c00136ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f2:	53                   	push   ebx
c00136f3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00136f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136fc:	83 c4 10             	add    esp,0x10
c00136ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013702:	74 0f                	je     c0013713 <Device::wakeAll()+0x2b>
c0013704:	83 ec 0c             	sub    esp,0xc
c0013707:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001370a:	e8 d9 ff ff ff       	call   c00136e8 <Device::wakeAll()>
c001370f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013711:	eb e9                	jmp    c00136fc <Device::wakeAll()+0x14>
c0013713:	83 c4 08             	add    esp,0x8
c0013716:	5b                   	pop    ebx
c0013717:	c3                   	ret    

c0013718 <Device::detectAll()>:
c0013718:	53                   	push   ebx
c0013719:	83 ec 14             	sub    esp,0x14
c001371c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013720:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013722:	53                   	push   ebx
c0013723:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013726:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013732:	74 0f                	je     c0013743 <Device::detectAll()+0x2b>
c0013734:	83 ec 0c             	sub    esp,0xc
c0013737:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001373a:	e8 d9 ff ff ff       	call   c0013718 <Device::detectAll()>
c001373f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013741:	eb e9                	jmp    c001372c <Device::detectAll()+0x14>
c0013743:	83 c4 08             	add    esp,0x8
c0013746:	5b                   	pop    ebx
c0013747:	c3                   	ret    

c0013748 <Device::disableLegacyAll()>:
c0013748:	53                   	push   ebx
c0013749:	83 ec 14             	sub    esp,0x14
c001374c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013750:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013752:	53                   	push   ebx
c0013753:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013756:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013762:	74 0f                	je     c0013773 <Device::disableLegacyAll()+0x2b>
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001376a:	e8 d9 ff ff ff       	call   c0013748 <Device::disableLegacyAll()>
c001376f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013771:	eb e9                	jmp    c001375c <Device::disableLegacyAll()+0x14>
c0013773:	83 c4 08             	add    esp,0x8
c0013776:	5b                   	pop    ebx
c0013777:	c3                   	ret    

c0013778 <Device::loadDriversForAll()>:
c0013778:	53                   	push   ebx
c0013779:	83 ec 08             	sub    esp,0x8
c001377c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013780:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013786:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013788:	85 db                	test   ebx,ebx
c001378a:	74 12                	je     c001379e <Device::loadDriversForAll()+0x26>
c001378c:	83 ec 0c             	sub    esp,0xc
c001378f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013792:	e8 e1 ff ff ff       	call   c0013778 <Device::loadDriversForAll()>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	89 d8                	mov    eax,ebx
c001379c:	eb e8                	jmp    c0013786 <Device::loadDriversForAll()+0xe>
c001379e:	83 c4 08             	add    esp,0x8
c00137a1:	5b                   	pop    ebx
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <Device::closeAll()>:
c00137a4:	53                   	push   ebx
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ae:	6a 00                	push   0x0
c00137b0:	6a 00                	push   0x0
c00137b2:	6a 00                	push   0x0
c00137b4:	53                   	push   ebx
c00137b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137c4:	74 0f                	je     c00137d5 <Device::closeAll()+0x31>
c00137c6:	83 ec 0c             	sub    esp,0xc
c00137c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137cc:	e8 d3 ff ff ff       	call   c00137a4 <Device::closeAll()>
c00137d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137d3:	eb e9                	jmp    c00137be <Device::closeAll()+0x1a>
c00137d5:	83 c4 08             	add    esp,0x8
c00137d8:	5b                   	pop    ebx
c00137d9:	c3                   	ret    

c00137da <Device::powerSavingAll(PowerSavingLevel)>:
c00137da:	56                   	push   esi
c00137db:	53                   	push   ebx
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137e3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00137e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e9:	56                   	push   esi
c00137ea:	53                   	push   ebx
c00137eb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00137ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137f4:	83 c4 10             	add    esp,0x10
c00137f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137fa:	74 0f                	je     c001380b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00137fc:	52                   	push   edx
c00137fd:	52                   	push   edx
c00137fe:	56                   	push   esi
c00137ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013802:	e8 d3 ff ff ff       	call   c00137da <Device::powerSavingAll(PowerSavingLevel)>
c0013807:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013809:	eb e9                	jmp    c00137f4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001380b:	58                   	pop    eax
c001380c:	5b                   	pop    ebx
c001380d:	5e                   	pop    esi
c001380e:	c3                   	ret    
c001380f:	90                   	nop

c0013810 <Device::setName(char const*)>:
c0013810:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013818:	e9 ff ce fe ff       	jmp    c000071c <strcpy>
c001381d:	90                   	nop

c001381e <Device::Device(char const*)>:
c001381e:	83 ec 0c             	sub    esp,0xc
c0013821:	ba 78 74 02 c0       	mov    edx,0xc0027478
c0013826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382a:	89 10                	mov    DWORD PTR [eax],edx
c001382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013830:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001383a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013864:	83 ec 08             	sub    esp,0x8
c0013867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001386b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001386f:	e8 9c ff ff ff       	call   c0013810 <Device::setName(char const*)>
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	83 ec 0c             	sub    esp,0xc
c001387a:	6a 08                	push   0x8
c001387c:	e8 e3 e8 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001388a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013891:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013895:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001389b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00138d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00138fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013900:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001390a:	90                   	nop
c001390b:	83 c4 0c             	add    esp,0xc
c001390e:	c3                   	ret    
c001390f:	90                   	nop

c0013910 <Device::getName()>:
c0013910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013914:	05 d0 00 00 00       	add    eax,0xd0
c0013919:	c3                   	ret    

c001391a <DriverlessDevice::DriverlessDevice(char const*)>:
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013921:	83 ec 08             	sub    esp,0x8
c0013924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013928:	50                   	push   eax
c0013929:	e8 f0 fe ff ff       	call   c001381e <Device::Device(char const*)>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c0013936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393a:	89 10                	mov    DWORD PTR [eax],edx
c001393c:	90                   	nop
c001393d:	83 c4 0c             	add    esp,0xc
c0013940:	c3                   	ret    
c0013941:	90                   	nop

c0013942 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013942:	57                   	push   edi
c0013943:	56                   	push   esi
c0013944:	53                   	push   ebx
c0013945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013949:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001394d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013951:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013957:	75 0c                	jne    c0013965 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013959:	52                   	push   edx
c001395a:	52                   	push   edx
c001395b:	53                   	push   ebx
c001395c:	56                   	push   esi
c001395d:	e8 48 1a 01 00       	call   c00253aa <LinkedList<Device>::addElement(Device*)>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001396b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001396e:	74 12                	je     c0013982 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013970:	50                   	push   eax
c0013971:	57                   	push   edi
c0013972:	56                   	push   esi
c0013973:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013976:	e8 c7 ff ff ff       	call   c0013942 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001397b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001397d:	83 c4 10             	add    esp,0x10
c0013980:	eb e9                	jmp    c001396b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013982:	5b                   	pop    ebx
c0013983:	5e                   	pop    esi
c0013984:	5f                   	pop    edi
c0013985:	c3                   	ret    

c0013986 <getDevicesOfType(DeviceType)>:
c0013986:	53                   	push   ebx
c0013987:	83 ec 14             	sub    esp,0x14
c001398a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001398e:	53                   	push   ebx
c001398f:	e8 f2 1a 01 00       	call   c0025486 <LinkedList<Device>::LinkedList()>
c0013994:	83 c4 0c             	add    esp,0xc
c0013997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001399b:	53                   	push   ebx
c001399c:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c00139a2:	e8 9b ff ff ff       	call   c0013942 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139a7:	89 d8                	mov    eax,ebx
c00139a9:	83 c4 18             	add    esp,0x18
c00139ac:	5b                   	pop    ebx
c00139ad:	c2 04 00             	ret    0x4

c00139b0 <HardDiskController::HardDiskController(char const*)>:
c00139b0:	83 ec 0c             	sub    esp,0xc
c00139b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b7:	83 ec 08             	sub    esp,0x8
c00139ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139be:	50                   	push   eax
c00139bf:	e8 5a fe ff ff       	call   c001381e <Device::Device(char const*)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	89 10                	mov    DWORD PTR [eax],edx
c00139d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00139e0:	90                   	nop
c00139e1:	83 c4 0c             	add    esp,0xc
c00139e4:	c3                   	ret    
c00139e5:	90                   	nop

c00139e6 <HardDiskController::~HardDiskController()>:
c00139e6:	83 ec 0c             	sub    esp,0xc
c00139e9:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c00139ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f2:	89 10                	mov    DWORD PTR [eax],edx
c00139f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f8:	83 ec 0c             	sub    esp,0xc
c00139fb:	50                   	push   eax
c00139fc:	e8 ff fa ff ff       	call   c0013500 <Device::~Device()>
c0013a01:	83 c4 10             	add    esp,0x10
c0013a04:	90                   	nop
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <HardDiskController::~HardDiskController()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	83 ec 0c             	sub    esp,0xc
c0013a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a14:	e8 cd ff ff ff       	call   c00139e6 <HardDiskController::~HardDiskController()>
c0013a19:	83 c4 10             	add    esp,0x10
c0013a1c:	83 ec 08             	sub    esp,0x8
c0013a1f:	68 58 01 00 00       	push   0x158
c0013a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a28:	e8 46 e7 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	83 c4 0c             	add    esp,0xc
c0013a33:	c3                   	ret    

c0013a34 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3b:	83 ec 08             	sub    esp,0x8
c0013a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a42:	50                   	push   eax
c0013a43:	e8 d6 fd ff ff       	call   c001381e <Device::Device(char const*)>
c0013a48:	83 c4 10             	add    esp,0x10
c0013a4b:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a54:	89 10                	mov    DWORD PTR [eax],edx
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a65:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a70:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013a96:	90                   	nop
c0013a97:	83 c4 0c             	add    esp,0xc
c0013a9a:	c3                   	ret    
c0013a9b:	90                   	nop

c0013a9c <PhysicalDisk::startCache()>:
c0013a9c:	56                   	push   esi
c0013a9d:	53                   	push   ebx
c0013a9e:	83 ec 10             	sub    esp,0x10
c0013aa1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aa5:	6a 30                	push   0x30
c0013aa7:	e8 b8 e6 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013aac:	89 c6                	mov    esi,eax
c0013aae:	58                   	pop    eax
c0013aaf:	5a                   	pop    edx
c0013ab0:	53                   	push   ebx
c0013ab1:	56                   	push   esi
c0013ab2:	e8 cf 24 00 00       	call   c0015f86 <VCache::VCache(PhysicalDisk*)>
c0013ab7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013abd:	83 c4 14             	add    esp,0x14
c0013ac0:	5b                   	pop    ebx
c0013ac1:	5e                   	pop    esi
c0013ac2:	c3                   	ret    
c0013ac3:	90                   	nop

c0013ac4 <PhysicalDisk::~PhysicalDisk()>:
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad0:	89 10                	mov    DWORD PTR [eax],edx
c0013ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad6:	83 ec 0c             	sub    esp,0xc
c0013ad9:	50                   	push   eax
c0013ada:	e8 21 fa ff ff       	call   c0013500 <Device::~Device()>
c0013adf:	83 c4 10             	add    esp,0x10
c0013ae2:	90                   	nop
c0013ae3:	83 c4 0c             	add    esp,0xc
c0013ae6:	c3                   	ret    
c0013ae7:	90                   	nop

c0013ae8 <PhysicalDisk::~PhysicalDisk()>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	83 ec 0c             	sub    esp,0xc
c0013aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af2:	e8 cd ff ff ff       	call   c0013ac4 <PhysicalDisk::~PhysicalDisk()>
c0013af7:	83 c4 10             	add    esp,0x10
c0013afa:	83 ec 08             	sub    esp,0x8
c0013afd:	68 6c 01 00 00       	push   0x16c
c0013b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b06:	e8 68 e6 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	83 c4 0c             	add    esp,0xc
c0013b11:	c3                   	ret    

c0013b12 <FPU::FPU(char const*)>:
c0013b12:	83 ec 0c             	sub    esp,0xc
c0013b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b19:	83 ec 08             	sub    esp,0x8
c0013b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b20:	50                   	push   eax
c0013b21:	e8 f8 fc ff ff       	call   c001381e <Device::Device(char const*)>
c0013b26:	83 c4 10             	add    esp,0x10
c0013b29:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b32:	89 10                	mov    DWORD PTR [eax],edx
c0013b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b38:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b42:	90                   	nop
c0013b43:	83 c4 0c             	add    esp,0xc
c0013b46:	c3                   	ret    
c0013b47:	90                   	nop

c0013b48 <FPU::~FPU()>:
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b54:	89 10                	mov    DWORD PTR [eax],edx
c0013b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	50                   	push   eax
c0013b5e:	e8 9d f9 ff ff       	call   c0013500 <Device::~Device()>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	90                   	nop
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <FPU::~FPU()>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	83 ec 0c             	sub    esp,0xc
c0013b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b76:	e8 cd ff ff ff       	call   c0013b48 <FPU::~FPU()>
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	83 ec 08             	sub    esp,0x8
c0013b81:	68 58 01 00 00       	push   0x158
c0013b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b8a:	e8 e4 e5 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	83 c4 0c             	add    esp,0xc
c0013b95:	c3                   	ret    

c0013b96 <setupFPU()>:
c0013b96:	53                   	push   ebx
c0013b97:	83 ec 08             	sub    esp,0x8
c0013b9a:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0013ba0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013ba7:	74 19                	je     c0013bc2 <setupFPU()+0x2c>
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	68 58 01 00 00       	push   0x158
c0013bb1:	e8 ae e5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013bb6:	89 c3                	mov    ebx,eax
c0013bb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bbb:	e8 4e e4 00 00       	call   c002200e <AVX::AVX()>
c0013bc0:	eb 5b                	jmp    c0013c1d <setupFPU()+0x87>
c0013bc2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bc8:	84 c0                	test   al,al
c0013bca:	79 19                	jns    c0013be5 <setupFPU()+0x4f>
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	68 58 01 00 00       	push   0x158
c0013bd4:	e8 8b e5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013bd9:	89 c3                	mov    ebx,eax
c0013bdb:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bde:	e8 51 e5 00 00       	call   c0022134 <SSE::SSE()>
c0013be3:	eb 38                	jmp    c0013c1d <setupFPU()+0x87>
c0013be5:	a8 20                	test   al,0x20
c0013be7:	74 19                	je     c0013c02 <setupFPU()+0x6c>
c0013be9:	83 ec 0c             	sub    esp,0xc
c0013bec:	68 58 01 00 00       	push   0x158
c0013bf1:	e8 6e e5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013bf6:	89 c3                	mov    ebx,eax
c0013bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bfb:	e8 9e e4 00 00       	call   c002209e <MMX::MMX()>
c0013c00:	eb 1b                	jmp    c0013c1d <setupFPU()+0x87>
c0013c02:	a8 10                	test   al,0x10
c0013c04:	74 1c                	je     c0013c22 <setupFPU()+0x8c>
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	68 58 01 00 00       	push   0x158
c0013c0e:	e8 51 e5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0013c13:	89 c3                	mov    ebx,eax
c0013c15:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c18:	e8 a5 e5 00 00       	call   c00221c2 <x87::x87()>
c0013c1d:	83 c4 10             	add    esp,0x10
c0013c20:	eb 24                	jmp    c0013c46 <setupFPU()+0xb0>
c0013c22:	83 e0 ef             	and    eax,0xffffffef
c0013c25:	83 ec 0c             	sub    esp,0xc
c0013c28:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c2e:	68 28 75 02 c0       	push   0xc0027528
c0013c33:	e8 1b e6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0013c38:	0f 20 c0             	mov    eax,cr0
c0013c3b:	83 c8 04             	or     eax,0x4
c0013c3e:	0f 22 c0             	mov    cr0,eax
c0013c41:	31 db                	xor    ebx,ebx
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	89 d8                	mov    eax,ebx
c0013c48:	83 c4 08             	add    esp,0x8
c0013c4b:	5b                   	pop    ebx
c0013c4c:	c3                   	ret    
c0013c4d:	90                   	nop

c0013c4e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c56:	c1 e0 04             	shl    eax,0x4
c0013c59:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c5d:	8d 50 10             	lea    edx,[eax+0x10]
c0013c60:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c66:	74 08                	je     c0013c70 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c68:	83 c0 04             	add    eax,0x4
c0013c6b:	39 d0                	cmp    eax,edx
c0013c6d:	75 f1                	jne    c0013c60 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013c6f:	c3                   	ret    
c0013c70:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c7a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013c84:	eb e2                	jmp    c0013c68 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013c86 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013c86:	57                   	push   edi
c0013c87:	31 c0                	xor    eax,eax
c0013c89:	56                   	push   esi
c0013c8a:	53                   	push   ebx
c0013c8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013c8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c97:	89 da                	mov    edx,ebx
c0013c99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c9d:	c1 e2 04             	shl    edx,0x4
c0013ca0:	01 ca                	add    edx,ecx
c0013ca2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013caa:	74 16                	je     c0013cc2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013cac:	40                   	inc    eax
c0013cad:	83 f8 04             	cmp    eax,0x4
c0013cb0:	75 f0                	jne    c0013ca2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cb2:	c7 44 24 10 6c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002756c
c0013cba:	5b                   	pop    ebx
c0013cbb:	5e                   	pop    esi
c0013cbc:	5f                   	pop    edi
c0013cbd:	e9 0f 4d 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>
c0013cc2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013cc5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013cc8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013cce:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013cd4:	5b                   	pop    ebx
c0013cd5:	5e                   	pop    esi
c0013cd6:	5f                   	pop    edi
c0013cd7:	c3                   	ret    

c0013cd8 <doubleFault(regs*, void*)>:
c0013cd8:	55                   	push   ebp
c0013cd9:	89 e5                	mov    ebp,esp
c0013cdb:	83 ec 08             	sub    esp,0x8
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	68 a7 75 02 c0       	push   0xc00275a7
c0013ce6:	e8 e6 4c 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0013ceb:	83 c4 10             	add    esp,0x10
c0013cee:	90                   	nop
c0013cef:	c9                   	leave  
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013cf2:	56                   	push   esi
c0013cf3:	53                   	push   ebx
c0013cf4:	50                   	push   eax
c0013cf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cf9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cfd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d02:	75 35                	jne    c0013d39 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d04:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d07:	31 d2                	xor    edx,edx
c0013d09:	89 c1                	mov    ecx,eax
c0013d0b:	c1 e1 04             	shl    ecx,0x4
c0013d0e:	01 f1                	add    ecx,esi
c0013d10:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d18:	74 3e                	je     c0013d58 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d1a:	42                   	inc    edx
c0013d1b:	83 fa 04             	cmp    edx,0x4
c0013d1e:	75 f0                	jne    c0013d10 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	68 ec 75 02 c0       	push   0xc00275ec
c0013d28:	e8 a4 4c 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d35:	5a                   	pop    edx
c0013d36:	5b                   	pop    ebx
c0013d37:	5e                   	pop    esi
c0013d38:	c3                   	ret    
c0013d39:	83 ec 0c             	sub    esp,0xc
c0013d3c:	56                   	push   esi
c0013d3d:	e8 ce fb ff ff       	call   c0013910 <Device::getName()>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d48:	75 ba                	jne    c0013d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d4a:	83 fb 0f             	cmp    ebx,0xf
c0013d4d:	7f 29                	jg     c0013d78 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d4f:	0f b6 9b 40 97 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd68c0]
c0013d56:	eb ac                	jmp    c0013d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d58:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d5f:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d62:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d6c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013d72:	89 d8                	mov    eax,ebx
c0013d74:	5a                   	pop    edx
c0013d75:	5b                   	pop    ebx
c0013d76:	5e                   	pop    esi
c0013d77:	c3                   	ret    
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	68 b4 75 02 c0       	push   0xc00275b4
c0013d80:	e8 4c 4c 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	e9 77 ff ff ff       	jmp    c0013d04 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d8d:	90                   	nop

c0013d8e <InterruptController::clearAllHandlers(int, bool)>:
c0013d8e:	56                   	push   esi
c0013d8f:	53                   	push   ebx
c0013d90:	52                   	push   edx
c0013d91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d99:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013d9e:	75 61                	jne    c0013e01 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013da0:	8d 46 20             	lea    eax,[esi+0x20]
c0013da3:	c1 e6 04             	shl    esi,0x4
c0013da6:	c1 e0 04             	shl    eax,0x4
c0013da9:	01 de                	add    esi,ebx
c0013dab:	01 d8                	add    eax,ebx
c0013dad:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013db7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013dc1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013dcb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013dd5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013ddf:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013de9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013df3:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013dfd:	58                   	pop    eax
c0013dfe:	5b                   	pop    ebx
c0013dff:	5e                   	pop    esi
c0013e00:	c3                   	ret    
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	53                   	push   ebx
c0013e05:	e8 06 fb ff ff       	call   c0013910 <Device::getName()>
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e10:	75 8e                	jne    c0013da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e12:	83 fe 0f             	cmp    esi,0xf
c0013e15:	7f 09                	jg     c0013e20 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e17:	0f b6 b6 40 97 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd68c0]
c0013e1e:	eb 80                	jmp    c0013da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	68 28 76 02 c0       	push   0xc0027628
c0013e28:	e8 a4 4b 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	e9 6b ff ff ff       	jmp    c0013da0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e35:	90                   	nop

c0013e36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e36:	56                   	push   esi
c0013e37:	53                   	push   ebx
c0013e38:	52                   	push   edx
c0013e39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e3d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e46:	75 3a                	jne    c0013e82 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4c:	8d 50 20             	lea    edx,[eax+0x20]
c0013e4f:	c1 e2 04             	shl    edx,0x4
c0013e52:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e55:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e59:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e5f:	74 0b                	je     c0013e6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e61:	83 c0 04             	add    eax,0x4
c0013e64:	39 d0                	cmp    eax,edx
c0013e66:	75 f1                	jne    c0013e59 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e68:	58                   	pop    eax
c0013e69:	5b                   	pop    ebx
c0013e6a:	5e                   	pop    esi
c0013e6b:	c3                   	ret    
c0013e6c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e76:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013e80:	eb df                	jmp    c0013e61 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	56                   	push   esi
c0013e86:	e8 85 fa ff ff       	call   c0013910 <Device::getName()>
c0013e8b:	83 c4 10             	add    esp,0x10
c0013e8e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e91:	75 b5                	jne    c0013e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013e93:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013e98:	7f 11                	jg     c0013eab <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e9e:	0f b6 80 40 97 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd68c0]
c0013ea5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ea9:	eb 9d                	jmp    c0013e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013eab:	83 ec 0c             	sub    esp,0xc
c0013eae:	68 28 76 02 c0       	push   0xc0027628
c0013eb3:	e8 19 4b 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0013eb8:	83 c4 10             	add    esp,0x10
c0013ebb:	eb 8b                	jmp    c0013e48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013ebd <nmiHandler(regs*, void*)>:
c0013ebd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013ec2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ec6:	e9 ad a9 ff ff       	jmp    c000e878 <Computer::handleNMI()>

c0013ecb <int_handler>:
c0013ecb:	55                   	push   ebp
c0013ecc:	57                   	push   edi
c0013ecd:	56                   	push   esi
c0013ece:	53                   	push   ebx
c0013ecf:	83 ec 0c             	sub    esp,0xc
c0013ed2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ed6:	80 3d 74 af 02 c0 00 	cmp    BYTE PTR ds:0xc002af74,0x0
c0013edd:	74 0b                	je     c0013eea <int_handler+0x1f>
c0013edf:	fa                   	cli    
c0013ee0:	f4                   	hlt    
c0013ee1:	80 3d 74 af 02 c0 00 	cmp    BYTE PTR ds:0xc002af74,0x0
c0013ee8:	75 f5                	jne    c0013edf <int_handler+0x14>
c0013eea:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0013eef:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013ef2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ef8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013efe:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f01:	83 f8 17             	cmp    eax,0x17
c0013f04:	77 13                	ja     c0013f19 <int_handler+0x4e>
c0013f06:	83 ec 08             	sub    esp,0x8
c0013f09:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f0b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f0e:	0f b6 c0             	movzx  eax,al
c0013f11:	50                   	push   eax
c0013f12:	57                   	push   edi
c0013f13:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	83 c3 15             	add    ebx,0x15
c0013f1c:	c1 e3 04             	shl    ebx,0x4
c0013f1f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f23:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f2a:	31 db                	xor    ebx,ebx
c0013f2c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f30:	85 c0                	test   eax,eax
c0013f32:	74 13                	je     c0013f47 <int_handler+0x7c>
c0013f34:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f37:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f3b:	74 1c                	je     c0013f59 <int_handler+0x8e>
c0013f3d:	83 ec 08             	sub    esp,0x8
c0013f40:	52                   	push   edx
c0013f41:	56                   	push   esi
c0013f42:	ff d0                	call   eax
c0013f44:	83 c4 10             	add    esp,0x10
c0013f47:	43                   	inc    ebx
c0013f48:	83 fb 04             	cmp    ebx,0x4
c0013f4b:	75 df                	jne    c0013f2c <int_handler+0x61>
c0013f4d:	83 c4 0c             	add    esp,0xc
c0013f50:	31 c0                	xor    eax,eax
c0013f52:	5b                   	pop    ebx
c0013f53:	31 d2                	xor    edx,edx
c0013f55:	5e                   	pop    esi
c0013f56:	5f                   	pop    edi
c0013f57:	5d                   	pop    ebp
c0013f58:	c3                   	ret    
c0013f59:	83 ec 08             	sub    esp,0x8
c0013f5c:	52                   	push   edx
c0013f5d:	56                   	push   esi
c0013f5e:	ff d0                	call   eax
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	83 c4 0c             	add    esp,0xc
c0013f66:	5b                   	pop    ebx
c0013f67:	5e                   	pop    esi
c0013f68:	5f                   	pop    edi
c0013f69:	5d                   	pop    ebp
c0013f6a:	c3                   	ret    
c0013f6b:	90                   	nop

c0013f6c <InterruptController::InterruptController(char const*)>:
c0013f6c:	83 ec 1c             	sub    esp,0x1c
c0013f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f73:	83 ec 08             	sub    esp,0x8
c0013f76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f7a:	50                   	push   eax
c0013f7b:	e8 9e f8 ff ff       	call   c001381e <Device::Device(char const*)>
c0013f80:	83 c4 10             	add    esp,0x10
c0013f83:	ba 5c 78 02 c0       	mov    edx,0xc002785c
c0013f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8c:	89 10                	mov    DWORD PTR [eax],edx
c0013f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f92:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013f9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fa4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fac:	7f 5e                	jg     c001400c <InterruptController::InterruptController(char const*)+0xa0>
c0013fae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fb6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013fbb:	7f 49                	jg     c0014006 <InterruptController::InterruptController(char const*)+0x9a>
c0013fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fc5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013fcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fd0:	01 ca                	add    edx,ecx
c0013fd2:	83 c2 54             	add    edx,0x54
c0013fd5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fe5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ff0:	01 ca                	add    edx,ecx
c0013ff2:	81 c2 54 04 00 00    	add    edx,0x454
c0013ff8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014000:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014004:	eb b0                	jmp    c0013fb6 <InterruptController::InterruptController(char const*)+0x4a>
c0014006:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001400a:	eb 98                	jmp    c0013fa4 <InterruptController::InterruptController(char const*)+0x38>
c001400c:	90                   	nop
c001400d:	83 c4 1c             	add    esp,0x1c
c0014010:	c3                   	ret    
c0014011:	90                   	nop

c0014012 <InterruptController::~InterruptController()>:
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	ba 5c 78 02 c0       	mov    edx,0xc002785c
c001401a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401e:	89 10                	mov    DWORD PTR [eax],edx
c0014020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	50                   	push   eax
c0014028:	e8 d3 f4 ff ff       	call   c0013500 <Device::~Device()>
c001402d:	83 c4 10             	add    esp,0x10
c0014030:	90                   	nop
c0014031:	83 c4 0c             	add    esp,0xc
c0014034:	c3                   	ret    
c0014035:	90                   	nop

c0014036 <InterruptController::~InterruptController()>:
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014040:	e8 cd ff ff ff       	call   c0014012 <InterruptController::~InterruptController()>
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	83 ec 08             	sub    esp,0x8
c001404b:	68 58 21 00 00       	push   0x2158
c0014050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014054:	e8 1a e1 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0014059:	83 c4 10             	add    esp,0x10
c001405c:	83 c4 0c             	add    esp,0xc
c001405f:	c3                   	ret    

c0014060 <displayDebugInfo(regs*)>:
c0014060:	55                   	push   ebp
c0014061:	57                   	push   edi
c0014062:	56                   	push   esi
c0014063:	53                   	push   ebx
c0014064:	83 ec 24             	sub    esp,0x24
c0014067:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001406b:	0f 20 c2             	mov    edx,cr0
c001406e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014072:	0f 20 d7             	mov    edi,cr2
c0014075:	0f 20 de             	mov    esi,cr3
c0014078:	0f 20 e5             	mov    ebp,cr4
c001407b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001407e:	68 62 76 02 c0       	push   0xc0027662
c0014083:	e8 cb e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014088:	58                   	pop    eax
c0014089:	5a                   	pop    edx
c001408a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001408d:	68 6d 76 02 c0       	push   0xc002766d
c0014092:	e8 bc e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014097:	59                   	pop    ecx
c0014098:	58                   	pop    eax
c0014099:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001409c:	68 78 76 02 c0       	push   0xc0027678
c00140a1:	e8 ad e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140a6:	58                   	pop    eax
c00140a7:	5a                   	pop    edx
c00140a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140ab:	68 83 76 02 c0       	push   0xc0027683
c00140b0:	e8 9e e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140b5:	59                   	pop    ecx
c00140b6:	58                   	pop    eax
c00140b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140ba:	68 8e 76 02 c0       	push   0xc002768e
c00140bf:	e8 8f e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140c4:	58                   	pop    eax
c00140c5:	5a                   	pop    edx
c00140c6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140c9:	68 99 76 02 c0       	push   0xc0027699
c00140ce:	e8 80 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140d3:	59                   	pop    ecx
c00140d4:	58                   	pop    eax
c00140d5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00140d8:	68 a4 76 02 c0       	push   0xc00276a4
c00140dd:	e8 71 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140e2:	58                   	pop    eax
c00140e3:	5a                   	pop    edx
c00140e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00140e7:	68 af 76 02 c0       	push   0xc00276af
c00140ec:	e8 62 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00140f1:	59                   	pop    ecx
c00140f2:	58                   	pop    eax
c00140f3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00140f6:	68 ba 76 02 c0       	push   0xc00276ba
c00140fb:	e8 53 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014100:	58                   	pop    eax
c0014101:	5a                   	pop    edx
c0014102:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014105:	68 c9 76 02 c0       	push   0xc00276c9
c001410a:	e8 44 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001410f:	59                   	pop    ecx
c0014110:	58                   	pop    eax
c0014111:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014114:	68 d4 76 02 c0       	push   0xc00276d4
c0014119:	e8 35 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001411e:	58                   	pop    eax
c001411f:	5a                   	pop    edx
c0014120:	57                   	push   edi
c0014121:	68 df 76 02 c0       	push   0xc00276df
c0014126:	e8 28 e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001412b:	59                   	pop    ecx
c001412c:	58                   	pop    eax
c001412d:	56                   	push   esi
c001412e:	68 ea 76 02 c0       	push   0xc00276ea
c0014133:	e8 1b e1 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014138:	58                   	pop    eax
c0014139:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001413e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014144:	e8 18 c3 ff ff       	call   c0010461 <setActiveTerminal(VgaText*)>
c0014149:	58                   	pop    eax
c001414a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001414d:	5a                   	pop    edx
c001414e:	c1 e0 05             	shl    eax,0x5
c0014151:	05 a0 94 02 c0       	add    eax,0xc00294a0
c0014156:	50                   	push   eax
c0014157:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001415c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014162:	e8 19 c7 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014167:	59                   	pop    ecx
c0014168:	58                   	pop    eax
c0014169:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001416e:	68 f5 76 02 c0       	push   0xc00276f5
c0014173:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014179:	e8 02 c7 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001417e:	58                   	pop    eax
c001417f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014184:	5a                   	pop    edx
c0014185:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014188:	83 c0 0c             	add    eax,0xc
c001418b:	50                   	push   eax
c001418c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014191:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014197:	e8 e4 c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001419c:	59                   	pop    ecx
c001419d:	58                   	pop    eax
c001419e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141a3:	68 fe 76 02 c0       	push   0xc00276fe
c00141a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141ae:	e8 cd c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00141b3:	58                   	pop    eax
c00141b4:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141b9:	5a                   	pop    edx
c00141ba:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c3:	e8 de c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00141c8:	59                   	pop    ecx
c00141c9:	58                   	pop    eax
c00141ca:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141cf:	68 06 77 02 c0       	push   0xc0027706
c00141d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141da:	e8 a1 c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00141df:	58                   	pop    eax
c00141e0:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141e5:	5a                   	pop    edx
c00141e6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141ef:	e8 b2 c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00141f4:	59                   	pop    ecx
c00141f5:	58                   	pop    eax
c00141f6:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00141fb:	68 0e 77 02 c0       	push   0xc002770e
c0014200:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014206:	e8 75 c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001420b:	58                   	pop    eax
c001420c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014211:	5a                   	pop    edx
c0014212:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014215:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001421b:	e8 86 c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014220:	59                   	pop    ecx
c0014221:	58                   	pop    eax
c0014222:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014227:	68 16 77 02 c0       	push   0xc0027716
c001422c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014232:	e8 49 c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014237:	58                   	pop    eax
c0014238:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001423d:	5a                   	pop    edx
c001423e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014241:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014247:	e8 5a c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c001424c:	59                   	pop    ecx
c001424d:	58                   	pop    eax
c001424e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014253:	68 1e 77 02 c0       	push   0xc002771e
c0014258:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001425e:	e8 1d c6 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014263:	58                   	pop    eax
c0014264:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014269:	5a                   	pop    edx
c001426a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001426d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014273:	e8 2e c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014278:	59                   	pop    ecx
c0014279:	58                   	pop    eax
c001427a:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001427f:	68 26 77 02 c0       	push   0xc0027726
c0014284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001428a:	e8 f1 c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001428f:	58                   	pop    eax
c0014290:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014295:	5a                   	pop    edx
c0014296:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014299:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001429f:	e8 02 c6 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00142a4:	59                   	pop    ecx
c00142a5:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142aa:	5b                   	pop    ebx
c00142ab:	68 2e 77 02 c0       	push   0xc002772e
c00142b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b6:	e8 c5 c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00142bb:	58                   	pop    eax
c00142bc:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142c1:	5a                   	pop    edx
c00142c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142c6:	52                   	push   edx
c00142c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cd:	e8 d4 c5 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00142d2:	59                   	pop    ecx
c00142d3:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142d8:	5b                   	pop    ebx
c00142d9:	68 37 77 02 c0       	push   0xc0027737
c00142de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e4:	e8 97 c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00142e9:	58                   	pop    eax
c00142ea:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00142ef:	5a                   	pop    edx
c00142f0:	57                   	push   edi
c00142f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f7:	e8 aa c5 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00142fc:	59                   	pop    ecx
c00142fd:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014302:	5b                   	pop    ebx
c0014303:	68 3f 77 02 c0       	push   0xc002773f
c0014308:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430e:	e8 6d c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014313:	5f                   	pop    edi
c0014314:	58                   	pop    eax
c0014315:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001431a:	56                   	push   esi
c001431b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014321:	e8 80 c5 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014326:	58                   	pop    eax
c0014327:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001432c:	5a                   	pop    edx
c001432d:	68 47 77 02 c0       	push   0xc0027747
c0014332:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014338:	e8 43 c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001433d:	59                   	pop    ecx
c001433e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014343:	5b                   	pop    ebx
c0014344:	55                   	push   ebp
c0014345:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434b:	e8 56 c5 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014350:	5e                   	pop    esi
c0014351:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014356:	5f                   	pop    edi
c0014357:	68 4f 77 02 c0       	push   0xc002774f
c001435c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014362:	e8 19 c5 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014367:	0f 21 c0             	mov    eax,db0
c001436a:	5d                   	pop    ebp
c001436b:	5a                   	pop    edx
c001436c:	50                   	push   eax
c001436d:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014378:	e8 29 c5 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c001437d:	59                   	pop    ecx
c001437e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014383:	5b                   	pop    ebx
c0014384:	68 58 77 02 c0       	push   0xc0027758
c0014389:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001438f:	e8 ec c4 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014394:	0f 21 c8             	mov    eax,db1
c0014397:	5e                   	pop    esi
c0014398:	5f                   	pop    edi
c0014399:	50                   	push   eax
c001439a:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001439f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a5:	e8 fc c4 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00143aa:	5d                   	pop    ebp
c00143ab:	58                   	pop    eax
c00143ac:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143b1:	68 60 77 02 c0       	push   0xc0027760
c00143b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143bc:	e8 bf c4 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00143c1:	0f 21 d0             	mov    eax,db2
c00143c4:	5a                   	pop    edx
c00143c5:	59                   	pop    ecx
c00143c6:	50                   	push   eax
c00143c7:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d2:	e8 cf c4 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c00143d7:	5b                   	pop    ebx
c00143d8:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143dd:	5e                   	pop    esi
c00143de:	68 68 77 02 c0       	push   0xc0027768
c00143e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143e9:	e8 92 c4 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c00143ee:	0f 21 d8             	mov    eax,db3
c00143f1:	5f                   	pop    edi
c00143f2:	5d                   	pop    ebp
c00143f3:	50                   	push   eax
c00143f4:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00143f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143ff:	e8 a2 c4 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014404:	58                   	pop    eax
c0014405:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c001440a:	5a                   	pop    edx
c001440b:	68 70 77 02 c0       	push   0xc0027770
c0014410:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014416:	e8 65 c4 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c001441b:	0f 21 f0             	mov    eax,db6
c001441e:	59                   	pop    ecx
c001441f:	5b                   	pop    ebx
c0014420:	50                   	push   eax
c0014421:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014426:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001442c:	e8 75 c4 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0014431:	5e                   	pop    esi
c0014432:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014437:	5f                   	pop    edi
c0014438:	68 78 77 02 c0       	push   0xc0027778
c001443d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014443:	e8 38 c4 ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0014448:	0f 21 f8             	mov    eax,db7
c001444b:	5d                   	pop    ebp
c001444c:	5a                   	pop    edx
c001444d:	50                   	push   eax
c001444e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0014453:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014459:	e8 48 c4 ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c001445e:	fa                   	cli    
c001445f:	f4                   	hlt    
c0014460:	83 c4 10             	add    esp,0x10
c0014463:	eb fe                	jmp    c0014463 <displayDebugInfo(regs*)+0x403>

c0014465 <x87EmulHandler(regs*, void*)>:
c0014465:	53                   	push   ebx
c0014466:	83 ec 14             	sub    esp,0x14
c0014469:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001446d:	53                   	push   ebx
c001446e:	e8 ae 8d 00 00       	call   c001d221 <Vm::x87Handler(regs*)>
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	84 c0                	test   al,al
c0014478:	74 05                	je     c001447f <x87EmulHandler(regs*, void*)+0x1a>
c001447a:	83 c4 08             	add    esp,0x8
c001447d:	5b                   	pop    ebx
c001447e:	c3                   	ret    
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	68 80 77 02 c0       	push   0xc0027780
c0014487:	e8 c7 dd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001448c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001448f:	e8 cc fb ff ff       	call   c0014060 <displayDebugInfo(regs*)>

c0014494 <gpFault(regs*, void*)>:
c0014494:	53                   	push   ebx
c0014495:	83 ec 14             	sub    esp,0x14
c0014498:	c7 05 f0 a5 02 c0 95 c7 01 c0 	mov    DWORD PTR ds:0xc002a5f0,0xc001c795
c00144a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a6:	53                   	push   ebx
c00144a7:	e8 e9 82 00 00       	call   c001c795 <Vm::faultHandler(regs*)>
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	84 c0                	test   al,al
c00144b1:	74 05                	je     c00144b8 <gpFault(regs*, void*)+0x24>
c00144b3:	83 c4 08             	add    esp,0x8
c00144b6:	5b                   	pop    ebx
c00144b7:	c3                   	ret    
c00144b8:	83 ec 0c             	sub    esp,0xc
c00144bb:	68 96 77 02 c0       	push   0xc0027796
c00144c0:	e8 8e dd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00144c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144c8:	e8 93 fb ff ff       	call   c0014060 <displayDebugInfo(regs*)>

c00144cd <pgFault(regs*, void*)>:
c00144cd:	83 ec 18             	sub    esp,0x18
c00144d0:	68 b1 77 02 c0       	push   0xc00277b1
c00144d5:	e8 79 dd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00144da:	58                   	pop    eax
c00144db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144df:	e8 7c fb ff ff       	call   c0014060 <displayDebugInfo(regs*)>

c00144e4 <otherISRHandler(regs*, void*)>:
c00144e4:	53                   	push   ebx
c00144e5:	83 ec 0c             	sub    esp,0xc
c00144e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144ec:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144ef:	50                   	push   eax
c00144f0:	50                   	push   eax
c00144f1:	68 be 77 02 c0       	push   0xc00277be
c00144f6:	e8 58 dd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00144fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144fe:	e8 5d fb ff ff       	call   c0014060 <displayDebugInfo(regs*)>

c0014503 <opcodeFault(regs*, void*)>:
c0014503:	55                   	push   ebp
c0014504:	89 e5                	mov    ebp,esp
c0014506:	56                   	push   esi
c0014507:	53                   	push   ebx
c0014508:	83 ec 40             	sub    esp,0x40
c001450b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014510:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014516:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001451c:	84 c0                	test   al,al
c001451e:	74 24                	je     c0014544 <opcodeFault(regs*, void*)+0x41>
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	68 dc 77 02 c0       	push   0xc00277dc
c0014528:	e8 26 dd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001452d:	83 c4 10             	add    esp,0x10
c0014530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014533:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014536:	8d 50 19             	lea    edx,[eax+0x19]
c0014539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001453c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001453f:	e9 77 05 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x5b8>
c0014544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014547:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001454a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001454d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014551:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014558:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001455b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001455e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014561:	8a 00                	mov    al,BYTE PTR [eax]
c0014563:	3c f0                	cmp    al,0xf0
c0014565:	75 17                	jne    c001457e <opcodeFault(regs*, void*)+0x7b>
c0014567:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001456a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001456d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014570:	8d 50 01             	lea    edx,[eax+0x1]
c0014573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014576:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014579:	e9 da 00 00 00       	jmp    c0014658 <opcodeFault(regs*, void*)+0x155>
c001457e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014581:	8a 00                	mov    al,BYTE PTR [eax]
c0014583:	3c f2                	cmp    al,0xf2
c0014585:	74 09                	je     c0014590 <opcodeFault(regs*, void*)+0x8d>
c0014587:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001458a:	8a 00                	mov    al,BYTE PTR [eax]
c001458c:	3c f3                	cmp    al,0xf3
c001458e:	75 1b                	jne    c00145ab <opcodeFault(regs*, void*)+0xa8>
c0014590:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014594:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001459d:	8d 50 01             	lea    edx,[eax+0x1]
c00145a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145a6:	e9 ad 00 00 00       	jmp    c0014658 <opcodeFault(regs*, void*)+0x155>
c00145ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ae:	8a 00                	mov    al,BYTE PTR [eax]
c00145b0:	3c 66                	cmp    al,0x66
c00145b2:	75 1f                	jne    c00145d3 <opcodeFault(regs*, void*)+0xd0>
c00145b4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145b8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145c5:	8d 50 01             	lea    edx,[eax+0x1]
c00145c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145ce:	e9 85 00 00 00       	jmp    c0014658 <opcodeFault(regs*, void*)+0x155>
c00145d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145d6:	8a 00                	mov    al,BYTE PTR [eax]
c00145d8:	3c 67                	cmp    al,0x67
c00145da:	75 18                	jne    c00145f4 <opcodeFault(regs*, void*)+0xf1>
c00145dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145e9:	8d 50 01             	lea    edx,[eax+0x1]
c00145ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145f2:	eb 64                	jmp    c0014658 <opcodeFault(regs*, void*)+0x155>
c00145f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f7:	8a 00                	mov    al,BYTE PTR [eax]
c00145f9:	3c 2e                	cmp    al,0x2e
c00145fb:	74 09                	je     c0014606 <opcodeFault(regs*, void*)+0x103>
c00145fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014600:	8a 00                	mov    al,BYTE PTR [eax]
c0014602:	3c 3e                	cmp    al,0x3e
c0014604:	75 18                	jne    c001461e <opcodeFault(regs*, void*)+0x11b>
c0014606:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001460a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001460d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014613:	8d 50 01             	lea    edx,[eax+0x1]
c0014616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014619:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001461c:	eb 3a                	jmp    c0014658 <opcodeFault(regs*, void*)+0x155>
c001461e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014621:	8a 00                	mov    al,BYTE PTR [eax]
c0014623:	3c 36                	cmp    al,0x36
c0014625:	74 1b                	je     c0014642 <opcodeFault(regs*, void*)+0x13f>
c0014627:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001462a:	8a 00                	mov    al,BYTE PTR [eax]
c001462c:	3c 26                	cmp    al,0x26
c001462e:	74 12                	je     c0014642 <opcodeFault(regs*, void*)+0x13f>
c0014630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014633:	8a 00                	mov    al,BYTE PTR [eax]
c0014635:	3c 64                	cmp    al,0x64
c0014637:	74 09                	je     c0014642 <opcodeFault(regs*, void*)+0x13f>
c0014639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001463c:	8a 00                	mov    al,BYTE PTR [eax]
c001463e:	3c 65                	cmp    al,0x65
c0014640:	75 16                	jne    c0014658 <opcodeFault(regs*, void*)+0x155>
c0014642:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014646:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001464c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001464f:	8d 50 01             	lea    edx,[eax+0x1]
c0014652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014655:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001465b:	8a 00                	mov    al,BYTE PTR [eax]
c001465d:	3c 0f                	cmp    al,0xf
c001465f:	0f 85 ad 00 00 00    	jne    c0014712 <opcodeFault(regs*, void*)+0x20f>
c0014665:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014668:	40                   	inc    eax
c0014669:	8a 00                	mov    al,BYTE PTR [eax]
c001466b:	3c c2                	cmp    al,0xc2
c001466d:	74 0e                	je     c001467d <opcodeFault(regs*, void*)+0x17a>
c001466f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014672:	40                   	inc    eax
c0014673:	8a 00                	mov    al,BYTE PTR [eax]
c0014675:	3c c3                	cmp    al,0xc3
c0014677:	0f 85 95 00 00 00    	jne    c0014712 <opcodeFault(regs*, void*)+0x20f>
c001467d:	83 ec 0c             	sub    esp,0xc
c0014680:	68 ff 77 02 c0       	push   0xc00277ff
c0014685:	e8 c9 db ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014690:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014693:	8d 50 01             	lea    edx,[eax+0x1]
c0014696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014699:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001469c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001469f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a2:	8a 00                	mov    al,BYTE PTR [eax]
c00146a4:	8d 50 fe             	lea    edx,[eax-0x2]
c00146a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146aa:	88 10                	mov    BYTE PTR [eax],dl
c00146ac:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146af:	50                   	push   eax
c00146b0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146b3:	50                   	push   eax
c00146b4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146b7:	50                   	push   eax
c00146b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146bb:	e8 16 41 00 00       	call   c00187d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146c9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146cc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00146cf:	01 d0                	add    eax,edx
c00146d1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00146d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146da:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146dd:	48                   	dec    eax
c00146de:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00146e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146e4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00146e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146ed:	83 ec 04             	sub    esp,0x4
c00146f0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00146f3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00146f6:	50                   	push   eax
c00146f7:	e8 6d ba fe ff       	call   c0000169 <voodooXADD>
c00146fc:	83 c4 10             	add    esp,0x10
c00146ff:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014702:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014705:	01 c2                	add    edx,eax
c0014707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001470a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001470d:	e9 a9 03 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x5b8>
c0014712:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014715:	8a 00                	mov    al,BYTE PTR [eax]
c0014717:	3c 0f                	cmp    al,0xf
c0014719:	0f 85 8b 01 00 00    	jne    c00148aa <opcodeFault(regs*, void*)+0x3a7>
c001471f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014722:	40                   	inc    eax
c0014723:	8a 00                	mov    al,BYTE PTR [eax]
c0014725:	3c c7                	cmp    al,0xc7
c0014727:	0f 86 7d 01 00 00    	jbe    c00148aa <opcodeFault(regs*, void*)+0x3a7>
c001472d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014730:	40                   	inc    eax
c0014731:	8a 00                	mov    al,BYTE PTR [eax]
c0014733:	3c cf                	cmp    al,0xcf
c0014735:	0f 87 6f 01 00 00    	ja     c00148aa <opcodeFault(regs*, void*)+0x3a7>
c001473b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001473e:	40                   	inc    eax
c001473f:	8a 00                	mov    al,BYTE PTR [eax]
c0014741:	83 c0 38             	add    eax,0x38
c0014744:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014747:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001474b:	75 0b                	jne    c0014758 <opcodeFault(regs*, void*)+0x255>
c001474d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014750:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014753:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014756:	eb 75                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c0014758:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001475c:	75 0b                	jne    c0014769 <opcodeFault(regs*, void*)+0x266>
c001475e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014761:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014764:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014767:	eb 64                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c0014769:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001476d:	75 0b                	jne    c001477a <opcodeFault(regs*, void*)+0x277>
c001476f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014772:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014775:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014778:	eb 53                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c001477a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001477e:	75 0b                	jne    c001478b <opcodeFault(regs*, void*)+0x288>
c0014780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014786:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014789:	eb 42                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c001478b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001478f:	75 0b                	jne    c001479c <opcodeFault(regs*, void*)+0x299>
c0014791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014794:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014797:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001479a:	eb 31                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c001479c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147a0:	75 0b                	jne    c00147ad <opcodeFault(regs*, void*)+0x2aa>
c00147a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ab:	eb 20                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c00147ad:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147b1:	75 0b                	jne    c00147be <opcodeFault(regs*, void*)+0x2bb>
c00147b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147bc:	eb 0f                	jmp    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c00147be:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00147c2:	75 09                	jne    c00147cd <opcodeFault(regs*, void*)+0x2ca>
c00147c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00147ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147cd:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00147d1:	74 10                	je     c00147e3 <opcodeFault(regs*, void*)+0x2e0>
c00147d3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00147da:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00147e1:	eb 2d                	jmp    c0014810 <opcodeFault(regs*, void*)+0x30d>
c00147e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147e6:	c1 e0 18             	shl    eax,0x18
c00147e9:	89 c2                	mov    edx,eax
c00147eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147ee:	c1 e0 08             	shl    eax,0x8
c00147f1:	25 00 00 ff 00       	and    eax,0xff0000
c00147f6:	09 c2                	or     edx,eax
c00147f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00147fb:	c1 e8 08             	shr    eax,0x8
c00147fe:	25 00 ff 00 00       	and    eax,0xff00
c0014803:	09 c2                	or     edx,eax
c0014805:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014808:	c1 e8 18             	shr    eax,0x18
c001480b:	09 d0                	or     eax,edx
c001480d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014810:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014814:	75 0b                	jne    c0014821 <opcodeFault(regs*, void*)+0x31e>
c0014816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014819:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001481c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001481f:	eb 75                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014821:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014825:	75 0b                	jne    c0014832 <opcodeFault(regs*, void*)+0x32f>
c0014827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001482a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001482d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014830:	eb 64                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014832:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014836:	75 0b                	jne    c0014843 <opcodeFault(regs*, void*)+0x340>
c0014838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001483b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001483e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014841:	eb 53                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014843:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014847:	75 0b                	jne    c0014854 <opcodeFault(regs*, void*)+0x351>
c0014849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001484c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001484f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014852:	eb 42                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014854:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014858:	75 0b                	jne    c0014865 <opcodeFault(regs*, void*)+0x362>
c001485a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014860:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014863:	eb 31                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014865:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014869:	75 0b                	jne    c0014876 <opcodeFault(regs*, void*)+0x373>
c001486b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001486e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014871:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014874:	eb 20                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014876:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001487a:	75 0b                	jne    c0014887 <opcodeFault(regs*, void*)+0x384>
c001487c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014882:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014885:	eb 0f                	jmp    c0014896 <opcodeFault(regs*, void*)+0x393>
c0014887:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001488b:	75 09                	jne    c0014896 <opcodeFault(regs*, void*)+0x393>
c001488d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014890:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014893:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014899:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001489c:	8d 50 02             	lea    edx,[eax+0x2]
c001489f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148a5:	e9 11 02 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x5b8>
c00148aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148ad:	8a 00                	mov    al,BYTE PTR [eax]
c00148af:	3c 0f                	cmp    al,0xf
c00148b1:	0f 85 76 01 00 00    	jne    c0014a2d <opcodeFault(regs*, void*)+0x52a>
c00148b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148ba:	40                   	inc    eax
c00148bb:	8a 00                	mov    al,BYTE PTR [eax]
c00148bd:	3c c7                	cmp    al,0xc7
c00148bf:	0f 85 68 01 00 00    	jne    c0014a2d <opcodeFault(regs*, void*)+0x52a>
c00148c5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00148c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148ce:	8d 50 01             	lea    edx,[eax+0x1]
c00148d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148d7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00148da:	50                   	push   eax
c00148db:	8d 45 bb             	lea    eax,[ebp-0x45]
c00148de:	50                   	push   eax
c00148df:	8d 45 bc             	lea    eax,[ebp-0x44]
c00148e2:	50                   	push   eax
c00148e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00148e6:	e8 eb 3e 00 00       	call   c00187d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00148f1:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00148f4:	83 f0 01             	xor    eax,0x1
c00148f7:	84 c0                	test   al,al
c00148f9:	0f 84 2e 01 00 00    	je     c0014a2d <opcodeFault(regs*, void*)+0x52a>
c00148ff:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014902:	3c 01                	cmp    al,0x1
c0014904:	0f 85 23 01 00 00    	jne    c0014a2d <opcodeFault(regs*, void*)+0x52a>
c001490a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001490d:	83 f0 01             	xor    eax,0x1
c0014910:	84 c0                	test   al,al
c0014912:	0f 84 15 01 00 00    	je     c0014a2d <opcodeFault(regs*, void*)+0x52a>
c0014918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001491b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001491e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014921:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014928:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001492b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001492e:	89 c2                	mov    edx,eax
c0014930:	b8 00 00 00 00       	mov    eax,0x0
c0014935:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014938:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001493b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014941:	ba 00 00 00 00       	mov    edx,0x0
c0014946:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014949:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001494c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001494f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014952:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014955:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001495c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001495f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014962:	89 c2                	mov    edx,eax
c0014964:	b8 00 00 00 00       	mov    eax,0x0
c0014969:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001496c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001496f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014972:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014975:	ba 00 00 00 00       	mov    edx,0x0
c001497a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001497d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014980:	e8 95 6f 00 00       	call   c001b91a <lockScheduler()>
c0014985:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014988:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001498b:	8b 00                	mov    eax,DWORD PTR [eax]
c001498d:	89 c1                	mov    ecx,eax
c001498f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014992:	89 cb                	mov    ebx,ecx
c0014994:	89 d0                	mov    eax,edx
c0014996:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014999:	89 c6                	mov    esi,eax
c001499b:	89 f0                	mov    eax,esi
c001499d:	09 d8                	or     eax,ebx
c001499f:	85 c0                	test   eax,eax
c00149a1:	75 21                	jne    c00149c4 <opcodeFault(regs*, void*)+0x4c1>
c00149a3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149a9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149ac:	89 01                	mov    DWORD PTR [ecx],eax
c00149ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149b7:	83 c8 40             	or     eax,0x40
c00149ba:	89 c2                	mov    edx,eax
c00149bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149c2:	eb 3e                	jmp    c0014a02 <opcodeFault(regs*, void*)+0x4ff>
c00149c4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00149cc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149cf:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149d2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00149d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00149db:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00149de:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00149e1:	89 d0                	mov    eax,edx
c00149e3:	31 d2                	xor    edx,edx
c00149e5:	89 c3                	mov    ebx,eax
c00149e7:	89 d6                	mov    esi,edx
c00149e9:	89 da                	mov    edx,ebx
c00149eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ee:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00149f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149f7:	83 e0 bf             	and    eax,0xffffffbf
c00149fa:	89 c2                	mov    edx,eax
c00149fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ff:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a02:	e8 15 6f 00 00       	call   c001b91c <unlockScheduler()>
c0014a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a0d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a10:	01 c2                	add    edx,eax
c0014a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a18:	83 ec 0c             	sub    esp,0xc
c0014a1b:	68 0e 78 02 c0       	push   0xc002780e
c0014a20:	e8 2e d8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014a25:	83 c4 10             	add    esp,0x10
c0014a28:	e9 8e 00 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x5b8>
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	68 21 78 02 c0       	push   0xc0027821
c0014a35:	e8 19 d8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a40:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a49:	c1 e0 04             	shl    eax,0x4
c0014a4c:	01 d0                	add    eax,edx
c0014a4e:	83 c0 03             	add    eax,0x3
c0014a51:	8a 00                	mov    al,BYTE PTR [eax]
c0014a53:	0f b6 d8             	movzx  ebx,al
c0014a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a59:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a62:	c1 e0 04             	shl    eax,0x4
c0014a65:	01 d0                	add    eax,edx
c0014a67:	83 c0 02             	add    eax,0x2
c0014a6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6c:	0f b6 c8             	movzx  ecx,al
c0014a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a72:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a7b:	c1 e0 04             	shl    eax,0x4
c0014a7e:	01 d0                	add    eax,edx
c0014a80:	40                   	inc    eax
c0014a81:	8a 00                	mov    al,BYTE PTR [eax]
c0014a83:	0f b6 d0             	movzx  edx,al
c0014a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a89:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a92:	c1 e0 04             	shl    eax,0x4
c0014a95:	01 f0                	add    eax,esi
c0014a97:	8a 00                	mov    al,BYTE PTR [eax]
c0014a99:	0f b6 c0             	movzx  eax,al
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	53                   	push   ebx
c0014aa0:	51                   	push   ecx
c0014aa1:	52                   	push   edx
c0014aa2:	50                   	push   eax
c0014aa3:	68 34 78 02 c0       	push   0xc0027834
c0014aa8:	e8 a6 d7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014aad:	83 c4 20             	add    esp,0x20
c0014ab0:	83 ec 0c             	sub    esp,0xc
c0014ab3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ab6:	e8 a5 f5 ff ff       	call   c0014060 <displayDebugInfo(regs*)>
c0014abb:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014abe:	5b                   	pop    ebx
c0014abf:	5e                   	pop    esi
c0014ac0:	5d                   	pop    ebp
c0014ac1:	c3                   	ret    

c0014ac2 <displayProgramFault(char const*)>:
c0014ac2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ad0:	85 c0                	test   eax,eax
c0014ad2:	74 15                	je     c0014ae9 <displayProgramFault(char const*)+0x27>
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	6a 04                	push   0x4
c0014ad9:	6a 0f                	push   0xf
c0014adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014adf:	50                   	push   eax
c0014ae0:	e8 5d ba ff ff       	call   c0010542 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014ae5:	83 c4 1c             	add    esp,0x1c
c0014ae8:	c3                   	ret    
c0014ae9:	c3                   	ret    

c0014aea <setupInterruptController()>:
c0014aea:	55                   	push   ebp
c0014aeb:	89 e5                	mov    ebp,esp
c0014aed:	53                   	push   ebx
c0014aee:	83 ec 14             	sub    esp,0x14
c0014af1:	b8 00 00 00 00       	mov    eax,0x0
c0014af6:	85 c0                	test   eax,eax
c0014af8:	0f 95 c0             	setne  al
c0014afb:	84 c0                	test   al,al
c0014afd:	74 56                	je     c0014b55 <setupInterruptController()+0x6b>
c0014aff:	83 ec 0c             	sub    esp,0xc
c0014b02:	68 58 21 00 00       	push   0x2158
c0014b07:	e8 58 d6 ff ff       	call   c0012164 <operator new(unsigned long)>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	89 c3                	mov    ebx,eax
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	53                   	push   ebx
c0014b15:	e8 e6 d8 00 00       	call   c0022400 <APIC::APIC()>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b20:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b28:	83 c0 08             	add    eax,0x8
c0014b2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b2d:	6a 00                	push   0x0
c0014b2f:	6a 00                	push   0x0
c0014b31:	6a 00                	push   0x0
c0014b33:	52                   	push   edx
c0014b34:	ff d0                	call   eax
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014b3e:	83 ec 08             	sub    esp,0x8
c0014b41:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b44:	50                   	push   eax
c0014b45:	e8 e4 ea ff ff       	call   c001362e <Device::addChild(Device*)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b50:	e9 48 03 00 00       	jmp    c0014e9d <setupInterruptController()+0x3b3>
c0014b55:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014b5a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b60:	83 e0 01             	and    eax,0x1
c0014b63:	84 c0                	test   al,al
c0014b65:	0f 95 c0             	setne  al
c0014b68:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	68 58 21 00 00       	push   0x2158
c0014b73:	e8 ec d5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	89 c3                	mov    ebx,eax
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	53                   	push   ebx
c0014b81:	e8 c6 dd 00 00       	call   c002294c <PIC::PIC()>
c0014b86:	83 c4 10             	add    esp,0x10
c0014b89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014b8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014b8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b94:	83 c0 08             	add    eax,0x8
c0014b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b99:	6a 00                	push   0x0
c0014b9b:	6a 00                	push   0x0
c0014b9d:	6a 00                	push   0x0
c0014b9f:	52                   	push   edx
c0014ba0:	ff d0                	call   eax
c0014ba2:	83 c4 10             	add    esp,0x10
c0014ba5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014ba9:	74 6e                	je     c0014c19 <setupInterruptController()+0x12f>
c0014bab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb3:	83 c0 0c             	add    eax,0xc
c0014bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb8:	6a 00                	push   0x0
c0014bba:	6a 00                	push   0x0
c0014bbc:	6a 00                	push   0x0
c0014bbe:	52                   	push   edx
c0014bbf:	ff d0                	call   eax
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014bc8:	74 15                	je     c0014bdf <setupInterruptController()+0xf5>
c0014bca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bcf:	83 c0 04             	add    eax,0x4
c0014bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd4:	83 ec 0c             	sub    esp,0xc
c0014bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014bda:	ff d0                	call   eax
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	83 ec 0c             	sub    esp,0xc
c0014be2:	68 58 21 00 00       	push   0x2158
c0014be7:	e8 78 d5 ff ff       	call   c0012164 <operator new(unsigned long)>
c0014bec:	83 c4 10             	add    esp,0x10
c0014bef:	89 c3                	mov    ebx,eax
c0014bf1:	83 ec 0c             	sub    esp,0xc
c0014bf4:	53                   	push   ebx
c0014bf5:	e8 06 d8 00 00       	call   c0022400 <APIC::APIC()>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c08:	83 c0 08             	add    eax,0x8
c0014c0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c0d:	6a 00                	push   0x0
c0014c0f:	6a 00                	push   0x0
c0014c11:	6a 00                	push   0x0
c0014c13:	52                   	push   edx
c0014c14:	ff d0                	call   eax
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0014c1e:	83 ec 08             	sub    esp,0x8
c0014c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c24:	50                   	push   eax
c0014c25:	e8 04 ea ff ff       	call   c001362e <Device::addChild(Device*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c32:	83 c0 24             	add    eax,0x24
c0014c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c37:	6a 00                	push   0x0
c0014c39:	68 e4 44 01 c0       	push   0xc00144e4
c0014c3e:	6a 00                	push   0x0
c0014c40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c43:	ff d0                	call   eax
c0014c45:	83 c4 10             	add    esp,0x10
c0014c48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c4d:	83 c0 24             	add    eax,0x24
c0014c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c52:	6a 00                	push   0x0
c0014c54:	68 e4 44 01 c0       	push   0xc00144e4
c0014c59:	6a 01                	push   0x1
c0014c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c5e:	ff d0                	call   eax
c0014c60:	83 c4 10             	add    esp,0x10
c0014c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c68:	83 c0 24             	add    eax,0x24
c0014c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6d:	6a 00                	push   0x0
c0014c6f:	68 bd 3e 01 c0       	push   0xc0013ebd
c0014c74:	6a 02                	push   0x2
c0014c76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c79:	ff d0                	call   eax
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c83:	83 c0 24             	add    eax,0x24
c0014c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c88:	6a 00                	push   0x0
c0014c8a:	68 e4 44 01 c0       	push   0xc00144e4
c0014c8f:	6a 03                	push   0x3
c0014c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c94:	ff d0                	call   eax
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9e:	83 c0 24             	add    eax,0x24
c0014ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca3:	6a 00                	push   0x0
c0014ca5:	68 e4 44 01 c0       	push   0xc00144e4
c0014caa:	6a 04                	push   0x4
c0014cac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014caf:	ff d0                	call   eax
c0014cb1:	83 c4 10             	add    esp,0x10
c0014cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb9:	83 c0 24             	add    eax,0x24
c0014cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbe:	6a 00                	push   0x0
c0014cc0:	68 e4 44 01 c0       	push   0xc00144e4
c0014cc5:	6a 05                	push   0x5
c0014cc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cca:	ff d0                	call   eax
c0014ccc:	83 c4 10             	add    esp,0x10
c0014ccf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd4:	83 c0 24             	add    eax,0x24
c0014cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd9:	6a 00                	push   0x0
c0014cdb:	68 03 45 01 c0       	push   0xc0014503
c0014ce0:	6a 06                	push   0x6
c0014ce2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce5:	ff d0                	call   eax
c0014ce7:	83 c4 10             	add    esp,0x10
c0014cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ced:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cef:	83 c0 24             	add    eax,0x24
c0014cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf4:	6a 00                	push   0x0
c0014cf6:	68 65 44 01 c0       	push   0xc0014465
c0014cfb:	6a 07                	push   0x7
c0014cfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d00:	ff d0                	call   eax
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0a:	83 c0 24             	add    eax,0x24
c0014d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0f:	6a 00                	push   0x0
c0014d11:	68 d8 3c 01 c0       	push   0xc0013cd8
c0014d16:	6a 08                	push   0x8
c0014d18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d1b:	ff d0                	call   eax
c0014d1d:	83 c4 10             	add    esp,0x10
c0014d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d25:	83 c0 24             	add    eax,0x24
c0014d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d2a:	6a 00                	push   0x0
c0014d2c:	68 e4 44 01 c0       	push   0xc00144e4
c0014d31:	6a 09                	push   0x9
c0014d33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d36:	ff d0                	call   eax
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d40:	83 c0 24             	add    eax,0x24
c0014d43:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d45:	6a 00                	push   0x0
c0014d47:	68 e4 44 01 c0       	push   0xc00144e4
c0014d4c:	6a 0a                	push   0xa
c0014d4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d51:	ff d0                	call   eax
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5b:	83 c0 24             	add    eax,0x24
c0014d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d60:	6a 00                	push   0x0
c0014d62:	68 e4 44 01 c0       	push   0xc00144e4
c0014d67:	6a 0b                	push   0xb
c0014d69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d6c:	ff d0                	call   eax
c0014d6e:	83 c4 10             	add    esp,0x10
c0014d71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	83 c0 24             	add    eax,0x24
c0014d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7b:	6a 00                	push   0x0
c0014d7d:	68 e4 44 01 c0       	push   0xc00144e4
c0014d82:	6a 0c                	push   0xc
c0014d84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d87:	ff d0                	call   eax
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d91:	83 c0 24             	add    eax,0x24
c0014d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d96:	6a 00                	push   0x0
c0014d98:	68 94 44 01 c0       	push   0xc0014494
c0014d9d:	6a 0d                	push   0xd
c0014d9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da2:	ff d0                	call   eax
c0014da4:	83 c4 10             	add    esp,0x10
c0014da7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dac:	83 c0 24             	add    eax,0x24
c0014daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db1:	6a 00                	push   0x0
c0014db3:	68 cd 44 01 c0       	push   0xc00144cd
c0014db8:	6a 0e                	push   0xe
c0014dba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dbd:	ff d0                	call   eax
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc7:	83 c0 24             	add    eax,0x24
c0014dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dcc:	6a 00                	push   0x0
c0014dce:	68 e4 44 01 c0       	push   0xc00144e4
c0014dd3:	6a 0f                	push   0xf
c0014dd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dd8:	ff d0                	call   eax
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de2:	83 c0 24             	add    eax,0x24
c0014de5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de7:	6a 00                	push   0x0
c0014de9:	68 e4 44 01 c0       	push   0xc00144e4
c0014dee:	6a 10                	push   0x10
c0014df0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df3:	ff d0                	call   eax
c0014df5:	83 c4 10             	add    esp,0x10
c0014df8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfd:	83 c0 24             	add    eax,0x24
c0014e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e02:	6a 00                	push   0x0
c0014e04:	68 e4 44 01 c0       	push   0xc00144e4
c0014e09:	6a 11                	push   0x11
c0014e0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e0e:	ff d0                	call   eax
c0014e10:	83 c4 10             	add    esp,0x10
c0014e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e16:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e18:	83 c0 24             	add    eax,0x24
c0014e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1d:	6a 00                	push   0x0
c0014e1f:	68 e4 44 01 c0       	push   0xc00144e4
c0014e24:	6a 12                	push   0x12
c0014e26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e29:	ff d0                	call   eax
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e33:	83 c0 24             	add    eax,0x24
c0014e36:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e38:	6a 00                	push   0x0
c0014e3a:	68 e4 44 01 c0       	push   0xc00144e4
c0014e3f:	6a 13                	push   0x13
c0014e41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e44:	ff d0                	call   eax
c0014e46:	83 c4 10             	add    esp,0x10
c0014e49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4e:	83 c0 24             	add    eax,0x24
c0014e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e53:	6a 00                	push   0x0
c0014e55:	68 e4 44 01 c0       	push   0xc00144e4
c0014e5a:	6a 14                	push   0x14
c0014e5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e5f:	ff d0                	call   eax
c0014e61:	83 c4 10             	add    esp,0x10
c0014e64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e69:	83 c0 24             	add    eax,0x24
c0014e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6e:	6a 00                	push   0x0
c0014e70:	68 e4 44 01 c0       	push   0xc00144e4
c0014e75:	6a 1e                	push   0x1e
c0014e77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e7a:	ff d0                	call   eax
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e82:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e84:	83 c0 24             	add    eax,0x24
c0014e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e89:	6a 00                	push   0x0
c0014e8b:	68 2f a3 01 c0       	push   0xc001a32f
c0014e90:	6a 60                	push   0x60
c0014e92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e95:	ff d0                	call   eax
c0014e97:	83 c4 10             	add    esp,0x10
c0014e9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014ea0:	c9                   	leave  
c0014ea1:	c3                   	ret    

c0014ea2 <InterruptController::convertLegacyIRQNumber(int)>:
c0014ea2:	55                   	push   ebp
c0014ea3:	89 e5                	mov    ebp,esp
c0014ea5:	83 ec 08             	sub    esp,0x8
c0014ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	50                   	push   eax
c0014eaf:	e8 5c ea ff ff       	call   c0013910 <Device::getName()>
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb9:	3c 41                	cmp    al,0x41
c0014ebb:	0f 94 c0             	sete   al
c0014ebe:	84 c0                	test   al,al
c0014ec0:	74 28                	je     c0014eea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014ec2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014ec6:	7f 12                	jg     c0014eda <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014ec8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014ecb:	05 40 97 02 c0       	add    eax,0xc0029740
c0014ed0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed2:	0f b6 c0             	movzx  eax,al
c0014ed5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014ed8:	eb 10                	jmp    c0014eea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014eda:	83 ec 0c             	sub    esp,0xc
c0014edd:	68 b4 75 02 c0       	push   0xc00275b4
c0014ee2:	e8 ea 3a 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014eed:	c9                   	leave  
c0014eee:	c3                   	ret    
c0014eef:	90                   	nop

c0014ef0 <startGUI(void*)>:
c0014ef0:	55                   	push   ebp
c0014ef1:	89 e5                	mov    ebp,esp
c0014ef3:	53                   	push   ebx
c0014ef4:	83 ec 04             	sub    esp,0x4
c0014ef7:	e8 20 6a 00 00       	call   c001b91c <unlockScheduler()>
c0014efc:	e8 04 6a 00 00       	call   c001b905 <getIRQNestingLevel()>
c0014f01:	83 ec 08             	sub    esp,0x8
c0014f04:	50                   	push   eax
c0014f05:	68 9c 78 02 c0       	push   0xc002789c
c0014f0a:	e8 44 d3 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0014f18:	83 ec 08             	sub    esp,0x8
c0014f1b:	6a 01                	push   0x1
c0014f1d:	68 b6 78 02 c0       	push   0xc00278b6
c0014f22:	e8 21 64 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c0014f27:	83 c4 10             	add    esp,0x10
c0014f2a:	83 ec 08             	sub    esp,0x8
c0014f2d:	53                   	push   ebx
c0014f2e:	50                   	push   eax
c0014f2f:	e8 da 65 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c0014f34:	83 c4 10             	add    esp,0x10
c0014f37:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0014f3d:	83 ec 08             	sub    esp,0x8
c0014f40:	6a 01                	push   0x1
c0014f42:	68 d0 78 02 c0       	push   0xc00278d0
c0014f47:	e8 fc 63 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c0014f4c:	83 c4 10             	add    esp,0x10
c0014f4f:	83 ec 08             	sub    esp,0x8
c0014f52:	53                   	push   ebx
c0014f53:	50                   	push   eax
c0014f54:	e8 b5 65 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c0014f59:	83 c4 10             	add    esp,0x10
c0014f5c:	90                   	nop
c0014f5d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f60:	c9                   	leave  
c0014f61:	c3                   	ret    

c0014f62 <sendKeyToTerminal(unsigned char)>:
c0014f62:	55                   	push   ebp
c0014f63:	89 e5                	mov    ebp,esp
c0014f65:	83 ec 28             	sub    esp,0x28
c0014f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014f6e:	a1 24 a5 02 c0       	mov    eax,ds:0xc002a524
c0014f73:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014f77:	83 ec 08             	sub    esp,0x8
c0014f7a:	52                   	push   edx
c0014f7b:	50                   	push   eax
c0014f7c:	e8 fd ba ff ff       	call   c0010a7e <VgaText::receiveKey(unsigned char)>
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014f88:	75 41                	jne    c0014fcb <sendKeyToTerminal(unsigned char)+0x69>
c0014f8a:	e8 b2 69 00 00       	call   c001b941 <lockStuff()>
c0014f8f:	a1 00 a6 02 c0       	mov    eax,ds:0xc002a600
c0014f94:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f97:	c7 05 00 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a600,0x0
c0014fa1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fa5:	74 1f                	je     c0014fc6 <sendKeyToTerminal(unsigned char)+0x64>
c0014fa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014faa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014fad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fb3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fbc:	e8 71 6f 00 00       	call   c001bf32 <unblockTask(ThreadControlBlock*)>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	eb db                	jmp    c0014fa1 <sendKeyToTerminal(unsigned char)+0x3f>
c0014fc6:	e8 10 6d 00 00       	call   c001bcdb <unlockStuff()>
c0014fcb:	90                   	nop
c0014fcc:	c9                   	leave  
c0014fcd:	c3                   	ret    

c0014fce <sendKeyboardToken(KeyboardToken)>:
c0014fce:	55                   	push   ebp
c0014fcf:	89 e5                	mov    ebp,esp
c0014fd1:	83 ec 18             	sub    esp,0x18
c0014fd4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fda:	0f b7 c0             	movzx  eax,ax
c0014fdd:	83 f2 01             	xor    edx,0x1
c0014fe0:	88 90 20 a6 02 c0    	mov    BYTE PTR [eax-0x3ffd59e0],dl
c0014fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe9:	66 3d 03 02          	cmp    ax,0x203
c0014fed:	75 07                	jne    c0014ff6 <sendKeyboardToken(KeyboardToken)+0x28>
c0014fef:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c0014ff4:	84 c0                	test   al,al
c0014ff6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014ffa:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014ffd:	a0 28 aa 02 c0       	mov    al,ds:0xc002aa28
c0015002:	38 c2                	cmp    dl,al
c0015004:	74 1c                	je     c0015022 <sendKeyboardToken(KeyboardToken)+0x54>
c0015006:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015009:	a2 28 aa 02 c0       	mov    ds:0xc002aa28,al
c001500e:	a0 28 aa 02 c0       	mov    al,ds:0xc002aa28
c0015013:	0f b6 c0             	movzx  eax,al
c0015016:	83 ec 0c             	sub    esp,0xc
c0015019:	50                   	push   eax
c001501a:	e8 cd ac ff ff       	call   c000fcec <setTerminalScrollLock(bool)>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015025:	84 c0                	test   al,al
c0015027:	0f 84 ae 00 00 00    	je     c00150db <sendKeyboardToken(KeyboardToken)+0x10d>
c001502d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015030:	66 3d 10 03          	cmp    ax,0x310
c0015034:	75 06                	jne    c001503c <sendKeyboardToken(KeyboardToken)+0x6e>
c0015036:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001503c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503f:	66 3d 11 03          	cmp    ax,0x311
c0015043:	75 06                	jne    c001504b <sendKeyboardToken(KeyboardToken)+0x7d>
c0015045:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001504b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504e:	66 3d 12 03          	cmp    ax,0x312
c0015052:	75 06                	jne    c001505a <sendKeyboardToken(KeyboardToken)+0x8c>
c0015054:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001505a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505d:	66 3d 13 03          	cmp    ax,0x313
c0015061:	75 06                	jne    c0015069 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015063:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506c:	66 3d 14 03          	cmp    ax,0x314
c0015070:	75 06                	jne    c0015078 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015072:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507b:	66 3d 15 03          	cmp    ax,0x315
c001507f:	75 06                	jne    c0015087 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015081:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508a:	66 3d 16 03          	cmp    ax,0x316
c001508e:	75 06                	jne    c0015096 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015090:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015099:	66 3d 17 03          	cmp    ax,0x317
c001509d:	75 06                	jne    c00150a5 <sendKeyboardToken(KeyboardToken)+0xd7>
c001509f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a8:	66 3d 18 03          	cmp    ax,0x318
c00150ac:	75 06                	jne    c00150b4 <sendKeyboardToken(KeyboardToken)+0xe6>
c00150ae:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b7:	66 3d 19 03          	cmp    ax,0x319
c00150bb:	75 06                	jne    c00150c3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00150bd:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	66 3d 1a 03          	cmp    ax,0x31a
c00150ca:	0f 85 c9 00 00 00    	jne    c0015199 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150d0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00150d6:	e9 be 00 00 00       	jmp    c0015199 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150de:	66 3d 10 03          	cmp    ax,0x310
c00150e2:	75 0a                	jne    c00150ee <sendKeyboardToken(KeyboardToken)+0x120>
c00150e4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00150ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00150ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f1:	66 3d 11 03          	cmp    ax,0x311
c00150f5:	75 0a                	jne    c0015101 <sendKeyboardToken(KeyboardToken)+0x133>
c00150f7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00150fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015104:	66 3d 12 03          	cmp    ax,0x312
c0015108:	75 0a                	jne    c0015114 <sendKeyboardToken(KeyboardToken)+0x146>
c001510a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015110:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	66 3d 13 03          	cmp    ax,0x313
c001511b:	75 0a                	jne    c0015127 <sendKeyboardToken(KeyboardToken)+0x159>
c001511d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015123:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	66 3d 14 03          	cmp    ax,0x314
c001512e:	75 0a                	jne    c001513a <sendKeyboardToken(KeyboardToken)+0x16c>
c0015130:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015136:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001513a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513d:	66 3d 15 03          	cmp    ax,0x315
c0015141:	75 0a                	jne    c001514d <sendKeyboardToken(KeyboardToken)+0x17f>
c0015143:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015149:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001514d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015150:	66 3d 16 03          	cmp    ax,0x316
c0015154:	75 0a                	jne    c0015160 <sendKeyboardToken(KeyboardToken)+0x192>
c0015156:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001515c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015163:	66 3d 17 03          	cmp    ax,0x317
c0015167:	75 0a                	jne    c0015173 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015169:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001516f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015176:	66 3d 18 03          	cmp    ax,0x318
c001517a:	75 0a                	jne    c0015186 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001517c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015189:	66 3d 19 03          	cmp    ax,0x319
c001518d:	75 0a                	jne    c0015199 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001518f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015195:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519c:	66 3d 00 02          	cmp    ax,0x200
c00151a0:	75 2a                	jne    c00151cc <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151a2:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c00151a7:	83 f0 01             	xor    eax,0x1
c00151aa:	84 c0                	test   al,al
c00151ac:	74 1e                	je     c00151cc <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151ae:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00151b3:	6a 01                	push   0x1
c00151b5:	6a 00                	push   0x0
c00151b7:	68 f0 4e 01 c0       	push   0xc0014ef0
c00151bc:	50                   	push   eax
c00151bd:	e8 8a 68 00 00       	call   c001ba4c <Process::createThread(void (*)(void*), void*, int)>
c00151c2:	83 c4 10             	add    esp,0x10
c00151c5:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c00151cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cf:	66 3d 1d 03          	cmp    ax,0x31d
c00151d3:	75 06                	jne    c00151db <sendKeyboardToken(KeyboardToken)+0x20d>
c00151d5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151de:	66 3d 1c 03          	cmp    ax,0x31c
c00151e2:	75 06                	jne    c00151ea <sendKeyboardToken(KeyboardToken)+0x21c>
c00151e4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00151ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ed:	66 3d 1b 03          	cmp    ax,0x31b
c00151f1:	75 06                	jne    c00151f9 <sendKeyboardToken(KeyboardToken)+0x22b>
c00151f3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00151f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fc:	66 3d 1e 03          	cmp    ax,0x31e
c0015200:	75 06                	jne    c0015208 <sendKeyboardToken(KeyboardToken)+0x23a>
c0015202:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520b:	66 3d 1f 03          	cmp    ax,0x31f
c001520f:	75 06                	jne    c0015217 <sendKeyboardToken(KeyboardToken)+0x249>
c0015211:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521a:	66 3d 1a 03          	cmp    ax,0x31a
c001521e:	75 06                	jne    c0015226 <sendKeyboardToken(KeyboardToken)+0x258>
c0015220:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015226:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001522a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001522d:	83 f0 01             	xor    eax,0x1
c0015230:	84 c0                	test   al,al
c0015232:	74 77                	je     c00152ab <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015234:	a0 21 a7 02 c0       	mov    al,ds:0xc002a721
c0015239:	84 c0                	test   al,al
c001523b:	74 41                	je     c001527e <sendKeyboardToken(KeyboardToken)+0x2b0>
c001523d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015241:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015245:	74 2b                	je     c0015272 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015247:	8b 15 24 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa24
c001524d:	89 d0                	mov    eax,edx
c001524f:	c1 e0 02             	shl    eax,0x2
c0015252:	01 d0                	add    eax,edx
c0015254:	01 c0                	add    eax,eax
c0015256:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c001525b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525e:	0f b7 c0             	movzx  eax,ax
c0015261:	8d 50 d0             	lea    edx,[eax-0x30]
c0015264:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c0015269:	01 d0                	add    eax,edx
c001526b:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c0015270:	eb 6d                	jmp    c00152df <sendKeyboardToken(KeyboardToken)+0x311>
c0015272:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c001527c:	eb 61                	jmp    c00152df <sendKeyboardToken(KeyboardToken)+0x311>
c001527e:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c0015283:	85 c0                	test   eax,eax
c0015285:	74 18                	je     c001529f <sendKeyboardToken(KeyboardToken)+0x2d1>
c0015287:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c001528c:	0f b6 c0             	movzx  eax,al
c001528f:	83 ec 0c             	sub    esp,0xc
c0015292:	50                   	push   eax
c0015293:	e8 ca fc ff ff       	call   c0014f62 <sendKeyToTerminal(unsigned char)>
c0015298:	83 c4 10             	add    esp,0x10
c001529b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001529f:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c00152a9:	eb 34                	jmp    c00152df <sendKeyboardToken(KeyboardToken)+0x311>
c00152ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ae:	66 3d 01 01          	cmp    ax,0x101
c00152b2:	75 2b                	jne    c00152df <sendKeyboardToken(KeyboardToken)+0x311>
c00152b4:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c00152b9:	85 c0                	test   eax,eax
c00152bb:	74 18                	je     c00152d5 <sendKeyboardToken(KeyboardToken)+0x307>
c00152bd:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c00152c2:	0f b6 c0             	movzx  eax,al
c00152c5:	83 ec 0c             	sub    esp,0xc
c00152c8:	50                   	push   eax
c00152c9:	e8 94 fc ff ff       	call   c0014f62 <sendKeyToTerminal(unsigned char)>
c00152ce:	83 c4 10             	add    esp,0x10
c00152d1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152d5:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c00152df:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00152e2:	83 f0 01             	xor    eax,0x1
c00152e5:	84 c0                	test   al,al
c00152e7:	74 4c                	je     c0015335 <sendKeyboardToken(KeyboardToken)+0x367>
c00152e9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00152ec:	83 f0 01             	xor    eax,0x1
c00152ef:	84 c0                	test   al,al
c00152f1:	74 42                	je     c0015335 <sendKeyboardToken(KeyboardToken)+0x367>
c00152f3:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c00152f8:	83 f0 01             	xor    eax,0x1
c00152fb:	84 c0                	test   al,al
c00152fd:	74 36                	je     c0015335 <sendKeyboardToken(KeyboardToken)+0x367>
c00152ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015302:	66 83 f8 1f          	cmp    ax,0x1f
c0015306:	76 09                	jbe    c0015311 <sendKeyboardToken(KeyboardToken)+0x343>
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	66 83 f8 7e          	cmp    ax,0x7e
c001530f:	76 12                	jbe    c0015323 <sendKeyboardToken(KeyboardToken)+0x355>
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	66 83 f8 0a          	cmp    ax,0xa
c0015318:	74 09                	je     c0015323 <sendKeyboardToken(KeyboardToken)+0x355>
c001531a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531d:	66 83 f8 08          	cmp    ax,0x8
c0015321:	75 12                	jne    c0015335 <sendKeyboardToken(KeyboardToken)+0x367>
c0015323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015326:	0f b6 c0             	movzx  eax,al
c0015329:	83 ec 0c             	sub    esp,0xc
c001532c:	50                   	push   eax
c001532d:	e8 30 fc ff ff       	call   c0014f62 <sendKeyToTerminal(unsigned char)>
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015338:	83 f0 01             	xor    eax,0x1
c001533b:	84 c0                	test   al,al
c001533d:	74 4f                	je     c001538e <sendKeyboardToken(KeyboardToken)+0x3c0>
c001533f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015342:	83 f0 01             	xor    eax,0x1
c0015345:	84 c0                	test   al,al
c0015347:	74 45                	je     c001538e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015349:	a0 20 a7 02 c0       	mov    al,ds:0xc002a720
c001534e:	84 c0                	test   al,al
c0015350:	74 3c                	je     c001538e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	66 83 f8 3f          	cmp    ax,0x3f
c0015359:	76 33                	jbe    c001538e <sendKeyboardToken(KeyboardToken)+0x3c0>
c001535b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535e:	66 83 f8 7f          	cmp    ax,0x7f
c0015362:	77 2a                	ja     c001538e <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015367:	88 c2                	mov    dl,al
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	66 83 f8 5f          	cmp    ax,0x5f
c0015370:	76 04                	jbe    c0015376 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015372:	b0 20                	mov    al,0x20
c0015374:	eb 02                	jmp    c0015378 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015376:	b0 00                	mov    al,0x0
c0015378:	29 c2                	sub    edx,eax
c001537a:	88 d0                	mov    al,dl
c001537c:	83 e8 40             	sub    eax,0x40
c001537f:	0f b6 c0             	movzx  eax,al
c0015382:	83 ec 0c             	sub    esp,0xc
c0015385:	50                   	push   eax
c0015386:	e8 d7 fb ff ff       	call   c0014f62 <sendKeyToTerminal(unsigned char)>
c001538b:	83 c4 10             	add    esp,0x10
c001538e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015391:	66 3d 00 03          	cmp    ax,0x300
c0015395:	75 0f                	jne    c00153a6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015397:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001539a:	83 f0 01             	xor    eax,0x1
c001539d:	84 c0                	test   al,al
c001539f:	74 05                	je     c00153a6 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153a1:	e8 6d b1 ff ff       	call   c0010513 <doTerminalCycle()>
c00153a6:	90                   	nop
c00153a7:	c9                   	leave  
c00153a8:	c3                   	ret    

c00153a9 <clearInternalKeybuffer(VgaText*)>:
c00153a9:	55                   	push   ebp
c00153aa:	89 e5                	mov    ebp,esp
c00153ac:	83 ec 08             	sub    esp,0x8
c00153af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b2:	05 34 11 00 00       	add    eax,0x1134
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	50                   	push   eax
c00153bb:	e8 da b2 fe ff       	call   c000069a <strlen>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00153c6:	81 c2 34 11 00 00    	add    edx,0x1134
c00153cc:	83 ec 04             	sub    esp,0x4
c00153cf:	50                   	push   eax
c00153d0:	6a 00                	push   0x0
c00153d2:	52                   	push   edx
c00153d3:	e8 a5 b2 fe ff       	call   c000067d <memset>
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	90                   	nop
c00153dc:	c9                   	leave  
c00153dd:	c3                   	ret    

c00153de <readKeyboard(VgaText*, char*, unsigned long)>:
c00153de:	55                   	push   ebp
c00153df:	89 e5                	mov    ebp,esp
c00153e1:	83 ec 18             	sub    esp,0x18
c00153e4:	fb                   	sti    
c00153e5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00153ec:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00153f0:	0f 84 8a 00 00 00    	je     c0015480 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00153f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00153ff:	84 c0                	test   al,al
c0015401:	75 11                	jne    c0015414 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015403:	e8 12 65 00 00       	call   c001b91a <lockScheduler()>
c0015408:	e8 49 68 00 00       	call   c001bc56 <schedule()>
c001540d:	e8 0a 65 00 00       	call   c001b91c <unlockScheduler()>
c0015412:	eb e2                	jmp    c00153f6 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015414:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015417:	8d 50 01             	lea    edx,[eax+0x1]
c001541a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001541d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015420:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015426:	88 10                	mov    BYTE PTR [eax],dl
c0015428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015431:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	05 34 11 00 00       	add    eax,0x1134
c001543c:	83 ec 0c             	sub    esp,0xc
c001543f:	50                   	push   eax
c0015440:	e8 55 b2 fe ff       	call   c000069a <strlen>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001544b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015451:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015454:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015457:	81 c2 34 11 00 00    	add    edx,0x1134
c001545d:	83 ec 04             	sub    esp,0x4
c0015460:	50                   	push   eax
c0015461:	51                   	push   ecx
c0015462:	52                   	push   edx
c0015463:	e8 a7 b1 fe ff       	call   c000060f <memmove>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001546e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015471:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015475:	0f 85 71 ff ff ff    	jne    c00153ec <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001547b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547e:	eb 03                	jmp    c0015483 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	c9                   	leave  
c0015484:	c3                   	ret    
c0015485:	90                   	nop

c0015486 <Keyboard::Keyboard(char const*)>:
c0015486:	83 ec 0c             	sub    esp,0xc
c0015489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001548d:	83 ec 08             	sub    esp,0x8
c0015490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015494:	50                   	push   eax
c0015495:	e8 84 e3 ff ff       	call   c001381e <Device::Device(char const*)>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	ba f4 78 02 c0       	mov    edx,0xc00278f4
c00154a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154a6:	89 10                	mov    DWORD PTR [eax],edx
c00154a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ac:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154b6:	c6 05 04 a6 02 c0 01 	mov    BYTE PTR ds:0xc002a604,0x1
c00154bd:	90                   	nop
c00154be:	83 c4 0c             	add    esp,0xc
c00154c1:	c3                   	ret    

c00154c2 <Keyboard::~Keyboard()>:
c00154c2:	83 ec 0c             	sub    esp,0xc
c00154c5:	ba f4 78 02 c0       	mov    edx,0xc00278f4
c00154ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ce:	89 10                	mov    DWORD PTR [eax],edx
c00154d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	50                   	push   eax
c00154d8:	e8 23 e0 ff ff       	call   c0013500 <Device::~Device()>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	90                   	nop
c00154e1:	83 c4 0c             	add    esp,0xc
c00154e4:	c3                   	ret    
c00154e5:	90                   	nop

c00154e6 <Keyboard::~Keyboard()>:
c00154e6:	83 ec 0c             	sub    esp,0xc
c00154e9:	83 ec 0c             	sub    esp,0xc
c00154ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f0:	e8 cd ff ff ff       	call   c00154c2 <Keyboard::~Keyboard()>
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	83 ec 08             	sub    esp,0x8
c00154fb:	68 5c 01 00 00       	push   0x15c
c0015500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015504:	e8 6a cc ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	83 c4 0c             	add    esp,0xc
c001550f:	c3                   	ret    

c0015510 <LogicalDisk::close(int, int, void*)>:
c0015510:	83 c8 ff             	or     eax,0xffffffff
c0015513:	c3                   	ret    

c0015514 <LogicalDisk::~LogicalDisk()>:
c0015514:	83 ec 0c             	sub    esp,0xc
c0015517:	ba a4 79 02 c0       	mov    edx,0xc00279a4
c001551c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015520:	89 10                	mov    DWORD PTR [eax],edx
c0015522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	50                   	push   eax
c001552a:	e8 d1 df ff ff       	call   c0013500 <Device::~Device()>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	90                   	nop
c0015533:	83 c4 0c             	add    esp,0xc
c0015536:	c3                   	ret    
c0015537:	90                   	nop

c0015538 <LogicalDisk::~LogicalDisk()>:
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	83 ec 0c             	sub    esp,0xc
c001553e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015542:	e8 cd ff ff ff       	call   c0015514 <LogicalDisk::~LogicalDisk()>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	83 ec 08             	sub    esp,0x8
c001554d:	68 74 01 00 00       	push   0x174
c0015552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015556:	e8 18 cc ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001555b:	83 c4 10             	add    esp,0x10
c001555e:	83 c4 0c             	add    esp,0xc
c0015561:	c3                   	ret    

c0015562 <LogicalDisk::open(int, int, void*)>:
c0015562:	83 ec 18             	sub    esp,0x18
c0015565:	68 20 79 02 c0       	push   0xc0027920
c001556a:	e8 62 34 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c001556f:	83 c8 ff             	or     eax,0xffffffff
c0015572:	83 c4 1c             	add    esp,0x1c
c0015575:	c3                   	ret    

c0015576 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015576:	53                   	push   ebx
c0015577:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001557b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001557f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015583:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015589:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001558f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015595:	77 10                	ja     c00155a7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015597:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001559d:	89 d3                	mov    ebx,edx
c001559f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155a5:	72 05                	jb     c00155ac <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155a7:	83 c8 ff             	or     eax,0xffffffff
c00155aa:	89 c2                	mov    edx,eax
c00155ac:	5b                   	pop    ebx
c00155ad:	c3                   	ret    

c00155ae <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155ae:	56                   	push   esi
c00155af:	83 c8 ff             	or     eax,0xffffffff
c00155b2:	53                   	push   ebx
c00155b3:	89 c2                	mov    edx,eax
c00155b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155b9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00155c1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00155c7:	77 27                	ja     c00155f0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155c9:	89 d8                	mov    eax,ebx
c00155cb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00155d1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00155d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155dc:	89 c2                	mov    edx,eax
c00155de:	73 10                	jae    c00155f0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155e0:	89 c8                	mov    eax,ecx
c00155e2:	89 da                	mov    edx,ebx
c00155e4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00155ea:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00155f0:	5b                   	pop    ebx
c00155f1:	5e                   	pop    esi
c00155f2:	c3                   	ret    
c00155f3:	90                   	nop

c00155f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00155f4:	83 ec 1c             	sub    esp,0x1c
c00155f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00155ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015607:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001560b:	89 04 24             	mov    DWORD PTR [esp],eax
c001560e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015612:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561a:	83 ec 08             	sub    esp,0x8
c001561d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015621:	50                   	push   eax
c0015622:	e8 f7 e1 ff ff       	call   c001381e <Device::Device(char const*)>
c0015627:	83 c4 10             	add    esp,0x10
c001562a:	ba a4 79 02 c0       	mov    edx,0xc00279a4
c001562f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015633:	89 10                	mov    DWORD PTR [eax],edx
c0015635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015639:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015644:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001564b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001564f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015659:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001565d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015661:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015665:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001566b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015671:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015675:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015678:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001567c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015682:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015690:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156a4:	90                   	nop
c00156a5:	83 c4 1c             	add    esp,0x1c
c00156a8:	c3                   	ret    
c00156a9:	90                   	nop

c00156aa <LogicalDisk::assignDriveLetter()>:
c00156aa:	55                   	push   ebp
c00156ab:	57                   	push   edi
c00156ac:	56                   	push   esi
c00156ad:	53                   	push   ebx
c00156ae:	83 ec 14             	sub    esp,0x14
c00156b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156b5:	8b 3d 40 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aa40
c00156bb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00156c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00156c5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00156cb:	8b 3d 44 aa 02 c0    	mov    edi,DWORD PTR ds:0xc002aa44
c00156d1:	3c 01                	cmp    al,0x1
c00156d3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00156d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00156db:	19 c0                	sbb    eax,eax
c00156dd:	83 e0 02             	and    eax,0x2
c00156e0:	83 c0 41             	add    eax,0x41
c00156e3:	0f be e8             	movsx  ebp,al
c00156e6:	3c 43                	cmp    al,0x43
c00156e8:	75 10                	jne    c00156fa <LogicalDisk::assignDriveLetter()+0x50>
c00156ea:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00156f1:	75 5d                	jne    c0015750 <LogicalDisk::assignDriveLetter()+0xa6>
c00156f3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00156f8:	75 56                	jne    c0015750 <LogicalDisk::assignDriveLetter()+0xa6>
c00156fa:	8d 75 bf             	lea    esi,[ebp-0x41]
c00156fd:	ba 01 00 00 00       	mov    edx,0x1
c0015702:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015706:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001570a:	d3 e2                	shl    edx,cl
c001570c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015710:	89 d7                	mov    edi,edx
c0015712:	89 d6                	mov    esi,edx
c0015714:	c1 ff 1f             	sar    edi,0x1f
c0015717:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001571b:	21 f9                	and    ecx,edi
c001571d:	09 d1                	or     ecx,edx
c001571f:	75 2f                	jne    c0015750 <LogicalDisk::assignDriveLetter()+0xa6>
c0015721:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015725:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015729:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001572f:	09 f2                	or     edx,esi
c0015731:	89 15 40 aa 02 c0    	mov    DWORD PTR ds:0xc002aa40,edx
c0015737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001573b:	09 fa                	or     edx,edi
c001573d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015741:	89 15 44 aa 02 c0    	mov    DWORD PTR ds:0xc002aa44,edx
c0015747:	89 1c bd 60 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd55a0],ebx
c001574e:	eb 08                	jmp    c0015758 <LogicalDisk::assignDriveLetter()+0xae>
c0015750:	45                   	inc    ebp
c0015751:	40                   	inc    eax
c0015752:	3c 5b                	cmp    al,0x5b
c0015754:	75 90                	jne    c00156e6 <LogicalDisk::assignDriveLetter()+0x3c>
c0015756:	31 c0                	xor    eax,eax
c0015758:	83 c4 14             	add    esp,0x14
c001575b:	5b                   	pop    ebx
c001575c:	5e                   	pop    esi
c001575d:	5f                   	pop    edi
c001575e:	5d                   	pop    ebp
c001575f:	c3                   	ret    

c0015760 <LogicalDisk::mount()>:
c0015760:	56                   	push   esi
c0015761:	53                   	push   ebx
c0015762:	51                   	push   ecx
c0015763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015767:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c001576d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015777:	85 db                	test   ebx,ebx
c0015779:	74 50                	je     c00157cb <LogicalDisk::mount()+0x6b>
c001577b:	e8 85 61 00 00       	call   c001b905 <getIRQNestingLevel()>
c0015780:	52                   	push   edx
c0015781:	52                   	push   edx
c0015782:	50                   	push   eax
c0015783:	68 44 79 02 c0       	push   0xc0027944
c0015788:	e8 c6 ca ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001578d:	83 c4 0c             	add    esp,0xc
c0015790:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015799:	83 e8 41             	sub    eax,0x41
c001579c:	50                   	push   eax
c001579d:	56                   	push   esi
c001579e:	53                   	push   ebx
c001579f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	84 c0                	test   al,al
c00157a7:	74 08                	je     c00157b1 <LogicalDisk::mount()+0x51>
c00157a9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157af:	eb 1c                	jmp    c00157cd <LogicalDisk::mount()+0x6d>
c00157b1:	e8 4f 61 00 00       	call   c001b905 <getIRQNestingLevel()>
c00157b6:	51                   	push   ecx
c00157b7:	51                   	push   ecx
c00157b8:	50                   	push   eax
c00157b9:	68 5f 79 02 c0       	push   0xc002795f
c00157be:	e8 90 ca ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00157c3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	eb ac                	jmp    c0015777 <LogicalDisk::mount()+0x17>
c00157cb:	31 c0                	xor    eax,eax
c00157cd:	5a                   	pop    edx
c00157ce:	5b                   	pop    ebx
c00157cf:	5e                   	pop    esi
c00157d0:	c3                   	ret    
c00157d1:	90                   	nop

c00157d2 <LogicalDisk::unmount()>:
c00157d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157d6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00157e0:	c3                   	ret    
c00157e1:	90                   	nop

c00157e2 <LogicalDisk::unassignDriveLetter()>:
c00157e2:	57                   	push   edi
c00157e3:	56                   	push   esi
c00157e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157e8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00157ef:	84 c9                	test   cl,cl
c00157f1:	75 0f                	jne    c0015802 <LogicalDisk::unassignDriveLetter()+0x20>
c00157f3:	c7 44 24 0c 7a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002797a
c00157fb:	5e                   	pop    esi
c00157fc:	5f                   	pop    edi
c00157fd:	e9 cf 31 00 00       	jmp    c00189d1 <Krnl::panic(char const*)>
c0015802:	83 e9 41             	sub    ecx,0x41
c0015805:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001580c:	b8 01 00 00 00       	mov    eax,0x1
c0015811:	c7 04 8d 60 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd55a0],0x0
c001581c:	d3 e0                	shl    eax,cl
c001581e:	89 c7                	mov    edi,eax
c0015820:	f7 d0                	not    eax
c0015822:	c1 ff 1f             	sar    edi,0x1f
c0015825:	21 05 40 aa 02 c0    	and    DWORD PTR ds:0xc002aa40,eax
c001582b:	89 fe                	mov    esi,edi
c001582d:	f7 d6                	not    esi
c001582f:	21 35 44 aa 02 c0    	and    DWORD PTR ds:0xc002aa44,esi
c0015835:	5e                   	pop    esi
c0015836:	5f                   	pop    edi
c0015837:	c3                   	ret    

c0015838 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015838:	57                   	push   edi
c0015839:	56                   	push   esi
c001583a:	53                   	push   ebx
c001583b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001583f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015843:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001584b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015851:	77 41                	ja     c0015894 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015853:	99                   	cdq    
c0015854:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001585a:	01 c8                	add    eax,ecx
c001585c:	11 da                	adc    edx,ebx
c001585e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015864:	19 d7                	sbb    edi,edx
c0015866:	72 33                	jb     c001589b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015868:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001586e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015874:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015878:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001587c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015882:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015888:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001588c:	5b                   	pop    ebx
c001588d:	5e                   	pop    esi
c001588e:	5f                   	pop    edi
c001588f:	e9 6a 09 00 00       	jmp    c00161fe <VCache::read(unsigned long long, int, void*)>
c0015894:	b8 05 00 00 00       	mov    eax,0x5
c0015899:	eb 05                	jmp    c00158a0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001589b:	b8 07 00 00 00       	mov    eax,0x7
c00158a0:	5b                   	pop    ebx
c00158a1:	5e                   	pop    esi
c00158a2:	5f                   	pop    edi
c00158a3:	c3                   	ret    

c00158a4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00158a4:	57                   	push   edi
c00158a5:	56                   	push   esi
c00158a6:	53                   	push   ebx
c00158a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158bd:	77 41                	ja     c0015900 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00158bf:	99                   	cdq    
c00158c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158c6:	01 c8                	add    eax,ecx
c00158c8:	11 da                	adc    edx,ebx
c00158ca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158d0:	19 d7                	sbb    edi,edx
c00158d2:	72 33                	jb     c0015907 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00158d4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158da:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158e4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158e8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158f8:	5b                   	pop    ebx
c00158f9:	5e                   	pop    esi
c00158fa:	5f                   	pop    edi
c00158fb:	e9 1a 08 00 00       	jmp    c001611a <VCache::write(unsigned long long, int, void*)>
c0015900:	b8 05 00 00 00       	mov    eax,0x5
c0015905:	eb 05                	jmp    c001590c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015907:	b8 07 00 00 00       	mov    eax,0x7
c001590c:	5b                   	pop    ebx
c001590d:	5e                   	pop    esi
c001590e:	5f                   	pop    edi
c001590f:	c3                   	ret    

c0015910 <Mouse::Mouse(char const*)>:
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015917:	83 ec 08             	sub    esp,0x8
c001591a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001591e:	50                   	push   eax
c001591f:	e8 fa de ff ff       	call   c001381e <Device::Device(char const*)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c001592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015930:	89 10                	mov    DWORD PTR [eax],edx
c0015932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015936:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015940:	90                   	nop
c0015941:	83 c4 0c             	add    esp,0xc
c0015944:	c3                   	ret    
c0015945:	90                   	nop

c0015946 <Mouse::~Mouse()>:
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	ba d0 79 02 c0       	mov    edx,0xc00279d0
c001594e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015952:	89 10                	mov    DWORD PTR [eax],edx
c0015954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015958:	83 ec 0c             	sub    esp,0xc
c001595b:	50                   	push   eax
c001595c:	e8 9f db ff ff       	call   c0013500 <Device::~Device()>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	90                   	nop
c0015965:	83 c4 0c             	add    esp,0xc
c0015968:	c3                   	ret    
c0015969:	90                   	nop

c001596a <Mouse::~Mouse()>:
c001596a:	83 ec 0c             	sub    esp,0xc
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015974:	e8 cd ff ff ff       	call   c0015946 <Mouse::~Mouse()>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	68 58 01 00 00       	push   0x158
c0015984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015988:	e8 e6 c7 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001598d:	83 c4 10             	add    esp,0x10
c0015990:	83 c4 0c             	add    esp,0xc
c0015993:	c3                   	ret    

c0015994 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015994:	55                   	push   ebp
c0015995:	57                   	push   edi
c0015996:	56                   	push   esi
c0015997:	53                   	push   ebx
c0015998:	81 ec 28 01 00 00    	sub    esp,0x128
c001599e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159a5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159ac:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159b3:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00159c2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00159c9:	e8 42 df ff ff       	call   c0013910 <Device::getName()>
c00159ce:	5a                   	pop    edx
c00159cf:	59                   	pop    ecx
c00159d0:	50                   	push   eax
c00159d1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00159d5:	55                   	push   ebp
c00159d6:	e8 41 ad fe ff       	call   c000071c <strcpy>
c00159db:	5b                   	pop    ebx
c00159dc:	58                   	pop    eax
c00159dd:	68 f4 79 02 c0       	push   0xc00279f4
c00159e2:	55                   	push   ebp
c00159e3:	e8 eb ad fe ff       	call   c00007d3 <strcat>
c00159e8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00159ef:	e8 70 c7 ff ff       	call   c0012164 <operator new(unsigned long)>
c00159f4:	83 c4 0c             	add    esp,0xc
c00159f7:	89 c3                	mov    ebx,eax
c00159f9:	57                   	push   edi
c00159fa:	56                   	push   esi
c00159fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a03:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a0a:	55                   	push   ebp
c0015a0b:	50                   	push   eax
c0015a0c:	e8 e3 fb ff ff       	call   c00155f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a11:	83 c4 14             	add    esp,0x14
c0015a14:	53                   	push   ebx
c0015a15:	e8 90 fc ff ff       	call   c00156aa <LogicalDisk::assignDriveLetter()>
c0015a1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a1d:	e8 3e fd ff ff       	call   c0015760 <LogicalDisk::mount()>
c0015a22:	58                   	pop    eax
c0015a23:	5a                   	pop    edx
c0015a24:	53                   	push   ebx
c0015a25:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a2c:	e8 fd db ff ff       	call   c001362e <Device::addChild(Device*)>
c0015a31:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a37:	5b                   	pop    ebx
c0015a38:	5e                   	pop    esi
c0015a39:	5f                   	pop    edi
c0015a3a:	5d                   	pop    ebp
c0015a3b:	c3                   	ret    

c0015a3c <createPartitionsForDisk(PhysicalDisk*)>:
c0015a3c:	55                   	push   ebp
c0015a3d:	57                   	push   edi
c0015a3e:	56                   	push   esi
c0015a3f:	53                   	push   ebx
c0015a40:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a46:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a4d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a53:	3d 00 02 00 00       	cmp    eax,0x200
c0015a58:	74 27                	je     c0015a81 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a5a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015a60:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015a66:	83 ec 10             	sub    esp,0x10
c0015a69:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015a6d:	99                   	cdq    
c0015a6e:	c1 e6 0a             	shl    esi,0xa
c0015a71:	52                   	push   edx
c0015a72:	89 fd                	mov    ebp,edi
c0015a74:	50                   	push   eax
c0015a75:	55                   	push   ebp
c0015a76:	56                   	push   esi
c0015a77:	e8 f0 d9 00 00       	call   c002346c <__udivdi3>
c0015a7c:	e9 b1 00 00 00       	jmp    c0015b32 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015a81:	83 ec 0c             	sub    esp,0xc
c0015a84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a86:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015a8a:	56                   	push   esi
c0015a8b:	6a 01                	push   0x1
c0015a8d:	6a 00                	push   0x0
c0015a8f:	6a 00                	push   0x0
c0015a91:	53                   	push   ebx
c0015a92:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015a95:	83 c4 20             	add    esp,0x20
c0015a98:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015aa0:	75 0a                	jne    c0015aac <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015aa2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015aaa:	74 2c                	je     c0015ad8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015aac:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ab2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ab8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015abe:	83 ec 10             	sub    esp,0x10
c0015ac1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ac5:	89 f7                	mov    edi,esi
c0015ac7:	c1 e0 0a             	shl    eax,0xa
c0015aca:	c1 ff 1f             	sar    edi,0x1f
c0015acd:	57                   	push   edi
c0015ace:	56                   	push   esi
c0015acf:	52                   	push   edx
c0015ad0:	50                   	push   eax
c0015ad1:	e8 96 d9 00 00       	call   c002346c <__udivdi3>
c0015ad6:	eb 5a                	jmp    c0015b32 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ad8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015adf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015ae6:	83 e1 7f             	and    ecx,0x7f
c0015ae9:	83 e0 7f             	and    eax,0x7f
c0015aec:	01 c1                	add    ecx,eax
c0015aee:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015af5:	83 e0 7f             	and    eax,0x7f
c0015af8:	01 c1                	add    ecx,eax
c0015afa:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b01:	83 e0 7f             	and    eax,0x7f
c0015b04:	00 c1                	add    cl,al
c0015b06:	74 41                	je     c0015b49 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b08:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b0e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b14:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b1a:	83 ec 10             	sub    esp,0x10
c0015b1d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b21:	89 f7                	mov    edi,esi
c0015b23:	c1 e0 0a             	shl    eax,0xa
c0015b26:	c1 ff 1f             	sar    edi,0x1f
c0015b29:	57                   	push   edi
c0015b2a:	56                   	push   esi
c0015b2b:	52                   	push   edx
c0015b2c:	50                   	push   eax
c0015b2d:	e8 3a d9 00 00       	call   c002346c <__udivdi3>
c0015b32:	83 c4 14             	add    esp,0x14
c0015b35:	52                   	push   edx
c0015b36:	50                   	push   eax
c0015b37:	6a 00                	push   0x0
c0015b39:	6a 00                	push   0x0
c0015b3b:	53                   	push   ebx
c0015b3c:	e8 53 fe ff ff       	call   c0015994 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b41:	83 c4 20             	add    esp,0x20
c0015b44:	e9 79 01 00 00       	jmp    c0015cc2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b49:	89 f0                	mov    eax,esi
c0015b4b:	31 f6                	xor    esi,esi
c0015b4d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b54:	75 02                	jne    c0015b58 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b56:	89 f1                	mov    ecx,esi
c0015b58:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015b5f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015b66:	c1 e2 08             	shl    edx,0x8
c0015b69:	c1 e7 10             	shl    edi,0x10
c0015b6c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015b74:	09 fa                	or     edx,edi
c0015b76:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015b7e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015b85:	83 c0 10             	add    eax,0x10
c0015b88:	09 fa                	or     edx,edi
c0015b8a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015b91:	c1 e7 18             	shl    edi,0x18
c0015b94:	09 fa                	or     edx,edi
c0015b96:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015b9d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015ba1:	c1 e7 10             	shl    edi,0x10
c0015ba4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bab:	c1 e2 08             	shl    edx,0x8
c0015bae:	09 fa                	or     edx,edi
c0015bb0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bb7:	09 fa                	or     edx,edi
c0015bb9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015bc0:	c1 e7 18             	shl    edi,0x18
c0015bc3:	09 fa                	or     edx,edi
c0015bc5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015bc9:	46                   	inc    esi
c0015bca:	83 fe 04             	cmp    esi,0x4
c0015bcd:	0f 85 7a ff ff ff    	jne    c0015b4d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd7:	83 f0 01             	xor    eax,0x1
c0015bda:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015bde:	75 57                	jne    c0015c37 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015be0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015be4:	83 f0 01             	xor    eax,0x1
c0015be7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015beb:	75 4a                	jne    c0015c37 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015bed:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015bf1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015bf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c01:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c07:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c0d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c13:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c17:	89 f7                	mov    edi,esi
c0015c19:	c1 e0 0a             	shl    eax,0xa
c0015c1c:	c1 ff 1f             	sar    edi,0x1f
c0015c1f:	57                   	push   edi
c0015c20:	56                   	push   esi
c0015c21:	52                   	push   edx
c0015c22:	50                   	push   eax
c0015c23:	e8 44 d8 00 00       	call   c002346c <__udivdi3>
c0015c28:	83 c4 10             	add    esp,0x10
c0015c2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c2f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c33:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c37:	84 c9                	test   cl,cl
c0015c39:	74 53                	je     c0015c8e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c3b:	0f b6 c9             	movzx  ecx,cl
c0015c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c46:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c4a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c56:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c5a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015c5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c6e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015c72:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015c76:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015c7a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015c7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c86:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015c8a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015c8e:	31 ed                	xor    ebp,ebp
c0015c90:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015c94:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015c98:	89 f8                	mov    eax,edi
c0015c9a:	09 f0                	or     eax,esi
c0015c9c:	74 1e                	je     c0015cbc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015c9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015ca2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015ca6:	89 d1                	mov    ecx,edx
c0015ca8:	09 c1                	or     ecx,eax
c0015caa:	74 10                	je     c0015cbc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cac:	83 ec 0c             	sub    esp,0xc
c0015caf:	57                   	push   edi
c0015cb0:	56                   	push   esi
c0015cb1:	52                   	push   edx
c0015cb2:	50                   	push   eax
c0015cb3:	53                   	push   ebx
c0015cb4:	e8 db fc ff ff       	call   c0015994 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cb9:	83 c4 20             	add    esp,0x20
c0015cbc:	45                   	inc    ebp
c0015cbd:	83 fd 04             	cmp    ebp,0x4
c0015cc0:	75 ce                	jne    c0015c90 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015cc2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015cc8:	5b                   	pop    ebx
c0015cc9:	5e                   	pop    esi
c0015cca:	5f                   	pop    edi
c0015ccb:	5d                   	pop    ebp
c0015ccc:	c3                   	ret    
c0015ccd:	90                   	nop

c0015cce <Timer::Timer(char const*)>:
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd5:	83 ec 08             	sub    esp,0x8
c0015cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cdc:	50                   	push   eax
c0015cdd:	e8 3c db ff ff       	call   c001381e <Device::Device(char const*)>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c0015cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cee:	89 10                	mov    DWORD PTR [eax],edx
c0015cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015cfe:	90                   	nop
c0015cff:	83 c4 0c             	add    esp,0xc
c0015d02:	c3                   	ret    
c0015d03:	90                   	nop

c0015d04 <Timer::~Timer()>:
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	ba 08 7a 02 c0       	mov    edx,0xc0027a08
c0015d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d10:	89 10                	mov    DWORD PTR [eax],edx
c0015d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	50                   	push   eax
c0015d1a:	e8 e1 d7 ff ff       	call   c0013500 <Device::~Device()>
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	90                   	nop
c0015d23:	83 c4 0c             	add    esp,0xc
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <Timer::~Timer()>:
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	83 ec 0c             	sub    esp,0xc
c0015d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d32:	e8 cd ff ff ff       	call   c0015d04 <Timer::~Timer()>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	83 ec 08             	sub    esp,0x8
c0015d3d:	68 5c 01 00 00       	push   0x15c
c0015d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d46:	e8 28 c4 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	83 c4 0c             	add    esp,0xc
c0015d51:	c3                   	ret    

c0015d52 <Timer::read()>:
c0015d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5c:	c3                   	ret    

c0015d5d <timerHandler(unsigned long long)>:
c0015d5d:	55                   	push   ebp
c0015d5e:	57                   	push   edi
c0015d5f:	56                   	push   esi
c0015d60:	53                   	push   ebx
c0015d61:	83 ec 0c             	sub    esp,0xc
c0015d64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d68:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015d6c:	01 35 d0 aa 02 c0    	add    DWORD PTR ds:0xc002aad0,esi
c0015d72:	11 3d d4 aa 02 c0    	adc    DWORD PTR ds:0xc002aad4,edi
c0015d78:	80 3d 6d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a46d,0x0
c0015d7f:	0f 84 07 01 00 00    	je     c0015e8c <timerHandler(unsigned long long)+0x12f>
c0015d85:	e8 b7 5b 00 00       	call   c001b941 <lockStuff()>
c0015d8a:	83 ec 0c             	sub    esp,0xc
c0015d8d:	68 5c b9 02 c0       	push   0xc002b95c
c0015d92:	e8 47 f7 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d97:	c7 04 24 5c b9 02 c0 	mov    DWORD PTR [esp],0xc002b95c
c0015d9e:	89 c3                	mov    ebx,eax
c0015da0:	e8 41 f7 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	84 c0                	test   al,al
c0015daa:	74 60                	je     c0015e0c <timerHandler(unsigned long long)+0xaf>
c0015dac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015db2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015db5:	85 c0                	test   eax,eax
c0015db7:	0f 85 91 00 00 00    	jne    c0015e4e <timerHandler(unsigned long long)+0xf1>
c0015dbd:	e9 be 00 00 00       	jmp    c0015e80 <timerHandler(unsigned long long)+0x123>
c0015dc2:	83 ec 0c             	sub    esp,0xc
c0015dc5:	55                   	push   ebp
c0015dc6:	e8 67 61 00 00       	call   c001bf32 <unblockTask(ThreadControlBlock*)>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	39 eb                	cmp    ebx,ebp
c0015dd0:	75 12                	jne    c0015de4 <timerHandler(unsigned long long)+0x87>
c0015dd2:	83 ec 0c             	sub    esp,0xc
c0015dd5:	68 5c b9 02 c0       	push   0xc002b95c
c0015dda:	e8 ff f6 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ddf:	89 c3                	mov    ebx,eax
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	68 5c b9 02 c0       	push   0xc002b95c
c0015dec:	e8 f5 f6 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	84 c0                	test   al,al
c0015df6:	75 b4                	jne    c0015dac <timerHandler(unsigned long long)+0x4f>
c0015df8:	83 ec 0c             	sub    esp,0xc
c0015dfb:	68 5c b9 02 c0       	push   0xc002b95c
c0015e00:	e8 d9 f6 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	39 d8                	cmp    eax,ebx
c0015e0a:	74 a0                	je     c0015dac <timerHandler(unsigned long long)+0x4f>
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	68 5c b9 02 c0       	push   0xc002b95c
c0015e14:	e8 c5 f6 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e19:	c7 04 24 5c b9 02 c0 	mov    DWORD PTR [esp],0xc002b95c
c0015e20:	89 c5                	mov    ebp,eax
c0015e22:	e8 db f6 00 00       	call   c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e27:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e2a:	83 c4 10             	add    esp,0x10
c0015e2d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e30:	39 15 d0 aa 02 c0    	cmp    DWORD PTR ds:0xc002aad0,edx
c0015e36:	a1 d4 aa 02 c0       	mov    eax,ds:0xc002aad4
c0015e3b:	19 c8                	sbb    eax,ecx
c0015e3d:	73 83                	jae    c0015dc2 <timerHandler(unsigned long long)+0x65>
c0015e3f:	50                   	push   eax
c0015e40:	50                   	push   eax
c0015e41:	55                   	push   ebp
c0015e42:	68 5c b9 02 c0       	push   0xc002b95c
c0015e47:	e8 64 f7 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e4c:	eb 93                	jmp    c0015de1 <timerHandler(unsigned long long)+0x84>
c0015e4e:	80 3d 6c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a46c,0x0
c0015e55:	74 29                	je     c0015e80 <timerHandler(unsigned long long)+0x123>
c0015e57:	39 c6                	cmp    esi,eax
c0015e59:	bb 00 00 00 00       	mov    ebx,0x0
c0015e5e:	19 df                	sbb    edi,ebx
c0015e60:	72 19                	jb     c0015e7b <timerHandler(unsigned long long)+0x11e>
c0015e62:	e8 b3 5a 00 00       	call   c001b91a <lockScheduler()>
c0015e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015e6f:	e8 e2 5d 00 00       	call   c001bc56 <schedule()>
c0015e74:	e8 a3 5a 00 00       	call   c001b91c <unlockScheduler()>
c0015e79:	eb 05                	jmp    c0015e80 <timerHandler(unsigned long long)+0x123>
c0015e7b:	29 f0                	sub    eax,esi
c0015e7d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015e80:	83 c4 0c             	add    esp,0xc
c0015e83:	5b                   	pop    ebx
c0015e84:	5e                   	pop    esi
c0015e85:	5f                   	pop    edi
c0015e86:	5d                   	pop    ebp
c0015e87:	e9 4f 5e 00 00       	jmp    c001bcdb <unlockStuff()>
c0015e8c:	83 c4 0c             	add    esp,0xc
c0015e8f:	5b                   	pop    ebx
c0015e90:	5e                   	pop    esi
c0015e91:	5f                   	pop    edi
c0015e92:	5d                   	pop    ebp
c0015e93:	c3                   	ret    

c0015e94 <setupTimer(int)>:
c0015e94:	57                   	push   edi
c0015e95:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e9a:	56                   	push   esi
c0015e9b:	53                   	push   ebx
c0015e9c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ea0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015ea6:	83 ec 0c             	sub    esp,0xc
c0015ea9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015eaf:	e8 5c da ff ff       	call   c0013910 <Device::getName()>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015eba:	0f 85 8d 00 00 00    	jne    c0015f4d <setupTimer(int)+0xb9>
c0015ec0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ec5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015ecc:	74 7f                	je     c0015f4d <setupTimer(int)+0xb9>
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	68 5c 01 00 00       	push   0x15c
c0015ed6:	e8 89 c2 ff ff       	call   c0012164 <operator new(unsigned long)>
c0015edb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ede:	89 c3                	mov    ebx,eax
c0015ee0:	e8 71 d1 00 00       	call   c0023056 <PIT::PIT()>
c0015ee5:	59                   	pop    ecx
c0015ee6:	5f                   	pop    edi
c0015ee7:	53                   	push   ebx
c0015ee8:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c0015eee:	e8 3b d7 ff ff       	call   c001362e <Device::addChild(Device*)>
c0015ef3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ef5:	6a 00                	push   0x0
c0015ef7:	6a 00                	push   0x0
c0015ef9:	56                   	push   esi
c0015efa:	53                   	push   ebx
c0015efb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015efe:	83 c4 14             	add    esp,0x14
c0015f01:	68 60 01 00 00       	push   0x160
c0015f06:	e8 59 c2 ff ff       	call   c0012164 <operator new(unsigned long)>
c0015f0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f0e:	89 c7                	mov    edi,eax
c0015f10:	e8 f1 cf 00 00       	call   c0022f06 <APICTimer::APICTimer()>
c0015f15:	6a 00                	push   0x0
c0015f17:	6a 00                	push   0x0
c0015f19:	56                   	push   esi
c0015f1a:	57                   	push   edi
c0015f1b:	e8 e8 ce 00 00       	call   c0022e08 <APICTimer::open(int, int, void*)>
c0015f20:	83 c4 20             	add    esp,0x20
c0015f23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f25:	6a 00                	push   0x0
c0015f27:	6a 00                	push   0x0
c0015f29:	6a 00                	push   0x0
c0015f2b:	53                   	push   ebx
c0015f2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f2f:	58                   	pop    eax
c0015f30:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f35:	5a                   	pop    edx
c0015f36:	57                   	push   edi
c0015f37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015f3d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f43:	e8 e6 d6 ff ff       	call   c001362e <Device::addChild(Device*)>
c0015f48:	83 c4 10             	add    esp,0x10
c0015f4b:	eb 33                	jmp    c0015f80 <setupTimer(int)+0xec>
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	68 5c 01 00 00       	push   0x15c
c0015f55:	e8 0a c2 ff ff       	call   c0012164 <operator new(unsigned long)>
c0015f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f5d:	89 c3                	mov    ebx,eax
c0015f5f:	e8 f2 d0 00 00       	call   c0023056 <PIT::PIT()>
c0015f64:	58                   	pop    eax
c0015f65:	5a                   	pop    edx
c0015f66:	53                   	push   ebx
c0015f67:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c0015f6d:	e8 bc d6 ff ff       	call   c001362e <Device::addChild(Device*)>
c0015f72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f74:	6a 00                	push   0x0
c0015f76:	6a 00                	push   0x0
c0015f78:	56                   	push   esi
c0015f79:	53                   	push   ebx
c0015f7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f7d:	83 c4 20             	add    esp,0x20
c0015f80:	89 d8                	mov    eax,ebx
c0015f82:	5b                   	pop    ebx
c0015f83:	5e                   	pop    esi
c0015f84:	5f                   	pop    edi
c0015f85:	c3                   	ret    

c0015f86 <VCache::VCache(PhysicalDisk*)>:
c0015f86:	53                   	push   ebx
c0015f87:	83 ec 08             	sub    esp,0x8
c0015f8a:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c0015f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f93:	89 10                	mov    DWORD PTR [eax],edx
c0015f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f99:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015faf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0015fb6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015fc8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fde:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015fe2:	83 ec 0c             	sub    esp,0xc
c0015fe5:	6a 10                	push   0x10
c0015fe7:	e8 78 c1 ff ff       	call   c0012164 <operator new(unsigned long)>
c0015fec:	83 c4 10             	add    esp,0x10
c0015fef:	89 c3                	mov    ebx,eax
c0015ff1:	83 ec 0c             	sub    esp,0xc
c0015ff4:	53                   	push   ebx
c0015ff5:	e8 40 5a 00 00       	call   c001ba3a <Mutex::Mutex()>
c0015ffa:	83 c4 10             	add    esp,0x10
c0015ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016001:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016008:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001600c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016013:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001601a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001601e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001602b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001602f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016035:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001603b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001603f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016042:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016049:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001604d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016051:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016057:	c1 e0 06             	shl    eax,0x6
c001605a:	83 ec 0c             	sub    esp,0xc
c001605d:	50                   	push   eax
c001605e:	e8 c9 90 ff ff       	call   c000f12c <malloc>
c0016063:	83 c4 10             	add    esp,0x10
c0016066:	89 c2                	mov    edx,eax
c0016068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001606f:	90                   	nop
c0016070:	83 c4 08             	add    esp,0x8
c0016073:	5b                   	pop    ebx
c0016074:	c3                   	ret    
c0016075:	90                   	nop

c0016076 <VCache::writeWriteBuffer()>:
c0016076:	53                   	push   ebx
c0016077:	83 ec 14             	sub    esp,0x14
c001607a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001607e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016081:	8b 10                	mov    edx,DWORD PTR [eax]
c0016083:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016086:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016089:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001608c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001608f:	50                   	push   eax
c0016090:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016093:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001609a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00160a1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00160a5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00160ac:	83 c4 28             	add    esp,0x28
c00160af:	5b                   	pop    ebx
c00160b0:	c3                   	ret    
c00160b1:	90                   	nop

c00160b2 <VCache::~VCache()>:
c00160b2:	83 ec 0c             	sub    esp,0xc
c00160b5:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00160ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160be:	89 10                	mov    DWORD PTR [eax],edx
c00160c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00160c7:	84 c0                	test   al,al
c00160c9:	74 0f                	je     c00160da <VCache::~VCache()+0x28>
c00160cb:	83 ec 0c             	sub    esp,0xc
c00160ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d2:	e8 9f ff ff ff       	call   c0016076 <VCache::writeWriteBuffer()>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00160e1:	83 ec 0c             	sub    esp,0xc
c00160e4:	50                   	push   eax
c00160e5:	e8 52 90 ff ff       	call   c000f13c <free>
c00160ea:	83 c4 10             	add    esp,0x10
c00160ed:	90                   	nop
c00160ee:	83 c4 0c             	add    esp,0xc
c00160f1:	c3                   	ret    

c00160f2 <VCache::~VCache()>:
c00160f2:	83 ec 0c             	sub    esp,0xc
c00160f5:	83 ec 0c             	sub    esp,0xc
c00160f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160fc:	e8 b1 ff ff ff       	call   c00160b2 <VCache::~VCache()>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	83 ec 08             	sub    esp,0x8
c0016107:	6a 30                	push   0x30
c0016109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001610d:	e8 61 c0 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	83 c4 0c             	add    esp,0xc
c0016118:	c3                   	ret    
c0016119:	90                   	nop

c001611a <VCache::write(unsigned long long, int, void*)>:
c001611a:	55                   	push   ebp
c001611b:	57                   	push   edi
c001611c:	56                   	push   esi
c001611d:	53                   	push   ebx
c001611e:	83 ec 28             	sub    esp,0x28
c0016121:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016125:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016129:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001612d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016134:	e8 63 5d 00 00       	call   c001be9c <Semaphore::acquire()>
c0016139:	83 c4 10             	add    esp,0x10
c001613c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016140:	74 66                	je     c00161a8 <VCache::write(unsigned long long, int, void*)+0x8e>
c0016142:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016145:	99                   	cdq    
c0016146:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001614a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001614d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016150:	89 c1                	mov    ecx,eax
c0016152:	89 d0                	mov    eax,edx
c0016154:	31 f1                	xor    ecx,esi
c0016156:	31 f8                	xor    eax,edi
c0016158:	89 ca                	mov    edx,ecx
c001615a:	09 c2                	or     edx,eax
c001615c:	75 3e                	jne    c001619c <VCache::write(unsigned long long, int, void*)+0x82>
c001615e:	83 fd 01             	cmp    ebp,0x1
c0016161:	75 39                	jne    c001619c <VCache::write(unsigned long long, int, void*)+0x82>
c0016163:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016166:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001616c:	51                   	push   ecx
c001616d:	50                   	push   eax
c001616e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016172:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016176:	0f af c8             	imul   ecx,eax
c0016179:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001617c:	51                   	push   ecx
c001617d:	e8 c5 a4 fe ff       	call   c0000647 <memcpy>
c0016182:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016185:	83 c4 10             	add    esp,0x10
c0016188:	40                   	inc    eax
c0016189:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001618c:	83 f8 40             	cmp    eax,0x40
c001618f:	75 57                	jne    c00161e8 <VCache::write(unsigned long long, int, void*)+0xce>
c0016191:	83 ec 0c             	sub    esp,0xc
c0016194:	53                   	push   ebx
c0016195:	e8 dc fe ff ff       	call   c0016076 <VCache::writeWriteBuffer()>
c001619a:	eb 34                	jmp    c00161d0 <VCache::write(unsigned long long, int, void*)+0xb6>
c001619c:	83 ec 0c             	sub    esp,0xc
c001619f:	53                   	push   ebx
c00161a0:	e8 d1 fe ff ff       	call   c0016076 <VCache::writeWriteBuffer()>
c00161a5:	83 c4 10             	add    esp,0x10
c00161a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161ab:	83 fd 3f             	cmp    ebp,0x3f
c00161ae:	7f 25                	jg     c00161d5 <VCache::write(unsigned long long, int, void*)+0xbb>
c00161b0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00161b3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00161b6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00161b9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00161bd:	52                   	push   edx
c00161be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00161c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161c8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00161cb:	e8 77 a4 fe ff       	call   c0000647 <memcpy>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	eb 13                	jmp    c00161e8 <VCache::write(unsigned long long, int, void*)+0xce>
c00161d5:	83 ec 0c             	sub    esp,0xc
c00161d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00161da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161de:	55                   	push   ebp
c00161df:	57                   	push   edi
c00161e0:	56                   	push   esi
c00161e1:	50                   	push   eax
c00161e2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00161e5:	83 c4 20             	add    esp,0x20
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161ee:	e8 31 62 00 00       	call   c001c424 <Semaphore::release()>
c00161f3:	83 c4 2c             	add    esp,0x2c
c00161f6:	31 c0                	xor    eax,eax
c00161f8:	5b                   	pop    ebx
c00161f9:	5e                   	pop    esi
c00161fa:	5f                   	pop    edi
c00161fb:	5d                   	pop    ebp
c00161fc:	c3                   	ret    
c00161fd:	90                   	nop

c00161fe <VCache::read(unsigned long long, int, void*)>:
c00161fe:	57                   	push   edi
c00161ff:	56                   	push   esi
c0016200:	53                   	push   ebx
c0016201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016205:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016209:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001620d:	83 ec 0c             	sub    esp,0xc
c0016210:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016213:	e8 84 5c 00 00       	call   c001be9c <Semaphore::acquire()>
c0016218:	83 c4 10             	add    esp,0x10
c001621b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001621f:	74 0c                	je     c001622d <VCache::read(unsigned long long, int, void*)+0x2f>
c0016221:	83 ec 0c             	sub    esp,0xc
c0016224:	53                   	push   ebx
c0016225:	e8 4c fe ff ff       	call   c0016076 <VCache::writeWriteBuffer()>
c001622a:	83 c4 10             	add    esp,0x10
c001622d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	8b 10                	mov    edx,DWORD PTR [eax]
c0016235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623d:	57                   	push   edi
c001623e:	56                   	push   esi
c001623f:	50                   	push   eax
c0016240:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016243:	83 c4 14             	add    esp,0x14
c0016246:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016249:	e8 d6 61 00 00       	call   c001c424 <Semaphore::release()>
c001624e:	83 c4 10             	add    esp,0x10
c0016251:	31 c0                	xor    eax,eax
c0016253:	5b                   	pop    ebx
c0016254:	5e                   	pop    esi
c0016255:	5f                   	pop    edi
c0016256:	c3                   	ret    
c0016257:	90                   	nop

c0016258 <Video::putrect(int, int, int, int, unsigned int)>:
c0016258:	55                   	push   ebp
c0016259:	57                   	push   edi
c001625a:	56                   	push   esi
c001625b:	53                   	push   ebx
c001625c:	83 ec 1c             	sub    esp,0x1c
c001625f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016263:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016267:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001626b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001626f:	01 e8                	add    eax,ebp
c0016271:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016279:	01 df                	add    edi,ebx
c001627b:	39 fb                	cmp    ebx,edi
c001627d:	7d 1b                	jge    c001629a <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001627f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016283:	7d 12                	jge    c0016297 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0016285:	8b 16                	mov    edx,DWORD PTR [esi]
c0016287:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001628b:	53                   	push   ebx
c001628c:	55                   	push   ebp
c001628d:	45                   	inc    ebp
c001628e:	56                   	push   esi
c001628f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016292:	83 c4 10             	add    esp,0x10
c0016295:	eb e8                	jmp    c001627f <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016297:	43                   	inc    ebx
c0016298:	eb e1                	jmp    c001627b <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001629a:	83 c4 1c             	add    esp,0x1c
c001629d:	5b                   	pop    ebx
c001629e:	5e                   	pop    esi
c001629f:	5f                   	pop    edi
c00162a0:	5d                   	pop    ebp
c00162a1:	c3                   	ret    

c00162a2 <Video::blit(unsigned int*, int, int, int, int)>:
c00162a2:	55                   	push   ebp
c00162a3:	57                   	push   edi
c00162a4:	56                   	push   esi
c00162a5:	53                   	push   ebx
c00162a6:	83 ec 1c             	sub    esp,0x1c
c00162a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162b1:	85 c0                	test   eax,eax
c00162b3:	79 02                	jns    c00162b7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00162b5:	31 c0                	xor    eax,eax
c00162b7:	c1 e0 02             	shl    eax,0x2
c00162ba:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00162be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162c2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162c6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00162ca:	39 d8                	cmp    eax,ebx
c00162cc:	7e 49                	jle    c0016317 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00162ce:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00162d4:	7c 41                	jl     c0016317 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00162d6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00162da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162de:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00162e2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00162e6:	39 f9                	cmp    ecx,edi
c00162e8:	7e 22                	jle    c001630c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00162ea:	83 c5 04             	add    ebp,0x4
c00162ed:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00162f3:	7c 14                	jl     c0016309 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00162f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00162f7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00162fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00162fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016302:	56                   	push   esi
c0016303:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	47                   	inc    edi
c001630a:	eb d2                	jmp    c00162de <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001630c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016310:	43                   	inc    ebx
c0016311:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016315:	eb ab                	jmp    c00162c2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016317:	83 c4 1c             	add    esp,0x1c
c001631a:	5b                   	pop    ebx
c001631b:	5e                   	pop    esi
c001631c:	5f                   	pop    edi
c001631d:	5d                   	pop    ebp
c001631e:	c3                   	ret    
c001631f:	90                   	nop

c0016320 <Video::clearScreen(unsigned int)>:
c0016320:	57                   	push   edi
c0016321:	56                   	push   esi
c0016322:	53                   	push   ebx
c0016323:	31 db                	xor    ebx,ebx
c0016325:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016329:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001632f:	7e 1f                	jle    c0016350 <Video::clearScreen(unsigned int)+0x30>
c0016331:	31 ff                	xor    edi,edi
c0016333:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016339:	7e 12                	jle    c001634d <Video::clearScreen(unsigned int)+0x2d>
c001633b:	8b 06                	mov    eax,DWORD PTR [esi]
c001633d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016341:	53                   	push   ebx
c0016342:	57                   	push   edi
c0016343:	47                   	inc    edi
c0016344:	56                   	push   esi
c0016345:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	eb e6                	jmp    c0016333 <Video::clearScreen(unsigned int)+0x13>
c001634d:	43                   	inc    ebx
c001634e:	eb d9                	jmp    c0016329 <Video::clearScreen(unsigned int)+0x9>
c0016350:	5b                   	pop    ebx
c0016351:	5e                   	pop    esi
c0016352:	5f                   	pop    edi
c0016353:	c3                   	ret    

c0016354 <Video::putpixel(int, int, unsigned int)>:
c0016354:	c7 44 24 04 40 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a40
c001635c:	e9 f2 be ff ff       	jmp    c0012253 <Dbg::kprintf(char const*, ...)>
c0016361:	90                   	nop

c0016362 <Video::Video(char const*)>:
c0016362:	83 ec 0c             	sub    esp,0xc
c0016365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016369:	83 ec 08             	sub    esp,0x8
c001636c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016370:	50                   	push   eax
c0016371:	e8 a8 d4 ff ff       	call   c001381e <Device::Device(char const*)>
c0016376:	83 c4 10             	add    esp,0x10
c0016379:	ba 58 7a 02 c0       	mov    edx,0xc0027a58
c001637e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016382:	89 10                	mov    DWORD PTR [eax],edx
c0016384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016388:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016392:	90                   	nop
c0016393:	83 c4 0c             	add    esp,0xc
c0016396:	c3                   	ret    
c0016397:	90                   	nop

c0016398 <Video::~Video()>:
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	ba 58 7a 02 c0       	mov    edx,0xc0027a58
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	89 10                	mov    DWORD PTR [eax],edx
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	50                   	push   eax
c00163ae:	e8 4d d1 ff ff       	call   c0013500 <Device::~Device()>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	90                   	nop
c00163b7:	83 c4 0c             	add    esp,0xc
c00163ba:	c3                   	ret    
c00163bb:	90                   	nop

c00163bc <Video::~Video()>:
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c6:	e8 cd ff ff ff       	call   c0016398 <Video::~Video()>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	83 ec 08             	sub    esp,0x8
c00163d1:	68 64 01 00 00       	push   0x164
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	e8 94 bd ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	83 c4 0c             	add    esp,0xc
c00163e5:	c3                   	ret    

c00163e6 <Video::isMonochrome()>:
c00163e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163ea:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00163f0:	c3                   	ret    
c00163f1:	90                   	nop

c00163f2 <Video::getWidth()>:
c00163f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163fc:	c3                   	ret    
c00163fd:	90                   	nop

c00163fe <Video::getHeight()>:
c00163fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016402:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <Video::drawCursor(int, int, unsigned char*, int)>:
c001640a:	55                   	push   ebp
c001640b:	57                   	push   edi
c001640c:	56                   	push   esi
c001640d:	53                   	push   ebx
c001640e:	83 ec 2c             	sub    esp,0x2c
c0016411:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016415:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016419:	83 f8 01             	cmp    eax,0x1
c001641c:	19 c9                	sbb    ecx,ecx
c001641e:	31 db                	xor    ebx,ebx
c0016420:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016424:	89 cd                	mov    ebp,ecx
c0016426:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001642e:	f7 d5                	not    ebp
c0016430:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016436:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001643a:	01 d8                	add    eax,ebx
c001643c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016440:	56                   	push   esi
c0016441:	e8 b8 ff ff ff       	call   c00163fe <Video::getHeight()>
c0016446:	59                   	pop    ecx
c0016447:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001644b:	7e 70                	jle    c00164bd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001644d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016451:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016455:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016458:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001645c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016460:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016467:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001646b:	89 f8                	mov    eax,edi
c001646d:	83 c0 20             	add    eax,0x20
c0016470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016474:	56                   	push   esi
c0016475:	e8 78 ff ff ff       	call   c00163f2 <Video::getWidth()>
c001647a:	5a                   	pop    edx
c001647b:	39 c7                	cmp    edi,eax
c001647d:	7d 34                	jge    c00164b3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001647f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016484:	74 05                	je     c001648b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016486:	8b 06                	mov    eax,DWORD PTR [esi]
c0016488:	55                   	push   ebp
c0016489:	eb 0d                	jmp    c0016498 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001648b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016490:	74 12                	je     c00164a4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016492:	8b 06                	mov    eax,DWORD PTR [esi]
c0016494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016498:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001649c:	57                   	push   edi
c001649d:	56                   	push   esi
c001649e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00164a8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00164ac:	47                   	inc    edi
c00164ad:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00164b1:	75 c1                	jne    c0016474 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00164b3:	43                   	inc    ebx
c00164b4:	83 fb 20             	cmp    ebx,0x20
c00164b7:	0f 85 79 ff ff ff    	jne    c0016436 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00164bd:	83 c4 2c             	add    esp,0x2c
c00164c0:	5b                   	pop    ebx
c00164c1:	5e                   	pop    esi
c00164c2:	5f                   	pop    edi
c00164c3:	5d                   	pop    ebp
c00164c4:	c3                   	ret    
c00164c5:	90                   	nop

c00164c6 <ACPI::close(int, int, void*)>:
c00164c6:	83 ec 1c             	sub    esp,0x1c
c00164c9:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00164d1:	74 0a                	je     c00164dd <ACPI::close(int, int, void*)+0x17>
c00164d3:	b8 00 00 00 00       	mov    eax,0x0
c00164d8:	e9 9a 00 00 00       	jmp    c0016577 <ACPI::close(int, int, void*)+0xb1>
c00164dd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00164e2:	75 37                	jne    c001651b <ACPI::close(int, int, void*)+0x55>
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 90 7a 02 c0       	push   0xc0027a90
c00164ec:	e8 62 bd ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c00164f9:	85 c0                	test   eax,eax
c00164fb:	74 07                	je     c0016504 <ACPI::close(int, int, void*)+0x3e>
c00164fd:	a1 e8 aa 02 c0       	mov    eax,ds:0xc002aae8
c0016502:	ff d0                	call   eax
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	68 44 7b 02 c0       	push   0xc0027b44
c001650c:	e8 c0 24 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016519:	eb 5c                	jmp    c0016577 <ACPI::close(int, int, void*)+0xb1>
c001651b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016520:	75 50                	jne    c0016572 <ACPI::close(int, int, void*)+0xac>
c0016522:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0016527:	85 c0                	test   eax,eax
c0016529:	74 07                	je     c0016532 <ACPI::close(int, int, void*)+0x6c>
c001652b:	a1 e4 aa 02 c0       	mov    eax,ds:0xc002aae4
c0016530:	ff d0                	call   eax
c0016532:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016537:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001653c:	83 e0 02             	and    eax,0x2
c001653f:	74 1c                	je     c001655d <ACPI::close(int, int, void*)+0x97>
c0016541:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001654c:	89 c2                	mov    edx,eax
c001654e:	ec                   	in     al,dx
c001654f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016553:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016557:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001655b:	eb da                	jmp    c0016537 <ACPI::close(int, int, void*)+0x71>
c001655d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016564:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016569:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001656d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016571:	ee                   	out    dx,al
c0016572:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016577:	83 c4 1c             	add    esp,0x1c
c001657a:	c3                   	ret    

c001657b <findRSDP()>:
c001657b:	83 ec 1c             	sub    esp,0x1c
c001657e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016583:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016589:	83 e0 04             	and    eax,0x4
c001658c:	84 c0                	test   al,al
c001658e:	75 07                	jne    c0016597 <findRSDP()+0x1c>
c0016590:	b8 00 00 00 00       	mov    eax,0x0
c0016595:	eb 6a                	jmp    c0016601 <findRSDP()+0x86>
c0016597:	a1 b0 a4 02 c0       	mov    eax,ds:0xc002a4b0
c001659c:	3d ff 07 00 00       	cmp    eax,0x7ff
c00165a1:	7f 1b                	jg     c00165be <findRSDP()+0x43>
c00165a3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00165a8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00165ae:	83 e2 fb             	and    edx,0xfffffffb
c00165b1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00165b7:	b8 00 00 00 00       	mov    eax,0x0
c00165bc:	eb 43                	jmp    c0016601 <findRSDP()+0x86>
c00165be:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00165c6:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00165ce:	77 2c                	ja     c00165fc <findRSDP()+0x81>
c00165d0:	83 ec 04             	sub    esp,0x4
c00165d3:	6a 08                	push   0x8
c00165d5:	68 9d 7a 02 c0       	push   0xc0027a9d
c00165da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165de:	e8 01 a0 fe ff       	call   c00005e4 <memcmp>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	85 c0                	test   eax,eax
c00165e8:	0f 94 c0             	sete   al
c00165eb:	84 c0                	test   al,al
c00165ed:	74 06                	je     c00165f5 <findRSDP()+0x7a>
c00165ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165f3:	eb 0c                	jmp    c0016601 <findRSDP()+0x86>
c00165f5:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00165fa:	eb ca                	jmp    c00165c6 <findRSDP()+0x4b>
c00165fc:	b8 00 00 00 00       	mov    eax,0x0
c0016601:	83 c4 1c             	add    esp,0x1c
c0016604:	c3                   	ret    

c0016605 <loadACPITables(unsigned char*)>:
c0016605:	56                   	push   esi
c0016606:	53                   	push   ebx
c0016607:	83 ec 44             	sub    esp,0x44
c001660a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001660f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016615:	83 e0 04             	and    eax,0x4
c0016618:	84 c0                	test   al,al
c001661a:	0f 84 05 02 00 00    	je     c0016825 <loadACPITables(unsigned char*)+0x220>
c0016620:	a0 00 ad 02 c0       	mov    al,ds:0xc002ad00
c0016625:	84 c0                	test   al,al
c0016627:	74 75                	je     c001669e <loadACPITables(unsigned char*)+0x99>
c0016629:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001662d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016635:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016638:	83 e8 24             	sub    eax,0x24
c001663b:	c1 e8 03             	shr    eax,0x3
c001663e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016642:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001664a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001664e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016652:	0f 8d b2 00 00 00    	jge    c001670a <loadACPITables(unsigned char*)+0x105>
c0016658:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001665c:	83 c0 24             	add    eax,0x24
c001665f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016667:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001666b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001666f:	c1 e0 03             	shl    eax,0x3
c0016672:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016676:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001667a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001667d:	8b 00                	mov    eax,DWORD PTR [eax]
c001667f:	89 c1                	mov    ecx,eax
c0016681:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016686:	8d 50 01             	lea    edx,[eax+0x1]
c0016689:	89 15 ec aa 02 c0    	mov    DWORD PTR ds:0xc002aaec,edx
c001668f:	89 ca                	mov    edx,ecx
c0016691:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c0016698:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001669c:	eb ac                	jmp    c001664a <loadACPITables(unsigned char*)+0x45>
c001669e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00166a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166ad:	83 e8 24             	sub    eax,0x24
c00166b0:	c1 e8 02             	shr    eax,0x2
c00166b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166b7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00166bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00166c3:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00166c7:	7d 41                	jge    c001670a <loadACPITables(unsigned char*)+0x105>
c00166c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166cd:	83 c0 24             	add    eax,0x24
c00166d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00166e0:	c1 e0 02             	shl    eax,0x2
c00166e3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00166e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00166eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166ed:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c00166f2:	8d 50 01             	lea    edx,[eax+0x1]
c00166f5:	89 15 ec aa 02 c0    	mov    DWORD PTR ds:0xc002aaec,edx
c00166fb:	89 ca                	mov    edx,ecx
c00166fd:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c0016704:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016708:	eb b5                	jmp    c00166bf <loadACPITables(unsigned char*)+0xba>
c001670a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016712:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016717:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001671b:	0f 8d 05 01 00 00    	jge    c0016826 <loadACPITables(unsigned char*)+0x221>
c0016721:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016725:	8b 04 c5 04 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd54fc]
c001672c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001673c:	25 ff 0f 00 00       	and    eax,0xfff
c0016741:	89 c6                	mov    esi,eax
c0016743:	e8 b7 ac ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c0016748:	89 c3                	mov    ebx,eax
c001674a:	83 ec 0c             	sub    esp,0xc
c001674d:	6a 01                	push   0x1
c001674f:	e8 1b ab ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c0016754:	83 c4 10             	add    esp,0x10
c0016757:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001675b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016761:	83 ec 0c             	sub    esp,0xc
c0016764:	6a 01                	push   0x1
c0016766:	6a 01                	push   0x1
c0016768:	50                   	push   eax
c0016769:	52                   	push   edx
c001676a:	53                   	push   ebx
c001676b:	e8 b4 b4 ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016770:	83 c4 20             	add    esp,0x20
c0016773:	09 f0                	or     eax,esi
c0016775:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016779:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001677d:	c1 e0 03             	shl    eax,0x3
c0016780:	05 00 ab 02 c0       	add    eax,0xc002ab00
c0016785:	83 ec 04             	sub    esp,0x4
c0016788:	6a 04                	push   0x4
c001678a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001678e:	50                   	push   eax
c001678f:	e8 b3 9e fe ff       	call   c0000647 <memcpy>
c0016794:	83 c4 10             	add    esp,0x10
c0016797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001679e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167a6:	05 00 10 00 00       	add    eax,0x1000
c00167ab:	c1 e8 0c             	shr    eax,0xc
c00167ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00167b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167bd:	25 ff 0f 00 00       	and    eax,0xfff
c00167c2:	89 c6                	mov    esi,eax
c00167c4:	e8 36 ac ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c00167c9:	89 c3                	mov    ebx,eax
c00167cb:	83 ec 0c             	sub    esp,0xc
c00167ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00167d2:	e8 98 aa ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167de:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	6a 01                	push   0x1
c00167e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00167ed:	50                   	push   eax
c00167ee:	52                   	push   edx
c00167ef:	53                   	push   ebx
c00167f0:	e8 2f b4 ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167f5:	83 c4 20             	add    esp,0x20
c00167f8:	09 f0                	or     eax,esi
c00167fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016801:	83 ec 0c             	sub    esp,0xc
c0016804:	50                   	push   eax
c0016805:	e8 bf ad ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016811:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016815:	89 14 c5 04 ab 02 c0 	mov    DWORD PTR [eax*8-0x3ffd54fc],edx
c001681c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016820:	e9 ed fe ff ff       	jmp    c0016712 <loadACPITables(unsigned char*)+0x10d>
c0016825:	90                   	nop
c0016826:	83 c4 44             	add    esp,0x44
c0016829:	5b                   	pop    ebx
c001682a:	5e                   	pop    esi
c001682b:	c3                   	ret    

c001682c <findRSDT(unsigned char*)>:
c001682c:	56                   	push   esi
c001682d:	53                   	push   ebx
c001682e:	83 ec 44             	sub    esp,0x44
c0016831:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016836:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001683c:	83 e0 04             	and    eax,0x4
c001683f:	84 c0                	test   al,al
c0016841:	75 0a                	jne    c001684d <findRSDT(unsigned char*)+0x21>
c0016843:	b8 00 00 00 00       	mov    eax,0x0
c0016848:	e9 f7 00 00 00       	jmp    c0016944 <findRSDT(unsigned char*)+0x118>
c001684d:	83 ec 04             	sub    esp,0x4
c0016850:	6a 24                	push   0x24
c0016852:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016856:	8d 44 24 18          	lea    eax,[esp+0x18]
c001685a:	50                   	push   eax
c001685b:	e8 e7 9d fe ff       	call   c0000647 <memcpy>
c0016860:	83 c4 10             	add    esp,0x10
c0016863:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016867:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001686b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016873:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016877:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001687b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001687f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016883:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001688b:	25 ff 0f 00 00       	and    eax,0xfff
c0016890:	89 c6                	mov    esi,eax
c0016892:	e8 68 ab ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c0016897:	89 c3                	mov    ebx,eax
c0016899:	83 ec 0c             	sub    esp,0xc
c001689c:	6a 02                	push   0x2
c001689e:	e8 cc a9 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00168aa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	6a 01                	push   0x1
c00168b5:	6a 02                	push   0x2
c00168b7:	50                   	push   eax
c00168b8:	52                   	push   edx
c00168b9:	53                   	push   ebx
c00168ba:	e8 65 b3 ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168bf:	83 c4 20             	add    esp,0x20
c00168c2:	09 f0                	or     eax,esi
c00168c4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168cc:	25 ff 0f 00 00       	and    eax,0xfff
c00168d1:	89 c6                	mov    esi,eax
c00168d3:	e8 27 ab ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c00168d8:	89 c3                	mov    ebx,eax
c00168da:	83 ec 0c             	sub    esp,0xc
c00168dd:	6a 02                	push   0x2
c00168df:	e8 8b a9 ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c00168e4:	83 c4 10             	add    esp,0x10
c00168e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168eb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00168f1:	83 ec 0c             	sub    esp,0xc
c00168f4:	6a 01                	push   0x1
c00168f6:	6a 02                	push   0x2
c00168f8:	50                   	push   eax
c00168f9:	52                   	push   edx
c00168fa:	53                   	push   ebx
c00168fb:	e8 24 b3 ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016900:	83 c4 20             	add    esp,0x20
c0016903:	09 f0                	or     eax,esi
c0016905:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016909:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001690e:	75 11                	jne    c0016921 <findRSDT(unsigned char*)+0xf5>
c0016910:	c6 05 00 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad00,0x0
c0016917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001691b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001691f:	eb 1f                	jmp    c0016940 <findRSDT(unsigned char*)+0x114>
c0016921:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016926:	75 11                	jne    c0016939 <findRSDT(unsigned char*)+0x10d>
c0016928:	c6 05 00 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad00,0x1
c001692f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016933:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016937:	eb 07                	jmp    c0016940 <findRSDT(unsigned char*)+0x114>
c0016939:	b8 00 00 00 00       	mov    eax,0x0
c001693e:	eb 04                	jmp    c0016944 <findRSDT(unsigned char*)+0x118>
c0016940:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016944:	83 c4 44             	add    esp,0x44
c0016947:	5b                   	pop    ebx
c0016948:	5e                   	pop    esi
c0016949:	c3                   	ret    

c001694a <findDataTable(unsigned char*, char*)>:
c001694a:	83 ec 1c             	sub    esp,0x1c
c001694d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016952:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016958:	83 e0 04             	and    eax,0x4
c001695b:	84 c0                	test   al,al
c001695d:	75 07                	jne    c0016966 <findDataTable(unsigned char*, char*)+0x1c>
c001695f:	b8 00 00 00 00       	mov    eax,0x0
c0016964:	eb 7c                	jmp    c00169e2 <findDataTable(unsigned char*, char*)+0x98>
c0016966:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001696e:	a1 ec aa 02 c0       	mov    eax,ds:0xc002aaec
c0016973:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016977:	7d 3a                	jge    c00169b3 <findDataTable(unsigned char*, char*)+0x69>
c0016979:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001697d:	c1 e0 03             	shl    eax,0x3
c0016980:	05 00 ab 02 c0       	add    eax,0xc002ab00
c0016985:	83 ec 04             	sub    esp,0x4
c0016988:	6a 04                	push   0x4
c001698a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001698e:	50                   	push   eax
c001698f:	e8 50 9c fe ff       	call   c00005e4 <memcmp>
c0016994:	83 c4 10             	add    esp,0x10
c0016997:	85 c0                	test   eax,eax
c0016999:	0f 94 c0             	sete   al
c001699c:	84 c0                	test   al,al
c001699e:	74 0d                	je     c00169ad <findDataTable(unsigned char*, char*)+0x63>
c00169a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169a4:	8b 04 c5 04 ab 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd54fc]
c00169ab:	eb 35                	jmp    c00169e2 <findDataTable(unsigned char*, char*)+0x98>
c00169ad:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00169b1:	eb bb                	jmp    c001696e <findDataTable(unsigned char*, char*)+0x24>
c00169b3:	a0 00 ad 02 c0       	mov    al,ds:0xc002ad00
c00169b8:	84 c0                	test   al,al
c00169ba:	74 07                	je     c00169c3 <findDataTable(unsigned char*, char*)+0x79>
c00169bc:	b8 58 00 00 00       	mov    eax,0x58
c00169c1:	eb 05                	jmp    c00169c8 <findDataTable(unsigned char*, char*)+0x7e>
c00169c3:	b8 52 00 00 00       	mov    eax,0x52
c00169c8:	83 ec 04             	sub    esp,0x4
c00169cb:	50                   	push   eax
c00169cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d0:	68 68 7b 02 c0       	push   0xc0027b68
c00169d5:	e8 79 b8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00169da:	83 c4 10             	add    esp,0x10
c00169dd:	b8 00 00 00 00       	mov    eax,0x0
c00169e2:	83 c4 1c             	add    esp,0x1c
c00169e5:	c3                   	ret    

c00169e6 <scanMADT()>:
c00169e6:	53                   	push   ebx
c00169e7:	83 ec 38             	sub    esp,0x38
c00169ea:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169f5:	83 e0 04             	and    eax,0x4
c00169f8:	84 c0                	test   al,al
c00169fa:	0f 84 63 04 00 00    	je     c0016e63 <scanMADT()+0x47d>
c0016a00:	e8 76 fb ff ff       	call   c001657b <findRSDP()>
c0016a05:	a3 0c ad 02 c0       	mov    ds:0xc002ad0c,eax
c0016a0a:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016a0f:	85 c0                	test   eax,eax
c0016a11:	75 19                	jne    c0016a2c <scanMADT()+0x46>
c0016a13:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a18:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a1e:	83 e2 fb             	and    edx,0xfffffffb
c0016a21:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a27:	e9 3b 04 00 00       	jmp    c0016e67 <scanMADT()+0x481>
c0016a2c:	a1 0c ad 02 c0       	mov    eax,ds:0xc002ad0c
c0016a31:	83 ec 0c             	sub    esp,0xc
c0016a34:	50                   	push   eax
c0016a35:	e8 f2 fd ff ff       	call   c001682c <findRSDT(unsigned char*)>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	a3 08 ad 02 c0       	mov    ds:0xc002ad08,eax
c0016a42:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a47:	85 c0                	test   eax,eax
c0016a49:	75 19                	jne    c0016a64 <scanMADT()+0x7e>
c0016a4b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a50:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a56:	83 e2 fb             	and    edx,0xfffffffb
c0016a59:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a5f:	e9 03 04 00 00       	jmp    c0016e67 <scanMADT()+0x481>
c0016a64:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	50                   	push   eax
c0016a6d:	e8 93 fb ff ff       	call   c0016605 <loadACPITables(unsigned char*)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c0016a7a:	83 ec 08             	sub    esp,0x8
c0016a7d:	68 a6 7a 02 c0       	push   0xc0027aa6
c0016a82:	50                   	push   eax
c0016a83:	e8 c2 fe ff ff       	call   c001694a <findDataTable(unsigned char*, char*)>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016a8f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016a94:	75 19                	jne    c0016aaf <scanMADT()+0xc9>
c0016a96:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a9b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016aa1:	83 e2 fe             	and    edx,0xfffffffe
c0016aa4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016aaa:	e9 b8 03 00 00       	jmp    c0016e67 <scanMADT()+0x481>
c0016aaf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ab7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016abb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016abe:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016ac2:	0f 87 9f 03 00 00    	ja     c0016e67 <scanMADT()+0x481>
c0016ac8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016ad0:	0f 87 91 03 00 00    	ja     c0016e67 <scanMADT()+0x481>
c0016ad6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ada:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ae2:	8d 50 01             	lea    edx,[eax+0x1]
c0016ae5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016ae9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016aed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016af1:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016af5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016af9:	8d 50 01             	lea    edx,[eax+0x1]
c0016afc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b04:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b08:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016b0c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016b11:	0f 86 4f 03 00 00    	jbe    c0016e66 <scanMADT()+0x480>
c0016b17:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016b1c:	75 57                	jne    c0016b75 <scanMADT()+0x18f>
c0016b1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b22:	8d 50 01             	lea    edx,[eax+0x1]
c0016b25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b29:	8a 15 00 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af00
c0016b2f:	0f b6 d2             	movzx  edx,dl
c0016b32:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b36:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b3a:	88 82 40 af 02 c0    	mov    BYTE PTR [edx-0x3ffd50c0],al
c0016b40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b44:	8d 50 01             	lea    edx,[eax+0x1]
c0016b47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b4b:	8a 15 00 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af00
c0016b51:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016b54:	88 0d 00 af 02 c0    	mov    BYTE PTR ds:0xc002af00,cl
c0016b5a:	0f b6 d2             	movzx  edx,dl
c0016b5d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b61:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b65:	88 82 20 af 02 c0    	mov    BYTE PTR [edx-0x3ffd50e0],al
c0016b6b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016b70:	e9 da 02 00 00       	jmp    c0016e4f <scanMADT()+0x469>
c0016b75:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016b7a:	0f 85 14 01 00 00    	jne    c0016c94 <scanMADT()+0x2ae>
c0016b80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b84:	8d 50 01             	lea    edx,[eax+0x1]
c0016b87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b8b:	8a 15 c0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002adc0
c0016b91:	0f b6 d2             	movzx  edx,dl
c0016b94:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b98:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b9c:	88 82 e0 ad 02 c0    	mov    BYTE PTR [edx-0x3ffd5220],al
c0016ba2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016ba6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016baa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bae:	01 d0                	add    eax,edx
c0016bb0:	83 c0 2c             	add    eax,0x2c
c0016bb3:	8a 00                	mov    al,BYTE PTR [eax]
c0016bb5:	0f b6 d0             	movzx  edx,al
c0016bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bbc:	8d 48 01             	lea    ecx,[eax+0x1]
c0016bbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bc3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016bc7:	0f b6 c0             	movzx  eax,al
c0016bca:	c1 e0 08             	shl    eax,0x8
c0016bcd:	89 d1                	mov    ecx,edx
c0016bcf:	09 c1                	or     ecx,eax
c0016bd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0016bd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bdc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016be0:	0f b6 c0             	movzx  eax,al
c0016be3:	c1 e0 10             	shl    eax,0x10
c0016be6:	09 c1                	or     ecx,eax
c0016be8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bec:	8d 50 03             	lea    edx,[eax+0x3]
c0016bef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bf3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016bf7:	0f b6 c0             	movzx  eax,al
c0016bfa:	c1 e0 18             	shl    eax,0x18
c0016bfd:	09 c1                	or     ecx,eax
c0016bff:	89 ca                	mov    edx,ecx
c0016c01:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016c06:	0f b6 c0             	movzx  eax,al
c0016c09:	89 14 85 00 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5200],edx
c0016c10:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c1d:	01 d0                	add    eax,edx
c0016c1f:	83 c0 2c             	add    eax,0x2c
c0016c22:	8a 00                	mov    al,BYTE PTR [eax]
c0016c24:	0f b6 d0             	movzx  edx,al
c0016c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c36:	0f b6 c0             	movzx  eax,al
c0016c39:	c1 e0 08             	shl    eax,0x8
c0016c3c:	89 d1                	mov    ecx,edx
c0016c3e:	09 c1                	or     ecx,eax
c0016c40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c44:	8d 50 02             	lea    edx,[eax+0x2]
c0016c47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c4b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c4f:	0f b6 c0             	movzx  eax,al
c0016c52:	c1 e0 10             	shl    eax,0x10
c0016c55:	09 c1                	or     ecx,eax
c0016c57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c5b:	8d 50 03             	lea    edx,[eax+0x3]
c0016c5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c66:	0f b6 c0             	movzx  eax,al
c0016c69:	c1 e0 18             	shl    eax,0x18
c0016c6c:	09 c1                	or     ecx,eax
c0016c6e:	89 ca                	mov    edx,ecx
c0016c70:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016c75:	0f b6 c0             	movzx  eax,al
c0016c78:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c0016c7f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c84:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c0016c89:	40                   	inc    eax
c0016c8a:	a2 c0 ad 02 c0       	mov    ds:0xc002adc0,al
c0016c8f:	e9 bb 01 00 00       	jmp    c0016e4f <scanMADT()+0x469>
c0016c94:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0016c99:	0f 85 e9 00 00 00    	jne    c0016d88 <scanMADT()+0x3a2>
c0016c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ca3:	8d 50 01             	lea    edx,[eax+0x1]
c0016ca6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016caa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016cb2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0016cb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cba:	8d 50 01             	lea    edx,[eax+0x1]
c0016cbd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016cc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cc5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016cc9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016ccd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016cd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cd5:	01 d0                	add    eax,edx
c0016cd7:	83 c0 2c             	add    eax,0x2c
c0016cda:	8a 00                	mov    al,BYTE PTR [eax]
c0016cdc:	0f b6 d0             	movzx  edx,al
c0016cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ce3:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ce6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016cee:	0f b6 c0             	movzx  eax,al
c0016cf1:	c1 e0 08             	shl    eax,0x8
c0016cf4:	89 d1                	mov    ecx,edx
c0016cf6:	09 c1                	or     ecx,eax
c0016cf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cfc:	8d 50 02             	lea    edx,[eax+0x2]
c0016cff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d03:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d07:	0f b6 c0             	movzx  eax,al
c0016d0a:	c1 e0 10             	shl    eax,0x10
c0016d0d:	09 c1                	or     ecx,eax
c0016d0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d13:	8d 50 03             	lea    edx,[eax+0x3]
c0016d16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d1a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d1e:	0f b6 c0             	movzx  eax,al
c0016d21:	c1 e0 18             	shl    eax,0x18
c0016d24:	09 c8                	or     eax,ecx
c0016d26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d2a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016d2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d37:	01 d0                	add    eax,edx
c0016d39:	83 c0 2c             	add    eax,0x2c
c0016d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0016d3e:	0f b6 c0             	movzx  eax,al
c0016d41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d45:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016d48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d4c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016d50:	0f b6 d2             	movzx  edx,dl
c0016d53:	c1 e2 08             	shl    edx,0x8
c0016d56:	09 d0                	or     eax,edx
c0016d58:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0016d5d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016d62:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016d67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016d6b:	88 90 40 97 02 c0    	mov    BYTE PTR [eax-0x3ffd68c0],dl
c0016d71:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0016d76:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0016d7b:	66 89 84 12 a0 ad 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5260],ax
c0016d83:	e9 c7 00 00 00       	jmp    c0016e4f <scanMADT()+0x469>
c0016d88:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0016d8d:	0f 85 b0 00 00 00    	jne    c0016e43 <scanMADT()+0x45d>
c0016d93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d97:	8d 50 01             	lea    edx,[eax+0x1]
c0016d9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016d9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016da2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016da6:	0f b6 c0             	movzx  eax,al
c0016da9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016db1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016db5:	01 d0                	add    eax,edx
c0016db7:	83 c0 2c             	add    eax,0x2c
c0016dba:	8a 00                	mov    al,BYTE PTR [eax]
c0016dbc:	0f b6 d0             	movzx  edx,al
c0016dbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016dc3:	8d 48 01             	lea    ecx,[eax+0x1]
c0016dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016dce:	0f b6 c0             	movzx  eax,al
c0016dd1:	c1 e0 08             	shl    eax,0x8
c0016dd4:	09 d0                	or     eax,edx
c0016dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dda:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016ddf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016de3:	8d 50 01             	lea    edx,[eax+0x1]
c0016de6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016dea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016dee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016df2:	0f b6 c0             	movzx  eax,al
c0016df5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfd:	c1 e0 08             	shl    eax,0x8
c0016e00:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016e04:	89 c1                	mov    ecx,eax
c0016e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e0a:	c1 e0 18             	shl    eax,0x18
c0016e0d:	89 c3                	mov    ebx,eax
c0016e0f:	a1 10 ad 02 c0       	mov    eax,ds:0xc002ad10
c0016e14:	8d 50 01             	lea    edx,[eax+0x1]
c0016e17:	89 15 10 ad 02 c0    	mov    DWORD PTR ds:0xc002ad10,edx
c0016e1d:	09 d9                	or     ecx,ebx
c0016e1f:	89 ca                	mov    edx,ecx
c0016e21:	89 14 85 20 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52e0],edx
c0016e28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016e2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e34:	68 98 7b 02 c0       	push   0xc0027b98
c0016e39:	e8 15 b4 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0016e3e:	83 c4 10             	add    esp,0x10
c0016e41:	eb 0c                	jmp    c0016e4f <scanMADT()+0x469>
c0016e43:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0016e48:	75 05                	jne    c0016e4f <scanMADT()+0x469>
c0016e4a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0016e4f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0016e54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e58:	01 d0                	add    eax,edx
c0016e5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016e5e:	e9 54 fc ff ff       	jmp    c0016ab7 <scanMADT()+0xd1>
c0016e63:	90                   	nop
c0016e64:	eb 01                	jmp    c0016e67 <scanMADT()+0x481>
c0016e66:	90                   	nop
c0016e67:	83 c4 38             	add    esp,0x38
c0016e6a:	5b                   	pop    ebx
c0016e6b:	c3                   	ret    

c0016e6c <ACPI::ACPI()>:
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e73:	83 ec 08             	sub    esp,0x8
c0016e76:	68 ab 7a 02 c0       	push   0xc0027aab
c0016e7b:	50                   	push   eax
c0016e7c:	e8 9d c9 ff ff       	call   c001381e <Device::Device(char const*)>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	ba 70 7c 02 c0       	mov    edx,0xc0027c70
c0016e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e8d:	89 10                	mov    DWORD PTR [eax],edx
c0016e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e93:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e9e:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eac:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eba:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016ec1:	e8 20 fb ff ff       	call   c00169e6 <scanMADT()>
c0016ec6:	90                   	nop
c0016ec7:	83 c4 0c             	add    esp,0xc
c0016eca:	c3                   	ret    
c0016ecb:	90                   	nop

c0016ecc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016ecc:	83 ec 2c             	sub    esp,0x2c
c0016ecf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ed3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ed7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016edb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016edf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016ee4:	88 d0                	mov    al,dl
c0016ee6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016eea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016eef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016efb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016f01:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016f05:	0f 8d 97 00 00 00    	jge    c0016fa2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016f0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f13:	83 c2 2a             	add    edx,0x2a
c0016f16:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016f1a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016f1f:	75 78                	jne    c0016f99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f29:	83 c2 2a             	add    edx,0x2a
c0016f2c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016f30:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016f34:	75 63                	jne    c0016f99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f36:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016f3b:	74 3a                	je     c0016f77 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016f3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f45:	83 c2 2a             	add    edx,0x2a
c0016f48:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016f4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f53:	39 c2                	cmp    edx,eax
c0016f55:	74 10                	je     c0016f67 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016f57:	83 ec 0c             	sub    esp,0xc
c0016f5a:	68 d4 7b 02 c0       	push   0xc0027bd4
c0016f5f:	e8 6d 1a 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0016f64:	83 c4 10             	add    esp,0x10
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	68 b0 7a 02 c0       	push   0xc0027ab0
c0016f6f:	e8 5d 1a 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c0016f74:	83 c4 10             	add    esp,0x10
c0016f77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f83:	83 c2 2a             	add    edx,0x2a
c0016f86:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f8c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f8f:	89 01                	mov    DWORD PTR [ecx],eax
c0016f91:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f94:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f99:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f9d:	e9 55 ff ff ff       	jmp    c0016ef7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016fa2:	90                   	nop
c0016fa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fa7:	83 c4 2c             	add    esp,0x2c
c0016faa:	c2 04 00             	ret    0x4
c0016fad:	90                   	nop

c0016fae <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016fae:	56                   	push   esi
c0016faf:	53                   	push   ebx
c0016fb0:	83 ec 14             	sub    esp,0x14
c0016fb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016fb7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016fbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fbf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016fc4:	88 c8                	mov    al,cl
c0016fc6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fca:	88 d0                	mov    al,dl
c0016fcc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd4:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fde:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016fe4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016fe9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016fee:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016ff3:	83 ec 04             	sub    esp,0x4
c0016ff6:	56                   	push   esi
c0016ff7:	53                   	push   ebx
c0016ff8:	51                   	push   ecx
c0016ff9:	52                   	push   edx
c0016ffa:	50                   	push   eax
c0016ffb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fff:	68 04 7c 02 c0       	push   0xc0027c04
c0017004:	e8 4a b2 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017009:	83 c4 20             	add    esp,0x20
c001700c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017010:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001701d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017021:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017029:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001702f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017033:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001703a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001703f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017043:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017049:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001704d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017054:	83 c2 2a             	add    edx,0x2a
c0017057:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001705b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705f:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017069:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001706c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017070:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001707e:	8d 50 01             	lea    edx,[eax+0x1]
c0017081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017085:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001708b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017095:	3d 00 08 00 00       	cmp    eax,0x800
c001709a:	75 10                	jne    c00170ac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	68 bf 7a 02 c0       	push   0xc0027abf
c00170a4:	e8 28 19 00 00       	call   c00189d1 <Krnl::panic(char const*)>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	90                   	nop
c00170ad:	83 c4 14             	add    esp,0x14
c00170b0:	5b                   	pop    ebx
c00170b1:	5e                   	pop    esi
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00170b4:	b8 00 00 00 00       	mov    eax,0x0
c00170b9:	c3                   	ret    

c00170ba <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00170ba:	83 ec 1c             	sub    esp,0x1c
c00170bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00170c4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00170c8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00170cd:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00170d2:	83 ec 08             	sub    esp,0x8
c00170d5:	52                   	push   edx
c00170d6:	50                   	push   eax
c00170d7:	e8 68 76 ff ff       	call   c000e744 <Computer::readCMOS(unsigned char)>
c00170dc:	83 c4 10             	add    esp,0x10
c00170df:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00170e3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00170e8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00170ed:	83 ec 04             	sub    esp,0x4
c00170f0:	6a 01                	push   0x1
c00170f2:	52                   	push   edx
c00170f3:	50                   	push   eax
c00170f4:	e8 61 77 ff ff       	call   c000e85a <Computer::writeCMOS(unsigned char, unsigned char)>
c00170f9:	83 c4 10             	add    esp,0x10
c00170fc:	90                   	nop
c00170fd:	83 c4 1c             	add    esp,0x1c
c0017100:	c3                   	ret    
c0017101:	90                   	nop

c0017102 <ACPI::open(int, int, void*)>:
c0017102:	53                   	push   ebx
c0017103:	83 ec 18             	sub    esp,0x18
c0017106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710a:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017115:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001711b:	84 c0                	test   al,al
c001711d:	74 60                	je     c001717f <ACPI::open(int, int, void*)+0x7d>
c001711f:	83 ec 0c             	sub    esp,0xc
c0017122:	68 58 01 00 00       	push   0x158
c0017127:	e8 38 b0 ff ff       	call   c0012164 <operator new(unsigned long)>
c001712c:	83 c4 10             	add    esp,0x10
c001712f:	89 c3                	mov    ebx,eax
c0017131:	83 ec 0c             	sub    esp,0xc
c0017134:	53                   	push   ebx
c0017135:	e8 74 8f 00 00       	call   c00200ae <PCI::PCI()>
c001713a:	83 c4 10             	add    esp,0x10
c001713d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017145:	83 ec 08             	sub    esp,0x8
c0017148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001714c:	50                   	push   eax
c001714d:	e8 dc c4 ff ff       	call   c001362e <Device::addChild(Device*)>
c0017152:	83 c4 10             	add    esp,0x10
c0017155:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017159:	8b 00                	mov    eax,DWORD PTR [eax]
c001715b:	83 c0 08             	add    eax,0x8
c001715e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017160:	6a 00                	push   0x0
c0017162:	6a 00                	push   0x0
c0017164:	6a 00                	push   0x0
c0017166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001716a:	ff d0                	call   eax
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	83 ec 0c             	sub    esp,0xc
c0017172:	68 dc 7a 02 c0       	push   0xc0027adc
c0017177:	e8 d7 b0 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	83 ec 0c             	sub    esp,0xc
c0017182:	68 e7 7a 02 c0       	push   0xc0027ae7
c0017187:	e8 da 36 00 00       	call   c001a866 <Thr::loadKernelSymbolTable(char const*)>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0017195:	83 ec 08             	sub    esp,0x8
c0017198:	6a 01                	push   0x1
c001719a:	68 05 7b 02 c0       	push   0xc0027b05
c001719f:	e8 a4 41 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	83 ec 08             	sub    esp,0x8
c00171aa:	53                   	push   ebx
c00171ab:	50                   	push   eax
c00171ac:	e8 5d 43 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00171b9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00171bf:	83 e0 04             	and    eax,0x4
c00171c2:	84 c0                	test   al,al
c00171c4:	0f 84 cf 00 00 00    	je     c0017299 <ACPI::open(int, int, void*)+0x197>
c00171ca:	83 ec 0c             	sub    esp,0xc
c00171cd:	68 14 01 00 00       	push   0x114
c00171d2:	e8 8d af ff ff       	call   c0012164 <operator new(unsigned long)>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	89 c3                	mov    ebx,eax
c00171dc:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c00171e1:	83 ec 04             	sub    esp,0x4
c00171e4:	50                   	push   eax
c00171e5:	68 22 7b 02 c0       	push   0xc0027b22
c00171ea:	53                   	push   ebx
c00171eb:	e8 92 b5 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00171f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171fc:	74 17                	je     c0017215 <ACPI::open(int, int, void*)+0x113>
c00171fe:	83 ec 0c             	sub    esp,0xc
c0017201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017205:	e8 4a b8 ff ff       	call   c0012a54 <File::exists()>
c001720a:	83 c4 10             	add    esp,0x10
c001720d:	84 c0                	test   al,al
c001720f:	74 04                	je     c0017215 <ACPI::open(int, int, void*)+0x113>
c0017211:	b0 01                	mov    al,0x1
c0017213:	eb 02                	jmp    c0017217 <ACPI::open(int, int, void*)+0x115>
c0017215:	b0 00                	mov    al,0x0
c0017217:	84 c0                	test   al,al
c0017219:	74 25                	je     c0017240 <ACPI::open(int, int, void*)+0x13e>
c001721b:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c0017221:	83 ec 08             	sub    esp,0x8
c0017224:	6a 01                	push   0x1
c0017226:	68 22 7b 02 c0       	push   0xc0027b22
c001722b:	e8 18 41 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	83 ec 08             	sub    esp,0x8
c0017236:	53                   	push   ebx
c0017237:	50                   	push   eax
c0017238:	e8 d1 42 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c001723d:	83 c4 10             	add    esp,0x10
c0017240:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017245:	74 1e                	je     c0017265 <ACPI::open(int, int, void*)+0x163>
c0017247:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001724c:	74 17                	je     c0017265 <ACPI::open(int, int, void*)+0x163>
c001724e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017252:	8b 00                	mov    eax,DWORD PTR [eax]
c0017254:	83 c0 08             	add    eax,0x8
c0017257:	8b 00                	mov    eax,DWORD PTR [eax]
c0017259:	83 ec 0c             	sub    esp,0xc
c001725c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017260:	ff d0                	call   eax
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	a1 08 ad 02 c0       	mov    eax,ds:0xc002ad08
c001726a:	83 ec 08             	sub    esp,0x8
c001726d:	68 3f 7b 02 c0       	push   0xc0027b3f
c0017272:	50                   	push   eax
c0017273:	e8 d2 f6 ff ff       	call   c001694a <findDataTable(unsigned char*, char*)>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001727f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017284:	74 13                	je     c0017299 <ACPI::open(int, int, void*)+0x197>
c0017286:	83 ec 08             	sub    esp,0x8
c0017289:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001728d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017291:	e8 24 fe ff ff       	call   c00170ba <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017296:	83 c4 10             	add    esp,0x10
c0017299:	b8 00 00 00 00       	mov    eax,0x0
c001729e:	83 c4 18             	add    esp,0x18
c00172a1:	5b                   	pop    ebx
c00172a2:	c3                   	ret    
c00172a3:	90                   	nop

c00172a4 <ACPI::sleep()>:
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c00172ac:	85 c0                	test   eax,eax
c00172ae:	74 07                	je     c00172b7 <ACPI::sleep()+0x13>
c00172b0:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c00172b5:	ff d0                	call   eax
c00172b7:	90                   	nop
c00172b8:	83 c4 0c             	add    esp,0xc
c00172bb:	c3                   	ret    

c00172bc <CPU::close(int, int, void*)>:
c00172bc:	31 c0                	xor    eax,eax
c00172be:	c3                   	ret    
c00172bf:	90                   	nop

c00172c0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00172c0:	55                   	push   ebp
c00172c1:	57                   	push   edi
c00172c2:	56                   	push   esi
c00172c3:	53                   	push   ebx
c00172c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00172cc:	89 ce                	mov    esi,ecx
c00172ce:	89 d5                	mov    ebp,edx
c00172d0:	80 f9 04             	cmp    cl,0x4
c00172d3:	75 28                	jne    c00172fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00172d5:	8d 42 f9             	lea    eax,[edx-0x7]
c00172d8:	3c 03                	cmp    al,0x3
c00172da:	0f 86 63 01 00 00    	jbe    c0017443 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00172e0:	80 fa 03             	cmp    dl,0x3
c00172e3:	0f 84 5a 01 00 00    	je     c0017443 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00172e9:	8d 7a f2             	lea    edi,[edx-0xe]
c00172ec:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00172f1:	89 fb                	mov    ebx,edi
c00172f3:	80 fb 01             	cmp    bl,0x1
c00172f6:	77 4e                	ja     c0017346 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00172f8:	e9 52 01 00 00       	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172fd:	80 f9 05             	cmp    cl,0x5
c0017300:	75 4d                	jne    c001734f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017302:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017307:	80 fa 03             	cmp    dl,0x3
c001730a:	0f 86 3f 01 00 00    	jbe    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017310:	8d 7a fa             	lea    edi,[edx-0x6]
c0017313:	b8 30 99 02 c0       	mov    eax,0xc0029930
c0017318:	89 fb                	mov    ebx,edi
c001731a:	80 fb 01             	cmp    bl,0x1
c001731d:	0f 86 2c 01 00 00    	jbe    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017323:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0017328:	80 fa 08             	cmp    dl,0x8
c001732b:	0f 84 1e 01 00 00    	je     c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017331:	89 d7                	mov    edi,edx
c0017333:	b8 50 99 02 c0       	mov    eax,0xc0029950
c0017338:	83 e7 fb             	and    edi,0xfffffffb
c001733b:	89 fb                	mov    ebx,edi
c001733d:	80 fb 09             	cmp    bl,0x9
c0017340:	0f 84 09 01 00 00    	je     c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017346:	31 c0                	xor    eax,eax
c0017348:	89 eb                	mov    ebx,ebp
c001734a:	0f b6 fb             	movzx  edi,bl
c001734d:	eb 30                	jmp    c001737f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001734f:	31 c0                	xor    eax,eax
c0017351:	80 f9 06             	cmp    cl,0x6
c0017354:	75 f2                	jne    c0017348 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017356:	80 fa 0a             	cmp    dl,0xa
c0017359:	77 ed                	ja     c0017348 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001735b:	bf de 05 00 00       	mov    edi,0x5de
c0017360:	0f a3 d7             	bt     edi,edx
c0017363:	73 e3                	jae    c0017348 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017365:	b8 60 99 02 c0       	mov    eax,0xc0029960
c001736a:	e9 e0 00 00 00       	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001736f:	39 c7                	cmp    edi,eax
c0017371:	0f 84 d3 00 00 00    	je     c001744a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017377:	40                   	inc    eax
c0017378:	3d d0 00 00 00       	cmp    eax,0xd0
c001737d:	74 09                	je     c0017388 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001737f:	89 f3                	mov    ebx,esi
c0017381:	80 fb 0f             	cmp    bl,0xf
c0017384:	75 f1                	jne    c0017377 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017386:	eb e7                	jmp    c001736f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017388:	80 f9 10             	cmp    cl,0x10
c001738b:	75 14                	jne    c00173a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001738d:	8d 42 fc             	lea    eax,[edx-0x4]
c0017390:	83 e0 fb             	and    eax,0xfffffffb
c0017393:	3c 02                	cmp    al,0x2
c0017395:	76 34                	jbe    c00173cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017397:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c001739c:	80 fa 02             	cmp    dl,0x2
c001739f:	eb 24                	jmp    c00173c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00173a1:	80 f9 11             	cmp    cl,0x11
c00173a4:	75 13                	jne    c00173b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00173a6:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173ab:	80 fa 03             	cmp    dl,0x3
c00173ae:	0f 85 9b 00 00 00    	jne    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173b4:	e9 91 00 00 00       	jmp    c001744a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00173b9:	80 f9 12             	cmp    cl,0x12
c00173bc:	75 14                	jne    c00173d2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00173be:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173c3:	fe ca                	dec    dl
c00173c5:	0f 85 84 00 00 00    	jne    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173cb:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173d0:	eb 7d                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173d2:	80 f9 14             	cmp    cl,0x14
c00173d5:	75 12                	jne    c00173e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00173d7:	4a                   	dec    edx
c00173d8:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173dd:	80 fa 01             	cmp    dl,0x1
c00173e0:	77 6d                	ja     c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173e2:	b8 90 99 02 c0       	mov    eax,0xc0029990
c00173e7:	eb 66                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173e9:	80 f9 15             	cmp    cl,0x15
c00173ec:	75 31                	jne    c001741f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00173ee:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c00173f3:	80 fa 01             	cmp    dl,0x1
c00173f6:	74 57                	je     c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173f8:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00173fd:	80 fa 13             	cmp    dl,0x13
c0017400:	76 0c                	jbe    c001740e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017402:	80 fa 30             	cmp    dl,0x30
c0017405:	75 48                	jne    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017407:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c001740c:	eb 41                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001740e:	b9 04 00 09 00       	mov    ecx,0x90004
c0017413:	0f a3 d1             	bt     ecx,edx
c0017416:	73 37                	jae    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017418:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c001741d:	eb 30                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001741f:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017424:	80 f9 16             	cmp    cl,0x16
c0017427:	75 26                	jne    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017429:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c001742e:	84 d2                	test   dl,dl
c0017430:	74 1d                	je     c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017432:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017437:	80 fa 30             	cmp    dl,0x30
c001743a:	75 13                	jne    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001743c:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017441:	eb 0c                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017443:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0017448:	eb 05                	jmp    c001744f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001744a:	b8 70 99 02 c0       	mov    eax,0xc0029970
c001744f:	5b                   	pop    ebx
c0017450:	5e                   	pop    esi
c0017451:	5f                   	pop    edi
c0017452:	5d                   	pop    ebp
c0017453:	c3                   	ret    

c0017454 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017454:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017458:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001745c:	80 f9 04             	cmp    cl,0x4
c001745f:	75 6b                	jne    c00174cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017461:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017466:	80 fa 01             	cmp    dl,0x1
c0017469:	0f 86 92 02 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001746f:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017474:	80 fa 02             	cmp    dl,0x2
c0017477:	0f 84 84 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001747d:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0017482:	80 fa 03             	cmp    dl,0x3
c0017485:	0f 84 76 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001748b:	b8 90 97 02 c0       	mov    eax,0xc0029790
c0017490:	80 fa 04             	cmp    dl,0x4
c0017493:	0f 84 68 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017499:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c001749e:	80 fa 05             	cmp    dl,0x5
c00174a1:	0f 84 5a 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174a7:	b8 80 97 02 c0       	mov    eax,0xc0029780
c00174ac:	80 fa 07             	cmp    dl,0x7
c00174af:	0f 84 4c 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174b5:	83 ea 08             	sub    edx,0x8
c00174b8:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00174bd:	80 fa 01             	cmp    dl,0x1
c00174c0:	0f 87 3b 02 00 00    	ja     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174c6:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174cb:	c3                   	ret    
c00174cc:	80 f9 05             	cmp    cl,0x5
c00174cf:	75 45                	jne    c0017516 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00174d1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00174d4:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174d9:	80 f9 02             	cmp    cl,0x2
c00174dc:	0f 86 1f 02 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174e2:	80 fa 04             	cmp    dl,0x4
c00174e5:	0f 84 f3 01 00 00    	je     c00176de <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00174eb:	80 fa 07             	cmp    dl,0x7
c00174ee:	0f 84 0d 02 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f4:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174f9:	80 fa 08             	cmp    dl,0x8
c00174fc:	0f 84 ff 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017502:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017507:	80 fa 09             	cmp    dl,0x9
c001750a:	0f 85 f1 01 00 00    	jne    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017510:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017515:	c3                   	ret    
c0017516:	80 f9 06             	cmp    cl,0x6
c0017519:	0f 85 85 01 00 00    	jne    c00176a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001751f:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017524:	80 fa 01             	cmp    dl,0x1
c0017527:	0f 84 d4 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001752d:	8d 42 fb             	lea    eax,[edx-0x5]
c0017530:	3c 01                	cmp    al,0x1
c0017532:	0f 86 ac 01 00 00    	jbe    c00176e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017538:	80 fa 03             	cmp    dl,0x3
c001753b:	0f 84 a3 01 00 00    	je     c00176e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017541:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017544:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017549:	80 f9 01             	cmp    cl,0x1
c001754c:	0f 86 af 01 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017552:	80 fa 09             	cmp    dl,0x9
c0017555:	0f 84 8f 01 00 00    	je     c00176ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001755b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001755e:	80 f9 01             	cmp    cl,0x1
c0017561:	0f 86 9a 01 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017567:	b8 20 98 02 c0       	mov    eax,0xc0029820
c001756c:	80 fa 0d             	cmp    dl,0xd
c001756f:	0f 84 8c 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017575:	b8 30 98 02 c0       	mov    eax,0xc0029830
c001757a:	80 fa 0e             	cmp    dl,0xe
c001757d:	0f 84 7e 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017583:	b8 40 98 02 c0       	mov    eax,0xc0029840
c0017588:	80 fa 0f             	cmp    dl,0xf
c001758b:	0f 84 70 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017591:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017596:	80 fa 15             	cmp    dl,0x15
c0017599:	0f 84 62 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001759f:	8d 4a ea             	lea    ecx,[edx-0x16]
c00175a2:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175a7:	80 f9 01             	cmp    cl,0x1
c00175aa:	0f 86 51 01 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175b0:	80 fa 1a             	cmp    dl,0x1a
c00175b3:	0f 84 37 01 00 00    	je     c00176f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00175b9:	80 fa 1c             	cmp    dl,0x1c
c00175bc:	0f 84 34 01 00 00    	je     c00176f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00175c2:	80 fa 1d             	cmp    dl,0x1d
c00175c5:	0f 84 36 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175cb:	b8 70 98 02 c0       	mov    eax,0xc0029870
c00175d0:	80 fa 25             	cmp    dl,0x25
c00175d3:	0f 84 28 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175d9:	8d 4a da             	lea    ecx,[edx-0x26]
c00175dc:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175e1:	80 f9 01             	cmp    cl,0x1
c00175e4:	0f 86 17 01 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175ea:	b8 80 98 02 c0       	mov    eax,0xc0029880
c00175ef:	80 fa 2a             	cmp    dl,0x2a
c00175f2:	0f 84 09 01 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175f8:	b8 70 98 02 c0       	mov    eax,0xc0029870
c00175fd:	80 fa 2c             	cmp    dl,0x2c
c0017600:	0f 84 fb 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017606:	b8 80 98 02 c0       	mov    eax,0xc0029880
c001760b:	80 fa 2d             	cmp    dl,0x2d
c001760e:	0f 84 ed 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017614:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017619:	80 fa 2e             	cmp    dl,0x2e
c001761c:	0f 84 df 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017622:	b8 70 98 02 c0       	mov    eax,0xc0029870
c0017627:	80 fa 2f             	cmp    dl,0x2f
c001762a:	0f 84 d1 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017630:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017633:	b8 60 98 02 c0       	mov    eax,0xc0029860
c0017638:	80 f9 01             	cmp    cl,0x1
c001763b:	0f 86 c0 00 00 00    	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017641:	b8 90 98 02 c0       	mov    eax,0xc0029890
c0017646:	80 fa 37             	cmp    dl,0x37
c0017649:	0f 84 b2 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001764f:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c0017654:	80 fa 3a             	cmp    dl,0x3a
c0017657:	0f 84 a4 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001765d:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017662:	80 fa 3c             	cmp    dl,0x3c
c0017665:	0f 84 96 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001766b:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0017670:	80 fa 3d             	cmp    dl,0x3d
c0017673:	0f 84 88 00 00 00    	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017679:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c001767e:	80 fa 3e             	cmp    dl,0x3e
c0017681:	74 7e                	je     c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017683:	8d 42 bb             	lea    eax,[edx-0x45]
c0017686:	3c 01                	cmp    al,0x1
c0017688:	76 72                	jbe    c00176fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001768a:	80 fa 3f             	cmp    dl,0x3f
c001768d:	74 6d                	je     c00176fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001768f:	80 fa 4a             	cmp    dl,0x4a
c0017692:	74 0a                	je     c001769e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017694:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c0017699:	80 fa 4d             	cmp    dl,0x4d
c001769c:	75 63                	jne    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001769e:	b8 90 98 02 c0       	mov    eax,0xc0029890
c00176a3:	c3                   	ret    
c00176a4:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00176a9:	80 f9 0b             	cmp    cl,0xb
c00176ac:	75 0a                	jne    c00176b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00176ae:	fe ca                	dec    dl
c00176b0:	75 4f                	jne    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176b2:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c00176b7:	c3                   	ret    
c00176b8:	80 f9 0f             	cmp    cl,0xf
c00176bb:	75 44                	jne    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176bd:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00176c2:	80 fa 02             	cmp    dl,0x2
c00176c5:	76 3a                	jbe    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176c7:	8d 42 fd             	lea    eax,[edx-0x3]
c00176ca:	3c 01                	cmp    al,0x1
c00176cc:	76 0a                	jbe    c00176d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00176ce:	b8 86 7f 02 c0       	mov    eax,0xc0027f86
c00176d3:	80 fa 06             	cmp    dl,0x6
c00176d6:	75 29                	jne    c0017701 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176d8:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00176dd:	c3                   	ret    
c00176de:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00176e3:	c3                   	ret    
c00176e4:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00176e9:	c3                   	ret    
c00176ea:	b8 20 98 02 c0       	mov    eax,0xc0029820
c00176ef:	c3                   	ret    
c00176f0:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00176f5:	c3                   	ret    
c00176f6:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00176fb:	c3                   	ret    
c00176fc:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017701:	c3                   	ret    

c0017702 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017702:	60                   	pusha  
c0017703:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001770b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001770f:	9c                   	pushf  
c0017710:	fa                   	cli    
c0017711:	0f 09                	wbinvd 
c0017713:	0f 30                	wrmsr  
c0017715:	9d                   	popf   
c0017716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001771a:	89 02                	mov    DWORD PTR [edx],eax
c001771c:	61                   	popa   
c001771d:	c3                   	ret    

c001771e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001771e:	60                   	pusha  
c001771f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017723:	9c                   	pushf  
c0017724:	fa                   	cli    
c0017725:	0f 09                	wbinvd 
c0017727:	31 c0                	xor    eax,eax
c0017729:	31 d2                	xor    edx,edx
c001772b:	0f 32                	rdmsr  
c001772d:	9d                   	popf   
c001772e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017732:	89 02                	mov    DWORD PTR [edx],eax
c0017734:	61                   	popa   
c0017735:	c3                   	ret    

c0017736 <CPU::AMD_K6_writeback(int, int, int)>:
c0017736:	56                   	push   esi
c0017737:	53                   	push   ebx
c0017738:	83 ec 10             	sub    esp,0x10
c001773b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001773f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017744:	75 5d                	jne    c00177a3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017746:	83 f8 08             	cmp    eax,0x8
c0017749:	75 09                	jne    c0017754 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001774b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017750:	7e 13                	jle    c0017765 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017752:	eb 30                	jmp    c0017784 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017754:	83 f8 06             	cmp    eax,0x6
c0017757:	7c 4a                	jl     c00177a3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017759:	83 f8 07             	cmp    eax,0x7
c001775c:	7e 07                	jle    c0017765 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001775e:	83 f8 09             	cmp    eax,0x9
c0017761:	74 21                	je     c0017784 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017763:	eb 3e                	jmp    c00177a3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017765:	89 e6                	mov    esi,esp
c0017767:	8b 1d a4 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4a4
c001776d:	56                   	push   esi
c001776e:	c1 eb 15             	shr    ebx,0x15
c0017771:	68 82 00 00 c0       	push   0xc0000082
c0017776:	83 e3 7e             	and    ebx,0x7e
c0017779:	e8 a0 ff ff ff       	call   c001771e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001777e:	56                   	push   esi
c001777f:	6a 00                	push   0x0
c0017781:	53                   	push   ebx
c0017782:	eb 12                	jmp    c0017796 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017784:	89 e3                	mov    ebx,esp
c0017786:	53                   	push   ebx
c0017787:	68 82 00 00 c0       	push   0xc0000082
c001778c:	e8 8d ff ff ff       	call   c001771e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017791:	53                   	push   ebx
c0017792:	6a 00                	push   0x0
c0017794:	6a 00                	push   0x0
c0017796:	68 82 00 00 c0       	push   0xc0000082
c001779b:	e8 62 ff ff ff       	call   c0017702 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00177a0:	83 c4 18             	add    esp,0x18
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	5b                   	pop    ebx
c00177a7:	5e                   	pop    esi
c00177a8:	c3                   	ret    
c00177a9:	90                   	nop

c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00177aa:	55                   	push   ebp
c00177ab:	57                   	push   edi
c00177ac:	56                   	push   esi
c00177ad:	53                   	push   ebx
c00177ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177b6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00177ba:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00177be:	39 05 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,eax
c00177c4:	75 23                	jne    c00177e9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00177c6:	a1 6c af 02 c0       	mov    eax,ds:0xc002af6c
c00177cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177cf:	89 06                	mov    DWORD PTR [esi],eax
c00177d1:	a1 68 af 02 c0       	mov    eax,ds:0xc002af68
c00177d6:	89 07                	mov    DWORD PTR [edi],eax
c00177d8:	a1 64 af 02 c0       	mov    eax,ds:0xc002af64
c00177dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00177e0:	a1 60 af 02 c0       	mov    eax,ds:0xc002af60
c00177e5:	89 02                	mov    DWORD PTR [edx],eax
c00177e7:	eb 3f                	jmp    c0017828 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00177e9:	31 c9                	xor    ecx,ecx
c00177eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177ef:	0f a2                	cpuid  
c00177f1:	89 06                	mov    DWORD PTR [esi],eax
c00177f3:	89 1f                	mov    DWORD PTR [edi],ebx
c00177f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177f9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00177fc:	89 10                	mov    DWORD PTR [eax],edx
c00177fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017802:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c0017807:	8b 06                	mov    eax,DWORD PTR [esi]
c0017809:	a3 6c af 02 c0       	mov    ds:0xc002af6c,eax
c001780e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017810:	a3 68 af 02 c0       	mov    ds:0xc002af68,eax
c0017815:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017818:	a3 64 af 02 c0       	mov    ds:0xc002af64,eax
c001781d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017821:	8b 00                	mov    eax,DWORD PTR [eax]
c0017823:	a3 60 af 02 c0       	mov    ds:0xc002af60,eax
c0017828:	5b                   	pop    ebx
c0017829:	5e                   	pop    esi
c001782a:	5f                   	pop    edi
c001782b:	5d                   	pop    ebp
c001782c:	c3                   	ret    
c001782d:	90                   	nop

c001782e <CPU::cpuidCheckEDX(unsigned int)>:
c001782e:	83 ec 10             	sub    esp,0x10
c0017831:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017835:	50                   	push   eax
c0017836:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783a:	50                   	push   eax
c001783b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783f:	50                   	push   eax
c0017840:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017844:	50                   	push   eax
c0017845:	6a 01                	push   0x1
c0017847:	e8 5e ff ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001784c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017850:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017854:	0f 95 c0             	setne  al
c0017857:	83 c4 24             	add    esp,0x24
c001785a:	c3                   	ret    
c001785b:	90                   	nop

c001785c <CPU::cpuidCheckECX(unsigned int)>:
c001785c:	83 ec 10             	sub    esp,0x10
c001785f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017863:	50                   	push   eax
c0017864:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017868:	50                   	push   eax
c0017869:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001786d:	50                   	push   eax
c001786e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017872:	50                   	push   eax
c0017873:	6a 01                	push   0x1
c0017875:	e8 30 ff ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001787a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017882:	0f 95 c0             	setne  al
c0017885:	83 c4 24             	add    esp,0x24
c0017888:	c3                   	ret    
c0017889:	90                   	nop

c001788a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001788a:	83 ec 10             	sub    esp,0x10
c001788d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017891:	50                   	push   eax
c0017892:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017896:	50                   	push   eax
c0017897:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001789b:	50                   	push   eax
c001789c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178a0:	50                   	push   eax
c00178a1:	6a 07                	push   0x7
c00178a3:	e8 02 ff ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ac:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00178b0:	0f 95 c0             	setne  al
c00178b3:	83 c4 24             	add    esp,0x24
c00178b6:	c3                   	ret    
c00178b7:	90                   	nop

c00178b8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00178b8:	83 ec 10             	sub    esp,0x10
c00178bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178bf:	50                   	push   eax
c00178c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178c4:	50                   	push   eax
c00178c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178c9:	50                   	push   eax
c00178ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ce:	50                   	push   eax
c00178cf:	6a 07                	push   0x7
c00178d1:	e8 d4 fe ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178da:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00178de:	0f 95 c0             	setne  al
c00178e1:	83 c4 24             	add    esp,0x24
c00178e4:	c3                   	ret    
c00178e5:	90                   	nop

c00178e6 <CPU::CPU()>:
c00178e6:	83 ec 0c             	sub    esp,0xc
c00178e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ed:	83 ec 08             	sub    esp,0x8
c00178f0:	68 86 7f 02 c0       	push   0xc0027f86
c00178f5:	50                   	push   eax
c00178f6:	e8 23 bf ff ff       	call   c001381e <Device::Device(char const*)>
c00178fb:	83 c4 10             	add    esp,0x10
c00178fe:	ba 60 80 02 c0       	mov    edx,0xc0028060
c0017903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017907:	89 10                	mov    DWORD PTR [eax],edx
c0017909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001791b:	05 78 01 00 00       	add    eax,0x178
c0017920:	83 ec 0c             	sub    esp,0xc
c0017923:	50                   	push   eax
c0017924:	e8 1b 70 ff ff       	call   c000e944 <GDT::GDT()>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017930:	05 7c 09 00 00       	add    eax,0x97c
c0017935:	83 ec 0c             	sub    esp,0xc
c0017938:	50                   	push   eax
c0017939:	e8 68 72 ff ff       	call   c000eba6 <IDT::IDT()>
c001793e:	83 c4 10             	add    esp,0x10
c0017941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017945:	05 7c 11 00 00       	add    eax,0x117c
c001794a:	83 ec 0c             	sub    esp,0xc
c001794d:	50                   	push   eax
c001794e:	e8 8d 92 ff ff       	call   c0010be0 <TSS::TSS()>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017965:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001796f:	90                   	nop
c0017970:	83 c4 0c             	add    esp,0xc
c0017973:	c3                   	ret    

c0017974 <CPU::displayFeatures()>:
c0017974:	53                   	push   ebx
c0017975:	83 ec 10             	sub    esp,0x10
c0017978:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001797c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017982:	68 94 7c 02 c0       	push   0xc0027c94
c0017987:	e8 c7 a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001798c:	59                   	pop    ecx
c001798d:	58                   	pop    eax
c001798e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017994:	50                   	push   eax
c0017995:	68 a5 7c 02 c0       	push   0xc0027ca5
c001799a:	e8 b4 a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001799f:	58                   	pop    eax
c00179a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00179a6:	5a                   	pop    edx
c00179a7:	c1 e8 0e             	shr    eax,0xe
c00179aa:	0f b6 c0             	movzx  eax,al
c00179ad:	50                   	push   eax
c00179ae:	68 b6 7c 02 c0       	push   0xc0027cb6
c00179b3:	e8 9b a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00179b8:	59                   	pop    ecx
c00179b9:	58                   	pop    eax
c00179ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00179c0:	66 c1 e8 06          	shr    ax,0x6
c00179c4:	0f b6 c0             	movzx  eax,al
c00179c7:	50                   	push   eax
c00179c8:	68 c7 7c 02 c0       	push   0xc0027cc7
c00179cd:	e8 81 a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00179d2:	c7 04 24 da 80 02 c0 	mov    DWORD PTR [esp],0xc00280da
c00179d9:	e8 75 a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c00179e6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00179ed:	74 05                	je     c00179f4 <CPU::displayFeatures()+0x80>
c00179ef:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179f4:	52                   	push   edx
c00179f5:	52                   	push   edx
c00179f6:	50                   	push   eax
c00179f7:	68 d8 7c 02 c0       	push   0xc0027cd8
c00179fc:	e8 52 a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a09:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017a10:	78 05                	js     c0017a17 <CPU::displayFeatures()+0xa3>
c0017a12:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a17:	51                   	push   ecx
c0017a18:	51                   	push   ecx
c0017a19:	50                   	push   eax
c0017a1a:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a1f:	e8 2f a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017a24:	83 c4 10             	add    esp,0x10
c0017a27:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a2c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017a33:	75 05                	jne    c0017a3a <CPU::displayFeatures()+0xc6>
c0017a35:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a3a:	52                   	push   edx
c0017a3b:	52                   	push   edx
c0017a3c:	50                   	push   eax
c0017a3d:	68 06 7d 02 c0       	push   0xc0027d06
c0017a42:	e8 0c a8 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a4f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017a56:	75 05                	jne    c0017a5d <CPU::displayFeatures()+0xe9>
c0017a58:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a5d:	51                   	push   ecx
c0017a5e:	51                   	push   ecx
c0017a5f:	50                   	push   eax
c0017a60:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a65:	e8 e9 a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017a6a:	83 c4 10             	add    esp,0x10
c0017a6d:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a72:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a79:	75 05                	jne    c0017a80 <CPU::displayFeatures()+0x10c>
c0017a7b:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a80:	52                   	push   edx
c0017a81:	52                   	push   edx
c0017a82:	50                   	push   eax
c0017a83:	68 34 7d 02 c0       	push   0xc0027d34
c0017a88:	e8 c6 a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a95:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a9c:	75 05                	jne    c0017aa3 <CPU::displayFeatures()+0x12f>
c0017a9e:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017aa3:	51                   	push   ecx
c0017aa4:	51                   	push   ecx
c0017aa5:	50                   	push   eax
c0017aa6:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017aab:	e8 a3 a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017ab0:	83 c4 10             	add    esp,0x10
c0017ab3:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017ab8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017abf:	75 05                	jne    c0017ac6 <CPU::displayFeatures()+0x152>
c0017ac1:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017ac6:	52                   	push   edx
c0017ac7:	52                   	push   edx
c0017ac8:	50                   	push   eax
c0017ac9:	68 62 7d 02 c0       	push   0xc0027d62
c0017ace:	e8 80 a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017ad3:	83 c4 10             	add    esp,0x10
c0017ad6:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017adb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017ae2:	75 05                	jne    c0017ae9 <CPU::displayFeatures()+0x175>
c0017ae4:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017ae9:	51                   	push   ecx
c0017aea:	51                   	push   ecx
c0017aeb:	50                   	push   eax
c0017aec:	68 79 7d 02 c0       	push   0xc0027d79
c0017af1:	e8 5d a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017afe:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017b05:	75 05                	jne    c0017b0c <CPU::displayFeatures()+0x198>
c0017b07:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b0c:	52                   	push   edx
c0017b0d:	52                   	push   edx
c0017b0e:	50                   	push   eax
c0017b0f:	68 90 7d 02 c0       	push   0xc0027d90
c0017b14:	e8 3a a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017b19:	83 c4 10             	add    esp,0x10
c0017b1c:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b21:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017b28:	75 05                	jne    c0017b2f <CPU::displayFeatures()+0x1bb>
c0017b2a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b2f:	51                   	push   ecx
c0017b30:	51                   	push   ecx
c0017b31:	50                   	push   eax
c0017b32:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b37:	e8 17 a7 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017b3c:	83 c4 10             	add    esp,0x10
c0017b3f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b44:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017b4b:	75 05                	jne    c0017b52 <CPU::displayFeatures()+0x1de>
c0017b4d:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b52:	52                   	push   edx
c0017b53:	52                   	push   edx
c0017b54:	50                   	push   eax
c0017b55:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b5a:	e8 f4 a6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017b5f:	83 c4 10             	add    esp,0x10
c0017b62:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b67:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b6e:	75 05                	jne    c0017b75 <CPU::displayFeatures()+0x201>
c0017b70:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b75:	51                   	push   ecx
c0017b76:	51                   	push   ecx
c0017b77:	50                   	push   eax
c0017b78:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017b7d:	e8 d1 a6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017b82:	83 c4 10             	add    esp,0x10
c0017b85:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b8a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b91:	75 05                	jne    c0017b98 <CPU::displayFeatures()+0x224>
c0017b93:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b98:	52                   	push   edx
c0017b99:	52                   	push   edx
c0017b9a:	50                   	push   eax
c0017b9b:	68 ec 7d 02 c0       	push   0xc0027dec
c0017ba0:	e8 ae a6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017ba5:	83 c4 10             	add    esp,0x10
c0017ba8:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017bad:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017bb4:	78 05                	js     c0017bbb <CPU::displayFeatures()+0x247>
c0017bb6:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017bbb:	51                   	push   ecx
c0017bbc:	51                   	push   ecx
c0017bbd:	50                   	push   eax
c0017bbe:	68 03 7e 02 c0       	push   0xc0027e03
c0017bc3:	e8 8b a6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017bd0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017bd7:	75 05                	jne    c0017bde <CPU::displayFeatures()+0x26a>
c0017bd9:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017bde:	52                   	push   edx
c0017bdf:	52                   	push   edx
c0017be0:	50                   	push   eax
c0017be1:	68 1a 7e 02 c0       	push   0xc0027e1a
c0017be6:	e8 68 a6 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0017beb:	83 c4 18             	add    esp,0x18
c0017bee:	5b                   	pop    ebx
c0017bef:	c3                   	ret    

c0017bf0 <CPU::detectFeatures()>:
c0017bf0:	55                   	push   ebp
c0017bf1:	57                   	push   edi
c0017bf2:	56                   	push   esi
c0017bf3:	53                   	push   ebx
c0017bf4:	83 ec 50             	sub    esp,0x50
c0017bf7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017bfb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017c05:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017c0c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017c12:	6a 0d                	push   0xd
c0017c14:	6a 00                	push   0x0
c0017c16:	57                   	push   edi
c0017c17:	e8 61 8a fe ff       	call   c000067d <memset>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0017c24:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017c2b:	0f 84 20 09 00 00    	je     c0018551 <CPU::detectFeatures()+0x961>
c0017c31:	83 ec 0c             	sub    esp,0xc
c0017c34:	6a 10                	push   0x10
c0017c36:	e8 f3 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017c3b:	83 e0 01             	and    eax,0x1
c0017c3e:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c47:	83 e0 fd             	and    eax,0xfffffffd
c0017c4a:	09 d0                	or     eax,edx
c0017c4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c52:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017c59:	e8 d0 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017c5e:	83 e0 01             	and    eax,0x1
c0017c61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c68:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c6e:	83 e0 fb             	and    eax,0xfffffffb
c0017c71:	09 d0                	or     eax,edx
c0017c73:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c79:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c80:	e8 a9 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017c85:	83 e0 01             	and    eax,0x1
c0017c88:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c95:	83 e0 f7             	and    eax,0xfffffff7
c0017c98:	09 d0                	or     eax,edx
c0017c9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ca0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017ca7:	e8 82 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017cac:	83 e0 01             	and    eax,0x1
c0017caf:	c1 e0 04             	shl    eax,0x4
c0017cb2:	88 c2                	mov    dl,al
c0017cb4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cba:	83 e0 ef             	and    eax,0xffffffef
c0017cbd:	09 d0                	or     eax,edx
c0017cbf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cc5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017ccc:	e8 5d fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017cd1:	83 e0 01             	and    eax,0x1
c0017cd4:	c1 e0 05             	shl    eax,0x5
c0017cd7:	88 c2                	mov    dl,al
c0017cd9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cdf:	83 e0 df             	and    eax,0xffffffdf
c0017ce2:	09 d0                	or     eax,edx
c0017ce4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017cf1:	e8 38 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017cf6:	83 e0 01             	and    eax,0x1
c0017cf9:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cfc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017d02:	83 e0 fd             	and    eax,0xfffffffd
c0017d05:	09 d0                	or     eax,edx
c0017d07:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017d0d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017d14:	e8 15 fb ff ff       	call   c001782e <CPU::cpuidCheckEDX(unsigned int)>
c0017d19:	83 e0 01             	and    eax,0x1
c0017d1c:	c1 e0 06             	shl    eax,0x6
c0017d1f:	88 c2                	mov    dl,al
c0017d21:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017d27:	83 e0 bf             	and    eax,0xffffffbf
c0017d2a:	09 d0                	or     eax,edx
c0017d2c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017d32:	58                   	pop    eax
c0017d33:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017d37:	56                   	push   esi
c0017d38:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017d3c:	55                   	push   ebp
c0017d3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017d41:	50                   	push   eax
c0017d42:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017d46:	52                   	push   edx
c0017d47:	6a 00                	push   0x0
c0017d49:	e8 5c fa ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d4e:	83 c4 1c             	add    esp,0x1c
c0017d51:	6a 04                	push   0x4
c0017d53:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d57:	50                   	push   eax
c0017d58:	57                   	push   edi
c0017d59:	e8 e9 88 fe ff       	call   c0000647 <memcpy>
c0017d5e:	83 c4 0c             	add    esp,0xc
c0017d61:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d67:	6a 04                	push   0x4
c0017d69:	56                   	push   esi
c0017d6a:	50                   	push   eax
c0017d6b:	e8 d7 88 fe ff       	call   c0000647 <memcpy>
c0017d70:	83 c4 0c             	add    esp,0xc
c0017d73:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d79:	6a 04                	push   0x4
c0017d7b:	55                   	push   ebp
c0017d7c:	50                   	push   eax
c0017d7d:	e8 c5 88 fe ff       	call   c0000647 <memcpy>
c0017d82:	58                   	pop    eax
c0017d83:	5a                   	pop    edx
c0017d84:	68 31 7e 02 c0       	push   0xc0027e31
c0017d89:	57                   	push   edi
c0017d8a:	e8 de 89 fe ff       	call   c000076d <strcmp>
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	85 c0                	test   eax,eax
c0017d94:	75 0f                	jne    c0017da5 <CPU::detectFeatures()+0x1b5>
c0017d96:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017da0:	e9 22 02 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017da5:	50                   	push   eax
c0017da6:	50                   	push   eax
c0017da7:	68 3e 7e 02 c0       	push   0xc0027e3e
c0017dac:	57                   	push   edi
c0017dad:	e8 bb 89 fe ff       	call   c000076d <strcmp>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	85 c0                	test   eax,eax
c0017db7:	74 dd                	je     c0017d96 <CPU::detectFeatures()+0x1a6>
c0017db9:	51                   	push   ecx
c0017dba:	51                   	push   ecx
c0017dbb:	68 4b 7e 02 c0       	push   0xc0027e4b
c0017dc0:	57                   	push   edi
c0017dc1:	e8 a7 89 fe ff       	call   c000076d <strcmp>
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	85 c0                	test   eax,eax
c0017dcb:	74 2a                	je     c0017df7 <CPU::detectFeatures()+0x207>
c0017dcd:	52                   	push   edx
c0017dce:	52                   	push   edx
c0017dcf:	68 58 7e 02 c0       	push   0xc0027e58
c0017dd4:	57                   	push   edi
c0017dd5:	e8 93 89 fe ff       	call   c000076d <strcmp>
c0017dda:	83 c4 10             	add    esp,0x10
c0017ddd:	85 c0                	test   eax,eax
c0017ddf:	74 16                	je     c0017df7 <CPU::detectFeatures()+0x207>
c0017de1:	50                   	push   eax
c0017de2:	50                   	push   eax
c0017de3:	68 65 7e 02 c0       	push   0xc0027e65
c0017de8:	57                   	push   edi
c0017de9:	e8 7f 89 fe ff       	call   c000076d <strcmp>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	85 c0                	test   eax,eax
c0017df3:	74 48                	je     c0017e3d <CPU::detectFeatures()+0x24d>
c0017df5:	eb 0f                	jmp    c0017e06 <CPU::detectFeatures()+0x216>
c0017df7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017e01:	e9 c1 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017e06:	50                   	push   eax
c0017e07:	50                   	push   eax
c0017e08:	68 72 7e 02 c0       	push   0xc0027e72
c0017e0d:	57                   	push   edi
c0017e0e:	e8 5a 89 fe ff       	call   c000076d <strcmp>
c0017e13:	83 c4 10             	add    esp,0x10
c0017e16:	85 c0                	test   eax,eax
c0017e18:	74 23                	je     c0017e3d <CPU::detectFeatures()+0x24d>
c0017e1a:	50                   	push   eax
c0017e1b:	50                   	push   eax
c0017e1c:	68 7f 7e 02 c0       	push   0xc0027e7f
c0017e21:	57                   	push   edi
c0017e22:	e8 46 89 fe ff       	call   c000076d <strcmp>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	75 1e                	jne    c0017e4c <CPU::detectFeatures()+0x25c>
c0017e2e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017e38:	e9 8a 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017e3d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017e47:	e9 7b 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017e4c:	50                   	push   eax
c0017e4d:	50                   	push   eax
c0017e4e:	68 8c 7e 02 c0       	push   0xc0027e8c
c0017e53:	57                   	push   edi
c0017e54:	e8 14 89 fe ff       	call   c000076d <strcmp>
c0017e59:	83 c4 10             	add    esp,0x10
c0017e5c:	85 c0                	test   eax,eax
c0017e5e:	75 0f                	jne    c0017e6f <CPU::detectFeatures()+0x27f>
c0017e60:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e6a:	e9 58 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017e6f:	50                   	push   eax
c0017e70:	50                   	push   eax
c0017e71:	68 4b 7e 02 c0       	push   0xc0027e4b
c0017e76:	57                   	push   edi
c0017e77:	e8 f1 88 fe ff       	call   c000076d <strcmp>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	85 c0                	test   eax,eax
c0017e81:	75 0f                	jne    c0017e92 <CPU::detectFeatures()+0x2a2>
c0017e83:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e8d:	e9 35 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017e92:	50                   	push   eax
c0017e93:	50                   	push   eax
c0017e94:	68 99 7e 02 c0       	push   0xc0027e99
c0017e99:	57                   	push   edi
c0017e9a:	e8 ce 88 fe ff       	call   c000076d <strcmp>
c0017e9f:	83 c4 10             	add    esp,0x10
c0017ea2:	85 c0                	test   eax,eax
c0017ea4:	75 0f                	jne    c0017eb5 <CPU::detectFeatures()+0x2c5>
c0017ea6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017eb0:	e9 12 01 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017eb5:	51                   	push   ecx
c0017eb6:	51                   	push   ecx
c0017eb7:	68 a6 7e 02 c0       	push   0xc0027ea6
c0017ebc:	57                   	push   edi
c0017ebd:	e8 ab 88 fe ff       	call   c000076d <strcmp>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	85 c0                	test   eax,eax
c0017ec7:	75 0f                	jne    c0017ed8 <CPU::detectFeatures()+0x2e8>
c0017ec9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017ed3:	e9 ef 00 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017ed8:	52                   	push   edx
c0017ed9:	52                   	push   edx
c0017eda:	68 b3 7e 02 c0       	push   0xc0027eb3
c0017edf:	57                   	push   edi
c0017ee0:	e8 88 88 fe ff       	call   c000076d <strcmp>
c0017ee5:	83 c4 10             	add    esp,0x10
c0017ee8:	85 c0                	test   eax,eax
c0017eea:	75 0f                	jne    c0017efb <CPU::detectFeatures()+0x30b>
c0017eec:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017ef6:	e9 cc 00 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017efb:	50                   	push   eax
c0017efc:	50                   	push   eax
c0017efd:	68 c0 7e 02 c0       	push   0xc0027ec0
c0017f02:	57                   	push   edi
c0017f03:	e8 65 88 fe ff       	call   c000076d <strcmp>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	85 c0                	test   eax,eax
c0017f0d:	75 0f                	jne    c0017f1e <CPU::detectFeatures()+0x32e>
c0017f0f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017f19:	e9 a9 00 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017f1e:	50                   	push   eax
c0017f1f:	50                   	push   eax
c0017f20:	68 cd 7e 02 c0       	push   0xc0027ecd
c0017f25:	57                   	push   edi
c0017f26:	e8 42 88 fe ff       	call   c000076d <strcmp>
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	85 c0                	test   eax,eax
c0017f30:	75 0f                	jne    c0017f41 <CPU::detectFeatures()+0x351>
c0017f32:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017f3c:	e9 86 00 00 00       	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017f41:	50                   	push   eax
c0017f42:	50                   	push   eax
c0017f43:	68 da 7e 02 c0       	push   0xc0027eda
c0017f48:	57                   	push   edi
c0017f49:	e8 1f 88 fe ff       	call   c000076d <strcmp>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	85 c0                	test   eax,eax
c0017f53:	75 0c                	jne    c0017f61 <CPU::detectFeatures()+0x371>
c0017f55:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017f5f:	eb 66                	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017f61:	50                   	push   eax
c0017f62:	50                   	push   eax
c0017f63:	68 e7 7e 02 c0       	push   0xc0027ee7
c0017f68:	57                   	push   edi
c0017f69:	e8 ff 87 fe ff       	call   c000076d <strcmp>
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	85 c0                	test   eax,eax
c0017f73:	75 0c                	jne    c0017f81 <CPU::detectFeatures()+0x391>
c0017f75:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f7f:	eb 46                	jmp    c0017fc7 <CPU::detectFeatures()+0x3d7>
c0017f81:	50                   	push   eax
c0017f82:	50                   	push   eax
c0017f83:	68 f4 7e 02 c0       	push   0xc0027ef4
c0017f88:	57                   	push   edi
c0017f89:	e8 df 87 fe ff       	call   c000076d <strcmp>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	85 c0                	test   eax,eax
c0017f93:	74 e0                	je     c0017f75 <CPU::detectFeatures()+0x385>
c0017f95:	50                   	push   eax
c0017f96:	50                   	push   eax
c0017f97:	68 01 7f 02 c0       	push   0xc0027f01
c0017f9c:	57                   	push   edi
c0017f9d:	e8 cb 87 fe ff       	call   c000076d <strcmp>
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	85 c0                	test   eax,eax
c0017fa7:	74 cc                	je     c0017f75 <CPU::detectFeatures()+0x385>
c0017fa9:	51                   	push   ecx
c0017faa:	51                   	push   ecx
c0017fab:	68 0e 7f 02 c0       	push   0xc0027f0e
c0017fb0:	57                   	push   edi
c0017fb1:	e8 b7 87 fe ff       	call   c000076d <strcmp>
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	85 c0                	test   eax,eax
c0017fbb:	74 b8                	je     c0017f75 <CPU::detectFeatures()+0x385>
c0017fbd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017fc7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017fcc:	0f 86 be 00 00 00    	jbe    c0018090 <CPU::detectFeatures()+0x4a0>
c0017fd2:	83 ec 0c             	sub    esp,0xc
c0017fd5:	68 80 00 00 00       	push   0x80
c0017fda:	e8 ab f8 ff ff       	call   c001788a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fdf:	83 e0 01             	and    eax,0x1
c0017fe2:	c1 e0 06             	shl    eax,0x6
c0017fe5:	88 c2                	mov    dl,al
c0017fe7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fed:	83 e0 bf             	and    eax,0xffffffbf
c0017ff0:	09 d0                	or     eax,edx
c0017ff2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ff8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017fff:	e8 86 f8 ff ff       	call   c001788a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018004:	83 e0 01             	and    eax,0x1
c0018007:	c1 e0 04             	shl    eax,0x4
c001800a:	88 c2                	mov    dl,al
c001800c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018012:	83 e0 ef             	and    eax,0xffffffef
c0018015:	09 d0                	or     eax,edx
c0018017:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001801d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018024:	e8 61 f8 ff ff       	call   c001788a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018029:	c1 e0 07             	shl    eax,0x7
c001802c:	88 c2                	mov    dl,al
c001802e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018034:	83 e0 7f             	and    eax,0x7f
c0018037:	09 d0                	or     eax,edx
c0018039:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001803f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018046:	e8 6d f8 ff ff       	call   c00178b8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001804b:	83 e0 01             	and    eax,0x1
c001804e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018055:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001805b:	83 e0 f7             	and    eax,0xfffffff7
c001805e:	09 d0                	or     eax,edx
c0018060:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018066:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001806d:	e8 46 f8 ff ff       	call   c00178b8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018072:	83 c4 10             	add    esp,0x10
c0018075:	83 e0 01             	and    eax,0x1
c0018078:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001807f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018085:	83 e0 fb             	and    eax,0xfffffffb
c0018088:	09 d0                	or     eax,edx
c001808a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018090:	83 ec 0c             	sub    esp,0xc
c0018093:	56                   	push   esi
c0018094:	55                   	push   ebp
c0018095:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018099:	57                   	push   edi
c001809a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001809e:	50                   	push   eax
c001809f:	6a 01                	push   0x1
c00180a1:	e8 04 f7 ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180a6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00180aa:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00180b0:	88 ca                	mov    dl,cl
c00180b2:	83 e0 f0             	and    eax,0xfffffff0
c00180b5:	83 e2 0f             	and    edx,0xf
c00180b8:	09 d0                	or     eax,edx
c00180ba:	88 ca                	mov    dl,cl
c00180bc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00180c2:	c0 ea 04             	shr    dl,0x4
c00180c5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00180c9:	0f b6 c2             	movzx  eax,dl
c00180cc:	83 c4 20             	add    esp,0x20
c00180cf:	c1 e0 06             	shl    eax,0x6
c00180d2:	89 c5                	mov    ebp,eax
c00180d4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00180da:	66 25 3f c0          	and    ax,0xc03f
c00180de:	09 e8                	or     eax,ebp
c00180e0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00180e7:	89 c8                	mov    eax,ecx
c00180e9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00180ef:	c1 e8 08             	shr    eax,0x8
c00180f2:	83 e2 3f             	and    edx,0x3f
c00180f5:	83 e0 0f             	and    eax,0xf
c00180f8:	89 c5                	mov    ebp,eax
c00180fa:	c1 e5 06             	shl    ebp,0x6
c00180fd:	09 d5                	or     ebp,edx
c00180ff:	89 ea                	mov    edx,ebp
c0018101:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018107:	88 c2                	mov    dl,al
c0018109:	c0 ea 02             	shr    dl,0x2
c001810c:	89 d5                	mov    ebp,edx
c001810e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018114:	83 e2 c0             	and    edx,0xffffffc0
c0018117:	09 d5                	or     ebp,edx
c0018119:	89 ea                	mov    edx,ebp
c001811b:	89 cd                	mov    ebp,ecx
c001811d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018123:	c1 ed 0c             	shr    ebp,0xc
c0018126:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001812c:	83 e5 03             	and    ebp,0x3
c001812f:	83 e2 cf             	and    edx,0xffffffcf
c0018132:	c1 e5 04             	shl    ebp,0x4
c0018135:	09 d5                	or     ebp,edx
c0018137:	3c 06                	cmp    al,0x6
c0018139:	89 ea                	mov    edx,ebp
c001813b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018141:	74 04                	je     c0018147 <CPU::detectFeatures()+0x557>
c0018143:	3c 0f                	cmp    al,0xf
c0018145:	75 5c                	jne    c00181a3 <CPU::detectFeatures()+0x5b3>
c0018147:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001814b:	89 cd                	mov    ebp,ecx
c001814d:	c1 ed 10             	shr    ebp,0x10
c0018150:	c1 e5 04             	shl    ebp,0x4
c0018153:	09 ea                	or     edx,ebp
c0018155:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001815b:	0f b6 d2             	movzx  edx,dl
c001815e:	66 81 e5 3f c0       	and    bp,0xc03f
c0018163:	c1 e2 06             	shl    edx,0x6
c0018166:	09 ea                	or     edx,ebp
c0018168:	3c 0f                	cmp    al,0xf
c001816a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018171:	75 30                	jne    c00181a3 <CPU::detectFeatures()+0x5b3>
c0018173:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018179:	c1 e9 14             	shr    ecx,0x14
c001817c:	83 e0 3f             	and    eax,0x3f
c001817f:	83 c1 0f             	add    ecx,0xf
c0018182:	88 ca                	mov    dl,cl
c0018184:	c0 e9 02             	shr    cl,0x2
c0018187:	c1 e2 06             	shl    edx,0x6
c001818a:	09 d0                	or     eax,edx
c001818c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018192:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018198:	83 e0 c0             	and    eax,0xffffffc0
c001819b:	09 c1                	or     ecx,eax
c001819d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00181a3:	83 ec 0c             	sub    esp,0xc
c00181a6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00181ad:	56                   	push   esi
c00181ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00181b2:	50                   	push   eax
c00181b3:	57                   	push   edi
c00181b4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00181b8:	55                   	push   ebp
c00181b9:	68 00 00 00 80       	push   0x80000000
c00181be:	e8 e7 f5 ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181c3:	83 c4 20             	add    esp,0x20
c00181c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00181ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00181d2:	76 1e                	jbe    c00181f2 <CPU::detectFeatures()+0x602>
c00181d4:	83 ec 0c             	sub    esp,0xc
c00181d7:	56                   	push   esi
c00181d8:	50                   	push   eax
c00181d9:	57                   	push   edi
c00181da:	55                   	push   ebp
c00181db:	68 01 00 00 80       	push   0x80000001
c00181e0:	e8 c5 f5 ff ff       	call   c00177aa <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00181ef:	83 c4 20             	add    esp,0x20
c00181f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00181f8:	83 f8 01             	cmp    eax,0x1
c00181fb:	75 6f                	jne    c001826c <CPU::detectFeatures()+0x67c>
c00181fd:	51                   	push   ecx
c00181fe:	51                   	push   ecx
c00181ff:	68 1a 7f 02 c0       	push   0xc0027f1a
c0018204:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018208:	56                   	push   esi
c0018209:	e8 0e 85 fe ff       	call   c000071c <strcpy>
c001820e:	5f                   	pop    edi
c001820f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018215:	5d                   	pop    ebp
c0018216:	66 c1 e8 06          	shr    ax,0x6
c001821a:	0f b6 c0             	movzx  eax,al
c001821d:	50                   	push   eax
c001821e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018224:	c1 e8 0e             	shr    eax,0xe
c0018227:	0f b6 c0             	movzx  eax,al
c001822a:	50                   	push   eax
c001822b:	e8 24 f2 ff ff       	call   c0017454 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018230:	5a                   	pop    edx
c0018231:	59                   	pop    ecx
c0018232:	50                   	push   eax
c0018233:	56                   	push   esi
c0018234:	e8 9a 85 fe ff       	call   c00007d3 <strcat>
c0018239:	5f                   	pop    edi
c001823a:	5d                   	pop    ebp
c001823b:	56                   	push   esi
c001823c:	53                   	push   ebx
c001823d:	e8 ce b5 ff ff       	call   c0013810 <Device::setName(char const*)>
c0018242:	58                   	pop    eax
c0018243:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018249:	5a                   	pop    edx
c001824a:	68 21 7f 02 c0       	push   0xc0027f21
c001824f:	50                   	push   eax
c0018250:	e8 18 85 fe ff       	call   c000076d <strcmp>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	85 c0                	test   eax,eax
c001825a:	0f 85 71 03 00 00    	jne    c00185d1 <CPU::detectFeatures()+0x9e1>
c0018260:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018267:	e9 65 03 00 00       	jmp    c00185d1 <CPU::detectFeatures()+0x9e1>
c001826c:	83 f8 02             	cmp    eax,0x2
c001826f:	0f 85 b5 00 00 00    	jne    c001832a <CPU::detectFeatures()+0x73a>
c0018275:	57                   	push   edi
c0018276:	57                   	push   edi
c0018277:	68 33 7f 02 c0       	push   0xc0027f33
c001827c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018280:	56                   	push   esi
c0018281:	e8 96 84 fe ff       	call   c000071c <strcpy>
c0018286:	5d                   	pop    ebp
c0018287:	58                   	pop    eax
c0018288:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001828e:	66 c1 e8 06          	shr    ax,0x6
c0018292:	0f b6 c0             	movzx  eax,al
c0018295:	50                   	push   eax
c0018296:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001829c:	c1 e8 0e             	shr    eax,0xe
c001829f:	0f b6 c0             	movzx  eax,al
c00182a2:	50                   	push   eax
c00182a3:	e8 18 f0 ff ff       	call   c00172c0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00182a8:	5a                   	pop    edx
c00182a9:	59                   	pop    ecx
c00182aa:	50                   	push   eax
c00182ab:	56                   	push   esi
c00182ac:	e8 22 85 fe ff       	call   c00007d3 <strcat>
c00182b1:	5f                   	pop    edi
c00182b2:	5d                   	pop    ebp
c00182b3:	56                   	push   esi
c00182b4:	53                   	push   ebx
c00182b5:	e8 56 b5 ff ff       	call   c0013810 <Device::setName(char const*)>
c00182ba:	58                   	pop    eax
c00182bb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00182c1:	5a                   	pop    edx
c00182c2:	68 38 7f 02 c0       	push   0xc0027f38
c00182c7:	50                   	push   eax
c00182c8:	e8 a0 84 fe ff       	call   c000076d <strcmp>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	85 c0                	test   eax,eax
c00182d2:	75 20                	jne    c00182f4 <CPU::detectFeatures()+0x704>
c00182d4:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00182da:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00182e0:	a8 01                	test   al,0x1
c00182e2:	74 10                	je     c00182f4 <CPU::detectFeatures()+0x704>
c00182e4:	83 e0 fe             	and    eax,0xfffffffe
c00182e7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00182ed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00182f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182fa:	c1 e8 0e             	shr    eax,0xe
c00182fd:	3c 05                	cmp    al,0x5
c00182ff:	0f 85 cc 02 00 00    	jne    c00185d1 <CPU::detectFeatures()+0x9e1>
c0018305:	56                   	push   esi
c0018306:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001830c:	83 e0 0f             	and    eax,0xf
c001830f:	50                   	push   eax
c0018310:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018316:	66 c1 e8 06          	shr    ax,0x6
c001831a:	0f b6 c0             	movzx  eax,al
c001831d:	50                   	push   eax
c001831e:	6a 05                	push   0x5
c0018320:	e8 11 f4 ff ff       	call   c0017736 <CPU::AMD_K6_writeback(int, int, int)>
c0018325:	e9 1f 02 00 00       	jmp    c0018549 <CPU::detectFeatures()+0x959>
c001832a:	8d 50 fd             	lea    edx,[eax-0x3]
c001832d:	83 fa 01             	cmp    edx,0x1
c0018330:	76 09                	jbe    c001833b <CPU::detectFeatures()+0x74b>
c0018332:	83 f8 06             	cmp    eax,0x6
c0018335:	0f 85 91 01 00 00    	jne    c00184cc <CPU::detectFeatures()+0x8dc>
c001833b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018341:	c1 ea 0e             	shr    edx,0xe
c0018344:	80 fa 05             	cmp    dl,0x5
c0018347:	75 7b                	jne    c00183c4 <CPU::detectFeatures()+0x7d4>
c0018349:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001834f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018354:	66 81 fa 00 01       	cmp    dx,0x100
c0018359:	75 0c                	jne    c0018367 <CPU::detectFeatures()+0x777>
c001835b:	51                   	push   ecx
c001835c:	51                   	push   ecx
c001835d:	68 3f 7f 02 c0       	push   0xc0027f3f
c0018362:	e9 dc 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018367:	66 81 fa 00 02       	cmp    dx,0x200
c001836c:	75 0c                	jne    c001837a <CPU::detectFeatures()+0x78a>
c001836e:	52                   	push   edx
c001836f:	52                   	push   edx
c0018370:	68 52 7f 02 c0       	push   0xc0027f52
c0018375:	e9 c9 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001837a:	66 81 fa 40 02       	cmp    dx,0x240
c001837f:	75 0c                	jne    c001838d <CPU::detectFeatures()+0x79d>
c0018381:	50                   	push   eax
c0018382:	50                   	push   eax
c0018383:	68 64 7f 02 c0       	push   0xc0027f64
c0018388:	e9 b6 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001838d:	83 f8 06             	cmp    eax,0x6
c0018390:	75 0c                	jne    c001839e <CPU::detectFeatures()+0x7ae>
c0018392:	50                   	push   eax
c0018393:	50                   	push   eax
c0018394:	68 76 7f 02 c0       	push   0xc0027f76
c0018399:	e9 a5 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001839e:	83 f8 04             	cmp    eax,0x4
c00183a1:	75 0c                	jne    c00183af <CPU::detectFeatures()+0x7bf>
c00183a3:	50                   	push   eax
c00183a4:	50                   	push   eax
c00183a5:	68 82 7f 02 c0       	push   0xc0027f82
c00183aa:	e9 94 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00183af:	83 f8 03             	cmp    eax,0x3
c00183b2:	0f 85 19 02 00 00    	jne    c00185d1 <CPU::detectFeatures()+0x9e1>
c00183b8:	50                   	push   eax
c00183b9:	50                   	push   eax
c00183ba:	68 8a 7f 02 c0       	push   0xc0027f8a
c00183bf:	e9 7f 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00183c4:	80 fa 06             	cmp    dl,0x6
c00183c7:	0f 85 db 00 00 00    	jne    c00184a8 <CPU::detectFeatures()+0x8b8>
c00183cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183d3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00183d8:	66 81 fa 80 01       	cmp    dx,0x180
c00183dd:	75 0c                	jne    c00183eb <CPU::detectFeatures()+0x7fb>
c00183df:	50                   	push   eax
c00183e0:	50                   	push   eax
c00183e1:	68 95 7f 02 c0       	push   0xc0027f95
c00183e6:	e9 58 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00183eb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00183f1:	66 f7 c1 80 ff       	test   cx,0xff80
c00183f6:	75 0c                	jne    c0018404 <CPU::detectFeatures()+0x814>
c00183f8:	50                   	push   eax
c00183f9:	50                   	push   eax
c00183fa:	68 a5 7f 02 c0       	push   0xc0027fa5
c00183ff:	e9 3f 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018404:	66 81 fa 40 02       	cmp    dx,0x240
c0018409:	75 0c                	jne    c0018417 <CPU::detectFeatures()+0x827>
c001840b:	55                   	push   ebp
c001840c:	55                   	push   ebp
c001840d:	68 ac 7f 02 c0       	push   0xc0027fac
c0018412:	e9 2c 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018417:	66 81 fa 80 02       	cmp    dx,0x280
c001841c:	75 0c                	jne    c001842a <CPU::detectFeatures()+0x83a>
c001841e:	57                   	push   edi
c001841f:	57                   	push   edi
c0018420:	68 b5 7f 02 c0       	push   0xc0027fb5
c0018425:	e9 19 01 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001842a:	66 81 fa 40 03       	cmp    dx,0x340
c001842f:	74 ed                	je     c001841e <CPU::detectFeatures()+0x82e>
c0018431:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018436:	75 0c                	jne    c0018444 <CPU::detectFeatures()+0x854>
c0018438:	56                   	push   esi
c0018439:	56                   	push   esi
c001843a:	68 bc 7f 02 c0       	push   0xc0027fbc
c001843f:	e9 ff 00 00 00       	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018444:	83 f8 06             	cmp    eax,0x6
c0018447:	0f 84 45 ff ff ff    	je     c0018392 <CPU::detectFeatures()+0x7a2>
c001844d:	83 f8 04             	cmp    eax,0x4
c0018450:	0f 84 4d ff ff ff    	je     c00183a3 <CPU::detectFeatures()+0x7b3>
c0018456:	83 f8 03             	cmp    eax,0x3
c0018459:	0f 85 72 01 00 00    	jne    c00185d1 <CPU::detectFeatures()+0x9e1>
c001845f:	51                   	push   ecx
c0018460:	51                   	push   ecx
c0018461:	68 c5 7f 02 c0       	push   0xc0027fc5
c0018466:	53                   	push   ebx
c0018467:	e8 a4 b3 ff ff       	call   c0013810 <Device::setName(char const*)>
c001846c:	b1 c1                	mov    cl,0xc1
c001846e:	88 c8                	mov    al,cl
c0018470:	e6 22                	out    0x22,al
c0018472:	e4 23                	in     al,0x23
c0018474:	88 c2                	mov    dl,al
c0018476:	88 c8                	mov    al,cl
c0018478:	e6 22                	out    0x22,al
c001847a:	88 d0                	mov    al,dl
c001847c:	83 c8 10             	or     eax,0x10
c001847f:	e6 23                	out    0x23,al
c0018481:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018488:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001848b:	89 d0                	mov    eax,edx
c001848d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018493:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018497:	40                   	inc    eax
c0018498:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001849e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00184a3:	e9 a1 00 00 00       	jmp    c0018549 <CPU::detectFeatures()+0x959>
c00184a8:	83 f8 06             	cmp    eax,0x6
c00184ab:	0f 84 e1 fe ff ff    	je     c0018392 <CPU::detectFeatures()+0x7a2>
c00184b1:	83 f8 04             	cmp    eax,0x4
c00184b4:	0f 84 e9 fe ff ff    	je     c00183a3 <CPU::detectFeatures()+0x7b3>
c00184ba:	83 f8 03             	cmp    eax,0x3
c00184bd:	0f 85 0e 01 00 00    	jne    c00185d1 <CPU::detectFeatures()+0x9e1>
c00184c3:	52                   	push   edx
c00184c4:	52                   	push   edx
c00184c5:	68 d0 7f 02 c0       	push   0xc0027fd0
c00184ca:	eb 77                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00184cc:	83 f8 07             	cmp    eax,0x7
c00184cf:	75 09                	jne    c00184da <CPU::detectFeatures()+0x8ea>
c00184d1:	50                   	push   eax
c00184d2:	50                   	push   eax
c00184d3:	68 da 7f 02 c0       	push   0xc0027fda
c00184d8:	eb 69                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00184da:	83 f8 0a             	cmp    eax,0xa
c00184dd:	75 09                	jne    c00184e8 <CPU::detectFeatures()+0x8f8>
c00184df:	50                   	push   eax
c00184e0:	50                   	push   eax
c00184e1:	68 e5 7f 02 c0       	push   0xc0027fe5
c00184e6:	eb 5b                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00184e8:	83 f8 0b             	cmp    eax,0xb
c00184eb:	75 09                	jne    c00184f6 <CPU::detectFeatures()+0x906>
c00184ed:	50                   	push   eax
c00184ee:	50                   	push   eax
c00184ef:	68 ed 7f 02 c0       	push   0xc0027fed
c00184f4:	eb 4d                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c00184f6:	83 f8 08             	cmp    eax,0x8
c00184f9:	75 09                	jne    c0018504 <CPU::detectFeatures()+0x914>
c00184fb:	50                   	push   eax
c00184fc:	50                   	push   eax
c00184fd:	68 f6 7f 02 c0       	push   0xc0027ff6
c0018502:	eb 3f                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018504:	83 f8 09             	cmp    eax,0x9
c0018507:	75 09                	jne    c0018512 <CPU::detectFeatures()+0x922>
c0018509:	50                   	push   eax
c001850a:	50                   	push   eax
c001850b:	68 fe 7f 02 c0       	push   0xc0027ffe
c0018510:	eb 31                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018512:	83 f8 05             	cmp    eax,0x5
c0018515:	75 09                	jne    c0018520 <CPU::detectFeatures()+0x930>
c0018517:	50                   	push   eax
c0018518:	50                   	push   eax
c0018519:	68 06 80 02 c0       	push   0xc0028006
c001851e:	eb 23                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c0018520:	83 f8 0c             	cmp    eax,0xc
c0018523:	75 09                	jne    c001852e <CPU::detectFeatures()+0x93e>
c0018525:	55                   	push   ebp
c0018526:	55                   	push   ebp
c0018527:	68 14 80 02 c0       	push   0xc0028014
c001852c:	eb 15                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001852e:	83 f8 0d             	cmp    eax,0xd
c0018531:	75 09                	jne    c001853c <CPU::detectFeatures()+0x94c>
c0018533:	57                   	push   edi
c0018534:	57                   	push   edi
c0018535:	68 1f 80 02 c0       	push   0xc002801f
c001853a:	eb 07                	jmp    c0018543 <CPU::detectFeatures()+0x953>
c001853c:	56                   	push   esi
c001853d:	56                   	push   esi
c001853e:	68 33 80 02 c0       	push   0xc0028033
c0018543:	53                   	push   ebx
c0018544:	e8 c7 b2 ff ff       	call   c0013810 <Device::setName(char const*)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	e9 80 00 00 00       	jmp    c00185d1 <CPU::detectFeatures()+0x9e1>
c0018551:	51                   	push   ecx
c0018552:	51                   	push   ecx
c0018553:	68 7f 7e 02 c0       	push   0xc0027e7f
c0018558:	57                   	push   edi
c0018559:	e8 be 81 fe ff       	call   c000071c <strcpy>
c001855e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018568:	e8 f6 7c fe ff       	call   c0000263 <is486>
c001856d:	83 c4 10             	add    esp,0x10
c0018570:	85 c0                	test   eax,eax
c0018572:	74 2b                	je     c001859f <CPU::detectFeatures()+0x9af>
c0018574:	52                   	push   edx
c0018575:	52                   	push   edx
c0018576:	68 3f 80 02 c0       	push   0xc002803f
c001857b:	53                   	push   ebx
c001857c:	e8 8f b2 ff ff       	call   c0013810 <Device::setName(char const*)>
c0018581:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018588:	0f 20 c0             	mov    eax,cr0
c001858b:	83 e0 14             	and    eax,0x14
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	83 f8 04             	cmp    eax,0x4
c0018594:	75 1f                	jne    c00185b5 <CPU::detectFeatures()+0x9c5>
c0018596:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001859d:	eb 32                	jmp    c00185d1 <CPU::detectFeatures()+0x9e1>
c001859f:	50                   	push   eax
c00185a0:	50                   	push   eax
c00185a1:	68 4a 80 02 c0       	push   0xc002804a
c00185a6:	53                   	push   ebx
c00185a7:	e8 64 b2 ff ff       	call   c0013810 <Device::setName(char const*)>
c00185ac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00185b3:	eb d3                	jmp    c0018588 <CPU::detectFeatures()+0x998>
c00185b5:	e8 84 7c fe ff       	call   c000023e <hasLegacyFPU>
c00185ba:	83 e0 01             	and    eax,0x1
c00185bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00185c0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185c6:	83 e0 fd             	and    eax,0xfffffffd
c00185c9:	09 d0                	or     eax,edx
c00185cb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00185d1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00185d8:	83 c4 4c             	add    esp,0x4c
c00185db:	5b                   	pop    ebx
c00185dc:	5e                   	pop    esi
c00185dd:	5f                   	pop    edi
c00185de:	5d                   	pop    ebp
c00185df:	c3                   	ret    

c00185e0 <CPU::setupSMEP()>:
c00185e0:	0f 20 e0             	mov    eax,cr4
c00185e3:	0d 00 00 10 00       	or     eax,0x100000
c00185e8:	0f 22 e0             	mov    cr4,eax
c00185eb:	c3                   	ret    

c00185ec <CPU::setupUMIP()>:
c00185ec:	0f 20 e0             	mov    eax,cr4
c00185ef:	80 cc 08             	or     ah,0x8
c00185f2:	0f 22 e0             	mov    cr4,eax
c00185f5:	c3                   	ret    

c00185f6 <CPU::setupTSC()>:
c00185f6:	0f 20 e0             	mov    eax,cr4
c00185f9:	83 c8 04             	or     eax,0x4
c00185fc:	0f 22 e0             	mov    cr4,eax
c00185ff:	c3                   	ret    

c0018600 <CPU::setupLargePages()>:
c0018600:	0f 20 e0             	mov    eax,cr4
c0018603:	83 c8 10             	or     eax,0x10
c0018606:	0f 22 e0             	mov    cr4,eax
c0018609:	c3                   	ret    

c001860a <CPU::setupPAT()>:
c001860a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001860f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018616:	74 2c                	je     c0018644 <CPU::setupPAT()+0x3a>
c0018618:	53                   	push   ebx
c0018619:	83 ec 10             	sub    esp,0x10
c001861c:	68 77 02 00 00       	push   0x277
c0018621:	50                   	push   eax
c0018622:	e8 ad 60 ff ff       	call   c000e6d4 <Computer::rdmsr(unsigned int)>
c0018627:	83 e2 f8             	and    edx,0xfffffff8
c001862a:	83 ca 01             	or     edx,0x1
c001862d:	52                   	push   edx
c001862e:	50                   	push   eax
c001862f:	68 77 02 00 00       	push   0x277
c0018634:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c001863a:	e8 c1 60 ff ff       	call   c000e700 <Computer::wrmsr(unsigned int, unsigned long long)>
c001863f:	83 c4 28             	add    esp,0x28
c0018642:	5b                   	pop    ebx
c0018643:	c3                   	ret    
c0018644:	c3                   	ret    
c0018645:	90                   	nop

c0018646 <CPU::setupMTRR()>:
c0018646:	c3                   	ret    
c0018647:	90                   	nop

c0018648 <CPU::setupGlobalPages()>:
c0018648:	0f 20 e0             	mov    eax,cr4
c001864b:	0c 80                	or     al,0x80
c001864d:	0f 22 e0             	mov    cr4,eax
c0018650:	c3                   	ret    
c0018651:	90                   	nop

c0018652 <CPU::allowUsermodeDataAccess()>:
c0018652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018656:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001865d:	74 03                	je     c0018662 <CPU::allowUsermodeDataAccess()+0x10>
c001865f:	0f 01 cb             	stac   
c0018662:	c3                   	ret    
c0018663:	90                   	nop

c0018664 <CPU::prohibitUsermodeDataAccess()>:
c0018664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018668:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001866f:	74 03                	je     c0018674 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018671:	0f 01 ca             	clac   
c0018674:	c3                   	ret    
c0018675:	90                   	nop

c0018676 <CPU::setupSMAP()>:
c0018676:	0f 20 e0             	mov    eax,cr4
c0018679:	0d 00 00 20 00       	or     eax,0x200000
c001867e:	0f 22 e0             	mov    cr4,eax
c0018681:	eb e1                	jmp    c0018664 <CPU::prohibitUsermodeDataAccess()>
c0018683:	90                   	nop

c0018684 <CPU::setupFeatures()>:
c0018684:	83 ec 0c             	sub    esp,0xc
c0018687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001868b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018692:	74 07                	je     c001869b <CPU::setupFeatures()+0x17>
c0018694:	52                   	push   edx
c0018695:	e8 46 ff ff ff       	call   c00185e0 <CPU::setupSMEP()>
c001869a:	58                   	pop    eax
c001869b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00186a2:	74 07                	je     c00186ab <CPU::setupFeatures()+0x27>
c00186a4:	52                   	push   edx
c00186a5:	e8 cc ff ff ff       	call   c0018676 <CPU::setupSMAP()>
c00186aa:	58                   	pop    eax
c00186ab:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00186b2:	74 07                	je     c00186bb <CPU::setupFeatures()+0x37>
c00186b4:	52                   	push   edx
c00186b5:	e8 32 ff ff ff       	call   c00185ec <CPU::setupUMIP()>
c00186ba:	58                   	pop    eax
c00186bb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00186c2:	74 07                	je     c00186cb <CPU::setupFeatures()+0x47>
c00186c4:	52                   	push   edx
c00186c5:	e8 2c ff ff ff       	call   c00185f6 <CPU::setupTSC()>
c00186ca:	58                   	pop    eax
c00186cb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00186d2:	74 07                	je     c00186db <CPU::setupFeatures()+0x57>
c00186d4:	52                   	push   edx
c00186d5:	e8 26 ff ff ff       	call   c0018600 <CPU::setupLargePages()>
c00186da:	59                   	pop    ecx
c00186db:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00186e2:	74 07                	je     c00186eb <CPU::setupFeatures()+0x67>
c00186e4:	52                   	push   edx
c00186e5:	e8 5e ff ff ff       	call   c0018648 <CPU::setupGlobalPages()>
c00186ea:	58                   	pop    eax
c00186eb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00186f2:	74 0c                	je     c0018700 <CPU::setupFeatures()+0x7c>
c00186f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00186f8:	83 c4 0c             	add    esp,0xc
c00186fb:	e9 0a ff ff ff       	jmp    c001860a <CPU::setupPAT()>
c0018700:	83 c4 0c             	add    esp,0xc
c0018703:	c3                   	ret    

c0018704 <CPU::open(int, int, void*)>:
c0018704:	57                   	push   edi
c0018705:	56                   	push   esi
c0018706:	53                   	push   ebx
c0018707:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001870b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001870f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018715:	83 ec 0c             	sub    esp,0xc
c0018718:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001871e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018724:	50                   	push   eax
c0018725:	e8 96 62 ff ff       	call   c000e9c0 <GDT::setup()>
c001872a:	83 c4 0c             	add    esp,0xc
c001872d:	6a 00                	push   0x0
c001872f:	68 ef be ad de       	push   0xdeadbeef
c0018734:	57                   	push   edi
c0018735:	e8 e6 84 ff ff       	call   c0010c20 <TSS::setup(unsigned long, unsigned long)>
c001873a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001873d:	e8 be 84 ff ff       	call   c0010c00 <TSS::flush()>
c0018742:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018748:	89 04 24             	mov    DWORD PTR [esp],eax
c001874b:	e8 cc 64 ff ff       	call   c000ec1c <IDT::setup()>
c0018750:	b8 00 04 00 00       	mov    eax,0x400
c0018755:	0f 23 f8             	mov    db7,eax
c0018758:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018762:	e8 6f 6f ff ff       	call   c000f6d6 <Phys::allocatePage()>
c0018767:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001876d:	89 30                	mov    DWORD PTR [eax],esi
c001876f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018775:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018778:	58                   	pop    eax
c0018779:	5a                   	pop    edx
c001877a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018780:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018784:	e8 7f 94 ff ff       	call   c0011c08 <VAS::setCPUSpecific(unsigned long)>
c0018789:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001878c:	e8 5f f4 ff ff       	call   c0017bf0 <CPU::detectFeatures()>
c0018791:	e8 54 c3 ff ff       	call   c0014aea <setupInterruptController()>
c0018796:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001879c:	a1 80 a4 02 c0       	mov    eax,ds:0xc002a480
c00187a1:	83 e0 10             	and    eax,0x10
c00187a4:	83 f8 01             	cmp    eax,0x1
c00187a7:	19 c0                	sbb    eax,eax
c00187a9:	83 e0 46             	and    eax,0x46
c00187ac:	83 c0 1e             	add    eax,0x1e
c00187af:	89 04 24             	mov    DWORD PTR [esp],eax
c00187b2:	e8 dd d6 ff ff       	call   c0015e94 <setupTimer(int)>
c00187b7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187c0:	e8 bf fe ff ff       	call   c0018684 <CPU::setupFeatures()>
c00187c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187c8:	e8 a7 f1 ff ff       	call   c0017974 <CPU::displayFeatures()>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	31 c0                	xor    eax,eax
c00187d2:	5b                   	pop    ebx
c00187d3:	5e                   	pop    esi
c00187d4:	5f                   	pop    edi
c00187d5:	c3                   	ret    

c00187d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187d6:	57                   	push   edi
c00187d7:	56                   	push   esi
c00187d8:	53                   	push   ebx
c00187d9:	51                   	push   ecx
c00187da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187de:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187e1:	0f 02 c0             	lar    eax,ax
c00187e4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00187e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00187eb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00187ee:	88 ca                	mov    dl,cl
c00187f0:	c0 ea 06             	shr    dl,0x6
c00187f3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00187f7:	89 ca                	mov    edx,ecx
c00187f9:	66 c1 ea 03          	shr    dx,0x3
c00187fd:	83 e2 07             	and    edx,0x7
c0018800:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018805:	88 17                	mov    BYTE PTR [edi],dl
c0018807:	0f 84 a6 01 00 00    	je     c00189b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001880d:	83 e1 07             	and    ecx,0x7
c0018810:	80 f9 04             	cmp    cl,0x4
c0018813:	0f 84 98 00 00 00    	je     c00188b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018819:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001881e:	0f 95 c0             	setne  al
c0018821:	80 f9 05             	cmp    cl,0x5
c0018824:	0f 95 c2             	setne  dl
c0018827:	08 c2                	or     dl,al
c0018829:	74 79                	je     c00188a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001882b:	84 c9                	test   cl,cl
c001882d:	75 05                	jne    c0018834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001882f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018832:	eb 3c                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018834:	80 f9 01             	cmp    cl,0x1
c0018837:	75 05                	jne    c001883e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018839:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001883c:	eb 32                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001883e:	80 f9 02             	cmp    cl,0x2
c0018841:	75 05                	jne    c0018848 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018843:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018846:	eb 28                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018848:	31 c0                	xor    eax,eax
c001884a:	80 f9 03             	cmp    cl,0x3
c001884d:	75 05                	jne    c0018854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001884f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018852:	eb 1c                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018854:	80 f9 05             	cmp    cl,0x5
c0018857:	75 05                	jne    c001885e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018859:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001885c:	eb 12                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885e:	80 f9 06             	cmp    cl,0x6
c0018861:	75 05                	jne    c0018868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018863:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018866:	eb 08                	jmp    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018868:	80 f9 07             	cmp    cl,0x7
c001886b:	75 03                	jne    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001886d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018870:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018875:	75 10                	jne    c0018887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018877:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001887b:	b9 03 00 00 00       	mov    ecx,0x3
c0018880:	01 d0                	add    eax,edx
c0018882:	e9 37 01 00 00       	jmp    c00189be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018887:	b9 02 00 00 00       	mov    ecx,0x2
c001888c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018891:	0f 85 27 01 00 00    	jne    c00189be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018897:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001889a:	b9 06 00 00 00       	mov    ecx,0x6
c001889f:	e9 1a 01 00 00       	jmp    c00189be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188a4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188a7:	b9 06 00 00 00       	mov    ecx,0x6
c00188ac:	e9 0f 01 00 00       	jmp    c00189c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188b1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188b4:	88 ca                	mov    dl,cl
c00188b6:	c0 ea 06             	shr    dl,0x6
c00188b9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188bd:	89 ca                	mov    edx,ecx
c00188bf:	66 c1 ea 03          	shr    dx,0x3
c00188c3:	83 e2 07             	and    edx,0x7
c00188c6:	80 e1 07             	and    cl,0x7
c00188c9:	75 05                	jne    c00188d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188cb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188ce:	eb 4c                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188d0:	80 f9 01             	cmp    cl,0x1
c00188d3:	75 05                	jne    c00188da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188d5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188d8:	eb 42                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188da:	80 f9 02             	cmp    cl,0x2
c00188dd:	75 05                	jne    c00188e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188df:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00188e2:	eb 38                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188e4:	80 f9 03             	cmp    cl,0x3
c00188e7:	75 05                	jne    c00188ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00188e9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00188ec:	eb 2e                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188ee:	80 f9 04             	cmp    cl,0x4
c00188f1:	75 12                	jne    c0018905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00188f3:	f6 c4 60             	test   ah,0x60
c00188f6:	75 08                	jne    c0018900 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00188f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00188fb:	8d 78 14             	lea    edi,[eax+0x14]
c00188fe:	eb 1c                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018900:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018903:	eb 17                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018905:	80 f9 05             	cmp    cl,0x5
c0018908:	75 05                	jne    c001890f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001890a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001890d:	eb 0d                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001890f:	80 f9 06             	cmp    cl,0x6
c0018912:	75 05                	jne    c0018919 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018914:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018917:	eb 03                	jmp    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018919:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001891c:	84 d2                	test   dl,dl
c001891e:	75 05                	jne    c0018925 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018920:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018923:	eb 3c                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018925:	80 fa 01             	cmp    dl,0x1
c0018928:	75 05                	jne    c001892f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001892a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001892d:	eb 32                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001892f:	80 fa 02             	cmp    dl,0x2
c0018932:	75 05                	jne    c0018939 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018934:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018937:	eb 28                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018939:	80 fa 03             	cmp    dl,0x3
c001893c:	75 05                	jne    c0018943 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001893e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018941:	eb 1e                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018943:	31 c0                	xor    eax,eax
c0018945:	80 fa 04             	cmp    dl,0x4
c0018948:	74 17                	je     c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001894a:	80 fa 05             	cmp    dl,0x5
c001894d:	75 05                	jne    c0018954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001894f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018952:	eb 0d                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018954:	80 fa 06             	cmp    dl,0x6
c0018957:	75 05                	jne    c001895e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018959:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001895c:	eb 03                	jmp    c0018961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001895e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018961:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018966:	0f 94 c2             	sete   dl
c0018969:	80 f9 05             	cmp    cl,0x5
c001896c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018970:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018975:	d3 e0                	shl    eax,cl
c0018977:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001897b:	74 0a                	je     c0018987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001897d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018980:	b9 07 00 00 00       	mov    ecx,0x7
c0018985:	eb 37                	jmp    c00189be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018987:	01 f8                	add    eax,edi
c0018989:	b9 03 00 00 00       	mov    ecx,0x3
c001898e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018993:	74 2b                	je     c00189c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018995:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001899a:	75 0d                	jne    c00189a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001899c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189a0:	01 c8                	add    eax,ecx
c00189a2:	b9 04 00 00 00       	mov    ecx,0x4
c00189a7:	eb 17                	jmp    c00189c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189a9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189ac:	b9 07 00 00 00       	mov    ecx,0x7
c00189b1:	eb 0d                	jmp    c00189c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b3:	b9 02 00 00 00       	mov    ecx,0x2
c00189b8:	b2 01                	mov    dl,0x1
c00189ba:	31 c0                	xor    eax,eax
c00189bc:	eb 02                	jmp    c00189c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189be:	31 d2                	xor    edx,edx
c00189c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189c4:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189ca:	88 11                	mov    BYTE PTR [ecx],dl
c00189cc:	5a                   	pop    edx
c00189cd:	5b                   	pop    ebx
c00189ce:	5e                   	pop    esi
c00189cf:	5f                   	pop    edi
c00189d0:	c3                   	ret    

c00189d1 <Krnl::panic(char const*)>:
c00189d1:	55                   	push   ebp
c00189d2:	89 e5                	mov    ebp,esp
c00189d4:	53                   	push   ebx
c00189d5:	50                   	push   eax
c00189d6:	a1 70 af 02 c0       	mov    eax,ds:0xc002af70
c00189db:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00189de:	85 c0                	test   eax,eax
c00189e0:	74 02                	je     c00189e4 <Krnl::panic(char const*)+0x13>
c00189e2:	ff d0                	call   eax
c00189e4:	fa                   	cli    
c00189e5:	c6 05 74 af 02 c0 01 	mov    BYTE PTR ds:0xc002af74,0x1
c00189ec:	83 ec 08             	sub    esp,0x8
c00189ef:	c6 05 20 94 02 c0 00 	mov    BYTE PTR ds:0xc0029420,0x0
c00189f6:	53                   	push   ebx
c00189f7:	68 84 80 02 c0       	push   0xc0028084
c00189fc:	e8 52 98 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0018a01:	58                   	pop    eax
c0018a02:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a0d:	e8 4f 7a ff ff       	call   c0010461 <setActiveTerminal(VgaText*)>
c0018a12:	83 c4 0c             	add    esp,0xc
c0018a15:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a1a:	6a 01                	push   0x1
c0018a1c:	6a 0f                	push   0xf
c0018a1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a24:	e8 77 74 ff ff       	call   c000fea0 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a29:	5a                   	pop    edx
c0018a2a:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a35:	e8 c8 7c ff ff       	call   c0010702 <VgaText::clearScreen()>
c0018a3a:	59                   	pop    ecx
c0018a3b:	58                   	pop    eax
c0018a3c:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a41:	68 9d 80 02 c0       	push   0xc002809d
c0018a46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a4c:	e8 2f 7e ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018a51:	58                   	pop    eax
c0018a52:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a57:	5a                   	pop    edx
c0018a58:	68 44 81 02 c0       	push   0xc0028144
c0018a5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a63:	e8 18 7e ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018a68:	59                   	pop    ecx
c0018a69:	58                   	pop    eax
c0018a6a:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a6f:	68 b9 80 02 c0       	push   0xc00280b9
c0018a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a7a:	e8 01 7e ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018a7f:	58                   	pop    eax
c0018a80:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a85:	5a                   	pop    edx
c0018a86:	53                   	push   ebx
c0018a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a8d:	e8 ee 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018a92:	59                   	pop    ecx
c0018a93:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018a98:	5b                   	pop    ebx
c0018a99:	68 d9 80 02 c0       	push   0xc00280d9
c0018a9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aa4:	e8 d7 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018aa9:	58                   	pop    eax
c0018aaa:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018aaf:	5a                   	pop    edx
c0018ab0:	68 80 81 02 c0       	push   0xc0028180
c0018ab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018abb:	e8 c0 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018ac0:	59                   	pop    ecx
c0018ac1:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018ac6:	5b                   	pop    ebx
c0018ac7:	68 b9 80 02 c0       	push   0xc00280b9
c0018acc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ad2:	e8 a9 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018ad7:	58                   	pop    eax
c0018ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018add:	5a                   	pop    edx
c0018ade:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018ae1:	83 c0 0c             	add    eax,0xc
c0018ae4:	50                   	push   eax
c0018ae5:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018aea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018af0:	e8 8b 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018af5:	59                   	pop    ecx
c0018af6:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018afb:	5b                   	pop    ebx
c0018afc:	68 d8 80 02 c0       	push   0xc00280d8
c0018b01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b07:	e8 74 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018b0c:	58                   	pop    eax
c0018b0d:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b12:	5a                   	pop    edx
c0018b13:	68 ac 81 02 c0       	push   0xc00281ac
c0018b18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b1e:	e8 5d 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018b23:	59                   	pop    ecx
c0018b24:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b29:	5b                   	pop    ebx
c0018b2a:	68 ec 81 02 c0       	push   0xc00281ec
c0018b2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b35:	e8 46 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018b3a:	58                   	pop    eax
c0018b3b:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b40:	5a                   	pop    edx
c0018b41:	68 c4 80 02 c0       	push   0xc00280c4
c0018b46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b4c:	e8 2f 7d ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018b51:	59                   	pop    ecx
c0018b52:	5b                   	pop    ebx
c0018b53:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b56:	68 dc 80 02 c0       	push   0xc00280dc
c0018b5b:	e8 f3 96 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0018b60:	58                   	pop    eax
c0018b61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b64:	5a                   	pop    edx
c0018b65:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b68:	68 e5 80 02 c0       	push   0xc00280e5
c0018b6d:	e8 e1 96 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0018b72:	59                   	pop    ecx
c0018b73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b76:	5b                   	pop    ebx
c0018b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b7c:	68 ee 80 02 c0       	push   0xc00280ee
c0018b81:	e8 cd 96 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0018b86:	58                   	pop    eax
c0018b87:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018b8c:	5a                   	pop    edx
c0018b8d:	68 30 82 02 c0       	push   0xc0028230
c0018b92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b98:	e8 e3 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018b9d:	59                   	pop    ecx
c0018b9e:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018ba3:	5b                   	pop    ebx
c0018ba4:	68 f7 80 02 c0       	push   0xc00280f7
c0018ba9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018baf:	e8 cc 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018bb4:	0f 20 c0             	mov    eax,cr0
c0018bb7:	5a                   	pop    edx
c0018bb8:	59                   	pop    ecx
c0018bb9:	50                   	push   eax
c0018bba:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bc5:	e8 dc 7c ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018bca:	5b                   	pop    ebx
c0018bcb:	58                   	pop    eax
c0018bcc:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bd1:	68 01 81 02 c0       	push   0xc0028101
c0018bd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bdc:	e8 9f 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018be1:	0f 20 d0             	mov    eax,cr2
c0018be4:	5a                   	pop    edx
c0018be5:	59                   	pop    ecx
c0018be6:	50                   	push   eax
c0018be7:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bf2:	e8 af 7c ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018bf7:	5b                   	pop    ebx
c0018bf8:	58                   	pop    eax
c0018bf9:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018bfe:	68 0b 81 02 c0       	push   0xc002810b
c0018c03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c09:	e8 72 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018c0e:	0f 20 d8             	mov    eax,cr3
c0018c11:	5a                   	pop    edx
c0018c12:	59                   	pop    ecx
c0018c13:	50                   	push   eax
c0018c14:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c1f:	e8 82 7c ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018c24:	5b                   	pop    ebx
c0018c25:	58                   	pop    eax
c0018c26:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c2b:	68 1e 81 02 c0       	push   0xc002811e
c0018c30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c36:	e8 45 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018c3b:	0f 20 e0             	mov    eax,cr4
c0018c3e:	5a                   	pop    edx
c0018c3f:	59                   	pop    ecx
c0018c40:	50                   	push   eax
c0018c41:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c4c:	e8 55 7c ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018c51:	5b                   	pop    ebx
c0018c52:	58                   	pop    eax
c0018c53:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c58:	68 28 81 02 c0       	push   0xc0028128
c0018c5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c63:	e8 18 7c ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018c68:	5a                   	pop    edx
c0018c69:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c6e:	59                   	pop    ecx
c0018c6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c78:	50                   	push   eax
c0018c79:	e8 28 7c ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018c7e:	5b                   	pop    ebx
c0018c7f:	58                   	pop    eax
c0018c80:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c85:	68 3f 81 02 c0       	push   0xc002813f
c0018c8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c90:	e8 eb 7b ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018c95:	5a                   	pop    edx
c0018c96:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018c9b:	59                   	pop    ecx
c0018c9c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018ca2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018ca5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018ca8:	50                   	push   eax
c0018ca9:	e8 f8 7b ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018cae:	5b                   	pop    ebx
c0018caf:	58                   	pop    eax
c0018cb0:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018cb5:	68 3f 81 02 c0       	push   0xc002813f
c0018cba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cc0:	e8 bb 7b ff ff       	call   c0010880 <VgaText::puts(char const*)>
c0018cc5:	a1 74 b9 02 c0       	mov    eax,ds:0xc002b974
c0018cca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018ccd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cd3:	8b 12                	mov    edx,DWORD PTR [edx]
c0018cd5:	59                   	pop    ecx
c0018cd6:	5b                   	pop    ebx
c0018cd7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cda:	50                   	push   eax
c0018cdb:	e8 c6 7b ff ff       	call   c00108a6 <VgaText::putx(unsigned int)>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	b2 fe                	mov    dl,0xfe
c0018ce5:	e4 60                	in     al,0x60
c0018ce7:	3c 1c                	cmp    al,0x1c
c0018ce9:	74 04                	je     c0018cef <Krnl::panic(char const*)+0x31e>
c0018ceb:	3c 5a                	cmp    al,0x5a
c0018ced:	75 f6                	jne    c0018ce5 <Krnl::panic(char const*)+0x314>
c0018cef:	e4 64                	in     al,0x64
c0018cf1:	a8 02                	test   al,0x2
c0018cf3:	75 fa                	jne    c0018cef <Krnl::panic(char const*)+0x31e>
c0018cf5:	88 d0                	mov    al,dl
c0018cf7:	e6 64                	out    0x64,al
c0018cf9:	fa                   	cli    
c0018cfa:	f4                   	hlt    
c0018cfb:	eb e8                	jmp    c0018ce5 <Krnl::panic(char const*)+0x314>

c0018cfd <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018cfd:	55                   	push   ebp
c0018cfe:	57                   	push   edi
c0018cff:	56                   	push   esi
c0018d00:	53                   	push   ebx
c0018d01:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d07:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d0e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d10:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d13:	80 fb 40             	cmp    bl,0x40
c0018d16:	75 1b                	jne    c0018d33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d18:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d1a:	84 d2                	test   dl,dl
c0018d1c:	0f 84 f1 00 00 00    	je     c0018e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d22:	8d 46 01             	lea    eax,[esi+0x1]
c0018d25:	80 fa 3a             	cmp    dl,0x3a
c0018d28:	74 04                	je     c0018d2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d2a:	89 c6                	mov    esi,eax
c0018d2c:	eb ea                	jmp    c0018d18 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d2e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d31:	89 c6                	mov    esi,eax
c0018d33:	50                   	push   eax
c0018d34:	6a 40                	push   0x40
c0018d36:	6a 00                	push   0x0
c0018d38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d3c:	50                   	push   eax
c0018d3d:	e8 3b 79 fe ff       	call   c000067d <memset>
c0018d42:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d49:	31 c0                	xor    eax,eax
c0018d4b:	83 c4 10             	add    esp,0x10
c0018d4e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d50:	84 c9                	test   cl,cl
c0018d52:	0f 84 bb 00 00 00    	je     c0018e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d58:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d5d:	0f 8f b0 00 00 00    	jg     c0018e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d63:	80 f9 0a             	cmp    cl,0xa
c0018d66:	0f 85 98 00 00 00    	jne    c0018e04 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d6c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d71:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018d75:	a8 df                	test   al,0xdf
c0018d77:	0f 94 c1             	sete   cl
c0018d7a:	3c 23                	cmp    al,0x23
c0018d7c:	0f 94 c2             	sete   dl
c0018d7f:	08 d1                	or     cl,dl
c0018d81:	75 4a                	jne    c0018dcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d83:	8d 50 f7             	lea    edx,[eax-0x9]
c0018d86:	80 fa 01             	cmp    dl,0x1
c0018d89:	76 42                	jbe    c0018dcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d8b:	3c 5b                	cmp    al,0x5b
c0018d8d:	75 42                	jne    c0018dd1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018d8f:	80 fb 40             	cmp    bl,0x40
c0018d92:	75 39                	jne    c0018dcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018d9b:	52                   	push   edx
c0018d9c:	e8 f9 78 fe ff       	call   c000069a <strlen>
c0018da1:	83 c4 10             	add    esp,0x10
c0018da4:	83 f8 3f             	cmp    eax,0x3f
c0018da7:	77 6a                	ja     c0018e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018da9:	50                   	push   eax
c0018daa:	50                   	push   eax
c0018dab:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018daf:	52                   	push   edx
c0018db0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018db4:	52                   	push   edx
c0018db5:	e8 62 79 fe ff       	call   c000071c <strcpy>
c0018dba:	58                   	pop    eax
c0018dbb:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018dbf:	52                   	push   edx
c0018dc0:	e8 d5 78 fe ff       	call   c000069a <strlen>
c0018dc5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018dca:	83 c4 10             	add    esp,0x10
c0018dcd:	31 d2                	xor    edx,edx
c0018dcf:	eb 3a                	jmp    c0018e0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018dd1:	80 fb 40             	cmp    bl,0x40
c0018dd4:	74 06                	je     c0018ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018dd6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018dda:	eb 20                	jmp    c0018dfc <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018ddc:	50                   	push   eax
c0018ddd:	50                   	push   eax
c0018dde:	55                   	push   ebp
c0018ddf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018de3:	50                   	push   eax
c0018de4:	e8 84 79 fe ff       	call   c000076d <strcmp>
c0018de9:	83 c4 10             	add    esp,0x10
c0018dec:	85 c0                	test   eax,eax
c0018dee:	75 dd                	jne    c0018dcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018df0:	eb e4                	jmp    c0018dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018df2:	8d 50 01             	lea    edx,[eax+0x1]
c0018df5:	80 f9 3d             	cmp    cl,0x3d
c0018df8:	74 1d                	je     c0018e17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018dfa:	89 d0                	mov    eax,edx
c0018dfc:	8a 08                	mov    cl,BYTE PTR [eax]
c0018dfe:	84 c9                	test   cl,cl
c0018e00:	75 f0                	jne    c0018df2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e02:	eb 0f                	jmp    c0018e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e04:	8d 50 01             	lea    edx,[eax+0x1]
c0018e07:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e0b:	47                   	inc    edi
c0018e0c:	89 d0                	mov    eax,edx
c0018e0e:	e9 3b ff ff ff       	jmp    c0018d4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e13:	31 c0                	xor    eax,eax
c0018e15:	eb 33                	jmp    c0018e4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e1e:	50                   	push   eax
c0018e1f:	50                   	push   eax
c0018e20:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e24:	50                   	push   eax
c0018e25:	56                   	push   esi
c0018e26:	e8 42 79 fe ff       	call   c000076d <strcmp>
c0018e2b:	83 c4 10             	add    esp,0x10
c0018e2e:	85 c0                	test   eax,eax
c0018e30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e34:	75 97                	jne    c0018dcd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e36:	51                   	push   ecx
c0018e37:	51                   	push   ecx
c0018e38:	52                   	push   edx
c0018e39:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e40:	e8 d7 78 fe ff       	call   c000071c <strcpy>
c0018e45:	83 c4 10             	add    esp,0x10
c0018e48:	b0 01                	mov    al,0x1
c0018e4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e50:	5b                   	pop    ebx
c0018e51:	5e                   	pop    esi
c0018e52:	5f                   	pop    edi
c0018e53:	5d                   	pop    ebp
c0018e54:	c3                   	ret    

c0018e55 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e55:	57                   	push   edi
c0018e56:	56                   	push   esi
c0018e57:	53                   	push   ebx
c0018e58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e5e:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e65:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e6c:	53                   	push   ebx
c0018e6d:	e8 28 78 fe ff       	call   c000069a <strlen>
c0018e72:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e75:	89 c7                	mov    edi,eax
c0018e77:	e8 1e 78 fe ff       	call   c000069a <strlen>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018e83:	31 ff                	xor    edi,edi
c0018e85:	3d ff 00 00 00       	cmp    eax,0xff
c0018e8a:	0f 87 18 01 00 00    	ja     c0018fa8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018e90:	51                   	push   ecx
c0018e91:	51                   	push   ecx
c0018e92:	56                   	push   esi
c0018e93:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018e97:	56                   	push   esi
c0018e98:	e8 7f 78 fe ff       	call   c000071c <strcpy>
c0018e9d:	58                   	pop    eax
c0018e9e:	5a                   	pop    edx
c0018e9f:	68 28 86 02 c0       	push   0xc0028628
c0018ea4:	56                   	push   esi
c0018ea5:	e8 29 79 fe ff       	call   c00007d3 <strcat>
c0018eaa:	59                   	pop    ecx
c0018eab:	58                   	pop    eax
c0018eac:	53                   	push   ebx
c0018ead:	56                   	push   esi
c0018eae:	e8 20 79 fe ff       	call   c00007d3 <strcat>
c0018eb3:	58                   	pop    eax
c0018eb4:	5a                   	pop    edx
c0018eb5:	68 56 82 02 c0       	push   0xc0028256
c0018eba:	56                   	push   esi
c0018ebb:	e8 13 79 fe ff       	call   c00007d3 <strcat>
c0018ec0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ec7:	e8 98 92 ff ff       	call   c0012164 <operator new(unsigned long)>
c0018ecc:	83 c4 0c             	add    esp,0xc
c0018ecf:	89 c3                	mov    ebx,eax
c0018ed1:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c0018ed7:	56                   	push   esi
c0018ed8:	50                   	push   eax
c0018ed9:	e8 a4 98 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c0018ede:	59                   	pop    ecx
c0018edf:	5e                   	pop    esi
c0018ee0:	6a 01                	push   0x1
c0018ee2:	53                   	push   ebx
c0018ee3:	e8 fe 98 ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	85 c0                	test   eax,eax
c0018eed:	74 08                	je     c0018ef7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018eef:	83 ec 0c             	sub    esp,0xc
c0018ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018ef4:	53                   	push   ebx
c0018ef5:	eb 2e                	jmp    c0018f25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018ef7:	52                   	push   edx
c0018ef8:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018efc:	50                   	push   eax
c0018efd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f01:	50                   	push   eax
c0018f02:	53                   	push   ebx
c0018f03:	e8 8a 9b ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c0018f08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	89 c1                	mov    ecx,eax
c0018f11:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f15:	75 13                	jne    c0018f2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f17:	83 ec 0c             	sub    esp,0xc
c0018f1a:	53                   	push   ebx
c0018f1b:	e8 24 99 ff ff       	call   c0012844 <File::close()>
c0018f20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f28:	eb 7b                	jmp    c0018fa5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f2a:	83 ec 0c             	sub    esp,0xc
c0018f2d:	50                   	push   eax
c0018f2e:	e8 f9 61 ff ff       	call   c000f12c <malloc>
c0018f33:	89 c6                	mov    esi,eax
c0018f35:	58                   	pop    eax
c0018f36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f38:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f3c:	52                   	push   edx
c0018f3d:	56                   	push   esi
c0018f3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f46:	53                   	push   ebx
c0018f47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f4a:	83 c4 20             	add    esp,0x20
c0018f4d:	85 c0                	test   eax,eax
c0018f4f:	75 0a                	jne    c0018f5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f55:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f59:	74 18                	je     c0018f73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f5b:	83 ec 0c             	sub    esp,0xc
c0018f5e:	31 ff                	xor    edi,edi
c0018f60:	53                   	push   ebx
c0018f61:	e8 de 98 ff ff       	call   c0012844 <File::close()>
c0018f66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f6b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f6e:	83 c4 10             	add    esp,0x10
c0018f71:	eb 35                	jmp    c0018fa8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	53                   	push   ebx
c0018f77:	e8 c8 98 ff ff       	call   c0012844 <File::close()>
c0018f7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f84:	83 c4 0c             	add    esp,0xc
c0018f87:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018f8e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018f95:	56                   	push   esi
c0018f96:	e8 62 fd ff ff       	call   c0018cfd <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018f9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f9e:	89 c7                	mov    edi,eax
c0018fa0:	e8 97 61 ff ff       	call   c000f13c <free>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	81 c4 10 01 00 00    	add    esp,0x110
c0018fae:	89 f8                	mov    eax,edi
c0018fb0:	5b                   	pop    ebx
c0018fb1:	5e                   	pop    esi
c0018fb2:	5f                   	pop    edi
c0018fb3:	c3                   	ret    

c0018fb4 <Reg::getLine(char*, char*, char*)>:
c0018fb4:	57                   	push   edi
c0018fb5:	56                   	push   esi
c0018fb6:	53                   	push   ebx
c0018fb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018fc3:	57                   	push   edi
c0018fc4:	56                   	push   esi
c0018fc5:	53                   	push   ebx
c0018fc6:	68 5b 82 02 c0       	push   0xc002825b
c0018fcb:	e8 85 fe ff ff       	call   c0018e55 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018fd0:	83 c4 10             	add    esp,0x10
c0018fd3:	84 c0                	test   al,al
c0018fd5:	75 10                	jne    c0018fe7 <Reg::getLine(char*, char*, char*)+0x33>
c0018fd7:	57                   	push   edi
c0018fd8:	56                   	push   esi
c0018fd9:	53                   	push   ebx
c0018fda:	68 80 82 02 c0       	push   0xc0028280
c0018fdf:	e8 71 fe ff ff       	call   c0018e55 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	5b                   	pop    ebx
c0018fe8:	5e                   	pop    esi
c0018fe9:	5f                   	pop    edi
c0018fea:	c3                   	ret    

c0018feb <Reg::readInt(char*, char*, int*)>:
c0018feb:	55                   	push   ebp
c0018fec:	57                   	push   edi
c0018fed:	56                   	push   esi
c0018fee:	53                   	push   ebx
c0018fef:	81 ec f0 00 00 00    	sub    esp,0xf0
c0018ff5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0018ff9:	57                   	push   edi
c0018ffa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019001:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019008:	e8 a7 ff ff ff       	call   c0018fb4 <Reg::getLine(char*, char*, char*)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	84 c0                	test   al,al
c0019012:	0f 84 b3 00 00 00    	je     c00190cb <Reg::readInt(char*, char*, int*)+0xe0>
c0019018:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001901c:	80 fa 2b             	cmp    dl,0x2b
c001901f:	74 0c                	je     c001902d <Reg::readInt(char*, char*, int*)+0x42>
c0019021:	80 fa 2d             	cmp    dl,0x2d
c0019024:	75 0e                	jne    c0019034 <Reg::readInt(char*, char*, int*)+0x49>
c0019026:	ba 01 00 00 00       	mov    edx,0x1
c001902b:	eb 0b                	jmp    c0019038 <Reg::readInt(char*, char*, int*)+0x4d>
c001902d:	ba 01 00 00 00       	mov    edx,0x1
c0019032:	eb 02                	jmp    c0019036 <Reg::readInt(char*, char*, int*)+0x4b>
c0019034:	31 d2                	xor    edx,edx
c0019036:	31 c0                	xor    eax,eax
c0019038:	be 0a 00 00 00       	mov    esi,0xa
c001903d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019042:	75 20                	jne    c0019064 <Reg::readInt(char*, char*, int*)+0x79>
c0019044:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019048:	80 f9 78             	cmp    cl,0x78
c001904b:	75 0a                	jne    c0019057 <Reg::readInt(char*, char*, int*)+0x6c>
c001904d:	83 c2 02             	add    edx,0x2
c0019050:	be 10 00 00 00       	mov    esi,0x10
c0019055:	eb 0d                	jmp    c0019064 <Reg::readInt(char*, char*, int*)+0x79>
c0019057:	80 f9 62             	cmp    cl,0x62
c001905a:	75 08                	jne    c0019064 <Reg::readInt(char*, char*, int*)+0x79>
c001905c:	83 c2 02             	add    edx,0x2
c001905f:	be 02 00 00 00       	mov    esi,0x2
c0019064:	01 d7                	add    edi,edx
c0019066:	31 d2                	xor    edx,edx
c0019068:	8a 1f                	mov    bl,BYTE PTR [edi]
c001906a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001906e:	80 fb 0d             	cmp    bl,0xd
c0019071:	0f 94 c3             	sete   bl
c0019074:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019079:	0f 94 c1             	sete   cl
c001907c:	08 cb                	or     bl,cl
c001907e:	75 3a                	jne    c00190ba <Reg::readInt(char*, char*, int*)+0xcf>
c0019080:	0f af d6             	imul   edx,esi
c0019083:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019088:	83 fe 10             	cmp    esi,0x10
c001908b:	75 26                	jne    c00190b3 <Reg::readInt(char*, char*, int*)+0xc8>
c001908d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019091:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019094:	89 e9                	mov    ecx,ebp
c0019096:	80 f9 05             	cmp    cl,0x5
c0019099:	77 06                	ja     c00190a1 <Reg::readInt(char*, char*, int*)+0xb6>
c001909b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001909f:	eb 16                	jmp    c00190b7 <Reg::readInt(char*, char*, int*)+0xcc>
c00190a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190a5:	83 e9 61             	sub    ecx,0x61
c00190a8:	80 f9 05             	cmp    cl,0x5
c00190ab:	77 06                	ja     c00190b3 <Reg::readInt(char*, char*, int*)+0xc8>
c00190ad:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190b1:	eb 04                	jmp    c00190b7 <Reg::readInt(char*, char*, int*)+0xcc>
c00190b3:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190b7:	47                   	inc    edi
c00190b8:	eb ae                	jmp    c0019068 <Reg::readInt(char*, char*, int*)+0x7d>
c00190ba:	84 c0                	test   al,al
c00190bc:	74 02                	je     c00190c0 <Reg::readInt(char*, char*, int*)+0xd5>
c00190be:	f7 da                	neg    edx
c00190c0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190c7:	89 10                	mov    DWORD PTR [eax],edx
c00190c9:	88 d8                	mov    al,bl
c00190cb:	81 c4 ec 00 00 00    	add    esp,0xec
c00190d1:	5b                   	pop    ebx
c00190d2:	5e                   	pop    esi
c00190d3:	5f                   	pop    edi
c00190d4:	5d                   	pop    ebp
c00190d5:	c3                   	ret    

c00190d6 <Reg::readString(char*, char*, char*, int)>:
c00190d6:	57                   	push   edi
c00190d7:	56                   	push   esi
c00190d8:	53                   	push   ebx
c00190d9:	81 ec d4 00 00 00    	sub    esp,0xd4
c00190df:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00190e6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00190ea:	57                   	push   edi
c00190eb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00190f2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00190f9:	e8 b6 fe ff ff       	call   c0018fb4 <Reg::getLine(char*, char*, char*)>
c00190fe:	83 c4 10             	add    esp,0x10
c0019101:	89 c6                	mov    esi,eax
c0019103:	84 c0                	test   al,al
c0019105:	74 44                	je     c001914b <Reg::readString(char*, char*, char*, int)+0x75>
c0019107:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001910e:	31 c0                	xor    eax,eax
c0019110:	4a                   	dec    edx
c0019111:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019114:	84 c9                	test   cl,cl
c0019116:	74 0f                	je     c0019127 <Reg::readString(char*, char*, char*, int)+0x51>
c0019118:	39 c2                	cmp    edx,eax
c001911a:	7e 0b                	jle    c0019127 <Reg::readString(char*, char*, char*, int)+0x51>
c001911c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001911f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019124:	40                   	inc    eax
c0019125:	eb ea                	jmp    c0019111 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019127:	83 ec 0c             	sub    esp,0xc
c001912a:	53                   	push   ebx
c001912b:	e8 6a 75 fe ff       	call   c000069a <strlen>
c0019130:	83 c4 10             	add    esp,0x10
c0019133:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019138:	75 11                	jne    c001914b <Reg::readString(char*, char*, char*, int)+0x75>
c001913a:	83 ec 0c             	sub    esp,0xc
c001913d:	53                   	push   ebx
c001913e:	e8 57 75 fe ff       	call   c000069a <strlen>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001914b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019151:	89 f0                	mov    eax,esi
c0019153:	5b                   	pop    ebx
c0019154:	5e                   	pop    esi
c0019155:	5f                   	pop    edi
c0019156:	c3                   	ret    

c0019157 <Reg::readBool(char*, char*, bool*)>:
c0019157:	83 ec 20             	sub    esp,0x20
c001915a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001915e:	50                   	push   eax
c001915f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019163:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019167:	e8 7f fe ff ff       	call   c0018feb <Reg::readInt(char*, char*, int*)>
c001916c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019171:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019175:	0f 95 02             	setne  BYTE PTR [edx]
c0019178:	83 c4 2c             	add    esp,0x2c
c001917b:	c3                   	ret    

c001917c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001917c:	53                   	push   ebx
c001917d:	83 ec 1c             	sub    esp,0x1c
c0019180:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019184:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019188:	50                   	push   eax
c0019189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001918d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019191:	e8 c1 ff ff ff       	call   c0019157 <Reg::readBool(char*, char*, bool*)>
c0019196:	83 c4 10             	add    esp,0x10
c0019199:	84 c0                	test   al,al
c001919b:	74 04                	je     c00191a1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001919d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191a1:	88 d8                	mov    al,bl
c00191a3:	83 c4 18             	add    esp,0x18
c00191a6:	5b                   	pop    ebx
c00191a7:	c3                   	ret    

c00191a8 <Reg::readIntWithDefault(char*, char*, int)>:
c00191a8:	53                   	push   ebx
c00191a9:	83 ec 1c             	sub    esp,0x1c
c00191ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191b4:	50                   	push   eax
c00191b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191bd:	e8 29 fe ff ff       	call   c0018feb <Reg::readInt(char*, char*, int*)>
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	84 c0                	test   al,al
c00191c7:	74 04                	je     c00191cd <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191cd:	89 d8                	mov    eax,ebx
c00191cf:	83 c4 18             	add    esp,0x18
c00191d2:	5b                   	pop    ebx
c00191d3:	c3                   	ret    

c00191d4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00191d4:	56                   	push   esi
c00191d5:	53                   	push   ebx
c00191d6:	51                   	push   ecx
c00191d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00191db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00191df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191e3:	56                   	push   esi
c00191e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191ec:	e8 e5 fe ff ff       	call   c00190d6 <Reg::readString(char*, char*, char*, int)>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	84 c0                	test   al,al
c00191f6:	74 02                	je     c00191fa <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00191f8:	89 f3                	mov    ebx,esi
c00191fa:	89 d8                	mov    eax,ebx
c00191fc:	5a                   	pop    edx
c00191fd:	5b                   	pop    ebx
c00191fe:	5e                   	pop    esi
c00191ff:	c3                   	ret    

c0019200 <Sys::exit(regs*)>:
c0019200:	83 ec 18             	sub    esp,0x18
c0019203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019207:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001920a:	e8 29 31 00 00       	call   c001c338 <terminateTask(int)>
c001920f:	83 c8 ff             	or     eax,0xffffffff
c0019212:	83 c4 1c             	add    esp,0x1c
c0019215:	89 c2                	mov    edx,eax
c0019217:	c3                   	ret    

c0019218 <Sys::loadDLL(regs*)>:
c0019218:	56                   	push   esi
c0019219:	53                   	push   ebx
c001921a:	31 d2                	xor    edx,edx
c001921c:	51                   	push   ecx
c001921d:	b8 01 00 00 00       	mov    eax,0x1
c0019222:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019226:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001922a:	74 7d                	je     c00192a9 <Sys::loadDLL(regs*)+0x91>
c001922c:	83 ec 0c             	sub    esp,0xc
c001922f:	68 14 01 00 00       	push   0x114
c0019234:	e8 2b 8f ff ff       	call   c0012164 <operator new(unsigned long)>
c0019239:	83 c4 0c             	add    esp,0xc
c001923c:	89 c3                	mov    ebx,eax
c001923e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019243:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019246:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019249:	53                   	push   ebx
c001924a:	e8 33 95 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001924f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019252:	e8 fd 97 ff ff       	call   c0012a54 <File::exists()>
c0019257:	83 c4 10             	add    esp,0x10
c001925a:	84 c0                	test   al,al
c001925c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001925e:	75 11                	jne    c0019271 <Sys::loadDLL(regs*)+0x59>
c0019260:	83 ec 0c             	sub    esp,0xc
c0019263:	53                   	push   ebx
c0019264:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019267:	83 c4 10             	add    esp,0x10
c001926a:	b8 03 00 00 00       	mov    eax,0x3
c001926f:	eb 36                	jmp    c00192a7 <Sys::loadDLL(regs*)+0x8f>
c0019271:	83 ec 0c             	sub    esp,0xc
c0019274:	53                   	push   ebx
c0019275:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019278:	58                   	pop    eax
c0019279:	5a                   	pop    edx
c001927a:	6a 00                	push   0x0
c001927c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001927f:	e8 c4 20 00 00       	call   c001b348 <Thr::loadDLL(char const*, bool)>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	89 c1                	mov    ecx,eax
c0019289:	31 d2                	xor    edx,edx
c001928b:	b8 04 00 00 00       	mov    eax,0x4
c0019290:	85 c9                	test   ecx,ecx
c0019292:	74 15                	je     c00192a9 <Sys::loadDLL(regs*)+0x91>
c0019294:	53                   	push   ebx
c0019295:	53                   	push   ebx
c0019296:	ff 35 68 a4 02 c0    	push   DWORD PTR ds:0xc002a468
c001929c:	51                   	push   ecx
c001929d:	e8 6c 22 00 00       	call   c001b50e <Thr::executeDLL(unsigned long, void*)>
c00192a2:	83 c4 10             	add    esp,0x10
c00192a5:	31 c0                	xor    eax,eax
c00192a7:	31 d2                	xor    edx,edx
c00192a9:	59                   	pop    ecx
c00192aa:	5b                   	pop    ebx
c00192ab:	5e                   	pop    esi
c00192ac:	c3                   	ret    

c00192ad <Sys::read(regs*)>:
c00192ad:	57                   	push   edi
c00192ae:	56                   	push   esi
c00192af:	53                   	push   ebx
c00192b0:	83 ec 10             	sub    esp,0x10
c00192b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192ba:	83 f8 02             	cmp    eax,0x2
c00192bd:	77 10                	ja     c00192cf <Sys::read(regs*)+0x22>
c00192bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192c7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192cd:	eb 0e                	jmp    c00192dd <Sys::read(regs*)+0x30>
c00192cf:	83 ec 0c             	sub    esp,0xc
c00192d2:	50                   	push   eax
c00192d3:	e8 41 7e ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	89 c1                	mov    ecx,eax
c00192dd:	83 c8 ff             	or     eax,0xffffffff
c00192e0:	85 c9                	test   ecx,ecx
c00192e2:	89 c2                	mov    edx,eax
c00192e4:	74 28                	je     c001930e <Sys::read(regs*)+0x61>
c00192e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00192ee:	31 ff                	xor    edi,edi
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00192f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00192f9:	52                   	push   edx
c00192fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00192fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019300:	57                   	push   edi
c0019301:	56                   	push   esi
c0019302:	51                   	push   ecx
c0019303:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001930a:	83 c4 20             	add    esp,0x20
c001930d:	99                   	cdq    
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	5b                   	pop    ebx
c0019312:	5e                   	pop    esi
c0019313:	5f                   	pop    edi
c0019314:	c3                   	ret    

c0019315 <Sys::sbrk(regs*)>:
c0019315:	56                   	push   esi
c0019316:	53                   	push   ebx
c0019317:	50                   	push   eax
c0019318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001931d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019321:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019324:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019327:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001932d:	85 db                	test   ebx,ebx
c001932f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019332:	74 02                	je     c0019336 <Sys::sbrk(regs*)+0x21>
c0019334:	79 06                	jns    c001933c <Sys::sbrk(regs*)+0x27>
c0019336:	89 f0                	mov    eax,esi
c0019338:	31 d2                	xor    edx,edx
c001933a:	eb 2a                	jmp    c0019366 <Sys::sbrk(regs*)+0x51>
c001933c:	83 c8 ff             	or     eax,0xffffffff
c001933f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019345:	89 c2                	mov    edx,eax
c0019347:	77 1d                	ja     c0019366 <Sys::sbrk(regs*)+0x51>
c0019349:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001934f:	50                   	push   eax
c0019350:	c1 ea 0c             	shr    edx,0xc
c0019353:	68 07 04 00 00       	push   0x407
c0019358:	52                   	push   edx
c0019359:	51                   	push   ecx
c001935a:	e8 d1 86 ff ff       	call   c0011a30 <VAS::allocatePages(int, int)>
c001935f:	89 f0                	mov    eax,esi
c0019361:	31 d2                	xor    edx,edx
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	59                   	pop    ecx
c0019367:	5b                   	pop    ebx
c0019368:	5e                   	pop    esi
c0019369:	c3                   	ret    

c001936a <Sys::write(regs*)>:
c001936a:	57                   	push   edi
c001936b:	56                   	push   esi
c001936c:	53                   	push   ebx
c001936d:	83 ec 10             	sub    esp,0x10
c0019370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019374:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019377:	83 f8 02             	cmp    eax,0x2
c001937a:	77 10                	ja     c001938c <Sys::write(regs*)+0x22>
c001937c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019381:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019384:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001938a:	eb 0e                	jmp    c001939a <Sys::write(regs*)+0x30>
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	50                   	push   eax
c0019390:	e8 84 7d ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	89 c1                	mov    ecx,eax
c001939a:	83 c8 ff             	or     eax,0xffffffff
c001939d:	85 c9                	test   ecx,ecx
c001939f:	89 c2                	mov    edx,eax
c00193a1:	74 28                	je     c00193cb <Sys::write(regs*)+0x61>
c00193a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193ab:	31 ff                	xor    edi,edi
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193b2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193b6:	52                   	push   edx
c00193b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193ba:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193bd:	57                   	push   edi
c00193be:	56                   	push   esi
c00193bf:	51                   	push   ecx
c00193c0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193c7:	83 c4 20             	add    esp,0x20
c00193ca:	99                   	cdq    
c00193cb:	83 c4 10             	add    esp,0x10
c00193ce:	5b                   	pop    ebx
c00193cf:	5e                   	pop    esi
c00193d0:	5f                   	pop    edi
c00193d1:	c3                   	ret    

c00193d2 <Sys::yield(regs*)>:
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	e8 40 25 00 00       	call   c001b91a <lockScheduler()>
c00193da:	e8 77 28 00 00       	call   c001bc56 <schedule()>
c00193df:	e8 38 25 00 00       	call   c001b91c <unlockScheduler()>
c00193e4:	31 c0                	xor    eax,eax
c00193e6:	31 d2                	xor    edx,edx
c00193e8:	83 c4 0c             	add    esp,0xc
c00193eb:	c3                   	ret    

c00193ec <sysCallGetPID(regs*)>:
c00193ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193f6:	99                   	cdq    
c00193f7:	c3                   	ret    

c00193f8 <sysCallSeekDir(regs*)>:
c00193f8:	31 c0                	xor    eax,eax
c00193fa:	31 d2                	xor    edx,edx
c00193fc:	c3                   	ret    

c00193fd <sysCallTellDir(regs*)>:
c00193fd:	31 c0                	xor    eax,eax
c00193ff:	31 d2                	xor    edx,edx
c0019401:	c3                   	ret    

c0019402 <sysCallVerify(regs*)>:
c0019402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019406:	31 d2                	xor    edx,edx
c0019408:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001940b:	c3                   	ret    

c001940c <sysCallFork(regs*)>:
c001940c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019411:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019416:	c3                   	ret    

c0019417 <sysCallExecve(regs*)>:
c0019417:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001941c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019421:	c3                   	ret    

c0019422 <sysCallGetArgc(regs*)>:
c0019422:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019427:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001942a:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019430:	99                   	cdq    
c0019431:	c3                   	ret    

c0019432 <sysFormatDisk(regs*)>:
c0019432:	56                   	push   esi
c0019433:	53                   	push   ebx
c0019434:	53                   	push   ebx
c0019435:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019439:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c001943f:	eb 25                	jmp    c0019466 <sysFormatDisk(regs*)+0x34>
c0019441:	83 ec 0c             	sub    esp,0xc
c0019444:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019447:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019449:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001944c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001944f:	50                   	push   eax
c0019450:	ff 34 85 60 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd55a0]
c0019457:	53                   	push   ebx
c0019458:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001945b:	83 c4 20             	add    esp,0x20
c001945e:	83 f8 08             	cmp    eax,0x8
c0019461:	75 12                	jne    c0019475 <sysFormatDisk(regs*)+0x43>
c0019463:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019466:	85 db                	test   ebx,ebx
c0019468:	75 d7                	jne    c0019441 <sysFormatDisk(regs*)+0xf>
c001946a:	59                   	pop    ecx
c001946b:	b8 03 00 00 00       	mov    eax,0x3
c0019470:	31 d2                	xor    edx,edx
c0019472:	5b                   	pop    ebx
c0019473:	5e                   	pop    esi
c0019474:	c3                   	ret    
c0019475:	85 c0                	test   eax,eax
c0019477:	74 1b                	je     c0019494 <sysFormatDisk(regs*)+0x62>
c0019479:	83 f8 09             	cmp    eax,0x9
c001947c:	74 0b                	je     c0019489 <sysFormatDisk(regs*)+0x57>
c001947e:	59                   	pop    ecx
c001947f:	b8 02 00 00 00       	mov    eax,0x2
c0019484:	31 d2                	xor    edx,edx
c0019486:	5b                   	pop    ebx
c0019487:	5e                   	pop    esi
c0019488:	c3                   	ret    
c0019489:	59                   	pop    ecx
c001948a:	b8 01 00 00 00       	mov    eax,0x1
c001948f:	31 d2                	xor    edx,edx
c0019491:	5b                   	pop    ebx
c0019492:	5e                   	pop    esi
c0019493:	c3                   	ret    
c0019494:	59                   	pop    ecx
c0019495:	31 c0                	xor    eax,eax
c0019497:	31 d2                	xor    edx,edx
c0019499:	5b                   	pop    ebx
c001949a:	5e                   	pop    esi
c001949b:	c3                   	ret    

c001949c <sysSetDiskVolumeLabel(regs*)>:
c001949c:	56                   	push   esi
c001949d:	53                   	push   ebx
c001949e:	53                   	push   ebx
c001949f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194a3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194a6:	83 f8 19             	cmp    eax,0x19
c00194a9:	77 29                	ja     c00194d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194ab:	8b 0c 85 60 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd55a0]
c00194b2:	85 c9                	test   ecx,ecx
c00194b4:	74 1e                	je     c00194d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194b9:	85 d2                	test   edx,edx
c00194bb:	74 17                	je     c00194d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c00194bd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194c3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194c5:	52                   	push   edx
c00194c6:	50                   	push   eax
c00194c7:	51                   	push   ecx
c00194c8:	53                   	push   ebx
c00194c9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194cc:	83 c4 10             	add    esp,0x10
c00194cf:	99                   	cdq    
c00194d0:	59                   	pop    ecx
c00194d1:	5b                   	pop    ebx
c00194d2:	5e                   	pop    esi
c00194d3:	c3                   	ret    
c00194d4:	59                   	pop    ecx
c00194d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00194da:	ba ff ff ff ff       	mov    edx,0xffffffff
c00194df:	5b                   	pop    ebx
c00194e0:	5e                   	pop    esi
c00194e1:	c3                   	ret    

c00194e2 <sysGetDiskVolumeLabel(regs*)>:
c00194e2:	57                   	push   edi
c00194e3:	56                   	push   esi
c00194e4:	53                   	push   ebx
c00194e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194e9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194ec:	83 fa 19             	cmp    edx,0x19
c00194ef:	77 34                	ja     c0019525 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194f1:	8b 0c 95 60 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd55a0]
c00194f8:	85 c9                	test   ecx,ecx
c00194fa:	74 29                	je     c0019525 <sysGetDiskVolumeLabel(regs*)+0x43>
c00194fc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00194ff:	85 db                	test   ebx,ebx
c0019501:	74 22                	je     c0019525 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019503:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019506:	85 c0                	test   eax,eax
c0019508:	74 1b                	je     c0019525 <sysGetDiskVolumeLabel(regs*)+0x43>
c001950a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019515:	50                   	push   eax
c0019516:	53                   	push   ebx
c0019517:	52                   	push   edx
c0019518:	51                   	push   ecx
c0019519:	56                   	push   esi
c001951a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001951d:	83 c4 20             	add    esp,0x20
c0019520:	99                   	cdq    
c0019521:	5b                   	pop    ebx
c0019522:	5e                   	pop    esi
c0019523:	5f                   	pop    edi
c0019524:	c3                   	ret    
c0019525:	5b                   	pop    ebx
c0019526:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001952b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019530:	5e                   	pop    esi
c0019531:	5f                   	pop    edi
c0019532:	c3                   	ret    

c0019533 <sysShutdown(regs*)>:
c0019533:	83 ec 0c             	sub    esp,0xc
c0019536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001953a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001953d:	85 c0                	test   eax,eax
c001953f:	74 18                	je     c0019559 <sysShutdown(regs*)+0x26>
c0019541:	83 f8 01             	cmp    eax,0x1
c0019544:	74 38                	je     c001957e <sysShutdown(regs*)+0x4b>
c0019546:	83 f8 02             	cmp    eax,0x2
c0019549:	74 24                	je     c001956f <sysShutdown(regs*)+0x3c>
c001954b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019550:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019555:	83 c4 0c             	add    esp,0xc
c0019558:	c3                   	ret    
c0019559:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001955e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019560:	6a 00                	push   0x0
c0019562:	6a 00                	push   0x0
c0019564:	6a 00                	push   0x0
c0019566:	50                   	push   eax
c0019567:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001956a:	83 c4 10             	add    esp,0x10
c001956d:	eb dc                	jmp    c001954b <sysShutdown(regs*)+0x18>
c001956f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0019574:	8b 10                	mov    edx,DWORD PTR [eax]
c0019576:	6a 00                	push   0x0
c0019578:	6a 00                	push   0x0
c001957a:	6a 01                	push   0x1
c001957c:	eb e8                	jmp    c0019566 <sysShutdown(regs*)+0x33>
c001957e:	a1 e0 aa 02 c0       	mov    eax,ds:0xc002aae0
c0019583:	85 c0                	test   eax,eax
c0019585:	74 02                	je     c0019589 <sysShutdown(regs*)+0x56>
c0019587:	ff d0                	call   eax
c0019589:	31 c0                	xor    eax,eax
c001958b:	31 d2                	xor    edx,edx
c001958d:	83 c4 0c             	add    esp,0xc
c0019590:	c3                   	ret    

c0019591 <sysCallGetCwd(regs*)>:
c0019591:	83 ec 10             	sub    esp,0x10
c0019594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019598:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001959b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001959e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195a6:	e8 48 95 ff ff       	call   c0012af3 <getcwd(Process*, char*, int)>
c00195ab:	83 c4 1c             	add    esp,0x1c
c00195ae:	99                   	cdq    
c00195af:	c3                   	ret    

c00195b0 <sysCallSetCwd(regs*)>:
c00195b0:	83 ec 14             	sub    esp,0x14
c00195b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195bf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195c2:	e8 56 95 ff ff       	call   c0012b1d <setcwd(Process*, char*)>
c00195c7:	83 c4 1c             	add    esp,0x1c
c00195ca:	99                   	cdq    
c00195cb:	c3                   	ret    

c00195cc <sysCallRealpath(regs*)>:
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195d3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00195d6:	85 d2                	test   edx,edx
c00195d8:	74 07                	je     c00195e1 <sysCallRealpath(regs*)+0x15>
c00195da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00195dd:	85 c0                	test   eax,eax
c00195df:	75 0b                	jne    c00195ec <sysCallRealpath(regs*)+0x20>
c00195e1:	b8 01 00 00 00       	mov    eax,0x1
c00195e6:	31 d2                	xor    edx,edx
c00195e8:	83 c4 0c             	add    esp,0xc
c00195eb:	c3                   	ret    
c00195ec:	51                   	push   ecx
c00195ed:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00195f3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00195f6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00195fc:	51                   	push   ecx
c00195fd:	52                   	push   edx
c00195fe:	50                   	push   eax
c00195ff:	e8 d4 8f ff ff       	call   c00125d8 <standardiseFiles(char*, char const*, char const*)>
c0019604:	83 c4 10             	add    esp,0x10
c0019607:	31 c0                	xor    eax,eax
c0019609:	31 d2                	xor    edx,edx
c001960b:	83 c4 0c             	add    esp,0xc
c001960e:	c3                   	ret    

c001960f <sysCallReadDir(regs*)>:
c001960f:	53                   	push   ebx
c0019610:	83 ec 18             	sub    esp,0x18
c0019613:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019617:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001961a:	83 f8 02             	cmp    eax,0x2
c001961d:	76 53                	jbe    c0019672 <sysCallReadDir(regs*)+0x63>
c001961f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019622:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019628:	77 4f                	ja     c0019679 <sysCallReadDir(regs*)+0x6a>
c001962a:	83 ec 0c             	sub    esp,0xc
c001962d:	50                   	push   eax
c001962e:	e8 e6 7a ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019633:	83 c4 10             	add    esp,0x10
c0019636:	85 c0                	test   eax,eax
c0019638:	74 50                	je     c001968a <sysCallReadDir(regs*)+0x7b>
c001963a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019642:	83 ec 0c             	sub    esp,0xc
c0019645:	8b 10                	mov    edx,DWORD PTR [eax]
c0019647:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001964b:	51                   	push   ecx
c001964c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001964f:	6a 00                	push   0x0
c0019651:	68 10 01 00 00       	push   0x110
c0019656:	50                   	push   eax
c0019657:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001965a:	83 c4 20             	add    esp,0x20
c001965d:	85 c0                	test   eax,eax
c001965f:	74 38                	je     c0019699 <sysCallReadDir(regs*)+0x8a>
c0019661:	83 f8 07             	cmp    eax,0x7
c0019664:	74 0c                	je     c0019672 <sysCallReadDir(regs*)+0x63>
c0019666:	b8 02 00 00 00       	mov    eax,0x2
c001966b:	31 d2                	xor    edx,edx
c001966d:	83 c4 18             	add    esp,0x18
c0019670:	5b                   	pop    ebx
c0019671:	c3                   	ret    
c0019672:	b8 01 00 00 00       	mov    eax,0x1
c0019677:	eb f2                	jmp    c001966b <sysCallReadDir(regs*)+0x5c>
c0019679:	83 ec 08             	sub    esp,0x8
c001967c:	52                   	push   edx
c001967d:	68 9c 82 02 c0       	push   0xc002829c
c0019682:	e8 cc 8b ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001968f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019694:	83 c4 18             	add    esp,0x18
c0019697:	5b                   	pop    ebx
c0019698:	c3                   	ret    
c0019699:	31 c0                	xor    eax,eax
c001969b:	eb ce                	jmp    c001966b <sysCallReadDir(regs*)+0x5c>

c001969d <sysCallIsATTY(regs*)>:
c001969d:	83 ec 0c             	sub    esp,0xc
c00196a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196a7:	83 f8 02             	cmp    eax,0x2
c00196aa:	76 07                	jbe    c00196b3 <sysCallIsATTY(regs*)+0x16>
c00196ac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196b1:	75 26                	jne    c00196d9 <sysCallIsATTY(regs*)+0x3c>
c00196b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196bb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196c1:	85 c0                	test   eax,eax
c00196c3:	74 24                	je     c00196e9 <sysCallIsATTY(regs*)+0x4c>
c00196c5:	83 ec 0c             	sub    esp,0xc
c00196c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00196ca:	50                   	push   eax
c00196cb:	ff 12                	call   DWORD PTR [edx]
c00196cd:	31 d2                	xor    edx,edx
c00196cf:	0f b6 c0             	movzx  eax,al
c00196d2:	83 c4 10             	add    esp,0x10
c00196d5:	83 c4 0c             	add    esp,0xc
c00196d8:	c3                   	ret    
c00196d9:	83 ec 0c             	sub    esp,0xc
c00196dc:	50                   	push   eax
c00196dd:	e8 37 7a ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c00196e2:	83 c4 10             	add    esp,0x10
c00196e5:	85 c0                	test   eax,eax
c00196e7:	75 dc                	jne    c00196c5 <sysCallIsATTY(regs*)+0x28>
c00196e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196f3:	83 c4 0c             	add    esp,0xc
c00196f6:	c3                   	ret    

c00196f7 <sysCallSeek(regs*)>:
c00196f7:	53                   	push   ebx
c00196f8:	83 ec 08             	sub    esp,0x8
c00196fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019702:	83 f8 02             	cmp    eax,0x2
c0019705:	76 4a                	jbe    c0019751 <sysCallSeek(regs*)+0x5a>
c0019707:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001970c:	77 32                	ja     c0019740 <sysCallSeek(regs*)+0x49>
c001970e:	83 ec 0c             	sub    esp,0xc
c0019711:	50                   	push   eax
c0019712:	e8 02 7a ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019717:	83 c4 0c             	add    esp,0xc
c001971a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001971d:	31 db                	xor    ebx,ebx
c001971f:	53                   	push   ebx
c0019720:	51                   	push   ecx
c0019721:	50                   	push   eax
c0019722:	e8 7d 91 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	85 c0                	test   eax,eax
c001972c:	0f 95 c0             	setne  al
c001972f:	31 d2                	xor    edx,edx
c0019731:	0f b6 c0             	movzx  eax,al
c0019734:	f7 d8                	neg    eax
c0019736:	83 d2 00             	adc    edx,0x0
c0019739:	83 c4 08             	add    esp,0x8
c001973c:	f7 da                	neg    edx
c001973e:	5b                   	pop    ebx
c001973f:	c3                   	ret    
c0019740:	83 ec 08             	sub    esp,0x8
c0019743:	50                   	push   eax
c0019744:	68 58 83 02 c0       	push   0xc0028358
c0019749:	e8 05 8b ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001974e:	83 c4 10             	add    esp,0x10
c0019751:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019756:	ba ff ff ff ff       	mov    edx,0xffffffff
c001975b:	83 c4 08             	add    esp,0x8
c001975e:	5b                   	pop    ebx
c001975f:	c3                   	ret    

c0019760 <sysCallTell(regs*)>:
c0019760:	53                   	push   ebx
c0019761:	83 ec 08             	sub    esp,0x8
c0019764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019768:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001976b:	83 f8 02             	cmp    eax,0x2
c001976e:	76 5e                	jbe    c00197ce <sysCallTell(regs*)+0x6e>
c0019770:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019775:	77 2d                	ja     c00197a4 <sysCallTell(regs*)+0x44>
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	50                   	push   eax
c001977b:	e8 99 79 ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019780:	5a                   	pop    edx
c0019781:	59                   	pop    ecx
c0019782:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019785:	50                   	push   eax
c0019786:	e8 6f 91 ff ff       	call   c00128fa <File::tell(unsigned long long*)>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	85 c0                	test   eax,eax
c0019790:	0f 95 c0             	setne  al
c0019793:	31 d2                	xor    edx,edx
c0019795:	0f b6 c0             	movzx  eax,al
c0019798:	f7 d8                	neg    eax
c001979a:	83 d2 00             	adc    edx,0x0
c001979d:	83 c4 08             	add    esp,0x8
c00197a0:	f7 da                	neg    edx
c00197a2:	5b                   	pop    ebx
c00197a3:	c3                   	ret    
c00197a4:	83 ec 08             	sub    esp,0x8
c00197a7:	50                   	push   eax
c00197a8:	68 72 83 02 c0       	push   0xc0028372
c00197ad:	e8 a1 8a ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00197b2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197b5:	83 c4 10             	add    esp,0x10
c00197b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197c5:	31 d2                	xor    edx,edx
c00197c7:	31 c0                	xor    eax,eax
c00197c9:	83 c4 08             	add    esp,0x8
c00197cc:	5b                   	pop    ebx
c00197cd:	c3                   	ret    
c00197ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197d8:	83 c4 08             	add    esp,0x8
c00197db:	5b                   	pop    ebx
c00197dc:	c3                   	ret    

c00197dd <sysCallSizeFromFilename(regs*)>:
c00197dd:	57                   	push   edi
c00197de:	56                   	push   esi
c00197df:	53                   	push   ebx
c00197e0:	83 ec 10             	sub    esp,0x10
c00197e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00197e7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00197ea:	83 fb 02             	cmp    ebx,0x2
c00197ed:	0f 86 8a 00 00 00    	jbe    c001987d <sysCallSizeFromFilename(regs*)+0xa0>
c00197f3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00197f9:	77 56                	ja     c0019851 <sysCallSizeFromFilename(regs*)+0x74>
c00197fb:	83 ec 0c             	sub    esp,0xc
c00197fe:	68 14 01 00 00       	push   0x114
c0019803:	e8 5c 89 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019808:	83 c4 0c             	add    esp,0xc
c001980b:	89 c7                	mov    edi,eax
c001980d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019812:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019815:	53                   	push   ebx
c0019816:	57                   	push   edi
c0019817:	e8 66 8f ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001981c:	83 c4 0c             	add    esp,0xc
c001981f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019823:	50                   	push   eax
c0019824:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019827:	57                   	push   edi
c0019828:	e8 65 92 ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c001982d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019830:	89 c3                	mov    ebx,eax
c0019832:	8b 07                	mov    eax,DWORD PTR [edi]
c0019834:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019837:	83 c4 10             	add    esp,0x10
c001983a:	31 c0                	xor    eax,eax
c001983c:	85 db                	test   ebx,ebx
c001983e:	0f 95 c0             	setne  al
c0019841:	31 d2                	xor    edx,edx
c0019843:	f7 d8                	neg    eax
c0019845:	83 d2 00             	adc    edx,0x0
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	f7 da                	neg    edx
c001984d:	5b                   	pop    ebx
c001984e:	5e                   	pop    esi
c001984f:	5f                   	pop    edi
c0019850:	c3                   	ret    
c0019851:	83 ec 08             	sub    esp,0x8
c0019854:	53                   	push   ebx
c0019855:	68 8c 83 02 c0       	push   0xc002838c
c001985a:	e8 f4 89 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001985f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019862:	83 c4 10             	add    esp,0x10
c0019865:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001986b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019872:	31 d2                	xor    edx,edx
c0019874:	83 c4 10             	add    esp,0x10
c0019877:	31 c0                	xor    eax,eax
c0019879:	5b                   	pop    ebx
c001987a:	5e                   	pop    esi
c001987b:	5f                   	pop    edi
c001987c:	c3                   	ret    
c001987d:	83 c4 10             	add    esp,0x10
c0019880:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019885:	5b                   	pop    ebx
c0019886:	ba ff ff ff ff       	mov    edx,0xffffffff
c001988b:	5e                   	pop    esi
c001988c:	5f                   	pop    edi
c001988d:	c3                   	ret    

c001988e <sysCallSize(regs*)>:
c001988e:	53                   	push   ebx
c001988f:	83 ec 18             	sub    esp,0x18
c0019892:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019896:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019899:	83 f8 02             	cmp    eax,0x2
c001989c:	76 64                	jbe    c0019902 <sysCallSize(regs*)+0x74>
c001989e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198a3:	77 33                	ja     c00198d8 <sysCallSize(regs*)+0x4a>
c00198a5:	83 ec 0c             	sub    esp,0xc
c00198a8:	50                   	push   eax
c00198a9:	e8 6b 78 ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c00198ae:	83 c4 0c             	add    esp,0xc
c00198b1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198b5:	52                   	push   edx
c00198b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198b9:	50                   	push   eax
c00198ba:	e8 d3 91 ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c00198bf:	83 c4 10             	add    esp,0x10
c00198c2:	85 c0                	test   eax,eax
c00198c4:	0f 95 c0             	setne  al
c00198c7:	31 d2                	xor    edx,edx
c00198c9:	0f b6 c0             	movzx  eax,al
c00198cc:	f7 d8                	neg    eax
c00198ce:	83 d2 00             	adc    edx,0x0
c00198d1:	83 c4 18             	add    esp,0x18
c00198d4:	f7 da                	neg    edx
c00198d6:	5b                   	pop    ebx
c00198d7:	c3                   	ret    
c00198d8:	83 ec 08             	sub    esp,0x8
c00198db:	50                   	push   eax
c00198dc:	68 8c 83 02 c0       	push   0xc002838c
c00198e1:	e8 6d 89 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00198e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00198f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198f9:	31 d2                	xor    edx,edx
c00198fb:	31 c0                	xor    eax,eax
c00198fd:	83 c4 18             	add    esp,0x18
c0019900:	5b                   	pop    ebx
c0019901:	c3                   	ret    
c0019902:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019907:	ba ff ff ff ff       	mov    edx,0xffffffff
c001990c:	83 c4 18             	add    esp,0x18
c001990f:	5b                   	pop    ebx
c0019910:	c3                   	ret    

c0019911 <sysCallClose(regs*)>:
c0019911:	53                   	push   ebx
c0019912:	83 ec 08             	sub    esp,0x8
c0019915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019919:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001991c:	83 f8 02             	cmp    eax,0x2
c001991f:	76 50                	jbe    c0019971 <sysCallClose(regs*)+0x60>
c0019921:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019926:	74 58                	je     c0019980 <sysCallClose(regs*)+0x6f>
c0019928:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001992d:	74 60                	je     c001998f <sysCallClose(regs*)+0x7e>
c001992f:	77 2f                	ja     c0019960 <sysCallClose(regs*)+0x4f>
c0019931:	83 ec 0c             	sub    esp,0xc
c0019934:	50                   	push   eax
c0019935:	e8 df 77 ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c001993a:	89 c3                	mov    ebx,eax
c001993c:	89 04 24             	mov    DWORD PTR [esp],eax
c001993f:	e8 00 8f ff ff       	call   c0012844 <File::close()>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	85 db                	test   ebx,ebx
c0019949:	74 0c                	je     c0019957 <sysCallClose(regs*)+0x46>
c001994b:	83 ec 0c             	sub    esp,0xc
c001994e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019950:	53                   	push   ebx
c0019951:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019954:	83 c4 10             	add    esp,0x10
c0019957:	31 c0                	xor    eax,eax
c0019959:	31 d2                	xor    edx,edx
c001995b:	83 c4 08             	add    esp,0x8
c001995e:	5b                   	pop    ebx
c001995f:	c3                   	ret    
c0019960:	83 ec 08             	sub    esp,0x8
c0019963:	50                   	push   eax
c0019964:	68 c0 82 02 c0       	push   0xc00282c0
c0019969:	e8 e5 88 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019976:	ba ff ff ff ff       	mov    edx,0xffffffff
c001997b:	83 c4 08             	add    esp,0x8
c001997e:	5b                   	pop    ebx
c001997f:	c3                   	ret    
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	68 a7 83 02 c0       	push   0xc00283a7
c0019988:	e8 c6 88 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001998d:	eb c5                	jmp    c0019954 <sysCallClose(regs*)+0x43>
c001998f:	83 ec 0c             	sub    esp,0xc
c0019992:	68 b5 83 02 c0       	push   0xc00283b5
c0019997:	eb ef                	jmp    c0019988 <sysCallClose(regs*)+0x77>

c0019999 <sysCallOpenDir(regs*)>:
c0019999:	56                   	push   esi
c001999a:	53                   	push   ebx
c001999b:	53                   	push   ebx
c001999c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199a0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199a3:	85 f6                	test   esi,esi
c00199a5:	74 51                	je     c00199f8 <sysCallOpenDir(regs*)+0x5f>
c00199a7:	83 ec 0c             	sub    esp,0xc
c00199aa:	68 14 01 00 00       	push   0x114
c00199af:	e8 b0 87 ff ff       	call   c0012164 <operator new(unsigned long)>
c00199b4:	83 c4 0c             	add    esp,0xc
c00199b7:	89 c6                	mov    esi,eax
c00199b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199c4:	56                   	push   esi
c00199c5:	e8 7a 92 ff ff       	call   c0012c44 <Directory::Directory(char const*, Process*)>
c00199ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00199cd:	e8 d6 92 ff ff       	call   c0012ca8 <Directory::open()>
c00199d2:	83 c4 10             	add    esp,0x10
c00199d5:	85 c0                	test   eax,eax
c00199d7:	75 1f                	jne    c00199f8 <sysCallOpenDir(regs*)+0x5f>
c00199d9:	83 ec 0c             	sub    esp,0xc
c00199dc:	56                   	push   esi
c00199dd:	e8 82 74 ff ff       	call   c0010e64 <UnixFile::getFileDescriptor()>
c00199e2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	89 02                	mov    DWORD PTR [edx],eax
c00199ea:	c1 f8 1f             	sar    eax,0x1f
c00199ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00199f0:	31 c0                	xor    eax,eax
c00199f2:	59                   	pop    ecx
c00199f3:	31 d2                	xor    edx,edx
c00199f5:	5b                   	pop    ebx
c00199f6:	5e                   	pop    esi
c00199f7:	c3                   	ret    
c00199f8:	59                   	pop    ecx
c00199f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a03:	5b                   	pop    ebx
c0019a04:	5e                   	pop    esi
c0019a05:	c3                   	ret    

c0019a06 <sysCallMakeDir(regs*)>:
c0019a06:	56                   	push   esi
c0019a07:	53                   	push   ebx
c0019a08:	83 ec 10             	sub    esp,0x10
c0019a0b:	68 14 01 00 00       	push   0x114
c0019a10:	e8 4f 87 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019a15:	83 c4 0c             	add    esp,0xc
c0019a18:	89 c3                	mov    ebx,eax
c0019a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a1f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a26:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a29:	53                   	push   ebx
c0019a2a:	e8 15 92 ff ff       	call   c0012c44 <Directory::Directory(char const*, Process*)>
c0019a2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a32:	e8 51 94 ff ff       	call   c0012e88 <Directory::create()>
c0019a37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a3a:	89 c6                	mov    esi,eax
c0019a3c:	e8 c3 92 ff ff       	call   c0012d04 <Directory::close()>
c0019a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a49:	31 c0                	xor    eax,eax
c0019a4b:	85 f6                	test   esi,esi
c0019a4d:	0f 95 c0             	setne  al
c0019a50:	31 d2                	xor    edx,edx
c0019a52:	f7 d8                	neg    eax
c0019a54:	83 d2 00             	adc    edx,0x0
c0019a57:	83 c4 14             	add    esp,0x14
c0019a5a:	f7 da                	neg    edx
c0019a5c:	5b                   	pop    ebx
c0019a5d:	5e                   	pop    esi
c0019a5e:	c3                   	ret    

c0019a5f <sysCallCloseDir(regs*)>:
c0019a5f:	53                   	push   ebx
c0019a60:	83 ec 08             	sub    esp,0x8
c0019a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a67:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a6a:	83 f8 02             	cmp    eax,0x2
c0019a6d:	76 47                	jbe    c0019ab6 <sysCallCloseDir(regs*)+0x57>
c0019a6f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a74:	77 2f                	ja     c0019aa5 <sysCallCloseDir(regs*)+0x46>
c0019a76:	83 ec 0c             	sub    esp,0xc
c0019a79:	50                   	push   eax
c0019a7a:	e8 9a 76 ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019a7f:	89 c3                	mov    ebx,eax
c0019a81:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a84:	e8 7b 92 ff ff       	call   c0012d04 <Directory::close()>
c0019a89:	83 c4 10             	add    esp,0x10
c0019a8c:	85 db                	test   ebx,ebx
c0019a8e:	74 0c                	je     c0019a9c <sysCallCloseDir(regs*)+0x3d>
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a95:	53                   	push   ebx
c0019a96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a99:	83 c4 10             	add    esp,0x10
c0019a9c:	31 c0                	xor    eax,eax
c0019a9e:	31 d2                	xor    edx,edx
c0019aa0:	83 c4 08             	add    esp,0x8
c0019aa3:	5b                   	pop    ebx
c0019aa4:	c3                   	ret    
c0019aa5:	83 ec 08             	sub    esp,0x8
c0019aa8:	50                   	push   eax
c0019aa9:	68 e8 82 02 c0       	push   0xc00282e8
c0019aae:	e8 a0 87 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019abb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ac0:	83 c4 08             	add    esp,0x8
c0019ac3:	5b                   	pop    ebx
c0019ac4:	c3                   	ret    

c0019ac5 <sysCallWait(regs*)>:
c0019ac5:	83 ec 10             	sub    esp,0x10
c0019ac8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019acc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019acf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ad2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019ad5:	e8 f7 22 00 00       	call   c001bdd1 <waitTask(int, int*, int)>
c0019ada:	83 c4 1c             	add    esp,0x1c
c0019add:	99                   	cdq    
c0019ade:	c3                   	ret    

c0019adf <sysCallRmdir(regs*)>:
c0019adf:	56                   	push   esi
c0019ae0:	53                   	push   ebx
c0019ae1:	83 ec 10             	sub    esp,0x10
c0019ae4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ae8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019aeb:	68 14 01 00 00       	push   0x114
c0019af0:	e8 6f 86 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019af5:	83 c4 0c             	add    esp,0xc
c0019af8:	89 c3                	mov    ebx,eax
c0019afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b02:	56                   	push   esi
c0019b03:	53                   	push   ebx
c0019b04:	e8 79 8c ff ff       	call   c0012782 <File::File(char const*, Process*)>
c0019b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b0c:	e8 4d 8e ff ff       	call   c001295e <File::unlink()>
c0019b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b14:	89 c6                	mov    esi,eax
c0019b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b1b:	31 c0                	xor    eax,eax
c0019b1d:	85 f6                	test   esi,esi
c0019b1f:	0f 95 c0             	setne  al
c0019b22:	31 d2                	xor    edx,edx
c0019b24:	f7 d8                	neg    eax
c0019b26:	83 d2 00             	adc    edx,0x0
c0019b29:	83 c4 14             	add    esp,0x14
c0019b2c:	f7 da                	neg    edx
c0019b2e:	5b                   	pop    ebx
c0019b2f:	5e                   	pop    esi
c0019b30:	c3                   	ret    

c0019b31 <sysCallUnlink(regs*)>:
c0019b31:	56                   	push   esi
c0019b32:	53                   	push   ebx
c0019b33:	83 ec 10             	sub    esp,0x10
c0019b36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b3a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b3d:	68 14 01 00 00       	push   0x114
c0019b42:	e8 1d 86 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019b47:	83 c4 0c             	add    esp,0xc
c0019b4a:	89 c3                	mov    ebx,eax
c0019b4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b51:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b54:	56                   	push   esi
c0019b55:	53                   	push   ebx
c0019b56:	e8 27 8c ff ff       	call   c0012782 <File::File(char const*, Process*)>
c0019b5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b5e:	e8 fb 8d ff ff       	call   c001295e <File::unlink()>
c0019b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b66:	89 c6                	mov    esi,eax
c0019b68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b6d:	31 c0                	xor    eax,eax
c0019b6f:	85 f6                	test   esi,esi
c0019b71:	0f 95 c0             	setne  al
c0019b74:	31 d2                	xor    edx,edx
c0019b76:	f7 d8                	neg    eax
c0019b78:	83 d2 00             	adc    edx,0x0
c0019b7b:	83 c4 14             	add    esp,0x14
c0019b7e:	f7 da                	neg    edx
c0019b80:	5b                   	pop    ebx
c0019b81:	5e                   	pop    esi
c0019b82:	c3                   	ret    

c0019b83 <sysCallGetArgv(regs*)>:
c0019b83:	83 ec 0c             	sub    esp,0xc
c0019b86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b8a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019b8d:	85 c0                	test   eax,eax
c0019b8f:	78 2b                	js     c0019bbc <sysCallGetArgv(regs*)+0x39>
c0019b91:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b97:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019b9a:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019ba0:	7d 1a                	jge    c0019bbc <sysCallGetArgv(regs*)+0x39>
c0019ba2:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019ba9:	85 c0                	test   eax,eax
c0019bab:	74 17                	je     c0019bc4 <sysCallGetArgv(regs*)+0x41>
c0019bad:	83 ec 08             	sub    esp,0x8
c0019bb0:	50                   	push   eax
c0019bb1:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019bb4:	e8 63 6b fe ff       	call   c000071c <strcpy>
c0019bb9:	83 c4 10             	add    esp,0x10
c0019bbc:	31 c0                	xor    eax,eax
c0019bbe:	31 d2                	xor    edx,edx
c0019bc0:	83 c4 0c             	add    esp,0xc
c0019bc3:	c3                   	ret    
c0019bc4:	b8 01 00 00 00       	mov    eax,0x1
c0019bc9:	31 d2                	xor    edx,edx
c0019bcb:	83 c4 0c             	add    esp,0xc
c0019bce:	c3                   	ret    

c0019bcf <sysCallTTYName(regs*)>:
c0019bcf:	56                   	push   esi
c0019bd0:	53                   	push   ebx
c0019bd1:	53                   	push   ebx
c0019bd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bd6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bd9:	85 c0                	test   eax,eax
c0019bdb:	74 5f                	je     c0019c3c <sysCallTTYName(regs*)+0x6d>
c0019bdd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019be0:	83 f8 02             	cmp    eax,0x2
c0019be3:	77 3e                	ja     c0019c23 <sysCallTTYName(regs*)+0x54>
c0019be5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019bed:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019bf3:	85 db                	test   ebx,ebx
c0019bf5:	74 45                	je     c0019c3c <sysCallTTYName(regs*)+0x6d>
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bfc:	53                   	push   ebx
c0019bfd:	ff 10                	call   DWORD PTR [eax]
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	84 c0                	test   al,al
c0019c04:	74 41                	je     c0019c47 <sysCallTTYName(regs*)+0x78>
c0019c06:	83 ec 08             	sub    esp,0x8
c0019c09:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c0f:	53                   	push   ebx
c0019c10:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c13:	e8 04 6b fe ff       	call   c000071c <strcpy>
c0019c18:	83 c4 10             	add    esp,0x10
c0019c1b:	31 c0                	xor    eax,eax
c0019c1d:	59                   	pop    ecx
c0019c1e:	31 d2                	xor    edx,edx
c0019c20:	5b                   	pop    ebx
c0019c21:	5e                   	pop    esi
c0019c22:	c3                   	ret    
c0019c23:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c28:	74 bb                	je     c0019be5 <sysCallTTYName(regs*)+0x16>
c0019c2a:	83 ec 0c             	sub    esp,0xc
c0019c2d:	50                   	push   eax
c0019c2e:	e8 e6 74 ff ff       	call   c0011119 <getFromFileDescriptor(int)>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	89 c3                	mov    ebx,eax
c0019c38:	85 db                	test   ebx,ebx
c0019c3a:	75 bb                	jne    c0019bf7 <sysCallTTYName(regs*)+0x28>
c0019c3c:	59                   	pop    ecx
c0019c3d:	b8 01 00 00 00       	mov    eax,0x1
c0019c42:	31 d2                	xor    edx,edx
c0019c44:	5b                   	pop    ebx
c0019c45:	5e                   	pop    esi
c0019c46:	c3                   	ret    
c0019c47:	59                   	pop    ecx
c0019c48:	b8 02 00 00 00       	mov    eax,0x2
c0019c4d:	31 d2                	xor    edx,edx
c0019c4f:	5b                   	pop    ebx
c0019c50:	5e                   	pop    esi
c0019c51:	c3                   	ret    

c0019c52 <sysCallGetEnv(regs*)>:
c0019c52:	83 ec 0c             	sub    esp,0xc
c0019c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c59:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c5c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c5f:	85 c9                	test   ecx,ecx
c0019c61:	75 22                	jne    c0019c85 <sysCallGetEnv(regs*)+0x33>
c0019c63:	85 d2                	test   edx,edx
c0019c65:	74 08                	je     c0019c6f <sysCallGetEnv(regs*)+0x1d>
c0019c67:	31 c0                	xor    eax,eax
c0019c69:	31 d2                	xor    edx,edx
c0019c6b:	83 c4 0c             	add    esp,0xc
c0019c6e:	c3                   	ret    
c0019c6f:	83 ec 0c             	sub    esp,0xc
c0019c72:	68 0c 83 02 c0       	push   0xc002830c
c0019c77:	e8 1e 6a fe ff       	call   c000069a <strlen>
c0019c7c:	83 c4 10             	add    esp,0x10
c0019c7f:	31 d2                	xor    edx,edx
c0019c81:	83 c4 0c             	add    esp,0xc
c0019c84:	c3                   	ret    
c0019c85:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019c88:	85 d2                	test   edx,edx
c0019c8a:	74 05                	je     c0019c91 <sysCallGetEnv(regs*)+0x3f>
c0019c8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019c8f:	eb d6                	jmp    c0019c67 <sysCallGetEnv(regs*)+0x15>
c0019c91:	83 ec 08             	sub    esp,0x8
c0019c94:	68 0c 83 02 c0       	push   0xc002830c
c0019c99:	50                   	push   eax
c0019c9a:	e8 7d 6a fe ff       	call   c000071c <strcpy>
c0019c9f:	83 c4 10             	add    esp,0x10
c0019ca2:	eb c3                	jmp    c0019c67 <sysCallGetEnv(regs*)+0x15>

c0019ca4 <sysCallUSleep(regs*)>:
c0019ca4:	83 ec 14             	sub    esp,0x14
c0019ca7:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019cac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cb0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019cb7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019cba:	01 ca                	add    edx,ecx
c0019cbc:	52                   	push   edx
c0019cbd:	50                   	push   eax
c0019cbe:	e8 a7 21 00 00       	call   c001be6a <nanoSleep(unsigned long long)>
c0019cc3:	31 c0                	xor    eax,eax
c0019cc5:	31 d2                	xor    edx,edx
c0019cc7:	83 c4 1c             	add    esp,0x1c
c0019cca:	c3                   	ret    

c0019ccb <sysCallSpawn(regs*)>:
c0019ccb:	56                   	push   esi
c0019ccc:	53                   	push   ebx
c0019ccd:	53                   	push   ebx
c0019cce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cd2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cd5:	85 f6                	test   esi,esi
c0019cd7:	75 08                	jne    c0019ce1 <sysCallSpawn(regs*)+0x16>
c0019cd9:	59                   	pop    ecx
c0019cda:	31 c0                	xor    eax,eax
c0019cdc:	31 d2                	xor    edx,edx
c0019cde:	5b                   	pop    ebx
c0019cdf:	5e                   	pop    esi
c0019ce0:	c3                   	ret    
c0019ce1:	83 ec 0c             	sub    esp,0xc
c0019ce4:	68 3b 07 00 00       	push   0x73b
c0019ce9:	e8 76 84 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019cee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019cf1:	89 c6                	mov    esi,eax
c0019cf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cf8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019cfb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019cfe:	56                   	push   esi
c0019cff:	e8 be 18 00 00       	call   c001b5c2 <Process::Process(char const*, Process*, char**)>
c0019d04:	83 c4 20             	add    esp,0x20
c0019d07:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d0e:	75 c9                	jne    c0019cd9 <sysCallSpawn(regs*)+0xe>
c0019d10:	83 ec 0c             	sub    esp,0xc
c0019d13:	56                   	push   esi
c0019d14:	e8 17 1e 00 00       	call   c001bb30 <Process::createUserThread()>
c0019d19:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d1b:	83 c4 10             	add    esp,0x10
c0019d1e:	99                   	cdq    
c0019d1f:	59                   	pop    ecx
c0019d20:	5b                   	pop    ebx
c0019d21:	5e                   	pop    esi
c0019d22:	c3                   	ret    

c0019d23 <sysAppSettings(regs*)>:
c0019d23:	53                   	push   ebx
c0019d24:	83 ec 08             	sub    esp,0x8
c0019d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d2b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d2e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d34:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d39:	66 3d c0 09          	cmp    ax,0x9c0
c0019d3d:	75 2f                	jne    c0019d6e <sysAppSettings(regs*)+0x4b>
c0019d3f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d45:	83 e0 1f             	and    eax,0x1f
c0019d48:	3c 01                	cmp    al,0x1
c0019d4a:	74 2e                	je     c0019d7a <sysAppSettings(regs*)+0x57>
c0019d4c:	3c 07                	cmp    al,0x7
c0019d4e:	0f 84 bd 00 00 00    	je     c0019e11 <sysAppSettings(regs*)+0xee>
c0019d54:	84 c0                	test   al,al
c0019d56:	0f 84 dc 00 00 00    	je     c0019e38 <sysAppSettings(regs*)+0x115>
c0019d5c:	3c 08                	cmp    al,0x8
c0019d5e:	74 6d                	je     c0019dcd <sysAppSettings(regs*)+0xaa>
c0019d60:	0f b6 c0             	movzx  eax,al
c0019d63:	83 c4 08             	add    esp,0x8
c0019d66:	05 e8 03 00 00       	add    eax,0x3e8
c0019d6b:	5b                   	pop    ebx
c0019d6c:	99                   	cdq    
c0019d6d:	c3                   	ret    
c0019d6e:	b8 01 00 00 00       	mov    eax,0x1
c0019d73:	31 d2                	xor    edx,edx
c0019d75:	83 c4 08             	add    esp,0x8
c0019d78:	5b                   	pop    ebx
c0019d79:	c3                   	ret    
c0019d7a:	51                   	push   ecx
c0019d7b:	68 00 01 00 00       	push   0x100
c0019d80:	6a 00                	push   0x0
c0019d82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d8a:	83 c0 0c             	add    eax,0xc
c0019d8d:	50                   	push   eax
c0019d8e:	e8 ea 68 fe ff       	call   c000067d <memset>
c0019d93:	83 c4 0c             	add    esp,0xc
c0019d96:	68 ff 00 00 00       	push   0xff
c0019d9b:	53                   	push   ebx
c0019d9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019da1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019da4:	83 c0 0c             	add    eax,0xc
c0019da7:	50                   	push   eax
c0019da8:	e8 9a 68 fe ff       	call   c0000647 <memcpy>
c0019dad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019db2:	5b                   	pop    ebx
c0019db3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019db6:	5a                   	pop    edx
c0019db7:	8d 50 0c             	lea    edx,[eax+0xc]
c0019dba:	52                   	push   edx
c0019dbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc1:	e8 0e 65 ff ff       	call   c00102d4 <VgaText::setTitle(char*)>
c0019dc6:	83 c4 10             	add    esp,0x10
c0019dc9:	31 c0                	xor    eax,eax
c0019dcb:	eb a6                	jmp    c0019d73 <sysAppSettings(regs*)+0x50>
c0019dcd:	83 ec 08             	sub    esp,0x8
c0019dd0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019dd6:	83 e0 0f             	and    eax,0xf
c0019dd9:	50                   	push   eax
c0019dda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ddf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019de2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de8:	e8 d7 64 ff ff       	call   c00102c4 <VgaText::setTitleColour(VgaColour)>
c0019ded:	58                   	pop    eax
c0019dee:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019df4:	5a                   	pop    edx
c0019df5:	c1 e8 04             	shr    eax,0x4
c0019df8:	83 e0 0f             	and    eax,0xf
c0019dfb:	50                   	push   eax
c0019dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e0a:	e8 a5 64 ff ff       	call   c00102b4 <VgaText::setTitleTextColour(VgaColour)>
c0019e0f:	eb b5                	jmp    c0019dc6 <sysAppSettings(regs*)+0xa3>
c0019e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e19:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e1f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e25:	c0 e8 06             	shr    al,0x6
c0019e28:	83 e0 01             	and    eax,0x1
c0019e2b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e31:	31 c0                	xor    eax,eax
c0019e33:	e9 3b ff ff ff       	jmp    c0019d73 <sysAppSettings(regs*)+0x50>
c0019e38:	b8 02 00 00 00       	mov    eax,0x2
c0019e3d:	e9 31 ff ff ff       	jmp    c0019d73 <sysAppSettings(regs*)+0x50>

c0019e42 <sysSetFatAttrib(regs*)>:
c0019e42:	57                   	push   edi
c0019e43:	56                   	push   esi
c0019e44:	53                   	push   ebx
c0019e45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e49:	83 ec 0c             	sub    esp,0xc
c0019e4c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e4f:	68 14 01 00 00       	push   0x114
c0019e54:	e8 0b 83 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019e59:	83 c4 0c             	add    esp,0xc
c0019e5c:	89 c3                	mov    ebx,eax
c0019e5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e63:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e66:	57                   	push   edi
c0019e67:	53                   	push   ebx
c0019e68:	e8 15 89 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c0019e6d:	83 c4 0c             	add    esp,0xc
c0019e70:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e73:	0f b6 d4             	movzx  edx,ah
c0019e76:	0f b6 c0             	movzx  eax,al
c0019e79:	52                   	push   edx
c0019e7a:	50                   	push   eax
c0019e7b:	53                   	push   ebx
c0019e7c:	e8 77 8b ff ff       	call   c00129f8 <File::chfatattr(unsigned char, unsigned char)>
c0019e81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e84:	89 c6                	mov    esi,eax
c0019e86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e8b:	83 c4 10             	add    esp,0x10
c0019e8e:	31 c0                	xor    eax,eax
c0019e90:	5b                   	pop    ebx
c0019e91:	85 f6                	test   esi,esi
c0019e93:	5e                   	pop    esi
c0019e94:	0f 95 c0             	setne  al
c0019e97:	5f                   	pop    edi
c0019e98:	31 d2                	xor    edx,edx
c0019e9a:	f7 d8                	neg    eax
c0019e9c:	83 d2 00             	adc    edx,0x0
c0019e9f:	f7 da                	neg    edx
c0019ea1:	c3                   	ret    

c0019ea2 <sysPanic(regs*)>:
c0019ea2:	83 ec 18             	sub    esp,0x18
c0019ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ea9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019eac:	e8 20 eb ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0019eb1:	c7 04 24 c3 83 02 c0 	mov    DWORD PTR [esp],0xc00283c3
c0019eb8:	e8 14 eb ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0019ebd:	b8 01 00 00 00       	mov    eax,0x1
c0019ec2:	31 d2                	xor    edx,edx
c0019ec4:	83 c4 1c             	add    esp,0x1c
c0019ec7:	c3                   	ret    

c0019ec8 <sysPipe(regs*)>:
c0019ec8:	57                   	push   edi
c0019ec9:	56                   	push   esi
c0019eca:	53                   	push   ebx
c0019ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ecf:	83 ec 0c             	sub    esp,0xc
c0019ed2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019ed5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019ed8:	6a 20                	push   0x20
c0019eda:	e8 85 82 ff ff       	call   c0012164 <operator new(unsigned long)>
c0019edf:	89 c3                	mov    ebx,eax
c0019ee1:	58                   	pop    eax
c0019ee2:	5a                   	pop    edx
c0019ee3:	68 00 50 00 00       	push   0x5000
c0019ee8:	53                   	push   ebx
c0019ee9:	e8 24 5d ff ff       	call   c000fc12 <Pipe::Pipe(int)>
c0019eee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef1:	e8 6e 6f ff ff       	call   c0010e64 <UnixFile::getFileDescriptor()>
c0019ef6:	89 07                	mov    DWORD PTR [edi],eax
c0019ef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019efb:	e8 64 6f ff ff       	call   c0010e64 <UnixFile::getFileDescriptor()>
c0019f00:	83 c4 10             	add    esp,0x10
c0019f03:	89 06                	mov    DWORD PTR [esi],eax
c0019f05:	31 d2                	xor    edx,edx
c0019f07:	5b                   	pop    ebx
c0019f08:	31 c0                	xor    eax,eax
c0019f0a:	5e                   	pop    esi
c0019f0b:	5f                   	pop    edi
c0019f0c:	c3                   	ret    

c0019f0d <sysGetUnixTime(regs*)>:
c0019f0d:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0019f12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f1c:	e9 29 92 ff ff       	jmp    c001314a <Clock::timeInSecondsLocal()>

c0019f21 <string_ends_with(char const*, char const*)>:
c0019f21:	57                   	push   edi
c0019f22:	56                   	push   esi
c0019f23:	53                   	push   ebx
c0019f24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f28:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f2c:	83 ec 0c             	sub    esp,0xc
c0019f2f:	53                   	push   ebx
c0019f30:	e8 65 67 fe ff       	call   c000069a <strlen>
c0019f35:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f38:	89 c6                	mov    esi,eax
c0019f3a:	e8 5b 67 fe ff       	call   c000069a <strlen>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	39 c6                	cmp    esi,eax
c0019f44:	7d 06                	jge    c0019f4c <string_ends_with(char const*, char const*)+0x2b>
c0019f46:	5b                   	pop    ebx
c0019f47:	31 c0                	xor    eax,eax
c0019f49:	5e                   	pop    esi
c0019f4a:	5f                   	pop    edi
c0019f4b:	c3                   	ret    
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	29 c6                	sub    esi,eax
c0019f51:	57                   	push   edi
c0019f52:	01 f3                	add    ebx,esi
c0019f54:	53                   	push   ebx
c0019f55:	e8 13 68 fe ff       	call   c000076d <strcmp>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	85 c0                	test   eax,eax
c0019f5f:	5b                   	pop    ebx
c0019f60:	0f 94 c0             	sete   al
c0019f63:	5e                   	pop    esi
c0019f64:	0f b6 c0             	movzx  eax,al
c0019f67:	5f                   	pop    edi
c0019f68:	c3                   	ret    

c0019f69 <sysCallOpen(regs*)>:
c0019f69:	56                   	push   esi
c0019f6a:	53                   	push   ebx
c0019f6b:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f71:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019f78:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019f7b:	85 c9                	test   ecx,ecx
c0019f7d:	0f 84 b3 00 00 00    	je     c001a036 <sysCallOpen(regs*)+0xcd>
c0019f83:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019f86:	85 c0                	test   eax,eax
c0019f88:	0f 84 a8 00 00 00    	je     c001a036 <sysCallOpen(regs*)+0xcd>
c0019f8e:	52                   	push   edx
c0019f8f:	68 d2 83 02 c0       	push   0xc00283d2
c0019f94:	50                   	push   eax
c0019f95:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019f99:	56                   	push   esi
c0019f9a:	e8 39 86 ff ff       	call   c00125d8 <standardiseFiles(char*, char const*, char const*)>
c0019f9f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fa2:	e8 f3 66 fe ff       	call   c000069a <strlen>
c0019fa7:	83 c4 10             	add    esp,0x10
c0019faa:	48                   	dec    eax
c0019fab:	74 1d                	je     c0019fca <sysCallOpen(regs*)+0x61>
c0019fad:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fb0:	eb 0f                	jmp    c0019fc1 <sysCallOpen(regs*)+0x58>
c0019fb2:	80 fa 3a             	cmp    dl,0x3a
c0019fb5:	74 0f                	je     c0019fc6 <sysCallOpen(regs*)+0x5d>
c0019fb7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fbb:	48                   	dec    eax
c0019fbc:	74 0c                	je     c0019fca <sysCallOpen(regs*)+0x61>
c0019fbe:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019fc1:	80 fa 2e             	cmp    dl,0x2e
c0019fc4:	75 ec                	jne    c0019fb2 <sysCallOpen(regs*)+0x49>
c0019fc6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019fca:	83 ec 08             	sub    esp,0x8
c0019fcd:	68 d6 83 02 c0       	push   0xc00283d6
c0019fd2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fd5:	e8 47 ff ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c0019fda:	83 c4 10             	add    esp,0x10
c0019fdd:	85 c0                	test   eax,eax
c0019fdf:	75 17                	jne    c0019ff8 <sysCallOpen(regs*)+0x8f>
c0019fe1:	83 ec 08             	sub    esp,0x8
c0019fe4:	68 f7 83 02 c0       	push   0xc00283f7
c0019fe9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019fec:	e8 30 ff ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	85 c0                	test   eax,eax
c0019ff6:	74 51                	je     c001a049 <sysCallOpen(regs*)+0xe0>
c0019ff8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019ffb:	83 ec 08             	sub    esp,0x8
c0019ffe:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a004:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a00b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a00e:	ff 30                	push   DWORD PTR [eax]
c001a010:	68 db 83 02 c0       	push   0xc00283db
c001a015:	e8 39 82 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a01a:	c7 04 24 ea 83 02 c0 	mov    DWORD PTR [esp],0xc00283ea
c001a021:	e8 2d 82 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a026:	83 c4 10             	add    esp,0x10
c001a029:	81 c4 04 01 00 00    	add    esp,0x104
c001a02f:	31 c0                	xor    eax,eax
c001a031:	31 d2                	xor    edx,edx
c001a033:	5b                   	pop    ebx
c001a034:	5e                   	pop    esi
c001a035:	c3                   	ret    
c001a036:	81 c4 04 01 00 00    	add    esp,0x104
c001a03c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a041:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a046:	5b                   	pop    ebx
c001a047:	5e                   	pop    esi
c001a048:	c3                   	ret    
c001a049:	83 ec 08             	sub    esp,0x8
c001a04c:	68 d7 83 02 c0       	push   0xc00283d7
c001a051:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a054:	e8 14 67 fe ff       	call   c000076d <strcmp>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	85 c0                	test   eax,eax
c001a05e:	74 98                	je     c0019ff8 <sysCallOpen(regs*)+0x8f>
c001a060:	83 ec 08             	sub    esp,0x8
c001a063:	68 d6 83 02 c0       	push   0xc00283d6
c001a068:	56                   	push   esi
c001a069:	e8 b3 fe ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c001a06e:	83 c4 10             	add    esp,0x10
c001a071:	85 c0                	test   eax,eax
c001a073:	75 83                	jne    c0019ff8 <sysCallOpen(regs*)+0x8f>
c001a075:	83 ec 08             	sub    esp,0x8
c001a078:	68 fc 83 02 c0       	push   0xc00283fc
c001a07d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a080:	e8 9c fe ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c001a085:	83 c4 10             	add    esp,0x10
c001a088:	85 c0                	test   eax,eax
c001a08a:	0f 85 d1 00 00 00    	jne    c001a161 <sysCallOpen(regs*)+0x1f8>
c001a090:	83 ec 08             	sub    esp,0x8
c001a093:	68 01 84 02 c0       	push   0xc0028401
c001a098:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a09b:	e8 81 fe ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c001a0a0:	83 c4 10             	add    esp,0x10
c001a0a3:	85 c0                	test   eax,eax
c001a0a5:	0f 85 b6 00 00 00    	jne    c001a161 <sysCallOpen(regs*)+0x1f8>
c001a0ab:	83 ec 08             	sub    esp,0x8
c001a0ae:	68 fd 83 02 c0       	push   0xc00283fd
c001a0b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0b6:	e8 b2 66 fe ff       	call   c000076d <strcmp>
c001a0bb:	83 c4 10             	add    esp,0x10
c001a0be:	85 c0                	test   eax,eax
c001a0c0:	0f 84 9b 00 00 00    	je     c001a161 <sysCallOpen(regs*)+0x1f8>
c001a0c6:	83 ec 08             	sub    esp,0x8
c001a0c9:	68 fc 83 02 c0       	push   0xc00283fc
c001a0ce:	56                   	push   esi
c001a0cf:	e8 4d fe ff ff       	call   c0019f21 <string_ends_with(char const*, char const*)>
c001a0d4:	83 c4 10             	add    esp,0x10
c001a0d7:	85 c0                	test   eax,eax
c001a0d9:	0f 85 82 00 00 00    	jne    c001a161 <sysCallOpen(regs*)+0x1f8>
c001a0df:	83 ec 0c             	sub    esp,0xc
c001a0e2:	68 14 01 00 00       	push   0x114
c001a0e7:	e8 78 80 ff ff       	call   c0012164 <operator new(unsigned long)>
c001a0ec:	83 c4 0c             	add    esp,0xc
c001a0ef:	89 c6                	mov    esi,eax
c001a0f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a0f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0fc:	56                   	push   esi
c001a0fd:	e8 80 86 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001a102:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	0f b6 c2             	movzx  eax,dl
c001a10b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a10e:	89 d0                	mov    eax,edx
c001a110:	83 e0 01             	and    eax,0x1
c001a113:	f6 c2 02             	test   dl,0x2
c001a116:	74 03                	je     c001a11b <sysCallOpen(regs*)+0x1b2>
c001a118:	83 c8 02             	or     eax,0x2
c001a11b:	f6 c2 04             	test   dl,0x4
c001a11e:	74 03                	je     c001a123 <sysCallOpen(regs*)+0x1ba>
c001a120:	83 c8 04             	or     eax,0x4
c001a123:	f6 c2 08             	test   dl,0x8
c001a126:	74 03                	je     c001a12b <sysCallOpen(regs*)+0x1c2>
c001a128:	83 c8 0a             	or     eax,0xa
c001a12b:	83 e2 10             	and    edx,0x10
c001a12e:	74 03                	je     c001a133 <sysCallOpen(regs*)+0x1ca>
c001a130:	83 c8 12             	or     eax,0x12
c001a133:	83 ec 08             	sub    esp,0x8
c001a136:	50                   	push   eax
c001a137:	56                   	push   esi
c001a138:	e8 a9 86 ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	85 c0                	test   eax,eax
c001a142:	0f 85 ee fe ff ff    	jne    c001a036 <sysCallOpen(regs*)+0xcd>
c001a148:	83 ec 0c             	sub    esp,0xc
c001a14b:	56                   	push   esi
c001a14c:	e8 13 6d ff ff       	call   c0010e64 <UnixFile::getFileDescriptor()>
c001a151:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a154:	89 02                	mov    DWORD PTR [edx],eax
c001a156:	c1 f8 1f             	sar    eax,0x1f
c001a159:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a15c:	e9 c5 fe ff ff       	jmp    c001a026 <sysCallOpen(regs*)+0xbd>
c001a161:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a164:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a16a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a171:	e9 b3 fe ff ff       	jmp    c001a029 <sysCallOpen(regs*)+0xc0>

c001a176 <setupSystemCalls()>:
c001a176:	c7 05 80 af 02 c0 d2 93 01 c0 	mov    DWORD PTR ds:0xc002af80,0xc00193d2
c001a180:	c7 05 84 af 02 c0 00 92 01 c0 	mov    DWORD PTR ds:0xc002af84,0xc0019200
c001a18a:	c7 05 88 af 02 c0 15 93 01 c0 	mov    DWORD PTR ds:0xc002af88,0xc0019315
c001a194:	c7 05 8c af 02 c0 6a 93 01 c0 	mov    DWORD PTR ds:0xc002af8c,0xc001936a
c001a19e:	c7 05 90 af 02 c0 ad 92 01 c0 	mov    DWORD PTR ds:0xc002af90,0xc00192ad
c001a1a8:	c7 05 94 af 02 c0 ec 93 01 c0 	mov    DWORD PTR ds:0xc002af94,0xc00193ec
c001a1b2:	c7 05 98 af 02 c0 91 95 01 c0 	mov    DWORD PTR ds:0xc002af98,0xc0019591
c001a1bc:	c7 05 9c af 02 c0 b0 95 01 c0 	mov    DWORD PTR ds:0xc002af9c,0xc00195b0
c001a1c6:	c7 05 a4 af 02 c0 11 99 01 c0 	mov    DWORD PTR ds:0xc002afa4,0xc0019911
c001a1d0:	c7 05 a0 af 02 c0 69 9f 01 c0 	mov    DWORD PTR ds:0xc002afa0,0xc0019f69
c001a1da:	c7 05 a8 af 02 c0 99 99 01 c0 	mov    DWORD PTR ds:0xc002afa8,0xc0019999
c001a1e4:	c7 05 ac af 02 c0 0f 96 01 c0 	mov    DWORD PTR ds:0xc002afac,0xc001960f
c001a1ee:	c7 05 b0 af 02 c0 f8 93 01 c0 	mov    DWORD PTR ds:0xc002afb0,0xc00193f8
c001a1f8:	c7 05 b4 af 02 c0 fd 93 01 c0 	mov    DWORD PTR ds:0xc002afb4,0xc00193fd
c001a202:	c7 05 b8 af 02 c0 06 9a 01 c0 	mov    DWORD PTR ds:0xc002afb8,0xc0019a06
c001a20c:	c7 05 bc af 02 c0 5f 9a 01 c0 	mov    DWORD PTR ds:0xc002afbc,0xc0019a5f
c001a216:	c7 05 c0 af 02 c0 f7 96 01 c0 	mov    DWORD PTR ds:0xc002afc0,0xc00196f7
c001a220:	c7 05 c4 af 02 c0 60 97 01 c0 	mov    DWORD PTR ds:0xc002afc4,0xc0019760
c001a22a:	c7 05 c8 af 02 c0 8e 98 01 c0 	mov    DWORD PTR ds:0xc002afc8,0xc001988e
c001a234:	c7 05 cc af 02 c0 02 94 01 c0 	mov    DWORD PTR ds:0xc002afcc,0xc0019402
c001a23e:	c7 05 d0 af 02 c0 c5 9a 01 c0 	mov    DWORD PTR ds:0xc002afd0,0xc0019ac5
c001a248:	c7 05 d4 af 02 c0 0c 94 01 c0 	mov    DWORD PTR ds:0xc002afd4,0xc001940c
c001a252:	c7 05 d8 af 02 c0 17 94 01 c0 	mov    DWORD PTR ds:0xc002afd8,0xc0019417
c001a25c:	c7 05 dc af 02 c0 df 9a 01 c0 	mov    DWORD PTR ds:0xc002afdc,0xc0019adf
c001a266:	c7 05 e0 af 02 c0 31 9b 01 c0 	mov    DWORD PTR ds:0xc002afe0,0xc0019b31
c001a270:	c7 05 e4 af 02 c0 22 94 01 c0 	mov    DWORD PTR ds:0xc002afe4,0xc0019422
c001a27a:	c7 05 e8 af 02 c0 83 9b 01 c0 	mov    DWORD PTR ds:0xc002afe8,0xc0019b83
c001a284:	c7 05 ec af 02 c0 cc 95 01 c0 	mov    DWORD PTR ds:0xc002afec,0xc00195cc
c001a28e:	c7 05 f0 af 02 c0 cf 9b 01 c0 	mov    DWORD PTR ds:0xc002aff0,0xc0019bcf
c001a298:	c7 05 f4 af 02 c0 9d 96 01 c0 	mov    DWORD PTR ds:0xc002aff4,0xc001969d
c001a2a2:	c7 05 f8 af 02 c0 a4 9c 01 c0 	mov    DWORD PTR ds:0xc002aff8,0xc0019ca4
c001a2ac:	c7 05 fc af 02 c0 dd 97 01 c0 	mov    DWORD PTR ds:0xc002affc,0xc00197dd
c001a2b6:	c7 05 00 b0 02 c0 cb 9c 01 c0 	mov    DWORD PTR ds:0xc002b000,0xc0019ccb
c001a2c0:	c7 05 04 b0 02 c0 52 9c 01 c0 	mov    DWORD PTR ds:0xc002b004,0xc0019c52
c001a2ca:	c7 05 08 b0 02 c0 23 9d 01 c0 	mov    DWORD PTR ds:0xc002b008,0xc0019d23
c001a2d4:	c7 05 0c b0 02 c0 32 94 01 c0 	mov    DWORD PTR ds:0xc002b00c,0xc0019432
c001a2de:	c7 05 10 b0 02 c0 9c 94 01 c0 	mov    DWORD PTR ds:0xc002b010,0xc001949c
c001a2e8:	c7 05 14 b0 02 c0 e2 94 01 c0 	mov    DWORD PTR ds:0xc002b014,0xc00194e2
c001a2f2:	c7 05 18 b0 02 c0 42 9e 01 c0 	mov    DWORD PTR ds:0xc002b018,0xc0019e42
c001a2fc:	c7 05 1c b0 02 c0 a2 9e 01 c0 	mov    DWORD PTR ds:0xc002b01c,0xc0019ea2
c001a306:	c7 05 20 b0 02 c0 33 95 01 c0 	mov    DWORD PTR ds:0xc002b020,0xc0019533
c001a310:	c7 05 24 b0 02 c0 c8 9e 01 c0 	mov    DWORD PTR ds:0xc002b024,0xc0019ec8
c001a31a:	c7 05 28 b0 02 c0 0d 9f 01 c0 	mov    DWORD PTR ds:0xc002b028,0xc0019f0d
c001a324:	c7 05 2c b0 02 c0 18 92 01 c0 	mov    DWORD PTR ds:0xc002b02c,0xc0019218
c001a32e:	c3                   	ret    

c001a32f <systemCall(regs*, void*)>:
c001a32f:	53                   	push   ebx
c001a330:	83 ec 08             	sub    esp,0x8
c001a333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a337:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a33a:	83 f8 7f             	cmp    eax,0x7f
c001a33d:	77 16                	ja     c001a355 <systemCall(regs*, void*)+0x26>
c001a33f:	8b 14 85 80 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5080]
c001a346:	85 d2                	test   edx,edx
c001a348:	74 0b                	je     c001a355 <systemCall(regs*, void*)+0x26>
c001a34a:	83 ec 0c             	sub    esp,0xc
c001a34d:	53                   	push   ebx
c001a34e:	ff d2                	call   edx
c001a350:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a353:	eb 0d                	jmp    c001a362 <systemCall(regs*, void*)+0x33>
c001a355:	52                   	push   edx
c001a356:	52                   	push   edx
c001a357:	50                   	push   eax
c001a358:	68 06 84 02 c0       	push   0xc0028406
c001a35d:	e8 f1 7e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a36a:	31 d2                	xor    edx,edx
c001a36c:	83 c4 08             	add    esp,0x8
c001a36f:	5b                   	pop    ebx
c001a370:	c3                   	ret    

c001a371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a371:	55                   	push   ebp
c001a372:	89 e5                	mov    ebp,esp
c001a374:	57                   	push   edi
c001a375:	56                   	push   esi
c001a376:	53                   	push   ebx
c001a377:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a37d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a380:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a383:	85 c0                	test   eax,eax
c001a385:	0f 95 c1             	setne  cl
c001a388:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a38c:	0f 94 c2             	sete   dl
c001a38f:	84 d1                	test   cl,dl
c001a391:	74 26                	je     c001a3b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a393:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a39a:	74 1d                	je     c001a3b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a39c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a39f:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3a5:	89 d6                	mov    esi,edx
c001a3a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3ad:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3b3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3b6:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3b9:	83 ec 0c             	sub    esp,0xc
c001a3bc:	05 ff 0f 00 00       	add    eax,0xfff
c001a3c1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3c4:	6a 01                	push   0x1
c001a3c6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3cc:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a3d2:	e8 98 6e ff ff       	call   c001126f <Virt::allocateKernelVirtualPages(int)>
c001a3d7:	83 c4 10             	add    esp,0x10
c001a3da:	89 c6                	mov    esi,eax
c001a3dc:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a3e2:	0f 86 21 01 00 00    	jbe    c001a509 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a3e8:	c1 eb 0c             	shr    ebx,0xc
c001a3eb:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a3f5:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a3fb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a3fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a401:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a407:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a40a:	29 d8                	sub    eax,ebx
c001a40c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a412:	0f 83 f4 00 00 00    	jae    c001a50c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a421:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a424:	3d 00 10 00 00       	cmp    eax,0x1000
c001a429:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a42b:	52                   	push   edx
c001a42c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a432:	52                   	push   edx
c001a433:	76 05                	jbe    c001a43a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a435:	b8 00 10 00 00       	mov    eax,0x1000
c001a43a:	31 d2                	xor    edx,edx
c001a43c:	52                   	push   edx
c001a43d:	50                   	push   eax
c001a43e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a441:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a444:	83 c4 20             	add    esp,0x20
c001a447:	85 c0                	test   eax,eax
c001a449:	74 1f                	je     c001a46a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a44b:	51                   	push   ecx
c001a44c:	51                   	push   ecx
c001a44d:	50                   	push   eax
c001a44e:	68 1a 84 02 c0       	push   0xc002841a
c001a453:	e8 fb 7d ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a458:	89 34 24             	mov    DWORD PTR [esp],esi
c001a45b:	e8 69 71 ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	31 c0                	xor    eax,eax
c001a465:	e9 7c 01 00 00       	jmp    c001a5e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a46a:	e8 ab 14 00 00       	call   c001b91a <lockScheduler()>
c001a46f:	e8 62 52 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c001a474:	6a 07                	push   0x7
c001a476:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a47c:	56                   	push   esi
c001a47d:	50                   	push   eax
c001a47e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a484:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a487:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a48d:	e8 9e 74 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a492:	83 c4 0c             	add    esp,0xc
c001a495:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a49b:	6a 00                	push   0x0
c001a49d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4a3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4a6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4ac:	e8 e9 72 ff ff       	call   c001179a <VAS::mapOtherVASIn(bool, VAS*)>
c001a4b1:	58                   	pop    eax
c001a4b2:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4b8:	5a                   	pop    edx
c001a4b9:	68 07 04 00 00       	push   0x407
c001a4be:	53                   	push   ebx
c001a4bf:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4c5:	50                   	push   eax
c001a4c6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4cc:	6a 00                	push   0x0
c001a4ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a4dc:	e8 09 78 ff ff       	call   c0011cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a4e1:	83 c4 1c             	add    esp,0x1c
c001a4e4:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a4ea:	68 00 10 00 00       	push   0x1000
c001a4ef:	50                   	push   eax
c001a4f0:	56                   	push   esi
c001a4f1:	e8 51 61 fe ff       	call   c0000647 <memcpy>
c001a4f6:	e8 21 14 00 00       	call   c001b91c <unlockScheduler()>
c001a4fb:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a501:	83 c4 10             	add    esp,0x10
c001a504:	e9 f5 fe ff ff       	jmp    c001a3fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a509:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a50c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a516:	0f 86 bc 00 00 00    	jbe    c001a5d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a51c:	e8 f9 13 00 00       	call   c001b91a <lockScheduler()>
c001a521:	51                   	push   ecx
c001a522:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a528:	6a 00                	push   0x0
c001a52a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a52f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a532:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a538:	e8 5d 72 ff ff       	call   c001179a <VAS::mapOtherVASIn(bool, VAS*)>
c001a53d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	c1 e8 0c             	shr    eax,0xc
c001a549:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a553:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a559:	e8 78 51 ff ff       	call   c000f6d6 <Phys::allocatePage()>
c001a55e:	6a 07                	push   0x7
c001a560:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a566:	56                   	push   esi
c001a567:	50                   	push   eax
c001a568:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a56e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a571:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a577:	e8 b4 73 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a57c:	58                   	pop    eax
c001a57d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a583:	5a                   	pop    edx
c001a584:	68 07 04 00 00       	push   0x407
c001a589:	53                   	push   ebx
c001a58a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a590:	50                   	push   eax
c001a591:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a597:	6a 00                	push   0x0
c001a599:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a59e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5a7:	e8 3e 77 ff ff       	call   c0011cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5ac:	83 c4 1c             	add    esp,0x1c
c001a5af:	68 00 10 00 00       	push   0x1000
c001a5b4:	6a 00                	push   0x0
c001a5b6:	56                   	push   esi
c001a5b7:	e8 c1 60 fe ff       	call   c000067d <memset>
c001a5bc:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5cb:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5d1:	77 86                	ja     c001a559 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a5d3:	e8 44 13 00 00       	call   c001b91c <unlockScheduler()>
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	56                   	push   esi
c001a5dc:	e8 e8 6f ff ff       	call   c00115c9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a5e1:	83 c4 10             	add    esp,0x10
c001a5e4:	b0 01                	mov    al,0x1
c001a5e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a5e9:	5b                   	pop    ebx
c001a5ea:	5e                   	pop    esi
c001a5eb:	5f                   	pop    edi
c001a5ec:	5d                   	pop    ebp
c001a5ed:	c3                   	ret    

c001a5ee <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a5ee:	55                   	push   ebp
c001a5ef:	57                   	push   edi
c001a5f0:	56                   	push   esi
c001a5f1:	53                   	push   ebx
c001a5f2:	83 ec 48             	sub    esp,0x48
c001a5f5:	68 14 01 00 00       	push   0x114
c001a5fa:	e8 65 7b ff ff       	call   c0012164 <operator new(unsigned long)>
c001a5ff:	83 c4 0c             	add    esp,0xc
c001a602:	89 c6                	mov    esi,eax
c001a604:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a608:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a60c:	50                   	push   eax
c001a60d:	e8 70 81 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001a612:	58                   	pop    eax
c001a613:	5a                   	pop    edx
c001a614:	6a 01                	push   0x1
c001a616:	56                   	push   esi
c001a617:	e8 ca 81 ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	85 c0                	test   eax,eax
c001a621:	0f 85 47 01 00 00    	jne    c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a627:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a62f:	83 ec 0c             	sub    esp,0xc
c001a632:	6a 34                	push   0x34
c001a634:	e8 f3 4a ff ff       	call   c000f12c <malloc>
c001a639:	89 c3                	mov    ebx,eax
c001a63b:	58                   	pop    eax
c001a63c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a63e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a642:	57                   	push   edi
c001a643:	53                   	push   ebx
c001a644:	6a 00                	push   0x0
c001a646:	6a 34                	push   0x34
c001a648:	56                   	push   esi
c001a649:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a64c:	83 c4 20             	add    esp,0x20
c001a64f:	85 c0                	test   eax,eax
c001a651:	0f 85 17 01 00 00    	jne    c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a657:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a65d:	0f 85 0b 01 00 00    	jne    c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a663:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a666:	85 c0                	test   eax,eax
c001a668:	0f 84 00 01 00 00    	je     c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a66e:	31 d2                	xor    edx,edx
c001a670:	55                   	push   ebp
c001a671:	52                   	push   edx
c001a672:	50                   	push   eax
c001a673:	56                   	push   esi
c001a674:	e8 2b 82 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	85 c0                	test   eax,eax
c001a67e:	0f 85 ea 00 00 00    	jne    c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a684:	83 ec 0c             	sub    esp,0xc
c001a687:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a68a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a68e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a692:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a696:	0f af c2             	imul   eax,edx
c001a699:	50                   	push   eax
c001a69a:	e8 8d 4a ff ff       	call   c000f12c <malloc>
c001a69f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6a6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6ac:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6b0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6b4:	0f af c2             	imul   eax,edx
c001a6b7:	99                   	cdq    
c001a6b8:	52                   	push   edx
c001a6b9:	50                   	push   eax
c001a6ba:	56                   	push   esi
c001a6bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6be:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6c1:	83 c4 20             	add    esp,0x20
c001a6c4:	85 c0                	test   eax,eax
c001a6c6:	0f 84 a2 00 00 00    	je     c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6cc:	31 d2                	xor    edx,edx
c001a6ce:	51                   	push   ecx
c001a6cf:	52                   	push   edx
c001a6d0:	50                   	push   eax
c001a6d1:	56                   	push   esi
c001a6d2:	e8 cd 81 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001a6d7:	83 c4 10             	add    esp,0x10
c001a6da:	85 c0                	test   eax,eax
c001a6dc:	0f 85 8c 00 00 00    	jne    c001a76e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6e2:	83 ec 0c             	sub    esp,0xc
c001a6e5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a6e9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a6ed:	31 ed                	xor    ebp,ebp
c001a6ef:	0f af c2             	imul   eax,edx
c001a6f2:	50                   	push   eax
c001a6f3:	e8 34 4a ff ff       	call   c000f12c <malloc>
c001a6f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a705:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a709:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a70d:	0f af c2             	imul   eax,edx
c001a710:	99                   	cdq    
c001a711:	52                   	push   edx
c001a712:	50                   	push   eax
c001a713:	56                   	push   esi
c001a714:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a717:	83 c4 20             	add    esp,0x20
c001a71a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a722:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a726:	0f 86 80 00 00 00    	jbe    c001a7ac <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a72c:	0f b7 fd             	movzx  edi,bp
c001a72f:	c1 e7 05             	shl    edi,0x5
c001a732:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a736:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a739:	75 6b                	jne    c001a7a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a73b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a73e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a742:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a745:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a749:	52                   	push   edx
c001a74a:	31 d2                	xor    edx,edx
c001a74c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a74f:	52                   	push   edx
c001a750:	50                   	push   eax
c001a751:	56                   	push   esi
c001a752:	e8 4d 81 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	85 c0                	test   eax,eax
c001a75c:	74 17                	je     c001a775 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a75e:	83 ec 0c             	sub    esp,0xc
c001a761:	68 45 84 02 c0       	push   0xc0028445
c001a766:	e8 e8 7a ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	31 c0                	xor    eax,eax
c001a770:	e9 87 00 00 00       	jmp    c001a7fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a775:	83 ec 0c             	sub    esp,0xc
c001a778:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a77b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a77e:	50                   	push   eax
c001a77f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a787:	56                   	push   esi
c001a788:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a78c:	e8 e0 fb ff ff       	call   c001a371 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a791:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a795:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a799:	83 c4 20             	add    esp,0x20
c001a79c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7a0:	73 04                	jae    c001a7a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7a6:	45                   	inc    ebp
c001a7a7:	e9 76 ff ff ff       	jmp    c001a722 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7ac:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7b8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7be:	83 ec 0c             	sub    esp,0xc
c001a7c1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7cc:	05 00 10 00 00       	add    eax,0x1000
c001a7d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7d8:	e8 5f 49 ff ff       	call   c000f13c <free>
c001a7dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7e0:	e8 57 49 ff ff       	call   c000f13c <free>
c001a7e5:	58                   	pop    eax
c001a7e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7ea:	e8 4d 49 ff ff       	call   c000f13c <free>
c001a7ef:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7f2:	e8 4d 80 ff ff       	call   c0012844 <File::close()>
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	b0 01                	mov    al,0x1
c001a7fc:	83 c4 3c             	add    esp,0x3c
c001a7ff:	5b                   	pop    ebx
c001a800:	5e                   	pop    esi
c001a801:	5f                   	pop    edi
c001a802:	5d                   	pop    ebp
c001a803:	c3                   	ret    

c001a804 <Thr::runtimeReferenceHelper()>:
c001a804:	83 ec 18             	sub    esp,0x18
c001a807:	68 4d 84 02 c0       	push   0xc002844d
c001a80c:	e8 42 7a ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001a811:	fa                   	cli    
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	eb fe                	jmp    c001a815 <Thr::runtimeReferenceHelper()+0x11>

c001a817 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a817:	57                   	push   edi
c001a818:	56                   	push   esi
c001a819:	53                   	push   ebx
c001a81a:	31 db                	xor    ebx,ebx
c001a81c:	39 1d 20 b9 02 c0    	cmp    DWORD PTR ds:0xc002b920,ebx
c001a822:	7e 3c                	jle    c001a860 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a824:	8b 34 9d a0 b8 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4760]
c001a82b:	31 ff                	xor    edi,edi
c001a82d:	39 3c 9d a0 b7 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4860],edi
c001a834:	7e 27                	jle    c001a85d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a836:	50                   	push   eax
c001a837:	50                   	push   eax
c001a838:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a83c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a83e:	03 04 9d 20 b8 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd47e0]
c001a845:	50                   	push   eax
c001a846:	e8 22 5f fe ff       	call   c000076d <strcmp>
c001a84b:	83 c4 10             	add    esp,0x10
c001a84e:	85 c0                	test   eax,eax
c001a850:	75 05                	jne    c001a857 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a852:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a855:	eb 0b                	jmp    c001a862 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a857:	83 c6 10             	add    esi,0x10
c001a85a:	47                   	inc    edi
c001a85b:	eb d0                	jmp    c001a82d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a85d:	43                   	inc    ebx
c001a85e:	eb bc                	jmp    c001a81c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a860:	31 c0                	xor    eax,eax
c001a862:	5b                   	pop    ebx
c001a863:	5e                   	pop    esi
c001a864:	5f                   	pop    edi
c001a865:	c3                   	ret    

c001a866 <Thr::loadKernelSymbolTable(char const*)>:
c001a866:	55                   	push   ebp
c001a867:	57                   	push   edi
c001a868:	56                   	push   esi
c001a869:	53                   	push   ebx
c001a86a:	83 ec 68             	sub    esp,0x68
c001a86d:	8b 35 74 b9 02 c0    	mov    esi,DWORD PTR ds:0xc002b974
c001a873:	68 14 01 00 00       	push   0x114
c001a878:	e8 e7 78 ff ff       	call   c0012164 <operator new(unsigned long)>
c001a87d:	83 c4 0c             	add    esp,0xc
c001a880:	89 c3                	mov    ebx,eax
c001a882:	56                   	push   esi
c001a883:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a887:	50                   	push   eax
c001a888:	e8 f5 7e ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001a88d:	5e                   	pop    esi
c001a88e:	5f                   	pop    edi
c001a88f:	6a 01                	push   0x1
c001a891:	53                   	push   ebx
c001a892:	e8 4f 7f ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	31 d2                	xor    edx,edx
c001a89c:	85 c0                	test   eax,eax
c001a89e:	0f 85 79 02 00 00    	jne    c001ab1d <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8a4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	6a 34                	push   0x34
c001a8b1:	e8 76 48 ff ff       	call   c000f12c <malloc>
c001a8b6:	59                   	pop    ecx
c001a8b7:	89 c7                	mov    edi,eax
c001a8b9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8bf:	56                   	push   esi
c001a8c0:	57                   	push   edi
c001a8c1:	6a 00                	push   0x0
c001a8c3:	6a 34                	push   0x34
c001a8c5:	53                   	push   ebx
c001a8c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8c9:	83 c4 20             	add    esp,0x20
c001a8cc:	85 c0                	test   eax,eax
c001a8ce:	74 17                	je     c001a8e7 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	68 6f 84 02 c0       	push   0xc002846f
c001a8d8:	e8 f4 e0 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001a8dd:	83 c4 10             	add    esp,0x10
c001a8e0:	31 d2                	xor    edx,edx
c001a8e2:	e9 36 02 00 00       	jmp    c001ab1d <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8e7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a8ed:	75 e1                	jne    c001a8d0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a8ef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a8f2:	85 c0                	test   eax,eax
c001a8f4:	74 da                	je     c001a8d0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a8f6:	52                   	push   edx
c001a8f7:	31 d2                	xor    edx,edx
c001a8f9:	52                   	push   edx
c001a8fa:	50                   	push   eax
c001a8fb:	53                   	push   ebx
c001a8fc:	e8 a3 7f ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	85 c0                	test   eax,eax
c001a906:	75 c8                	jne    c001a8d0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a908:	83 ec 0c             	sub    esp,0xc
c001a90b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a90f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a913:	31 ed                	xor    ebp,ebp
c001a915:	0f af c2             	imul   eax,edx
c001a918:	50                   	push   eax
c001a919:	e8 0e 48 ff ff       	call   c000f12c <malloc>
c001a91e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a921:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a925:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a927:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a92b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a92f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a933:	0f af c2             	imul   eax,edx
c001a936:	99                   	cdq    
c001a937:	52                   	push   edx
c001a938:	50                   	push   eax
c001a939:	53                   	push   ebx
c001a93a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a93d:	83 c4 20             	add    esp,0x20
c001a940:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a948:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a958:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a960:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a964:	0f 86 aa 00 00 00    	jbe    c001aa14 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a96a:	0f b7 f5             	movzx  esi,bp
c001a96d:	6b f6 28             	imul   esi,esi,0x28
c001a970:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a974:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a977:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a97b:	50                   	push   eax
c001a97c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a980:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a984:	8b 16                	mov    edx,DWORD PTR [esi]
c001a986:	6b c0 28             	imul   eax,eax,0x28
c001a989:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a98d:	89 d0                	mov    eax,edx
c001a98f:	31 d2                	xor    edx,edx
c001a991:	52                   	push   edx
c001a992:	50                   	push   eax
c001a993:	53                   	push   ebx
c001a994:	e8 0b 7f ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001a999:	83 c4 0c             	add    esp,0xc
c001a99c:	6a 20                	push   0x20
c001a99e:	6a 00                	push   0x0
c001a9a0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9a4:	52                   	push   edx
c001a9a5:	e8 d3 5c fe ff       	call   c000067d <memset>
c001a9aa:	58                   	pop    eax
c001a9ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ad:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9b1:	51                   	push   ecx
c001a9b2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9b6:	52                   	push   edx
c001a9b7:	6a 00                	push   0x0
c001a9b9:	6a 1f                	push   0x1f
c001a9bb:	53                   	push   ebx
c001a9bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9bf:	83 c4 18             	add    esp,0x18
c001a9c2:	68 86 84 02 c0       	push   0xc0028486
c001a9c7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9cb:	52                   	push   edx
c001a9cc:	e8 9c 5d fe ff       	call   c000076d <strcmp>
c001a9d1:	83 c4 10             	add    esp,0x10
c001a9d4:	85 c0                	test   eax,eax
c001a9d6:	75 0f                	jne    c001a9e7 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001a9d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a9db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9e7:	50                   	push   eax
c001a9e8:	50                   	push   eax
c001a9e9:	68 8e 84 02 c0       	push   0xc002848e
c001a9ee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001a9f2:	50                   	push   eax
c001a9f3:	e8 75 5d fe ff       	call   c000076d <strcmp>
c001a9f8:	83 c4 10             	add    esp,0x10
c001a9fb:	85 c0                	test   eax,eax
c001a9fd:	75 0f                	jne    c001aa0e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001a9ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa0e:	45                   	inc    ebp
c001aa0f:	e9 4c ff ff ff       	jmp    c001a960 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa19:	75 10                	jne    c001aa2b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa1b:	83 ec 0c             	sub    esp,0xc
c001aa1e:	68 96 84 02 c0       	push   0xc0028496
c001aa23:	e8 a9 df ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa30:	75 10                	jne    c001aa42 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa32:	83 ec 0c             	sub    esp,0xc
c001aa35:	68 96 84 02 c0       	push   0xc0028496
c001aa3a:	e8 92 df ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	31 d2                	xor    edx,edx
c001aa44:	50                   	push   eax
c001aa45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa49:	52                   	push   edx
c001aa4a:	50                   	push   eax
c001aa4b:	53                   	push   ebx
c001aa4c:	e8 53 7e ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001aa51:	5a                   	pop    edx
c001aa52:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa56:	e8 d1 46 ff ff       	call   c000f12c <malloc>
c001aa5b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa63:	89 c1                	mov    ecx,eax
c001aa65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa6d:	5e                   	pop    esi
c001aa6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa70:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aa74:	55                   	push   ebp
c001aa75:	51                   	push   ecx
c001aa76:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aa7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa82:	53                   	push   ebx
c001aa83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa86:	83 c4 14             	add    esp,0x14
c001aa89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa8d:	e8 9a 46 ff ff       	call   c000f12c <malloc>
c001aa92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aa95:	89 c6                	mov    esi,eax
c001aa97:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa99:	56                   	push   esi
c001aa9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaa2:	53                   	push   ebx
c001aaa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaa6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaaa:	8b 15 20 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b920
c001aab0:	83 c4 1c             	add    esp,0x1c
c001aab3:	c1 e8 04             	shr    eax,0x4
c001aab6:	89 04 95 a0 b7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4860],eax
c001aabd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aac1:	31 d2                	xor    edx,edx
c001aac3:	52                   	push   edx
c001aac4:	50                   	push   eax
c001aac5:	53                   	push   ebx
c001aac6:	e8 d9 7d ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001aacb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aace:	31 d2                	xor    edx,edx
c001aad0:	56                   	push   esi
c001aad1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aad5:	52                   	push   edx
c001aad6:	50                   	push   eax
c001aad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aad9:	53                   	push   ebx
c001aada:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aadd:	83 c4 14             	add    esp,0x14
c001aae0:	53                   	push   ebx
c001aae1:	e8 5e 7d ff ff       	call   c0012844 <File::close()>
c001aae6:	5d                   	pop    ebp
c001aae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aaeb:	e8 4c 46 ff ff       	call   c000f13c <free>
c001aaf0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001aaf3:	e8 44 46 ff ff       	call   c000f13c <free>
c001aaf8:	a1 20 b9 02 c0       	mov    eax,ds:0xc002b920
c001aafd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab01:	8d 50 01             	lea    edx,[eax+0x1]
c001ab04:	89 0c 85 a0 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4760],ecx
c001ab0b:	89 15 20 b9 02 c0    	mov    DWORD PTR ds:0xc002b920,edx
c001ab11:	89 34 85 20 b8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd47e0],esi
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	b2 01                	mov    dl,0x1
c001ab1d:	83 c4 5c             	add    esp,0x5c
c001ab20:	88 d0                	mov    al,dl
c001ab22:	5b                   	pop    ebx
c001ab23:	5e                   	pop    esi
c001ab24:	5f                   	pop    edi
c001ab25:	5d                   	pop    ebp
c001ab26:	c3                   	ret    

c001ab27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab27:	55                   	push   ebp
c001ab28:	57                   	push   edi
c001ab29:	56                   	push   esi
c001ab2a:	53                   	push   ebx
c001ab2b:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab31:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab38:	8b 1d 74 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b974
c001ab3e:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab42:	68 14 01 00 00       	push   0x114
c001ab47:	e8 18 76 ff ff       	call   c0012164 <operator new(unsigned long)>
c001ab4c:	83 c4 0c             	add    esp,0xc
c001ab4f:	89 c7                	mov    edi,eax
c001ab51:	53                   	push   ebx
c001ab52:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab59:	50                   	push   eax
c001ab5a:	e8 23 7c ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001ab5f:	5e                   	pop    esi
c001ab60:	5d                   	pop    ebp
c001ab61:	6a 01                	push   0x1
c001ab63:	57                   	push   edi
c001ab64:	e8 7d 7c ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	85 c0                	test   eax,eax
c001ab6e:	0f 85 10 07 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab74:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ab7c:	83 ec 0c             	sub    esp,0xc
c001ab7f:	6a 34                	push   0x34
c001ab81:	e8 a6 45 ff ff       	call   c000f12c <malloc>
c001ab86:	5b                   	pop    ebx
c001ab87:	89 c5                	mov    ebp,eax
c001ab89:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ab8d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ab8f:	53                   	push   ebx
c001ab90:	55                   	push   ebp
c001ab91:	6a 00                	push   0x0
c001ab93:	6a 34                	push   0x34
c001ab95:	57                   	push   edi
c001ab96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab99:	83 c4 20             	add    esp,0x20
c001ab9c:	85 c0                	test   eax,eax
c001ab9e:	0f 85 e0 06 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001aba4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abab:	0f 85 d3 06 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abb1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abb4:	85 c0                	test   eax,eax
c001abb6:	0f 84 c8 06 00 00    	je     c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abbc:	31 d2                	xor    edx,edx
c001abbe:	51                   	push   ecx
c001abbf:	52                   	push   edx
c001abc0:	50                   	push   eax
c001abc1:	57                   	push   edi
c001abc2:	e8 dd 7c ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001abc7:	83 c4 10             	add    esp,0x10
c001abca:	85 c0                	test   eax,eax
c001abcc:	0f 85 b2 06 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abd2:	83 ec 0c             	sub    esp,0xc
c001abd5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001abd8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001abdc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abe0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001abe4:	0f af c2             	imul   eax,edx
c001abe7:	50                   	push   eax
c001abe8:	e8 3f 45 ff ff       	call   c000f12c <malloc>
c001abed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abf4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfa:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001abfe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac02:	0f af c2             	imul   eax,edx
c001ac05:	99                   	cdq    
c001ac06:	52                   	push   edx
c001ac07:	50                   	push   eax
c001ac08:	57                   	push   edi
c001ac09:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac0c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac0f:	83 c4 20             	add    esp,0x20
c001ac12:	85 c0                	test   eax,eax
c001ac14:	0f 84 6a 06 00 00    	je     c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac1a:	52                   	push   edx
c001ac1b:	31 d2                	xor    edx,edx
c001ac1d:	52                   	push   edx
c001ac1e:	50                   	push   eax
c001ac1f:	57                   	push   edi
c001ac20:	e8 7f 7c ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	85 c0                	test   eax,eax
c001ac2a:	0f 85 54 06 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac30:	83 ec 0c             	sub    esp,0xc
c001ac33:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac37:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac3b:	31 f6                	xor    esi,esi
c001ac3d:	0f af c2             	imul   eax,edx
c001ac40:	50                   	push   eax
c001ac41:	e8 e6 44 ff ff       	call   c000f12c <malloc>
c001ac46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac53:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac57:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac5b:	0f af c2             	imul   eax,edx
c001ac5e:	99                   	cdq    
c001ac5f:	52                   	push   edx
c001ac60:	50                   	push   eax
c001ac61:	57                   	push   edi
c001ac62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac65:	83 c4 20             	add    esp,0x20
c001ac68:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac6c:	0f 86 af 00 00 00    	jbe    c001ad21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ac72:	0f b7 de             	movzx  ebx,si
c001ac75:	c1 e3 05             	shl    ebx,0x5
c001ac78:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001ac7c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ac7f:	0f 85 96 00 00 00    	jne    c001ad1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001ac85:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ac88:	31 d2                	xor    edx,edx
c001ac8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac95:	50                   	push   eax
c001ac96:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ac99:	52                   	push   edx
c001ac9a:	50                   	push   eax
c001ac9b:	57                   	push   edi
c001ac9c:	e8 03 7c ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	85 c0                	test   eax,eax
c001aca6:	0f 85 d8 05 00 00    	jne    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acac:	52                   	push   edx
c001acad:	52                   	push   edx
c001acae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001acb2:	68 b0 84 02 c0       	push   0xc00284b0
c001acb7:	e8 97 75 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001acbc:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001acc3:	31 d2                	xor    edx,edx
c001acc5:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001acc9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001accd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acd1:	59                   	pop    ecx
c001acd2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acd4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001acdb:	50                   	push   eax
c001acdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ace0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ace4:	52                   	push   edx
c001ace5:	50                   	push   eax
c001ace6:	57                   	push   edi
c001ace7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001acea:	83 c4 18             	add    esp,0x18
c001aced:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001acf0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001acf3:	50                   	push   eax
c001acf4:	68 d4 84 02 c0       	push   0xc00284d4
c001acf9:	e8 55 75 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001acfe:	83 c4 0c             	add    esp,0xc
c001ad01:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad04:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad07:	50                   	push   eax
c001ad08:	6a 00                	push   0x0
c001ad0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad0e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad12:	50                   	push   eax
c001ad13:	e8 65 59 fe ff       	call   c000067d <memset>
c001ad18:	83 c4 10             	add    esp,0x10
c001ad1b:	46                   	inc    esi
c001ad1c:	e9 47 ff ff ff       	jmp    c001ac68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad21:	31 db                	xor    ebx,ebx
c001ad23:	50                   	push   eax
c001ad24:	68 00 01 00 00       	push   0x100
c001ad29:	6a 00                	push   0x0
c001ad2b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad2f:	50                   	push   eax
c001ad30:	e8 48 59 fe ff       	call   c000067d <memset>
c001ad35:	83 c4 0c             	add    esp,0xc
c001ad38:	68 00 01 00 00       	push   0x100
c001ad3d:	6a 00                	push   0x0
c001ad3f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad46:	50                   	push   eax
c001ad47:	e8 31 59 fe ff       	call   c000067d <memset>
c001ad4c:	83 c4 10             	add    esp,0x10
c001ad4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad6f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ad77:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ad7b:	0f 86 2f 01 00 00    	jbe    c001aeb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ad81:	0f b7 f3             	movzx  esi,bx
c001ad84:	6b f6 28             	imul   esi,esi,0x28
c001ad87:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001ad8b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ad8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad92:	50                   	push   eax
c001ad93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad97:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001ad9b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ad9d:	6b d2 28             	imul   edx,edx,0x28
c001ada0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ada4:	31 d2                	xor    edx,edx
c001ada6:	52                   	push   edx
c001ada7:	50                   	push   eax
c001ada8:	57                   	push   edi
c001ada9:	e8 f6 7a ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001adae:	83 c4 0c             	add    esp,0xc
c001adb1:	6a 20                	push   0x20
c001adb3:	6a 00                	push   0x0
c001adb5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001adbc:	51                   	push   ecx
c001adbd:	e8 bb 58 fe ff       	call   c000067d <memset>
c001adc2:	58                   	pop    eax
c001adc3:	8b 07                	mov    eax,DWORD PTR [edi]
c001adc5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adc9:	52                   	push   edx
c001adca:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001add1:	51                   	push   ecx
c001add2:	6a 00                	push   0x0
c001add4:	6a 1f                	push   0x1f
c001add6:	57                   	push   edi
c001add7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adda:	83 c4 1c             	add    esp,0x1c
c001addd:	6a 09                	push   0x9
c001addf:	68 f1 84 02 c0       	push   0xc00284f1
c001ade4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001adeb:	51                   	push   ecx
c001adec:	e8 f3 57 fe ff       	call   c00005e4 <memcmp>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	85 c0                	test   eax,eax
c001adf6:	75 21                	jne    c001ae19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001adf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adfc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae04:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae08:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae0b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae12:	89 c8                	mov    eax,ecx
c001ae14:	40                   	inc    eax
c001ae15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae19:	50                   	push   eax
c001ae1a:	6a 09                	push   0x9
c001ae1c:	68 fb 84 02 c0       	push   0xc00284fb
c001ae21:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae28:	50                   	push   eax
c001ae29:	e8 b6 57 fe ff       	call   c00005e4 <memcmp>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	85 c0                	test   eax,eax
c001ae33:	75 21                	jne    c001ae56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae41:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae48:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae4f:	89 c8                	mov    eax,ecx
c001ae51:	40                   	inc    eax
c001ae52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae56:	50                   	push   eax
c001ae57:	50                   	push   eax
c001ae58:	68 86 84 02 c0       	push   0xc0028486
c001ae5d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae64:	50                   	push   eax
c001ae65:	e8 03 59 fe ff       	call   c000076d <strcmp>
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	85 c0                	test   eax,eax
c001ae6f:	75 0f                	jne    c001ae80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae71:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ae78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae80:	50                   	push   eax
c001ae81:	50                   	push   eax
c001ae82:	68 8e 84 02 c0       	push   0xc002848e
c001ae87:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae8e:	50                   	push   eax
c001ae8f:	e8 d9 58 fe ff       	call   c000076d <strcmp>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	85 c0                	test   eax,eax
c001ae99:	75 0f                	jne    c001aeaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001ae9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aea2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aea6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeaa:	43                   	inc    ebx
c001aeab:	e9 c7 fe ff ff       	jmp    c001ad77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aeb0:	31 d2                	xor    edx,edx
c001aeb2:	50                   	push   eax
c001aeb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aeb7:	52                   	push   edx
c001aeb8:	50                   	push   eax
c001aeb9:	57                   	push   edi
c001aeba:	e8 e5 79 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001aebf:	5a                   	pop    edx
c001aec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aec4:	e8 63 42 ff ff       	call   c000f12c <malloc>
c001aec9:	31 d2                	xor    edx,edx
c001aecb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aecf:	59                   	pop    ecx
c001aed0:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aed2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001aed6:	53                   	push   ebx
c001aed7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aedb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aedf:	52                   	push   edx
c001aee0:	50                   	push   eax
c001aee1:	57                   	push   edi
c001aee2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aee5:	83 c4 14             	add    esp,0x14
c001aee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aeec:	e8 3b 42 ff ff       	call   c000f12c <malloc>
c001aef1:	31 d2                	xor    edx,edx
c001aef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aef7:	83 c4 0c             	add    esp,0xc
c001aefa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aefe:	52                   	push   edx
c001aeff:	50                   	push   eax
c001af00:	57                   	push   edi
c001af01:	e8 9e 79 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001af06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af09:	31 d2                	xor    edx,edx
c001af0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af0f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af15:	52                   	push   edx
c001af16:	50                   	push   eax
c001af17:	57                   	push   edi
c001af18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af1b:	83 c4 20             	add    esp,0x20
c001af1e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af2a:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af2e:	0f 84 54 03 00 00    	je     c001b288 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af34:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af3b:	31 d2                	xor    edx,edx
c001af3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af41:	c1 e8 03             	shr    eax,0x3
c001af44:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af48:	50                   	push   eax
c001af49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af4d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af51:	52                   	push   edx
c001af52:	50                   	push   eax
c001af53:	57                   	push   edi
c001af54:	e8 4b 79 ff ff       	call   c00128a4 <File::seek(unsigned long long)>
c001af59:	58                   	pop    eax
c001af5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af5e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af65:	e8 c2 41 ff ff       	call   c000f12c <malloc>
c001af6a:	31 d2                	xor    edx,edx
c001af6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af70:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af72:	58                   	pop    eax
c001af73:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af77:	50                   	push   eax
c001af78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af80:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001af87:	52                   	push   edx
c001af88:	50                   	push   eax
c001af89:	57                   	push   edi
c001af8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af8d:	83 c4 20             	add    esp,0x20
c001af90:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001af98:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001af9c:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afa0:	0f 8d c6 02 00 00    	jge    c001b26c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afae:	31 db                	xor    ebx,ebx
c001afb0:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afbb:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afc3:	c1 e8 08             	shr    eax,0x8
c001afc6:	89 c6                	mov    esi,eax
c001afc8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afcc:	c1 e6 04             	shl    esi,0x4
c001afcf:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001afd3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001afd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afda:	85 c0                	test   eax,eax
c001afdc:	0f 85 17 01 00 00    	jne    c001b0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001afe2:	83 ec 0c             	sub    esp,0xc
c001afe5:	b3 01                	mov    bl,0x1
c001afe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afeb:	03 06                	add    eax,DWORD PTR [esi]
c001afed:	50                   	push   eax
c001afee:	e8 24 f8 ff ff       	call   c001a817 <Thr::getAddressOfKernelSymbol(char const*)>
c001aff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001afff:	0f 85 f4 00 00 00    	jne    c001b0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b005:	50                   	push   eax
c001b006:	50                   	push   eax
c001b007:	68 05 85 02 c0       	push   0xc0028505
c001b00c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b010:	03 06                	add    eax,DWORD PTR [esi]
c001b012:	50                   	push   eax
c001b013:	e8 55 57 fe ff       	call   c000076d <strcmp>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	85 c0                	test   eax,eax
c001b01d:	75 0a                	jne    c001b029 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b01f:	b8 6c 34 02 c0       	mov    eax,0xc002346c
c001b024:	e9 ca 00 00 00       	jmp    c001b0f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b029:	50                   	push   eax
c001b02a:	50                   	push   eax
c001b02b:	68 0f 85 02 c0       	push   0xc002850f
c001b030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b034:	03 06                	add    eax,DWORD PTR [esi]
c001b036:	50                   	push   eax
c001b037:	e8 31 57 fe ff       	call   c000076d <strcmp>
c001b03c:	83 c4 10             	add    esp,0x10
c001b03f:	85 c0                	test   eax,eax
c001b041:	75 0a                	jne    c001b04d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b043:	b8 a0 31 02 c0       	mov    eax,0xc00231a0
c001b048:	e9 a6 00 00 00       	jmp    c001b0f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b04d:	53                   	push   ebx
c001b04e:	53                   	push   ebx
c001b04f:	68 18 85 02 c0       	push   0xc0028518
c001b054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b058:	03 06                	add    eax,DWORD PTR [esi]
c001b05a:	50                   	push   eax
c001b05b:	e8 0d 57 fe ff       	call   c000076d <strcmp>
c001b060:	83 c4 10             	add    esp,0x10
c001b063:	85 c0                	test   eax,eax
c001b065:	75 0a                	jne    c001b071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b067:	b8 6c 35 02 c0       	mov    eax,0xc002356c
c001b06c:	e9 82 00 00 00       	jmp    c001b0f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b071:	51                   	push   ecx
c001b072:	51                   	push   ecx
c001b073:	68 22 85 02 c0       	push   0xc0028522
c001b078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b07c:	03 06                	add    eax,DWORD PTR [esi]
c001b07e:	50                   	push   eax
c001b07f:	e8 e9 56 fe ff       	call   c000076d <strcmp>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	85 c0                	test   eax,eax
c001b089:	74 63                	je     c001b0ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b08b:	50                   	push   eax
c001b08c:	50                   	push   eax
c001b08d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b091:	03 06                	add    eax,DWORD PTR [esi]
c001b093:	50                   	push   eax
c001b094:	68 2b 85 02 c0       	push   0xc002852b
c001b099:	e8 b5 71 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001b09e:	58                   	pop    eax
c001b09f:	5a                   	pop    edx
c001b0a0:	68 45 85 02 c0       	push   0xc0028545
c001b0a5:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0ac:	53                   	push   ebx
c001b0ad:	e8 6a 56 fe ff       	call   c000071c <strcpy>
c001b0b2:	59                   	pop    ecx
c001b0b3:	58                   	pop    eax
c001b0b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0b8:	03 06                	add    eax,DWORD PTR [esi]
c001b0ba:	50                   	push   eax
c001b0bb:	53                   	push   ebx
c001b0bc:	e8 12 57 fe ff       	call   c00007d3 <strcat>
c001b0c1:	58                   	pop    eax
c001b0c2:	5a                   	pop    edx
c001b0c3:	68 db 85 02 c0       	push   0xc00285db
c001b0c8:	53                   	push   ebx
c001b0c9:	e8 05 57 fe ff       	call   c00007d3 <strcat>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b0d6:	0f 84 4b 01 00 00    	je     c001b227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b0dc:	83 ec 0c             	sub    esp,0xc
c001b0df:	53                   	push   ebx
c001b0e0:	e8 ec d8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b0e5:	83 c4 10             	add    esp,0x10
c001b0e8:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b0ec:	eb 0b                	jmp    c001b0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b0ee:	b8 ec 32 02 c0       	mov    eax,0xc00232ec
c001b0f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0f7:	b3 01                	mov    bl,0x1
c001b0f9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b0fe:	0f 85 80 00 00 00    	jne    c001b184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b104:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b10b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b10f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b113:	01 ce                	add    esi,ecx
c001b115:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b11d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b11f:	0f 94 c2             	sete   dl
c001b122:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b12a:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b12f:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b133:	84 db                	test   bl,bl
c001b135:	74 31                	je     c001b168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b137:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b13b:	01 c3                	add    ebx,eax
c001b13d:	84 d2                	test   dl,dl
c001b13f:	75 0a                	jne    c001b14b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b141:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b145:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b149:	76 32                	jbe    c001b17d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b14b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b150:	0f 84 d1 00 00 00    	je     c001b227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b156:	83 ec 0c             	sub    esp,0xc
c001b159:	68 5c 85 02 c0       	push   0xc002855c
c001b15e:	e8 6e d8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b163:	83 c4 10             	add    esp,0x10
c001b166:	eb 15                	jmp    c001b17d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b168:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b16b:	84 d2                	test   dl,dl
c001b16d:	75 0e                	jne    c001b17d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b16f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b173:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b177:	77 04                	ja     c001b17d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b179:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b17d:	89 1e                	mov    DWORD PTR [esi],ebx
c001b17f:	e9 df 00 00 00       	jmp    c001b263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b184:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b189:	75 6e                	jne    c001b1f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b18b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b192:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b196:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b19a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1a2:	74 17                	je     c001b1bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1a4:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1ac:	74 0d                	je     c001b1bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1ae:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1b2:	83 e8 04             	sub    eax,0x4
c001b1b5:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1b9:	76 17                	jbe    c001b1d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1bb:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1c0:	74 65                	je     c001b227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1c2:	83 ec 0c             	sub    esp,0xc
c001b1c5:	68 78 85 02 c0       	push   0xc0028578
c001b1ca:	e8 02 d8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b1cf:	83 c4 10             	add    esp,0x10
c001b1d2:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1d4:	84 db                	test   bl,bl
c001b1d6:	74 13                	je     c001b1eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b1d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1dc:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b1e3:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b1e7:	01 d0                	add    eax,edx
c001b1e9:	eb 06                	jmp    c001b1f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b1eb:	89 d0                	mov    eax,edx
c001b1ed:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b1f1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b1f5:	89 06                	mov    DWORD PTR [esi],eax
c001b1f7:	eb 6a                	jmp    c001b263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1f9:	50                   	push   eax
c001b1fa:	50                   	push   eax
c001b1fb:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b200:	50                   	push   eax
c001b201:	68 94 85 02 c0       	push   0xc0028594
c001b206:	e8 48 70 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b213:	74 12                	je     c001b227 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b215:	83 ec 0c             	sub    esp,0xc
c001b218:	68 9f 85 02 c0       	push   0xc002859f
c001b21d:	e8 af d7 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	eb 3c                	jmp    c001b263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	57                   	push   edi
c001b22b:	e8 14 76 ff ff       	call   c0012844 <File::close()>
c001b230:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b233:	8b 07                	mov    eax,DWORD PTR [edi]
c001b235:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b238:	59                   	pop    ecx
c001b239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b23d:	e8 fa 3e ff ff       	call   c000f13c <free>
c001b242:	5b                   	pop    ebx
c001b243:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b247:	e8 f0 3e ff ff       	call   c000f13c <free>
c001b24c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b24f:	e8 e8 3e ff ff       	call   c000f13c <free>
c001b254:	5e                   	pop    esi
c001b255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b259:	e8 de 3e ff ff       	call   c000f13c <free>
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	eb 21                	jmp    c001b284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b263:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b267:	e9 2c fd ff ff       	jmp    c001af98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b26c:	83 ec 0c             	sub    esp,0xc
c001b26f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b273:	e8 c4 3e ff ff       	call   c000f13c <free>
c001b278:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	e9 a2 fc ff ff       	jmp    c001af26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b284:	31 c0                	xor    eax,eax
c001b286:	eb 32                	jmp    c001b2ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	57                   	push   edi
c001b28c:	e8 b3 75 ff ff       	call   c0012844 <File::close()>
c001b291:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b294:	8b 07                	mov    eax,DWORD PTR [edi]
c001b296:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b299:	58                   	pop    eax
c001b29a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b29e:	e8 99 3e ff ff       	call   c000f13c <free>
c001b2a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2a6:	e8 91 3e ff ff       	call   c000f13c <free>
c001b2ab:	5a                   	pop    edx
c001b2ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2b0:	e8 87 3e ff ff       	call   c000f13c <free>
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	b0 01                	mov    al,0x1
c001b2ba:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2c0:	5b                   	pop    ebx
c001b2c1:	5e                   	pop    esi
c001b2c2:	5f                   	pop    edi
c001b2c3:	5d                   	pop    ebp
c001b2c4:	c3                   	ret    

c001b2c5 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2c5:	56                   	push   esi
c001b2c6:	31 d2                	xor    edx,edx
c001b2c8:	53                   	push   ebx
c001b2c9:	8b 1d 80 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b180
c001b2cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2d3:	39 d3                	cmp    ebx,edx
c001b2d5:	7e 1b                	jle    c001b2f2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b2d7:	8b 04 95 a0 b3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4c60]
c001b2de:	39 c8                	cmp    eax,ecx
c001b2e0:	77 0d                	ja     c001b2ef <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b2e2:	8b 34 95 a0 b1 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4e60]
c001b2e9:	01 c6                	add    esi,eax
c001b2eb:	39 ce                	cmp    esi,ecx
c001b2ed:	77 05                	ja     c001b2f4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b2ef:	42                   	inc    edx
c001b2f0:	eb e1                	jmp    c001b2d3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b2f2:	31 c0                	xor    eax,eax
c001b2f4:	5b                   	pop    ebx
c001b2f5:	5e                   	pop    esi
c001b2f6:	c3                   	ret    

c001b2f7 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b2f7:	53                   	push   ebx
c001b2f8:	31 c0                	xor    eax,eax
c001b2fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2fe:	8b 1d 80 b1 02 c0    	mov    ebx,DWORD PTR ds:0xc002b180
c001b304:	39 c3                	cmp    ebx,eax
c001b306:	7e 22                	jle    c001b32a <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b308:	8b 14 85 a0 b3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4c60]
c001b30f:	39 ca                	cmp    edx,ecx
c001b311:	77 14                	ja     c001b327 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b313:	03 14 85 a0 b1 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4e60]
c001b31a:	39 ca                	cmp    edx,ecx
c001b31c:	76 09                	jbe    c001b327 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b31e:	8b 04 85 a0 b5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4a60]
c001b325:	eb 05                	jmp    c001b32c <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b327:	40                   	inc    eax
c001b328:	eb da                	jmp    c001b304 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b32a:	31 c0                	xor    eax,eax
c001b32c:	5b                   	pop    ebx
c001b32d:	c3                   	ret    

c001b32e <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b32e:	53                   	push   ebx
c001b32f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b333:	53                   	push   ebx
c001b334:	e8 8c ff ff ff       	call   c001b2c5 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b339:	5a                   	pop    edx
c001b33a:	31 d2                	xor    edx,edx
c001b33c:	85 c0                	test   eax,eax
c001b33e:	74 04                	je     c001b344 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b340:	89 da                	mov    edx,ebx
c001b342:	29 c2                	sub    edx,eax
c001b344:	89 d0                	mov    eax,edx
c001b346:	5b                   	pop    ebx
c001b347:	c3                   	ret    

c001b348 <Thr::loadDLL(char const*, bool)>:
c001b348:	55                   	push   ebp
c001b349:	57                   	push   edi
c001b34a:	56                   	push   esi
c001b34b:	53                   	push   ebx
c001b34c:	81 ec 34 01 00 00    	sub    esp,0x134
c001b352:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b359:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b360:	56                   	push   esi
c001b361:	68 b7 85 02 c0       	push   0xc00285b7
c001b366:	e8 e8 6e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001b36b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b372:	e8 ed 6d ff ff       	call   c0012164 <operator new(unsigned long)>
c001b377:	83 c4 0c             	add    esp,0xc
c001b37a:	89 c3                	mov    ebx,eax
c001b37c:	ff 35 74 b9 02 c0    	push   DWORD PTR ds:0xc002b974
c001b382:	56                   	push   esi
c001b383:	50                   	push   eax
c001b384:	e8 f9 73 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001b389:	83 c4 0c             	add    esp,0xc
c001b38c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b390:	50                   	push   eax
c001b391:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b395:	50                   	push   eax
c001b396:	53                   	push   ebx
c001b397:	e8 f6 76 ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c001b39c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b39e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3ac:	75 0a                	jne    c001b3b8 <Thr::loadDLL(char const*, bool)+0x70>
c001b3ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3b2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3b6:	75 3c                	jne    c001b3f4 <Thr::loadDLL(char const*, bool)+0xac>
c001b3b8:	89 e8                	mov    eax,ebp
c001b3ba:	84 c0                	test   al,al
c001b3bc:	0f 84 3d 01 00 00    	je     c001b4ff <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3c2:	50                   	push   eax
c001b3c3:	50                   	push   eax
c001b3c4:	68 c8 85 02 c0       	push   0xc00285c8
c001b3c9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3cd:	53                   	push   ebx
c001b3ce:	e8 49 53 fe ff       	call   c000071c <strcpy>
c001b3d3:	58                   	pop    eax
c001b3d4:	5a                   	pop    edx
c001b3d5:	56                   	push   esi
c001b3d6:	53                   	push   ebx
c001b3d7:	e8 f7 53 fe ff       	call   c00007d3 <strcat>
c001b3dc:	59                   	pop    ecx
c001b3dd:	5f                   	pop    edi
c001b3de:	68 db 85 02 c0       	push   0xc00285db
c001b3e3:	53                   	push   ebx
c001b3e4:	e8 ea 53 fe ff       	call   c00007d3 <strcat>
c001b3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3ec:	e8 e0 d5 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	e8 06 60 ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c001b3f9:	51                   	push   ecx
c001b3fa:	6a 03                	push   0x3
c001b3fc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b400:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b404:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b40a:	83 d3 00             	adc    ebx,0x0
c001b40d:	89 ca                	mov    edx,ecx
c001b40f:	89 d1                	mov    ecx,edx
c001b411:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b415:	51                   	push   ecx
c001b416:	50                   	push   eax
c001b417:	e8 14 66 ff ff       	call   c0011a30 <VAS::allocatePages(int, int)>
c001b41c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b41f:	89 c3                	mov    ebx,eax
c001b421:	e8 74 52 fe ff       	call   c000069a <strlen>
c001b426:	8b 3d 80 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b180
c001b42c:	40                   	inc    eax
c001b42d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b430:	e8 f7 3c ff ff       	call   c000f12c <malloc>
c001b435:	89 04 bd a0 b5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4a60],eax
c001b43c:	5f                   	pop    edi
c001b43d:	58                   	pop    eax
c001b43e:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c001b443:	56                   	push   esi
c001b444:	ff 34 85 a0 b5 02 c0 	push   DWORD PTR [eax*4-0x3ffd4a60]
c001b44b:	e8 cc 52 fe ff       	call   c000071c <strcpy>
c001b450:	a1 80 b1 02 c0       	mov    eax,ds:0xc002b180
c001b455:	8d 50 01             	lea    edx,[eax+0x1]
c001b458:	89 1c 85 a0 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4c60],ebx
c001b45f:	89 15 80 b1 02 c0    	mov    DWORD PTR ds:0xc002b180,edx
c001b465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b469:	83 c4 0c             	add    esp,0xc
c001b46c:	89 14 85 a0 b1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4e60],edx
c001b473:	6a 01                	push   0x1
c001b475:	53                   	push   ebx
c001b476:	56                   	push   esi
c001b477:	e8 ab f6 ff ff       	call   c001ab27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b47c:	83 c4 10             	add    esp,0x10
c001b47f:	89 c7                	mov    edi,eax
c001b481:	fe c8                	dec    al
c001b483:	74 16                	je     c001b49b <Thr::loadDLL(char const*, bool)+0x153>
c001b485:	89 e8                	mov    eax,ebp
c001b487:	84 c0                	test   al,al
c001b489:	74 10                	je     c001b49b <Thr::loadDLL(char const*, bool)+0x153>
c001b48b:	83 ec 0c             	sub    esp,0xc
c001b48e:	68 dd 85 02 c0       	push   0xc00285dd
c001b493:	e8 39 d5 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b498:	83 c4 10             	add    esp,0x10
c001b49b:	31 f6                	xor    esi,esi
c001b49d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4a5:	05 ff 0f 00 00       	add    eax,0xfff
c001b4aa:	83 d2 00             	adc    edx,0x0
c001b4ad:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4b1:	c1 ea 0c             	shr    edx,0xc
c001b4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4bc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4c0:	ba 00 00 00 00       	mov    edx,0x0
c001b4c5:	89 d0                	mov    eax,edx
c001b4c7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4cb:	73 2c                	jae    c001b4f9 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4cd:	e8 2d 5f ff ff       	call   c00113ff <Virt::getAKernelVAS()>
c001b4d2:	89 f5                	mov    ebp,esi
c001b4d4:	c1 e5 0c             	shl    ebp,0xc
c001b4d7:	52                   	push   edx
c001b4d8:	01 dd                	add    ebp,ebx
c001b4da:	52                   	push   edx
c001b4db:	55                   	push   ebp
c001b4dc:	50                   	push   eax
c001b4dd:	e8 c8 60 ff ff       	call   c00115aa <VAS::getPageTableEntry(unsigned long)>
c001b4e2:	83 c4 10             	add    esp,0x10
c001b4e5:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b4e8:	75 0c                	jne    c001b4f6 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b4ea:	83 ec 0c             	sub    esp,0xc
c001b4ed:	55                   	push   ebp
c001b4ee:	e8 59 41 ff ff       	call   c000f64c <Phys::freePage(unsigned long)>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	46                   	inc    esi
c001b4f7:	eb a4                	jmp    c001b49d <Thr::loadDLL(char const*, bool)+0x155>
c001b4f9:	89 f8                	mov    eax,edi
c001b4fb:	84 c0                	test   al,al
c001b4fd:	75 02                	jne    c001b501 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b4ff:	31 db                	xor    ebx,ebx
c001b501:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b507:	89 d8                	mov    eax,ebx
c001b509:	5b                   	pop    ebx
c001b50a:	5e                   	pop    esi
c001b50b:	5f                   	pop    edi
c001b50c:	5d                   	pop    ebp
c001b50d:	c3                   	ret    

c001b50e <Thr::executeDLL(unsigned long, void*)>:
c001b50e:	56                   	push   esi
c001b50f:	53                   	push   ebx
c001b510:	51                   	push   ecx
c001b511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b515:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b519:	85 db                	test   ebx,ebx
c001b51b:	75 10                	jne    c001b52d <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b51d:	83 ec 0c             	sub    esp,0xc
c001b520:	68 fc 85 02 c0       	push   0xc00285fc
c001b525:	e8 a7 d4 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001b52a:	83 c4 10             	add    esp,0x10
c001b52d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b531:	89 d8                	mov    eax,ebx
c001b533:	5a                   	pop    edx
c001b534:	5b                   	pop    ebx
c001b535:	5e                   	pop    esi
c001b536:	ff e0                	jmp    eax

c001b538 <changeTSS>:
c001b538:	83 ec 14             	sub    esp,0x14
c001b53b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b540:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b543:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001b548:	c1 e2 15             	shl    edx,0x15
c001b54b:	29 d0                	sub    eax,edx
c001b54d:	50                   	push   eax
c001b54e:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001b553:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b559:	05 7c 11 00 00       	add    eax,0x117c
c001b55e:	50                   	push   eax
c001b55f:	e8 8a 56 ff ff       	call   c0010bee <TSS::setESP(unsigned long)>
c001b564:	83 c4 1c             	add    esp,0x1c
c001b567:	c3                   	ret    

c001b568 <Process::addArgs(char**)>:
c001b568:	57                   	push   edi
c001b569:	56                   	push   esi
c001b56a:	53                   	push   ebx
c001b56b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b56f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b573:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b57d:	85 ff                	test   edi,edi
c001b57f:	74 3d                	je     c001b5be <Process::addArgs(char**)+0x56>
c001b581:	8b 07                	mov    eax,DWORD PTR [edi]
c001b583:	85 c0                	test   eax,eax
c001b585:	74 37                	je     c001b5be <Process::addArgs(char**)+0x56>
c001b587:	31 db                	xor    ebx,ebx
c001b589:	83 ec 0c             	sub    esp,0xc
c001b58c:	50                   	push   eax
c001b58d:	e8 08 51 fe ff       	call   c000069a <strlen>
c001b592:	40                   	inc    eax
c001b593:	89 04 24             	mov    DWORD PTR [esp],eax
c001b596:	e8 91 3b ff ff       	call   c000f12c <malloc>
c001b59b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5a2:	5a                   	pop    edx
c001b5a3:	59                   	pop    ecx
c001b5a4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5a7:	43                   	inc    ebx
c001b5a8:	50                   	push   eax
c001b5a9:	e8 6e 51 fe ff       	call   c000071c <strcpy>
c001b5ae:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5b4:	83 c4 10             	add    esp,0x10
c001b5b7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5ba:	85 c0                	test   eax,eax
c001b5bc:	75 cb                	jne    c001b589 <Process::addArgs(char**)+0x21>
c001b5be:	5b                   	pop    ebx
c001b5bf:	5e                   	pop    esi
c001b5c0:	5f                   	pop    edi
c001b5c1:	c3                   	ret    

c001b5c2 <Process::Process(char const*, Process*, char**)>:
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 14             	sub    esp,0x14
c001b5c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5cb:	05 0c 02 00 00       	add    eax,0x20c
c001b5d0:	bb 07 00 00 00       	mov    ebx,0x7
c001b5d5:	89 c6                	mov    esi,eax
c001b5d7:	85 db                	test   ebx,ebx
c001b5d9:	78 12                	js     c001b5ed <Process::Process(char const*, Process*, char**)+0x2b>
c001b5db:	83 ec 0c             	sub    esp,0xc
c001b5de:	56                   	push   esi
c001b5df:	e8 3e a1 00 00       	call   c0025722 <ThreadControlBlock::ThreadControlBlock()>
c001b5e4:	83 c4 10             	add    esp,0x10
c001b5e7:	83 c6 63             	add    esi,0x63
c001b5ea:	4b                   	dec    ebx
c001b5eb:	eb ea                	jmp    c001b5d7 <Process::Process(char const*, Process*, char**)+0x15>
c001b5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5fc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b605:	a1 04 9a 02 c0       	mov    eax,ds:0xc0029a04
c001b60a:	8d 50 01             	lea    edx,[eax+0x1]
c001b60d:	89 15 04 9a 02 c0    	mov    DWORD PTR ds:0xc0029a04,edx
c001b613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b617:	89 02                	mov    DWORD PTR [edx],eax
c001b619:	83 ec 0c             	sub    esp,0xc
c001b61c:	6a 10                	push   0x10
c001b61e:	e8 41 6b ff ff       	call   c0012164 <operator new(unsigned long)>
c001b623:	83 c4 10             	add    esp,0x10
c001b626:	89 c3                	mov    ebx,eax
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	6a 00                	push   0x0
c001b62d:	53                   	push   ebx
c001b62e:	e8 a5 67 ff ff       	call   c0011dd8 <VAS::VAS(bool)>
c001b633:	83 c4 10             	add    esp,0x10
c001b636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b63a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b644:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b652:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b656:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b660:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b666:	85 c0                	test   eax,eax
c001b668:	74 42                	je     c001b6ac <Process::Process(char const*, Process*, char**)+0xea>
c001b66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b674:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b688:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b68e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b698:	05 0c 01 00 00       	add    eax,0x10c
c001b69d:	83 ec 08             	sub    esp,0x8
c001b6a0:	52                   	push   edx
c001b6a1:	50                   	push   eax
c001b6a2:	e8 75 50 fe ff       	call   c000071c <strcpy>
c001b6a7:	83 c4 10             	add    esp,0x10
c001b6aa:	eb 5c                	jmp    c001b708 <Process::Process(char const*, Process*, char**)+0x146>
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	68 60 12 00 00       	push   0x1260
c001b6b4:	e8 ab 6a ff ff       	call   c0012164 <operator new(unsigned long)>
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	89 c3                	mov    ebx,eax
c001b6be:	83 ec 08             	sub    esp,0x8
c001b6c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c5:	53                   	push   ebx
c001b6c6:	e8 21 52 ff ff       	call   c00108ec <VgaText::VgaText(char const*)>
c001b6cb:	83 c4 10             	add    esp,0x10
c001b6ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b6e2:	83 ec 0c             	sub    esp,0xc
c001b6e5:	50                   	push   eax
c001b6e6:	e8 02 46 ff ff       	call   c000fced <addToTerminalCycle(VgaText*)>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f2:	05 0c 01 00 00       	add    eax,0x10c
c001b6f7:	83 ec 08             	sub    esp,0x8
c001b6fa:	68 26 86 02 c0       	push   0xc0028626
c001b6ff:	50                   	push   eax
c001b700:	e8 17 50 fe ff       	call   c000071c <strcpy>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70c:	83 c0 0c             	add    eax,0xc
c001b70f:	83 ec 08             	sub    esp,0x8
c001b712:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b716:	50                   	push   eax
c001b717:	e8 00 50 fe ff       	call   c000071c <strcpy>
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	83 ec 08             	sub    esp,0x8
c001b722:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b726:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b72a:	e8 39 fe ff ff       	call   c001b568 <Process::addArgs(char**)>
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	83 ec 08             	sub    esp,0x8
c001b735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b739:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b73d:	e8 ac ee ff ff       	call   c001a5ee <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b749:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b74d:	83 f0 01             	xor    eax,0x1
c001b750:	88 c2                	mov    dl,al
c001b752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b756:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b75c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b761:	83 ec 08             	sub    esp,0x8
c001b764:	50                   	push   eax
c001b765:	68 24 87 02 c0       	push   0xc0028724
c001b76a:	e8 e4 6a ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	90                   	nop
c001b773:	83 c4 14             	add    esp,0x14
c001b776:	5b                   	pop    ebx
c001b777:	5e                   	pop    esi
c001b778:	c3                   	ret    
c001b779:	90                   	nop

c001b77a <Process::Process(bool, char const*, Process*, char**)>:
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	83 ec 14             	sub    esp,0x14
c001b77f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b783:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b78b:	05 0c 02 00 00       	add    eax,0x20c
c001b790:	bb 07 00 00 00       	mov    ebx,0x7
c001b795:	89 c6                	mov    esi,eax
c001b797:	85 db                	test   ebx,ebx
c001b799:	78 12                	js     c001b7ad <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b79b:	83 ec 0c             	sub    esp,0xc
c001b79e:	56                   	push   esi
c001b79f:	e8 7e 9f 00 00       	call   c0025722 <ThreadControlBlock::ThreadControlBlock()>
c001b7a4:	83 c4 10             	add    esp,0x10
c001b7a7:	83 c6 63             	add    esi,0x63
c001b7aa:	4b                   	dec    ebx
c001b7ab:	eb ea                	jmp    c001b797 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7bc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7c5:	a1 04 9a 02 c0       	mov    eax,ds:0xc0029a04
c001b7ca:	8d 50 01             	lea    edx,[eax+0x1]
c001b7cd:	89 15 04 9a 02 c0    	mov    DWORD PTR ds:0xc0029a04,edx
c001b7d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7d7:	89 02                	mov    DWORD PTR [edx],eax
c001b7d9:	83 ec 0c             	sub    esp,0xc
c001b7dc:	6a 10                	push   0x10
c001b7de:	e8 81 69 ff ff       	call   c0012164 <operator new(unsigned long)>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	89 c3                	mov    ebx,eax
c001b7e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7ed:	83 ec 08             	sub    esp,0x8
c001b7f0:	50                   	push   eax
c001b7f1:	53                   	push   ebx
c001b7f2:	e8 e1 65 ff ff       	call   c0011dd8 <VAS::VAS(bool)>
c001b7f7:	83 c4 10             	add    esp,0x10
c001b7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7fe:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b808:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b816:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b81a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b824:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b82a:	85 c0                	test   eax,eax
c001b82c:	74 42                	je     c001b870 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b832:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b838:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b842:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b852:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85c:	05 0c 01 00 00       	add    eax,0x10c
c001b861:	83 ec 08             	sub    esp,0x8
c001b864:	52                   	push   edx
c001b865:	50                   	push   eax
c001b866:	e8 b1 4e fe ff       	call   c000071c <strcpy>
c001b86b:	83 c4 10             	add    esp,0x10
c001b86e:	eb 5c                	jmp    c001b8cc <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	68 60 12 00 00       	push   0x1260
c001b878:	e8 e7 68 ff ff       	call   c0012164 <operator new(unsigned long)>
c001b87d:	83 c4 10             	add    esp,0x10
c001b880:	89 c3                	mov    ebx,eax
c001b882:	83 ec 08             	sub    esp,0x8
c001b885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b889:	53                   	push   ebx
c001b88a:	e8 5d 50 ff ff       	call   c00108ec <VgaText::VgaText(char const*)>
c001b88f:	83 c4 10             	add    esp,0x10
c001b892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b896:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	50                   	push   eax
c001b8aa:	e8 3e 44 ff ff       	call   c000fced <addToTerminalCycle(VgaText*)>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8b6:	05 0c 01 00 00       	add    eax,0x10c
c001b8bb:	83 ec 08             	sub    esp,0x8
c001b8be:	68 26 86 02 c0       	push   0xc0028626
c001b8c3:	50                   	push   eax
c001b8c4:	e8 53 4e fe ff       	call   c000071c <strcpy>
c001b8c9:	83 c4 10             	add    esp,0x10
c001b8cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8d0:	83 c0 0c             	add    eax,0xc
c001b8d3:	83 ec 08             	sub    esp,0x8
c001b8d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8da:	50                   	push   eax
c001b8db:	e8 3c 4e fe ff       	call   c000071c <strcpy>
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	83 ec 08             	sub    esp,0x8
c001b8e6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b8ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b8ee:	e8 75 fc ff ff       	call   c001b568 <Process::addArgs(char**)>
c001b8f3:	83 c4 10             	add    esp,0x10
c001b8f6:	90                   	nop
c001b8f7:	83 c4 14             	add    esp,0x14
c001b8fa:	5b                   	pop    ebx
c001b8fb:	5e                   	pop    esi
c001b8fc:	c3                   	ret    

c001b8fd <disableIRQs()>:
c001b8fd:	fa                   	cli    
c001b8fe:	ff 05 4c b9 02 c0    	inc    DWORD PTR ds:0xc002b94c
c001b904:	c3                   	ret    

c001b905 <getIRQNestingLevel()>:
c001b905:	a1 4c b9 02 c0       	mov    eax,ds:0xc002b94c
c001b90a:	c3                   	ret    

c001b90b <enableIRQs()>:
c001b90b:	a1 4c b9 02 c0       	mov    eax,ds:0xc002b94c
c001b910:	48                   	dec    eax
c001b911:	a3 4c b9 02 c0       	mov    ds:0xc002b94c,eax
c001b916:	75 01                	jne    c001b919 <enableIRQs()+0xe>
c001b918:	fb                   	sti    
c001b919:	c3                   	ret    

c001b91a <lockScheduler()>:
c001b91a:	eb e1                	jmp    c001b8fd <disableIRQs()>

c001b91c <unlockScheduler()>:
c001b91c:	eb ed                	jmp    c001b90b <enableIRQs()>

c001b91e <userModeEntryPoint(void*)>:
c001b91e:	83 ec 0c             	sub    esp,0xc
c001b921:	e8 f6 ff ff ff       	call   c001b91c <unlockScheduler()>
c001b926:	fb                   	sti    
c001b927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b935:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b939:	83 c4 0c             	add    esp,0xc
c001b93c:	e9 9f 49 fe ff       	jmp    c00002e0 <goToUsermode>

c001b941 <lockStuff()>:
c001b941:	e8 b7 ff ff ff       	call   c001b8fd <disableIRQs()>
c001b946:	ff 05 48 b9 02 c0    	inc    DWORD PTR ds:0xc002b948
c001b94c:	c3                   	ret    

c001b94d <taskStartupFunction>:
c001b94d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b952:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b955:	c3                   	ret    

c001b956 <updateTimeUsed()>:
c001b956:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001b95b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b961:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b968:	74 50                	je     c001b9ba <updateTimeUsed()+0x64>
c001b96a:	57                   	push   edi
c001b96b:	56                   	push   esi
c001b96c:	53                   	push   ebx
c001b96d:	0f 31                	rdtsc  
c001b96f:	89 c1                	mov    ecx,eax
c001b971:	a3 88 b9 02 c0       	mov    ds:0xc002b988,eax
c001b976:	2b 0d 78 b9 02 c0    	sub    ecx,DWORD PTR ds:0xc002b978
c001b97c:	89 d3                	mov    ebx,edx
c001b97e:	89 0d 80 b9 02 c0    	mov    DWORD PTR ds:0xc002b980,ecx
c001b984:	1b 1d 7c b9 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b97c
c001b98a:	a3 78 b9 02 c0       	mov    ds:0xc002b978,eax
c001b98f:	89 1d 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,ebx
c001b995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99a:	89 15 8c b9 02 c0    	mov    DWORD PTR ds:0xc002b98c,edx
c001b9a0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9a3:	89 15 7c b9 02 c0    	mov    DWORD PTR ds:0xc002b97c,edx
c001b9a9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9ac:	01 f1                	add    ecx,esi
c001b9ae:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9b1:	11 fb                	adc    ebx,edi
c001b9b3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9b6:	5b                   	pop    ebx
c001b9b7:	5e                   	pop    esi
c001b9b8:	5f                   	pop    edi
c001b9b9:	c3                   	ret    
c001b9ba:	c3                   	ret    

c001b9bb <switchToThread(ThreadControlBlock*)>:
c001b9bb:	53                   	push   ebx
c001b9bc:	83 ec 08             	sub    esp,0x8
c001b9bf:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001b9c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c8:	85 c0                	test   eax,eax
c001b9ca:	75 30                	jne    c001b9fc <switchToThread(ThreadControlBlock*)+0x41>
c001b9cc:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9cf:	3c ff                	cmp    al,0xff
c001b9d1:	74 25                	je     c001b9f8 <switchToThread(ThreadControlBlock*)+0x3d>
c001b9d3:	0f b6 d0             	movzx  edx,al
c001b9d6:	b8 84 03 00 00       	mov    eax,0x384
c001b9db:	29 d0                	sub    eax,edx
c001b9dd:	c1 e0 10             	shl    eax,0x10
c001b9e0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001b9e3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001b9e6:	e8 6b ff ff ff       	call   c001b956 <updateTimeUsed()>
c001b9eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b9ef:	83 c4 08             	add    esp,0x8
c001b9f2:	5b                   	pop    ebx
c001b9f3:	e9 21 49 fe ff       	jmp    c0000319 <switchToThreadASM>
c001b9f8:	31 c0                	xor    eax,eax
c001b9fa:	eb e7                	jmp    c001b9e3 <switchToThread(ThreadControlBlock*)+0x28>
c001b9fc:	c7 05 44 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x1
c001ba06:	83 c4 08             	add    esp,0x8
c001ba09:	5b                   	pop    ebx
c001ba0a:	c3                   	ret    
c001ba0b:	90                   	nop

c001ba0c <Semaphore::Semaphore(int)>:
c001ba0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba14:	89 10                	mov    DWORD PTR [eax],edx
c001ba16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba1a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba30:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba37:	90                   	nop
c001ba38:	c3                   	ret    
c001ba39:	90                   	nop

c001ba3a <Mutex::Mutex()>:
c001ba3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba3e:	6a 01                	push   0x1
c001ba40:	50                   	push   eax
c001ba41:	e8 c6 ff ff ff       	call   c001ba0c <Semaphore::Semaphore(int)>
c001ba46:	83 c4 08             	add    esp,0x8
c001ba49:	90                   	nop
c001ba4a:	c3                   	ret    
c001ba4b:	90                   	nop

c001ba4c <Process::createThread(void (*)(void*), void*, int)>:
c001ba4c:	55                   	push   ebp
c001ba4d:	31 c9                	xor    ecx,ecx
c001ba4f:	57                   	push   edi
c001ba50:	56                   	push   esi
c001ba51:	53                   	push   ebx
c001ba52:	83 ec 1c             	sub    esp,0x1c
c001ba55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba59:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba60:	89 f2                	mov    edx,esi
c001ba62:	0f b7 c2             	movzx  eax,dx
c001ba65:	83 e2 01             	and    edx,0x1
c001ba68:	74 14                	je     c001ba7e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba6a:	d1 f8                	sar    eax,1
c001ba6c:	41                   	inc    ecx
c001ba6d:	89 c2                	mov    edx,eax
c001ba6f:	83 f9 10             	cmp    ecx,0x10
c001ba72:	75 ee                	jne    c001ba62 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba74:	83 c4 1c             	add    esp,0x1c
c001ba77:	31 c0                	xor    eax,eax
c001ba79:	5b                   	pop    ebx
c001ba7a:	5e                   	pop    esi
c001ba7b:	5f                   	pop    edi
c001ba7c:	5d                   	pop    ebp
c001ba7d:	c3                   	ret    
c001ba7e:	83 ec 08             	sub    esp,0x8
c001ba81:	b8 01 00 00 00       	mov    eax,0x1
c001ba86:	d3 e0                	shl    eax,cl
c001ba88:	09 c6                	or     esi,eax
c001ba8a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ba90:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001ba97:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ba9a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ba9d:	01 ce                	add    esi,ecx
c001ba9f:	89 f0                	mov    eax,esi
c001baa1:	c1 e0 05             	shl    eax,0x5
c001baa4:	01 c6                	add    esi,eax
c001baa6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001baa9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001baaf:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bab5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bab9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001babf:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bac5:	89 ca                	mov    edx,ecx
c001bac7:	f7 da                	neg    edx
c001bac9:	c1 e2 15             	shl    edx,0x15
c001bacc:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bad2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bad8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001badc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bae6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001baec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001baf0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001baf6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb00:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb0a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb11:	50                   	push   eax
c001bb12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb16:	68 68 b9 02 c0       	push   0xc002b968
c001bb1b:	e8 90 9a 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb20:	83 c4 10             	add    esp,0x10
c001bb23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb27:	83 c4 1c             	add    esp,0x1c
c001bb2a:	5b                   	pop    ebx
c001bb2b:	5e                   	pop    esi
c001bb2c:	5f                   	pop    edi
c001bb2d:	5d                   	pop    ebp
c001bb2e:	c3                   	ret    
c001bb2f:	90                   	nop

c001bb30 <Process::createUserThread()>:
c001bb30:	83 ec 0c             	sub    esp,0xc
c001bb33:	68 80 00 00 00       	push   0x80
c001bb38:	6a 00                	push   0x0
c001bb3a:	68 1e b9 01 c0       	push   0xc001b91e
c001bb3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb43:	e8 04 ff ff ff       	call   c001ba4c <Process::createThread(void (*)(void*), void*, int)>
c001bb48:	83 c4 1c             	add    esp,0x1c
c001bb4b:	c3                   	ret    

c001bb4c <setupMultitasking(void (*)())>:
c001bb4c:	56                   	push   esi
c001bb4d:	53                   	push   ebx
c001bb4e:	53                   	push   ebx
c001bb4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb53:	eb 10                	jmp    c001bb65 <setupMultitasking(void (*)())+0x19>
c001bb55:	83 ec 0c             	sub    esp,0xc
c001bb58:	68 68 b9 02 c0       	push   0xc002b968
c001bb5d:	e8 a0 99 00 00       	call   c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb62:	83 c4 10             	add    esp,0x10
c001bb65:	83 ec 0c             	sub    esp,0xc
c001bb68:	68 68 b9 02 c0       	push   0xc002b968
c001bb6d:	e8 74 99 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	84 c0                	test   al,al
c001bb77:	74 dc                	je     c001bb55 <setupMultitasking(void (*)())+0x9>
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	68 3b 07 00 00       	push   0x73b
c001bb81:	e8 de 65 ff ff       	call   c0012164 <operator new(unsigned long)>
c001bb86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bb8d:	89 c3                	mov    ebx,eax
c001bb8f:	6a 00                	push   0x0
c001bb91:	68 2a 86 02 c0       	push   0xc002862a
c001bb96:	6a 01                	push   0x1
c001bb98:	50                   	push   eax
c001bb99:	e8 dc fb ff ff       	call   c001b77a <Process::Process(bool, char const*, Process*, char**)>
c001bb9e:	83 c4 18             	add    esp,0x18
c001bba1:	89 1d 74 b9 02 c0    	mov    DWORD PTR ds:0xc002b974,ebx
c001bba7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbad:	68 4c 87 02 c0       	push   0xc002874c
c001bbb2:	e8 9c 66 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bbb7:	58                   	pop    eax
c001bbb8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbbe:	e8 9e 48 ff ff       	call   c0010461 <setActiveTerminal(VgaText*)>
c001bbc3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbcb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbd4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bbde:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bbe4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bbea:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bbf4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bbfe:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc08:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc0e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc14:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc1e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc24:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc2e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc34:	5a                   	pop    edx
c001bc35:	59                   	pop    ecx
c001bc36:	68 26 86 02 c0       	push   0xc0028626
c001bc3b:	50                   	push   eax
c001bc3c:	e8 db 4a fe ff       	call   c000071c <strcpy>
c001bc41:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc48:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc4c:	83 c4 14             	add    esp,0x14
c001bc4f:	5b                   	pop    ebx
c001bc50:	5e                   	pop    esi
c001bc51:	e9 b5 46 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001bc56 <schedule()>:
c001bc56:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	74 0b                	je     c001bc6a <schedule()+0x14>
c001bc5f:	c7 05 44 b9 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x1
c001bc69:	c3                   	ret    
c001bc6a:	53                   	push   ebx
c001bc6b:	83 ec 14             	sub    esp,0x14
c001bc6e:	68 68 b9 02 c0       	push   0xc002b968
c001bc73:	e8 6e 98 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	84 c0                	test   al,al
c001bc7d:	75 38                	jne    c001bcb7 <schedule()+0x61>
c001bc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc84:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc87:	4a                   	dec    edx
c001bc88:	74 32                	je     c001bcbc <schedule()+0x66>
c001bc8a:	83 ec 0c             	sub    esp,0xc
c001bc8d:	68 68 b9 02 c0       	push   0xc002b968
c001bc92:	e8 47 98 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bc97:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001bc9e:	89 c3                	mov    ebx,eax
c001bca0:	e8 5d 98 00 00       	call   c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bca5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bcac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcaf:	e8 07 fd ff ff       	call   c001b9bb <switchToThread(ThreadControlBlock*)>
c001bcb4:	83 c4 10             	add    esp,0x10
c001bcb7:	83 c4 08             	add    esp,0x8
c001bcba:	5b                   	pop    ebx
c001bcbb:	c3                   	ret    
c001bcbc:	83 ec 08             	sub    esp,0x8
c001bcbf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bcc6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bccc:	68 68 b9 02 c0       	push   0xc002b968
c001bcd1:	e8 da 98 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	eb af                	jmp    c001bc8a <schedule()+0x34>

c001bcdb <unlockStuff()>:
c001bcdb:	a1 48 b9 02 c0       	mov    eax,ds:0xc002b948
c001bce0:	48                   	dec    eax
c001bce1:	a3 48 b9 02 c0       	mov    ds:0xc002b948,eax
c001bce6:	75 09                	jne    c001bcf1 <unlockStuff()+0x16>
c001bce8:	a1 44 b9 02 c0       	mov    eax,ds:0xc002b944
c001bced:	85 c0                	test   eax,eax
c001bcef:	75 05                	jne    c001bcf6 <unlockStuff()+0x1b>
c001bcf1:	e9 15 fc ff ff       	jmp    c001b90b <enableIRQs()>
c001bcf6:	83 ec 0c             	sub    esp,0xc
c001bcf9:	c7 05 44 b9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b944,0x0
c001bd03:	e8 4e ff ff ff       	call   c001bc56 <schedule()>
c001bd08:	83 c4 0c             	add    esp,0xc
c001bd0b:	e9 fb fb ff ff       	jmp    c001b90b <enableIRQs()>

c001bd10 <Semaphore::tryAcquire()>:
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd17:	e8 25 fc ff ff       	call   c001b941 <lockStuff()>
c001bd1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd1f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd21:	7c 0b                	jl     c001bd2e <Semaphore::tryAcquire()+0x1e>
c001bd23:	e8 b3 ff ff ff       	call   c001bcdb <unlockStuff()>
c001bd28:	31 c0                	xor    eax,eax
c001bd2a:	83 c4 0c             	add    esp,0xc
c001bd2d:	c3                   	ret    
c001bd2e:	42                   	inc    edx
c001bd2f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd32:	e8 a4 ff ff ff       	call   c001bcdb <unlockStuff()>
c001bd37:	b0 01                	mov    al,0x1
c001bd39:	83 c4 0c             	add    esp,0xc
c001bd3c:	c3                   	ret    
c001bd3d:	90                   	nop

c001bd3e <Semaphore::assertLocked(char const*)>:
c001bd3e:	83 ec 0c             	sub    esp,0xc
c001bd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd49:	e8 f3 fb ff ff       	call   c001b941 <lockStuff()>
c001bd4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd50:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd53:	7c 05                	jl     c001bd5a <Semaphore::assertLocked(char const*)+0x1c>
c001bd55:	83 c4 0c             	add    esp,0xc
c001bd58:	eb 81                	jmp    c001bcdb <unlockStuff()>
c001bd5a:	83 ec 0c             	sub    esp,0xc
c001bd5d:	52                   	push   edx
c001bd5e:	e8 6e cc ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	83 c4 0c             	add    esp,0xc
c001bd69:	e9 6d ff ff ff       	jmp    c001bcdb <unlockStuff()>

c001bd6e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd6e:	83 ec 0c             	sub    esp,0xc
c001bd71:	e8 8f fb ff ff       	call   c001b905 <getIRQNestingLevel()>
c001bd76:	83 ec 08             	sub    esp,0x8
c001bd79:	50                   	push   eax
c001bd7a:	68 80 87 02 c0       	push   0xc0028780
c001bd7f:	e8 cf 64 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bd84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bd88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bd90:	e8 c1 fe ff ff       	call   c001bc56 <schedule()>
c001bd95:	e8 82 fb ff ff       	call   c001b91c <unlockScheduler()>
c001bd9a:	e8 66 fb ff ff       	call   c001b905 <getIRQNestingLevel()>
c001bd9f:	5a                   	pop    edx
c001bda0:	59                   	pop    ecx
c001bda1:	50                   	push   eax
c001bda2:	68 b4 87 02 c0       	push   0xc00287b4
c001bda7:	e8 a7 64 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bdac:	83 c4 1c             	add    esp,0x1c
c001bdaf:	c3                   	ret    

c001bdb0 <blockTask(TaskState)>:
c001bdb0:	83 ec 0c             	sub    esp,0xc
c001bdb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdb7:	e8 5e fb ff ff       	call   c001b91a <lockScheduler()>
c001bdbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdc4:	e8 8d fe ff ff       	call   c001bc56 <schedule()>
c001bdc9:	83 c4 0c             	add    esp,0xc
c001bdcc:	e9 4b fb ff ff       	jmp    c001b91c <unlockScheduler()>

c001bdd1 <waitTask(int, int*, int)>:
c001bdd1:	83 ec 18             	sub    esp,0x18
c001bdd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdd9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bddd:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bde0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bde4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001bdec:	6a 07                	push   0x7
c001bdee:	e8 bd ff ff ff       	call   c001bdb0 <blockTask(TaskState)>
c001bdf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001bdfe:	85 d2                	test   edx,edx
c001be00:	74 0a                	je     c001be0c <waitTask(int, int*, int)+0x3b>
c001be02:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be05:	89 02                	mov    DWORD PTR [edx],eax
c001be07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be0f:	83 c4 0c             	add    esp,0xc
c001be12:	c3                   	ret    

c001be13 <nanoSleepUntil(unsigned long long)>:
c001be13:	83 ec 0c             	sub    esp,0xc
c001be16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be1e:	3b 05 d0 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aad0
c001be24:	89 d1                	mov    ecx,edx
c001be26:	1b 0d d4 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aad4
c001be2c:	73 04                	jae    c001be32 <nanoSleepUntil(unsigned long long)+0x1f>
c001be2e:	83 c4 0c             	add    esp,0xc
c001be31:	c3                   	ret    
c001be32:	e8 0a fb ff ff       	call   c001b941 <lockStuff()>
c001be37:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be3d:	83 ec 08             	sub    esp,0x8
c001be40:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be43:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be46:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be4c:	68 5c b9 02 c0       	push   0xc002b95c
c001be51:	e8 5a 97 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be56:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be5d:	e8 4e ff ff ff       	call   c001bdb0 <blockTask(TaskState)>
c001be62:	83 c4 1c             	add    esp,0x1c
c001be65:	e9 71 fe ff ff       	jmp    c001bcdb <unlockStuff()>

c001be6a <nanoSleep(unsigned long long)>:
c001be6a:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c001be6f:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c001be75:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be79:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001be7d:	eb 94                	jmp    c001be13 <nanoSleepUntil(unsigned long long)>

c001be7f <sleep(unsigned long long)>:
c001be7f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001be87:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001be8c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001be90:	01 ca                	add    edx,ecx
c001be92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be9a:	eb ce                	jmp    c001be6a <nanoSleep(unsigned long long)>

c001be9c <Semaphore::acquire()>:
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bea3:	e8 99 fa ff ff       	call   c001b941 <lockStuff()>
c001bea8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001beab:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bead:	7d 0c                	jge    c001bebb <Semaphore::acquire()+0x1f>
c001beaf:	42                   	inc    edx
c001beb0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001beb3:	83 c4 0c             	add    esp,0xc
c001beb6:	e9 20 fe ff ff       	jmp    c001bcdb <unlockStuff()>
c001bebb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bec1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bec8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001becb:	85 d2                	test   edx,edx
c001becd:	74 2a                	je     c001bef9 <Semaphore::acquire()+0x5d>
c001becf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bed2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bed8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bedb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bee1:	83 ec 0c             	sub    esp,0xc
c001bee4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bee7:	6a 05                	push   0x5
c001bee9:	e8 c2 fe ff ff       	call   c001bdb0 <blockTask(TaskState)>
c001beee:	83 c4 10             	add    esp,0x10
c001bef1:	83 c4 0c             	add    esp,0xc
c001bef4:	e9 e2 fd ff ff       	jmp    c001bcdb <unlockStuff()>
c001bef9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001beff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf02:	eb d7                	jmp    c001bedb <Semaphore::acquire()+0x3f>

c001bf04 <taskReturned>:
c001bf04:	83 ec 18             	sub    esp,0x18
c001bf07:	68 e8 87 02 c0       	push   0xc00287e8
c001bf0c:	e8 c0 ca ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001bf11:	83 c4 10             	add    esp,0x10
c001bf14:	83 ec 0c             	sub    esp,0xc
c001bf17:	6a 02                	push   0x2
c001bf19:	e8 92 fe ff ff       	call   c001bdb0 <blockTask(TaskState)>
c001bf1e:	e8 f7 f9 ff ff       	call   c001b91a <lockScheduler()>
c001bf23:	e8 2e fd ff ff       	call   c001bc56 <schedule()>
c001bf28:	e8 ef f9 ff ff       	call   c001b91c <unlockScheduler()>
c001bf2d:	83 c4 10             	add    esp,0x10
c001bf30:	eb e2                	jmp    c001bf14 <taskReturned+0x10>

c001bf32 <unblockTask(ThreadControlBlock*)>:
c001bf32:	53                   	push   ebx
c001bf33:	83 ec 08             	sub    esp,0x8
c001bf36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3a:	e8 db f9 ff ff       	call   c001b91a <lockScheduler()>
c001bf3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf42:	85 c0                	test   eax,eax
c001bf44:	74 5c                	je     c001bfa2 <unblockTask(ThreadControlBlock*)+0x70>
c001bf46:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf49:	48                   	dec    eax
c001bf4a:	74 31                	je     c001bf7d <unblockTask(ThreadControlBlock*)+0x4b>
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	68 68 b9 02 c0       	push   0xc002b968
c001bf54:	e8 85 95 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf59:	83 c4 10             	add    esp,0x10
c001bf5c:	85 c0                	test   eax,eax
c001bf5e:	75 17                	jne    c001bf77 <unblockTask(ThreadControlBlock*)+0x45>
c001bf60:	eb 65                	jmp    c001bfc7 <unblockTask(ThreadControlBlock*)+0x95>
c001bf62:	83 ec 08             	sub    esp,0x8
c001bf65:	50                   	push   eax
c001bf66:	68 68 b9 02 c0       	push   0xc002b968
c001bf6b:	e8 48 98 00 00       	call   c00257b8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf70:	83 c4 10             	add    esp,0x10
c001bf73:	85 c0                	test   eax,eax
c001bf75:	74 50                	je     c001bfc7 <unblockTask(ThreadControlBlock*)+0x95>
c001bf77:	39 c3                	cmp    ebx,eax
c001bf79:	75 e7                	jne    c001bf62 <unblockTask(ThreadControlBlock*)+0x30>
c001bf7b:	eb 1c                	jmp    c001bf99 <unblockTask(ThreadControlBlock*)+0x67>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	68 d8 88 02 c0       	push   0xc00288d8
c001bf85:	e8 c9 62 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bf8a:	c7 04 24 64 88 02 c0 	mov    DWORD PTR [esp],0xc0028864
c001bf91:	e8 bd 62 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	83 c4 08             	add    esp,0x8
c001bf9c:	5b                   	pop    ebx
c001bf9d:	e9 7a f9 ff ff       	jmp    c001b91c <unlockScheduler()>
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	68 1c 88 02 c0       	push   0xc002881c
c001bfaa:	e8 a4 62 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bfaf:	c7 04 24 64 88 02 c0 	mov    DWORD PTR [esp],0xc0028864
c001bfb6:	e8 98 62 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001bfbb:	83 c4 10             	add    esp,0x10
c001bfbe:	83 c4 08             	add    esp,0x8
c001bfc1:	5b                   	pop    ebx
c001bfc2:	e9 55 f9 ff ff       	jmp    c001b91c <unlockScheduler()>
c001bfc7:	83 ec 08             	sub    esp,0x8
c001bfca:	53                   	push   ebx
c001bfcb:	68 68 b9 02 c0       	push   0xc002b968
c001bfd0:	e8 db 95 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	83 c4 08             	add    esp,0x8
c001bfdb:	5b                   	pop    ebx
c001bfdc:	e9 3b f9 ff ff       	jmp    c001b91c <unlockScheduler()>

c001bfe1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001bfe1:	55                   	push   ebp
c001bfe2:	57                   	push   edi
c001bfe3:	56                   	push   esi
c001bfe4:	53                   	push   ebx
c001bfe5:	83 ec 1c             	sub    esp,0x1c
c001bfe8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001bfef:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001bff5:	85 c9                	test   ecx,ecx
c001bff7:	7e 20                	jle    c001c019 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001bff9:	31 f6                	xor    esi,esi
c001bffb:	83 ec 0c             	sub    esp,0xc
c001bffe:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c005:	46                   	inc    esi
c001c006:	e8 31 31 ff ff       	call   c000f13c <free>
c001c00b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c00e:	83 c4 10             	add    esp,0x10
c001c011:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c017:	7f e2                	jg     c001bffb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c019:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c023:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c028:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c02b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c02e:	d3 c0                	rol    eax,cl
c001c030:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c037:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c03a:	89 f7                	mov    edi,esi
c001c03c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c044:	0f 85 4f 01 00 00    	jne    c001c199 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c04a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c050:	85 c0                	test   eax,eax
c001c052:	0f 84 aa 00 00 00    	je     c001c102 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c058:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c05b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c05f:	31 c9                	xor    ecx,ecx
c001c061:	eb 10                	jmp    c001c073 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c063:	41                   	inc    ecx
c001c064:	83 f9 10             	cmp    ecx,0x10
c001c067:	0f 84 95 00 00 00    	je     c001c102 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c06d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c073:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c07a:	d3 fa                	sar    edx,cl
c001c07c:	83 e2 01             	and    edx,0x1
c001c07f:	74 e2                	je     c001c063 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c081:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c084:	01 ca                	add    edx,ecx
c001c086:	89 d5                	mov    ebp,edx
c001c088:	c1 e5 05             	shl    ebp,0x5
c001c08b:	01 ea                	add    edx,ebp
c001c08d:	01 d0                	add    eax,edx
c001c08f:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c095:	83 fd 07             	cmp    ebp,0x7
c001c098:	75 c9                	jne    c001c063 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c09a:	05 40 02 00 00       	add    eax,0x240
c001c09f:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0a2:	83 fd ff             	cmp    ebp,0xffffffff
c001c0a5:	0f 8c 08 01 00 00    	jl     c001c1b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0ab:	0f 84 b9 01 00 00    	je     c001c26a <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0b1:	85 ed                	test   ebp,ebp
c001c0b3:	0f 84 a0 01 00 00    	je     c001c259 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0b9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0bb:	75 a6                	jne    c001c063 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0bd:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0c7:	01 d0                	add    eax,edx
c001c0c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0cd:	83 ec 0c             	sub    esp,0xc
c001c0d0:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0d6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0d9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0df:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c0e6:	50                   	push   eax
c001c0e7:	e8 46 fe ff ff       	call   c001bf32 <unblockTask(ThreadControlBlock*)>
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c0f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c0f6:	89 f7                	mov    edi,esi
c001c0f8:	41                   	inc    ecx
c001c0f9:	83 f9 10             	cmp    ecx,0x10
c001c0fc:	0f 85 6b ff ff ff    	jne    c001c06d <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c102:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c108:	85 c0                	test   eax,eax
c001c10a:	74 5d                	je     c001c169 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c10c:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c112:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c118:	74 4f                	je     c001c169 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	68 68 b9 02 c0       	push   0xc002b968
c001c122:	e8 b7 93 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c127:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c12e:	89 c7                	mov    edi,eax
c001c130:	e8 b1 93 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	84 c0                	test   al,al
c001c13a:	0f 84 e4 00 00 00    	je     c001c224 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c140:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c143:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c149:	85 d2                	test   edx,edx
c001c14b:	74 0f                	je     c001c15c <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c14d:	83 ec 0c             	sub    esp,0xc
c001c150:	8b 02                	mov    eax,DWORD PTR [edx]
c001c152:	52                   	push   edx
c001c153:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c156:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c159:	83 c4 10             	add    esp,0x10
c001c15c:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c166:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c169:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c16f:	85 db                	test   ebx,ebx
c001c171:	74 16                	je     c001c189 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	53                   	push   ebx
c001c177:	e8 48 56 ff ff       	call   c00117c4 <VAS::~VAS()>
c001c17c:	58                   	pop    eax
c001c17d:	5a                   	pop    edx
c001c17e:	6a 10                	push   0x10
c001c180:	53                   	push   ebx
c001c181:	e8 ed 5f ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001c186:	83 c4 10             	add    esp,0x10
c001c189:	83 ec 0c             	sub    esp,0xc
c001c18c:	68 31 86 02 c0       	push   0xc0028631
c001c191:	e8 bd 60 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	83 ec 08             	sub    esp,0x8
c001c19c:	68 3b 07 00 00       	push   0x73b
c001c1a1:	68 3f 86 02 c0       	push   0xc002863f
c001c1a6:	e8 a8 60 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c1ab:	83 c4 2c             	add    esp,0x2c
c001c1ae:	5b                   	pop    ebx
c001c1af:	5e                   	pop    esi
c001c1b0:	5f                   	pop    edi
c001c1b1:	5d                   	pop    ebp
c001c1b2:	c3                   	ret    
c001c1b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1b7:	83 ec 0c             	sub    esp,0xc
c001c1ba:	68 1c 89 02 c0       	push   0xc002891c
c001c1bf:	e8 0d c8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001c1c4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1c7:	83 c4 10             	add    esp,0x10
c001c1ca:	89 f7                	mov    edi,esi
c001c1cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1d0:	e9 8e fe ff ff       	jmp    c001c063 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1db:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c1e1:	75 1c                	jne    c001c1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c1e3:	83 ec 0c             	sub    esp,0xc
c001c1e6:	68 84 89 02 c0       	push   0xc0028984
c001c1eb:	e8 63 60 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c1f0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c1f7:	e8 b4 fb ff ff       	call   c001bdb0 <blockTask(TaskState)>
c001c1fc:	83 c4 10             	add    esp,0x10
c001c1ff:	83 ec 08             	sub    esp,0x8
c001c202:	56                   	push   esi
c001c203:	68 68 b9 02 c0       	push   0xc002b968
c001c208:	e8 a3 93 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c20d:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c214:	e8 c5 92 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c219:	83 c4 10             	add    esp,0x10
c001c21c:	39 f8                	cmp    eax,edi
c001c21e:	0f 84 1c ff ff ff    	je     c001c140 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c224:	83 ec 0c             	sub    esp,0xc
c001c227:	68 68 b9 02 c0       	push   0xc002b968
c001c22c:	e8 ad 92 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c231:	c7 04 24 68 b9 02 c0 	mov    DWORD PTR [esp],0xc002b968
c001c238:	89 c6                	mov    esi,eax
c001c23a:	e8 c3 92 00 00       	call   c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c23f:	83 c4 10             	add    esp,0x10
c001c242:	39 f3                	cmp    ebx,esi
c001c244:	74 b9                	je     c001c1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c246:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c249:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c24c:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c252:	75 ab                	jne    c001c1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c254:	e9 7c ff ff ff       	jmp    c001c1d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c25d:	83 ec 0c             	sub    esp,0xc
c001c260:	68 50 89 02 c0       	push   0xc0028950
c001c265:	e9 55 ff ff ff       	jmp    c001c1bf <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c26a:	8b 36                	mov    esi,DWORD PTR [esi]
c001c26c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c270:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c273:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c276:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c27c:	01 d7                	add    edi,edx
c001c27e:	89 f8                	mov    eax,edi
c001c280:	e9 44 fe ff ff       	jmp    c001c0c9 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c285 <cleanerTaskFunction(void*)>:
c001c285:	53                   	push   ebx
c001c286:	83 ec 08             	sub    esp,0x8
c001c289:	e8 8e f6 ff ff       	call   c001b91c <unlockScheduler()>
c001c28e:	e8 87 f6 ff ff       	call   c001b91a <lockScheduler()>
c001c293:	80 3d 2c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b92c,0x0
c001c29a:	0f 85 8e 00 00 00    	jne    c001c32e <cleanerTaskFunction(void*)+0xa9>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	6a 02                	push   0x2
c001c2a5:	e8 c4 fa ff ff       	call   c001bd6e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	c6 05 2c b9 02 c0 00 	mov    BYTE PTR ds:0xc002b92c,0x0
c001c2b4:	e8 88 f6 ff ff       	call   c001b941 <lockStuff()>
c001c2b9:	e8 5c f6 ff ff       	call   c001b91a <lockScheduler()>
c001c2be:	83 ec 0c             	sub    esp,0xc
c001c2c1:	68 50 b9 02 c0       	push   0xc002b950
c001c2c6:	e8 1b 92 00 00       	call   c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	84 c0                	test   al,al
c001c2d0:	75 40                	jne    c001c312 <cleanerTaskFunction(void*)+0x8d>
c001c2d2:	83 ec 0c             	sub    esp,0xc
c001c2d5:	68 50 b9 02 c0       	push   0xc002b950
c001c2da:	e8 ff 91 00 00       	call   c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2df:	c7 04 24 50 b9 02 c0 	mov    DWORD PTR [esp],0xc002b950
c001c2e6:	89 c3                	mov    ebx,eax
c001c2e8:	e8 15 92 00 00       	call   c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c2ed:	c7 04 24 55 86 02 c0 	mov    DWORD PTR [esp],0xc0028655
c001c2f4:	e8 5a 5f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c2f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2fc:	e8 e0 fc ff ff       	call   c001bfe1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c301:	c7 04 24 6e 86 02 c0 	mov    DWORD PTR [esp],0xc002866e
c001c308:	e8 46 5f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	eb ac                	jmp    c001c2be <cleanerTaskFunction(void*)+0x39>
c001c312:	e8 05 f6 ff ff       	call   c001b91c <unlockScheduler()>
c001c317:	e8 bf f9 ff ff       	call   c001bcdb <unlockStuff()>
c001c31c:	e8 f9 f5 ff ff       	call   c001b91a <lockScheduler()>
c001c321:	80 3d 2c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b92c,0x0
c001c328:	0f 84 72 ff ff ff    	je     c001c2a0 <cleanerTaskFunction(void*)+0x1b>
c001c32e:	e8 e9 f5 ff ff       	call   c001b91c <unlockScheduler()>
c001c333:	e9 75 ff ff ff       	jmp    c001c2ad <cleanerTaskFunction(void*)+0x28>

c001c338 <terminateTask(int)>:
c001c338:	83 ec 14             	sub    esp,0x14
c001c33b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c340:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c343:	83 c0 0c             	add    eax,0xc
c001c346:	50                   	push   eax
c001c347:	68 ac 89 02 c0       	push   0xc00289ac
c001c34c:	e8 02 5f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c351:	e8 eb f5 ff ff       	call   c001b941 <lockStuff()>
c001c356:	e8 bf f5 ff ff       	call   c001b91a <lockScheduler()>
c001c35b:	c7 04 24 81 86 02 c0 	mov    DWORD PTR [esp],0xc0028681
c001c362:	e8 ec 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c367:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c36b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c370:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c378:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c37b:	5a                   	pop    edx
c001c37c:	59                   	pop    ecx
c001c37d:	50                   	push   eax
c001c37e:	68 50 b9 02 c0       	push   0xc002b950
c001c383:	e8 28 92 00 00       	call   c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38d:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c394:	c7 04 24 9b 86 02 c0 	mov    DWORD PTR [esp],0xc002869b
c001c39b:	e8 b3 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	a1 28 b9 02 c0       	mov    eax,ds:0xc002b928
c001c3a8:	85 c0                	test   eax,eax
c001c3aa:	74 5a                	je     c001c406 <terminateTask(int)+0xce>
c001c3ac:	83 ec 0c             	sub    esp,0xc
c001c3af:	68 b5 86 02 c0       	push   0xc00286b5
c001c3b4:	e8 9a 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c3b9:	58                   	pop    eax
c001c3ba:	c6 05 2c b9 02 c0 01 	mov    BYTE PTR ds:0xc002b92c,0x1
c001c3c1:	ff 35 28 b9 02 c0    	push   DWORD PTR ds:0xc002b928
c001c3c7:	e8 66 fb ff ff       	call   c001bf32 <unblockTask(ThreadControlBlock*)>
c001c3cc:	c7 04 24 cf 86 02 c0 	mov    DWORD PTR [esp],0xc00286cf
c001c3d3:	e8 7b 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	e8 3c f5 ff ff       	call   c001b91c <unlockScheduler()>
c001c3e0:	e8 f6 f8 ff ff       	call   c001bcdb <unlockStuff()>
c001c3e5:	83 ec 0c             	sub    esp,0xc
c001c3e8:	68 07 87 02 c0       	push   0xc0028707
c001c3ed:	e8 61 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	e8 20 f5 ff ff       	call   c001b91a <lockScheduler()>
c001c3fa:	e8 57 f8 ff ff       	call   c001bc56 <schedule()>
c001c3ff:	e8 18 f5 ff ff       	call   c001b91c <unlockScheduler()>
c001c404:	eb ef                	jmp    c001c3f5 <terminateTask(int)+0xbd>
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	68 e9 86 02 c0       	push   0xc00286e9
c001c40e:	e8 40 5e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001c413:	83 c4 10             	add    esp,0x10
c001c416:	eb c3                	jmp    c001c3db <terminateTask(int)+0xa3>

c001c418 <Thr::terminateFromIRQ(int)>:
c001c418:	83 ec 18             	sub    esp,0x18
c001c41b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c41f:	e8 14 ff ff ff       	call   c001c338 <terminateTask(int)>

c001c424 <Semaphore::release()>:
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42b:	e8 11 f5 ff ff       	call   c001b941 <lockStuff()>
c001c430:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c433:	85 d2                	test   edx,edx
c001c435:	74 1a                	je     c001c451 <Semaphore::release()+0x2d>
c001c437:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c43a:	83 ec 0c             	sub    esp,0xc
c001c43d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c440:	52                   	push   edx
c001c441:	e8 ec fa ff ff       	call   c001bf32 <unblockTask(ThreadControlBlock*)>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	83 c4 0c             	add    esp,0xc
c001c44c:	e9 8a f8 ff ff       	jmp    c001bcdb <unlockStuff()>
c001c451:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c454:	83 c4 0c             	add    esp,0xc
c001c457:	e9 7f f8 ff ff       	jmp    c001bcdb <unlockStuff()>

c001c45c <__static_initialization_and_destruction_0(int, int)>:
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c464:	0f 85 88 00 00 00    	jne    c001c4f2 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c46a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c472:	75 7e                	jne    c001c4f2 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c474:	83 ec 0c             	sub    esp,0xc
c001c477:	68 68 b9 02 c0       	push   0xc002b968
c001c47c:	e8 df 92 00 00       	call   c0025760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c481:	83 c4 10             	add    esp,0x10
c001c484:	83 ec 04             	sub    esp,0x4
c001c487:	68 f8 93 02 c0       	push   0xc00293f8
c001c48c:	68 68 b9 02 c0       	push   0xc002b968
c001c491:	68 20 57 02 c0       	push   0xc0025720
c001c496:	e8 54 5c ff ff       	call   c00120ef <__cxa_atexit>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	83 ec 0c             	sub    esp,0xc
c001c4a1:	68 5c b9 02 c0       	push   0xc002b95c
c001c4a6:	e8 b5 92 00 00       	call   c0025760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	83 ec 04             	sub    esp,0x4
c001c4b1:	68 f8 93 02 c0       	push   0xc00293f8
c001c4b6:	68 5c b9 02 c0       	push   0xc002b95c
c001c4bb:	68 20 57 02 c0       	push   0xc0025720
c001c4c0:	e8 2a 5c ff ff       	call   c00120ef <__cxa_atexit>
c001c4c5:	83 c4 10             	add    esp,0x10
c001c4c8:	83 ec 0c             	sub    esp,0xc
c001c4cb:	68 50 b9 02 c0       	push   0xc002b950
c001c4d0:	e8 8b 92 00 00       	call   c0025760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	83 ec 04             	sub    esp,0x4
c001c4db:	68 f8 93 02 c0       	push   0xc00293f8
c001c4e0:	68 50 b9 02 c0       	push   0xc002b950
c001c4e5:	68 20 57 02 c0       	push   0xc0025720
c001c4ea:	e8 00 5c ff ff       	call   c00120ef <__cxa_atexit>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	90                   	nop
c001c4f3:	83 c4 0c             	add    esp,0xc
c001c4f6:	c3                   	ret    

c001c4f7 <_GLOBAL__sub_I_kernelProcess>:
c001c4f7:	83 ec 0c             	sub    esp,0xc
c001c4fa:	83 ec 08             	sub    esp,0x8
c001c4fd:	68 ff ff 00 00       	push   0xffff
c001c502:	6a 01                	push   0x1
c001c504:	e8 53 ff ff ff       	call   c001c45c <__static_initialization_and_destruction_0(int, int)>
c001c509:	83 c4 10             	add    esp,0x10
c001c50c:	83 c4 0c             	add    esp,0xc
c001c50f:	c3                   	ret    

c001c510 <Vm::vm8086EntryPoint(void*)>:
c001c510:	83 ec 0c             	sub    esp,0xc
c001c513:	e8 04 f4 ff ff       	call   c001b91c <unlockScheduler()>
c001c518:	fb                   	sti    
c001c519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c51e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c522:	52                   	push   edx
c001c523:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c527:	52                   	push   edx
c001c528:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c52c:	52                   	push   edx
c001c52d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c531:	50                   	push   eax
c001c532:	e8 78 3d fe ff       	call   c00002af <goToVM86>
c001c537:	83 c4 1c             	add    esp,0x1c
c001c53a:	c3                   	ret    

c001c53b <Vm::inbv(unsigned short)>:
c001c53b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c53f:	ec                   	in     al,dx
c001c540:	c3                   	ret    

c001c541 <Vm::outbv(unsigned short, unsigned char)>:
c001c541:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c549:	ee                   	out    dx,al
c001c54a:	c3                   	ret    

c001c54b <Vm::realToLinear(unsigned short, unsigned short)>:
c001c54b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c550:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c555:	c1 e0 04             	shl    eax,0x4
c001c558:	01 d0                	add    eax,edx
c001c55a:	c3                   	ret    

c001c55b <Vm::getSegment(unsigned int)>:
c001c55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55f:	c1 e8 10             	shr    eax,0x10
c001c562:	c3                   	ret    

c001c563 <Vm::getOffset(unsigned int)>:
c001c563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c567:	c3                   	ret    

c001c568 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c568:	55                   	push   ebp
c001c569:	57                   	push   edi
c001c56a:	56                   	push   esi
c001c56b:	53                   	push   ebx
c001c56c:	83 ec 2c             	sub    esp,0x2c
c001c56f:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c573:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c577:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c57b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c57f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c583:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c587:	e8 8e f3 ff ff       	call   c001b91a <lockScheduler()>
c001c58c:	68 80 00 00 00       	push   0x80
c001c591:	6a 00                	push   0x0
c001c593:	68 10 c5 01 c0       	push   0xc001c510
c001c598:	55                   	push   ebp
c001c599:	e8 ae f4 ff ff       	call   c001ba4c <Process::createThread(void (*)(void*), void*, int)>
c001c59e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5a2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5a6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5aa:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5ae:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5b2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5b6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5bd:	e8 a2 5b ff ff       	call   c0012164 <operator new(unsigned long)>
c001c5c2:	83 c4 0c             	add    esp,0xc
c001c5c5:	89 c3                	mov    ebx,eax
c001c5c7:	55                   	push   ebp
c001c5c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5cc:	50                   	push   eax
c001c5cd:	e8 b0 61 ff ff       	call   c0012782 <File::File(char const*, Process*)>
c001c5d2:	83 c4 0c             	add    esp,0xc
c001c5d5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5d9:	50                   	push   eax
c001c5da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c5de:	50                   	push   eax
c001c5df:	53                   	push   ebx
c001c5e0:	e8 ad 64 ff ff       	call   c0012a92 <File::stat(unsigned long long*, bool*)>
c001c5e5:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	84 d2                	test   dl,dl
c001c5ee:	74 1c                	je     c001c60c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c5f0:	83 ec 0c             	sub    esp,0xc
c001c5f3:	68 cb 89 02 c0       	push   0xc00289cb
c001c5f8:	e8 d4 c3 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001c5fd:	e8 1a f3 ff ff       	call   c001b91c <unlockScheduler()>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	31 d2                	xor    edx,edx
c001c607:	e9 81 00 00 00       	jmp    c001c68d <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c60c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c610:	51                   	push   ecx
c001c611:	51                   	push   ecx
c001c612:	6a 01                	push   0x1
c001c614:	53                   	push   ebx
c001c615:	e8 cc 61 ff ff       	call   c00127e6 <File::open(FileOpenMode)>
c001c61a:	83 c4 10             	add    esp,0x10
c001c61d:	85 c0                	test   eax,eax
c001c61f:	74 1b                	je     c001c63c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c621:	83 ec 0c             	sub    esp,0xc
c001c624:	68 e4 89 02 c0       	push   0xc00289e4
c001c629:	e8 a3 c3 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001c62e:	e8 e9 f2 ff ff       	call   c001b91c <unlockScheduler()>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c63a:	eb 51                	jmp    c001c68d <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c63c:	83 ec 0c             	sub    esp,0xc
c001c63f:	0f b7 ff             	movzx  edi,di
c001c642:	6a 07                	push   0x7
c001c644:	0f b7 f6             	movzx  esi,si
c001c647:	68 00 01 00 00       	push   0x100
c001c64c:	6a 00                	push   0x0
c001c64e:	6a 00                	push   0x0
c001c650:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c656:	e8 c9 55 ff ff       	call   c0011c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c65b:	83 c4 18             	add    esp,0x18
c001c65e:	57                   	push   edi
c001c65f:	56                   	push   esi
c001c660:	e8 e6 fe ff ff       	call   c001c54b <Vm::realToLinear(unsigned short, unsigned short)>
c001c665:	5a                   	pop    edx
c001c666:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c668:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c66c:	51                   	push   ecx
c001c66d:	50                   	push   eax
c001c66e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c672:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c676:	53                   	push   ebx
c001c677:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c67a:	83 c4 14             	add    esp,0x14
c001c67d:	53                   	push   ebx
c001c67e:	e8 c1 61 ff ff       	call   c0012844 <File::close()>
c001c683:	e8 94 f2 ff ff       	call   c001b91c <unlockScheduler()>
c001c688:	83 c4 10             	add    esp,0x10
c001c68b:	b2 01                	mov    dl,0x1
c001c68d:	83 c4 2c             	add    esp,0x2c
c001c690:	88 d0                	mov    al,dl
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	5d                   	pop    ebp
c001c696:	c3                   	ret    

c001c697 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c697:	57                   	push   edi
c001c698:	56                   	push   esi
c001c699:	53                   	push   ebx
c001c69a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6a6:	83 e8 06             	sub    eax,0x6
c001c6a9:	0f b7 c0             	movzx  eax,ax
c001c6ac:	50                   	push   eax
c001c6ad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6b2:	50                   	push   eax
c001c6b3:	e8 93 fe ff ff       	call   c001c54b <Vm::realToLinear(unsigned short, unsigned short)>
c001c6b8:	5a                   	pop    edx
c001c6b9:	5e                   	pop    esi
c001c6ba:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6bd:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6c6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6c9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6cc:	83 c2 02             	add    edx,0x2
c001c6cf:	66 89 10             	mov    WORD PTR [eax],dx
c001c6d2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6d5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6d9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c6dc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c6e0:	89 d6                	mov    esi,edx
c001c6e2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c6e8:	66 81 e6 ff fd       	and    si,0xfdff
c001c6ed:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c6f1:	74 07                	je     c001c6fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c6f3:	89 d6                	mov    esi,edx
c001c6f5:	66 81 ce 00 02       	or     si,0x200
c001c6fa:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c6fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c703:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c707:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c70f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c712:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c71a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c71d:	5b                   	pop    ebx
c001c71e:	5e                   	pop    esi
c001c71f:	5f                   	pop    edi
c001c720:	c3                   	ret    

c001c721 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c721:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c726:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c72b:	c1 e0 04             	shl    eax,0x4
c001c72e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c731:	c3                   	ret    

c001c732 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c732:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c737:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c73c:	c1 e0 04             	shl    eax,0x4
c001c73f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c743:	c3                   	ret    

c001c744 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c744:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c749:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c74e:	c1 e0 04             	shl    eax,0x4
c001c751:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c754:	c3                   	ret    

c001c755 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c755:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c75a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c75f:	c1 e0 04             	shl    eax,0x4
c001c762:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c766:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c769:	c3                   	ret    

c001c76a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c76a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c76f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c774:	c1 e0 04             	shl    eax,0x4
c001c777:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c77b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c77f:	c3                   	ret    

c001c780 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c780:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c785:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c78a:	c1 e0 04             	shl    eax,0x4
c001c78d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c791:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c794:	c3                   	ret    

c001c795 <Vm::faultHandler(regs*)>:
c001c795:	55                   	push   ebp
c001c796:	57                   	push   edi
c001c797:	56                   	push   esi
c001c798:	53                   	push   ebx
c001c799:	83 ec 1c             	sub    esp,0x1c
c001c79c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7a3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7a7:	0f b7 f0             	movzx  esi,ax
c001c7aa:	52                   	push   edx
c001c7ab:	0f b7 c0             	movzx  eax,ax
c001c7ae:	50                   	push   eax
c001c7af:	e8 97 fd ff ff       	call   c001c54b <Vm::realToLinear(unsigned short, unsigned short)>
c001c7b4:	5a                   	pop    edx
c001c7b5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7b8:	59                   	pop    ecx
c001c7b9:	89 c7                	mov    edi,eax
c001c7bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7cb:	0f b7 c5             	movzx  eax,bp
c001c7ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7d2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7da:	e8 6c fd ff ff       	call   c001c54b <Vm::realToLinear(unsigned short, unsigned short)>
c001c7df:	5a                   	pop    edx
c001c7e0:	59                   	pop    ecx
c001c7e1:	b1 06                	mov    cl,0x6
c001c7e3:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c7e8:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c7ed:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c7f0:	80 fa 9d             	cmp    dl,0x9d
c001c7f3:	0f 84 1d 02 00 00    	je     c001ca16 <Vm::faultHandler(regs*)+0x281>
c001c7f9:	0f 87 8e 00 00 00    	ja     c001c88d <Vm::faultHandler(regs*)+0xf8>
c001c7ff:	80 fa 66             	cmp    dl,0x66
c001c802:	0f 84 89 01 00 00    	je     c001c991 <Vm::faultHandler(regs*)+0x1fc>
c001c808:	77 44                	ja     c001c84e <Vm::faultHandler(regs*)+0xb9>
c001c80a:	80 fa 36             	cmp    dl,0x36
c001c80d:	0f 84 74 01 00 00    	je     c001c987 <Vm::faultHandler(regs*)+0x1f2>
c001c813:	77 1a                	ja     c001c82f <Vm::faultHandler(regs*)+0x9a>
c001c815:	80 fa 26             	cmp    dl,0x26
c001c818:	0f 84 4b 01 00 00    	je     c001c969 <Vm::faultHandler(regs*)+0x1d4>
c001c81e:	80 fa 2e             	cmp    dl,0x2e
c001c821:	0f 85 4a 05 00 00    	jne    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c827:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c82a:	31 c9                	xor    ecx,ecx
c001c82c:	47                   	inc    edi
c001c82d:	eb be                	jmp    c001c7ed <Vm::faultHandler(regs*)+0x58>
c001c82f:	80 fa 64             	cmp    dl,0x64
c001c832:	0f 84 3b 01 00 00    	je     c001c973 <Vm::faultHandler(regs*)+0x1de>
c001c838:	0f 87 3f 01 00 00    	ja     c001c97d <Vm::faultHandler(regs*)+0x1e8>
c001c83e:	80 fa 3e             	cmp    dl,0x3e
c001c841:	0f 85 2a 05 00 00    	jne    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c847:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c84a:	b1 01                	mov    cl,0x1
c001c84c:	eb de                	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c84e:	80 fa 6d             	cmp    dl,0x6d
c001c851:	0f 84 bf 02 00 00    	je     c001cb16 <Vm::faultHandler(regs*)+0x381>
c001c857:	77 17                	ja     c001c870 <Vm::faultHandler(regs*)+0xdb>
c001c859:	80 fa 67             	cmp    dl,0x67
c001c85c:	0f 84 3c 01 00 00    	je     c001c99e <Vm::faultHandler(regs*)+0x209>
c001c862:	80 fa 6c             	cmp    dl,0x6c
c001c865:	0f 84 5d 02 00 00    	je     c001cac8 <Vm::faultHandler(regs*)+0x333>
c001c86b:	e9 01 05 00 00       	jmp    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c870:	80 fa 6f             	cmp    dl,0x6f
c001c873:	0f 84 8b 03 00 00    	je     c001cc04 <Vm::faultHandler(regs*)+0x46f>
c001c879:	0f 82 0f 03 00 00    	jb     c001cb8e <Vm::faultHandler(regs*)+0x3f9>
c001c87f:	80 fa 9c             	cmp    dl,0x9c
c001c882:	0f 84 23 01 00 00    	je     c001c9ab <Vm::faultHandler(regs*)+0x216>
c001c888:	e9 e4 04 00 00       	jmp    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c88d:	80 fa ec             	cmp    dl,0xec
c001c890:	0f 84 7f 04 00 00    	je     c001cd15 <Vm::faultHandler(regs*)+0x580>
c001c896:	77 7b                	ja     c001c913 <Vm::faultHandler(regs*)+0x17e>
c001c898:	80 fa e4             	cmp    dl,0xe4
c001c89b:	0f 84 fe 03 00 00    	je     c001cc9f <Vm::faultHandler(regs*)+0x50a>
c001c8a1:	77 53                	ja     c001c8f6 <Vm::faultHandler(regs*)+0x161>
c001c8a3:	80 fa cd             	cmp    dl,0xcd
c001c8a6:	0f 84 cd 01 00 00    	je     c001ca79 <Vm::faultHandler(regs*)+0x2e4>
c001c8ac:	80 fa cf             	cmp    dl,0xcf
c001c8af:	0f 85 bc 04 00 00    	jne    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c8b5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8bb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8bf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8c2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8c6:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8d9:	66 c1 e8 09          	shr    ax,0x9
c001c8dd:	83 e0 01             	and    eax,0x1
c001c8e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c8e3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c8e6:	83 c0 06             	add    eax,0x6
c001c8e9:	25 ff ff 00 00       	and    eax,0xffff
c001c8ee:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c8f1:	e9 77 04 00 00       	jmp    c001cd6d <Vm::faultHandler(regs*)+0x5d8>
c001c8f6:	80 fa e6             	cmp    dl,0xe6
c001c8f9:	0f 84 ea 03 00 00    	je     c001cce9 <Vm::faultHandler(regs*)+0x554>
c001c8ff:	0f 82 b6 03 00 00    	jb     c001ccbb <Vm::faultHandler(regs*)+0x526>
c001c905:	80 fa e7             	cmp    dl,0xe7
c001c908:	0f 84 f2 03 00 00    	je     c001cd00 <Vm::faultHandler(regs*)+0x56b>
c001c90e:	e9 5e 04 00 00       	jmp    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c913:	80 fa ef             	cmp    dl,0xef
c001c916:	0f 84 3c 04 00 00    	je     c001cd58 <Vm::faultHandler(regs*)+0x5c3>
c001c91c:	77 28                	ja     c001c946 <Vm::faultHandler(regs*)+0x1b1>
c001c91e:	80 fa ed             	cmp    dl,0xed
c001c921:	0f 84 0a 04 00 00    	je     c001cd31 <Vm::faultHandler(regs*)+0x59c>
c001c927:	80 fa ee             	cmp    dl,0xee
c001c92a:	0f 85 41 04 00 00    	jne    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c930:	50                   	push   eax
c001c931:	50                   	push   eax
c001c932:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c936:	50                   	push   eax
c001c937:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c93b:	50                   	push   eax
c001c93c:	e8 00 fc ff ff       	call   c001c541 <Vm::outbv(unsigned short, unsigned char)>
c001c941:	e9 0a 04 00 00       	jmp    c001cd50 <Vm::faultHandler(regs*)+0x5bb>
c001c946:	80 fa fa             	cmp    dl,0xfa
c001c949:	0f 84 5d 01 00 00    	je     c001caac <Vm::faultHandler(regs*)+0x317>
c001c94f:	80 fa fb             	cmp    dl,0xfb
c001c952:	0f 84 62 01 00 00    	je     c001caba <Vm::faultHandler(regs*)+0x325>
c001c958:	80 fa f3             	cmp    dl,0xf3
c001c95b:	0f 85 10 04 00 00    	jne    c001cd71 <Vm::faultHandler(regs*)+0x5dc>
c001c961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c964:	e9 c3 fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c96c:	b1 02                	mov    cl,0x2
c001c96e:	e9 b9 fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c973:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c976:	b1 03                	mov    cl,0x3
c001c978:	e9 af fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c97d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c980:	b1 04                	mov    cl,0x4
c001c982:	e9 a5 fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c98a:	b1 05                	mov    cl,0x5
c001c98c:	e9 9b fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c991:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c994:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c999:	e9 8e fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c99e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9a6:	e9 81 fe ff ff       	jmp    c001c82c <Vm::faultHandler(regs*)+0x97>
c001c9ab:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9b2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9b7:	74 30                	je     c001c9e9 <Vm::faultHandler(regs*)+0x254>
c001c9b9:	83 e9 04             	sub    ecx,0x4
c001c9bc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9c2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9c8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9cb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9d4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9d8:	0f 84 8c 03 00 00    	je     c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001c9de:	80 ce 02             	or     dh,0x2
c001c9e1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9e4:	e9 81 03 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001c9e9:	83 e9 02             	sub    ecx,0x2
c001c9ec:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9f2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9f5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001c9f9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9ff:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca03:	74 05                	je     c001ca0a <Vm::faultHandler(regs*)+0x275>
c001ca05:	80 ce 02             	or     dh,0x2
c001ca08:	eb 03                	jmp    c001ca0d <Vm::faultHandler(regs*)+0x278>
c001ca0a:	80 e6 fd             	and    dh,0xfd
c001ca0d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca11:	e9 54 03 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001ca16:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca1b:	74 2a                	je     c001ca47 <Vm::faultHandler(regs*)+0x2b2>
c001ca1d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca1f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca25:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca2b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca2e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca30:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca36:	c1 e8 09             	shr    eax,0x9
c001ca39:	83 e0 01             	and    eax,0x1
c001ca3c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca3f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca42:	83 c0 04             	add    eax,0x4
c001ca45:	eb 25                	jmp    c001ca6c <Vm::faultHandler(regs*)+0x2d7>
c001ca47:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca4a:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca50:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca53:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca56:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca5c:	66 c1 e8 09          	shr    ax,0x9
c001ca60:	83 e0 01             	and    eax,0x1
c001ca63:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca66:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca69:	83 c0 02             	add    eax,0x2
c001ca6c:	25 ff ff 00 00       	and    eax,0xffff
c001ca71:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca74:	e9 f1 02 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001ca79:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ca7d:	3c ff                	cmp    al,0xff
c001ca7f:	75 10                	jne    c001ca91 <Vm::faultHandler(regs*)+0x2fc>
c001ca81:	83 ec 0c             	sub    esp,0xc
c001ca84:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ca87:	e8 8c f9 ff ff       	call   c001c418 <Thr::terminateFromIRQ(int)>
c001ca8c:	e9 c2 02 00 00       	jmp    c001cd53 <Vm::faultHandler(regs*)+0x5be>
c001ca91:	83 ec 0c             	sub    esp,0xc
c001ca94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca9c:	57                   	push   edi
c001ca9d:	50                   	push   eax
c001ca9e:	53                   	push   ebx
c001ca9f:	e8 f3 fb ff ff       	call   c001c697 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001caa4:	83 c4 20             	add    esp,0x20
c001caa7:	e9 c1 02 00 00       	jmp    c001cd6d <Vm::faultHandler(regs*)+0x5d8>
c001caac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cab1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cab5:	e9 b0 02 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001caba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cabf:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cac3:	e9 a2 02 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cac8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cacd:	74 0d                	je     c001cadc <Vm::faultHandler(regs*)+0x347>
c001cacf:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cad6:	0f 87 e9 02 00 00    	ja     c001cdc5 <Vm::faultHandler(regs*)+0x630>
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cae2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cae6:	50                   	push   eax
c001cae7:	e8 4f fa ff ff       	call   c001c53b <Vm::inbv(unsigned short)>
c001caec:	83 c4 0c             	add    esp,0xc
c001caef:	0f b6 c0             	movzx  eax,al
c001caf2:	0f b7 c9             	movzx  ecx,cx
c001caf5:	50                   	push   eax
c001caf6:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cafa:	50                   	push   eax
c001cafb:	51                   	push   ecx
c001cafc:	e8 54 fc ff ff       	call   c001c755 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb07:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb0b:	74 03                	je     c001cb10 <Vm::faultHandler(regs*)+0x37b>
c001cb0d:	48                   	dec    eax
c001cb0e:	eb 01                	jmp    c001cb11 <Vm::faultHandler(regs*)+0x37c>
c001cb10:	40                   	inc    eax
c001cb11:	0f b7 c0             	movzx  eax,ax
c001cb14:	eb 70                	jmp    c001cb86 <Vm::faultHandler(regs*)+0x3f1>
c001cb16:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb19:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb1c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb21:	74 0c                	je     c001cb2f <Vm::faultHandler(regs*)+0x39a>
c001cb23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb29:	0f 87 96 02 00 00    	ja     c001cdc5 <Vm::faultHandler(regs*)+0x630>
c001cb2f:	0f b7 c9             	movzx  ecx,cx
c001cb32:	0f b7 f6             	movzx  esi,si
c001cb35:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb38:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb3d:	74 20                	je     c001cb5f <Vm::faultHandler(regs*)+0x3ca>
c001cb3f:	ed                   	in     eax,dx
c001cb40:	55                   	push   ebp
c001cb41:	50                   	push   eax
c001cb42:	51                   	push   ecx
c001cb43:	56                   	push   esi
c001cb44:	e8 37 fc ff ff       	call   c001c780 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb4f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb53:	74 05                	je     c001cb5a <Vm::faultHandler(regs*)+0x3c5>
c001cb55:	83 e8 04             	sub    eax,0x4
c001cb58:	eb 27                	jmp    c001cb81 <Vm::faultHandler(regs*)+0x3ec>
c001cb5a:	83 c0 04             	add    eax,0x4
c001cb5d:	eb 22                	jmp    c001cb81 <Vm::faultHandler(regs*)+0x3ec>
c001cb5f:	66 ed                	in     ax,dx
c001cb61:	0f b7 c0             	movzx  eax,ax
c001cb64:	57                   	push   edi
c001cb65:	50                   	push   eax
c001cb66:	51                   	push   ecx
c001cb67:	56                   	push   esi
c001cb68:	e8 fd fb ff ff       	call   c001c76a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb73:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb77:	74 05                	je     c001cb7e <Vm::faultHandler(regs*)+0x3e9>
c001cb79:	83 e8 02             	sub    eax,0x2
c001cb7c:	eb 03                	jmp    c001cb81 <Vm::faultHandler(regs*)+0x3ec>
c001cb7e:	83 c0 02             	add    eax,0x2
c001cb81:	25 ff ff 00 00       	and    eax,0xffff
c001cb86:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cb89:	e9 dc 01 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cb8e:	49                   	dec    ecx
c001cb8f:	80 f9 05             	cmp    cl,0x5
c001cb92:	77 24                	ja     c001cbb8 <Vm::faultHandler(regs*)+0x423>
c001cb94:	0f b6 c9             	movzx  ecx,cl
c001cb97:	ff 24 8d 2c 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd75d4]
c001cb9e:	0f b7 f5             	movzx  esi,bp
c001cba1:	eb 15                	jmp    c001cbb8 <Vm::faultHandler(regs*)+0x423>
c001cba3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cba7:	eb 0f                	jmp    c001cbb8 <Vm::faultHandler(regs*)+0x423>
c001cba9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbad:	eb 09                	jmp    c001cbb8 <Vm::faultHandler(regs*)+0x423>
c001cbaf:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbb3:	eb 03                	jmp    c001cbb8 <Vm::faultHandler(regs*)+0x423>
c001cbb5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbb8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbbb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbc0:	74 0b                	je     c001cbcd <Vm::faultHandler(regs*)+0x438>
c001cbc2:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbc7:	0f 87 f8 01 00 00    	ja     c001cdc5 <Vm::faultHandler(regs*)+0x630>
c001cbcd:	0f b7 c0             	movzx  eax,ax
c001cbd0:	52                   	push   edx
c001cbd1:	52                   	push   edx
c001cbd2:	50                   	push   eax
c001cbd3:	56                   	push   esi
c001cbd4:	e8 48 fb ff ff       	call   c001c721 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbd9:	59                   	pop    ecx
c001cbda:	0f b6 c0             	movzx  eax,al
c001cbdd:	5e                   	pop    esi
c001cbde:	50                   	push   eax
c001cbdf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cbe3:	50                   	push   eax
c001cbe4:	e8 58 f9 ff ff       	call   c001c541 <Vm::outbv(unsigned short, unsigned char)>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbef:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cbf3:	74 03                	je     c001cbf8 <Vm::faultHandler(regs*)+0x463>
c001cbf5:	48                   	dec    eax
c001cbf6:	eb 01                	jmp    c001cbf9 <Vm::faultHandler(regs*)+0x464>
c001cbf8:	40                   	inc    eax
c001cbf9:	0f b7 c0             	movzx  eax,ax
c001cbfc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cbff:	e9 66 01 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cc04:	49                   	dec    ecx
c001cc05:	80 f9 05             	cmp    cl,0x5
c001cc08:	77 1f                	ja     c001cc29 <Vm::faultHandler(regs*)+0x494>
c001cc0a:	0f b6 c9             	movzx  ecx,cl
c001cc0d:	ff 24 8d 44 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd75bc]
c001cc14:	89 ee                	mov    esi,ebp
c001cc16:	eb 11                	jmp    c001cc29 <Vm::faultHandler(regs*)+0x494>
c001cc18:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc1b:	eb 0c                	jmp    c001cc29 <Vm::faultHandler(regs*)+0x494>
c001cc1d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc20:	eb 07                	jmp    c001cc29 <Vm::faultHandler(regs*)+0x494>
c001cc22:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc25:	eb 02                	jmp    c001cc29 <Vm::faultHandler(regs*)+0x494>
c001cc27:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc2c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc31:	74 0c                	je     c001cc3f <Vm::faultHandler(regs*)+0x4aa>
c001cc33:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc39:	0f 87 86 01 00 00    	ja     c001cdc5 <Vm::faultHandler(regs*)+0x630>
c001cc3f:	0f b7 d6             	movzx  edx,si
c001cc42:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc45:	0f b7 c1             	movzx  eax,cx
c001cc48:	81 e7 00 04 00 00    	and    edi,0x400
c001cc4e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc56:	74 1d                	je     c001cc75 <Vm::faultHandler(regs*)+0x4e0>
c001cc58:	55                   	push   ebp
c001cc59:	55                   	push   ebp
c001cc5a:	50                   	push   eax
c001cc5b:	52                   	push   edx
c001cc5c:	e8 e3 fa ff ff       	call   c001c744 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	89 f2                	mov    edx,esi
c001cc66:	ef                   	out    dx,eax
c001cc67:	85 ff                	test   edi,edi
c001cc69:	74 05                	je     c001cc70 <Vm::faultHandler(regs*)+0x4db>
c001cc6b:	83 e9 04             	sub    ecx,0x4
c001cc6e:	eb 21                	jmp    c001cc91 <Vm::faultHandler(regs*)+0x4fc>
c001cc70:	83 c1 04             	add    ecx,0x4
c001cc73:	eb 1c                	jmp    c001cc91 <Vm::faultHandler(regs*)+0x4fc>
c001cc75:	55                   	push   ebp
c001cc76:	55                   	push   ebp
c001cc77:	50                   	push   eax
c001cc78:	52                   	push   edx
c001cc79:	e8 b4 fa ff ff       	call   c001c732 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cc7e:	83 c4 10             	add    esp,0x10
c001cc81:	89 f2                	mov    edx,esi
c001cc83:	66 ef                	out    dx,ax
c001cc85:	85 ff                	test   edi,edi
c001cc87:	74 05                	je     c001cc8e <Vm::faultHandler(regs*)+0x4f9>
c001cc89:	83 e9 02             	sub    ecx,0x2
c001cc8c:	eb 03                	jmp    c001cc91 <Vm::faultHandler(regs*)+0x4fc>
c001cc8e:	83 c1 02             	add    ecx,0x2
c001cc91:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cc97:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001cc9a:	e9 cb 00 00 00       	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cc9f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ccad:	50                   	push   eax
c001ccae:	e8 88 f8 ff ff       	call   c001c53b <Vm::inbv(unsigned short)>
c001ccb3:	0f b6 c0             	movzx  eax,al
c001ccb6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccb9:	eb 3f                	jmp    c001ccfa <Vm::faultHandler(regs*)+0x565>
c001ccbb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ccc0:	74 07                	je     c001ccc9 <Vm::faultHandler(regs*)+0x534>
c001ccc2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccc6:	ed                   	in     eax,dx
c001ccc7:	eb 14                	jmp    c001ccdd <Vm::faultHandler(regs*)+0x548>
c001ccc9:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001cccc:	66 31 c9             	xor    cx,cx
c001cccf:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ccd2:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccd6:	66 ed                	in     ax,dx
c001ccd8:	0f b7 c0             	movzx  eax,ax
c001ccdb:	09 c8                	or     eax,ecx
c001ccdd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cce0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cce4:	e9 84 00 00 00       	jmp    c001cd6d <Vm::faultHandler(regs*)+0x5d8>
c001cce9:	52                   	push   edx
c001ccea:	52                   	push   edx
c001cceb:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ccef:	50                   	push   eax
c001ccf0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ccf4:	50                   	push   eax
c001ccf5:	e8 47 f8 ff ff       	call   c001c541 <Vm::outbv(unsigned short, unsigned char)>
c001ccfa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ccfe:	eb 53                	jmp    c001cd53 <Vm::faultHandler(regs*)+0x5be>
c001cd00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd03:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd07:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd0c:	74 03                	je     c001cd11 <Vm::faultHandler(regs*)+0x57c>
c001cd0e:	ef                   	out    dx,eax
c001cd0f:	eb cf                	jmp    c001cce0 <Vm::faultHandler(regs*)+0x54b>
c001cd11:	66 ef                	out    dx,ax
c001cd13:	eb cb                	jmp    c001cce0 <Vm::faultHandler(regs*)+0x54b>
c001cd15:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd23:	50                   	push   eax
c001cd24:	e8 12 f8 ff ff       	call   c001c53b <Vm::inbv(unsigned short)>
c001cd29:	0f b6 c0             	movzx  eax,al
c001cd2c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd2f:	eb 1f                	jmp    c001cd50 <Vm::faultHandler(regs*)+0x5bb>
c001cd31:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd34:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd39:	74 03                	je     c001cd3e <Vm::faultHandler(regs*)+0x5a9>
c001cd3b:	ed                   	in     eax,dx
c001cd3c:	eb 0d                	jmp    c001cd4b <Vm::faultHandler(regs*)+0x5b6>
c001cd3e:	66 ed                	in     ax,dx
c001cd40:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd43:	0f b7 c0             	movzx  eax,ax
c001cd46:	66 31 d2             	xor    dx,dx
c001cd49:	09 d0                	or     eax,edx
c001cd4b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd4e:	eb 1a                	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cd50:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	eb 15                	jmp    c001cd6d <Vm::faultHandler(regs*)+0x5d8>
c001cd58:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd5b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd5e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd63:	74 03                	je     c001cd68 <Vm::faultHandler(regs*)+0x5d3>
c001cd65:	ef                   	out    dx,eax
c001cd66:	eb 02                	jmp    c001cd6a <Vm::faultHandler(regs*)+0x5d5>
c001cd68:	66 ef                	out    dx,ax
c001cd6a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd6d:	b0 01                	mov    al,0x1
c001cd6f:	eb 56                	jmp    c001cdc7 <Vm::faultHandler(regs*)+0x632>
c001cd71:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd75:	50                   	push   eax
c001cd76:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd7a:	50                   	push   eax
c001cd7b:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cd7f:	50                   	push   eax
c001cd80:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cd84:	50                   	push   eax
c001cd85:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd89:	50                   	push   eax
c001cd8a:	52                   	push   edx
c001cd8b:	52                   	push   edx
c001cd8c:	68 fd 89 02 c0       	push   0xc00289fd
c001cd91:	e8 bd 54 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001cd96:	83 c4 20             	add    esp,0x20
c001cd99:	83 ec 0c             	sub    esp,0xc
c001cd9c:	6a 60                	push   0x60
c001cd9e:	e8 98 f7 ff ff       	call   c001c53b <Vm::inbv(unsigned short)>
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	3c 1c                	cmp    al,0x1c
c001cda8:	74 04                	je     c001cdae <Vm::faultHandler(regs*)+0x619>
c001cdaa:	3c 5a                	cmp    al,0x5a
c001cdac:	75 eb                	jne    c001cd99 <Vm::faultHandler(regs*)+0x604>
c001cdae:	3c 5a                	cmp    al,0x5a
c001cdb0:	74 04                	je     c001cdb6 <Vm::faultHandler(regs*)+0x621>
c001cdb2:	3c 1c                	cmp    al,0x1c
c001cdb4:	75 0f                	jne    c001cdc5 <Vm::faultHandler(regs*)+0x630>
c001cdb6:	83 ec 0c             	sub    esp,0xc
c001cdb9:	6a 60                	push   0x60
c001cdbb:	e8 7b f7 ff ff       	call   c001c53b <Vm::inbv(unsigned short)>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	eb e9                	jmp    c001cdae <Vm::faultHandler(regs*)+0x619>
c001cdc5:	31 c0                	xor    eax,eax
c001cdc7:	83 c4 1c             	add    esp,0x1c
c001cdca:	5b                   	pop    ebx
c001cdcb:	5e                   	pop    esi
c001cdcc:	5f                   	pop    edi
c001cdcd:	5d                   	pop    ebp
c001cdce:	c3                   	ret    

c001cdcf <Vm::fpuInternalTo32(unsigned long long)>:
c001cdcf:	57                   	push   edi
c001cdd0:	56                   	push   esi
c001cdd1:	53                   	push   ebx
c001cdd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdda:	89 d6                	mov    esi,edx
c001cddc:	89 d7                	mov    edi,edx
c001cdde:	89 c1                	mov    ecx,eax
c001cde0:	c1 ef 14             	shr    edi,0x14
c001cde3:	89 d3                	mov    ebx,edx
c001cde5:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001cdeb:	31 d2                	xor    edx,edx
c001cded:	89 f8                	mov    eax,edi
c001cdef:	81 e6 00 00 00 80    	and    esi,0x80000000
c001cdf5:	bf ff 00 00 00       	mov    edi,0xff
c001cdfa:	05 80 fc ff ff       	add    eax,0xfffffc80
c001cdff:	83 d2 ff             	adc    edx,0xffffffff
c001ce02:	39 c7                	cmp    edi,eax
c001ce04:	bf 00 00 00 00       	mov    edi,0x0
c001ce09:	19 d7                	sbb    edi,edx
c001ce0b:	72 15                	jb     c001ce22 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ce0d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce11:	c1 e0 17             	shl    eax,0x17
c001ce14:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce1a:	09 f1                	or     ecx,esi
c001ce1c:	09 c1                	or     ecx,eax
c001ce1e:	89 cf                	mov    edi,ecx
c001ce20:	eb 02                	jmp    c001ce24 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce22:	31 ff                	xor    edi,edi
c001ce24:	89 f8                	mov    eax,edi
c001ce26:	5b                   	pop    ebx
c001ce27:	5e                   	pop    esi
c001ce28:	5f                   	pop    edi
c001ce29:	c3                   	ret    

c001ce2a <Vm::fpuInternalTo64(unsigned long long)>:
c001ce2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce32:	c3                   	ret    

c001ce33 <Vm::fpu32ToInternal(unsigned int)>:
c001ce33:	57                   	push   edi
c001ce34:	31 ff                	xor    edi,edi
c001ce36:	56                   	push   esi
c001ce37:	53                   	push   ebx
c001ce38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce3c:	89 cb                	mov    ebx,ecx
c001ce3e:	89 ce                	mov    esi,ecx
c001ce40:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce46:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce4c:	c1 e9 17             	shr    ecx,0x17
c001ce4f:	89 f0                	mov    eax,esi
c001ce51:	0f b6 d1             	movzx  edx,cl
c001ce54:	81 c2 80 03 00 00    	add    edx,0x380
c001ce5a:	89 d1                	mov    ecx,edx
c001ce5c:	89 fa                	mov    edx,edi
c001ce5e:	c1 e1 14             	shl    ecx,0x14
c001ce61:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce65:	c1 e0 1d             	shl    eax,0x1d
c001ce68:	89 d7                	mov    edi,edx
c001ce6a:	89 c6                	mov    esi,eax
c001ce6c:	89 ca                	mov    edx,ecx
c001ce6e:	89 f0                	mov    eax,esi
c001ce70:	09 fa                	or     edx,edi
c001ce72:	09 da                	or     edx,ebx
c001ce74:	5b                   	pop    ebx
c001ce75:	5e                   	pop    esi
c001ce76:	5f                   	pop    edi
c001ce77:	c3                   	ret    

c001ce78 <Vm::fpu64ToInternal(unsigned long long)>:
c001ce78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce80:	c3                   	ret    

c001ce81 <Vm::fpuFloatToLong(unsigned long long)>:
c001ce81:	57                   	push   edi
c001ce82:	31 c0                	xor    eax,eax
c001ce84:	56                   	push   esi
c001ce85:	31 d2                	xor    edx,edx
c001ce87:	53                   	push   ebx
c001ce88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce90:	89 d9                	mov    ecx,ebx
c001ce92:	c1 e9 14             	shr    ecx,0x14
c001ce95:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ce9b:	89 cf                	mov    edi,ecx
c001ce9d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cea3:	78 33                	js     c001ced8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cea5:	89 d9                	mov    ecx,ebx
c001cea7:	89 f0                	mov    eax,esi
c001cea9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ceaf:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ceb5:	89 ca                	mov    edx,ecx
c001ceb7:	b9 34 00 00 00       	mov    ecx,0x34
c001cebc:	29 f9                	sub    ecx,edi
c001cebe:	0f ad d0             	shrd   eax,edx,cl
c001cec1:	d3 fa                	sar    edx,cl
c001cec3:	f6 c1 20             	test   cl,0x20
c001cec6:	74 05                	je     c001cecd <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cec8:	89 d0                	mov    eax,edx
c001ceca:	c1 fa 1f             	sar    edx,0x1f
c001cecd:	85 db                	test   ebx,ebx
c001cecf:	79 07                	jns    c001ced8 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ced1:	f7 d8                	neg    eax
c001ced3:	83 d2 00             	adc    edx,0x0
c001ced6:	f7 da                	neg    edx
c001ced8:	5b                   	pop    ebx
c001ced9:	5e                   	pop    esi
c001ceda:	5f                   	pop    edi
c001cedb:	c3                   	ret    

c001cedc <Vm::fpuULongToFloat(unsigned long long)>:
c001cedc:	57                   	push   edi
c001cedd:	31 c9                	xor    ecx,ecx
c001cedf:	56                   	push   esi
c001cee0:	53                   	push   ebx
c001cee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cee5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cee9:	0f ba e7 14          	bt     edi,0x14
c001ceed:	72 07                	jb     c001cef6 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ceef:	01 f6                	add    esi,esi
c001cef1:	11 ff                	adc    edi,edi
c001cef3:	41                   	inc    ecx
c001cef4:	eb f3                	jmp    c001cee9 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cef6:	89 fa                	mov    edx,edi
c001cef8:	89 f0                	mov    eax,esi
c001cefa:	bb 33 04 00 00       	mov    ebx,0x433
c001ceff:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cf05:	29 cb                	sub    ebx,ecx
c001cf07:	89 d9                	mov    ecx,ebx
c001cf09:	5b                   	pop    ebx
c001cf0a:	c1 e1 14             	shl    ecx,0x14
c001cf0d:	5e                   	pop    esi
c001cf0e:	09 ca                	or     edx,ecx
c001cf10:	5f                   	pop    edi
c001cf11:	c3                   	ret    

c001cf12 <Vm::fpuLongToFloat(long long)>:
c001cf12:	56                   	push   esi
c001cf13:	31 c0                	xor    eax,eax
c001cf15:	53                   	push   ebx
c001cf16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf1e:	39 c8                	cmp    eax,ecx
c001cf20:	19 d8                	sbb    eax,ebx
c001cf22:	7d 04                	jge    c001cf28 <Vm::fpuLongToFloat(long long)+0x16>
c001cf24:	31 f6                	xor    esi,esi
c001cf26:	eb 0c                	jmp    c001cf34 <Vm::fpuLongToFloat(long long)+0x22>
c001cf28:	f7 d9                	neg    ecx
c001cf2a:	be 01 00 00 00       	mov    esi,0x1
c001cf2f:	83 d3 00             	adc    ebx,0x0
c001cf32:	f7 db                	neg    ebx
c001cf34:	31 c0                	xor    eax,eax
c001cf36:	0f ba e3 14          	bt     ebx,0x14
c001cf3a:	72 07                	jb     c001cf43 <Vm::fpuLongToFloat(long long)+0x31>
c001cf3c:	01 c9                	add    ecx,ecx
c001cf3e:	11 db                	adc    ebx,ebx
c001cf40:	40                   	inc    eax
c001cf41:	eb f3                	jmp    c001cf36 <Vm::fpuLongToFloat(long long)+0x24>
c001cf43:	ba 33 04 00 00       	mov    edx,0x433
c001cf48:	29 c2                	sub    edx,eax
c001cf4a:	89 c8                	mov    eax,ecx
c001cf4c:	c1 e2 14             	shl    edx,0x14
c001cf4f:	89 d9                	mov    ecx,ebx
c001cf51:	89 f3                	mov    ebx,esi
c001cf53:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf59:	09 ca                	or     edx,ecx
c001cf5b:	84 db                	test   bl,bl
c001cf5d:	74 06                	je     c001cf65 <Vm::fpuLongToFloat(long long)+0x53>
c001cf5f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf65:	5b                   	pop    ebx
c001cf66:	5e                   	pop    esi
c001cf67:	c3                   	ret    

c001cf68 <Vm::fpuGet0()>:
c001cf68:	31 c0                	xor    eax,eax
c001cf6a:	31 d2                	xor    edx,edx
c001cf6c:	c3                   	ret    

c001cf6d <Vm::fpuGet1()>:
c001cf6d:	b8 01 00 00 00       	mov    eax,0x1
c001cf72:	31 d2                	xor    edx,edx
c001cf74:	c3                   	ret    

c001cf75 <Vm::fpuGetPi()>:
c001cf75:	b8 03 00 00 00       	mov    eax,0x3
c001cf7a:	31 d2                	xor    edx,edx
c001cf7c:	c3                   	ret    

c001cf7d <Vm::fpuGetLog2E()>:
c001cf7d:	83 ec 18             	sub    esp,0x18
c001cf80:	68 5c 8a 02 c0       	push   0xc0028a5c
c001cf85:	e8 47 ba ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001cf8a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cf8f:	31 d2                	xor    edx,edx
c001cf91:	83 c4 1c             	add    esp,0x1c
c001cf94:	c3                   	ret    

c001cf95 <Vm::fpuGetLogE2()>:
c001cf95:	83 ec 18             	sub    esp,0x18
c001cf98:	68 68 8a 02 c0       	push   0xc0028a68
c001cf9d:	e8 2f ba ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001cfa2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfa7:	31 d2                	xor    edx,edx
c001cfa9:	83 c4 1c             	add    esp,0x1c
c001cfac:	c3                   	ret    

c001cfad <Vm::fpuGetLog210()>:
c001cfad:	83 ec 18             	sub    esp,0x18
c001cfb0:	68 74 8a 02 c0       	push   0xc0028a74
c001cfb5:	e8 17 ba ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001cfba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfbf:	31 d2                	xor    edx,edx
c001cfc1:	83 c4 1c             	add    esp,0x1c
c001cfc4:	c3                   	ret    

c001cfc5 <Vm::fpuGetLog102()>:
c001cfc5:	83 ec 18             	sub    esp,0x18
c001cfc8:	68 81 8a 02 c0       	push   0xc0028a81
c001cfcd:	e8 ff b9 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001cfd2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfd7:	31 d2                	xor    edx,edx
c001cfd9:	83 c4 1c             	add    esp,0x1c
c001cfdc:	c3                   	ret    

c001cfdd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001cfdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfe1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001cfe5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfe9:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001cfed:	0f 92 c0             	setb   al
c001cff0:	c3                   	ret    

c001cff1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001cff1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff9:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001cffd:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d001:	09 c2                	or     edx,eax
c001d003:	0f 94 c0             	sete   al
c001d006:	c3                   	ret    

c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d007:	57                   	push   edi
c001d008:	56                   	push   esi
c001d009:	53                   	push   ebx
c001d00a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d00e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d012:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d016:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d01a:	57                   	push   edi
c001d01b:	56                   	push   esi
c001d01c:	53                   	push   ebx
c001d01d:	51                   	push   ecx
c001d01e:	e8 ce ff ff ff       	call   c001cff1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	88 c2                	mov    dl,al
c001d028:	31 c0                	xor    eax,eax
c001d02a:	84 d2                	test   dl,dl
c001d02c:	75 0c                	jne    c001d03a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d02e:	57                   	push   edi
c001d02f:	56                   	push   esi
c001d030:	53                   	push   ebx
c001d031:	51                   	push   ecx
c001d032:	e8 a6 ff ff ff       	call   c001cfdd <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	83 e0 01             	and    eax,0x1
c001d03d:	5b                   	pop    ebx
c001d03e:	88 c1                	mov    cl,al
c001d040:	83 e2 01             	and    edx,0x1
c001d043:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d048:	c1 e2 06             	shl    edx,0x6
c001d04b:	83 e0 ba             	and    eax,0xffffffba
c001d04e:	5e                   	pop    esi
c001d04f:	09 c8                	or     eax,ecx
c001d051:	5f                   	pop    edi
c001d052:	09 d0                	or     eax,edx
c001d054:	a2 a1 b9 02 c0       	mov    ds:0xc002b9a1,al
c001d059:	c3                   	ret    

c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d05a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d05e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d062:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d066:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d06a:	c3                   	ret    

c001d06b <Vm::fpuAbs(unsigned long long)>:
c001d06b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d06f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d073:	c3                   	ret    

c001d074 <Vm::fpuChs(unsigned long long)>:
c001d074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d078:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d07c:	f7 d8                	neg    eax
c001d07e:	83 d2 00             	adc    edx,0x0
c001d081:	f7 da                	neg    edx
c001d083:	c3                   	ret    

c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d084:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d088:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d08d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d091:	eb c7                	jmp    c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d093:	53                   	push   ebx
c001d094:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d098:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d09c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0a4:	0f af ca             	imul   ecx,edx
c001d0a7:	0f af d8             	imul   ebx,eax
c001d0aa:	f7 e2                	mul    edx
c001d0ac:	01 d9                	add    ecx,ebx
c001d0ae:	5b                   	pop    ebx
c001d0af:	01 ca                	add    edx,ecx
c001d0b1:	c3                   	ret    

c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0c5:	e8 a2 63 00 00       	call   c002346c <__udivdi3>
c001d0ca:	83 c4 1c             	add    esp,0x1c
c001d0cd:	c3                   	ret    

c001d0ce <Vm::fpuSquare(unsigned long long)>:
c001d0ce:	50                   	push   eax
c001d0cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0d7:	52                   	push   edx
c001d0d8:	50                   	push   eax
c001d0d9:	52                   	push   edx
c001d0da:	50                   	push   eax
c001d0db:	e8 b3 ff ff ff       	call   c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d0e0:	83 c4 14             	add    esp,0x14
c001d0e3:	c3                   	ret    

c001d0e4 <Vm::fpuGetReg(int)>:
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d0ec:	76 10                	jbe    c001d0fe <Vm::fpuGetReg(int)+0x1a>
c001d0ee:	83 ec 0c             	sub    esp,0xc
c001d0f1:	68 8e 8a 02 c0       	push   0xc0028a8e
c001d0f6:	e8 d6 b8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d103:	b9 08 00 00 00       	mov    ecx,0x8
c001d108:	c0 e8 03             	shr    al,0x3
c001d10b:	83 e0 07             	and    eax,0x7
c001d10e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d112:	99                   	cdq    
c001d113:	f7 f9                	idiv   ecx
c001d115:	8b 04 d5 a4 b9 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd465c]
c001d11c:	8b 14 d5 a8 b9 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4658]
c001d123:	83 c4 0c             	add    esp,0xc
c001d126:	c3                   	ret    

c001d127 <Vm::fpuSetReg(int, unsigned long long)>:
c001d127:	57                   	push   edi
c001d128:	56                   	push   esi
c001d129:	52                   	push   edx
c001d12a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d12e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d132:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d137:	76 10                	jbe    c001d149 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d139:	83 ec 0c             	sub    esp,0xc
c001d13c:	68 a1 8a 02 c0       	push   0xc0028aa1
c001d141:	e8 8b b8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d14e:	b9 08 00 00 00       	mov    ecx,0x8
c001d153:	c0 e8 03             	shr    al,0x3
c001d156:	83 e0 07             	and    eax,0x7
c001d159:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d15d:	99                   	cdq    
c001d15e:	f7 f9                	idiv   ecx
c001d160:	89 34 d5 a4 b9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd465c],esi
c001d167:	89 3c d5 a8 b9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4658],edi
c001d16e:	58                   	pop    eax
c001d16f:	5e                   	pop    esi
c001d170:	5f                   	pop    edi
c001d171:	c3                   	ret    

c001d172 <Vm::fpuPush(unsigned long long)>:
c001d172:	a0 a1 b9 02 c0       	mov    al,ds:0xc002b9a1
c001d177:	c0 e8 03             	shr    al,0x3
c001d17a:	83 e0 07             	and    eax,0x7
c001d17d:	83 c0 07             	add    eax,0x7
c001d180:	88 c2                	mov    dl,al
c001d182:	83 e0 07             	and    eax,0x7
c001d185:	83 e2 07             	and    edx,0x7
c001d188:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d18f:	8a 15 a1 b9 02 c0    	mov    dl,BYTE PTR ds:0xc002b9a1
c001d195:	83 e2 c7             	and    edx,0xffffffc7
c001d198:	09 ca                	or     edx,ecx
c001d19a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d19e:	88 15 a1 b9 02 c0    	mov    BYTE PTR ds:0xc002b9a1,dl
c001d1a4:	89 0c c5 a8 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4658],ecx
c001d1ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1af:	89 14 c5 a4 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd465c],edx
c001d1b6:	a1 e4 b9 02 c0       	mov    eax,ds:0xc002b9e4
c001d1bb:	83 f8 08             	cmp    eax,0x8
c001d1be:	75 08                	jne    c001d1c8 <Vm::fpuPush(unsigned long long)+0x56>
c001d1c0:	80 0d a0 b9 02 c0 40 	or     BYTE PTR ds:0xc002b9a0,0x40
c001d1c7:	c3                   	ret    
c001d1c8:	40                   	inc    eax
c001d1c9:	a3 e4 b9 02 c0       	mov    ds:0xc002b9e4,eax
c001d1ce:	c3                   	ret    

c001d1cf <Vm::fpuPop()>:
c001d1cf:	8a 0d a1 b9 02 c0    	mov    cl,BYTE PTR ds:0xc002b9a1
c001d1d5:	53                   	push   ebx
c001d1d6:	c0 e9 03             	shr    cl,0x3
c001d1d9:	8a 1d a1 b9 02 c0    	mov    bl,BYTE PTR ds:0xc002b9a1
c001d1df:	83 e1 07             	and    ecx,0x7
c001d1e2:	83 e3 c7             	and    ebx,0xffffffc7
c001d1e5:	8b 04 cd a4 b9 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd465c]
c001d1ec:	8b 14 cd a8 b9 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4658]
c001d1f3:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d1fa:	83 e1 38             	and    ecx,0x38
c001d1fd:	09 d9                	or     ecx,ebx
c001d1ff:	88 0d a1 b9 02 c0    	mov    BYTE PTR ds:0xc002b9a1,cl
c001d205:	8b 0d e4 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b9e4
c001d20b:	85 c9                	test   ecx,ecx
c001d20d:	74 09                	je     c001d218 <Vm::fpuPop()+0x49>
c001d20f:	49                   	dec    ecx
c001d210:	89 0d e4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e4,ecx
c001d216:	eb 07                	jmp    c001d21f <Vm::fpuPop()+0x50>
c001d218:	80 0d a0 b9 02 c0 40 	or     BYTE PTR ds:0xc002b9a0,0x40
c001d21f:	5b                   	pop    ebx
c001d220:	c3                   	ret    

c001d221 <Vm::x87Handler(regs*)>:
c001d221:	55                   	push   ebp
c001d222:	57                   	push   edi
c001d223:	56                   	push   esi
c001d224:	53                   	push   ebx
c001d225:	83 ec 1c             	sub    esp,0x1c
c001d228:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d22c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d231:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d234:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d23c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d240:	50                   	push   eax
c001d241:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d245:	50                   	push   eax
c001d246:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d24a:	50                   	push   eax
c001d24b:	53                   	push   ebx
c001d24c:	e8 85 b5 ff ff       	call   c00187d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d251:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d254:	83 c4 10             	add    esp,0x10
c001d257:	89 c6                	mov    esi,eax
c001d259:	80 fa d9             	cmp    dl,0xd9
c001d25c:	0f 85 52 01 00 00    	jne    c001d3b4 <Vm::x87Handler(regs*)+0x193>
c001d262:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d266:	8d 50 20             	lea    edx,[eax+0x20]
c001d269:	80 fa 0e             	cmp    dl,0xe
c001d26c:	0f 87 86 00 00 00    	ja     c001d2f8 <Vm::x87Handler(regs*)+0xd7>
c001d272:	0f b6 d2             	movzx  edx,dl
c001d275:	ff 24 95 b4 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd754c]
c001d27c:	e8 e7 fc ff ff       	call   c001cf68 <Vm::fpuGet0()>
c001d281:	eb 05                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d283:	e8 e5 fc ff ff       	call   c001cf6d <Vm::fpuGet1()>
c001d288:	57                   	push   edi
c001d289:	57                   	push   edi
c001d28a:	52                   	push   edx
c001d28b:	50                   	push   eax
c001d28c:	e8 e1 fe ff ff       	call   c001d172 <Vm::fpuPush(unsigned long long)>
c001d291:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	b0 01                	mov    al,0x1
c001d29a:	e9 e3 09 00 00       	jmp    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001d29f:	83 ec 0c             	sub    esp,0xc
c001d2a2:	6a 00                	push   0x0
c001d2a4:	e8 3b fe ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d2a9:	59                   	pop    ecx
c001d2aa:	5e                   	pop    esi
c001d2ab:	52                   	push   edx
c001d2ac:	50                   	push   eax
c001d2ad:	e8 c2 fd ff ff       	call   c001d074 <Vm::fpuChs(unsigned long long)>
c001d2b2:	eb 13                	jmp    c001d2c7 <Vm::x87Handler(regs*)+0xa6>
c001d2b4:	83 ec 0c             	sub    esp,0xc
c001d2b7:	6a 00                	push   0x0
c001d2b9:	e8 26 fe ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d2be:	5f                   	pop    edi
c001d2bf:	5d                   	pop    ebp
c001d2c0:	52                   	push   edx
c001d2c1:	50                   	push   eax
c001d2c2:	e8 a4 fd ff ff       	call   c001d06b <Vm::fpuAbs(unsigned long long)>
c001d2c7:	83 c4 0c             	add    esp,0xc
c001d2ca:	52                   	push   edx
c001d2cb:	50                   	push   eax
c001d2cc:	6a 00                	push   0x0
c001d2ce:	e8 54 fe ff ff       	call   c001d127 <Vm::fpuSetReg(int, unsigned long long)>
c001d2d3:	eb bc                	jmp    c001d291 <Vm::x87Handler(regs*)+0x70>
c001d2d5:	e8 d3 fc ff ff       	call   c001cfad <Vm::fpuGetLog210()>
c001d2da:	eb ac                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d2dc:	e8 9c fc ff ff       	call   c001cf7d <Vm::fpuGetLog2E()>
c001d2e1:	eb a5                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d2e3:	e8 8d fc ff ff       	call   c001cf75 <Vm::fpuGetPi()>
c001d2e8:	eb 9e                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d2ea:	e8 d6 fc ff ff       	call   c001cfc5 <Vm::fpuGetLog102()>
c001d2ef:	eb 97                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d2f1:	e8 9f fc ff ff       	call   c001cf95 <Vm::fpuGetLogE2()>
c001d2f6:	eb 90                	jmp    c001d288 <Vm::x87Handler(regs*)+0x67>
c001d2f8:	8d 50 40             	lea    edx,[eax+0x40]
c001d2fb:	80 fa 07             	cmp    dl,0x7
c001d2fe:	77 15                	ja     c001d315 <Vm::x87Handler(regs*)+0xf4>
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	2d c0 00 00 00       	sub    eax,0xc0
c001d308:	50                   	push   eax
c001d309:	e8 d6 fd ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d30e:	59                   	pop    ecx
c001d30f:	5e                   	pop    esi
c001d310:	e9 75 ff ff ff       	jmp    c001d28a <Vm::x87Handler(regs*)+0x69>
c001d315:	8d 50 38             	lea    edx,[eax+0x38]
c001d318:	80 fa 07             	cmp    dl,0x7
c001d31b:	77 3c                	ja     c001d359 <Vm::x87Handler(regs*)+0x138>
c001d31d:	83 ec 0c             	sub    esp,0xc
c001d320:	2d c8 00 00 00       	sub    eax,0xc8
c001d325:	50                   	push   eax
c001d326:	e8 b9 fd ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d32b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d332:	89 c6                	mov    esi,eax
c001d334:	89 d7                	mov    edi,edx
c001d336:	e8 a9 fd ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d33b:	83 c4 0c             	add    esp,0xc
c001d33e:	52                   	push   edx
c001d33f:	50                   	push   eax
c001d340:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d344:	2d c8 00 00 00       	sub    eax,0xc8
c001d349:	50                   	push   eax
c001d34a:	e8 d8 fd ff ff       	call   c001d127 <Vm::fpuSetReg(int, unsigned long long)>
c001d34f:	83 c4 0c             	add    esp,0xc
c001d352:	57                   	push   edi
c001d353:	56                   	push   esi
c001d354:	e9 73 ff ff ff       	jmp    c001d2cc <Vm::x87Handler(regs*)+0xab>
c001d359:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d35d:	84 d2                	test   dl,dl
c001d35f:	75 0f                	jne    c001d370 <Vm::x87Handler(regs*)+0x14f>
c001d361:	83 ec 0c             	sub    esp,0xc
c001d364:	ff 36                	push   DWORD PTR [esi]
c001d366:	e8 c8 fa ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d36b:	e9 bf 00 00 00       	jmp    c001d42f <Vm::x87Handler(regs*)+0x20e>
c001d370:	80 fa 03             	cmp    dl,0x3
c001d373:	75 13                	jne    c001d388 <Vm::x87Handler(regs*)+0x167>
c001d375:	e8 55 fe ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d37a:	55                   	push   ebp
c001d37b:	55                   	push   ebp
c001d37c:	52                   	push   edx
c001d37d:	50                   	push   eax
c001d37e:	e8 4c fa ff ff       	call   c001cdcf <Vm::fpuInternalTo32(unsigned long long)>
c001d383:	e9 88 00 00 00       	jmp    c001d410 <Vm::x87Handler(regs*)+0x1ef>
c001d388:	80 fa 05             	cmp    dl,0x5
c001d38b:	75 0e                	jne    c001d39b <Vm::x87Handler(regs*)+0x17a>
c001d38d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d390:	66 a3 a2 b9 02 c0    	mov    ds:0xc002b9a2,ax
c001d396:	e9 df 00 00 00       	jmp    c001d47a <Vm::x87Handler(regs*)+0x259>
c001d39b:	31 c0                	xor    eax,eax
c001d39d:	80 fa 07             	cmp    dl,0x7
c001d3a0:	0f 85 dc 08 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001d3a6:	66 a1 a2 b9 02 c0    	mov    ax,ds:0xc002b9a2
c001d3ac:	66 89 06             	mov    WORD PTR [esi],ax
c001d3af:	e9 c6 00 00 00       	jmp    c001d47a <Vm::x87Handler(regs*)+0x259>
c001d3b4:	80 fa d8             	cmp    dl,0xd8
c001d3b7:	0f 84 c9 00 00 00    	je     c001d486 <Vm::x87Handler(regs*)+0x265>
c001d3bd:	80 fa dc             	cmp    dl,0xdc
c001d3c0:	0f 84 0d 02 00 00    	je     c001d5d3 <Vm::x87Handler(regs*)+0x3b2>
c001d3c6:	80 fa de             	cmp    dl,0xde
c001d3c9:	0f 84 cd 02 00 00    	je     c001d69c <Vm::x87Handler(regs*)+0x47b>
c001d3cf:	80 fa dd             	cmp    dl,0xdd
c001d3d2:	0f 84 5f 04 00 00    	je     c001d837 <Vm::x87Handler(regs*)+0x616>
c001d3d8:	80 fa da             	cmp    dl,0xda
c001d3db:	0f 84 24 05 00 00    	je     c001d905 <Vm::x87Handler(regs*)+0x6e4>
c001d3e1:	80 fa df             	cmp    dl,0xdf
c001d3e4:	0f 84 68 05 00 00    	je     c001d952 <Vm::x87Handler(regs*)+0x731>
c001d3ea:	31 c0                	xor    eax,eax
c001d3ec:	80 fa db             	cmp    dl,0xdb
c001d3ef:	0f 85 8d 08 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001d3f5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d3f9:	80 fa 03             	cmp    dl,0x3
c001d3fc:	0f 85 70 06 00 00    	jne    c001da72 <Vm::x87Handler(regs*)+0x851>
c001d402:	e8 c8 fd ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d407:	55                   	push   ebp
c001d408:	55                   	push   ebp
c001d409:	52                   	push   edx
c001d40a:	50                   	push   eax
c001d40b:	e8 71 fa ff ff       	call   c001ce81 <Vm::fpuFloatToLong(unsigned long long)>
c001d410:	83 c4 10             	add    esp,0x10
c001d413:	89 06                	mov    DWORD PTR [esi],eax
c001d415:	eb 63                	jmp    c001d47a <Vm::x87Handler(regs*)+0x259>
c001d417:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d41b:	84 d2                	test   dl,dl
c001d41d:	0f 85 e6 05 00 00    	jne    c001da09 <Vm::x87Handler(regs*)+0x7e8>
c001d423:	57                   	push   edi
c001d424:	57                   	push   edi
c001d425:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d428:	ff 36                	push   DWORD PTR [esi]
c001d42a:	e8 49 fa ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001d42f:	5e                   	pop    esi
c001d430:	5f                   	pop    edi
c001d431:	52                   	push   edx
c001d432:	50                   	push   eax
c001d433:	e8 3a fd ff ff       	call   c001d172 <Vm::fpuPush(unsigned long long)>
c001d438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d43c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d43f:	e9 51 fe ff ff       	jmp    c001d295 <Vm::x87Handler(regs*)+0x74>
c001d444:	80 fa 03             	cmp    dl,0x3
c001d447:	0f 85 d7 06 00 00    	jne    c001db24 <Vm::x87Handler(regs*)+0x903>
c001d44d:	57                   	push   edi
c001d44e:	57                   	push   edi
c001d44f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d452:	ff 36                	push   DWORD PTR [esi]
c001d454:	e8 1f fa ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001d459:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d460:	89 c6                	mov    esi,eax
c001d462:	89 d7                	mov    edi,edx
c001d464:	e8 7b fc ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d469:	57                   	push   edi
c001d46a:	56                   	push   esi
c001d46b:	52                   	push   edx
c001d46c:	50                   	push   eax
c001d46d:	e8 95 fb ff ff       	call   c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d472:	83 c4 20             	add    esp,0x20
c001d475:	e8 55 fd ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d47a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d47e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d481:	e9 12 fe ff ff       	jmp    c001d298 <Vm::x87Handler(regs*)+0x77>
c001d486:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d48a:	8d 50 40             	lea    edx,[eax+0x40]
c001d48d:	80 fa 07             	cmp    dl,0x7
c001d490:	77 29                	ja     c001d4bb <Vm::x87Handler(regs*)+0x29a>
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	2d c0 00 00 00       	sub    eax,0xc0
c001d49a:	50                   	push   eax
c001d49b:	e8 44 fc ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d4a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4a7:	89 c6                	mov    esi,eax
c001d4a9:	89 d7                	mov    edi,edx
c001d4ab:	e8 34 fc ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d4b0:	57                   	push   edi
c001d4b1:	56                   	push   esi
c001d4b2:	52                   	push   edx
c001d4b3:	50                   	push   eax
c001d4b4:	e8 a1 fb ff ff       	call   c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4b9:	eb 2f                	jmp    c001d4ea <Vm::x87Handler(regs*)+0x2c9>
c001d4bb:	8d 50 38             	lea    edx,[eax+0x38]
c001d4be:	80 fa 07             	cmp    dl,0x7
c001d4c1:	77 2f                	ja     c001d4f2 <Vm::x87Handler(regs*)+0x2d1>
c001d4c3:	83 ec 0c             	sub    esp,0xc
c001d4c6:	2d c8 00 00 00       	sub    eax,0xc8
c001d4cb:	50                   	push   eax
c001d4cc:	e8 13 fc ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d4d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4d8:	89 c6                	mov    esi,eax
c001d4da:	89 d7                	mov    edi,edx
c001d4dc:	e8 03 fc ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d4e1:	57                   	push   edi
c001d4e2:	56                   	push   esi
c001d4e3:	52                   	push   edx
c001d4e4:	50                   	push   eax
c001d4e5:	e8 a9 fb ff ff       	call   c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d4ea:	83 c4 1c             	add    esp,0x1c
c001d4ed:	e9 d8 fd ff ff       	jmp    c001d2ca <Vm::x87Handler(regs*)+0xa9>
c001d4f2:	8d 50 30             	lea    edx,[eax+0x30]
c001d4f5:	80 fa 07             	cmp    dl,0x7
c001d4f8:	77 0d                	ja     c001d507 <Vm::x87Handler(regs*)+0x2e6>
c001d4fa:	83 ec 0c             	sub    esp,0xc
c001d4fd:	2d d0 00 00 00       	sub    eax,0xd0
c001d502:	e9 99 03 00 00       	jmp    c001d8a0 <Vm::x87Handler(regs*)+0x67f>
c001d507:	8d 50 28             	lea    edx,[eax+0x28]
c001d50a:	80 fa 07             	cmp    dl,0x7
c001d50d:	77 0d                	ja     c001d51c <Vm::x87Handler(regs*)+0x2fb>
c001d50f:	83 ec 0c             	sub    esp,0xc
c001d512:	2d d8 00 00 00       	sub    eax,0xd8
c001d517:	e9 c0 03 00 00       	jmp    c001d8dc <Vm::x87Handler(regs*)+0x6bb>
c001d51c:	8d 50 20             	lea    edx,[eax+0x20]
c001d51f:	80 fa 07             	cmp    dl,0x7
c001d522:	77 1b                	ja     c001d53f <Vm::x87Handler(regs*)+0x31e>
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	2d e0 00 00 00       	sub    eax,0xe0
c001d52c:	50                   	push   eax
c001d52d:	e8 b2 fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d532:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d539:	89 c6                	mov    esi,eax
c001d53b:	89 d7                	mov    edi,edx
c001d53d:	eb 22                	jmp    c001d561 <Vm::x87Handler(regs*)+0x340>
c001d53f:	8d 50 18             	lea    edx,[eax+0x18]
c001d542:	80 fa 07             	cmp    dl,0x7
c001d545:	77 2d                	ja     c001d574 <Vm::x87Handler(regs*)+0x353>
c001d547:	83 ec 0c             	sub    esp,0xc
c001d54a:	6a 00                	push   0x0
c001d54c:	e8 93 fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d551:	89 c6                	mov    esi,eax
c001d553:	89 d7                	mov    edi,edx
c001d555:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d559:	2d e8 00 00 00       	sub    eax,0xe8
c001d55e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d561:	e8 7e fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d566:	57                   	push   edi
c001d567:	56                   	push   esi
c001d568:	52                   	push   edx
c001d569:	50                   	push   eax
c001d56a:	e8 15 fb ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d56f:	e9 76 ff ff ff       	jmp    c001d4ea <Vm::x87Handler(regs*)+0x2c9>
c001d574:	8d 50 10             	lea    edx,[eax+0x10]
c001d577:	80 fa 07             	cmp    dl,0x7
c001d57a:	77 1b                	ja     c001d597 <Vm::x87Handler(regs*)+0x376>
c001d57c:	83 ec 0c             	sub    esp,0xc
c001d57f:	2d f0 00 00 00       	sub    eax,0xf0
c001d584:	50                   	push   eax
c001d585:	e8 5a fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d58a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d591:	89 c6                	mov    esi,eax
c001d593:	89 d7                	mov    edi,edx
c001d595:	eb 22                	jmp    c001d5b9 <Vm::x87Handler(regs*)+0x398>
c001d597:	3c f7                	cmp    al,0xf7
c001d599:	0f 86 d1 03 00 00    	jbe    c001d970 <Vm::x87Handler(regs*)+0x74f>
c001d59f:	83 ec 0c             	sub    esp,0xc
c001d5a2:	6a 00                	push   0x0
c001d5a4:	e8 3b fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d5a9:	89 c6                	mov    esi,eax
c001d5ab:	89 d7                	mov    edi,edx
c001d5ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5b1:	2d f8 00 00 00       	sub    eax,0xf8
c001d5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5b9:	e8 26 fb ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d5be:	57                   	push   edi
c001d5bf:	56                   	push   esi
c001d5c0:	52                   	push   edx
c001d5c1:	50                   	push   eax
c001d5c2:	e8 eb fa ff ff       	call   c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5c7:	83 c4 1c             	add    esp,0x1c
c001d5ca:	52                   	push   edx
c001d5cb:	50                   	push   eax
c001d5cc:	6a 00                	push   0x0
c001d5ce:	e9 51 02 00 00       	jmp    c001d824 <Vm::x87Handler(regs*)+0x603>
c001d5d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5d7:	8d 50 40             	lea    edx,[eax+0x40]
c001d5da:	80 fa 07             	cmp    dl,0x7
c001d5dd:	77 37                	ja     c001d616 <Vm::x87Handler(regs*)+0x3f5>
c001d5df:	83 ec 0c             	sub    esp,0xc
c001d5e2:	2d c0 00 00 00       	sub    eax,0xc0
c001d5e7:	50                   	push   eax
c001d5e8:	e8 f7 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d5ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5f4:	89 c6                	mov    esi,eax
c001d5f6:	89 d7                	mov    edi,edx
c001d5f8:	e8 e7 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d5fd:	57                   	push   edi
c001d5fe:	56                   	push   esi
c001d5ff:	52                   	push   edx
c001d600:	50                   	push   eax
c001d601:	e8 54 fa ff ff       	call   c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d606:	83 c4 1c             	add    esp,0x1c
c001d609:	52                   	push   edx
c001d60a:	50                   	push   eax
c001d60b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d60f:	2d c0 00 00 00       	sub    eax,0xc0
c001d614:	eb 3d                	jmp    c001d653 <Vm::x87Handler(regs*)+0x432>
c001d616:	8d 50 38             	lea    edx,[eax+0x38]
c001d619:	80 fa 07             	cmp    dl,0x7
c001d61c:	77 3b                	ja     c001d659 <Vm::x87Handler(regs*)+0x438>
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	2d c8 00 00 00       	sub    eax,0xc8
c001d626:	50                   	push   eax
c001d627:	e8 b8 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d62c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d633:	89 c6                	mov    esi,eax
c001d635:	89 d7                	mov    edi,edx
c001d637:	e8 a8 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d63c:	57                   	push   edi
c001d63d:	56                   	push   esi
c001d63e:	52                   	push   edx
c001d63f:	50                   	push   eax
c001d640:	e8 4e fa ff ff       	call   c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d645:	83 c4 1c             	add    esp,0x1c
c001d648:	52                   	push   edx
c001d649:	50                   	push   eax
c001d64a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d64e:	2d c8 00 00 00       	sub    eax,0xc8
c001d653:	50                   	push   eax
c001d654:	e9 75 fc ff ff       	jmp    c001d2ce <Vm::x87Handler(regs*)+0xad>
c001d659:	83 c0 18             	add    eax,0x18
c001d65c:	3c 07                	cmp    al,0x7
c001d65e:	0f 87 3b 04 00 00    	ja     c001da9f <Vm::x87Handler(regs*)+0x87e>
c001d664:	83 ec 0c             	sub    esp,0xc
c001d667:	6a 00                	push   0x0
c001d669:	e8 76 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d66e:	89 c6                	mov    esi,eax
c001d670:	89 d7                	mov    edi,edx
c001d672:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d676:	2d e8 00 00 00       	sub    eax,0xe8
c001d67b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d67e:	e8 61 fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d683:	57                   	push   edi
c001d684:	56                   	push   esi
c001d685:	52                   	push   edx
c001d686:	50                   	push   eax
c001d687:	e8 f8 f9 ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d68c:	83 c4 1c             	add    esp,0x1c
c001d68f:	52                   	push   edx
c001d690:	50                   	push   eax
c001d691:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d695:	2d e8 00 00 00       	sub    eax,0xe8
c001d69a:	eb b7                	jmp    c001d653 <Vm::x87Handler(regs*)+0x432>
c001d69c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6a0:	8d 50 40             	lea    edx,[eax+0x40]
c001d6a3:	80 fa 07             	cmp    dl,0x7
c001d6a6:	77 3a                	ja     c001d6e2 <Vm::x87Handler(regs*)+0x4c1>
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	2d c0 00 00 00       	sub    eax,0xc0
c001d6b0:	50                   	push   eax
c001d6b1:	e8 2e fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d6b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6bd:	89 c6                	mov    esi,eax
c001d6bf:	89 d7                	mov    edi,edx
c001d6c1:	e8 1e fa ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d6c6:	57                   	push   edi
c001d6c7:	56                   	push   esi
c001d6c8:	52                   	push   edx
c001d6c9:	50                   	push   eax
c001d6ca:	e8 8b f9 ff ff       	call   c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6cf:	83 c4 1c             	add    esp,0x1c
c001d6d2:	52                   	push   edx
c001d6d3:	50                   	push   eax
c001d6d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6d8:	2d c0 00 00 00       	sub    eax,0xc0
c001d6dd:	e9 9e 01 00 00       	jmp    c001d880 <Vm::x87Handler(regs*)+0x65f>
c001d6e2:	8d 50 20             	lea    edx,[eax+0x20]
c001d6e5:	80 fa 07             	cmp    dl,0x7
c001d6e8:	77 3a                	ja     c001d724 <Vm::x87Handler(regs*)+0x503>
c001d6ea:	83 ec 0c             	sub    esp,0xc
c001d6ed:	2d e0 00 00 00       	sub    eax,0xe0
c001d6f2:	50                   	push   eax
c001d6f3:	e8 ec f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d6f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6ff:	89 c6                	mov    esi,eax
c001d701:	89 d7                	mov    edi,edx
c001d703:	e8 dc f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d708:	57                   	push   edi
c001d709:	56                   	push   esi
c001d70a:	52                   	push   edx
c001d70b:	50                   	push   eax
c001d70c:	e8 73 f9 ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d711:	83 c4 1c             	add    esp,0x1c
c001d714:	52                   	push   edx
c001d715:	50                   	push   eax
c001d716:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d71a:	2d e0 00 00 00       	sub    eax,0xe0
c001d71f:	e9 5c 01 00 00       	jmp    c001d880 <Vm::x87Handler(regs*)+0x65f>
c001d724:	8d 50 18             	lea    edx,[eax+0x18]
c001d727:	80 fa 07             	cmp    dl,0x7
c001d72a:	77 3b                	ja     c001d767 <Vm::x87Handler(regs*)+0x546>
c001d72c:	83 ec 0c             	sub    esp,0xc
c001d72f:	6a 00                	push   0x0
c001d731:	e8 ae f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d736:	89 c6                	mov    esi,eax
c001d738:	89 d7                	mov    edi,edx
c001d73a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d73e:	2d e8 00 00 00       	sub    eax,0xe8
c001d743:	89 04 24             	mov    DWORD PTR [esp],eax
c001d746:	e8 99 f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d74b:	57                   	push   edi
c001d74c:	56                   	push   esi
c001d74d:	52                   	push   edx
c001d74e:	50                   	push   eax
c001d74f:	e8 30 f9 ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d754:	83 c4 1c             	add    esp,0x1c
c001d757:	52                   	push   edx
c001d758:	50                   	push   eax
c001d759:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d75d:	2d e8 00 00 00       	sub    eax,0xe8
c001d762:	e9 19 01 00 00       	jmp    c001d880 <Vm::x87Handler(regs*)+0x65f>
c001d767:	8d 50 38             	lea    edx,[eax+0x38]
c001d76a:	80 fa 07             	cmp    dl,0x7
c001d76d:	77 37                	ja     c001d7a6 <Vm::x87Handler(regs*)+0x585>
c001d76f:	83 ec 0c             	sub    esp,0xc
c001d772:	2d c8 00 00 00       	sub    eax,0xc8
c001d777:	50                   	push   eax
c001d778:	e8 67 f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d77d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d784:	89 c6                	mov    esi,eax
c001d786:	89 d7                	mov    edi,edx
c001d788:	e8 57 f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d78d:	57                   	push   edi
c001d78e:	56                   	push   esi
c001d78f:	52                   	push   edx
c001d790:	50                   	push   eax
c001d791:	e8 fd f8 ff ff       	call   c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d796:	83 c4 1c             	add    esp,0x1c
c001d799:	52                   	push   edx
c001d79a:	50                   	push   eax
c001d79b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d79f:	2d c8 00 00 00       	sub    eax,0xc8
c001d7a4:	eb 7d                	jmp    c001d823 <Vm::x87Handler(regs*)+0x602>
c001d7a6:	3c f7                	cmp    al,0xf7
c001d7a8:	76 38                	jbe    c001d7e2 <Vm::x87Handler(regs*)+0x5c1>
c001d7aa:	83 ec 0c             	sub    esp,0xc
c001d7ad:	6a 00                	push   0x0
c001d7af:	e8 30 f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d7b4:	89 c6                	mov    esi,eax
c001d7b6:	89 d7                	mov    edi,edx
c001d7b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7bc:	2d f8 00 00 00       	sub    eax,0xf8
c001d7c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7c4:	e8 1b f9 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d7c9:	57                   	push   edi
c001d7ca:	56                   	push   esi
c001d7cb:	52                   	push   edx
c001d7cc:	50                   	push   eax
c001d7cd:	e8 e0 f8 ff ff       	call   c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7d2:	83 c4 1c             	add    esp,0x1c
c001d7d5:	52                   	push   edx
c001d7d6:	50                   	push   eax
c001d7d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7db:	2d f8 00 00 00       	sub    eax,0xf8
c001d7e0:	eb 41                	jmp    c001d823 <Vm::x87Handler(regs*)+0x602>
c001d7e2:	8d 50 10             	lea    edx,[eax+0x10]
c001d7e5:	80 fa 07             	cmp    dl,0x7
c001d7e8:	0f 87 5a 01 00 00    	ja     c001d948 <Vm::x87Handler(regs*)+0x727>
c001d7ee:	83 ec 0c             	sub    esp,0xc
c001d7f1:	2d f0 00 00 00       	sub    eax,0xf0
c001d7f6:	50                   	push   eax
c001d7f7:	e8 e8 f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d7fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d803:	89 c6                	mov    esi,eax
c001d805:	89 d7                	mov    edi,edx
c001d807:	e8 d8 f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d80c:	57                   	push   edi
c001d80d:	56                   	push   esi
c001d80e:	52                   	push   edx
c001d80f:	50                   	push   eax
c001d810:	e8 9d f8 ff ff       	call   c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d815:	83 c4 1c             	add    esp,0x1c
c001d818:	52                   	push   edx
c001d819:	50                   	push   eax
c001d81a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d81e:	2d f0 00 00 00       	sub    eax,0xf0
c001d823:	50                   	push   eax
c001d824:	e8 fe f8 ff ff       	call   c001d127 <Vm::fpuSetReg(int, unsigned long long)>
c001d829:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d82d:	e8 9d f9 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d832:	e9 5e fa ff ff       	jmp    c001d295 <Vm::x87Handler(regs*)+0x74>
c001d837:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d83b:	8d 50 30             	lea    edx,[eax+0x30]
c001d83e:	80 fa 07             	cmp    dl,0x7
c001d841:	77 1d                	ja     c001d860 <Vm::x87Handler(regs*)+0x63f>
c001d843:	83 ec 0c             	sub    esp,0xc
c001d846:	6a 00                	push   0x0
c001d848:	e8 97 f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d84d:	83 c4 0c             	add    esp,0xc
c001d850:	52                   	push   edx
c001d851:	50                   	push   eax
c001d852:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d856:	2d d0 00 00 00       	sub    eax,0xd0
c001d85b:	e9 f3 fd ff ff       	jmp    c001d653 <Vm::x87Handler(regs*)+0x432>
c001d860:	8d 50 28             	lea    edx,[eax+0x28]
c001d863:	80 fa 07             	cmp    dl,0x7
c001d866:	77 28                	ja     c001d890 <Vm::x87Handler(regs*)+0x66f>
c001d868:	83 ec 0c             	sub    esp,0xc
c001d86b:	6a 00                	push   0x0
c001d86d:	e8 72 f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d872:	83 c4 0c             	add    esp,0xc
c001d875:	52                   	push   edx
c001d876:	50                   	push   eax
c001d877:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d87b:	2d d8 00 00 00       	sub    eax,0xd8
c001d880:	50                   	push   eax
c001d881:	e8 a1 f8 ff ff       	call   c001d127 <Vm::fpuSetReg(int, unsigned long long)>
c001d886:	e8 44 f9 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d88b:	e9 01 fa ff ff       	jmp    c001d291 <Vm::x87Handler(regs*)+0x70>
c001d890:	8d 50 20             	lea    edx,[eax+0x20]
c001d893:	80 fa 07             	cmp    dl,0x7
c001d896:	77 30                	ja     c001d8c8 <Vm::x87Handler(regs*)+0x6a7>
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	2d e0 00 00 00       	sub    eax,0xe0
c001d8a0:	50                   	push   eax
c001d8a1:	e8 3e f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d8a6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8ad:	89 c6                	mov    esi,eax
c001d8af:	89 d7                	mov    edi,edx
c001d8b1:	e8 2e f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d8b6:	57                   	push   edi
c001d8b7:	56                   	push   esi
c001d8b8:	52                   	push   edx
c001d8b9:	50                   	push   eax
c001d8ba:	e8 48 f7 ff ff       	call   c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8bf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8c3:	e9 54 02 00 00       	jmp    c001db1c <Vm::x87Handler(regs*)+0x8fb>
c001d8c8:	8d 50 18             	lea    edx,[eax+0x18]
c001d8cb:	80 fa 07             	cmp    dl,0x7
c001d8ce:	0f 87 43 fb ff ff    	ja     c001d417 <Vm::x87Handler(regs*)+0x1f6>
c001d8d4:	83 ec 0c             	sub    esp,0xc
c001d8d7:	2d e8 00 00 00       	sub    eax,0xe8
c001d8dc:	50                   	push   eax
c001d8dd:	e8 02 f8 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d8e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8e9:	89 c6                	mov    esi,eax
c001d8eb:	89 d7                	mov    edi,edx
c001d8ed:	e8 f2 f7 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d8f2:	57                   	push   edi
c001d8f3:	56                   	push   esi
c001d8f4:	52                   	push   edx
c001d8f5:	50                   	push   eax
c001d8f6:	e8 0c f7 ff ff       	call   c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8fb:	83 c4 20             	add    esp,0x20
c001d8fe:	e8 cc f8 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d903:	eb 62                	jmp    c001d967 <Vm::x87Handler(regs*)+0x746>
c001d905:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d909:	0f 85 0f 01 00 00    	jne    c001da1e <Vm::x87Handler(regs*)+0x7fd>
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	6a 01                	push   0x1
c001d914:	e8 cb f7 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d919:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d920:	89 c6                	mov    esi,eax
c001d922:	89 d7                	mov    edi,edx
c001d924:	e8 bb f7 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d929:	57                   	push   edi
c001d92a:	56                   	push   esi
c001d92b:	52                   	push   edx
c001d92c:	50                   	push   eax
c001d92d:	e8 d5 f6 ff ff       	call   c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d932:	83 c4 20             	add    esp,0x20
c001d935:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d939:	e8 91 f8 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d93e:	e8 8c f8 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001d943:	e9 50 f9 ff ff       	jmp    c001d298 <Vm::x87Handler(regs*)+0x77>
c001d948:	3c d9                	cmp    al,0xd9
c001d94a:	0f 85 b5 02 00 00    	jne    c001dc05 <Vm::x87Handler(regs*)+0x9e4>
c001d950:	eb bd                	jmp    c001d90f <Vm::x87Handler(regs*)+0x6ee>
c001d952:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d956:	0f 85 ea 02 00 00    	jne    c001dc46 <Vm::x87Handler(regs*)+0xa25>
c001d95c:	0f b7 05 a0 b9 02 c0 	movzx  eax,WORD PTR ds:0xc002b9a0
c001d963:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d967:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d96b:	e9 28 f9 ff ff       	jmp    c001d298 <Vm::x87Handler(regs*)+0x77>
c001d970:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d974:	84 d2                	test   dl,dl
c001d976:	75 0f                	jne    c001d987 <Vm::x87Handler(regs*)+0x766>
c001d978:	83 ec 0c             	sub    esp,0xc
c001d97b:	ff 36                	push   DWORD PTR [esi]
c001d97d:	e8 b1 f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d982:	e9 2c 01 00 00       	jmp    c001dab3 <Vm::x87Handler(regs*)+0x892>
c001d987:	80 fa 01             	cmp    dl,0x1
c001d98a:	75 0f                	jne    c001d99b <Vm::x87Handler(regs*)+0x77a>
c001d98c:	83 ec 0c             	sub    esp,0xc
c001d98f:	ff 36                	push   DWORD PTR [esi]
c001d991:	e8 9d f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d996:	e9 81 02 00 00       	jmp    c001dc1c <Vm::x87Handler(regs*)+0x9fb>
c001d99b:	80 fa 04             	cmp    dl,0x4
c001d99e:	75 0f                	jne    c001d9af <Vm::x87Handler(regs*)+0x78e>
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	ff 36                	push   DWORD PTR [esi]
c001d9a5:	e8 89 f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d9aa:	e9 86 01 00 00       	jmp    c001db35 <Vm::x87Handler(regs*)+0x914>
c001d9af:	80 fa 05             	cmp    dl,0x5
c001d9b2:	75 1b                	jne    c001d9cf <Vm::x87Handler(regs*)+0x7ae>
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	6a 00                	push   0x0
c001d9b9:	e8 26 f7 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d9be:	89 c7                	mov    edi,eax
c001d9c0:	89 d5                	mov    ebp,edx
c001d9c2:	58                   	pop    eax
c001d9c3:	ff 36                	push   DWORD PTR [esi]
c001d9c5:	e8 69 f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d9ca:	e9 a3 01 00 00       	jmp    c001db72 <Vm::x87Handler(regs*)+0x951>
c001d9cf:	80 fa 06             	cmp    dl,0x6
c001d9d2:	75 0f                	jne    c001d9e3 <Vm::x87Handler(regs*)+0x7c2>
c001d9d4:	83 ec 0c             	sub    esp,0xc
c001d9d7:	ff 36                	push   DWORD PTR [esi]
c001d9d9:	e8 55 f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001d9de:	e9 ae 01 00 00       	jmp    c001db91 <Vm::x87Handler(regs*)+0x970>
c001d9e3:	31 c0                	xor    eax,eax
c001d9e5:	80 fa 07             	cmp    dl,0x7
c001d9e8:	0f 85 94 02 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001d9ee:	83 ec 0c             	sub    esp,0xc
c001d9f1:	6a 00                	push   0x0
c001d9f3:	e8 ec f6 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001d9f8:	89 c7                	mov    edi,eax
c001d9fa:	89 d5                	mov    ebp,edx
c001d9fc:	58                   	pop    eax
c001d9fd:	ff 36                	push   DWORD PTR [esi]
c001d9ff:	e8 2f f4 ff ff       	call   c001ce33 <Vm::fpu32ToInternal(unsigned int)>
c001da04:	e9 cb 01 00 00       	jmp    c001dbd4 <Vm::x87Handler(regs*)+0x9b3>
c001da09:	80 fa 03             	cmp    dl,0x3
c001da0c:	0f 85 d3 01 00 00    	jne    c001dbe5 <Vm::x87Handler(regs*)+0x9c4>
c001da12:	e8 b8 f7 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001da17:	51                   	push   ecx
c001da18:	51                   	push   ecx
c001da19:	e9 de 01 00 00       	jmp    c001dbfc <Vm::x87Handler(regs*)+0x9db>
c001da1e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da22:	80 fa 01             	cmp    dl,0x1
c001da25:	75 09                	jne    c001da30 <Vm::x87Handler(regs*)+0x80f>
c001da27:	57                   	push   edi
c001da28:	57                   	push   edi
c001da29:	8b 06                	mov    eax,DWORD PTR [esi]
c001da2b:	e9 e3 01 00 00       	jmp    c001dc13 <Vm::x87Handler(regs*)+0x9f2>
c001da30:	80 fa 04             	cmp    dl,0x4
c001da33:	75 12                	jne    c001da47 <Vm::x87Handler(regs*)+0x826>
c001da35:	31 d2                	xor    edx,edx
c001da37:	51                   	push   ecx
c001da38:	51                   	push   ecx
c001da39:	8b 06                	mov    eax,DWORD PTR [esi]
c001da3b:	52                   	push   edx
c001da3c:	50                   	push   eax
c001da3d:	e8 d0 f4 ff ff       	call   c001cf12 <Vm::fpuLongToFloat(long long)>
c001da42:	e9 ee 00 00 00       	jmp    c001db35 <Vm::x87Handler(regs*)+0x914>
c001da47:	31 c0                	xor    eax,eax
c001da49:	80 fa 07             	cmp    dl,0x7
c001da4c:	0f 85 30 02 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001da52:	83 ec 0c             	sub    esp,0xc
c001da55:	6a 00                	push   0x0
c001da57:	e8 88 f6 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001da5c:	89 c7                	mov    edi,eax
c001da5e:	89 d5                	mov    ebp,edx
c001da60:	58                   	pop    eax
c001da61:	8b 06                	mov    eax,DWORD PTR [esi]
c001da63:	5a                   	pop    edx
c001da64:	31 d2                	xor    edx,edx
c001da66:	52                   	push   edx
c001da67:	50                   	push   eax
c001da68:	e8 a5 f4 ff ff       	call   c001cf12 <Vm::fpuLongToFloat(long long)>
c001da6d:	e9 62 01 00 00       	jmp    c001dbd4 <Vm::x87Handler(regs*)+0x9b3>
c001da72:	84 d2                	test   dl,dl
c001da74:	75 0d                	jne    c001da83 <Vm::x87Handler(regs*)+0x862>
c001da76:	31 d2                	xor    edx,edx
c001da78:	55                   	push   ebp
c001da79:	55                   	push   ebp
c001da7a:	8b 06                	mov    eax,DWORD PTR [esi]
c001da7c:	52                   	push   edx
c001da7d:	50                   	push   eax
c001da7e:	e9 d3 01 00 00       	jmp    c001dc56 <Vm::x87Handler(regs*)+0xa35>
c001da83:	31 c0                	xor    eax,eax
c001da85:	80 fa 02             	cmp    dl,0x2
c001da88:	0f 85 f4 01 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001da8e:	83 ec 0c             	sub    esp,0xc
c001da91:	6a 00                	push   0x0
c001da93:	e8 4c f6 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001da98:	59                   	pop    ecx
c001da99:	5f                   	pop    edi
c001da9a:	e9 6a f9 ff ff       	jmp    c001d409 <Vm::x87Handler(regs*)+0x1e8>
c001da9f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001daa3:	84 d2                	test   dl,dl
c001daa5:	75 2a                	jne    c001dad1 <Vm::x87Handler(regs*)+0x8b0>
c001daa7:	50                   	push   eax
c001daa8:	50                   	push   eax
c001daa9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daac:	ff 36                	push   DWORD PTR [esi]
c001daae:	e8 c5 f3 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001dab3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daba:	89 c6                	mov    esi,eax
c001dabc:	89 d7                	mov    edi,edx
c001dabe:	e8 21 f6 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001dac3:	57                   	push   edi
c001dac4:	56                   	push   esi
c001dac5:	52                   	push   edx
c001dac6:	50                   	push   eax
c001dac7:	e8 8e f5 ff ff       	call   c001d05a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dacc:	e9 64 01 00 00       	jmp    c001dc35 <Vm::x87Handler(regs*)+0xa14>
c001dad1:	80 fa 01             	cmp    dl,0x1
c001dad4:	75 11                	jne    c001dae7 <Vm::x87Handler(regs*)+0x8c6>
c001dad6:	50                   	push   eax
c001dad7:	50                   	push   eax
c001dad8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dadb:	ff 36                	push   DWORD PTR [esi]
c001dadd:	e8 96 f3 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001dae2:	e9 35 01 00 00       	jmp    c001dc1c <Vm::x87Handler(regs*)+0x9fb>
c001dae7:	80 fa 02             	cmp    dl,0x2
c001daea:	0f 85 54 f9 ff ff    	jne    c001d444 <Vm::x87Handler(regs*)+0x223>
c001daf0:	55                   	push   ebp
c001daf1:	55                   	push   ebp
c001daf2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daf5:	ff 36                	push   DWORD PTR [esi]
c001daf7:	e8 7c f3 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001dafc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db03:	89 c6                	mov    esi,eax
c001db05:	89 d7                	mov    edi,edx
c001db07:	e8 d8 f5 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001db0c:	57                   	push   edi
c001db0d:	56                   	push   esi
c001db0e:	52                   	push   edx
c001db0f:	50                   	push   eax
c001db10:	e8 f2 f4 ff ff       	call   c001d007 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db19:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db1c:	83 c4 20             	add    esp,0x20
c001db1f:	e9 74 f7 ff ff       	jmp    c001d298 <Vm::x87Handler(regs*)+0x77>
c001db24:	80 fa 04             	cmp    dl,0x4
c001db27:	75 2a                	jne    c001db53 <Vm::x87Handler(regs*)+0x932>
c001db29:	51                   	push   ecx
c001db2a:	51                   	push   ecx
c001db2b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db2e:	ff 36                	push   DWORD PTR [esi]
c001db30:	e8 43 f3 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001db35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db3c:	89 c6                	mov    esi,eax
c001db3e:	89 d7                	mov    edi,edx
c001db40:	e8 9f f5 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001db45:	57                   	push   edi
c001db46:	56                   	push   esi
c001db47:	52                   	push   edx
c001db48:	50                   	push   eax
c001db49:	e8 36 f5 ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db4e:	e9 e2 00 00 00       	jmp    c001dc35 <Vm::x87Handler(regs*)+0xa14>
c001db53:	80 fa 05             	cmp    dl,0x5
c001db56:	75 28                	jne    c001db80 <Vm::x87Handler(regs*)+0x95f>
c001db58:	83 ec 0c             	sub    esp,0xc
c001db5b:	6a 00                	push   0x0
c001db5d:	e8 82 f5 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001db62:	89 c7                	mov    edi,eax
c001db64:	89 d5                	mov    ebp,edx
c001db66:	58                   	pop    eax
c001db67:	5a                   	pop    edx
c001db68:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db6b:	ff 36                	push   DWORD PTR [esi]
c001db6d:	e8 06 f3 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001db72:	83 c4 10             	add    esp,0x10
c001db75:	55                   	push   ebp
c001db76:	57                   	push   edi
c001db77:	52                   	push   edx
c001db78:	50                   	push   eax
c001db79:	e8 06 f5 ff ff       	call   c001d084 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db7e:	eb 60                	jmp    c001dbe0 <Vm::x87Handler(regs*)+0x9bf>
c001db80:	80 fa 06             	cmp    dl,0x6
c001db83:	75 2a                	jne    c001dbaf <Vm::x87Handler(regs*)+0x98e>
c001db85:	51                   	push   ecx
c001db86:	51                   	push   ecx
c001db87:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db8a:	ff 36                	push   DWORD PTR [esi]
c001db8c:	e8 e7 f2 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001db91:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db98:	89 c6                	mov    esi,eax
c001db9a:	89 d7                	mov    edi,edx
c001db9c:	e8 43 f5 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001dba1:	57                   	push   edi
c001dba2:	56                   	push   esi
c001dba3:	52                   	push   edx
c001dba4:	50                   	push   eax
c001dba5:	e8 08 f5 ff ff       	call   c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbaa:	e9 86 00 00 00       	jmp    c001dc35 <Vm::x87Handler(regs*)+0xa14>
c001dbaf:	31 c0                	xor    eax,eax
c001dbb1:	80 fa 07             	cmp    dl,0x7
c001dbb4:	0f 85 c8 00 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001dbba:	83 ec 0c             	sub    esp,0xc
c001dbbd:	6a 00                	push   0x0
c001dbbf:	e8 20 f5 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001dbc4:	89 c7                	mov    edi,eax
c001dbc6:	89 d5                	mov    ebp,edx
c001dbc8:	58                   	pop    eax
c001dbc9:	5a                   	pop    edx
c001dbca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbcd:	ff 36                	push   DWORD PTR [esi]
c001dbcf:	e8 a4 f2 ff ff       	call   c001ce78 <Vm::fpu64ToInternal(unsigned long long)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	55                   	push   ebp
c001dbd8:	57                   	push   edi
c001dbd9:	52                   	push   edx
c001dbda:	50                   	push   eax
c001dbdb:	e8 d2 f4 ff ff       	call   c001d0b2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbe0:	83 c4 0c             	add    esp,0xc
c001dbe3:	eb 53                	jmp    c001dc38 <Vm::x87Handler(regs*)+0xa17>
c001dbe5:	31 c0                	xor    eax,eax
c001dbe7:	80 fa 02             	cmp    dl,0x2
c001dbea:	0f 85 92 00 00 00    	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	6a 00                	push   0x0
c001dbf5:	e8 ea f4 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001dbfa:	59                   	pop    ecx
c001dbfb:	5f                   	pop    edi
c001dbfc:	52                   	push   edx
c001dbfd:	50                   	push   eax
c001dbfe:	e8 27 f2 ff ff       	call   c001ce2a <Vm::fpuInternalTo64(unsigned long long)>
c001dc03:	eb 70                	jmp    c001dc75 <Vm::x87Handler(regs*)+0xa54>
c001dc05:	31 c0                	xor    eax,eax
c001dc07:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dc0c:	75 74                	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001dc0e:	50                   	push   eax
c001dc0f:	50                   	push   eax
c001dc10:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc13:	31 d2                	xor    edx,edx
c001dc15:	52                   	push   edx
c001dc16:	50                   	push   eax
c001dc17:	e8 f6 f2 ff ff       	call   c001cf12 <Vm::fpuLongToFloat(long long)>
c001dc1c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc23:	89 c6                	mov    esi,eax
c001dc25:	89 d7                	mov    edi,edx
c001dc27:	e8 b8 f4 ff ff       	call   c001d0e4 <Vm::fpuGetReg(int)>
c001dc2c:	57                   	push   edi
c001dc2d:	56                   	push   esi
c001dc2e:	52                   	push   edx
c001dc2f:	50                   	push   eax
c001dc30:	e8 5e f4 ff ff       	call   c001d093 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc35:	83 c4 1c             	add    esp,0x1c
c001dc38:	52                   	push   edx
c001dc39:	50                   	push   eax
c001dc3a:	6a 00                	push   0x0
c001dc3c:	e8 e6 f4 ff ff       	call   c001d127 <Vm::fpuSetReg(int, unsigned long long)>
c001dc41:	e9 f2 f7 ff ff       	jmp    c001d438 <Vm::x87Handler(regs*)+0x217>
c001dc46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc4a:	80 fa 05             	cmp    dl,0x5
c001dc4d:	75 11                	jne    c001dc60 <Vm::x87Handler(regs*)+0xa3f>
c001dc4f:	55                   	push   ebp
c001dc50:	55                   	push   ebp
c001dc51:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc54:	ff 36                	push   DWORD PTR [esi]
c001dc56:	e8 81 f2 ff ff       	call   c001cedc <Vm::fpuULongToFloat(unsigned long long)>
c001dc5b:	e9 cf f7 ff ff       	jmp    c001d42f <Vm::x87Handler(regs*)+0x20e>
c001dc60:	31 c0                	xor    eax,eax
c001dc62:	80 fa 07             	cmp    dl,0x7
c001dc65:	75 1b                	jne    c001dc82 <Vm::x87Handler(regs*)+0xa61>
c001dc67:	e8 63 f5 ff ff       	call   c001d1cf <Vm::fpuPop()>
c001dc6c:	51                   	push   ecx
c001dc6d:	51                   	push   ecx
c001dc6e:	52                   	push   edx
c001dc6f:	50                   	push   eax
c001dc70:	e8 0c f2 ff ff       	call   c001ce81 <Vm::fpuFloatToLong(unsigned long long)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	89 06                	mov    DWORD PTR [esi],eax
c001dc7a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dc7d:	e9 f8 f7 ff ff       	jmp    c001d47a <Vm::x87Handler(regs*)+0x259>
c001dc82:	83 c4 1c             	add    esp,0x1c
c001dc85:	5b                   	pop    ebx
c001dc86:	5e                   	pop    esi
c001dc87:	5f                   	pop    edi
c001dc88:	5d                   	pop    ebp
c001dc89:	c3                   	ret    

c001dc8a <__static_initialization_and_destruction_0(int, int)>:
c001dc8a:	83 ec 0c             	sub    esp,0xc
c001dc8d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dc92:	75 1a                	jne    c001dcae <__static_initialization_and_destruction_0(int, int)+0x24>
c001dc94:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dc9c:	75 10                	jne    c001dcae <__static_initialization_and_destruction_0(int, int)+0x24>
c001dc9e:	83 ec 0c             	sub    esp,0xc
c001dca1:	68 a0 b9 02 c0       	push   0xc002b9a0
c001dca6:	e8 15 7b 00 00       	call   c00257c0 <Vm::_FPUState::_FPUState()>
c001dcab:	83 c4 10             	add    esp,0x10
c001dcae:	90                   	nop
c001dcaf:	83 c4 0c             	add    esp,0xc
c001dcb2:	c3                   	ret    

c001dcb3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dcb3:	83 ec 0c             	sub    esp,0xc
c001dcb6:	83 ec 08             	sub    esp,0x8
c001dcb9:	68 ff ff 00 00       	push   0xffff
c001dcbe:	6a 01                	push   0x1
c001dcc0:	e8 c5 ff ff ff       	call   c001dc8a <__static_initialization_and_destruction_0(int, int)>
c001dcc5:	83 c4 10             	add    esp,0x10
c001dcc8:	83 c4 0c             	add    esp,0xc
c001dccb:	c3                   	ret    

c001dccc <FAT::getName()>:
c001dccc:	b8 f0 8a 02 c0       	mov    eax,0xc0028af0
c001dcd1:	c3                   	ret    

c001dcd2 <FAT::tell(void*, unsigned long long*)>:
c001dcd2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcd7:	75 06                	jne    c001dcdf <FAT::tell(void*, unsigned long long*)+0xd>
c001dcd9:	b8 04 00 00 00       	mov    eax,0x4
c001dcde:	c3                   	ret    
c001dcdf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dce4:	75 06                	jne    c001dcec <FAT::tell(void*, unsigned long long*)+0x1a>
c001dce6:	b8 04 00 00 00       	mov    eax,0x4
c001dceb:	c3                   	ret    
c001dcec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dcf0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dcf3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dcf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcfa:	89 01                	mov    DWORD PTR [ecx],eax
c001dcfc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dcff:	b8 00 00 00 00       	mov    eax,0x0
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <FAT::stat(void*, unsigned long long*)>:
c001dd06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd0b:	75 06                	jne    c001dd13 <FAT::stat(void*, unsigned long long*)+0xd>
c001dd0d:	b8 04 00 00 00       	mov    eax,0x4
c001dd12:	c3                   	ret    
c001dd13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd18:	75 06                	jne    c001dd20 <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd1a:	b8 04 00 00 00       	mov    eax,0x4
c001dd1f:	c3                   	ret    
c001dd20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd24:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd2e:	89 01                	mov    DWORD PTR [ecx],eax
c001dd30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd33:	b8 00 00 00 00       	mov    eax,0x0
c001dd38:	c3                   	ret    
c001dd39:	90                   	nop

c001dd3a <FAT::~FAT()>:
c001dd3a:	83 ec 0c             	sub    esp,0xc
c001dd3d:	ba 74 8b 02 c0       	mov    edx,0xc0028b74
c001dd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd46:	89 10                	mov    DWORD PTR [eax],edx
c001dd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	50                   	push   eax
c001dd50:	e8 27 48 ff ff       	call   c001257c <Filesystem::~Filesystem()>
c001dd55:	83 c4 10             	add    esp,0x10
c001dd58:	90                   	nop
c001dd59:	83 c4 0c             	add    esp,0xc
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <FAT::~FAT()>:
c001dd5e:	83 ec 0c             	sub    esp,0xc
c001dd61:	83 ec 0c             	sub    esp,0xc
c001dd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd68:	e8 cd ff ff ff       	call   c001dd3a <FAT::~FAT()>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	83 ec 08             	sub    esp,0x8
c001dd73:	6a 08                	push   0x8
c001dd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd79:	e8 f5 43 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001dd7e:	83 c4 10             	add    esp,0x10
c001dd81:	83 c4 0c             	add    esp,0xc
c001dd84:	c3                   	ret    
c001dd85:	90                   	nop

c001dd86 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001dd86:	83 ec 1c             	sub    esp,0x1c
c001dd89:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001dd90:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001dd95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dd99:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001dda0:	83 f8 ff             	cmp    eax,0xffffffff
c001dda3:	75 34                	jne    c001ddd9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dda5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dda9:	88 c2                	mov    dl,al
c001ddab:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001ddb0:	01 d0                	add    eax,edx
c001ddb2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddb6:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001ddbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddc0:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001ddc7:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001ddcc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddd0:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001ddd7:	eb 17                	jmp    c001ddf0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddd9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dddd:	88 c2                	mov    dl,al
c001dddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dde3:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001ddea:	01 d0                	add    eax,edx
c001ddec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddf0:	83 ec 04             	sub    esp,0x4
c001ddf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ddf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ddfb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ddff:	50                   	push   eax
c001de00:	e8 d5 8c fe ff       	call   c0006ada <f_getlabel>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de11:	75 07                	jne    c001de1a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de13:	b8 00 00 00 00       	mov    eax,0x0
c001de18:	eb 05                	jmp    c001de1f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de1a:	b8 01 00 00 00       	mov    eax,0x1
c001de1f:	83 c4 1c             	add    esp,0x1c
c001de22:	c3                   	ret    
c001de23:	90                   	nop

c001de24 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de24:	57                   	push   edi
c001de25:	83 ec 58             	sub    esp,0x58
c001de28:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de30:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de34:	b9 0f 00 00 00       	mov    ecx,0xf
c001de39:	b8 00 00 00 00       	mov    eax,0x0
c001de3e:	fc                   	cld    
c001de3f:	89 d7                	mov    edi,edx
c001de41:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de43:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de47:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001de4e:	83 f8 ff             	cmp    eax,0xffffffff
c001de51:	75 34                	jne    c001de87 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de53:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de57:	88 c2                	mov    dl,al
c001de59:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001de5e:	01 d0                	add    eax,edx
c001de60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de64:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001de6a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de6e:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001de75:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001de7a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001de7e:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001de85:	eb 17                	jmp    c001de9e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001de87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de8b:	88 c2                	mov    dl,al
c001de8d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de91:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001de98:	01 d0                	add    eax,edx
c001de9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de9e:	83 ec 08             	sub    esp,0x8
c001dea1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dea5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dea9:	50                   	push   eax
c001deaa:	e8 24 29 fe ff       	call   c00007d3 <strcat>
c001deaf:	83 c4 10             	add    esp,0x10
c001deb2:	83 ec 0c             	sub    esp,0xc
c001deb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001deb9:	50                   	push   eax
c001deba:	e8 09 8e fe ff       	call   c0006cc8 <f_setlabel>
c001debf:	83 c4 10             	add    esp,0x10
c001dec2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dec6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001decb:	75 07                	jne    c001ded4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001decd:	b8 00 00 00 00       	mov    eax,0x0
c001ded2:	eb 05                	jmp    c001ded9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ded4:	b8 01 00 00 00       	mov    eax,0x1
c001ded9:	83 c4 58             	add    esp,0x58
c001dedc:	5f                   	pop    edi
c001dedd:	c3                   	ret    

c001dede <FAT::format(LogicalDisk*, int, char const*, int)>:
c001dede:	83 ec 2c             	sub    esp,0x2c
c001dee1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dee9:	83 ec 08             	sub    esp,0x8
c001deec:	68 14 8b 02 c0       	push   0xc0028b14
c001def1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001def5:	e8 73 28 fe ff       	call   c000076d <strcmp>
c001defa:	83 c4 10             	add    esp,0x10
c001defd:	85 c0                	test   eax,eax
c001deff:	0f 94 c0             	sete   al
c001df02:	84 c0                	test   al,al
c001df04:	74 0d                	je     c001df13 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df06:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df0e:	e9 a6 00 00 00       	jmp    c001dfb9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df13:	83 ec 08             	sub    esp,0x8
c001df16:	68 06 8b 02 c0       	push   0xc0028b06
c001df1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df1f:	e8 49 28 fe ff       	call   c000076d <strcmp>
c001df24:	83 c4 10             	add    esp,0x10
c001df27:	85 c0                	test   eax,eax
c001df29:	0f 94 c0             	sete   al
c001df2c:	84 c0                	test   al,al
c001df2e:	74 0a                	je     c001df3a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df30:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df38:	eb 7f                	jmp    c001dfb9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df3a:	83 ec 08             	sub    esp,0x8
c001df3d:	68 0c 8b 02 c0       	push   0xc0028b0c
c001df42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df46:	e8 22 28 fe ff       	call   c000076d <strcmp>
c001df4b:	83 c4 10             	add    esp,0x10
c001df4e:	85 c0                	test   eax,eax
c001df50:	0f 94 c0             	sete   al
c001df53:	84 c0                	test   al,al
c001df55:	74 0a                	je     c001df61 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df57:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df5f:	eb 58                	jmp    c001dfb9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df61:	83 ec 08             	sub    esp,0x8
c001df64:	68 2c 5e 02 c0       	push   0xc0025e2c
c001df69:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df6d:	e8 fb 27 fe ff       	call   c000076d <strcmp>
c001df72:	83 c4 10             	add    esp,0x10
c001df75:	85 c0                	test   eax,eax
c001df77:	0f 94 c0             	sete   al
c001df7a:	84 c0                	test   al,al
c001df7c:	74 0a                	je     c001df88 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001df7e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001df86:	eb 31                	jmp    c001dfb9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df88:	83 ec 08             	sub    esp,0x8
c001df8b:	68 12 8b 02 c0       	push   0xc0028b12
c001df90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df94:	e8 d4 27 fe ff       	call   c000076d <strcmp>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	85 c0                	test   eax,eax
c001df9e:	0f 94 c0             	sete   al
c001dfa1:	84 c0                	test   al,al
c001dfa3:	74 0a                	je     c001dfaf <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfa5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfad:	eb 0a                	jmp    c001dfb9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfaf:	b8 08 00 00 00       	mov    eax,0x8
c001dfb4:	e9 04 01 00 00       	jmp    c001e0bd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfb9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfc0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfc9:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001dfd0:	83 f8 ff             	cmp    eax,0xffffffff
c001dfd3:	75 34                	jne    c001e009 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dfd5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dfd9:	88 c2                	mov    dl,al
c001dfdb:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001dfe0:	01 d0                	add    eax,edx
c001dfe2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001dfe6:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001dfec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dff0:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001dff7:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001dffc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e000:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001e007:	eb 17                	jmp    c001e020 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e009:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e00d:	88 c2                	mov    dl,al
c001e00f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e013:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e01a:	01 d0                	add    eax,edx
c001e01c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e020:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e024:	88 04 24             	mov    BYTE PTR [esp],al
c001e027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e02b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e02f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e037:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e03c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	68 00 20 00 00       	push   0x2000
c001e04c:	e8 db 10 ff ff       	call   c000f12c <malloc>
c001e051:	83 c4 10             	add    esp,0x10
c001e054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e058:	68 00 20 00 00       	push   0x2000
c001e05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e061:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e065:	50                   	push   eax
c001e066:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e06a:	50                   	push   eax
c001e06b:	e8 a3 90 fe ff       	call   c0007113 <f_mkfs>
c001e070:	83 c4 10             	add    esp,0x10
c001e073:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e077:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e07c:	75 07                	jne    c001e085 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e07e:	b8 00 00 00 00       	mov    eax,0x0
c001e083:	eb 38                	jmp    c001e0bd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e085:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e08a:	75 17                	jne    c001e0a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	68 44 8b 02 c0       	push   0xc0028b44
c001e094:	e8 ba 41 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001e099:	83 c4 10             	add    esp,0x10
c001e09c:	b8 09 00 00 00       	mov    eax,0x9
c001e0a1:	eb 1a                	jmp    c001e0bd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0a7:	83 ec 08             	sub    esp,0x8
c001e0aa:	50                   	push   eax
c001e0ab:	68 18 8b 02 c0       	push   0xc0028b18
c001e0b0:	e8 9e 41 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001e0b5:	83 c4 10             	add    esp,0x10
c001e0b8:	b8 01 00 00 00       	mov    eax,0x1
c001e0bd:	83 c4 2c             	add    esp,0x2c
c001e0c0:	c3                   	ret    
c001e0c1:	90                   	nop

c001e0c2 <FAT::tryMount(LogicalDisk*, int)>:
c001e0c2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0c8:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e0cd:	83 f8 14             	cmp    eax,0x14
c001e0d0:	75 17                	jne    c001e0e9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	68 2a 8b 02 c0       	push   0xc0028b2a
c001e0da:	e8 f2 a8 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	b0 00                	mov    al,0x0
c001e0e4:	e9 d7 01 00 00       	jmp    c001e2c0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e0e9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e0f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e0f6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0fc:	3d 00 02 00 00       	cmp    eax,0x200
c001e101:	74 07                	je     c001e10a <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e103:	b0 00                	mov    al,0x0
c001e105:	e9 b6 01 00 00       	jmp    c001e2c0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e10a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e112:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e119:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e120:	83 f8 ff             	cmp    eax,0xffffffff
c001e123:	74 07                	je     c001e12c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e125:	b0 01                	mov    al,0x1
c001e127:	e9 94 01 00 00       	jmp    c001e2c0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e12c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e136:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e13e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e145:	88 c2                	mov    dl,al
c001e147:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e14c:	01 d0                	add    eax,edx
c001e14e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e155:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001e15b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e162:	89 14 85 20 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45e0],edx
c001e169:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e16e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e175:	89 14 85 a0 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4560],edx
c001e17c:	83 ec 0c             	sub    esp,0xc
c001e17f:	68 54 02 00 00       	push   0x254
c001e184:	e8 a3 0f ff ff       	call   c000f12c <malloc>
c001e189:	83 c4 10             	add    esp,0x10
c001e18c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e193:	83 ec 04             	sub    esp,0x4
c001e196:	6a 00                	push   0x0
c001e198:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e19f:	50                   	push   eax
c001e1a0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1a7:	e8 25 6b fe ff       	call   c0004cd1 <f_mount>
c001e1ac:	83 c4 10             	add    esp,0x10
c001e1af:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1b6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1be:	74 19                	je     c001e1d9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1ca:	e8 7d 0f ff ff       	call   c000f14c <rfree>
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	b0 00                	mov    al,0x0
c001e1d4:	e9 e7 00 00 00       	jmp    c001e2c0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1d9:	83 ec 04             	sub    esp,0x4
c001e1dc:	68 00 01 00 00       	push   0x100
c001e1e1:	6a 00                	push   0x0
c001e1e3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e1ea:	50                   	push   eax
c001e1eb:	e8 8d 24 fe ff       	call   c000067d <memset>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	83 ec 08             	sub    esp,0x8
c001e1f6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1fd:	50                   	push   eax
c001e1fe:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e205:	50                   	push   eax
c001e206:	e8 c8 25 fe ff       	call   c00007d3 <strcat>
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	83 ec 08             	sub    esp,0x8
c001e211:	68 38 8b 02 c0       	push   0xc0028b38
c001e216:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e21d:	50                   	push   eax
c001e21e:	e8 b0 25 fe ff       	call   c00007d3 <strcat>
c001e223:	83 c4 10             	add    esp,0x10
c001e226:	83 ec 04             	sub    esp,0x4
c001e229:	6a 01                	push   0x1
c001e22b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e232:	50                   	push   eax
c001e233:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e237:	50                   	push   eax
c001e238:	e8 f6 6a fe ff       	call   c0004d33 <f_open>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e247:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e24e:	85 c0                	test   eax,eax
c001e250:	74 0a                	je     c001e25c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e252:	78 2d                	js     c001e281 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e254:	83 e8 04             	sub    eax,0x4
c001e257:	83 f8 01             	cmp    eax,0x1
c001e25a:	77 25                	ja     c001e281 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e25c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e26b:	50                   	push   eax
c001e26c:	e8 14 76 fe ff       	call   c0005885 <f_close>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	90                   	nop
c001e275:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e27d:	74 3a                	je     c001e2b9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e27f:	eb 2d                	jmp    c001e2ae <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e281:	83 ec 0c             	sub    esp,0xc
c001e284:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e28b:	e8 bc 0e ff ff       	call   c000f14c <rfree>
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	83 ec 04             	sub    esp,0x4
c001e296:	6a 00                	push   0x0
c001e298:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e29f:	50                   	push   eax
c001e2a0:	6a 00                	push   0x0
c001e2a2:	e8 2a 6a fe ff       	call   c0004cd1 <f_mount>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	b0 00                	mov    al,0x0
c001e2ac:	eb 12                	jmp    c001e2c0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2ae:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001e2b3:	40                   	inc    eax
c001e2b4:	a3 00 ba 02 c0       	mov    ds:0xc002ba00,eax
c001e2b9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2c0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2c6:	c3                   	ret    
c001e2c7:	90                   	nop

c001e2c8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2c8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2ce:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2d6:	74 0a                	je     c001e2e2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2d8:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e2e0:	75 0a                	jne    c001e2ec <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e2e2:	b8 04 00 00 00       	mov    eax,0x4
c001e2e7:	e9 db 00 00 00       	jmp    c001e3c7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e2ec:	83 ec 08             	sub    esp,0x8
c001e2ef:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e2f6:	50                   	push   eax
c001e2f7:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e2fe:	e8 8c 7b fe ff       	call   c0005e8f <f_readdir>
c001e303:	83 c4 10             	add    esp,0x10
c001e306:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e30d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e313:	83 ec 0c             	sub    esp,0xc
c001e316:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e31d:	83 c0 1a             	add    eax,0x1a
c001e320:	50                   	push   eax
c001e321:	e8 74 23 fe ff       	call   c000069a <strlen>
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	ba 00 00 00 00       	mov    edx,0x0
c001e32e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e336:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e33d:	0f b6 c0             	movzx  eax,al
c001e340:	83 e0 10             	and    eax,0x10
c001e343:	74 07                	je     c001e34c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e345:	b8 02 00 00 00       	mov    eax,0x2
c001e34a:	eb 05                	jmp    c001e351 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e34c:	b8 01 00 00 00       	mov    eax,0x1
c001e351:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e355:	83 ec 08             	sub    esp,0x8
c001e358:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e35f:	83 c0 1a             	add    eax,0x1a
c001e362:	50                   	push   eax
c001e363:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e367:	83 c0 10             	add    eax,0x10
c001e36a:	50                   	push   eax
c001e36b:	e8 ac 23 fe ff       	call   c000071c <strcpy>
c001e370:	83 c4 10             	add    esp,0x10
c001e373:	83 ec 04             	sub    esp,0x4
c001e376:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e37d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e381:	50                   	push   eax
c001e382:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e389:	e8 b9 22 fe ff       	call   c0000647 <memcpy>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e398:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e39e:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3a5:	84 c0                	test   al,al
c001e3a7:	75 07                	jne    c001e3b0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3a9:	b8 07 00 00 00       	mov    eax,0x7
c001e3ae:	eb 17                	jmp    c001e3c7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3b0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3b7:	85 c0                	test   eax,eax
c001e3b9:	75 07                	jne    c001e3c2 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3bb:	b8 00 00 00 00       	mov    eax,0x0
c001e3c0:	eb 05                	jmp    c001e3c7 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3c2:	b8 01 00 00 00       	mov    eax,0x1
c001e3c7:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3cd:	c3                   	ret    

c001e3ce <FAT::read(void*, unsigned long, void*, int*)>:
c001e3ce:	83 ec 1c             	sub    esp,0x1c
c001e3d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3d6:	74 07                	je     c001e3df <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3d8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e3dd:	75 07                	jne    c001e3e6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e3df:	b8 04 00 00 00       	mov    eax,0x4
c001e3e4:	eb 3d                	jmp    c001e423 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e3e6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e3ea:	50                   	push   eax
c001e3eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e3ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e3f7:	e8 73 6d fe ff       	call   c000516f <f_read>
c001e3fc:	83 c4 10             	add    esp,0x10
c001e3ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e403:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e407:	89 c2                	mov    edx,eax
c001e409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e40d:	89 10                	mov    DWORD PTR [eax],edx
c001e40f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e413:	85 c0                	test   eax,eax
c001e415:	75 07                	jne    c001e41e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e417:	b8 00 00 00 00       	mov    eax,0x0
c001e41c:	eb 05                	jmp    c001e423 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e41e:	b8 01 00 00 00       	mov    eax,0x1
c001e423:	83 c4 1c             	add    esp,0x1c
c001e426:	c3                   	ret    
c001e427:	90                   	nop

c001e428 <FAT::write(void*, unsigned long, void*, int*)>:
c001e428:	83 ec 1c             	sub    esp,0x1c
c001e42b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e430:	74 07                	je     c001e439 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e432:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e437:	75 07                	jne    c001e440 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e439:	b8 04 00 00 00       	mov    eax,0x4
c001e43e:	eb 3d                	jmp    c001e47d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e440:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e444:	50                   	push   eax
c001e445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e449:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e44d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e451:	e8 99 6f fe ff       	call   c00053ef <f_write>
c001e456:	83 c4 10             	add    esp,0x10
c001e459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e45d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e461:	89 c2                	mov    edx,eax
c001e463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e467:	89 10                	mov    DWORD PTR [eax],edx
c001e469:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e46d:	85 c0                	test   eax,eax
c001e46f:	75 07                	jne    c001e478 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e471:	b8 00 00 00 00       	mov    eax,0x0
c001e476:	eb 05                	jmp    c001e47d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e478:	b8 01 00 00 00       	mov    eax,0x1
c001e47d:	83 c4 1c             	add    esp,0x1c
c001e480:	c3                   	ret    
c001e481:	90                   	nop

c001e482 <FAT::close(void*)>:
c001e482:	83 ec 1c             	sub    esp,0x1c
c001e485:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e48a:	75 07                	jne    c001e493 <FAT::close(void*)+0x11>
c001e48c:	b8 04 00 00 00       	mov    eax,0x4
c001e491:	eb 36                	jmp    c001e4c9 <FAT::close(void*)+0x47>
c001e493:	83 ec 0c             	sub    esp,0xc
c001e496:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e49a:	e8 e6 73 fe ff       	call   c0005885 <f_close>
c001e49f:	83 c4 10             	add    esp,0x10
c001e4a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4ad:	e8 8a 0c ff ff       	call   c000f13c <free>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4b9:	85 c0                	test   eax,eax
c001e4bb:	75 07                	jne    c001e4c4 <FAT::close(void*)+0x42>
c001e4bd:	b8 00 00 00 00       	mov    eax,0x0
c001e4c2:	eb 05                	jmp    c001e4c9 <FAT::close(void*)+0x47>
c001e4c4:	b8 01 00 00 00       	mov    eax,0x1
c001e4c9:	83 c4 1c             	add    esp,0x1c
c001e4cc:	c3                   	ret    
c001e4cd:	90                   	nop

c001e4ce <FAT::closeDir(void*)>:
c001e4ce:	83 ec 1c             	sub    esp,0x1c
c001e4d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4d6:	75 07                	jne    c001e4df <FAT::closeDir(void*)+0x11>
c001e4d8:	b8 04 00 00 00       	mov    eax,0x4
c001e4dd:	eb 36                	jmp    c001e515 <FAT::closeDir(void*)+0x47>
c001e4df:	83 ec 0c             	sub    esp,0xc
c001e4e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4e6:	e8 82 79 fe ff       	call   c0005e6d <f_closedir>
c001e4eb:	83 c4 10             	add    esp,0x10
c001e4ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4f2:	83 ec 0c             	sub    esp,0xc
c001e4f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4f9:	e8 3e 0c ff ff       	call   c000f13c <free>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e505:	85 c0                	test   eax,eax
c001e507:	75 07                	jne    c001e510 <FAT::closeDir(void*)+0x42>
c001e509:	b8 00 00 00 00       	mov    eax,0x0
c001e50e:	eb 05                	jmp    c001e515 <FAT::closeDir(void*)+0x47>
c001e510:	b8 01 00 00 00       	mov    eax,0x1
c001e515:	83 c4 1c             	add    esp,0x1c
c001e518:	c3                   	ret    
c001e519:	90                   	nop

c001e51a <FAT::seek(void*, unsigned long long)>:
c001e51a:	83 ec 2c             	sub    esp,0x2c
c001e51d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e525:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e52d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e532:	75 07                	jne    c001e53b <FAT::seek(void*, unsigned long long)+0x21>
c001e534:	b8 04 00 00 00       	mov    eax,0x4
c001e539:	eb 2f                	jmp    c001e56a <FAT::seek(void*, unsigned long long)+0x50>
c001e53b:	83 ec 04             	sub    esp,0x4
c001e53e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e542:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e546:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e54a:	e8 65 73 fe ff       	call   c00058b4 <f_lseek>
c001e54f:	83 c4 10             	add    esp,0x10
c001e552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e556:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e55a:	85 c0                	test   eax,eax
c001e55c:	75 07                	jne    c001e565 <FAT::seek(void*, unsigned long long)+0x4b>
c001e55e:	b8 00 00 00 00       	mov    eax,0x0
c001e563:	eb 05                	jmp    c001e56a <FAT::seek(void*, unsigned long long)+0x50>
c001e565:	b8 01 00 00 00       	mov    eax,0x1
c001e56a:	83 c4 2c             	add    esp,0x2c
c001e56d:	c3                   	ret    

c001e56e <fatWrapperReadDisk>:
c001e56e:	83 ec 1c             	sub    esp,0x1c
c001e571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e575:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e57d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e580:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e584:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e588:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e58d:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e594:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e598:	83 ec 0c             	sub    esp,0xc
c001e59b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e59f:	52                   	push   edx
c001e5a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5a8:	50                   	push   eax
c001e5a9:	e8 8a 72 ff ff       	call   c0015838 <LogicalDisk::read(unsigned long long, int, void*)>
c001e5ae:	83 c4 20             	add    esp,0x20
c001e5b1:	83 c4 1c             	add    esp,0x1c
c001e5b4:	c3                   	ret    

c001e5b5 <fatWrapperWriteDisk>:
c001e5b5:	83 ec 1c             	sub    esp,0x1c
c001e5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5c4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5cf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5d4:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e5db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5df:	83 ec 0c             	sub    esp,0xc
c001e5e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5e6:	52                   	push   edx
c001e5e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5ef:	50                   	push   eax
c001e5f0:	e8 af 72 ff ff       	call   c00158a4 <LogicalDisk::write(unsigned long long, int, void*)>
c001e5f5:	83 c4 20             	add    esp,0x20
c001e5f8:	83 c4 1c             	add    esp,0x1c
c001e5fb:	c3                   	ret    

c001e5fc <fatWrapperIoctl>:
c001e5fc:	53                   	push   ebx
c001e5fd:	83 ec 28             	sub    esp,0x28
c001e600:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e604:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e608:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e60c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e610:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e615:	75 31                	jne    c001e648 <fatWrapperIoctl+0x4c>
c001e617:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e61b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e61f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e624:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e62b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e631:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e63b:	66 89 02             	mov    WORD PTR [edx],ax
c001e63e:	b8 00 00 00 00       	mov    eax,0x0
c001e643:	e9 b2 00 00 00       	jmp    c001e6fa <fatWrapperIoctl+0xfe>
c001e648:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e64d:	75 6a                	jne    c001e6b9 <fatWrapperIoctl+0xbd>
c001e64f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e653:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e657:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e65c:	8b 04 85 60 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55a0]
c001e663:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e669:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e66f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e675:	89 c8                	mov    eax,ecx
c001e677:	89 da                	mov    edx,ebx
c001e679:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e67d:	c1 e0 0a             	shl    eax,0xa
c001e680:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e685:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c001e68c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e692:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e698:	89 cb                	mov    ebx,ecx
c001e69a:	c1 fb 1f             	sar    ebx,0x1f
c001e69d:	53                   	push   ebx
c001e69e:	51                   	push   ecx
c001e69f:	52                   	push   edx
c001e6a0:	50                   	push   eax
c001e6a1:	e8 c6 4d 00 00       	call   c002346c <__udivdi3>
c001e6a6:	83 c4 10             	add    esp,0x10
c001e6a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6ad:	89 01                	mov    DWORD PTR [ecx],eax
c001e6af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6b2:	b8 00 00 00 00       	mov    eax,0x0
c001e6b7:	eb 41                	jmp    c001e6fa <fatWrapperIoctl+0xfe>
c001e6b9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6be:	75 07                	jne    c001e6c7 <fatWrapperIoctl+0xcb>
c001e6c0:	b8 00 00 00 00       	mov    eax,0x0
c001e6c5:	eb 33                	jmp    c001e6fa <fatWrapperIoctl+0xfe>
c001e6c7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6cc:	75 19                	jne    c001e6e7 <fatWrapperIoctl+0xeb>
c001e6ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6da:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e6e0:	b8 00 00 00 00       	mov    eax,0x0
c001e6e5:	eb 13                	jmp    c001e6fa <fatWrapperIoctl+0xfe>
c001e6e7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e6ec:	75 07                	jne    c001e6f5 <fatWrapperIoctl+0xf9>
c001e6ee:	b8 00 00 00 00       	mov    eax,0x0
c001e6f3:	eb 05                	jmp    c001e6fa <fatWrapperIoctl+0xfe>
c001e6f5:	b8 04 00 00 00       	mov    eax,0x4
c001e6fa:	83 c4 28             	add    esp,0x28
c001e6fd:	5b                   	pop    ebx
c001e6fe:	c3                   	ret    
c001e6ff:	90                   	nop

c001e700 <FAT::FAT()>:
c001e700:	83 ec 1c             	sub    esp,0x1c
c001e703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e707:	83 ec 0c             	sub    esp,0xc
c001e70a:	50                   	push   eax
c001e70b:	e8 48 3e ff ff       	call   c0012558 <Filesystem::Filesystem()>
c001e710:	83 c4 10             	add    esp,0x10
c001e713:	ba 74 8b 02 c0       	mov    edx,0xc0028b74
c001e718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e71c:	89 10                	mov    DWORD PTR [eax],edx
c001e71e:	c7 05 00 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ba00,0x0
c001e728:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e730:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e735:	7f 15                	jg     c001e74c <FAT::FAT()+0x4c>
c001e737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e73b:	c7 04 85 20 ba 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd45e0],0xffffffff
c001e746:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e74a:	eb e4                	jmp    c001e730 <FAT::FAT()+0x30>
c001e74c:	90                   	nop
c001e74d:	83 c4 1c             	add    esp,0x1c
c001e750:	c3                   	ret    
c001e751:	90                   	nop

c001e752 <FAT::fixFilepath(char*)>:
c001e752:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e756:	8a 00                	mov    al,BYTE PTR [eax]
c001e758:	3c 40                	cmp    al,0x40
c001e75a:	7e 2c                	jle    c001e788 <FAT::fixFilepath(char*)+0x36>
c001e75c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e760:	8a 00                	mov    al,BYTE PTR [eax]
c001e762:	83 e8 41             	sub    eax,0x41
c001e765:	88 c2                	mov    dl,al
c001e767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e76b:	88 10                	mov    BYTE PTR [eax],dl
c001e76d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e771:	8a 00                	mov    al,BYTE PTR [eax]
c001e773:	0f be c0             	movsx  eax,al
c001e776:	8b 04 85 20 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd45e0]
c001e77d:	83 c0 30             	add    eax,0x30
c001e780:	88 c2                	mov    dl,al
c001e782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e786:	88 10                	mov    BYTE PTR [eax],dl
c001e788:	90                   	nop
c001e789:	c3                   	ret    

c001e78a <FAT::open(char const*, void**, FileOpenMode)>:
c001e78a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e790:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e798:	74 0a                	je     c001e7a4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e79a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7a2:	75 0a                	jne    c001e7ae <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7a4:	b8 04 00 00 00       	mov    eax,0x4
c001e7a9:	e9 fd 00 00 00       	jmp    c001e8ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7ae:	83 ec 08             	sub    esp,0x8
c001e7b1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7bc:	50                   	push   eax
c001e7bd:	e8 5a 1f fe ff       	call   c000071c <strcpy>
c001e7c2:	83 c4 10             	add    esp,0x10
c001e7c5:	83 ec 08             	sub    esp,0x8
c001e7c8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7cc:	50                   	push   eax
c001e7cd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7d4:	e8 79 ff ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001e7d9:	83 c4 10             	add    esp,0x10
c001e7dc:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e7e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e7eb:	83 e0 01             	and    eax,0x1
c001e7ee:	74 08                	je     c001e7f8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e7f0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e7f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e7ff:	83 e0 04             	and    eax,0x4
c001e802:	74 10                	je     c001e814 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e804:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e80c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e814:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e81b:	83 e0 02             	and    eax,0x2
c001e81e:	74 08                	je     c001e828 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e820:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e828:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e82f:	83 e0 08             	and    eax,0x8
c001e832:	74 08                	je     c001e83c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e834:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e83c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e843:	83 e0 10             	and    eax,0x10
c001e846:	74 08                	je     c001e850 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e848:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	68 50 02 00 00       	push   0x250
c001e858:	e8 cf 08 ff ff       	call   c000f12c <malloc>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	89 c2                	mov    edx,eax
c001e862:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e869:	89 10                	mov    DWORD PTR [eax],edx
c001e86b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e873:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e87a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e87c:	83 ec 04             	sub    esp,0x4
c001e87f:	52                   	push   edx
c001e880:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e884:	52                   	push   edx
c001e885:	50                   	push   eax
c001e886:	e8 a8 64 fe ff       	call   c0004d33 <f_open>
c001e88b:	83 c4 10             	add    esp,0x10
c001e88e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e895:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e89d:	74 07                	je     c001e8a6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e89f:	b8 01 00 00 00       	mov    eax,0x1
c001e8a4:	eb 05                	jmp    c001e8ab <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8a6:	b8 00 00 00 00       	mov    eax,0x0
c001e8ab:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8b1:	c3                   	ret    

c001e8b2 <FAT::openDir(char const*, void**)>:
c001e8b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8b8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8c0:	74 0a                	je     c001e8cc <FAT::openDir(char const*, void**)+0x1a>
c001e8c2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8ca:	75 07                	jne    c001e8d3 <FAT::openDir(char const*, void**)+0x21>
c001e8cc:	b8 04 00 00 00       	mov    eax,0x4
c001e8d1:	eb 7d                	jmp    c001e950 <FAT::openDir(char const*, void**)+0x9e>
c001e8d3:	83 ec 08             	sub    esp,0x8
c001e8d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e8e1:	50                   	push   eax
c001e8e2:	e8 35 1e fe ff       	call   c000071c <strcpy>
c001e8e7:	83 c4 10             	add    esp,0x10
c001e8ea:	83 ec 08             	sub    esp,0x8
c001e8ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8f1:	50                   	push   eax
c001e8f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8f9:	e8 54 fe ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001e8fe:	83 c4 10             	add    esp,0x10
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	6a 4c                	push   0x4c
c001e906:	e8 21 08 ff ff       	call   c000f12c <malloc>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	89 c2                	mov    edx,eax
c001e910:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e917:	89 10                	mov    DWORD PTR [eax],edx
c001e919:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e920:	8b 00                	mov    eax,DWORD PTR [eax]
c001e922:	83 ec 08             	sub    esp,0x8
c001e925:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e929:	52                   	push   edx
c001e92a:	50                   	push   eax
c001e92b:	e8 3b 74 fe ff       	call   c0005d6b <f_opendir>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e93a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e942:	74 07                	je     c001e94b <FAT::openDir(char const*, void**)+0x99>
c001e944:	b8 01 00 00 00       	mov    eax,0x1
c001e949:	eb 05                	jmp    c001e950 <FAT::openDir(char const*, void**)+0x9e>
c001e94b:	b8 00 00 00 00       	mov    eax,0x0
c001e950:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e956:	c3                   	ret    
c001e957:	90                   	nop

c001e958 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e958:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e95e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e966:	75 0a                	jne    c001e972 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e968:	b8 04 00 00 00       	mov    eax,0x4
c001e96d:	e9 c9 00 00 00       	jmp    c001ea3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e972:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e97a:	75 0a                	jne    c001e986 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e97c:	b8 04 00 00 00       	mov    eax,0x4
c001e981:	e9 b5 00 00 00       	jmp    c001ea3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e986:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e98e:	75 0a                	jne    c001e99a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e990:	b8 04 00 00 00       	mov    eax,0x4
c001e995:	e9 a1 00 00 00       	jmp    c001ea3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e99a:	83 ec 08             	sub    esp,0x8
c001e99d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9ab:	50                   	push   eax
c001e9ac:	e8 6b 1d fe ff       	call   c000071c <strcpy>
c001e9b1:	83 c4 10             	add    esp,0x10
c001e9b4:	83 ec 08             	sub    esp,0x8
c001e9b7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9be:	50                   	push   eax
c001e9bf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9c6:	e8 87 fd ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	83 ec 08             	sub    esp,0x8
c001e9d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9d5:	50                   	push   eax
c001e9d6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9dd:	50                   	push   eax
c001e9de:	e8 47 75 fe ff       	call   c0005f2a <f_stat>
c001e9e3:	83 c4 10             	add    esp,0x10
c001e9e6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001e9ed:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001e9f4:	85 c0                	test   eax,eax
c001e9f6:	74 07                	je     c001e9ff <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001e9f8:	83 f8 04             	cmp    eax,0x4
c001e9fb:	74 32                	je     c001ea2f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001e9fd:	eb 37                	jmp    c001ea36 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001e9ff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea03:	0f b6 c0             	movzx  eax,al
c001ea06:	83 e0 10             	and    eax,0x10
c001ea09:	0f 95 c2             	setne  dl
c001ea0c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea13:	88 10                	mov    BYTE PTR [eax],dl
c001ea15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea1c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea23:	89 01                	mov    DWORD PTR [ecx],eax
c001ea25:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea28:	b8 00 00 00 00       	mov    eax,0x0
c001ea2d:	eb 0c                	jmp    c001ea3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea2f:	b8 02 00 00 00       	mov    eax,0x2
c001ea34:	eb 05                	jmp    c001ea3b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea36:	b8 01 00 00 00       	mov    eax,0x1
c001ea3b:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea41:	c3                   	ret    

c001ea42 <FAT::unlink(char const*)>:
c001ea42:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea48:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea50:	75 07                	jne    c001ea59 <FAT::unlink(char const*)+0x17>
c001ea52:	b8 04 00 00 00       	mov    eax,0x4
c001ea57:	eb 5c                	jmp    c001eab5 <FAT::unlink(char const*)+0x73>
c001ea59:	83 ec 08             	sub    esp,0x8
c001ea5c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea63:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea67:	50                   	push   eax
c001ea68:	e8 af 1c fe ff       	call   c000071c <strcpy>
c001ea6d:	83 c4 10             	add    esp,0x10
c001ea70:	83 ec 08             	sub    esp,0x8
c001ea73:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea77:	50                   	push   eax
c001ea78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea7f:	e8 ce fc ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001ea84:	83 c4 10             	add    esp,0x10
c001ea87:	83 ec 0c             	sub    esp,0xc
c001ea8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea8e:	50                   	push   eax
c001ea8f:	e8 e8 77 fe ff       	call   c000627c <f_unlink>
c001ea94:	83 c4 10             	add    esp,0x10
c001ea97:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ea9e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eaa5:	85 c0                	test   eax,eax
c001eaa7:	75 07                	jne    c001eab0 <FAT::unlink(char const*)+0x6e>
c001eaa9:	b8 00 00 00 00       	mov    eax,0x0
c001eaae:	eb 05                	jmp    c001eab5 <FAT::unlink(char const*)+0x73>
c001eab0:	b8 01 00 00 00       	mov    eax,0x1
c001eab5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eabb:	c3                   	ret    

c001eabc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eabc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eac2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eac9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ead0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ead4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ead8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eae0:	75 0a                	jne    c001eaec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eae2:	b8 04 00 00 00       	mov    eax,0x4
c001eae7:	e9 1c 01 00 00       	jmp    c001ec08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eaec:	83 ec 08             	sub    esp,0x8
c001eaef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eaf6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eafa:	50                   	push   eax
c001eafb:	e8 1c 1c fe ff       	call   c000071c <strcpy>
c001eb00:	83 c4 10             	add    esp,0x10
c001eb03:	83 ec 08             	sub    esp,0x8
c001eb06:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb0a:	50                   	push   eax
c001eb0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb12:	e8 3b fc ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb22:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb2f:	83 e0 01             	and    eax,0x1
c001eb32:	74 08                	je     c001eb3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb34:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb41:	83 e0 02             	and    eax,0x2
c001eb44:	74 08                	je     c001eb4e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb46:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb53:	83 e0 04             	and    eax,0x4
c001eb56:	74 08                	je     c001eb60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb58:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb65:	83 e0 08             	and    eax,0x8
c001eb68:	74 08                	je     c001eb72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb6a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb72:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb77:	83 e0 01             	and    eax,0x1
c001eb7a:	74 08                	je     c001eb84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eb7c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eb84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb89:	83 e0 02             	and    eax,0x2
c001eb8c:	74 08                	je     c001eb96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001eb8e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001eb96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb9b:	83 e0 04             	and    eax,0x4
c001eb9e:	74 08                	je     c001eba8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001eba0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001eba8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebad:	83 e0 08             	and    eax,0x8
c001ebb0:	74 08                	je     c001ebba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebb2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebba:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebc1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebc8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebd0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebd8:	83 ec 04             	sub    esp,0x4
c001ebdb:	52                   	push   edx
c001ebdc:	50                   	push   eax
c001ebdd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ebe1:	50                   	push   eax
c001ebe2:	e8 37 7d fe ff       	call   c000691e <f_chmod>
c001ebe7:	83 c4 10             	add    esp,0x10
c001ebea:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ebf1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ebf8:	85 c0                	test   eax,eax
c001ebfa:	75 07                	jne    c001ec03 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ebfc:	b8 00 00 00 00       	mov    eax,0x0
c001ec01:	eb 05                	jmp    c001ec08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec03:	b8 01 00 00 00       	mov    eax,0x1
c001ec08:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec0e:	c3                   	ret    
c001ec0f:	90                   	nop

c001ec10 <FAT::rename(char const*, char const*)>:
c001ec10:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec16:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec1e:	74 0a                	je     c001ec2a <FAT::rename(char const*, char const*)+0x1a>
c001ec20:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec28:	75 0a                	jne    c001ec34 <FAT::rename(char const*, char const*)+0x24>
c001ec2a:	b8 04 00 00 00       	mov    eax,0x4
c001ec2f:	e9 98 00 00 00       	jmp    c001eccc <FAT::rename(char const*, char const*)+0xbc>
c001ec34:	83 ec 08             	sub    esp,0x8
c001ec37:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec3e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec45:	50                   	push   eax
c001ec46:	e8 d1 1a fe ff       	call   c000071c <strcpy>
c001ec4b:	83 c4 10             	add    esp,0x10
c001ec4e:	83 ec 08             	sub    esp,0x8
c001ec51:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec58:	50                   	push   eax
c001ec59:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec60:	e8 ed fa ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	83 ec 08             	sub    esp,0x8
c001ec6b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec72:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec76:	50                   	push   eax
c001ec77:	e8 a0 1a fe ff       	call   c000071c <strcpy>
c001ec7c:	83 c4 10             	add    esp,0x10
c001ec7f:	83 ec 08             	sub    esp,0x8
c001ec82:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec86:	50                   	push   eax
c001ec87:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec8e:	e8 bf fa ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001ec93:	83 c4 10             	add    esp,0x10
c001ec96:	83 ec 08             	sub    esp,0x8
c001ec99:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec9d:	50                   	push   eax
c001ec9e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001eca5:	50                   	push   eax
c001eca6:	e8 80 79 fe ff       	call   c000662b <f_rename>
c001ecab:	83 c4 10             	add    esp,0x10
c001ecae:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ecb5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecbc:	85 c0                	test   eax,eax
c001ecbe:	75 07                	jne    c001ecc7 <FAT::rename(char const*, char const*)+0xb7>
c001ecc0:	b8 00 00 00 00       	mov    eax,0x0
c001ecc5:	eb 05                	jmp    c001eccc <FAT::rename(char const*, char const*)+0xbc>
c001ecc7:	b8 01 00 00 00       	mov    eax,0x1
c001eccc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecd2:	c3                   	ret    
c001ecd3:	90                   	nop

c001ecd4 <FAT::mkdir(char const*)>:
c001ecd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ecda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ece2:	75 07                	jne    c001eceb <FAT::mkdir(char const*)+0x17>
c001ece4:	b8 04 00 00 00       	mov    eax,0x4
c001ece9:	eb 5c                	jmp    c001ed47 <FAT::mkdir(char const*)+0x73>
c001eceb:	83 ec 08             	sub    esp,0x8
c001ecee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ecf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ecf9:	50                   	push   eax
c001ecfa:	e8 1d 1a fe ff       	call   c000071c <strcpy>
c001ecff:	83 c4 10             	add    esp,0x10
c001ed02:	83 ec 08             	sub    esp,0x8
c001ed05:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed09:	50                   	push   eax
c001ed0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed11:	e8 3c fa ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001ed16:	83 c4 10             	add    esp,0x10
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed20:	50                   	push   eax
c001ed21:	e8 d9 76 fe ff       	call   c00063ff <f_mkdir>
c001ed26:	83 c4 10             	add    esp,0x10
c001ed29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed37:	85 c0                	test   eax,eax
c001ed39:	75 07                	jne    c001ed42 <FAT::mkdir(char const*)+0x6e>
c001ed3b:	b8 00 00 00 00       	mov    eax,0x0
c001ed40:	eb 05                	jmp    c001ed47 <FAT::mkdir(char const*)+0x73>
c001ed42:	b8 01 00 00 00       	mov    eax,0x1
c001ed47:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed4d:	c3                   	ret    

c001ed4e <FAT::exists(char const*)>:
c001ed4e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed54:	83 ec 08             	sub    esp,0x8
c001ed57:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed62:	50                   	push   eax
c001ed63:	e8 b4 19 fe ff       	call   c000071c <strcpy>
c001ed68:	83 c4 10             	add    esp,0x10
c001ed6b:	83 ec 08             	sub    esp,0x8
c001ed6e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed72:	50                   	push   eax
c001ed73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed7a:	e8 d3 f9 ff ff       	call   c001e752 <FAT::fixFilepath(char*)>
c001ed7f:	83 c4 10             	add    esp,0x10
c001ed82:	83 ec 08             	sub    esp,0x8
c001ed85:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ed8c:	50                   	push   eax
c001ed8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed91:	50                   	push   eax
c001ed92:	e8 93 71 fe ff       	call   c0005f2a <f_stat>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eda1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eda8:	85 c0                	test   eax,eax
c001edaa:	75 04                	jne    c001edb0 <FAT::exists(char const*)+0x62>
c001edac:	b0 01                	mov    al,0x1
c001edae:	eb 02                	jmp    c001edb2 <FAT::exists(char const*)+0x64>
c001edb0:	b0 00                	mov    al,0x0
c001edb2:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edb8:	c3                   	ret    
c001edb9:	90                   	nop

c001edba <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edba:	b8 08 00 00 00       	mov    eax,0x8
c001edbf:	c3                   	ret    

c001edc0 <ISO9660::seek(void*, unsigned long long)>:
c001edc0:	53                   	push   ebx
c001edc1:	b8 04 00 00 00       	mov    eax,0x4
c001edc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001edca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001edd2:	85 d2                	test   edx,edx
c001edd4:	74 17                	je     c001eded <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edd6:	89 c8                	mov    eax,ecx
c001edd8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001eddb:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001edde:	b8 01 00 00 00       	mov    eax,0x1
c001ede3:	73 08                	jae    c001eded <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ede5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ede8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001edeb:	31 c0                	xor    eax,eax
c001eded:	5b                   	pop    ebx
c001edee:	c3                   	ret    
c001edef:	90                   	nop

c001edf0 <ISO9660::tell(void*, unsigned long long*)>:
c001edf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf8:	85 d2                	test   edx,edx
c001edfa:	74 12                	je     c001ee0e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001edfc:	85 c0                	test   eax,eax
c001edfe:	74 0e                	je     c001ee0e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee00:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee03:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee06:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee09:	89 10                	mov    DWORD PTR [eax],edx
c001ee0b:	31 c0                	xor    eax,eax
c001ee0d:	c3                   	ret    
c001ee0e:	b8 04 00 00 00       	mov    eax,0x4
c001ee13:	c3                   	ret    

c001ee14 <ISO9660::getName()>:
c001ee14:	b8 d0 8b 02 c0       	mov    eax,0xc0028bd0
c001ee19:	c3                   	ret    

c001ee1a <ISO9660::stat(void*, unsigned long long*)>:
c001ee1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee22:	85 d2                	test   edx,edx
c001ee24:	74 12                	je     c001ee38 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee26:	85 c0                	test   eax,eax
c001ee28:	74 0e                	je     c001ee38 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee2a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee2d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee30:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee33:	89 10                	mov    DWORD PTR [eax],edx
c001ee35:	31 c0                	xor    eax,eax
c001ee37:	c3                   	ret    
c001ee38:	b8 04 00 00 00       	mov    eax,0x4
c001ee3d:	c3                   	ret    

c001ee3e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee3e:	b8 01 00 00 00       	mov    eax,0x1
c001ee43:	c3                   	ret    

c001ee44 <ISO9660::unlink(char const*)>:
c001ee44:	b8 01 00 00 00       	mov    eax,0x1
c001ee49:	c3                   	ret    

c001ee4a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee4a:	b8 01 00 00 00       	mov    eax,0x1
c001ee4f:	c3                   	ret    

c001ee50 <ISO9660::rename(char const*, char const*)>:
c001ee50:	b8 01 00 00 00       	mov    eax,0x1
c001ee55:	c3                   	ret    

c001ee56 <ISO9660::mkdir(char const*)>:
c001ee56:	b8 01 00 00 00       	mov    eax,0x1
c001ee5b:	c3                   	ret    

c001ee5c <ISO9660::close(void*)>:
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	b8 04 00 00 00       	mov    eax,0x4
c001ee64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee68:	85 d2                	test   edx,edx
c001ee6a:	74 0e                	je     c001ee7a <ISO9660::close(void*)+0x1e>
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	52                   	push   edx
c001ee70:	e8 c7 02 ff ff       	call   c000f13c <free>
c001ee75:	83 c4 10             	add    esp,0x10
c001ee78:	31 c0                	xor    eax,eax
c001ee7a:	83 c4 0c             	add    esp,0xc
c001ee7d:	c3                   	ret    

c001ee7e <ISO9660::closeDir(void*)>:
c001ee7e:	83 ec 0c             	sub    esp,0xc
c001ee81:	b8 04 00 00 00       	mov    eax,0x4
c001ee86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee8a:	85 d2                	test   edx,edx
c001ee8c:	74 0e                	je     c001ee9c <ISO9660::closeDir(void*)+0x1e>
c001ee8e:	83 ec 0c             	sub    esp,0xc
c001ee91:	52                   	push   edx
c001ee92:	e8 a5 02 ff ff       	call   c000f13c <free>
c001ee97:	83 c4 10             	add    esp,0x10
c001ee9a:	31 c0                	xor    eax,eax
c001ee9c:	83 c4 0c             	add    esp,0xc
c001ee9f:	c3                   	ret    

c001eea0 <ISO9660::~ISO9660()>:
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	ba 24 8c 02 c0       	mov    edx,0xc0028c24
c001eea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeac:	89 10                	mov    DWORD PTR [eax],edx
c001eeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb2:	83 ec 0c             	sub    esp,0xc
c001eeb5:	50                   	push   eax
c001eeb6:	e8 c1 36 ff ff       	call   c001257c <Filesystem::~Filesystem()>
c001eebb:	83 c4 10             	add    esp,0x10
c001eebe:	90                   	nop
c001eebf:	83 c4 0c             	add    esp,0xc
c001eec2:	c3                   	ret    
c001eec3:	90                   	nop

c001eec4 <ISO9660::~ISO9660()>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	83 ec 0c             	sub    esp,0xc
c001eeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eece:	e8 cd ff ff ff       	call   c001eea0 <ISO9660::~ISO9660()>
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	83 ec 08             	sub    esp,0x8
c001eed9:	6a 08                	push   0x8
c001eedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eedf:	e8 8f 32 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001eee4:	83 c4 10             	add    esp,0x10
c001eee7:	83 c4 0c             	add    esp,0xc
c001eeea:	c3                   	ret    

c001eeeb <__memmem(unsigned char*, int, unsigned char*, int)>:
c001eeeb:	55                   	push   ebp
c001eeec:	31 c9                	xor    ecx,ecx
c001eeee:	57                   	push   edi
c001eeef:	56                   	push   esi
c001eef0:	53                   	push   ebx
c001eef1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001eef5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eef9:	89 eb                	mov    ebx,ebp
c001eefb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001eeff:	39 ce                	cmp    esi,ecx
c001ef01:	7e 17                	jle    c001ef1a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef03:	31 d2                	xor    edx,edx
c001ef05:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef09:	7d 13                	jge    c001ef1e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef0f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef12:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef15:	75 0d                	jne    c001ef24 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef17:	42                   	inc    edx
c001ef18:	eb eb                	jmp    c001ef05 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef1a:	31 c0                	xor    eax,eax
c001ef1c:	eb 0a                	jmp    c001ef28 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef1e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef22:	eb 04                	jmp    c001ef28 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef24:	41                   	inc    ecx
c001ef25:	43                   	inc    ebx
c001ef26:	eb d7                	jmp    c001eeff <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef28:	5b                   	pop    ebx
c001ef29:	5e                   	pop    esi
c001ef2a:	5f                   	pop    edi
c001ef2b:	5d                   	pop    ebp
c001ef2c:	c3                   	ret    

c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef2d:	56                   	push   esi
c001ef2e:	53                   	push   ebx
c001ef2f:	52                   	push   edx
c001ef30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef34:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef3c:	39 0d 00 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb00,ecx
c001ef42:	75 08                	jne    c001ef4c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef44:	38 05 08 9a 02 c0    	cmp    BYTE PTR ds:0xc0029a08,al
c001ef4a:	74 2b                	je     c001ef77 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	a2 08 9a 02 c0       	mov    ds:0xc0029a08,al
c001ef54:	68 20 bb 02 c0       	push   0xc002bb20
c001ef59:	0f be c0             	movsx  eax,al
c001ef5c:	6a 01                	push   0x1
c001ef5e:	89 0d 00 bb 02 c0    	mov    DWORD PTR ds:0xc002bb00,ecx
c001ef64:	31 db                	xor    ebx,ebx
c001ef66:	53                   	push   ebx
c001ef67:	51                   	push   ecx
c001ef68:	ff 34 85 5c a9 02 c0 	push   DWORD PTR [eax*4-0x3ffd56a4]
c001ef6f:	e8 c4 68 ff ff       	call   c0015838 <LogicalDisk::read(unsigned long long, int, void*)>
c001ef74:	83 c4 20             	add    esp,0x20
c001ef77:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ef7f:	c7 44 24 14 20 bb 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bb20
c001ef87:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001ef8b:	58                   	pop    eax
c001ef8c:	5b                   	pop    ebx
c001ef8d:	5e                   	pop    esi
c001ef8e:	e9 b4 16 fe ff       	jmp    c0000647 <memcpy>
c001ef93:	90                   	nop

c001ef94 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ef94:	81 ec 10 08 00 00    	sub    esp,0x810
c001ef9a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efa1:	83 c0 41             	add    eax,0x41
c001efa4:	0f be c0             	movsx  eax,al
c001efa7:	50                   	push   eax
c001efa8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efac:	50                   	push   eax
c001efad:	6a 10                	push   0x10
c001efaf:	e8 79 ff ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efb4:	83 c4 10             	add    esp,0x10
c001efb7:	31 c0                	xor    eax,eax
c001efb9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efbe:	75 1d                	jne    c001efdd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efc0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efc5:	75 16                	jne    c001efdd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efc7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001efcc:	75 0f                	jne    c001efdd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efce:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001efd3:	75 08                	jne    c001efdd <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efd5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001efda:	0f 94 c0             	sete   al
c001efdd:	81 c4 0c 08 00 00    	add    esp,0x80c
c001efe3:	c3                   	ret    

c001efe4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001efe4:	55                   	push   ebp
c001efe5:	57                   	push   edi
c001efe6:	56                   	push   esi
c001efe7:	53                   	push   ebx
c001efe8:	81 ec 34 08 00 00    	sub    esp,0x834
c001efee:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001eff5:	55                   	push   ebp
c001eff6:	68 eb 8b 02 c0       	push   0xc0028beb
c001effb:	e8 53 32 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f00b:	0f 84 06 02 00 00    	je     c001f217 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f011:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f019:	0f 84 f8 01 00 00    	je     c001f217 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f01f:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f026:	b8 01 00 00 00       	mov    eax,0x1
c001f02b:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f02f:	0f 85 e7 01 00 00    	jne    c001f21c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f035:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f038:	31 d2                	xor    edx,edx
c001f03a:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f03d:	89 e9                	mov    ecx,ebp
c001f03f:	89 d3                	mov    ebx,edx
c001f041:	01 f1                	add    ecx,esi
c001f043:	11 fb                	adc    ebx,edi
c001f045:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f049:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f04d:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f054:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f057:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f05a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f05e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f062:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f066:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f06a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f06e:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f072:	72 19                	jb     c001f08d <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f074:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f080:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f083:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f08b:	eb 13                	jmp    c001f0a0 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f08d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f091:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f095:	29 f0                	sub    eax,esi
c001f097:	19 fa                	sbb    edx,edi
c001f099:	89 04 24             	mov    DWORD PTR [esp],eax
c001f09c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0a0:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0a7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0aa:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0ac:	53                   	push   ebx
c001f0ad:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0b1:	c1 e0 0b             	shl    eax,0xb
c001f0b4:	01 c6                	add    esi,eax
c001f0b6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0bd:	11 d7                	adc    edi,edx
c001f0bf:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0c3:	89 fa                	mov    edx,edi
c001f0c5:	50                   	push   eax
c001f0c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0ca:	50                   	push   eax
c001f0cb:	89 f0                	mov    eax,esi
c001f0cd:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0d1:	50                   	push   eax
c001f0d2:	e8 56 fe ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0d7:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f0de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f0e5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f0e9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f0ef:	83 c4 10             	add    esp,0x10
c001f0f2:	b8 00 08 00 00       	mov    eax,0x800
c001f0f7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f0fb:	29 d0                	sub    eax,edx
c001f0fd:	39 c1                	cmp    ecx,eax
c001f0ff:	83 db 00             	sbb    ebx,0x0
c001f102:	7d 19                	jge    c001f11d <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f104:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f109:	75 16                	jne    c001f121 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f10b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f118:	e9 f6 00 00 00       	jmp    c001f213 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f11d:	89 c5                	mov    ebp,eax
c001f11f:	eb 03                	jmp    c001f124 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f121:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f124:	51                   	push   ecx
c001f125:	55                   	push   ebp
c001f126:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f12a:	50                   	push   eax
c001f12b:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f132:	e8 10 15 fe ff       	call   c0000647 <memcpy>
c001f137:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f13b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f13f:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f146:	01 e8                	add    eax,ebp
c001f148:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f14c:	89 e8                	mov    eax,ebp
c001f14e:	99                   	cdq    
c001f14f:	01 ee                	add    esi,ebp
c001f151:	11 d7                	adc    edi,edx
c001f153:	29 e9                	sub    ecx,ebp
c001f155:	19 d3                	sbb    ebx,edx
c001f157:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f15b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f167:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f16a:	b8 00 00 00 00       	mov    eax,0x0
c001f16f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f173:	7d 3f                	jge    c001f1b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f175:	52                   	push   edx
c001f176:	89 fa                	mov    edx,edi
c001f178:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f17f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f183:	50                   	push   eax
c001f184:	89 f0                	mov    eax,esi
c001f186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f18a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f18e:	50                   	push   eax
c001f18f:	e8 99 fd ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f194:	81 c6 00 08 00 00    	add    esi,0x800
c001f19a:	83 d7 00             	adc    edi,0x0
c001f19d:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1a5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1ad:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1b2:	eb ab                	jmp    c001f15f <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b8:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1bb:	74 34                	je     c001f1f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1bd:	89 fa                	mov    edx,edi
c001f1bf:	50                   	push   eax
c001f1c0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1c7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1cb:	50                   	push   eax
c001f1cc:	89 f0                	mov    eax,esi
c001f1ce:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1d2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1d6:	55                   	push   ebp
c001f1d7:	50                   	push   eax
c001f1d8:	e8 50 fd ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1dd:	83 c4 0c             	add    esp,0xc
c001f1e0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f1e4:	55                   	push   ebp
c001f1e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e9:	e8 59 14 fe ff       	call   c0000647 <memcpy>
c001f1ee:	83 c4 10             	add    esp,0x10
c001f1f1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f1f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f200:	89 38                	mov    DWORD PTR [eax],edi
c001f202:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f20d:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f210:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f213:	31 c0                	xor    eax,eax
c001f215:	eb 05                	jmp    c001f21c <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f217:	b8 04 00 00 00       	mov    eax,0x4
c001f21c:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f222:	5b                   	pop    ebx
c001f223:	5e                   	pop    esi
c001f224:	5f                   	pop    edi
c001f225:	5d                   	pop    ebp
c001f226:	c3                   	ret    
c001f227:	90                   	nop

c001f228 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f228:	55                   	push   ebp
c001f229:	57                   	push   edi
c001f22a:	56                   	push   esi
c001f22b:	53                   	push   ebx
c001f22c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f232:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f239:	85 f6                	test   esi,esi
c001f23b:	0f 84 64 02 00 00    	je     c001f4a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f241:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f249:	0f 84 56 02 00 00    	je     c001f4a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f24f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f252:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f255:	75 0a                	jne    c001f261 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f257:	b8 07 00 00 00       	mov    eax,0x7
c001f25c:	e9 49 02 00 00       	jmp    c001f4aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f261:	50                   	push   eax
c001f262:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f266:	50                   	push   eax
c001f267:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f26e:	53                   	push   ebx
c001f26f:	8b 06                	mov    eax,DWORD PTR [esi]
c001f271:	c1 e0 0b             	shl    eax,0xb
c001f274:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f277:	c1 e8 0b             	shr    eax,0xb
c001f27a:	50                   	push   eax
c001f27b:	e8 ad fc ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f280:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	89 c1                	mov    ecx,eax
c001f288:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f28b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f291:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f294:	84 db                	test   bl,bl
c001f296:	0f 85 90 00 00 00    	jne    c001f32c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f29c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2a2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2a8:	29 c7                	sub    edi,eax
c001f2aa:	89 fb                	mov    ebx,edi
c001f2ac:	c1 fb 1f             	sar    ebx,0x1f
c001f2af:	01 f8                	add    eax,edi
c001f2b1:	11 da                	adc    edx,ebx
c001f2b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2bb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2be:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2c1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2c4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2ce:	89 d8                	mov    eax,ebx
c001f2d0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2d3:	ba 00 00 00 00       	mov    edx,0x0
c001f2d8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2dc:	b8 00 00 00 00       	mov    eax,0x0
c001f2e1:	73 0b                	jae    c001f2ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f2e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2ea:	29 f8                	sub    eax,edi
c001f2ec:	19 da                	sbb    edx,ebx
c001f2ee:	89 d3                	mov    ebx,edx
c001f2f0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f2f3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f2f6:	09 c3                	or     ebx,eax
c001f2f8:	0f 84 59 ff ff ff    	je     c001f257 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f2fe:	55                   	push   ebp
c001f2ff:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f303:	50                   	push   eax
c001f304:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f30b:	53                   	push   ebx
c001f30c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f30e:	c1 e0 0b             	shl    eax,0xb
c001f311:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f315:	c1 e8 0b             	shr    eax,0xb
c001f318:	50                   	push   eax
c001f319:	e8 0f fc ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f31e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f321:	83 c4 10             	add    esp,0x10
c001f324:	25 ff 07 00 00       	and    eax,0x7ff
c001f329:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f32c:	57                   	push   edi
c001f32d:	6a 28                	push   0x28
c001f32f:	6a 00                	push   0x0
c001f331:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f335:	50                   	push   eax
c001f336:	e8 42 13 fe ff       	call   c000067d <memset>
c001f33b:	31 d2                	xor    edx,edx
c001f33d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f340:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f346:	89 f8                	mov    eax,edi
c001f348:	83 c0 21             	add    eax,0x21
c001f34b:	83 d2 00             	adc    edx,0x0
c001f34e:	89 c7                	mov    edi,eax
c001f350:	89 d5                	mov    ebp,edx
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	31 c9                	xor    ecx,ecx
c001f357:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f35e:	83 f9 28             	cmp    ecx,0x28
c001f361:	88 04 24             	mov    BYTE PTR [esp],al
c001f364:	0f 94 c2             	sete   dl
c001f367:	88 d0                	mov    al,dl
c001f369:	ba ff 07 00 00       	mov    edx,0x7ff
c001f36e:	39 fa                	cmp    edx,edi
c001f370:	ba 00 00 00 00       	mov    edx,0x0
c001f375:	19 ea                	sbb    edx,ebp
c001f377:	0f 92 c2             	setb   dl
c001f37a:	09 c2                	or     edx,eax
c001f37c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f380:	0f 94 c0             	sete   al
c001f383:	08 d0                	or     al,dl
c001f385:	75 16                	jne    c001f39d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f387:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f38b:	74 10                	je     c001f39d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f38d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f390:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f394:	41                   	inc    ecx
c001f395:	83 c7 01             	add    edi,0x1
c001f398:	83 d5 00             	adc    ebp,0x0
c001f39b:	eb ba                	jmp    c001f357 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f39d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3a4:	83 ec 0c             	sub    esp,0xc
c001f3a7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3ab:	57                   	push   edi
c001f3ac:	e8 e9 12 fe ff       	call   c000069a <strlen>
c001f3b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3b9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3bd:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3c7:	5a                   	pop    edx
c001f3c8:	25 ff 07 00 00       	and    eax,0x7ff
c001f3cd:	01 c8                	add    eax,ecx
c001f3cf:	59                   	pop    ecx
c001f3d0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3d6:	83 e0 02             	and    eax,0x2
c001f3d9:	3c 01                	cmp    al,0x1
c001f3db:	19 c0                	sbb    eax,eax
c001f3dd:	83 c0 02             	add    eax,0x2
c001f3e0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3e4:	57                   	push   edi
c001f3e5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f3e9:	50                   	push   eax
c001f3ea:	e8 2d 13 fe ff       	call   c000071c <strcpy>
c001f3ef:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f3f3:	83 c4 10             	add    esp,0x10
c001f3f6:	84 c0                	test   al,al
c001f3f8:	75 21                	jne    c001f41b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f3fa:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f402:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f40a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f412:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f419:	eb 28                	jmp    c001f443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f41b:	fe c8                	dec    al
c001f41d:	75 24                	jne    c001f443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f41f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f427:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f42f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f437:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f43e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f443:	0f b6 fb             	movzx  edi,bl
c001f446:	31 db                	xor    ebx,ebx
c001f448:	50                   	push   eax
c001f449:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f450:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f454:	50                   	push   eax
c001f455:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f45c:	e8 e6 11 fe ff       	call   c0000647 <memcpy>
c001f461:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f468:	89 f9                	mov    ecx,edi
c001f46a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f470:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f473:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f476:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f479:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f47c:	83 c4 10             	add    esp,0x10
c001f47f:	39 c7                	cmp    edi,eax
c001f481:	89 df                	mov    edi,ebx
c001f483:	19 d7                	sbb    edi,edx
c001f485:	72 10                	jb     c001f497 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f487:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f48e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f495:	eb 0a                	jmp    c001f4a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f497:	29 c8                	sub    eax,ecx
c001f499:	19 da                	sbb    edx,ebx
c001f49b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f49e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4a1:	31 c0                	xor    eax,eax
c001f4a3:	eb 05                	jmp    c001f4aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4a5:	b8 04 00 00 00       	mov    eax,0x4
c001f4aa:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4b0:	5b                   	pop    ebx
c001f4b1:	5e                   	pop    esi
c001f4b2:	5f                   	pop    edi
c001f4b3:	5d                   	pop    ebp
c001f4b4:	c3                   	ret    

c001f4b5 <readRoot(unsigned int*, unsigned int*, char)>:
c001f4b5:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4bb:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4c3:	50                   	push   eax
c001f4c4:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4c8:	50                   	push   eax
c001f4c9:	6a 10                	push   0x10
c001f4cb:	e8 5d fa ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4d0:	83 c4 0c             	add    esp,0xc
c001f4d3:	6a 22                	push   0x22
c001f4d5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f4dc:	50                   	push   eax
c001f4dd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f4e1:	50                   	push   eax
c001f4e2:	e8 60 11 fe ff       	call   c0000647 <memcpy>
c001f4e7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f4ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f4f2:	89 10                	mov    DWORD PTR [eax],edx
c001f4f4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f4fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f4ff:	89 10                	mov    DWORD PTR [eax],edx
c001f501:	b0 01                	mov    al,0x1
c001f503:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f509:	c3                   	ret    

c001f50a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f50a:	55                   	push   ebp
c001f50b:	57                   	push   edi
c001f50c:	56                   	push   esi
c001f50d:	53                   	push   ebx
c001f50e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f514:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f51b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f522:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f526:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f52a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f52e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f532:	75 03                	jne    c001f537 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f534:	83 c3 02             	add    ebx,0x2
c001f537:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f53a:	75 03                	jne    c001f53f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f53c:	43                   	inc    ebx
c001f53d:	eb f8                	jmp    c001f537 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f53f:	51                   	push   ecx
c001f540:	68 00 01 00 00       	push   0x100
c001f545:	6a 00                	push   0x0
c001f547:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f54b:	50                   	push   eax
c001f54c:	e8 2c 11 fe ff       	call   c000067d <memset>
c001f551:	83 c4 10             	add    esp,0x10
c001f554:	31 d2                	xor    edx,edx
c001f556:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f559:	84 c0                	test   al,al
c001f55b:	74 21                	je     c001f57e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f55d:	3c 2f                	cmp    al,0x2f
c001f55f:	75 0b                	jne    c001f56c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f561:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f565:	bd 01 00 00 00       	mov    ebp,0x1
c001f56a:	eb 14                	jmp    c001f580 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f56c:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f56f:	80 f9 19             	cmp    cl,0x19
c001f572:	77 03                	ja     c001f577 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f574:	83 e8 20             	sub    eax,0x20
c001f577:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f57b:	42                   	inc    edx
c001f57c:	eb d8                	jmp    c001f556 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f57e:	31 ed                	xor    ebp,ebp
c001f580:	83 ec 0c             	sub    esp,0xc
c001f583:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f58a:	e8 9d fb fe ff       	call   c000f12c <malloc>
c001f58f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f596:	89 c6                	mov    esi,eax
c001f598:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f59e:	c1 ef 0b             	shr    edi,0xb
c001f5a1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5a8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5ac:	83 c4 10             	add    esp,0x10
c001f5af:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5bf:	74 28                	je     c001f5e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5c1:	52                   	push   edx
c001f5c2:	57                   	push   edi
c001f5c3:	50                   	push   eax
c001f5c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5c8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5cf:	e8 59 f9 ff ff       	call   c001ef2d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5d8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f5df:	05 00 08 00 00       	add    eax,0x800
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	eb cb                	jmp    c001f5b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f5e9:	83 ec 0c             	sub    esp,0xc
c001f5ec:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f5f0:	57                   	push   edi
c001f5f1:	e8 a4 10 fe ff       	call   c000069a <strlen>
c001f5f6:	50                   	push   eax
c001f5f7:	57                   	push   edi
c001f5f8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f5ff:	56                   	push   esi
c001f600:	e8 e6 f8 ff ff       	call   c001eeeb <__memmem(unsigned char*, int, unsigned char*, int)>
c001f605:	83 c4 20             	add    esp,0x20
c001f608:	85 c0                	test   eax,eax
c001f60a:	75 13                	jne    c001f61f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f60c:	83 ec 0c             	sub    esp,0xc
c001f60f:	56                   	push   esi
c001f610:	e8 27 fb fe ff       	call   c000f13c <free>
c001f615:	83 c4 10             	add    esp,0x10
c001f618:	31 c0                	xor    eax,eax
c001f61a:	e9 b3 00 00 00       	jmp    c001f6d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f61f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f623:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f627:	c1 e7 08             	shl    edi,0x8
c001f62a:	c1 e2 10             	shl    edx,0x10
c001f62d:	09 d7                	or     edi,edx
c001f62f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f633:	09 d7                	or     edi,edx
c001f635:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f639:	c1 e2 18             	shl    edx,0x18
c001f63c:	09 d7                	or     edi,edx
c001f63e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f642:	89 d1                	mov    ecx,edx
c001f644:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f648:	c1 e1 08             	shl    ecx,0x8
c001f64b:	c1 e2 10             	shl    edx,0x10
c001f64e:	09 ca                	or     edx,ecx
c001f650:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f654:	09 ca                	or     edx,ecx
c001f656:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f65a:	c1 e1 18             	shl    ecx,0x18
c001f65d:	09 ca                	or     edx,ecx
c001f65f:	89 e9                	mov    ecx,ebp
c001f661:	84 c9                	test   cl,cl
c001f663:	74 3c                	je     c001f6a1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f665:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f669:	83 ec 0c             	sub    esp,0xc
c001f66c:	56                   	push   esi
c001f66d:	e8 ca fa fe ff       	call   c000f13c <free>
c001f672:	83 c4 0c             	add    esp,0xc
c001f675:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f67c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f681:	50                   	push   eax
c001f682:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f689:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f694:	52                   	push   edx
c001f695:	57                   	push   edi
c001f696:	53                   	push   ebx
c001f697:	e8 6e fe ff ff       	call   c001f50a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f69c:	83 c4 20             	add    esp,0x20
c001f69f:	eb 31                	jmp    c001f6d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6a1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6a4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6ab:	d0 e8                	shr    al,1
c001f6ad:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6af:	83 e0 01             	and    eax,0x1
c001f6b2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6b9:	83 ec 0c             	sub    esp,0xc
c001f6bc:	89 13                	mov    DWORD PTR [ebx],edx
c001f6be:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6c5:	89 03                	mov    DWORD PTR [ebx],eax
c001f6c7:	56                   	push   esi
c001f6c8:	e8 6f fa fe ff       	call   c000f13c <free>
c001f6cd:	83 c4 10             	add    esp,0x10
c001f6d0:	b0 01                	mov    al,0x1
c001f6d2:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6d8:	5b                   	pop    ebx
c001f6d9:	5e                   	pop    esi
c001f6da:	5f                   	pop    edi
c001f6db:	5d                   	pop    ebp
c001f6dc:	c3                   	ret    

c001f6dd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f6dd:	55                   	push   ebp
c001f6de:	57                   	push   edi
c001f6df:	56                   	push   esi
c001f6e0:	53                   	push   ebx
c001f6e1:	83 ec 20             	sub    esp,0x20
c001f6e4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f6e8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f6ec:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f6f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f6f8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f700:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f705:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f70b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f711:	57                   	push   edi
c001f712:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f716:	50                   	push   eax
c001f717:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f71b:	50                   	push   eax
c001f71c:	e8 94 fd ff ff       	call   c001f4b5 <readRoot(unsigned int*, unsigned int*, char)>
c001f721:	5a                   	pop    edx
c001f722:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f726:	e8 6f 0f fe ff       	call   c000069a <strlen>
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	83 f8 03             	cmp    eax,0x3
c001f731:	77 17                	ja     c001f74a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f733:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f737:	89 03                	mov    DWORD PTR [ebx],eax
c001f739:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f73d:	89 06                	mov    DWORD PTR [esi],eax
c001f73f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f746:	b0 01                	mov    al,0x1
c001f748:	eb 19                	jmp    c001f763 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f74a:	50                   	push   eax
c001f74b:	55                   	push   ebp
c001f74c:	57                   	push   edi
c001f74d:	56                   	push   esi
c001f74e:	53                   	push   ebx
c001f74f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f753:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f757:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f75b:	e8 aa fd ff ff       	call   c001f50a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f760:	83 c4 20             	add    esp,0x20
c001f763:	83 c4 1c             	add    esp,0x1c
c001f766:	5b                   	pop    ebx
c001f767:	5e                   	pop    esi
c001f768:	5f                   	pop    edi
c001f769:	5d                   	pop    ebp
c001f76a:	c3                   	ret    
c001f76b:	90                   	nop

c001f76c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f76c:	57                   	push   edi
c001f76d:	56                   	push   esi
c001f76e:	53                   	push   ebx
c001f76f:	83 ec 10             	sub    esp,0x10
c001f772:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f776:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f77a:	85 ff                	test   edi,edi
c001f77c:	74 7b                	je     c001f7f9 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f77e:	85 f6                	test   esi,esi
c001f780:	74 77                	je     c001f7f9 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	6a 1c                	push   0x1c
c001f787:	e8 a0 f9 fe ff       	call   c000f12c <malloc>
c001f78c:	89 07                	mov    DWORD PTR [edi],eax
c001f78e:	89 c3                	mov    ebx,eax
c001f790:	58                   	pop    eax
c001f791:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f795:	50                   	push   eax
c001f796:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f799:	50                   	push   eax
c001f79a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f79e:	50                   	push   eax
c001f79f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7a3:	50                   	push   eax
c001f7a4:	56                   	push   esi
c001f7a5:	e8 33 ff ff ff       	call   c001f6dd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7aa:	83 c4 20             	add    esp,0x20
c001f7ad:	84 c0                	test   al,al
c001f7af:	74 07                	je     c001f7b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7b6:	74 0b                	je     c001f7c3 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7b8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7bc:	b8 01 00 00 00       	mov    eax,0x1
c001f7c1:	eb 3b                	jmp    c001f7fe <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7cb:	89 03                	mov    DWORD PTR [ebx],eax
c001f7cd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f7df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f7e6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f7e9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f7f0:	8a 06                	mov    al,BYTE PTR [esi]
c001f7f2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f7f5:	31 c0                	xor    eax,eax
c001f7f7:	eb 05                	jmp    c001f7fe <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7f9:	b8 04 00 00 00       	mov    eax,0x4
c001f7fe:	83 c4 10             	add    esp,0x10
c001f801:	5b                   	pop    ebx
c001f802:	5e                   	pop    esi
c001f803:	5f                   	pop    edi
c001f804:	c3                   	ret    
c001f805:	90                   	nop

c001f806 <ISO9660::exists(char const*)>:
c001f806:	83 ec 28             	sub    esp,0x28
c001f809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f80d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f811:	52                   	push   edx
c001f812:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f815:	52                   	push   edx
c001f816:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f81a:	52                   	push   edx
c001f81b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f81f:	52                   	push   edx
c001f820:	50                   	push   eax
c001f821:	e8 b7 fe ff ff       	call   c001f6dd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f826:	83 c4 3c             	add    esp,0x3c
c001f829:	c3                   	ret    

c001f82a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f82a:	56                   	push   esi
c001f82b:	53                   	push   ebx
c001f82c:	83 ec 14             	sub    esp,0x14
c001f82f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f833:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f837:	85 db                	test   ebx,ebx
c001f839:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f83d:	0f 94 c2             	sete   dl
c001f840:	85 f6                	test   esi,esi
c001f842:	0f 94 c0             	sete   al
c001f845:	08 c2                	or     dl,al
c001f847:	75 68                	jne    c001f8b1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f849:	85 c9                	test   ecx,ecx
c001f84b:	74 64                	je     c001f8b1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f84d:	83 ec 0c             	sub    esp,0xc
c001f850:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f853:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f857:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f85d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f864:	50                   	push   eax
c001f865:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f868:	50                   	push   eax
c001f869:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f86d:	50                   	push   eax
c001f86e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f872:	50                   	push   eax
c001f873:	51                   	push   ecx
c001f874:	e8 64 fe ff ff       	call   c001f6dd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f879:	83 c4 20             	add    esp,0x20
c001f87c:	ba 01 00 00 00       	mov    edx,0x1
c001f881:	84 c0                	test   al,al
c001f883:	74 31                	je     c001f8b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f885:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f889:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f890:	89 03                	mov    DWORD PTR [ebx],eax
c001f892:	ba 00 00 00 00       	mov    edx,0x0
c001f897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f89b:	85 c0                	test   eax,eax
c001f89d:	0f 95 06             	setne  BYTE PTR [esi]
c001f8a0:	74 14                	je     c001f8b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8af:	eb 05                	jmp    c001f8b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8b1:	ba 04 00 00 00       	mov    edx,0x4
c001f8b6:	83 c4 14             	add    esp,0x14
c001f8b9:	89 d0                	mov    eax,edx
c001f8bb:	5b                   	pop    ebx
c001f8bc:	5e                   	pop    esi
c001f8bd:	c3                   	ret    

c001f8be <ISO9660::openDir(char const*, void**)>:
c001f8be:	57                   	push   edi
c001f8bf:	56                   	push   esi
c001f8c0:	53                   	push   ebx
c001f8c1:	83 ec 10             	sub    esp,0x10
c001f8c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8c8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8cc:	85 ff                	test   edi,edi
c001f8ce:	0f 84 95 00 00 00    	je     c001f969 <ISO9660::openDir(char const*, void**)+0xab>
c001f8d4:	85 f6                	test   esi,esi
c001f8d6:	0f 84 8d 00 00 00    	je     c001f969 <ISO9660::openDir(char const*, void**)+0xab>
c001f8dc:	83 ec 0c             	sub    esp,0xc
c001f8df:	6a 1c                	push   0x1c
c001f8e1:	e8 46 f8 fe ff       	call   c000f12c <malloc>
c001f8e6:	89 07                	mov    DWORD PTR [edi],eax
c001f8e8:	89 c3                	mov    ebx,eax
c001f8ea:	59                   	pop    ecx
c001f8eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8ef:	50                   	push   eax
c001f8f0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f8f3:	50                   	push   eax
c001f8f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8f8:	50                   	push   eax
c001f8f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8fd:	50                   	push   eax
c001f8fe:	56                   	push   esi
c001f8ff:	e8 d9 fd ff ff       	call   c001f6dd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f904:	83 c4 20             	add    esp,0x20
c001f907:	84 c0                	test   al,al
c001f909:	74 07                	je     c001f912 <ISO9660::openDir(char const*, void**)+0x54>
c001f90b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f910:	75 21                	jne    c001f933 <ISO9660::openDir(char const*, void**)+0x75>
c001f912:	0f b6 c0             	movzx  eax,al
c001f915:	52                   	push   edx
c001f916:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f91a:	50                   	push   eax
c001f91b:	68 fe 8b 02 c0       	push   0xc0028bfe
c001f920:	e8 2e 29 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c001f925:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	b8 01 00 00 00       	mov    eax,0x1
c001f931:	eb 3b                	jmp    c001f96e <ISO9660::openDir(char const*, void**)+0xb0>
c001f933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f937:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f93b:	89 03                	mov    DWORD PTR [ebx],eax
c001f93d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f94f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f956:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f959:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f960:	8a 06                	mov    al,BYTE PTR [esi]
c001f962:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f965:	31 c0                	xor    eax,eax
c001f967:	eb 05                	jmp    c001f96e <ISO9660::openDir(char const*, void**)+0xb0>
c001f969:	b8 04 00 00 00       	mov    eax,0x4
c001f96e:	83 c4 10             	add    esp,0x10
c001f971:	5b                   	pop    ebx
c001f972:	5e                   	pop    esi
c001f973:	5f                   	pop    edi
c001f974:	c3                   	ret    
c001f975:	90                   	nop

c001f976 <ISO9660::ISO9660()>:
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97d:	83 ec 0c             	sub    esp,0xc
c001f980:	50                   	push   eax
c001f981:	e8 d2 2b ff ff       	call   c0012558 <Filesystem::Filesystem()>
c001f986:	83 c4 10             	add    esp,0x10
c001f989:	ba 24 8c 02 c0       	mov    edx,0xc0028c24
c001f98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f992:	89 10                	mov    DWORD PTR [eax],edx
c001f994:	90                   	nop
c001f995:	83 c4 0c             	add    esp,0xc
c001f998:	c3                   	ret    
c001f999:	90                   	nop

c001f99a <SoundChannel::~SoundChannel()>:
c001f99a:	83 ec 0c             	sub    esp,0xc
c001f99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	50                   	push   eax
c001f9a8:	e8 8f f7 fe ff       	call   c000f13c <free>
c001f9ad:	83 c4 10             	add    esp,0x10
c001f9b0:	90                   	nop
c001f9b1:	83 c4 0c             	add    esp,0xc
c001f9b4:	c3                   	ret    
c001f9b5:	90                   	nop

c001f9b6 <SoundChannel::setSpeed(float)>:
c001f9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9be:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9c1:	c3                   	ret    

c001f9c2 <SoundChannel::getSpeed()>:
c001f9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9c9:	c3                   	ret    

c001f9ca <SoundChannel::setVolume(int)>:
c001f9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ce:	83 f8 64             	cmp    eax,0x64
c001f9d1:	7e 05                	jle    c001f9d8 <SoundChannel::setVolume(int)+0xe>
c001f9d3:	b8 64 00 00 00       	mov    eax,0x64
c001f9d8:	85 c0                	test   eax,eax
c001f9da:	79 02                	jns    c001f9de <SoundChannel::setVolume(int)+0x14>
c001f9dc:	31 c0                	xor    eax,eax
c001f9de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9e2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001f9e5:	c3                   	ret    

c001f9e6 <SoundChannel::getVolume()>:
c001f9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001f9ed:	c3                   	ret    

c001f9ee <SoundChannel::pause()>:
c001f9ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001f9f6:	c3                   	ret    
c001f9f7:	90                   	nop

c001f9f8 <SoundChannel::SoundChannel(int, int, int, int)>:
c001f9f8:	83 ec 1c             	sub    esp,0x1c
c001f9fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f9ff:	e8 ea ff ff ff       	call   c001f9ee <SoundChannel::pause()>
c001fa04:	83 c4 04             	add    esp,0x4
c001fa07:	6a 50                	push   0x50
c001fa09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa0d:	e8 b8 ff ff ff       	call   c001f9ca <SoundChannel::setVolume(int)>
c001fa12:	83 c4 08             	add    esp,0x8
c001fa15:	a1 9c 8c 02 c0       	mov    eax,ds:0xc0028c9c
c001fa1a:	50                   	push   eax
c001fa1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa1f:	e8 92 ff ff ff       	call   c001f9b6 <SoundChannel::setSpeed(float)>
c001fa24:	83 c4 08             	add    esp,0x8
c001fa27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa2f:	89 10                	mov    DWORD PTR [eax],edx
c001fa31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa40:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa44:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa47:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa4c:	75 23                	jne    c001fa71 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa52:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5b:	0f af c2             	imul   eax,edx
c001fa5e:	85 c0                	test   eax,eax
c001fa60:	79 03                	jns    c001fa65 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa62:	83 c0 03             	add    eax,0x3
c001fa65:	c1 f8 02             	sar    eax,0x2
c001fa68:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa79:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fa7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fa87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa8b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fa92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa96:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fa99:	c1 e0 02             	shl    eax,0x2
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	50                   	push   eax
c001faa0:	e8 87 f6 fe ff       	call   c000f12c <malloc>
c001faa5:	83 c4 10             	add    esp,0x10
c001faa8:	89 c2                	mov    edx,eax
c001faaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fab1:	83 ec 04             	sub    esp,0x4
c001fab4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fab8:	50                   	push   eax
c001fab9:	6a 01                	push   0x1
c001fabb:	6a 04                	push   0x4
c001fabd:	e8 5d 8e fe ff       	call   c000891f <src_new>
c001fac2:	83 c4 10             	add    esp,0x10
c001fac5:	89 c2                	mov    edx,eax
c001fac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001facb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad2:	85 c0                	test   eax,eax
c001fad4:	74 10                	je     c001fae6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	68 80 8c 02 c0       	push   0xc0028c80
c001fade:	e8 ee 8e ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c001fae3:	83 c4 10             	add    esp,0x10
c001fae6:	a0 20 c7 02 c0       	mov    al,ds:0xc002c720
c001faeb:	83 f0 01             	xor    eax,0x1
c001faee:	84 c0                	test   al,al
c001faf0:	74 57                	je     c001fb49 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001faf2:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c001faf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fafb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb03:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb0b:	7f 35                	jg     c001fb42 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb0d:	83 ec 0c             	sub    esp,0xc
c001fb10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb14:	e8 7e 42 00 00       	call   c0023d97 <__floatsisf>
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c001fb22:	83 ec 08             	sub    esp,0x8
c001fb25:	52                   	push   edx
c001fb26:	50                   	push   eax
c001fb27:	e8 7d 3e 00 00       	call   c00239a9 <__mulsf3>
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	89 c2                	mov    edx,eax
c001fb31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb35:	89 14 85 20 c3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ce0],edx
c001fb3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb40:	eb c1                	jmp    c001fb03 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb42:	c6 05 20 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c720,0x1
c001fb49:	90                   	nop
c001fb4a:	83 c4 1c             	add    esp,0x1c
c001fb4d:	c3                   	ret    

c001fb4e <SoundChannel::play()>:
c001fb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb52:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb56:	c3                   	ret    
c001fb57:	90                   	nop

c001fb58 <SoundChannel::paused()>:
c001fb58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb5f:	c3                   	ret    

c001fb60 <SoundChannel::getSampleRate()>:
c001fb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	c3                   	ret    
c001fb67:	90                   	nop

c001fb68 <SoundChannel::getBits()>:
c001fb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6f:	c3                   	ret    

c001fb70 <SoundChannel::getBufferUsed()>:
c001fb70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb74:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb77:	c3                   	ret    

c001fb78 <SoundChannel::getBufferSize()>:
c001fb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb7f:	c3                   	ret    

c001fb80 <SoundChannel::unbuffer(float*, int, int)>:
c001fb80:	56                   	push   esi
c001fb81:	53                   	push   ebx
c001fb82:	83 ec 40             	sub    esp,0x40
c001fb85:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fb89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fb8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fb97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fb9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fb9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fba3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fba7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbab:	e8 e7 41 00 00       	call   c0023d97 <__floatsisf>
c001fbb0:	5a                   	pop    edx
c001fbb1:	89 c6                	mov    esi,eax
c001fbb3:	ff 33                	push   DWORD PTR [ebx]
c001fbb5:	e8 dd 41 00 00       	call   c0023d97 <__floatsisf>
c001fbba:	59                   	pop    ecx
c001fbbb:	5a                   	pop    edx
c001fbbc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbbf:	50                   	push   eax
c001fbc0:	e8 e4 3d 00 00       	call   c00239a9 <__mulsf3>
c001fbc5:	59                   	pop    ecx
c001fbc6:	5a                   	pop    edx
c001fbc7:	50                   	push   eax
c001fbc8:	56                   	push   esi
c001fbc9:	e8 9e 3f 00 00       	call   c0023b6c <__divsf3>
c001fbce:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbd1:	e8 91 54 00 00       	call   c0025067 <__extendsfdf2>
c001fbd6:	59                   	pop    ecx
c001fbd7:	5e                   	pop    esi
c001fbd8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fbdc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fbe0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fbe8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbec:	50                   	push   eax
c001fbed:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fbf0:	e8 a4 89 fe ff       	call   c0008599 <src_process>
c001fbf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fbf9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fbfc:	83 c4 0c             	add    esp,0xc
c001fbff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc02:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc05:	29 d0                	sub    eax,edx
c001fc07:	c1 e0 02             	shl    eax,0x2
c001fc0a:	50                   	push   eax
c001fc0b:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc0e:	50                   	push   eax
c001fc0f:	51                   	push   ecx
c001fc10:	e8 fa 09 fe ff       	call   c000060f <memmove>
c001fc15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc19:	83 c4 44             	add    esp,0x44
c001fc1c:	5b                   	pop    ebx
c001fc1d:	5e                   	pop    esi
c001fc1e:	c3                   	ret    
c001fc1f:	90                   	nop

c001fc20 <SoundChannel::buffer8(unsigned char*, int)>:
c001fc20:	55                   	push   ebp
c001fc21:	57                   	push   edi
c001fc22:	56                   	push   esi
c001fc23:	53                   	push   ebx
c001fc24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc28:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc2c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc2f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc33:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc36:	74 7a                	je     c001fcb2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc38:	85 ff                	test   edi,edi
c001fc3a:	7e 76                	jle    c001fcb2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc3c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc40:	8d 70 01             	lea    esi,[eax+0x1]
c001fc43:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc46:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc49:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc50:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc53:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc56:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc59:	74 5e                	je     c001fcb9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc5b:	83 ff 01             	cmp    edi,0x1
c001fc5e:	74 4b                	je     c001fcab <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc60:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc64:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc67:	8d 70 01             	lea    esi,[eax+0x1]
c001fc6a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc6d:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc74:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc77:	b8 02 00 00 00       	mov    eax,0x2
c001fc7c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc7f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fc82:	75 23                	jne    c001fca7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fc84:	eb 27                	jmp    c001fcad <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fc86:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fc8b:	8d 71 01             	lea    esi,[ecx+0x1]
c001fc8e:	40                   	inc    eax
c001fc8f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc92:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fc95:	8b 1c 9d 20 c3 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3ce0]
c001fc9c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fc9f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fca2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fca5:	74 06                	je     c001fcad <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fca7:	39 c7                	cmp    edi,eax
c001fca9:	75 db                	jne    c001fc86 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fcab:	89 f8                	mov    eax,edi
c001fcad:	5b                   	pop    ebx
c001fcae:	5e                   	pop    esi
c001fcaf:	5f                   	pop    edi
c001fcb0:	5d                   	pop    ebp
c001fcb1:	c3                   	ret    
c001fcb2:	5b                   	pop    ebx
c001fcb3:	31 c0                	xor    eax,eax
c001fcb5:	5e                   	pop    esi
c001fcb6:	5f                   	pop    edi
c001fcb7:	5d                   	pop    ebp
c001fcb8:	c3                   	ret    
c001fcb9:	b8 01 00 00 00       	mov    eax,0x1
c001fcbe:	eb ed                	jmp    c001fcad <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fcc0 <SoundDevice::SoundDevice(char const*)>:
c001fcc0:	83 ec 1c             	sub    esp,0x1c
c001fcc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcc7:	83 ec 08             	sub    esp,0x8
c001fcca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcce:	50                   	push   eax
c001fccf:	e8 4a 3b ff ff       	call   c001381e <Device::Device(char const*)>
c001fcd4:	83 c4 10             	add    esp,0x10
c001fcd7:	ba ac 8c 02 c0       	mov    edx,0xc0028cac
c001fcdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce0:	89 10                	mov    DWORD PTR [eax],edx
c001fce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcf4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fcfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd06:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd0b:	7f 19                	jg     c001fd26 <SoundDevice::SoundDevice(char const*)+0x66>
c001fd0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd15:	83 c2 54             	add    edx,0x54
c001fd18:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd20:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd24:	eb e0                	jmp    c001fd06 <SoundDevice::SoundDevice(char const*)+0x46>
c001fd26:	90                   	nop
c001fd27:	83 c4 1c             	add    esp,0x1c
c001fd2a:	c3                   	ret    
c001fd2b:	90                   	nop

c001fd2c <SoundDevice::~SoundDevice()>:
c001fd2c:	53                   	push   ebx
c001fd2d:	83 ec 18             	sub    esp,0x18
c001fd30:	ba ac 8c 02 c0       	mov    edx,0xc0028cac
c001fd35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd39:	89 10                	mov    DWORD PTR [eax],edx
c001fd3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd43:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd48:	7f 46                	jg     c001fd90 <SoundDevice::~SoundDevice()+0x64>
c001fd4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd52:	83 c2 54             	add    edx,0x54
c001fd55:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd59:	85 c0                	test   eax,eax
c001fd5b:	74 2d                	je     c001fd8a <SoundDevice::~SoundDevice()+0x5e>
c001fd5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd65:	83 c2 54             	add    edx,0x54
c001fd68:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd6c:	85 db                	test   ebx,ebx
c001fd6e:	74 1a                	je     c001fd8a <SoundDevice::~SoundDevice()+0x5e>
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	53                   	push   ebx
c001fd74:	e8 21 fc ff ff       	call   c001f99a <SoundChannel::~SoundChannel()>
c001fd79:	83 c4 10             	add    esp,0x10
c001fd7c:	83 ec 08             	sub    esp,0x8
c001fd7f:	6a 2c                	push   0x2c
c001fd81:	53                   	push   ebx
c001fd82:	e8 ec 23 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001fd87:	83 c4 10             	add    esp,0x10
c001fd8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd8e:	eb b3                	jmp    c001fd43 <SoundDevice::~SoundDevice()+0x17>
c001fd90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	50                   	push   eax
c001fd98:	e8 63 37 ff ff       	call   c0013500 <Device::~Device()>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	90                   	nop
c001fda1:	83 c4 18             	add    esp,0x18
c001fda4:	5b                   	pop    ebx
c001fda5:	c3                   	ret    

c001fda6 <SoundDevice::~SoundDevice()>:
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	83 ec 0c             	sub    esp,0xc
c001fdac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb0:	e8 77 ff ff ff       	call   c001fd2c <SoundDevice::~SoundDevice()>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	83 ec 08             	sub    esp,0x8
c001fdbb:	68 e4 01 00 00       	push   0x1e4
c001fdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc4:	e8 aa 23 ff ff       	call   c0012173 <operator delete(void*, unsigned long)>
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	83 c4 0c             	add    esp,0xc
c001fdcf:	c3                   	ret    

c001fdd0 <SoundDevice::getFreeChannelNum()>:
c001fdd0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdd4:	31 c0                	xor    eax,eax
c001fdd6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fdde:	74 09                	je     c001fde9 <SoundDevice::getFreeChannelNum()+0x19>
c001fde0:	40                   	inc    eax
c001fde1:	83 f8 20             	cmp    eax,0x20
c001fde4:	75 f0                	jne    c001fdd6 <SoundDevice::getFreeChannelNum()+0x6>
c001fde6:	83 c8 ff             	or     eax,0xffffffff
c001fde9:	c3                   	ret    

c001fdea <SoundDevice::addChannel(SoundChannel*)>:
c001fdea:	56                   	push   esi
c001fdeb:	53                   	push   ebx
c001fdec:	51                   	push   ecx
c001fded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fdf5:	53                   	push   ebx
c001fdf6:	e8 d5 ff ff ff       	call   c001fdd0 <SoundDevice::getFreeChannelNum()>
c001fdfb:	5a                   	pop    edx
c001fdfc:	83 f8 ff             	cmp    eax,0xffffffff
c001fdff:	74 51                	je     c001fe52 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe01:	85 f6                	test   esi,esi
c001fe03:	74 4d                	je     c001fe52 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe05:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe0c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe13:	75 30                	jne    c001fe45 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe15:	83 ec 0c             	sub    esp,0xc
c001fe18:	56                   	push   esi
c001fe19:	e8 42 fd ff ff       	call   c001fb60 <SoundChannel::getSampleRate()>
c001fe1e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe24:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe27:	e8 3c fd ff ff       	call   c001fb68 <SoundChannel::getBits()>
c001fe2c:	83 c4 0c             	add    esp,0xc
c001fe2f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe35:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe37:	50                   	push   eax
c001fe38:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe3e:	53                   	push   ebx
c001fe3f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe42:	83 c4 10             	add    esp,0x10
c001fe45:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe4b:	b8 01 00 00 00       	mov    eax,0x1
c001fe50:	eb 03                	jmp    c001fe55 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe52:	83 c8 ff             	or     eax,0xffffffff
c001fe55:	5a                   	pop    edx
c001fe56:	5b                   	pop    ebx
c001fe57:	5e                   	pop    esi
c001fe58:	c3                   	ret    
c001fe59:	90                   	nop

c001fe5a <SoundDevice::removeChannel(int)>:
c001fe5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe62:	83 fa 1f             	cmp    edx,0x1f
c001fe65:	77 23                	ja     c001fe8a <SoundDevice::removeChannel(int)+0x30>
c001fe67:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe6a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe71:	74 17                	je     c001fe8a <SoundDevice::removeChannel(int)+0x30>
c001fe73:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fe7d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fe83:	75 05                	jne    c001fe8a <SoundDevice::removeChannel(int)+0x30>
c001fe85:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe87:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fe8a:	c3                   	ret    
c001fe8b:	90                   	nop

c001fe8c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001fe8c:	57                   	push   edi
c001fe8d:	56                   	push   esi
c001fe8e:	53                   	push   ebx
c001fe8f:	31 db                	xor    ebx,ebx
c001fe91:	83 ec 10             	sub    esp,0x10
c001fe94:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001fe98:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001fe9c:	0f 8d cb 00 00 00    	jge    c001ff6d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fea2:	83 ec 0c             	sub    esp,0xc
c001fea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fea9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001feac:	e8 b6 51 00 00       	call   c0025067 <__extendsfdf2>
c001feb1:	83 c4 10             	add    esp,0x10
c001feb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001feb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001febc:	68 00 00 f0 3f       	push   0x3ff00000
c001fec1:	6a 00                	push   0x0
c001fec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fec7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fecb:	e8 23 41 00 00       	call   c0023ff3 <__adddf3>
c001fed0:	83 c4 10             	add    esp,0x10
c001fed3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fed7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fedb:	68 00 00 e0 3f       	push   0x3fe00000
c001fee0:	6a 00                	push   0x0
c001fee2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001feea:	e8 81 47 00 00       	call   c0024670 <__muldf3>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fefa:	68 00 00 60 40       	push   0x40600000
c001feff:	6a 00                	push   0x0
c001ff01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff09:	e8 62 47 00 00       	call   c0024670 <__muldf3>
c001ff0e:	59                   	pop    ecx
c001ff0f:	5f                   	pop    edi
c001ff10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff20:	e8 1e 50 00 00       	call   c0024f43 <__truncdfsf2>
c001ff25:	5a                   	pop    edx
c001ff26:	89 c7                	mov    edi,eax
c001ff28:	59                   	pop    ecx
c001ff29:	68 00 00 fe 42       	push   0x42fe0000
c001ff2e:	50                   	push   eax
c001ff2f:	e8 b9 40 00 00       	call   c0023fed <__gesf2>
c001ff34:	83 c4 10             	add    esp,0x10
c001ff37:	85 c0                	test   eax,eax
c001ff39:	78 06                	js     c001ff41 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff3b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff3f:	eb 26                	jmp    c001ff67 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff41:	50                   	push   eax
c001ff42:	50                   	push   eax
c001ff43:	6a 00                	push   0x0
c001ff45:	57                   	push   edi
c001ff46:	e8 a6 40 00 00       	call   c0023ff1 <__lesf2>
c001ff4b:	83 c4 10             	add    esp,0x10
c001ff4e:	85 c0                	test   eax,eax
c001ff50:	7f 06                	jg     c001ff58 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff52:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff56:	eb 0f                	jmp    c001ff67 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	57                   	push   edi
c001ff5c:	e8 9b 51 00 00       	call   c00250fc <lrintf>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff67:	43                   	inc    ebx
c001ff68:	e9 2b ff ff ff       	jmp    c001fe98 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff6d:	83 c4 10             	add    esp,0x10
c001ff70:	5b                   	pop    ebx
c001ff71:	5e                   	pop    esi
c001ff72:	5f                   	pop    edi
c001ff73:	c3                   	ret    

c001ff74 <SoundDevice::getAudio(int, float*, float*)>:
c001ff74:	55                   	push   ebp
c001ff75:	57                   	push   edi
c001ff76:	56                   	push   esi
c001ff77:	53                   	push   ebx
c001ff78:	31 db                	xor    ebx,ebx
c001ff7a:	83 ec 20             	sub    esp,0x20
c001ff7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff81:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ff85:	c1 e0 02             	shl    eax,0x2
c001ff88:	50                   	push   eax
c001ff89:	6a 00                	push   0x0
c001ff8b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff8f:	e8 e9 06 fe ff       	call   c000067d <memset>
c001ff94:	83 c4 10             	add    esp,0x10
c001ff97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ff9b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffa2:	85 c0                	test   eax,eax
c001ffa4:	0f 84 d7 00 00 00    	je     c0020081 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffaa:	83 ec 0c             	sub    esp,0xc
c001ffad:	50                   	push   eax
c001ffae:	e8 a5 fb ff ff       	call   c001fb58 <SoundChannel::paused()>
c001ffb3:	83 c4 10             	add    esp,0x10
c001ffb6:	84 c0                	test   al,al
c001ffb8:	0f 85 c3 00 00 00    	jne    c0020081 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffbe:	83 ec 0c             	sub    esp,0xc
c001ffc1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffc8:	e8 19 fa ff ff       	call   c001f9e6 <SoundChannel::getVolume()>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	85 c0                	test   eax,eax
c001ffd2:	0f 84 a9 00 00 00    	je     c0020081 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffd8:	83 ec 0c             	sub    esp,0xc
c001ffdb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffe2:	e8 ff f9 ff ff       	call   c001f9e6 <SoundChannel::getVolume()>
c001ffe7:	83 ec 0c             	sub    esp,0xc
c001ffea:	50                   	push   eax
c001ffeb:	e8 a7 3d 00 00       	call   c0023d97 <__floatsisf>
c001fff0:	59                   	pop    ecx
c001fff1:	5d                   	pop    ebp
c001fff2:	31 ed                	xor    ebp,ebp
c001fff4:	68 00 00 c8 42       	push   0x42c80000
c001fff9:	50                   	push   eax
c001fffa:	e8 6d 3b 00 00       	call   c0023b6c <__divsf3>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020006:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002000a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020010:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020014:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002001b:	e8 60 fb ff ff       	call   c001fb80 <SoundChannel::unbuffer(float*, int, int)>
c0020020:	83 c4 20             	add    esp,0x20
c0020023:	89 c1                	mov    ecx,eax
c0020025:	39 cd                	cmp    ebp,ecx
c0020027:	7d 52                	jge    c002007b <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020029:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002002d:	50                   	push   eax
c002002e:	50                   	push   eax
c002002f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020033:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020036:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002003a:	e8 6a 39 00 00       	call   c00239a9 <__mulsf3>
c002003f:	5a                   	pop    edx
c0020040:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020044:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002004a:	e8 48 3d 00 00       	call   c0023d97 <__floatsisf>
c002004f:	59                   	pop    ecx
c0020050:	5a                   	pop    edx
c0020051:	50                   	push   eax
c0020052:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020056:	e8 11 3b 00 00       	call   c0023b6c <__divsf3>
c002005b:	59                   	pop    ecx
c002005c:	5a                   	pop    edx
c002005d:	50                   	push   eax
c002005e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020062:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020065:	e8 1c 36 00 00       	call   c0023686 <__addsf3>
c002006a:	83 c4 10             	add    esp,0x10
c002006d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020071:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020075:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020078:	45                   	inc    ebp
c0020079:	eb aa                	jmp    c0020025 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002007b:	39 cf                	cmp    edi,ecx
c002007d:	7e 02                	jle    c0020081 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002007f:	89 cf                	mov    edi,ecx
c0020081:	43                   	inc    ebx
c0020082:	83 fb 20             	cmp    ebx,0x20
c0020085:	0f 85 10 ff ff ff    	jne    c001ff9b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002008b:	83 c4 1c             	add    esp,0x1c
c002008e:	89 f8                	mov    eax,edi
c0020090:	5b                   	pop    ebx
c0020091:	5e                   	pop    esi
c0020092:	5f                   	pop    edi
c0020093:	5d                   	pop    ebp
c0020094:	c3                   	ret    
c0020095:	90                   	nop

c0020096 <PCI::open(int, int, void*)>:
c0020096:	83 ec 18             	sub    esp,0x18
c0020099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002009d:	8b 10                	mov    edx,DWORD PTR [eax]
c002009f:	50                   	push   eax
c00200a0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200a3:	31 c0                	xor    eax,eax
c00200a5:	83 c4 1c             	add    esp,0x1c
c00200a8:	c3                   	ret    
c00200a9:	90                   	nop

c00200aa <PCI::close(int, int, void*)>:
c00200aa:	31 c0                	xor    eax,eax
c00200ac:	c3                   	ret    
c00200ad:	90                   	nop

c00200ae <PCI::PCI()>:
c00200ae:	83 ec 0c             	sub    esp,0xc
c00200b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b5:	83 ec 08             	sub    esp,0x8
c00200b8:	68 dc 8c 02 c0       	push   0xc0028cdc
c00200bd:	50                   	push   eax
c00200be:	e8 17 2e ff ff       	call   c0012eda <Bus::Bus(char const*)>
c00200c3:	83 c4 10             	add    esp,0x10
c00200c6:	ba 68 8d 02 c0       	mov    edx,0xc0028d68
c00200cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200cf:	89 10                	mov    DWORD PTR [eax],edx
c00200d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200db:	0f b6 d0             	movzx  edx,al
c00200de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00200e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200f3:	0f b6 d0             	movzx  edx,al
c00200f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200fa:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00200ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020103:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020109:	8d 50 01             	lea    edx,[eax+0x1]
c002010c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020110:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020116:	0f b6 d0             	movzx  edx,al
c0020119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020121:	83 c9 c0             	or     ecx,0xffffffc0
c0020124:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020128:	90                   	nop
c0020129:	83 c4 0c             	add    esp,0xc
c002012c:	c3                   	ret    
c002012d:	90                   	nop

c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002012e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020132:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020137:	89 ca                	mov    edx,ecx
c0020139:	c1 e0 10             	shl    eax,0x10
c002013c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020142:	09 d0                	or     eax,edx
c0020144:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020149:	c1 e2 08             	shl    edx,0x8
c002014c:	09 d0                	or     eax,edx
c002014e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020153:	c1 e2 0b             	shl    edx,0xb
c0020156:	09 d0                	or     eax,edx
c0020158:	ba f8 0c 00 00       	mov    edx,0xcf8
c002015d:	0d 00 00 00 80       	or     eax,0x80000000
c0020162:	ef                   	out    dx,eax
c0020163:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020168:	ed                   	in     eax,dx
c0020169:	83 e1 02             	and    ecx,0x2
c002016c:	0f b6 c9             	movzx  ecx,cl
c002016f:	c1 e1 03             	shl    ecx,0x3
c0020172:	d3 e8                	shr    eax,cl
c0020174:	c3                   	ret    
c0020175:	90                   	nop

c0020176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020176:	6a 00                	push   0x0
c0020178:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002017d:	50                   	push   eax
c002017e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020183:	50                   	push   eax
c0020184:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020189:	50                   	push   eax
c002018a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002018e:	e8 9b ff ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020193:	83 c4 14             	add    esp,0x14
c0020196:	c3                   	ret    
c0020197:	90                   	nop

c0020198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020198:	6a 0e                	push   0xe
c002019a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002019f:	50                   	push   eax
c00201a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a5:	50                   	push   eax
c00201a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201ab:	50                   	push   eax
c00201ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201b0:	e8 79 ff ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201b5:	83 c4 14             	add    esp,0x14
c00201b8:	0f b6 c0             	movzx  eax,al
c00201bb:	c3                   	ret    

c00201bc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201bc:	55                   	push   ebp
c00201bd:	57                   	push   edi
c00201be:	56                   	push   esi
c00201bf:	53                   	push   ebx
c00201c0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201c5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201ca:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201cf:	6a 0a                	push   0xa
c00201d1:	56                   	push   esi
c00201d2:	55                   	push   ebp
c00201d3:	57                   	push   edi
c00201d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201d8:	e8 51 ff ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201dd:	6a 0a                	push   0xa
c00201df:	89 c3                	mov    ebx,eax
c00201e1:	56                   	push   esi
c00201e2:	0f b6 db             	movzx  ebx,bl
c00201e5:	55                   	push   ebp
c00201e6:	57                   	push   edi
c00201e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00201eb:	e8 3e ff ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201f0:	83 c4 28             	add    esp,0x28
c00201f3:	25 00 ff 00 00       	and    eax,0xff00
c00201f8:	09 d8                	or     eax,ebx
c00201fa:	5b                   	pop    ebx
c00201fb:	5e                   	pop    esi
c00201fc:	5f                   	pop    edi
c00201fd:	5d                   	pop    ebp
c00201fe:	c3                   	ret    
c00201ff:	90                   	nop

c0020200 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020200:	6a 08                	push   0x8
c0020202:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020207:	50                   	push   eax
c0020208:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002020d:	50                   	push   eax
c002020e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020213:	50                   	push   eax
c0020214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020218:	e8 11 ff ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002021d:	83 c4 14             	add    esp,0x14
c0020220:	0f b6 c4             	movzx  eax,ah
c0020223:	c3                   	ret    

c0020224 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020224:	6a 08                	push   0x8
c0020226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002022b:	50                   	push   eax
c002022c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020231:	50                   	push   eax
c0020232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020237:	50                   	push   eax
c0020238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002023c:	e8 ed fe ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020241:	83 c4 14             	add    esp,0x14
c0020244:	c3                   	ret    
c0020245:	90                   	nop

c0020246 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020246:	6a 3c                	push   0x3c
c0020248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024d:	50                   	push   eax
c002024e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020253:	50                   	push   eax
c0020254:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020259:	50                   	push   eax
c002025a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002025e:	e8 cb fe ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020263:	83 c4 14             	add    esp,0x14
c0020266:	c3                   	ret    
c0020267:	90                   	nop

c0020268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020268:	6a 18                	push   0x18
c002026a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026f:	50                   	push   eax
c0020270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020275:	50                   	push   eax
c0020276:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002027b:	50                   	push   eax
c002027c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020280:	e8 a9 fe ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020285:	83 c4 14             	add    esp,0x14
c0020288:	0f b6 c4             	movzx  eax,ah
c002028b:	c3                   	ret    

c002028c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002028c:	55                   	push   ebp
c002028d:	57                   	push   edi
c002028e:	56                   	push   esi
c002028f:	53                   	push   ebx
c0020290:	50                   	push   eax
c0020291:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020295:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002029a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002029f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202a4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202ab:	8d 43 12             	lea    eax,[ebx+0x12]
c00202ae:	83 c3 10             	add    ebx,0x10
c00202b1:	0f b6 c0             	movzx  eax,al
c00202b4:	0f b6 db             	movzx  ebx,bl
c00202b7:	50                   	push   eax
c00202b8:	51                   	push   ecx
c00202b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202bd:	57                   	push   edi
c00202be:	55                   	push   ebp
c00202bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202c3:	e8 66 fe ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202c8:	53                   	push   ebx
c00202c9:	89 c6                	mov    esi,eax
c00202cb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202cf:	c1 e6 10             	shl    esi,0x10
c00202d2:	51                   	push   ecx
c00202d3:	57                   	push   edi
c00202d4:	55                   	push   ebp
c00202d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202d9:	e8 50 fe ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202de:	83 c4 2c             	add    esp,0x2c
c00202e1:	0f b7 c0             	movzx  eax,ax
c00202e4:	5b                   	pop    ebx
c00202e5:	09 f0                	or     eax,esi
c00202e7:	5e                   	pop    esi
c00202e8:	5f                   	pop    edi
c00202e9:	5d                   	pop    ebp
c00202ea:	c3                   	ret    
c00202eb:	90                   	nop

c00202ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00202ec:	53                   	push   ebx
c00202ed:	ba f8 0c 00 00       	mov    edx,0xcf8
c00202f2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00202f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202fb:	c1 e1 10             	shl    ecx,0x10
c00202fe:	25 fc 00 00 00       	and    eax,0xfc
c0020303:	09 c1                	or     ecx,eax
c0020305:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002030a:	c1 e0 08             	shl    eax,0x8
c002030d:	09 c1                	or     ecx,eax
c002030f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020314:	c1 e0 0b             	shl    eax,0xb
c0020317:	09 c1                	or     ecx,eax
c0020319:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002031f:	89 c8                	mov    eax,ecx
c0020321:	ef                   	out    dx,eax
c0020322:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020327:	ed                   	in     eax,dx
c0020328:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002032d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020332:	74 0a                	je     c002033e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020334:	0f b7 d8             	movzx  ebx,ax
c0020337:	89 d0                	mov    eax,edx
c0020339:	c1 e0 10             	shl    eax,0x10
c002033c:	eb 05                	jmp    c0020343 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002033e:	66 31 c0             	xor    ax,ax
c0020341:	89 d3                	mov    ebx,edx
c0020343:	09 c3                	or     ebx,eax
c0020345:	ba f8 0c 00 00       	mov    edx,0xcf8
c002034a:	89 c8                	mov    eax,ecx
c002034c:	ef                   	out    dx,eax
c002034d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020352:	89 d8                	mov    eax,ebx
c0020354:	ef                   	out    dx,eax
c0020355:	5b                   	pop    ebx
c0020356:	c3                   	ret    
c0020357:	90                   	nop

c0020358 <PCI::checkBus(unsigned char)>:
c0020358:	56                   	push   esi
c0020359:	53                   	push   ebx
c002035a:	31 db                	xor    ebx,ebx
c002035c:	51                   	push   ecx
c002035d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020362:	52                   	push   edx
c0020363:	53                   	push   ebx
c0020364:	43                   	inc    ebx
c0020365:	56                   	push   esi
c0020366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002036a:	e8 29 03 00 00       	call   c0020698 <PCI::checkDevice(unsigned char, unsigned char)>
c002036f:	83 c4 10             	add    esp,0x10
c0020372:	83 fb 20             	cmp    ebx,0x20
c0020375:	75 eb                	jne    c0020362 <PCI::checkBus(unsigned char)+0xa>
c0020377:	58                   	pop    eax
c0020378:	5b                   	pop    ebx
c0020379:	5e                   	pop    esi
c002037a:	c3                   	ret    
c002037b:	90                   	nop

c002037c <PCI::foundDevice(PCIDeviceInfo)>:
c002037c:	55                   	push   ebp
c002037d:	57                   	push   edi
c002037e:	56                   	push   esi
c002037f:	53                   	push   ebx
c0020380:	83 ec 1c             	sub    esp,0x1c
c0020383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020387:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002038d:	0f 84 51 01 00 00    	je     c00204e4 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020393:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020397:	66 81 f9 06 04       	cmp    cx,0x406
c002039c:	75 2c                	jne    c00203ca <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002039e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203a3:	50                   	push   eax
c00203a4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203a9:	50                   	push   eax
c00203aa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203af:	50                   	push   eax
c00203b0:	56                   	push   esi
c00203b1:	e8 b2 fe ff ff       	call   c0020268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203ba:	0f b6 c0             	movzx  eax,al
c00203bd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203c1:	83 c4 2c             	add    esp,0x2c
c00203c4:	5b                   	pop    ebx
c00203c5:	5e                   	pop    esi
c00203c6:	5f                   	pop    edi
c00203c7:	5d                   	pop    ebp
c00203c8:	eb 8e                	jmp    c0020358 <PCI::checkBus(unsigned char)>
c00203ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203ce:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00203dc:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00203e0:	88 d3                	mov    bl,dl
c00203e2:	85 c0                	test   eax,eax
c00203e4:	74 33                	je     c0020419 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00203e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00203e9:	85 d2                	test   edx,edx
c00203eb:	74 28                	je     c0020415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00203ed:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00203f3:	31 ef                	xor    edi,ebp
c00203f5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00203fb:	75 18                	jne    c0020415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00203fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020401:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020407:	75 0c                	jne    c0020415 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020409:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002040f:	0f 84 cf 00 00 00    	je     c00204e4 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020415:	8b 00                	mov    eax,DWORD PTR [eax]
c0020417:	eb c9                	jmp    c00203e2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020419:	66 81 f9 01 06       	cmp    cx,0x601
c002041e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020422:	75 18                	jne    c002043c <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020424:	83 ec 0c             	sub    esp,0xc
c0020427:	68 58 01 00 00       	push   0x158
c002042c:	e8 33 1d ff ff       	call   c0012164 <operator new(unsigned long)>
c0020431:	59                   	pop    ecx
c0020432:	89 c5                	mov    ebp,eax
c0020434:	5f                   	pop    edi
c0020435:	68 e4 8c 02 c0       	push   0xc0028ce4
c002043a:	eb 7d                	jmp    c00204b9 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c002043c:	66 81 f9 01 01       	cmp    cx,0x101
c0020441:	75 60                	jne    c00204a3 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020443:	83 ec 0c             	sub    esp,0xc
c0020446:	68 70 02 00 00       	push   0x270
c002044b:	e8 14 1d ff ff       	call   c0012164 <operator new(unsigned long)>
c0020450:	89 04 24             	mov    DWORD PTR [esp],eax
c0020453:	89 c5                	mov    ebp,eax
c0020455:	e8 02 03 00 00       	call   c002075c <IDE::IDE()>
c002045a:	58                   	pop    eax
c002045b:	5a                   	pop    edx
c002045c:	55                   	push   ebp
c002045d:	56                   	push   esi
c002045e:	e8 cb 31 ff ff       	call   c001362e <Device::addChild(Device*)>
c0020463:	83 ec 1c             	sub    esp,0x1c
c0020466:	b9 09 00 00 00       	mov    ecx,0x9
c002046b:	fc                   	cld    
c002046c:	89 e7                	mov    edi,esp
c002046e:	89 de                	mov    esi,ebx
c0020470:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020472:	55                   	push   ebp
c0020473:	e8 c0 30 ff ff       	call   c0013538 <Device::preOpenPCI(PCIDeviceInfo)>
c0020478:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002047b:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002047f:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020487:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002048f:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020497:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002049a:	83 c4 4c             	add    esp,0x4c
c002049d:	5b                   	pop    ebx
c002049e:	5e                   	pop    esi
c002049f:	5f                   	pop    edi
c00204a0:	5d                   	pop    ebp
c00204a1:	ff e0                	jmp    eax
c00204a3:	83 ec 0c             	sub    esp,0xc
c00204a6:	68 58 01 00 00       	push   0x158
c00204ab:	e8 b4 1c ff ff       	call   c0012164 <operator new(unsigned long)>
c00204b0:	59                   	pop    ecx
c00204b1:	89 c5                	mov    ebp,eax
c00204b3:	5f                   	pop    edi
c00204b4:	68 03 8d 02 c0       	push   0xc0028d03
c00204b9:	55                   	push   ebp
c00204ba:	e8 5b 34 ff ff       	call   c001391a <DriverlessDevice::DriverlessDevice(char const*)>
c00204bf:	58                   	pop    eax
c00204c0:	5a                   	pop    edx
c00204c1:	55                   	push   ebp
c00204c2:	56                   	push   esi
c00204c3:	e8 66 31 ff ff       	call   c001362e <Device::addChild(Device*)>
c00204c8:	b9 09 00 00 00       	mov    ecx,0x9
c00204cd:	fc                   	cld    
c00204ce:	89 df                	mov    edi,ebx
c00204d0:	89 de                	mov    esi,ebx
c00204d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204d4:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204d8:	83 c4 2c             	add    esp,0x2c
c00204db:	5b                   	pop    ebx
c00204dc:	5e                   	pop    esi
c00204dd:	5f                   	pop    edi
c00204de:	5d                   	pop    ebp
c00204df:	e9 54 30 ff ff       	jmp    c0013538 <Device::preOpenPCI(PCIDeviceInfo)>
c00204e4:	83 c4 1c             	add    esp,0x1c
c00204e7:	5b                   	pop    ebx
c00204e8:	5e                   	pop    esi
c00204e9:	5f                   	pop    edi
c00204ea:	5d                   	pop    ebp
c00204eb:	c3                   	ret    

c00204ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00204ec:	55                   	push   ebp
c00204ed:	57                   	push   edi
c00204ee:	56                   	push   esi
c00204ef:	53                   	push   ebx
c00204f0:	83 ec 5c             	sub    esp,0x5c
c00204f3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00204f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00204fb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00204ff:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020504:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020508:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002050c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020511:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020515:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002051a:	6a 0c                	push   0xc
c002051c:	55                   	push   ebp
c002051d:	53                   	push   ebx
c002051e:	57                   	push   edi
c002051f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020526:	e8 03 fc ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002052b:	55                   	push   ebp
c002052c:	53                   	push   ebx
c002052d:	57                   	push   edi
c002052e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020535:	e8 82 fc ff ff       	call   c00201bc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002053a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002053f:	83 c4 24             	add    esp,0x24
c0020542:	55                   	push   ebp
c0020543:	53                   	push   ebx
c0020544:	57                   	push   edi
c0020545:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020549:	e8 f8 fc ff ff       	call   c0020246 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002054e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020552:	6a 3c                	push   0x3c
c0020554:	55                   	push   ebp
c0020555:	53                   	push   ebx
c0020556:	57                   	push   edi
c0020557:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002055e:	e8 cb fb ff ff       	call   c002012e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020563:	0f b6 c4             	movzx  eax,ah
c0020566:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002056a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002056e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020572:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0020577:	83 c4 24             	add    esp,0x24
c002057a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020580:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020587:	74 6c                	je     c00205f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020589:	31 f6                	xor    esi,esi
c002058b:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0020591:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020597:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c002059d:	7e 56                	jle    c00205f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002059f:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205a2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205a9:	39 cb                	cmp    ebx,ecx
c00205ab:	75 45                	jne    c00205f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205ad:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205b4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205b8:	75 38                	jne    c00205f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	68 1d 8d 02 c0       	push   0xc0028d1d
c00205c2:	e8 8c 1c ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00205c7:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c00205cd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205d3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205db:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00205df:	52                   	push   edx
c00205e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00205e4:	53                   	push   ebx
c00205e5:	68 42 8d 02 c0       	push   0xc0028d42
c00205ea:	e8 64 1c ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00205ef:	83 c4 20             	add    esp,0x20
c00205f2:	46                   	inc    esi
c00205f3:	eb 96                	jmp    c002058b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00205f5:	31 d2                	xor    edx,edx
c00205f7:	83 ec 0c             	sub    esp,0xc
c00205fa:	55                   	push   ebp
c00205fb:	53                   	push   ebx
c00205fc:	57                   	push   edi
c00205fd:	52                   	push   edx
c00205fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020602:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020609:	e8 7e fc ff ff       	call   c002028c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002060e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020612:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020616:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002061a:	42                   	inc    edx
c002061b:	83 c4 20             	add    esp,0x20
c002061e:	83 fa 06             	cmp    edx,0x6
c0020621:	75 d4                	jne    c00205f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020623:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020627:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002062b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002062f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020633:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020637:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002063b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020640:	86 e0                	xchg   al,ah
c0020642:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020647:	55                   	push   ebp
c0020648:	53                   	push   ebx
c0020649:	57                   	push   edi
c002064a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002064e:	e8 ad fb ff ff       	call   c0020200 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020653:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020657:	55                   	push   ebp
c0020658:	53                   	push   ebx
c0020659:	57                   	push   edi
c002065a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020661:	e8 10 fb ff ff       	call   c0020176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002066e:	b9 09 00 00 00       	mov    ecx,0x9
c0020673:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020677:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002067b:	fc                   	cld    
c002067c:	89 e7                	mov    edi,esp
c002067e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020680:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020687:	e8 f0 fc ff ff       	call   c002037c <PCI::foundDevice(PCIDeviceInfo)>
c002068c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020692:	5b                   	pop    ebx
c0020693:	5e                   	pop    esi
c0020694:	5f                   	pop    edi
c0020695:	5d                   	pop    ebp
c0020696:	c3                   	ret    
c0020697:	90                   	nop

c0020698 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020698:	55                   	push   ebp
c0020699:	57                   	push   edi
c002069a:	56                   	push   esi
c002069b:	53                   	push   ebx
c002069c:	83 ec 0c             	sub    esp,0xc
c002069f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206a3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206a8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206ad:	6a 00                	push   0x0
c00206af:	56                   	push   esi
c00206b0:	57                   	push   edi
c00206b1:	55                   	push   ebp
c00206b2:	e8 bf fa ff ff       	call   c0020176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206b7:	6a 00                	push   0x0
c00206b9:	56                   	push   esi
c00206ba:	57                   	push   edi
c00206bb:	55                   	push   ebp
c00206bc:	e8 2b fe ff ff       	call   c00204ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206c1:	83 c4 20             	add    esp,0x20
c00206c4:	6a 00                	push   0x0
c00206c6:	56                   	push   esi
c00206c7:	57                   	push   edi
c00206c8:	55                   	push   ebp
c00206c9:	e8 ca fa ff ff       	call   c0020198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	84 c0                	test   al,al
c00206d3:	79 27                	jns    c00206fc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206d5:	bb 01 00 00 00       	mov    ebx,0x1
c00206da:	53                   	push   ebx
c00206db:	56                   	push   esi
c00206dc:	57                   	push   edi
c00206dd:	55                   	push   ebp
c00206de:	e8 93 fa ff ff       	call   c0020176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	66 40                	inc    ax
c00206e8:	74 0c                	je     c00206f6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00206ea:	53                   	push   ebx
c00206eb:	56                   	push   esi
c00206ec:	57                   	push   edi
c00206ed:	55                   	push   ebp
c00206ee:	e8 f9 fd ff ff       	call   c00204ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	43                   	inc    ebx
c00206f7:	83 fb 08             	cmp    ebx,0x8
c00206fa:	75 de                	jne    c00206da <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00206fc:	83 c4 0c             	add    esp,0xc
c00206ff:	5b                   	pop    ebx
c0020700:	5e                   	pop    esi
c0020701:	5f                   	pop    edi
c0020702:	5d                   	pop    ebp
c0020703:	c3                   	ret    

c0020704 <PCI::detect()>:
c0020704:	56                   	push   esi
c0020705:	53                   	push   ebx
c0020706:	53                   	push   ebx
c0020707:	31 db                	xor    ebx,ebx
c0020709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002070d:	6a 00                	push   0x0
c002070f:	6a 00                	push   0x0
c0020711:	6a 00                	push   0x0
c0020713:	56                   	push   esi
c0020714:	e8 7f fa ff ff       	call   c0020198 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020719:	83 c4 10             	add    esp,0x10
c002071c:	a8 80                	test   al,0x80
c002071e:	75 21                	jne    c0020741 <PCI::detect()+0x3d>
c0020720:	51                   	push   ecx
c0020721:	51                   	push   ecx
c0020722:	6a 00                	push   0x0
c0020724:	56                   	push   esi
c0020725:	e8 2e fc ff ff       	call   c0020358 <PCI::checkBus(unsigned char)>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	eb 24                	jmp    c0020753 <PCI::detect()+0x4f>
c002072f:	52                   	push   edx
c0020730:	52                   	push   edx
c0020731:	53                   	push   ebx
c0020732:	43                   	inc    ebx
c0020733:	56                   	push   esi
c0020734:	e8 1f fc ff ff       	call   c0020358 <PCI::checkBus(unsigned char)>
c0020739:	83 c4 10             	add    esp,0x10
c002073c:	83 fb 08             	cmp    ebx,0x8
c002073f:	74 12                	je     c0020753 <PCI::detect()+0x4f>
c0020741:	53                   	push   ebx
c0020742:	6a 00                	push   0x0
c0020744:	6a 00                	push   0x0
c0020746:	56                   	push   esi
c0020747:	e8 2a fa ff ff       	call   c0020176 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002074c:	83 c4 10             	add    esp,0x10
c002074f:	66 40                	inc    ax
c0020751:	74 dc                	je     c002072f <PCI::detect()+0x2b>
c0020753:	58                   	pop    eax
c0020754:	5b                   	pop    ebx
c0020755:	5e                   	pop    esi
c0020756:	c3                   	ret    
c0020757:	90                   	nop

c0020758 <IDE::close(int, int, void*)>:
c0020758:	83 c8 ff             	or     eax,0xffffffff
c002075b:	c3                   	ret    

c002075c <IDE::IDE()>:
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020763:	83 ec 08             	sub    esp,0x8
c0020766:	68 8c 8d 02 c0       	push   0xc0028d8c
c002076b:	50                   	push   eax
c002076c:	e8 3f 32 ff ff       	call   c00139b0 <HardDiskController::HardDiskController(char const*)>
c0020771:	83 c4 10             	add    esp,0x10
c0020774:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c0020779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077d:	89 10                	mov    DWORD PTR [eax],edx
c002077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020783:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002078a:	90                   	nop
c002078b:	83 c4 0c             	add    esp,0xc
c002078e:	c3                   	ret    
c002078f:	90                   	nop

c0020790 <IDE::prepareInterrupt(unsigned char)>:
c0020790:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020795:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020799:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207a1:	c3                   	ret    

c00207a2 <selectDrive(unsigned char, unsigned char)>:
c00207a2:	c3                   	ret    
c00207a3:	90                   	nop

c00207a4 <IDE::getBase(unsigned char)>:
c00207a4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207ad:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207b5:	c3                   	ret    

c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207b6:	55                   	push   ebp
c00207b7:	57                   	push   edi
c00207b8:	56                   	push   esi
c00207b9:	53                   	push   ebx
c00207ba:	83 ec 1c             	sub    esp,0x1c
c00207bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207c5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207c8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207d0:	80 f9 03             	cmp    cl,0x3
c00207d3:	77 51                	ja     c0020826 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207d9:	0f b6 f2             	movzx  esi,dl
c00207dc:	0f b6 db             	movzx  ebx,bl
c00207df:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00207e2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00207e6:	83 ca 80             	or     edx,0xffffff80
c00207e9:	0f b6 d2             	movzx  edx,dl
c00207ec:	52                   	push   edx
c00207ed:	6a 0c                	push   0xc
c00207ef:	56                   	push   esi
c00207f0:	57                   	push   edi
c00207f1:	e8 c0 ff ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207f6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00207fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207ff:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020803:	ee                   	out    dx,al
c0020804:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020809:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002080d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020811:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020815:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002081d:	83 c4 2c             	add    esp,0x2c
c0020820:	5b                   	pop    ebx
c0020821:	5e                   	pop    esi
c0020822:	5f                   	pop    edi
c0020823:	5d                   	pop    ebp
c0020824:	eb 90                	jmp    c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020826:	80 fb 07             	cmp    bl,0x7
c0020829:	77 12                	ja     c002083d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002082b:	0f b6 d2             	movzx  edx,dl
c002082e:	0f b6 db             	movzx  ebx,bl
c0020831:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020839:	89 da                	mov    edx,ebx
c002083b:	eb 2f                	jmp    c002086c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002083d:	80 fb 0d             	cmp    bl,0xd
c0020840:	77 13                	ja     c0020855 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020842:	0f b6 d2             	movzx  edx,dl
c0020845:	0f b6 db             	movzx  ebx,bl
c0020848:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002084f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020853:	eb 17                	jmp    c002086c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020855:	80 fb 15             	cmp    bl,0x15
c0020858:	77 13                	ja     c002086d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002085a:	0f b6 d2             	movzx  edx,dl
c002085d:	0f b6 db             	movzx  ebx,bl
c0020860:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020868:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002086c:	ee                   	out    dx,al
c002086d:	83 c4 1c             	add    esp,0x1c
c0020870:	5b                   	pop    ebx
c0020871:	5e                   	pop    esi
c0020872:	5f                   	pop    edi
c0020873:	5d                   	pop    ebp
c0020874:	c3                   	ret    
c0020875:	90                   	nop

c0020876 <IDE::read(unsigned char, unsigned char)>:
c0020876:	55                   	push   ebp
c0020877:	57                   	push   edi
c0020878:	56                   	push   esi
c0020879:	53                   	push   ebx
c002087a:	83 ec 1c             	sub    esp,0x1c
c002087d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020881:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020885:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020888:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002088c:	3c 03                	cmp    al,0x3
c002088e:	77 43                	ja     c00208d3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0020890:	0f b6 f2             	movzx  esi,dl
c0020893:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020896:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002089a:	83 c8 80             	or     eax,0xffffff80
c002089d:	0f b6 c0             	movzx  eax,al
c00208a0:	50                   	push   eax
c00208a1:	6a 0c                	push   0xc
c00208a3:	56                   	push   esi
c00208a4:	57                   	push   edi
c00208a5:	e8 0c ff ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208aa:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208af:	0f b6 c3             	movzx  eax,bl
c00208b2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208b6:	ec                   	in     al,dx
c00208b7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208bb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208c0:	52                   	push   edx
c00208c1:	6a 0c                	push   0xc
c00208c3:	56                   	push   esi
c00208c4:	57                   	push   edi
c00208c5:	e8 ec fe ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ca:	83 c4 20             	add    esp,0x20
c00208cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208d1:	eb 49                	jmp    c002091c <IDE::read(unsigned char, unsigned char)+0xa6>
c00208d3:	80 fb 07             	cmp    bl,0x7
c00208d6:	77 12                	ja     c00208ea <IDE::read(unsigned char, unsigned char)+0x74>
c00208d8:	0f b6 d2             	movzx  edx,dl
c00208db:	0f b6 c3             	movzx  eax,bl
c00208de:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00208e6:	89 c2                	mov    edx,eax
c00208e8:	eb 31                	jmp    c002091b <IDE::read(unsigned char, unsigned char)+0xa5>
c00208ea:	80 fb 0d             	cmp    bl,0xd
c00208ed:	77 13                	ja     c0020902 <IDE::read(unsigned char, unsigned char)+0x8c>
c00208ef:	0f b6 d2             	movzx  edx,dl
c00208f2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00208f9:	0f b6 d3             	movzx  edx,bl
c00208fc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020900:	eb 19                	jmp    c002091b <IDE::read(unsigned char, unsigned char)+0xa5>
c0020902:	31 c0                	xor    eax,eax
c0020904:	80 fb 15             	cmp    bl,0x15
c0020907:	77 13                	ja     c002091c <IDE::read(unsigned char, unsigned char)+0xa6>
c0020909:	0f b6 d2             	movzx  edx,dl
c002090c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020914:	0f b6 d3             	movzx  edx,bl
c0020917:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002091b:	ec                   	in     al,dx
c002091c:	83 c4 1c             	add    esp,0x1c
c002091f:	5b                   	pop    ebx
c0020920:	5e                   	pop    esi
c0020921:	5f                   	pop    edi
c0020922:	5d                   	pop    ebp
c0020923:	c3                   	ret    

c0020924 <IDE::waitInterrupt(unsigned char)>:
c0020924:	55                   	push   ebp
c0020925:	57                   	push   edi
c0020926:	56                   	push   esi
c0020927:	53                   	push   ebx
c0020928:	31 db                	xor    ebx,ebx
c002092a:	83 ec 0c             	sub    esp,0xc
c002092d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020931:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020936:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002093e:	89 e8                	mov    eax,ebp
c0020940:	84 c0                	test   al,al
c0020942:	75 34                	jne    c0020978 <IDE::waitInterrupt(unsigned char)+0x54>
c0020944:	52                   	push   edx
c0020945:	6a 0c                	push   0xc
c0020947:	56                   	push   esi
c0020948:	57                   	push   edi
c0020949:	e8 28 ff ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c002094e:	83 c4 10             	add    esp,0x10
c0020951:	a8 01                	test   al,0x1
c0020953:	75 2b                	jne    c0020980 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020955:	f6 c3 04             	test   bl,0x4
c0020958:	75 16                	jne    c0020970 <IDE::waitInterrupt(unsigned char)+0x4c>
c002095a:	83 fb 32             	cmp    ebx,0x32
c002095d:	7e 11                	jle    c0020970 <IDE::waitInterrupt(unsigned char)+0x4c>
c002095f:	50                   	push   eax
c0020960:	50                   	push   eax
c0020961:	6a 00                	push   0x0
c0020963:	68 80 96 98 00       	push   0x989680
c0020968:	e8 fd b4 ff ff       	call   c001be6a <nanoSleep(unsigned long long)>
c002096d:	83 c4 10             	add    esp,0x10
c0020970:	83 fb 3c             	cmp    ebx,0x3c
c0020973:	74 0b                	je     c0020980 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020975:	43                   	inc    ebx
c0020976:	eb be                	jmp    c0020936 <IDE::waitInterrupt(unsigned char)+0x12>
c0020978:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020980:	83 c4 0c             	add    esp,0xc
c0020983:	89 e8                	mov    eax,ebp
c0020985:	5b                   	pop    ebx
c0020986:	5e                   	pop    esi
c0020987:	5f                   	pop    edi
c0020988:	5d                   	pop    ebp
c0020989:	c3                   	ret    

c002098a <ideChannel0IRQHandler(regs*, void*)>:
c002098a:	83 ec 10             	sub    esp,0x10
c002098d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020991:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020998:	6a 07                	push   0x7
c002099a:	6a 00                	push   0x0
c002099c:	50                   	push   eax
c002099d:	e8 d4 fe ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c00209a2:	83 c4 1c             	add    esp,0x1c
c00209a5:	c3                   	ret    

c00209a6 <ideChannel1IRQHandler(regs*, void*)>:
c00209a6:	83 ec 10             	sub    esp,0x10
c00209a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209ad:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209b4:	6a 07                	push   0x7
c00209b6:	6a 01                	push   0x1
c00209b8:	50                   	push   eax
c00209b9:	e8 b8 fe ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c00209be:	83 c4 1c             	add    esp,0x1c
c00209c1:	c3                   	ret    

c00209c2 <IDE::enableIRQs(unsigned char, bool)>:
c00209c2:	57                   	push   edi
c00209c3:	56                   	push   esi
c00209c4:	be 04 00 00 00       	mov    esi,0x4
c00209c9:	53                   	push   ebx
c00209ca:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209d3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209d8:	0f 94 c0             	sete   al
c00209db:	d1 e0                	shl    eax,1
c00209dd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00209e4:	0f b6 c0             	movzx  eax,al
c00209e7:	50                   	push   eax
c00209e8:	6a 0c                	push   0xc
c00209ea:	57                   	push   edi
c00209eb:	53                   	push   ebx
c00209ec:	e8 c5 fd ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	50                   	push   eax
c00209f5:	6a 0c                	push   0xc
c00209f7:	57                   	push   edi
c00209f8:	53                   	push   ebx
c00209f9:	e8 78 fe ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	4e                   	dec    esi
c0020a02:	75 f0                	jne    c00209f4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a04:	5b                   	pop    ebx
c0020a05:	5e                   	pop    esi
c0020a06:	5f                   	pop    edi
c0020a07:	c3                   	ret    

c0020a08 <IDE::open(int, int, void*)>:
c0020a08:	55                   	push   ebp
c0020a09:	57                   	push   edi
c0020a0a:	56                   	push   esi
c0020a0b:	53                   	push   ebx
c0020a0c:	83 ec 1c             	sub    esp,0x1c
c0020a0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a13:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a1c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a25:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a2c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a33:	0f 85 b0 02 00 00    	jne    c0020ce9 <IDE::open(int, int, void*)+0x2e1>
c0020a39:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a3f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a43:	83 e0 7f             	and    eax,0x7f
c0020a46:	3c 05                	cmp    al,0x5
c0020a48:	74 04                	je     c0020a4e <IDE::open(int, int, void*)+0x46>
c0020a4a:	3c 0f                	cmp    al,0xf
c0020a4c:	75 32                	jne    c0020a80 <IDE::open(int, int, void*)+0x78>
c0020a4e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a54:	83 e0 fc             	and    eax,0xfffffffc
c0020a57:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a5e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a64:	83 e0 fc             	and    eax,0xfffffffc
c0020a67:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a6e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a74:	83 e0 fc             	and    eax,0xfffffffc
c0020a77:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a7e:	eb 14                	jmp    c0020a94 <IDE::open(int, int, void*)+0x8c>
c0020a80:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020a8a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020a94:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020a9b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020aa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020aa6:	89 c6                	mov    esi,eax
c0020aa8:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020aad:	c1 e6 10             	shl    esi,0x10
c0020ab0:	89 e8                	mov    eax,ebp
c0020ab2:	89 fa                	mov    edx,edi
c0020ab4:	c1 e0 0b             	shl    eax,0xb
c0020ab7:	09 f0                	or     eax,esi
c0020ab9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ac0:	c1 e6 08             	shl    esi,0x8
c0020ac3:	09 c6                	or     esi,eax
c0020ac5:	89 f0                	mov    eax,esi
c0020ac7:	0d 08 00 00 80       	or     eax,0x80000008
c0020acc:	ef                   	out    dx,eax
c0020acd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020ad2:	89 ca                	mov    edx,ecx
c0020ad4:	ed                   	in     eax,dx
c0020ad5:	c1 e8 10             	shr    eax,0x10
c0020ad8:	3d ff ff 00 00       	cmp    eax,0xffff
c0020add:	0f 84 f5 00 00 00    	je     c0020bd8 <IDE::open(int, int, void*)+0x1d0>
c0020ae3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020ae9:	89 fa                	mov    edx,edi
c0020aeb:	89 f0                	mov    eax,esi
c0020aed:	ef                   	out    dx,eax
c0020aee:	b0 fe                	mov    al,0xfe
c0020af0:	89 ca                	mov    edx,ecx
c0020af2:	ee                   	out    dx,al
c0020af3:	89 f0                	mov    eax,esi
c0020af5:	89 fa                	mov    edx,edi
c0020af7:	ef                   	out    dx,eax
c0020af8:	89 ca                	mov    edx,ecx
c0020afa:	ed                   	in     eax,dx
c0020afb:	3c fe                	cmp    al,0xfe
c0020afd:	0f 85 a9 00 00 00    	jne    c0020bac <IDE::open(int, int, void*)+0x1a4>
c0020b03:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0020b09:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b10:	74 33                	je     c0020b45 <IDE::open(int, int, void*)+0x13d>
c0020b12:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b18:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b1c:	40                   	inc    eax
c0020b1d:	83 ec 0c             	sub    esp,0xc
c0020b20:	0f b6 c0             	movzx  eax,al
c0020b23:	50                   	push   eax
c0020b24:	55                   	push   ebp
c0020b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b29:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b2f:	51                   	push   ecx
c0020b30:	e8 97 63 ff ff       	call   c0016ecc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b35:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b3a:	83 c4 1c             	add    esp,0x1c
c0020b3d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b43:	eb 0a                	jmp    c0020b4f <IDE::open(int, int, void*)+0x147>
c0020b45:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b4f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b56:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b5d:	c1 e1 10             	shl    ecx,0x10
c0020b60:	c1 e0 08             	shl    eax,0x8
c0020b63:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b68:	09 c1                	or     ecx,eax
c0020b6a:	89 fa                	mov    edx,edi
c0020b6c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b73:	c1 e0 0b             	shl    eax,0xb
c0020b76:	09 c1                	or     ecx,eax
c0020b78:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020b7e:	89 c8                	mov    eax,ecx
c0020b80:	ef                   	out    dx,eax
c0020b81:	be fc 0c 00 00       	mov    esi,0xcfc
c0020b86:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020b8c:	89 f2                	mov    edx,esi
c0020b8e:	ee                   	out    dx,al
c0020b8f:	89 c8                	mov    eax,ecx
c0020b91:	89 fa                	mov    edx,edi
c0020b93:	ef                   	out    dx,eax
c0020b94:	89 f2                	mov    edx,esi
c0020b96:	ed                   	in     eax,dx
c0020b97:	0f b6 c0             	movzx  eax,al
c0020b9a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020ba0:	74 46                	je     c0020be8 <IDE::open(int, int, void*)+0x1e0>
c0020ba2:	83 ec 0c             	sub    esp,0xc
c0020ba5:	68 a4 8d 02 c0       	push   0xc0028da4
c0020baa:	eb 34                	jmp    c0020be0 <IDE::open(int, int, void*)+0x1d8>
c0020bac:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bb5:	75 17                	jne    c0020bce <IDE::open(int, int, void*)+0x1c6>
c0020bb7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bbc:	74 07                	je     c0020bc5 <IDE::open(int, int, void*)+0x1bd>
c0020bbe:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020bc3:	75 09                	jne    c0020bce <IDE::open(int, int, void*)+0x1c6>
c0020bc5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020bcc:	eb 1a                	jmp    c0020be8 <IDE::open(int, int, void*)+0x1e0>
c0020bce:	83 ec 0c             	sub    esp,0xc
c0020bd1:	68 ac 8d 02 c0       	push   0xc0028dac
c0020bd6:	eb 08                	jmp    c0020be0 <IDE::open(int, int, void*)+0x1d8>
c0020bd8:	83 ec 0c             	sub    esp,0xc
c0020bdb:	68 dd 8d 02 c0       	push   0xc0028ddd
c0020be0:	e8 ec 7d ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020bef:	79 1a                	jns    c0020c0b <IDE::open(int, int, void*)+0x203>
c0020bf1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020bf7:	83 e0 fc             	and    eax,0xfffffffc
c0020bfa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c01:	83 c0 08             	add    eax,0x8
c0020c04:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c0b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c11:	89 c2                	mov    edx,eax
c0020c13:	83 e2 0f             	and    edx,0xf
c0020c16:	66 83 fa 08          	cmp    dx,0x8
c0020c1a:	75 0a                	jne    c0020c26 <IDE::open(int, int, void*)+0x21e>
c0020c1c:	83 e8 02             	sub    eax,0x2
c0020c1f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c26:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c2c:	89 c2                	mov    edx,eax
c0020c2e:	83 e2 0f             	and    edx,0xf
c0020c31:	66 83 fa 08          	cmp    dx,0x8
c0020c35:	75 0a                	jne    c0020c41 <IDE::open(int, int, void*)+0x239>
c0020c37:	83 e8 02             	sub    eax,0x2
c0020c3a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c41:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c48:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c4f:	89 d0                	mov    eax,edx
c0020c51:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c54:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c58:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c5c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c5f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c64:	0f b6 c9             	movzx  ecx,cl
c0020c67:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c6e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c71:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c75:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c79:	8d 50 02             	lea    edx,[eax+0x2]
c0020c7c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020c81:	0f b6 d2             	movzx  edx,dl
c0020c84:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020c8a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c8d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c91:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020c95:	8d 48 03             	lea    ecx,[eax+0x3]
c0020c98:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c9d:	0f b6 c9             	movzx  ecx,cl
c0020ca0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020ca6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020ca9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020cad:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020cb1:	8d 50 04             	lea    edx,[eax+0x4]
c0020cb4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cba:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cbf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020cc6:	66 85 f6             	test   si,si
c0020cc9:	74 3e                	je     c0020d09 <IDE::open(int, int, void*)+0x301>
c0020ccb:	0f b6 d2             	movzx  edx,dl
c0020cce:	83 c0 05             	add    eax,0x5
c0020cd1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cd4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cd8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020cdc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020ce2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020ce7:	eb 20                	jmp    c0020d09 <IDE::open(int, int, void*)+0x301>
c0020ce9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020cf3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020cfd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d04:	e9 02 ff ff ff       	jmp    c0020c0b <IDE::open(int, int, void*)+0x203>
c0020d09:	52                   	push   edx
c0020d0a:	52                   	push   edx
c0020d0b:	6a 00                	push   0x0
c0020d0d:	53                   	push   ebx
c0020d0e:	e8 7d fa ff ff       	call   c0020790 <IDE::prepareInterrupt(unsigned char)>
c0020d13:	59                   	pop    ecx
c0020d14:	5e                   	pop    esi
c0020d15:	6a 01                	push   0x1
c0020d17:	53                   	push   ebx
c0020d18:	e8 73 fa ff ff       	call   c0020790 <IDE::prepareInterrupt(unsigned char)>
c0020d1d:	83 c4 0c             	add    esp,0xc
c0020d20:	6a 00                	push   0x0
c0020d22:	6a 00                	push   0x0
c0020d24:	53                   	push   ebx
c0020d25:	e8 98 fc ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c0020d2a:	83 c4 0c             	add    esp,0xc
c0020d2d:	6a 00                	push   0x0
c0020d2f:	6a 01                	push   0x1
c0020d31:	53                   	push   ebx
c0020d32:	e8 8b fc ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c0020d37:	83 c4 10             	add    esp,0x10
c0020d3a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d41:	74 40                	je     c0020d83 <IDE::open(int, int, void*)+0x37b>
c0020d43:	83 ec 0c             	sub    esp,0xc
c0020d46:	68 07 8e 02 c0       	push   0xc0028e07
c0020d4b:	e8 03 15 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0020d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d53:	6a 01                	push   0x1
c0020d55:	68 8a 09 02 c0       	push   0xc002098a
c0020d5a:	6a 0e                	push   0xe
c0020d5c:	53                   	push   ebx
c0020d5d:	e8 50 28 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d62:	83 c4 14             	add    esp,0x14
c0020d65:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d6b:	53                   	push   ebx
c0020d6c:	6a 01                	push   0x1
c0020d6e:	68 a6 09 02 c0       	push   0xc00209a6
c0020d73:	6a 0f                	push   0xf
c0020d75:	53                   	push   ebx
c0020d76:	e8 37 28 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d7b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020d81:	eb 4a                	jmp    c0020dcd <IDE::open(int, int, void*)+0x3c5>
c0020d83:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020d8d:	50                   	push   eax
c0020d8e:	6a 0f                	push   0xf
c0020d90:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020d96:	68 23 8e 02 c0       	push   0xc0028e23
c0020d9b:	e8 b3 14 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0020da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020da3:	6a 00                	push   0x0
c0020da5:	68 8a 09 02 c0       	push   0xc002098a
c0020daa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020db0:	53                   	push   ebx
c0020db1:	e8 fc 27 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020db6:	83 c4 14             	add    esp,0x14
c0020db9:	53                   	push   ebx
c0020dba:	6a 00                	push   0x0
c0020dbc:	68 a6 09 02 c0       	push   0xc00209a6
c0020dc1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020dc7:	53                   	push   ebx
c0020dc8:	e8 e5 27 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020dcf:	83 c4 20             	add    esp,0x20
c0020dd2:	83 ec 0c             	sub    esp,0xc
c0020dd5:	53                   	push   ebx
c0020dd6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020dd9:	83 c4 0c             	add    esp,0xc
c0020ddc:	6a 07                	push   0x7
c0020dde:	6a 00                	push   0x0
c0020de0:	53                   	push   ebx
c0020de1:	e8 90 fa ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020de6:	83 c4 0c             	add    esp,0xc
c0020de9:	6a 07                	push   0x7
c0020deb:	6a 01                	push   0x1
c0020ded:	53                   	push   ebx
c0020dee:	e8 83 fa ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020df3:	83 c4 0c             	add    esp,0xc
c0020df6:	6a 01                	push   0x1
c0020df8:	6a 00                	push   0x0
c0020dfa:	53                   	push   ebx
c0020dfb:	e8 c2 fb ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c0020e00:	83 c4 0c             	add    esp,0xc
c0020e03:	6a 01                	push   0x1
c0020e05:	6a 01                	push   0x1
c0020e07:	53                   	push   ebx
c0020e08:	e8 b5 fb ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c0020e0d:	83 c4 2c             	add    esp,0x2c
c0020e10:	31 c0                	xor    eax,eax
c0020e12:	5b                   	pop    ebx
c0020e13:	5e                   	pop    esi
c0020e14:	5f                   	pop    edi
c0020e15:	5d                   	pop    ebp
c0020e16:	c3                   	ret    
c0020e17:	90                   	nop

c0020e18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e18:	55                   	push   ebp
c0020e19:	57                   	push   edi
c0020e1a:	56                   	push   esi
c0020e1b:	53                   	push   ebx
c0020e1c:	83 ec 1c             	sub    esp,0x1c
c0020e1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e27:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e2a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e2e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e32:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e36:	80 fa 03             	cmp    dl,0x3
c0020e39:	77 5d                	ja     c0020e98 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e43:	0f b6 db             	movzx  ebx,bl
c0020e46:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e49:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e4d:	83 ca 80             	or     edx,0xffffff80
c0020e50:	0f b6 d2             	movzx  edx,dl
c0020e53:	52                   	push   edx
c0020e54:	6a 0c                	push   0xc
c0020e56:	53                   	push   ebx
c0020e57:	56                   	push   esi
c0020e58:	e8 59 f9 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e5d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e6a:	0f b6 c0             	movzx  eax,al
c0020e6d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e71:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e73:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e78:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020e7c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020e80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020e84:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020e8c:	83 c4 2c             	add    esp,0x2c
c0020e8f:	5b                   	pop    ebx
c0020e90:	5e                   	pop    esi
c0020e91:	5f                   	pop    edi
c0020e92:	5d                   	pop    ebp
c0020e93:	e9 1e f9 ff ff       	jmp    c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e98:	3c 07                	cmp    al,0x7
c0020e9a:	77 10                	ja     c0020eac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020e9c:	0f b6 db             	movzx  ebx,bl
c0020e9f:	0f b6 d0             	movzx  edx,al
c0020ea2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020eaa:	eb 2d                	jmp    c0020ed9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020eac:	3c 0d                	cmp    al,0xd
c0020eae:	77 13                	ja     c0020ec3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020eb0:	0f b6 db             	movzx  ebx,bl
c0020eb3:	0f b6 c0             	movzx  eax,al
c0020eb6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020ebd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020ec1:	eb 16                	jmp    c0020ed9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ec3:	3c 15                	cmp    al,0x15
c0020ec5:	77 14                	ja     c0020edb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020ec7:	0f b6 db             	movzx  ebx,bl
c0020eca:	0f b6 c0             	movzx  eax,al
c0020ecd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020ed5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020ed9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020edb:	83 c4 1c             	add    esp,0x1c
c0020ede:	5b                   	pop    ebx
c0020edf:	5e                   	pop    esi
c0020ee0:	5f                   	pop    edi
c0020ee1:	5d                   	pop    ebp
c0020ee2:	c3                   	ret    
c0020ee3:	90                   	nop

c0020ee4 <IDE::detect()>:
c0020ee4:	55                   	push   ebp
c0020ee5:	57                   	push   edi
c0020ee6:	56                   	push   esi
c0020ee7:	53                   	push   ebx
c0020ee8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020eee:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020ef5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020efc:	0f 85 be 02 00 00    	jne    c00211c0 <IDE::detect()+0x2dc>
c0020f02:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f09:	31 f6                	xor    esi,esi
c0020f0b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f13:	31 ed                	xor    ebp,ebp
c0020f15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f19:	c1 e0 06             	shl    eax,0x6
c0020f1c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f24:	89 e8                	mov    eax,ebp
c0020f26:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f2a:	c1 e0 04             	shl    eax,0x4
c0020f2d:	83 c8 a0             	or     eax,0xffffffa0
c0020f30:	0f b6 c0             	movzx  eax,al
c0020f33:	50                   	push   eax
c0020f34:	6a 06                	push   0x6
c0020f36:	56                   	push   esi
c0020f37:	53                   	push   ebx
c0020f38:	e8 79 f8 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f3d:	83 c4 0c             	add    esp,0xc
c0020f40:	6a 0c                	push   0xc
c0020f42:	56                   	push   esi
c0020f43:	53                   	push   ebx
c0020f44:	e8 2d f9 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f49:	83 c4 0c             	add    esp,0xc
c0020f4c:	6a 0c                	push   0xc
c0020f4e:	56                   	push   esi
c0020f4f:	53                   	push   ebx
c0020f50:	e8 21 f9 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f55:	83 c4 0c             	add    esp,0xc
c0020f58:	6a 0c                	push   0xc
c0020f5a:	56                   	push   esi
c0020f5b:	53                   	push   ebx
c0020f5c:	e8 15 f9 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f61:	83 c4 0c             	add    esp,0xc
c0020f64:	6a 0c                	push   0xc
c0020f66:	56                   	push   esi
c0020f67:	53                   	push   ebx
c0020f68:	e8 09 f9 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f6d:	68 ec 00 00 00       	push   0xec
c0020f72:	6a 07                	push   0x7
c0020f74:	56                   	push   esi
c0020f75:	53                   	push   ebx
c0020f76:	e8 3b f8 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f7b:	83 c4 1c             	add    esp,0x1c
c0020f7e:	6a 0c                	push   0xc
c0020f80:	56                   	push   esi
c0020f81:	53                   	push   ebx
c0020f82:	e8 ef f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f87:	83 c4 0c             	add    esp,0xc
c0020f8a:	6a 0c                	push   0xc
c0020f8c:	56                   	push   esi
c0020f8d:	53                   	push   ebx
c0020f8e:	e8 e3 f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f93:	83 c4 0c             	add    esp,0xc
c0020f96:	6a 0c                	push   0xc
c0020f98:	56                   	push   esi
c0020f99:	53                   	push   ebx
c0020f9a:	e8 d7 f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020f9f:	83 c4 0c             	add    esp,0xc
c0020fa2:	6a 0c                	push   0xc
c0020fa4:	56                   	push   esi
c0020fa5:	53                   	push   ebx
c0020fa6:	e8 cb f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020fab:	83 c4 0c             	add    esp,0xc
c0020fae:	6a 0c                	push   0xc
c0020fb0:	56                   	push   esi
c0020fb1:	53                   	push   ebx
c0020fb2:	e8 bf f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020fb7:	83 c4 10             	add    esp,0x10
c0020fba:	84 c0                	test   al,al
c0020fbc:	0f 84 8b 01 00 00    	je     c002114d <IDE::detect()+0x269>
c0020fc2:	31 ff                	xor    edi,edi
c0020fc4:	50                   	push   eax
c0020fc5:	6a 0c                	push   0xc
c0020fc7:	56                   	push   esi
c0020fc8:	53                   	push   ebx
c0020fc9:	e8 a8 f8 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0020fce:	83 c4 10             	add    esp,0x10
c0020fd1:	a8 01                	test   al,0x1
c0020fd3:	0f 85 8e 01 00 00    	jne    c0021167 <IDE::detect()+0x283>
c0020fd9:	84 c0                	test   al,al
c0020fdb:	78 04                	js     c0020fe1 <IDE::detect()+0xfd>
c0020fdd:	a8 08                	test   al,0x8
c0020fdf:	75 27                	jne    c0021008 <IDE::detect()+0x124>
c0020fe1:	47                   	inc    edi
c0020fe2:	81 ff 17 01 00 00    	cmp    edi,0x117
c0020fe8:	7e da                	jle    c0020fc4 <IDE::detect()+0xe0>
c0020fea:	50                   	push   eax
c0020feb:	50                   	push   eax
c0020fec:	6a 00                	push   0x0
c0020fee:	68 40 4b 4c 00       	push   0x4c4b40
c0020ff3:	e8 72 ae ff ff       	call   c001be6a <nanoSleep(unsigned long long)>
c0020ff8:	83 c4 10             	add    esp,0x10
c0020ffb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021001:	75 c1                	jne    c0020fc4 <IDE::detect()+0xe0>
c0021003:	e9 5f 01 00 00       	jmp    c0021167 <IDE::detect()+0x283>
c0021008:	31 c9                	xor    ecx,ecx
c002100a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002100e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021012:	83 ec 0c             	sub    esp,0xc
c0021015:	68 80 00 00 00       	push   0x80
c002101a:	57                   	push   edi
c002101b:	6a 00                	push   0x0
c002101d:	56                   	push   esi
c002101e:	53                   	push   ebx
c002101f:	e8 f4 fd ff ff       	call   c0020e18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021024:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021029:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002102d:	89 d1                	mov    ecx,edx
c002102f:	c1 e0 06             	shl    eax,0x6
c0021032:	01 d8                	add    eax,ebx
c0021034:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002103b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021042:	89 f2                	mov    edx,esi
c0021044:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002104a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002104e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021054:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021058:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002105f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021067:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002106e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021076:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002107c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021083:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021089:	8d 54 24 58          	lea    edx,[esp+0x58]
c002108d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021091:	83 c4 20             	add    esp,0x20
c0021094:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021097:	83 c0 02             	add    eax,0x2
c002109a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210a0:	83 c7 02             	add    edi,0x2
c00210a3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210a6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210b0:	75 e2                	jne    c0021094 <IDE::detect()+0x1b0>
c00210b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210b6:	c1 e0 06             	shl    eax,0x6
c00210b9:	01 d8                	add    eax,ebx
c00210bb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210c1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210c8:	66 c1 ea 09          	shr    dx,0x9
c00210cc:	83 e2 01             	and    edx,0x1
c00210cf:	84 c9                	test   cl,cl
c00210d1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210d7:	75 2f                	jne    c0021108 <IDE::detect()+0x224>
c00210d9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00210df:	85 c0                	test   eax,eax
c00210e1:	74 66                	je     c0021149 <IDE::detect()+0x265>
c00210e3:	50                   	push   eax
c00210e4:	55                   	push   ebp
c00210e5:	56                   	push   esi
c00210e6:	68 3f 8e 02 c0       	push   0xc0028e3f
c00210eb:	e8 63 11 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00210f0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00210f7:	e8 68 10 ff ff       	call   c0012164 <operator new(unsigned long)>
c00210fc:	89 c7                	mov    edi,eax
c00210fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0021101:	e8 e8 02 00 00       	call   c00213ee <ATA::ATA()>
c0021106:	eb 28                	jmp    c0021130 <IDE::detect()+0x24c>
c0021108:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002110e:	55                   	push   ebp
c002110f:	56                   	push   esi
c0021110:	68 6e 8e 02 c0       	push   0xc0028e6e
c0021115:	e8 39 11 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c002111a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021121:	e8 3e 10 ff ff       	call   c0012164 <operator new(unsigned long)>
c0021126:	89 c7                	mov    edi,eax
c0021128:	89 04 24             	mov    DWORD PTR [esp],eax
c002112b:	e8 ee 08 00 00       	call   c0021a1e <ATAPI::ATAPI()>
c0021130:	5a                   	pop    edx
c0021131:	59                   	pop    ecx
c0021132:	57                   	push   edi
c0021133:	53                   	push   ebx
c0021134:	e8 f5 24 ff ff       	call   c001362e <Device::addChild(Device*)>
c0021139:	8b 07                	mov    eax,DWORD PTR [edi]
c002113b:	53                   	push   ebx
c002113c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021140:	6a 00                	push   0x0
c0021142:	57                   	push   edi
c0021143:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021146:	83 c4 20             	add    esp,0x20
c0021149:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002114d:	4d                   	dec    ebp
c002114e:	74 0a                	je     c002115a <IDE::detect()+0x276>
c0021150:	bd 01 00 00 00       	mov    ebp,0x1
c0021155:	e9 bb fd ff ff       	jmp    c0020f15 <IDE::detect()+0x31>
c002115a:	4e                   	dec    esi
c002115b:	74 63                	je     c00211c0 <IDE::detect()+0x2dc>
c002115d:	be 01 00 00 00       	mov    esi,0x1
c0021162:	e9 ac fd ff ff       	jmp    c0020f13 <IDE::detect()+0x2f>
c0021167:	50                   	push   eax
c0021168:	6a 04                	push   0x4
c002116a:	56                   	push   esi
c002116b:	53                   	push   ebx
c002116c:	e8 05 f7 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021171:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021175:	83 c4 0c             	add    esp,0xc
c0021178:	6a 05                	push   0x5
c002117a:	56                   	push   esi
c002117b:	53                   	push   ebx
c002117c:	e8 f5 f6 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021181:	83 c4 10             	add    esp,0x10
c0021184:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021188:	80 fa 14             	cmp    dl,0x14
c002118b:	75 04                	jne    c0021191 <IDE::detect()+0x2ad>
c002118d:	3c eb                	cmp    al,0xeb
c002118f:	eb 07                	jmp    c0021198 <IDE::detect()+0x2b4>
c0021191:	3c 96                	cmp    al,0x96
c0021193:	75 b8                	jne    c002114d <IDE::detect()+0x269>
c0021195:	80 fa 69             	cmp    dl,0x69
c0021198:	75 b3                	jne    c002114d <IDE::detect()+0x269>
c002119a:	68 a1 00 00 00       	push   0xa1
c002119f:	6a 07                	push   0x7
c00211a1:	56                   	push   esi
c00211a2:	53                   	push   ebx
c00211a3:	e8 0e f6 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211a8:	5f                   	pop    edi
c00211a9:	58                   	pop    eax
c00211aa:	6a 00                	push   0x0
c00211ac:	68 40 42 0f 00       	push   0xf4240
c00211b1:	e8 b4 ac ff ff       	call   c001be6a <nanoSleep(unsigned long long)>
c00211b6:	83 c4 10             	add    esp,0x10
c00211b9:	b1 01                	mov    cl,0x1
c00211bb:	e9 4a fe ff ff       	jmp    c002100a <IDE::detect()+0x126>
c00211c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211c6:	5b                   	pop    ebx
c00211c7:	5e                   	pop    esi
c00211c8:	5f                   	pop    edi
c00211c9:	5d                   	pop    ebp
c00211ca:	c3                   	ret    
c00211cb:	90                   	nop

c00211cc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211cc:	55                   	push   ebp
c00211cd:	57                   	push   edi
c00211ce:	56                   	push   esi
c00211cf:	53                   	push   ebx
c00211d0:	83 ec 1c             	sub    esp,0x1c
c00211d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00211df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00211e3:	88 c3                	mov    bl,al
c00211e5:	84 c0                	test   al,al
c00211e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211eb:	0f 84 67 01 00 00    	je     c0021358 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00211f1:	83 ec 0c             	sub    esp,0xc
c00211f4:	68 9f 8e 02 c0       	push   0xc0028e9f
c00211f9:	e8 55 10 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021205:	3c 01                	cmp    al,0x1
c0021207:	75 17                	jne    c0021220 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	b3 13                	mov    bl,0x13
c002120e:	68 ab 8e 02 c0       	push   0xc0028eab
c0021213:	e8 3b 10 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021218:	83 c4 10             	add    esp,0x10
c002121b:	e9 25 01 00 00       	jmp    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021220:	3c 02                	cmp    al,0x2
c0021222:	0f 85 ef 00 00 00    	jne    c0021317 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021228:	d1 e6                	shl    esi,1
c002122a:	09 ee                	or     esi,ebp
c002122c:	52                   	push   edx
c002122d:	89 f0                	mov    eax,esi
c002122f:	6a 01                	push   0x1
c0021231:	0f b6 f0             	movzx  esi,al
c0021234:	c1 e6 06             	shl    esi,0x6
c0021237:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002123f:	50                   	push   eax
c0021240:	57                   	push   edi
c0021241:	e8 30 f6 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021246:	83 c4 10             	add    esp,0x10
c0021249:	89 c6                	mov    esi,eax
c002124b:	a8 01                	test   al,0x1
c002124d:	74 12                	je     c0021261 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002124f:	83 ec 0c             	sub    esp,0xc
c0021252:	b3 07                	mov    bl,0x7
c0021254:	68 c0 8e 02 c0       	push   0xc0028ec0
c0021259:	e8 f5 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c002125e:	83 c4 10             	add    esp,0x10
c0021261:	f7 c6 02 00 00 00    	test   esi,0x2
c0021267:	74 12                	je     c002127b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021269:	83 ec 0c             	sub    esp,0xc
c002126c:	b3 03                	mov    bl,0x3
c002126e:	68 de 8e 02 c0       	push   0xc0028ede
c0021273:	e8 db 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021278:	83 c4 10             	add    esp,0x10
c002127b:	f7 c6 04 00 00 00    	test   esi,0x4
c0021281:	74 12                	je     c0021295 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021283:	83 ec 0c             	sub    esp,0xc
c0021286:	b3 14                	mov    bl,0x14
c0021288:	68 fe 8e 02 c0       	push   0xc0028efe
c002128d:	e8 c1 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021292:	83 c4 10             	add    esp,0x10
c0021295:	f7 c6 08 00 00 00    	test   esi,0x8
c002129b:	74 12                	je     c00212af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002129d:	83 ec 0c             	sub    esp,0xc
c00212a0:	b3 03                	mov    bl,0x3
c00212a2:	68 de 8e 02 c0       	push   0xc0028ede
c00212a7:	e8 a7 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00212ac:	83 c4 10             	add    esp,0x10
c00212af:	f7 c6 10 00 00 00    	test   esi,0x10
c00212b5:	74 12                	je     c00212c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	b3 15                	mov    bl,0x15
c00212bc:	68 16 8f 02 c0       	push   0xc0028f16
c00212c1:	e8 8d 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00212c6:	83 c4 10             	add    esp,0x10
c00212c9:	f7 c6 20 00 00 00    	test   esi,0x20
c00212cf:	74 12                	je     c00212e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212d1:	83 ec 0c             	sub    esp,0xc
c00212d4:	b3 03                	mov    bl,0x3
c00212d6:	68 de 8e 02 c0       	push   0xc0028ede
c00212db:	e8 73 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	f7 c6 40 00 00 00    	test   esi,0x40
c00212e9:	74 12                	je     c00212fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00212eb:	83 ec 0c             	sub    esp,0xc
c00212ee:	b3 16                	mov    bl,0x16
c00212f0:	68 30 8f 02 c0       	push   0xc0028f30
c00212f5:	e8 59 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00212fa:	83 c4 10             	add    esp,0x10
c00212fd:	89 f0                	mov    eax,esi
c00212ff:	84 c0                	test   al,al
c0021301:	79 42                	jns    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021303:	83 ec 0c             	sub    esp,0xc
c0021306:	b3 0d                	mov    bl,0xd
c0021308:	68 51 8f 02 c0       	push   0xc0028f51
c002130d:	e8 41 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021312:	83 c4 10             	add    esp,0x10
c0021315:	eb 2e                	jmp    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021317:	3c 03                	cmp    al,0x3
c0021319:	75 14                	jne    c002132f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002131b:	83 ec 0c             	sub    esp,0xc
c002131e:	b3 17                	mov    bl,0x17
c0021320:	68 65 8f 02 c0       	push   0xc0028f65
c0021325:	e8 29 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c002132a:	83 c4 10             	add    esp,0x10
c002132d:	eb 16                	jmp    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002132f:	3c 04                	cmp    al,0x4
c0021331:	75 12                	jne    c0021345 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021333:	83 ec 0c             	sub    esp,0xc
c0021336:	b3 08                	mov    bl,0x8
c0021338:	68 7b 8f 02 c0       	push   0xc0028f7b
c002133d:	e8 11 0f ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021342:	83 c4 10             	add    esp,0x10
c0021345:	50                   	push   eax
c0021346:	50                   	push   eax
c0021347:	0f b6 c3             	movzx  eax,bl
c002134a:	50                   	push   eax
c002134b:	68 93 8f 02 c0       	push   0xc0028f93
c0021350:	e8 fe 0e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021355:	83 c4 10             	add    esp,0x10
c0021358:	83 c4 1c             	add    esp,0x1c
c002135b:	88 d8                	mov    al,bl
c002135d:	5b                   	pop    ebx
c002135e:	5e                   	pop    esi
c002135f:	5f                   	pop    edi
c0021360:	5d                   	pop    ebp
c0021361:	c3                   	ret    

c0021362 <IDE::polling(unsigned char, unsigned int)>:
c0021362:	57                   	push   edi
c0021363:	56                   	push   esi
c0021364:	53                   	push   ebx
c0021365:	bb 04 00 00 00       	mov    ebx,0x4
c002136a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002136e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021373:	52                   	push   edx
c0021374:	6a 0c                	push   0xc
c0021376:	56                   	push   esi
c0021377:	57                   	push   edi
c0021378:	e8 f9 f4 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	4b                   	dec    ebx
c0021381:	75 f0                	jne    c0021373 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021383:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021388:	50                   	push   eax
c0021389:	6a 0c                	push   0xc
c002138b:	56                   	push   esi
c002138c:	57                   	push   edi
c002138d:	e8 e4 f4 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021392:	83 c4 10             	add    esp,0x10
c0021395:	a8 01                	test   al,0x1
c0021397:	74 12                	je     c00213ab <IDE::polling(unsigned char, unsigned int)+0x49>
c0021399:	83 ec 0c             	sub    esp,0xc
c002139c:	68 ad 8f 02 c0       	push   0xc0028fad
c00213a1:	e8 ad 0e ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00213a6:	83 c4 10             	add    esp,0x10
c00213a9:	eb 17                	jmp    c00213c2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213ab:	a8 20                	test   al,0x20
c00213ad:	75 0f                	jne    c00213be <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213af:	4b                   	dec    ebx
c00213b0:	74 10                	je     c00213c2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213b2:	84 c0                	test   al,al
c00213b4:	78 d2                	js     c0021388 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213b6:	a8 08                	test   al,0x8
c00213b8:	74 ce                	je     c0021388 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213ba:	31 c0                	xor    eax,eax
c00213bc:	eb 06                	jmp    c00213c4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213be:	b0 01                	mov    al,0x1
c00213c0:	eb 02                	jmp    c00213c4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213c2:	b0 02                	mov    al,0x2
c00213c4:	5b                   	pop    ebx
c00213c5:	5e                   	pop    esi
c00213c6:	5f                   	pop    edi
c00213c7:	c3                   	ret    

c00213c8 <ATA::close(int, int, void*)>:
c00213c8:	83 ec 0c             	sub    esp,0xc
c00213cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213d5:	85 c0                	test   eax,eax
c00213d7:	74 0c                	je     c00213e5 <ATA::close(int, int, void*)+0x1d>
c00213d9:	83 ec 0c             	sub    esp,0xc
c00213dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00213de:	50                   	push   eax
c00213df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00213e2:	83 c4 10             	add    esp,0x10
c00213e5:	31 c0                	xor    eax,eax
c00213e7:	83 c4 0c             	add    esp,0xc
c00213ea:	c3                   	ret    
c00213eb:	90                   	nop

c00213ec <ATA::powerSaving(PowerSavingLevel)>:
c00213ec:	c3                   	ret    
c00213ed:	90                   	nop

c00213ee <ATA::ATA()>:
c00213ee:	83 ec 0c             	sub    esp,0xc
c00213f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f5:	83 ec 04             	sub    esp,0x4
c00213f8:	68 00 02 00 00       	push   0x200
c00213fd:	68 f0 8f 02 c0       	push   0xc0028ff0
c0021402:	50                   	push   eax
c0021403:	e8 2c 26 ff ff       	call   c0013a34 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	ba 1c 90 02 c0       	mov    edx,0xc002901c
c0021410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021414:	89 10                	mov    DWORD PTR [eax],edx
c0021416:	90                   	nop
c0021417:	83 c4 0c             	add    esp,0xc
c002141a:	c3                   	ret    
c002141b:	90                   	nop

c002141c <ATA::flush(bool)>:
c002141c:	53                   	push   ebx
c002141d:	83 ec 08             	sub    esp,0x8
c0021420:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021425:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021429:	19 c0                	sbb    eax,eax
c002142b:	83 e0 fd             	and    eax,0xfffffffd
c002142e:	05 ea 00 00 00       	add    eax,0xea
c0021433:	50                   	push   eax
c0021434:	6a 07                	push   0x7
c0021436:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002143d:	50                   	push   eax
c002143e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021444:	e8 6d f3 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021449:	83 c4 0c             	add    esp,0xc
c002144c:	6a 00                	push   0x0
c002144e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021455:	50                   	push   eax
c0021456:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002145c:	e8 01 ff ff ff       	call   c0021362 <IDE::polling(unsigned char, unsigned int)>
c0021461:	83 c4 18             	add    esp,0x18
c0021464:	5b                   	pop    ebx
c0021465:	c3                   	ret    

c0021466 <ATA::readyForCommand()>:
c0021466:	56                   	push   esi
c0021467:	53                   	push   ebx
c0021468:	31 db                	xor    ebx,ebx
c002146a:	50                   	push   eax
c002146b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002146f:	50                   	push   eax
c0021470:	6a 0c                	push   0xc
c0021472:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021479:	50                   	push   eax
c002147a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021480:	e8 f1 f3 ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	a8 88                	test   al,0x88
c002148a:	74 23                	je     c00214af <ATA::readyForCommand()+0x49>
c002148c:	43                   	inc    ebx
c002148d:	83 fb 63             	cmp    ebx,0x63
c0021490:	7e dd                	jle    c002146f <ATA::readyForCommand()+0x9>
c0021492:	51                   	push   ecx
c0021493:	51                   	push   ecx
c0021494:	6a 00                	push   0x0
c0021496:	68 40 42 0f 00       	push   0xf4240
c002149b:	e8 ca a9 ff ff       	call   c001be6a <nanoSleep(unsigned long long)>
c00214a0:	83 c4 10             	add    esp,0x10
c00214a3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214a9:	75 c4                	jne    c002146f <ATA::readyForCommand()+0x9>
c00214ab:	31 c0                	xor    eax,eax
c00214ad:	eb 02                	jmp    c00214b1 <ATA::readyForCommand()+0x4b>
c00214af:	b0 01                	mov    al,0x1
c00214b1:	5a                   	pop    edx
c00214b2:	5b                   	pop    ebx
c00214b3:	5e                   	pop    esi
c00214b4:	c3                   	ret    
c00214b5:	90                   	nop

c00214b6 <ATA::access(unsigned long long, int, void*, bool)>:
c00214b6:	55                   	push   ebp
c00214b7:	57                   	push   edi
c00214b8:	56                   	push   esi
c00214b9:	53                   	push   ebx
c00214ba:	83 ec 2c             	sub    esp,0x2c
c00214bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214c5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214cd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214d1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00214df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00214e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214ed:	c1 e0 06             	shl    eax,0x6
c00214f0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00214f8:	74 5d                	je     c0021557 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00214fa:	89 fa                	mov    edx,edi
c00214fc:	89 f0                	mov    eax,esi
c00214fe:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021502:	c1 ea 1c             	shr    edx,0x1c
c0021505:	89 d1                	mov    ecx,edx
c0021507:	09 c1                	or     ecx,eax
c0021509:	74 25                	je     c0021530 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002150b:	31 ed                	xor    ebp,ebp
c002150d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021514:	89 fa                	mov    edx,edi
c0021516:	89 f0                	mov    eax,esi
c0021518:	0f ad d0             	shrd   eax,edx,cl
c002151b:	d3 ea                	shr    edx,cl
c002151d:	f6 c1 20             	test   cl,0x20
c0021520:	74 02                	je     c0021524 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021522:	89 d0                	mov    eax,edx
c0021524:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021528:	45                   	inc    ebp
c0021529:	83 fd 06             	cmp    ebp,0x6
c002152c:	75 df                	jne    c002150d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002152e:	eb 76                	jmp    c00215a6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021530:	89 f0                	mov    eax,esi
c0021532:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021537:	89 fa                	mov    edx,edi
c0021539:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021540:	0f ac d0 10          	shrd   eax,edx,0x10
c0021544:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021549:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002154d:	c1 ee 18             	shr    esi,0x18
c0021550:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021555:	eb 56                	jmp    c00215ad <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021557:	6a 00                	push   0x0
c0021559:	6a 3f                	push   0x3f
c002155b:	57                   	push   edi
c002155c:	56                   	push   esi
c002155d:	e8 0a 20 00 00       	call   c002356c <__umoddi3>
c0021562:	83 c4 10             	add    esp,0x10
c0021565:	40                   	inc    eax
c0021566:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002156a:	6a 00                	push   0x0
c002156c:	68 f0 03 00 00       	push   0x3f0
c0021571:	57                   	push   edi
c0021572:	56                   	push   esi
c0021573:	e8 f4 1e 00 00       	call   c002346c <__udivdi3>
c0021578:	83 c4 10             	add    esp,0x10
c002157b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021580:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021587:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002158c:	6a 00                	push   0x0
c002158e:	6a 3f                	push   0x3f
c0021590:	57                   	push   edi
c0021591:	56                   	push   esi
c0021592:	e8 d5 1e 00 00       	call   c002346c <__udivdi3>
c0021597:	83 c4 10             	add    esp,0x10
c002159a:	89 c6                	mov    esi,eax
c002159c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215a1:	83 e6 0f             	and    esi,0xf
c00215a4:	eb 07                	jmp    c00215ad <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215a6:	31 f6                	xor    esi,esi
c00215a8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215ad:	bf 01 00 00 00       	mov    edi,0x1
c00215b2:	50                   	push   eax
c00215b3:	6a 00                	push   0x0
c00215b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215bc:	50                   	push   eax
c00215bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215c1:	e8 fc f3 ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c00215c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215c9:	e8 98 fe ff ff       	call   c0021466 <ATA::readyForCommand()>
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	84 c0                	test   al,al
c00215d3:	0f 84 50 02 00 00    	je     c0021829 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215d9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00215df:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00215e5:	c1 e0 04             	shl    eax,0x4
c00215e8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00215ef:	09 c6                	or     esi,eax
c00215f1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00215f6:	75 05                	jne    c00215fd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00215f8:	83 ce a0             	or     esi,0xffffffa0
c00215fb:	eb 03                	jmp    c0021600 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00215fd:	83 ce e0             	or     esi,0xffffffe0
c0021600:	89 f0                	mov    eax,esi
c0021602:	0f b6 f0             	movzx  esi,al
c0021605:	56                   	push   esi
c0021606:	6a 06                	push   0x6
c0021608:	51                   	push   ecx
c0021609:	52                   	push   edx
c002160a:	e8 a7 f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002160f:	83 c4 10             	add    esp,0x10
c0021612:	6a 00                	push   0x0
c0021614:	6a 01                	push   0x1
c0021616:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002161d:	50                   	push   eax
c002161e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021624:	e8 8d f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021629:	83 c4 10             	add    esp,0x10
c002162c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021631:	75 6e                	jne    c00216a1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021633:	6a 00                	push   0x0
c0021635:	6a 08                	push   0x8
c0021637:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002163e:	50                   	push   eax
c002163f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021645:	e8 6c f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002164a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002164f:	50                   	push   eax
c0021650:	6a 09                	push   0x9
c0021652:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021659:	50                   	push   eax
c002165a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021660:	e8 51 f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021665:	83 c4 20             	add    esp,0x20
c0021668:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002166d:	50                   	push   eax
c002166e:	6a 0a                	push   0xa
c0021670:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021677:	50                   	push   eax
c0021678:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002167e:	e8 33 f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021683:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021688:	50                   	push   eax
c0021689:	6a 0b                	push   0xb
c002168b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021692:	50                   	push   eax
c0021693:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021699:	e8 18 f1 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002169e:	83 c4 20             	add    esp,0x20
c00216a1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216a6:	50                   	push   eax
c00216a7:	6a 02                	push   0x2
c00216a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216b0:	50                   	push   eax
c00216b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216b7:	e8 fa f0 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216bc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216c1:	50                   	push   eax
c00216c2:	6a 03                	push   0x3
c00216c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216cb:	50                   	push   eax
c00216cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216d2:	e8 df f0 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216d7:	83 c4 20             	add    esp,0x20
c00216da:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00216df:	50                   	push   eax
c00216e0:	6a 04                	push   0x4
c00216e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216e9:	50                   	push   eax
c00216ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216f0:	e8 c1 f0 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00216fa:	50                   	push   eax
c00216fb:	6a 05                	push   0x5
c00216fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021704:	50                   	push   eax
c0021705:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002170b:	e8 a6 f0 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021710:	83 c4 20             	add    esp,0x20
c0021713:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021718:	0f 94 c0             	sete   al
c002171b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021720:	74 09                	je     c002172b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021722:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021729:	eb 07                	jmp    c0021732 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002172b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021732:	0f b6 c0             	movzx  eax,al
c0021735:	50                   	push   eax
c0021736:	6a 07                	push   0x7
c0021738:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002173f:	50                   	push   eax
c0021740:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021746:	e8 6b f0 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002174b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002174f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	85 f6                	test   esi,esi
c0021758:	0f 84 ac 00 00 00    	je     c002180a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002175e:	50                   	push   eax
c002175f:	6a 01                	push   0x1
c0021761:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021768:	50                   	push   eax
c0021769:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002176f:	e8 ee fb ff ff       	call   c0021362 <IDE::polling(unsigned char, unsigned int)>
c0021774:	83 c4 10             	add    esp,0x10
c0021777:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002177d:	84 c0                	test   al,al
c002177f:	74 20                	je     c00217a1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021781:	0f b6 f8             	movzx  edi,al
c0021784:	0f b6 d2             	movzx  edx,dl
c0021787:	57                   	push   edi
c0021788:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002178f:	50                   	push   eax
c0021790:	52                   	push   edx
c0021791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021797:	e8 30 fa ff ff       	call   c00211cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002179c:	e9 85 00 00 00       	jmp    c0021826 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217a6:	74 41                	je     c00217e9 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217a8:	31 c9                	xor    ecx,ecx
c00217aa:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217ae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217b2:	50                   	push   eax
c00217b3:	50                   	push   eax
c00217b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217bb:	50                   	push   eax
c00217bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217c2:	e8 dd ef ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c00217c7:	89 c2                	mov    edx,eax
c00217c9:	89 e8                	mov    eax,ebp
c00217cb:	66 ef                	out    dx,ax
c00217cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217d1:	83 c4 10             	add    esp,0x10
c00217d4:	41                   	inc    ecx
c00217d5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217db:	75 cd                	jne    c00217aa <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00217dd:	4e                   	dec    esi
c00217de:	81 c7 00 02 00 00    	add    edi,0x200
c00217e4:	e9 6d ff ff ff       	jmp    c0021756 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00217e9:	0f b6 d2             	movzx  edx,dl
c00217ec:	51                   	push   ecx
c00217ed:	51                   	push   ecx
c00217ee:	52                   	push   edx
c00217ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217f5:	e8 aa ef ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c00217fa:	b9 00 01 00 00       	mov    ecx,0x100
c00217ff:	89 c2                	mov    edx,eax
c0021801:	fc                   	cld    
c0021802:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021805:	83 c4 10             	add    esp,0x10
c0021808:	eb d3                	jmp    c00217dd <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002180a:	31 ff                	xor    edi,edi
c002180c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021811:	74 16                	je     c0021829 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021813:	50                   	push   eax
c0021814:	50                   	push   eax
c0021815:	31 c0                	xor    eax,eax
c0021817:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002181c:	0f 94 c0             	sete   al
c002181f:	50                   	push   eax
c0021820:	53                   	push   ebx
c0021821:	e8 f6 fb ff ff       	call   c002141c <ATA::flush(bool)>
c0021826:	83 c4 10             	add    esp,0x10
c0021829:	83 c4 2c             	add    esp,0x2c
c002182c:	89 f8                	mov    eax,edi
c002182e:	5b                   	pop    ebx
c002182f:	5e                   	pop    esi
c0021830:	5f                   	pop    edi
c0021831:	5d                   	pop    ebp
c0021832:	c3                   	ret    
c0021833:	90                   	nop

c0021834 <ATA::read(unsigned long long, int, void*)>:
c0021834:	57                   	push   edi
c0021835:	b8 04 00 00 00       	mov    eax,0x4
c002183a:	56                   	push   esi
c002183b:	53                   	push   ebx
c002183c:	83 ec 10             	sub    esp,0x10
c002183f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021843:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021847:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002184a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002184e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021852:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021858:	77 3b                	ja     c0021895 <ATA::read(unsigned long long, int, void*)+0x61>
c002185a:	b8 06 00 00 00       	mov    eax,0x6
c002185f:	85 d2                	test   edx,edx
c0021861:	74 32                	je     c0021895 <ATA::read(unsigned long long, int, void*)+0x61>
c0021863:	50                   	push   eax
c0021864:	50                   	push   eax
c0021865:	6a 00                	push   0x0
c0021867:	52                   	push   edx
c0021868:	53                   	push   ebx
c0021869:	57                   	push   edi
c002186a:	56                   	push   esi
c002186b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002186f:	e8 42 fc ff ff       	call   c00214b6 <ATA::access(unsigned long long, int, void*, bool)>
c0021874:	83 c4 20             	add    esp,0x20
c0021877:	85 c0                	test   eax,eax
c0021879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002187d:	75 11                	jne    c0021890 <ATA::read(unsigned long long, int, void*)+0x5c>
c002187f:	01 1d 28 c7 02 c0    	add    DWORD PTR ds:0xc002c728,ebx
c0021885:	e8 7e e8 fe ff       	call   c0010108 <VgaText::updateDiskUsage()>
c002188a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002188e:	eb 05                	jmp    c0021895 <ATA::read(unsigned long long, int, void*)+0x61>
c0021890:	b8 01 00 00 00       	mov    eax,0x1
c0021895:	83 c4 10             	add    esp,0x10
c0021898:	5b                   	pop    ebx
c0021899:	5e                   	pop    esi
c002189a:	5f                   	pop    edi
c002189b:	c3                   	ret    

c002189c <ATA::write(unsigned long long, int, void*)>:
c002189c:	57                   	push   edi
c002189d:	b8 04 00 00 00       	mov    eax,0x4
c00218a2:	56                   	push   esi
c00218a3:	53                   	push   ebx
c00218a4:	83 ec 10             	sub    esp,0x10
c00218a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218ab:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218af:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218ba:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218c0:	77 3b                	ja     c00218fd <ATA::write(unsigned long long, int, void*)+0x61>
c00218c2:	b8 06 00 00 00       	mov    eax,0x6
c00218c7:	85 d2                	test   edx,edx
c00218c9:	74 32                	je     c00218fd <ATA::write(unsigned long long, int, void*)+0x61>
c00218cb:	50                   	push   eax
c00218cc:	50                   	push   eax
c00218cd:	6a 01                	push   0x1
c00218cf:	52                   	push   edx
c00218d0:	53                   	push   ebx
c00218d1:	57                   	push   edi
c00218d2:	56                   	push   esi
c00218d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218d7:	e8 da fb ff ff       	call   c00214b6 <ATA::access(unsigned long long, int, void*, bool)>
c00218dc:	83 c4 20             	add    esp,0x20
c00218df:	85 c0                	test   eax,eax
c00218e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218e5:	75 11                	jne    c00218f8 <ATA::write(unsigned long long, int, void*)+0x5c>
c00218e7:	01 1d 24 c7 02 c0    	add    DWORD PTR ds:0xc002c724,ebx
c00218ed:	e8 16 e8 fe ff       	call   c0010108 <VgaText::updateDiskUsage()>
c00218f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f6:	eb 05                	jmp    c00218fd <ATA::write(unsigned long long, int, void*)+0x61>
c00218f8:	b8 01 00 00 00       	mov    eax,0x1
c00218fd:	83 c4 10             	add    esp,0x10
c0021900:	5b                   	pop    ebx
c0021901:	5e                   	pop    esi
c0021902:	5f                   	pop    edi
c0021903:	c3                   	ret    

c0021904 <ATA::detectCHS()>:
c0021904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021908:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002190e:	c1 e0 06             	shl    eax,0x6
c0021911:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021917:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021921:	c7 44 24 04 ff 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fff
c0021929:	e9 a3 70 ff ff       	jmp    c00189d1 <Krnl::panic(char const*)>

c002192e <ATA::open(int, int, void*)>:
c002192e:	53                   	push   ebx
c002192f:	83 ec 08             	sub    esp,0x8
c0021932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021936:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002193a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002193e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021944:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002194a:	c1 e0 06             	shl    eax,0x6
c002194d:	01 d0                	add    eax,edx
c002194f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021956:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002195c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021963:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002196d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021973:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002197a:	75 0c                	jne    c0021988 <ATA::open(int, int, void*)+0x5a>
c002197c:	83 ec 0c             	sub    esp,0xc
c002197f:	53                   	push   ebx
c0021980:	e8 7f ff ff ff       	call   c0021904 <ATA::detectCHS()>
c0021985:	83 c4 10             	add    esp,0x10
c0021988:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002198e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021994:	c1 e0 06             	shl    eax,0x6
c0021997:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002199e:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219a8:	d1 e8                	shr    eax,1
c00219aa:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219b0:	6a 04                	push   0x4
c00219b2:	6a 0c                	push   0xc
c00219b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219bb:	50                   	push   eax
c00219bc:	52                   	push   edx
c00219bd:	e8 f4 ed ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219c2:	90                   	nop
c00219c3:	90                   	nop
c00219c4:	6a 00                	push   0x0
c00219c6:	6a 0c                	push   0xc
c00219c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219cf:	50                   	push   eax
c00219d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219d6:	e8 db ed ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219db:	83 c4 14             	add    esp,0x14
c00219de:	53                   	push   ebx
c00219df:	e8 b8 20 ff ff       	call   c0013a9c <PhysicalDisk::startCache()>
c00219e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219e7:	e8 50 40 ff ff       	call   c0015a3c <createPartitionsForDisk(PhysicalDisk*)>
c00219ec:	31 c0                	xor    eax,eax
c00219ee:	83 c4 18             	add    esp,0x18
c00219f1:	5b                   	pop    ebx
c00219f2:	c3                   	ret    
c00219f3:	90                   	nop

c00219f4 <ATAPI::write(unsigned long long, int, void*)>:
c00219f4:	b8 03 00 00 00       	mov    eax,0x3
c00219f9:	c3                   	ret    

c00219fa <ATAPI::close(int, int, void*)>:
c00219fa:	83 ec 0c             	sub    esp,0xc
c00219fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a07:	85 c0                	test   eax,eax
c0021a09:	74 0c                	je     c0021a17 <ATAPI::close(int, int, void*)+0x1d>
c0021a0b:	83 ec 0c             	sub    esp,0xc
c0021a0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a10:	50                   	push   eax
c0021a11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a14:	83 c4 10             	add    esp,0x10
c0021a17:	31 c0                	xor    eax,eax
c0021a19:	83 c4 0c             	add    esp,0xc
c0021a1c:	c3                   	ret    
c0021a1d:	90                   	nop

c0021a1e <ATAPI::ATAPI()>:
c0021a1e:	83 ec 0c             	sub    esp,0xc
c0021a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a25:	83 ec 04             	sub    esp,0x4
c0021a28:	68 00 08 00 00       	push   0x800
c0021a2d:	68 48 90 02 c0       	push   0xc0029048
c0021a32:	50                   	push   eax
c0021a33:	e8 fc 1f ff ff       	call   c0013a34 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	ba 88 90 02 c0       	mov    edx,0xc0029088
c0021a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a44:	89 10                	mov    DWORD PTR [eax],edx
c0021a46:	90                   	nop
c0021a47:	83 c4 0c             	add    esp,0xc
c0021a4a:	c3                   	ret    
c0021a4b:	90                   	nop

c0021a4c <ATAPI::readyForCommand()>:
c0021a4c:	56                   	push   esi
c0021a4d:	53                   	push   ebx
c0021a4e:	31 db                	xor    ebx,ebx
c0021a50:	50                   	push   eax
c0021a51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a55:	50                   	push   eax
c0021a56:	6a 0c                	push   0xc
c0021a58:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a5f:	50                   	push   eax
c0021a60:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a66:	e8 0b ee ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021a6b:	83 c4 10             	add    esp,0x10
c0021a6e:	a8 88                	test   al,0x88
c0021a70:	74 23                	je     c0021a95 <ATAPI::readyForCommand()+0x49>
c0021a72:	43                   	inc    ebx
c0021a73:	83 fb 63             	cmp    ebx,0x63
c0021a76:	7e dd                	jle    c0021a55 <ATAPI::readyForCommand()+0x9>
c0021a78:	51                   	push   ecx
c0021a79:	51                   	push   ecx
c0021a7a:	6a 00                	push   0x0
c0021a7c:	68 40 42 0f 00       	push   0xf4240
c0021a81:	e8 e4 a3 ff ff       	call   c001be6a <nanoSleep(unsigned long long)>
c0021a86:	83 c4 10             	add    esp,0x10
c0021a89:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021a8f:	75 c4                	jne    c0021a55 <ATAPI::readyForCommand()+0x9>
c0021a91:	31 c0                	xor    eax,eax
c0021a93:	eb 02                	jmp    c0021a97 <ATAPI::readyForCommand()+0x4b>
c0021a95:	b0 01                	mov    al,0x1
c0021a97:	5a                   	pop    edx
c0021a98:	5b                   	pop    ebx
c0021a99:	5e                   	pop    esi
c0021a9a:	c3                   	ret    
c0021a9b:	90                   	nop

c0021a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021a9c:	55                   	push   ebp
c0021a9d:	57                   	push   edi
c0021a9e:	56                   	push   esi
c0021a9f:	53                   	push   ebx
c0021aa0:	83 ec 20             	sub    esp,0x20
c0021aa3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021aa7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021aab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021aaf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ab3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ab7:	6a 01                	push   0x1
c0021ab9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ac0:	50                   	push   eax
c0021ac1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ac7:	e8 f6 ee ff ff       	call   c00209c2 <IDE::enableIRQs(unsigned char, bool)>
c0021acc:	5e                   	pop    esi
c0021acd:	58                   	pop    eax
c0021ace:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ad5:	50                   	push   eax
c0021ad6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021adc:	e8 af ec ff ff       	call   c0020790 <IDE::prepareInterrupt(unsigned char)>
c0021ae1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021ae4:	e8 63 ff ff ff       	call   c0021a4c <ATAPI::readyForCommand()>
c0021ae9:	83 c4 10             	add    esp,0x10
c0021aec:	84 c0                	test   al,al
c0021aee:	75 0a                	jne    c0021afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021af0:	bb 01 00 00 00       	mov    ebx,0x1
c0021af5:	e9 57 02 00 00       	jmp    c0021d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021afa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b00:	c1 e0 04             	shl    eax,0x4
c0021b03:	0f b6 c0             	movzx  eax,al
c0021b06:	50                   	push   eax
c0021b07:	6a 06                	push   0x6
c0021b09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b10:	50                   	push   eax
c0021b11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b17:	e8 9a ec ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b1c:	6a 00                	push   0x0
c0021b1e:	6a 01                	push   0x1
c0021b20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b27:	50                   	push   eax
c0021b28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b2e:	e8 83 ec ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b33:	83 c4 20             	add    esp,0x20
c0021b36:	0f b6 c3             	movzx  eax,bl
c0021b39:	0f b6 df             	movzx  ebx,bh
c0021b3c:	50                   	push   eax
c0021b3d:	6a 04                	push   0x4
c0021b3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b46:	50                   	push   eax
c0021b47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b4d:	e8 64 ec ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b52:	53                   	push   ebx
c0021b53:	6a 05                	push   0x5
c0021b55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b5c:	50                   	push   eax
c0021b5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b63:	e8 4e ec ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b68:	83 c4 20             	add    esp,0x20
c0021b6b:	68 a0 00 00 00       	push   0xa0
c0021b70:	6a 07                	push   0x7
c0021b72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b79:	50                   	push   eax
c0021b7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b80:	e8 31 ec ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b85:	83 c4 0c             	add    esp,0xc
c0021b88:	6a 01                	push   0x1
c0021b8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b91:	50                   	push   eax
c0021b92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b98:	e8 c5 f7 ff ff       	call   c0021362 <IDE::polling(unsigned char, unsigned int)>
c0021b9d:	83 c4 10             	add    esp,0x10
c0021ba0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021ba6:	84 c0                	test   al,al
c0021ba8:	74 23                	je     c0021bcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021baa:	0f b6 d8             	movzx  ebx,al
c0021bad:	0f b6 d2             	movzx  edx,dl
c0021bb0:	53                   	push   ebx
c0021bb1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bb8:	50                   	push   eax
c0021bb9:	52                   	push   edx
c0021bba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bc0:	e8 07 f6 ff ff       	call   c00211cc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	e9 84 01 00 00       	jmp    c0021d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021bcd:	0f b6 d2             	movzx  edx,dl
c0021bd0:	53                   	push   ebx
c0021bd1:	53                   	push   ebx
c0021bd2:	52                   	push   edx
c0021bd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bd9:	e8 c6 eb ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c0021bde:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021be2:	b9 06 00 00 00       	mov    ecx,0x6
c0021be7:	89 c2                	mov    edx,eax
c0021be9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021bec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021bf0:	83 c4 10             	add    esp,0x10
c0021bf3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021bf9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c00:	85 db                	test   ebx,ebx
c0021c02:	0f 84 ec 00 00 00    	je     c0021cf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c08:	51                   	push   ecx
c0021c09:	51                   	push   ecx
c0021c0a:	52                   	push   edx
c0021c0b:	50                   	push   eax
c0021c0c:	e8 13 ed ff ff       	call   c0020924 <IDE::waitInterrupt(unsigned char)>
c0021c11:	83 c4 10             	add    esp,0x10
c0021c14:	84 c0                	test   al,al
c0021c16:	0f 84 d4 fe ff ff    	je     c0021af0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c1c:	56                   	push   esi
c0021c1d:	56                   	push   esi
c0021c1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c25:	50                   	push   eax
c0021c26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c2c:	e8 5f eb ff ff       	call   c0020790 <IDE::prepareInterrupt(unsigned char)>
c0021c31:	83 c4 0c             	add    esp,0xc
c0021c34:	6a 04                	push   0x4
c0021c36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c3d:	50                   	push   eax
c0021c3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c44:	e8 2d ec ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021c49:	83 c4 0c             	add    esp,0xc
c0021c4c:	89 c6                	mov    esi,eax
c0021c4e:	6a 05                	push   0x5
c0021c50:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c57:	50                   	push   eax
c0021c58:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c5e:	e8 13 ec ff ff       	call   c0020876 <IDE::read(unsigned char, unsigned char)>
c0021c63:	89 f1                	mov    ecx,esi
c0021c65:	0f b6 c0             	movzx  eax,al
c0021c68:	0f b6 f1             	movzx  esi,cl
c0021c6b:	c1 e0 08             	shl    eax,0x8
c0021c6e:	09 c6                	or     esi,eax
c0021c70:	d1 fe                	sar    esi,1
c0021c72:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021c7e:	74 41                	je     c0021cc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021c80:	31 c9                	xor    ecx,ecx
c0021c82:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c88:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c8f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021c93:	75 0a                	jne    c0021c9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021c95:	01 c9                	add    ecx,ecx
c0021c97:	01 cd                	add    ebp,ecx
c0021c99:	4b                   	dec    ebx
c0021c9a:	e9 54 ff ff ff       	jmp    c0021bf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021c9f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021ca4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021ca8:	51                   	push   ecx
c0021ca9:	51                   	push   ecx
c0021caa:	52                   	push   edx
c0021cab:	50                   	push   eax
c0021cac:	e8 f3 ea ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c0021cb1:	89 c2                	mov    edx,eax
c0021cb3:	89 f0                	mov    eax,esi
c0021cb5:	66 ef                	out    dx,ax
c0021cb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cbb:	83 c4 10             	add    esp,0x10
c0021cbe:	41                   	inc    ecx
c0021cbf:	eb c1                	jmp    c0021c82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021cc1:	31 f6                	xor    esi,esi
c0021cc3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cc9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cd0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cd4:	75 06                	jne    c0021cdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cd6:	01 f6                	add    esi,esi
c0021cd8:	01 f5                	add    ebp,esi
c0021cda:	eb bd                	jmp    c0021c99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021cdc:	51                   	push   ecx
c0021cdd:	51                   	push   ecx
c0021cde:	52                   	push   edx
c0021cdf:	50                   	push   eax
c0021ce0:	e8 bf ea ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c0021ce5:	89 c2                	mov    edx,eax
c0021ce7:	66 ed                	in     ax,dx
c0021ce9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021cee:	83 c4 10             	add    esp,0x10
c0021cf1:	46                   	inc    esi
c0021cf2:	eb cf                	jmp    c0021cc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021cf4:	51                   	push   ecx
c0021cf5:	51                   	push   ecx
c0021cf6:	52                   	push   edx
c0021cf7:	50                   	push   eax
c0021cf8:	e8 27 ec ff ff       	call   c0020924 <IDE::waitInterrupt(unsigned char)>
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	84 c0                	test   al,al
c0021d02:	0f 84 e8 fd ff ff    	je     c0021af0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d08:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d0d:	52                   	push   edx
c0021d0e:	52                   	push   edx
c0021d0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d16:	50                   	push   eax
c0021d17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d1d:	e8 6e ea ff ff       	call   c0020790 <IDE::prepareInterrupt(unsigned char)>
c0021d22:	83 c4 10             	add    esp,0x10
c0021d25:	50                   	push   eax
c0021d26:	50                   	push   eax
c0021d27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d2e:	50                   	push   eax
c0021d2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d35:	e8 6a ea ff ff       	call   c00207a4 <IDE::getBase(unsigned char)>
c0021d3a:	8d 50 07             	lea    edx,[eax+0x7]
c0021d3d:	ec                   	in     al,dx
c0021d3e:	83 c4 10             	add    esp,0x10
c0021d41:	a8 88                	test   al,0x88
c0021d43:	74 0a                	je     c0021d4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d45:	4b                   	dec    ebx
c0021d46:	75 dd                	jne    c0021d25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d48:	bb 02 00 00 00       	mov    ebx,0x2
c0021d4d:	eb 02                	jmp    c0021d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d4f:	31 db                	xor    ebx,ebx
c0021d51:	83 c4 1c             	add    esp,0x1c
c0021d54:	89 d8                	mov    eax,ebx
c0021d56:	5b                   	pop    ebx
c0021d57:	5e                   	pop    esi
c0021d58:	5f                   	pop    edi
c0021d59:	5d                   	pop    ebp
c0021d5a:	c3                   	ret    
c0021d5b:	90                   	nop

c0021d5c <ATAPI::diskRemoved()>:
c0021d5c:	83 ec 18             	sub    esp,0x18
c0021d5f:	68 53 90 02 c0       	push   0xc0029053
c0021d64:	e8 ea 04 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d6d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d74:	83 c4 1c             	add    esp,0x1c
c0021d77:	c3                   	ret    

c0021d78 <ATAPI::eject()>:
c0021d78:	57                   	push   edi
c0021d79:	b9 03 00 00 00       	mov    ecx,0x3
c0021d7e:	53                   	push   ebx
c0021d7f:	83 ec 14             	sub    esp,0x14
c0021d82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021d86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021d8a:	fc                   	cld    
c0021d8b:	31 c0                	xor    eax,eax
c0021d8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021d8f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021d94:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021d99:	50                   	push   eax
c0021d9a:	50                   	push   eax
c0021d9b:	6a 00                	push   0x0
c0021d9d:	6a 00                	push   0x0
c0021d9f:	6a 00                	push   0x0
c0021da1:	6a 02                	push   0x2
c0021da3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021da7:	50                   	push   eax
c0021da8:	53                   	push   ebx
c0021da9:	e8 ee fc ff ff       	call   c0021a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021dae:	83 c4 14             	add    esp,0x14
c0021db1:	53                   	push   ebx
c0021db2:	e8 a5 ff ff ff       	call   c0021d5c <ATAPI::diskRemoved()>
c0021db7:	83 c4 24             	add    esp,0x24
c0021dba:	5b                   	pop    ebx
c0021dbb:	5f                   	pop    edi
c0021dbc:	c3                   	ret    
c0021dbd:	90                   	nop

c0021dbe <ATAPI::diskInserted()>:
c0021dbe:	53                   	push   ebx
c0021dbf:	83 ec 14             	sub    esp,0x14
c0021dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021dc6:	68 69 90 02 c0       	push   0xc0029069
c0021dcb:	e8 83 04 ff ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0021dd0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dda:	e8 bd 1c ff ff       	call   c0013a9c <PhysicalDisk::startCache()>
c0021ddf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021de3:	83 c4 18             	add    esp,0x18
c0021de6:	5b                   	pop    ebx
c0021de7:	e9 50 3c ff ff       	jmp    c0015a3c <createPartitionsForDisk(PhysicalDisk*)>

c0021dec <ATAPI::detectMedia()>:
c0021dec:	56                   	push   esi
c0021ded:	53                   	push   ebx
c0021dee:	83 ec 28             	sub    esp,0x28
c0021df1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021df5:	6a 0c                	push   0xc
c0021df7:	6a 00                	push   0x0
c0021df9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021dfd:	56                   	push   esi
c0021dfe:	e8 7a e8 fd ff       	call   c000067d <memset>
c0021e03:	58                   	pop    eax
c0021e04:	5a                   	pop    edx
c0021e05:	6a 00                	push   0x0
c0021e07:	6a 00                	push   0x0
c0021e09:	6a 00                	push   0x0
c0021e0b:	6a 00                	push   0x0
c0021e0d:	56                   	push   esi
c0021e0e:	53                   	push   ebx
c0021e0f:	e8 88 fc ff ff       	call   c0021a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e14:	83 c4 1c             	add    esp,0x1c
c0021e17:	6a 0c                	push   0xc
c0021e19:	6a 00                	push   0x0
c0021e1b:	56                   	push   esi
c0021e1c:	e8 5c e8 fd ff       	call   c000067d <memset>
c0021e21:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e26:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e2b:	59                   	pop    ecx
c0021e2c:	58                   	pop    eax
c0021e2d:	6a 01                	push   0x1
c0021e2f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e33:	50                   	push   eax
c0021e34:	6a 00                	push   0x0
c0021e36:	6a 12                	push   0x12
c0021e38:	56                   	push   esi
c0021e39:	53                   	push   ebx
c0021e3a:	e8 5d fc ff ff       	call   c0021a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e3f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e43:	83 c4 20             	add    esp,0x20
c0021e46:	83 e0 7f             	and    eax,0x7f
c0021e49:	3c 70                	cmp    al,0x70
c0021e4b:	74 15                	je     c0021e62 <ATAPI::detectMedia()+0x76>
c0021e4d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e54:	75 0c                	jne    c0021e62 <ATAPI::detectMedia()+0x76>
c0021e56:	83 ec 0c             	sub    esp,0xc
c0021e59:	53                   	push   ebx
c0021e5a:	e8 5f ff ff ff       	call   c0021dbe <ATAPI::diskInserted()>
c0021e5f:	83 c4 10             	add    esp,0x10
c0021e62:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e66:	83 e0 0f             	and    eax,0xf
c0021e69:	3c 02                	cmp    al,0x2
c0021e6b:	75 1b                	jne    c0021e88 <ATAPI::detectMedia()+0x9c>
c0021e6d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e72:	75 2d                	jne    c0021ea1 <ATAPI::detectMedia()+0xb5>
c0021e74:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e7b:	74 24                	je     c0021ea1 <ATAPI::detectMedia()+0xb5>
c0021e7d:	83 ec 0c             	sub    esp,0xc
c0021e80:	53                   	push   ebx
c0021e81:	e8 d6 fe ff ff       	call   c0021d5c <ATAPI::diskRemoved()>
c0021e86:	eb 16                	jmp    c0021e9e <ATAPI::detectMedia()+0xb2>
c0021e88:	84 c0                	test   al,al
c0021e8a:	75 15                	jne    c0021ea1 <ATAPI::detectMedia()+0xb5>
c0021e8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e93:	75 0c                	jne    c0021ea1 <ATAPI::detectMedia()+0xb5>
c0021e95:	83 ec 0c             	sub    esp,0xc
c0021e98:	53                   	push   ebx
c0021e99:	e8 20 ff ff ff       	call   c0021dbe <ATAPI::diskInserted()>
c0021e9e:	83 c4 10             	add    esp,0x10
c0021ea1:	83 c4 24             	add    esp,0x24
c0021ea4:	5b                   	pop    ebx
c0021ea5:	5e                   	pop    esi
c0021ea6:	c3                   	ret    
c0021ea7:	90                   	nop

c0021ea8 <ATAPI::open(int, int, void*)>:
c0021ea8:	53                   	push   ebx
c0021ea9:	83 ec 08             	sub    esp,0x8
c0021eac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eb8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ebe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ec4:	c1 e0 06             	shl    eax,0x6
c0021ec7:	01 d0                	add    eax,edx
c0021ec9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021ed0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021ed6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021edd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021ee7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021eed:	6a 04                	push   0x4
c0021eef:	6a 0c                	push   0xc
c0021ef1:	51                   	push   ecx
c0021ef2:	52                   	push   edx
c0021ef3:	e8 be e8 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ef8:	90                   	nop
c0021ef9:	90                   	nop
c0021efa:	6a 00                	push   0x0
c0021efc:	6a 0c                	push   0xc
c0021efe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f05:	50                   	push   eax
c0021f06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f0c:	e8 a5 e8 ff ff       	call   c00207b6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f11:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f18:	83 c4 14             	add    esp,0x14
c0021f1b:	53                   	push   ebx
c0021f1c:	e8 cb fe ff ff       	call   c0021dec <ATAPI::detectMedia()>
c0021f21:	31 c0                	xor    eax,eax
c0021f23:	83 c4 18             	add    esp,0x18
c0021f26:	5b                   	pop    ebx
c0021f27:	c3                   	ret    

c0021f28 <ATAPI::read(unsigned long long, int, void*)>:
c0021f28:	55                   	push   ebp
c0021f29:	57                   	push   edi
c0021f2a:	56                   	push   esi
c0021f2b:	53                   	push   ebx
c0021f2c:	83 ec 1c             	sub    esp,0x1c
c0021f2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f3b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f42:	74 41                	je     c0021f85 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f44:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f48:	b9 03 00 00 00       	mov    ecx,0x3
c0021f4d:	fc                   	cld    
c0021f4e:	31 c0                	xor    eax,eax
c0021f50:	86 fb                	xchg   bl,bh
c0021f52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f54:	c1 c3 10             	rol    ebx,0x10
c0021f57:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f5c:	89 e8                	mov    eax,ebp
c0021f5e:	86 fb                	xchg   bl,bh
c0021f60:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f64:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f68:	50                   	push   eax
c0021f69:	50                   	push   eax
c0021f6a:	55                   	push   ebp
c0021f6b:	c1 e5 0b             	shl    ebp,0xb
c0021f6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f72:	6a 00                	push   0x0
c0021f74:	55                   	push   ebp
c0021f75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f79:	50                   	push   eax
c0021f7a:	56                   	push   esi
c0021f7b:	e8 1c fb ff ff       	call   c0021a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f80:	83 c4 20             	add    esp,0x20
c0021f83:	eb 1a                	jmp    c0021f9f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	56                   	push   esi
c0021f89:	e8 5e fe ff ff       	call   c0021dec <ATAPI::detectMedia()>
c0021f8e:	83 c4 10             	add    esp,0x10
c0021f91:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f98:	75 aa                	jne    c0021f44 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021f9a:	b8 02 00 00 00       	mov    eax,0x2
c0021f9f:	83 c4 1c             	add    esp,0x1c
c0021fa2:	5b                   	pop    ebx
c0021fa3:	5e                   	pop    esi
c0021fa4:	5f                   	pop    edi
c0021fa5:	5d                   	pop    ebp
c0021fa6:	c3                   	ret    
c0021fa7:	90                   	nop

c0021fa8 <AVX::open(int, int, void*)>:
c0021fa8:	83 ec 0c             	sub    esp,0xc
c0021fab:	e8 38 11 00 00       	call   c00230e8 <avxInit>
c0021fb0:	b8 00 00 00 00       	mov    eax,0x0
c0021fb5:	83 c4 0c             	add    esp,0xc
c0021fb8:	c3                   	ret    
c0021fb9:	90                   	nop

c0021fba <AVX::close(int, int, void*)>:
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	e8 27 11 00 00       	call   c00230e9 <avxClose>
c0021fc2:	b8 00 00 00 00       	mov    eax,0x0
c0021fc7:	83 c4 0c             	add    esp,0xc
c0021fca:	c3                   	ret    
c0021fcb:	90                   	nop

c0021fcc <AVX::available()>:
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	e8 0c 11 00 00       	call   c00230e0 <avxDetect>
c0021fd4:	85 c0                	test   eax,eax
c0021fd6:	0f 95 c0             	setne  al
c0021fd9:	83 c4 0c             	add    esp,0xc
c0021fdc:	c3                   	ret    
c0021fdd:	90                   	nop

c0021fde <AVX::save(void*)>:
c0021fde:	83 ec 0c             	sub    esp,0xc
c0021fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021fe5:	83 ec 0c             	sub    esp,0xc
c0021fe8:	50                   	push   eax
c0021fe9:	e8 f8 10 00 00       	call   c00230e6 <avxSave>
c0021fee:	83 c4 10             	add    esp,0x10
c0021ff1:	90                   	nop
c0021ff2:	83 c4 0c             	add    esp,0xc
c0021ff5:	c3                   	ret    

c0021ff6 <AVX::load(void*)>:
c0021ff6:	83 ec 0c             	sub    esp,0xc
c0021ff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ffd:	83 ec 0c             	sub    esp,0xc
c0022000:	50                   	push   eax
c0022001:	e8 e1 10 00 00       	call   c00230e7 <avxLoad>
c0022006:	83 c4 10             	add    esp,0x10
c0022009:	90                   	nop
c002200a:	83 c4 0c             	add    esp,0xc
c002200d:	c3                   	ret    

c002200e <AVX::AVX()>:
c002200e:	83 ec 0c             	sub    esp,0xc
c0022011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022015:	83 ec 08             	sub    esp,0x8
c0022018:	68 b4 90 02 c0       	push   0xc00290b4
c002201d:	50                   	push   eax
c002201e:	e8 ef 1a ff ff       	call   c0013b12 <FPU::FPU(char const*)>
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	ba c4 90 02 c0       	mov    edx,0xc00290c4
c002202b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202f:	89 10                	mov    DWORD PTR [eax],edx
c0022031:	90                   	nop
c0022032:	83 c4 0c             	add    esp,0xc
c0022035:	c3                   	ret    

c0022036 <MMX::available()>:
c0022036:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c002203b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022041:	83 e0 20             	and    eax,0x20
c0022044:	84 c0                	test   al,al
c0022046:	0f 95 c0             	setne  al
c0022049:	c3                   	ret    

c002204a <MMX::open(int, int, void*)>:
c002204a:	83 ec 0c             	sub    esp,0xc
c002204d:	e8 0a 11 00 00       	call   c002315c <x87Init>
c0022052:	b8 00 00 00 00       	mov    eax,0x0
c0022057:	83 c4 0c             	add    esp,0xc
c002205a:	c3                   	ret    
c002205b:	90                   	nop

c002205c <MMX::close(int, int, void*)>:
c002205c:	83 ec 0c             	sub    esp,0xc
c002205f:	e8 12 11 00 00       	call   c0023176 <x87Close>
c0022064:	b8 00 00 00 00       	mov    eax,0x0
c0022069:	83 c4 0c             	add    esp,0xc
c002206c:	c3                   	ret    
c002206d:	90                   	nop

c002206e <MMX::save(void*)>:
c002206e:	83 ec 0c             	sub    esp,0xc
c0022071:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022075:	83 ec 0c             	sub    esp,0xc
c0022078:	50                   	push   eax
c0022079:	e8 d3 10 00 00       	call   c0023151 <x87Save>
c002207e:	83 c4 10             	add    esp,0x10
c0022081:	90                   	nop
c0022082:	83 c4 0c             	add    esp,0xc
c0022085:	c3                   	ret    

c0022086 <MMX::load(void*)>:
c0022086:	83 ec 0c             	sub    esp,0xc
c0022089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002208d:	83 ec 0c             	sub    esp,0xc
c0022090:	50                   	push   eax
c0022091:	e8 c1 10 00 00       	call   c0023157 <x87Load>
c0022096:	83 c4 10             	add    esp,0x10
c0022099:	90                   	nop
c002209a:	83 c4 0c             	add    esp,0xc
c002209d:	c3                   	ret    

c002209e <MMX::MMX()>:
c002209e:	83 ec 0c             	sub    esp,0xc
c00220a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a5:	83 ec 08             	sub    esp,0x8
c00220a8:	68 f4 90 02 c0       	push   0xc00290f4
c00220ad:	50                   	push   eax
c00220ae:	e8 5f 1a ff ff       	call   c0013b12 <FPU::FPU(char const*)>
c00220b3:	83 c4 10             	add    esp,0x10
c00220b6:	ba 04 91 02 c0       	mov    edx,0xc0029104
c00220bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bf:	89 10                	mov    DWORD PTR [eax],edx
c00220c1:	90                   	nop
c00220c2:	83 c4 0c             	add    esp,0xc
c00220c5:	c3                   	ret    

c00220c6 <SSE::open(int, int, void*)>:
c00220c6:	83 ec 0c             	sub    esp,0xc
c00220c9:	e8 49 10 00 00       	call   c0023117 <sseInit>
c00220ce:	b8 00 00 00 00       	mov    eax,0x0
c00220d3:	83 c4 0c             	add    esp,0xc
c00220d6:	c3                   	ret    
c00220d7:	90                   	nop

c00220d8 <SSE::close(int, int, void*)>:
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	e8 47 10 00 00       	call   c0023127 <sseClose>
c00220e0:	b8 00 00 00 00       	mov    eax,0x0
c00220e5:	83 c4 0c             	add    esp,0xc
c00220e8:	c3                   	ret    
c00220e9:	90                   	nop

c00220ea <SSE::available()>:
c00220ea:	83 ec 1c             	sub    esp,0x1c
c00220ed:	e8 fe 0f 00 00       	call   c00230f0 <sseDetect>
c00220f2:	85 c0                	test   eax,eax
c00220f4:	0f 95 c0             	setne  al
c00220f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00220fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00220ff:	83 c4 1c             	add    esp,0x1c
c0022102:	c3                   	ret    
c0022103:	90                   	nop

c0022104 <SSE::save(void*)>:
c0022104:	83 ec 0c             	sub    esp,0xc
c0022107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002210b:	83 ec 0c             	sub    esp,0xc
c002210e:	50                   	push   eax
c002210f:	e8 f7 0f 00 00       	call   c002310b <sseSave>
c0022114:	83 c4 10             	add    esp,0x10
c0022117:	90                   	nop
c0022118:	83 c4 0c             	add    esp,0xc
c002211b:	c3                   	ret    

c002211c <SSE::load(void*)>:
c002211c:	83 ec 0c             	sub    esp,0xc
c002211f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022123:	83 ec 0c             	sub    esp,0xc
c0022126:	50                   	push   eax
c0022127:	e8 e5 0f 00 00       	call   c0023111 <sseLoad>
c002212c:	83 c4 10             	add    esp,0x10
c002212f:	90                   	nop
c0022130:	83 c4 0c             	add    esp,0xc
c0022133:	c3                   	ret    

c0022134 <SSE::SSE()>:
c0022134:	83 ec 0c             	sub    esp,0xc
c0022137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213b:	83 ec 08             	sub    esp,0x8
c002213e:	68 34 91 02 c0       	push   0xc0029134
c0022143:	50                   	push   eax
c0022144:	e8 c9 19 ff ff       	call   c0013b12 <FPU::FPU(char const*)>
c0022149:	83 c4 10             	add    esp,0x10
c002214c:	ba 44 91 02 c0       	mov    edx,0xc0029144
c0022151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022155:	89 10                	mov    DWORD PTR [eax],edx
c0022157:	90                   	nop
c0022158:	83 c4 0c             	add    esp,0xc
c002215b:	c3                   	ret    

c002215c <x87::open(int, int, void*)>:
c002215c:	83 ec 0c             	sub    esp,0xc
c002215f:	e8 f8 0f 00 00       	call   c002315c <x87Init>
c0022164:	b8 00 00 00 00       	mov    eax,0x0
c0022169:	83 c4 0c             	add    esp,0xc
c002216c:	c3                   	ret    
c002216d:	90                   	nop

c002216e <x87::close(int, int, void*)>:
c002216e:	83 ec 0c             	sub    esp,0xc
c0022171:	e8 00 10 00 00       	call   c0023176 <x87Close>
c0022176:	b8 00 00 00 00       	mov    eax,0x0
c002217b:	83 c4 0c             	add    esp,0xc
c002217e:	c3                   	ret    
c002217f:	90                   	nop

c0022180 <x87::available()>:
c0022180:	83 ec 0c             	sub    esp,0xc
c0022183:	e8 ae 0f 00 00       	call   c0023136 <x87Detect>
c0022188:	85 c0                	test   eax,eax
c002218a:	0f 95 c0             	setne  al
c002218d:	83 c4 0c             	add    esp,0xc
c0022190:	c3                   	ret    
c0022191:	90                   	nop

c0022192 <x87::save(void*)>:
c0022192:	83 ec 0c             	sub    esp,0xc
c0022195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022199:	83 ec 0c             	sub    esp,0xc
c002219c:	50                   	push   eax
c002219d:	e8 af 0f 00 00       	call   c0023151 <x87Save>
c00221a2:	83 c4 10             	add    esp,0x10
c00221a5:	90                   	nop
c00221a6:	83 c4 0c             	add    esp,0xc
c00221a9:	c3                   	ret    

c00221aa <x87::load(void*)>:
c00221aa:	83 ec 0c             	sub    esp,0xc
c00221ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221b1:	83 ec 0c             	sub    esp,0xc
c00221b4:	50                   	push   eax
c00221b5:	e8 9d 0f 00 00       	call   c0023157 <x87Load>
c00221ba:	83 c4 10             	add    esp,0x10
c00221bd:	90                   	nop
c00221be:	83 c4 0c             	add    esp,0xc
c00221c1:	c3                   	ret    

c00221c2 <x87::x87()>:
c00221c2:	83 ec 0c             	sub    esp,0xc
c00221c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c9:	83 ec 08             	sub    esp,0x8
c00221cc:	68 74 91 02 c0       	push   0xc0029174
c00221d1:	50                   	push   eax
c00221d2:	e8 3b 19 ff ff       	call   c0013b12 <FPU::FPU(char const*)>
c00221d7:	83 c4 10             	add    esp,0x10
c00221da:	ba 84 91 02 c0       	mov    edx,0xc0029184
c00221df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e3:	89 10                	mov    DWORD PTR [eax],edx
c00221e5:	90                   	nop
c00221e6:	83 c4 0c             	add    esp,0xc
c00221e9:	c3                   	ret    

c00221ea <APIC::disable()>:
c00221ea:	90                   	nop
c00221eb:	c3                   	ret    

c00221ec <APIC::close(int, int, void*)>:
c00221ec:	55                   	push   ebp
c00221ed:	89 e5                	mov    ebp,esp
c00221ef:	83 ec 08             	sub    esp,0x8
c00221f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00221f7:	83 c0 3c             	add    eax,0x3c
c00221fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00221fc:	83 ec 0c             	sub    esp,0xc
c00221ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022202:	ff d0                	call   eax
c0022204:	83 c4 10             	add    esp,0x10
c0022207:	b8 00 00 00 00       	mov    eax,0x0
c002220c:	c9                   	leave  
c002220d:	c3                   	ret    

c002220e <IOAPIC::close(int, int, void*)>:
c002220e:	b8 00 00 00 00       	mov    eax,0x0
c0022213:	c3                   	ret    

c0022214 <APIC::io_wait()>:
c0022214:	eb 00                	jmp    c0022216 <APIC::io_wait()+0x2>
c0022216:	eb 00                	jmp    c0022218 <APIC::io_wait()+0x4>
c0022218:	90                   	nop
c0022219:	c3                   	ret    

c002221a <APIC::getBase()>:
c002221a:	55                   	push   ebp
c002221b:	89 e5                	mov    ebp,esp
c002221d:	83 ec 18             	sub    esp,0x18
c0022220:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022225:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002222b:	83 e0 08             	and    eax,0x8
c002222e:	84 c0                	test   al,al
c0022230:	75 07                	jne    c0022239 <APIC::getBase()+0x1f>
c0022232:	b8 00 00 00 00       	mov    eax,0x0
c0022237:	eb 21                	jmp    c002225a <APIC::getBase()+0x40>
c0022239:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c002223e:	83 ec 08             	sub    esp,0x8
c0022241:	6a 1b                	push   0x1b
c0022243:	50                   	push   eax
c0022244:	e8 8b c4 fe ff       	call   c000e6d4 <Computer::rdmsr(unsigned int)>
c0022249:	83 c4 10             	add    esp,0x10
c002224c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002224f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022252:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022255:	25 00 f0 ff ff       	and    eax,0xfffff000
c002225a:	c9                   	leave  
c002225b:	c3                   	ret    

c002225c <APIC::eoi(unsigned char)>:
c002225c:	55                   	push   ebp
c002225d:	89 e5                	mov    ebp,esp
c002225f:	83 ec 28             	sub    esp,0x28
c0022262:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022265:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022268:	83 ec 0c             	sub    esp,0xc
c002226b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002226e:	e8 a7 ff ff ff       	call   c002221a <APIC::getBase()>
c0022273:	83 c4 10             	add    esp,0x10
c0022276:	05 b0 00 00 00       	add    eax,0xb0
c002227b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002227e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022281:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0022287:	90                   	nop
c0022288:	c9                   	leave  
c0022289:	c3                   	ret    

c002228a <APIC::open(int, int, void*)>:
c002228a:	55                   	push   ebp
c002228b:	89 e5                	mov    ebp,esp
c002228d:	57                   	push   edi
c002228e:	56                   	push   esi
c002228f:	53                   	push   ebx
c0022290:	83 ec 2c             	sub    esp,0x2c
c0022293:	83 ec 0c             	sub    esp,0xc
c0022296:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022299:	e8 7c ff ff ff       	call   c002221a <APIC::getBase()>
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	89 c2                	mov    edx,eax
c00222a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222a6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222ac:	0f b6 f8             	movzx  edi,al
c00222af:	89 d0                	mov    eax,edx
c00222b1:	ba 00 00 00 00       	mov    edx,0x0
c00222b6:	89 c1                	mov    ecx,eax
c00222b8:	80 e5 ff             	and    ch,0xff
c00222bb:	89 cb                	mov    ebx,ecx
c00222bd:	0f b6 f2             	movzx  esi,dl
c00222c0:	89 d8                	mov    eax,ebx
c00222c2:	89 f2                	mov    edx,esi
c00222c4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222c7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00222ca:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00222ce:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00222d2:	83 e0 00             	and    eax,0x0
c00222d5:	09 d0                	or     eax,edx
c00222d7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00222db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222de:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222e4:	8d 50 01             	lea    edx,[eax+0x1]
c00222e7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222ea:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00222f0:	0f b6 d0             	movzx  edx,al
c00222f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222f6:	83 c2 08             	add    edx,0x8
c00222f9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00222fd:	0f b6 c9             	movzx  ecx,cl
c0022300:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022306:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002230a:	83 ec 0c             	sub    esp,0xc
c002230d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022310:	e8 05 ff ff ff       	call   c002221a <APIC::getBase()>
c0022315:	83 c4 10             	add    esp,0x10
c0022318:	05 f0 00 00 00       	add    eax,0xf0
c002231d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022320:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022323:	8b 00                	mov    eax,DWORD PTR [eax]
c0022325:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022328:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002232f:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0022336:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022339:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002233c:	89 10                	mov    DWORD PTR [eax],edx
c002233e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0022345:	a1 10 ad 02 c0       	mov    eax,ds:0xc002ad10
c002234a:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002234d:	7d 7c                	jge    c00223cb <APIC::open(int, int, void*)+0x141>
c002234f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022352:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c0022359:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002235c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002235f:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c0022366:	c1 e8 08             	shr    eax,0x8
c0022369:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002236d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022370:	8b 04 85 20 ad 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd52e0]
c0022377:	c1 e8 18             	shr    eax,0x18
c002237a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002237d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0022381:	75 40                	jne    c00223c3 <APIC::open(int, int, void*)+0x139>
c0022383:	83 ec 0c             	sub    esp,0xc
c0022386:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022389:	e8 8c fe ff ff       	call   c002221a <APIC::getBase()>
c002238e:	83 c4 10             	add    esp,0x10
c0022391:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0022395:	75 07                	jne    c002239e <APIC::open(int, int, void*)+0x114>
c0022397:	ba 60 03 00 00       	mov    edx,0x360
c002239c:	eb 05                	jmp    c00223a3 <APIC::open(int, int, void*)+0x119>
c002239e:	ba 50 03 00 00       	mov    edx,0x350
c00223a3:	01 d0                	add    eax,edx
c00223a5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00223a8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00223ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ad:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00223b0:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00223b7:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00223bb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00223be:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00223c1:	89 10                	mov    DWORD PTR [eax],edx
c00223c3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00223c6:	e9 7a ff ff ff       	jmp    c0022345 <APIC::open(int, int, void*)+0xbb>
c00223cb:	b8 00 00 00 00       	mov    eax,0x0
c00223d0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00223d3:	5b                   	pop    ebx
c00223d4:	5e                   	pop    esi
c00223d5:	5f                   	pop    edi
c00223d6:	5d                   	pop    ebp
c00223d7:	c3                   	ret    

c00223d8 <IOAPIC::IOAPIC()>:
c00223d8:	83 ec 0c             	sub    esp,0xc
c00223db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223df:	83 ec 08             	sub    esp,0x8
c00223e2:	68 b4 91 02 c0       	push   0xc00291b4
c00223e7:	50                   	push   eax
c00223e8:	e8 31 14 ff ff       	call   c001381e <Device::Device(char const*)>
c00223ed:	83 c4 10             	add    esp,0x10
c00223f0:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c00223f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f9:	89 10                	mov    DWORD PTR [eax],edx
c00223fb:	90                   	nop
c00223fc:	83 c4 0c             	add    esp,0xc
c00223ff:	c3                   	ret    

c0022400 <APIC::APIC()>:
c0022400:	53                   	push   ebx
c0022401:	83 ec 18             	sub    esp,0x18
c0022404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022408:	83 ec 08             	sub    esp,0x8
c002240b:	68 bc 91 02 c0       	push   0xc00291bc
c0022410:	50                   	push   eax
c0022411:	e8 56 1b ff ff       	call   c0013f6c <InterruptController::InterruptController(char const*)>
c0022416:	83 c4 10             	add    esp,0x10
c0022419:	ba 94 92 02 c0       	mov    edx,0xc0029294
c002241e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022422:	89 10                	mov    DWORD PTR [eax],edx
c0022424:	a0 80 c7 02 c0       	mov    al,ds:0xc002c780
c0022429:	83 f0 01             	xor    eax,0x1
c002242c:	84 c0                	test   al,al
c002242e:	0f 84 96 00 00 00    	je     c00224ca <APIC::APIC()+0xca>
c0022434:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022439:	a0 c0 ad 02 c0       	mov    al,ds:0xc002adc0
c002243e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0022442:	73 7f                	jae    c00224c3 <APIC::APIC()+0xc3>
c0022444:	83 ec 0c             	sub    esp,0xc
c0022447:	68 68 01 00 00       	push   0x168
c002244c:	e8 13 fd fe ff       	call   c0012164 <operator new(unsigned long)>
c0022451:	83 c4 10             	add    esp,0x10
c0022454:	89 c3                	mov    ebx,eax
c0022456:	83 ec 0c             	sub    esp,0xc
c0022459:	53                   	push   ebx
c002245a:	e8 79 ff ff ff       	call   c00223d8 <IOAPIC::IOAPIC()>
c002245f:	83 c4 10             	add    esp,0x10
c0022462:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0022466:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002246b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002246f:	89 14 85 60 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd38a0],edx
c0022476:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c002247b:	40                   	inc    eax
c002247c:	a3 40 c7 02 c0       	mov    ds:0xc002c740,eax
c0022481:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022486:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002248c:	83 ec 08             	sub    esp,0x8
c002248f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022493:	50                   	push   eax
c0022494:	e8 95 11 ff ff       	call   c001362e <Device::addChild(Device*)>
c0022499:	83 c4 10             	add    esp,0x10
c002249c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00224a2:	83 c0 08             	add    eax,0x8
c00224a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00224a7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00224ac:	6a 00                	push   0x0
c00224ae:	6a 00                	push   0x0
c00224b0:	52                   	push   edx
c00224b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224b5:	ff d0                	call   eax
c00224b7:	83 c4 10             	add    esp,0x10
c00224ba:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00224be:	e9 76 ff ff ff       	jmp    c0022439 <APIC::APIC()+0x39>
c00224c3:	c6 05 80 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c780,0x1
c00224ca:	90                   	nop
c00224cb:	83 c4 18             	add    esp,0x18
c00224ce:	5b                   	pop    ebx
c00224cf:	c3                   	ret    

c00224d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00224d0:	55                   	push   ebp
c00224d1:	89 e5                	mov    ebp,esp
c00224d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00224dc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00224df:	72 1d                	jb     c00224fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00224e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224e4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00224ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00224f3:	01 d0                	add    eax,edx
c00224f5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00224f8:	73 04                	jae    c00224fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00224fa:	b0 01                	mov    al,0x1
c00224fc:	eb 02                	jmp    c0022500 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00224fe:	b0 00                	mov    al,0x0
c0022500:	5d                   	pop    ebp
c0022501:	c3                   	ret    

c0022502 <IOAPIC::read(int)>:
c0022502:	55                   	push   ebp
c0022503:	89 e5                	mov    ebp,esp
c0022505:	83 ec 10             	sub    esp,0x10
c0022508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002250b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022511:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022514:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022517:	0f b6 d0             	movzx  edx,al
c002251a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002251d:	89 10                	mov    DWORD PTR [eax],edx
c002251f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022522:	83 c0 10             	add    eax,0x10
c0022525:	8b 00                	mov    eax,DWORD PTR [eax]
c0022527:	c9                   	leave  
c0022528:	c3                   	ret    
c0022529:	90                   	nop

c002252a <IOAPIC::open(int, int, void*)>:
c002252a:	55                   	push   ebp
c002252b:	89 e5                	mov    ebp,esp
c002252d:	57                   	push   edi
c002252e:	56                   	push   esi
c002252f:	53                   	push   ebx
c0022530:	83 ec 0c             	sub    esp,0xc
c0022533:	83 ec 0c             	sub    esp,0xc
c0022536:	68 e7 91 02 c0       	push   0xc00291e7
c002253b:	e8 13 fd fe ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c0022540:	83 c4 10             	add    esp,0x10
c0022543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022546:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022549:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002254f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022552:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022558:	8b 14 85 00 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5200]
c002255f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022562:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002256b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022571:	8b 14 85 80 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5180]
c0022578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002257b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022584:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002258a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002258d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022593:	0f b6 f8             	movzx  edi,al
c0022596:	89 d0                	mov    eax,edx
c0022598:	ba 00 00 00 00       	mov    edx,0x0
c002259d:	89 c1                	mov    ecx,eax
c002259f:	80 e5 ff             	and    ch,0xff
c00225a2:	89 cb                	mov    ebx,ecx
c00225a4:	0f b6 f2             	movzx  esi,dl
c00225a7:	89 d8                	mov    eax,ebx
c00225a9:	89 f2                	mov    edx,esi
c00225ab:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00225ae:	8d 5f 08             	lea    ebx,[edi+0x8]
c00225b1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00225b5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00225b9:	83 e0 00             	and    eax,0x0
c00225bc:	09 d0                	or     eax,edx
c00225be:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00225c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00225cb:	8d 50 01             	lea    edx,[eax+0x1]
c00225ce:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00225d1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00225d7:	0f b6 d0             	movzx  edx,al
c00225da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225dd:	83 c2 08             	add    edx,0x8
c00225e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00225e4:	0f b6 c9             	movzx  ecx,cl
c00225e7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00225ed:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00225f1:	83 ec 08             	sub    esp,0x8
c00225f4:	6a 01                	push   0x1
c00225f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225f9:	e8 04 ff ff ff       	call   c0022502 <IOAPIC::read(int)>
c00225fe:	83 c4 10             	add    esp,0x10
c0022601:	c1 f8 10             	sar    eax,0x10
c0022604:	0f b6 c0             	movzx  eax,al
c0022607:	8d 50 01             	lea    edx,[eax+0x1]
c002260a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002260d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0022613:	b8 00 00 00 00       	mov    eax,0x0
c0022618:	8d 65 f4             	lea    esp,[ebp-0xc]
c002261b:	5b                   	pop    ebx
c002261c:	5e                   	pop    esi
c002261d:	5f                   	pop    edi
c002261e:	5d                   	pop    ebp
c002261f:	c3                   	ret    

c0022620 <IOAPIC::write(int, int)>:
c0022620:	55                   	push   ebp
c0022621:	89 e5                	mov    ebp,esp
c0022623:	83 ec 10             	sub    esp,0x10
c0022626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022629:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002262f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022632:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022635:	0f b6 d0             	movzx  edx,al
c0022638:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002263b:	89 10                	mov    DWORD PTR [eax],edx
c002263d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022640:	8d 50 10             	lea    edx,[eax+0x10]
c0022643:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022646:	89 02                	mov    DWORD PTR [edx],eax
c0022648:	90                   	nop
c0022649:	c9                   	leave  
c002264a:	c3                   	ret    
c002264b:	90                   	nop

c002264c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002264c:	55                   	push   ebp
c002264d:	89 e5                	mov    ebp,esp
c002264f:	53                   	push   ebx
c0022650:	83 ec 2c             	sub    esp,0x2c
c0022653:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022656:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022659:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002265c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002265f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022662:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022665:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022668:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002266b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002266e:	88 d8                	mov    al,bl
c0022670:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022673:	88 c8                	mov    al,cl
c0022675:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022678:	88 d0                	mov    al,dl
c002267a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002267d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022681:	83 c0 08             	add    eax,0x8
c0022684:	01 c0                	add    eax,eax
c0022686:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022689:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002268d:	83 c0 08             	add    eax,0x8
c0022690:	01 c0                	add    eax,eax
c0022692:	40                   	inc    eax
c0022693:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022696:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022699:	50                   	push   eax
c002269a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002269d:	e8 60 fe ff ff       	call   c0022502 <IOAPIC::read(int)>
c00226a2:	83 c4 08             	add    esp,0x8
c00226a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00226a8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00226af:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00226b2:	c1 e0 18             	shl    eax,0x18
c00226b5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00226b8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00226bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00226be:	52                   	push   edx
c00226bf:	50                   	push   eax
c00226c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226c3:	e8 58 ff ff ff       	call   c0022620 <IOAPIC::write(int, int)>
c00226c8:	83 c4 0c             	add    esp,0xc
c00226cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226ce:	50                   	push   eax
c00226cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226d2:	e8 2b fe ff ff       	call   c0022502 <IOAPIC::read(int)>
c00226d7:	83 c4 08             	add    esp,0x8
c00226da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00226dd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00226e4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00226eb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00226f2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00226f6:	74 09                	je     c0022701 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00226f8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00226ff:	eb 07                	jmp    c0022708 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0022701:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022708:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002270c:	74 09                	je     c0022717 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002270e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022715:	eb 07                	jmp    c002271e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022717:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002271e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022725:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022729:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002272c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002272f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022732:	52                   	push   edx
c0022733:	50                   	push   eax
c0022734:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022737:	e8 e4 fe ff ff       	call   c0022620 <IOAPIC::write(int, int)>
c002273c:	83 c4 0c             	add    esp,0xc
c002273f:	90                   	nop
c0022740:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022743:	c9                   	leave  
c0022744:	c3                   	ret    
c0022745:	90                   	nop

c0022746 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022746:	55                   	push   ebp
c0022747:	89 e5                	mov    ebp,esp
c0022749:	57                   	push   edi
c002274a:	56                   	push   esi
c002274b:	53                   	push   ebx
c002274c:	83 ec 2c             	sub    esp,0x2c
c002274f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022752:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022755:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022759:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002275d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022761:	74 5a                	je     c00227bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022763:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022767:	7f 44                	jg     c00227ad <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002276c:	05 40 97 02 c0       	add    eax,0xc0029740
c0022771:	8a 00                	mov    al,BYTE PTR [eax]
c0022773:	0f b6 c0             	movzx  eax,al
c0022776:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002277c:	66 8b 84 00 a0 ad 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5260]
c0022784:	0f b7 c0             	movzx  eax,ax
c0022787:	83 e0 02             	and    eax,0x2
c002278a:	85 c0                	test   eax,eax
c002278c:	74 04                	je     c0022792 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002278e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022795:	66 8b 84 00 a0 ad 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5260]
c002279d:	0f b7 c0             	movzx  eax,ax
c00227a0:	83 e0 08             	and    eax,0x8
c00227a3:	85 c0                	test   eax,eax
c00227a5:	74 16                	je     c00227bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00227a7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00227ab:	eb 10                	jmp    c00227bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00227ad:	83 ec 0c             	sub    esp,0xc
c00227b0:	68 f8 91 02 c0       	push   0xc00291f8
c00227b5:	e8 17 62 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00227ba:	83 c4 10             	add    esp,0x10
c00227bd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00227c1:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c00227c6:	83 ec 08             	sub    esp,0x8
c00227c9:	50                   	push   eax
c00227ca:	68 30 92 02 c0       	push   0xc0029230
c00227cf:	e8 7f fa fe ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00227d4:	83 c4 10             	add    esp,0x10
c00227d7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00227de:	a1 40 c7 02 c0       	mov    eax,ds:0xc002c740
c00227e3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00227e6:	7d 67                	jge    c002284f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00227e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00227eb:	8b 04 85 60 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd38a0]
c00227f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227f5:	83 ec 08             	sub    esp,0x8
c00227f8:	52                   	push   edx
c00227f9:	50                   	push   eax
c00227fa:	e8 d1 fc ff ff       	call   c00224d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00227ff:	83 c4 10             	add    esp,0x10
c0022802:	84 c0                	test   al,al
c0022804:	74 44                	je     c002284a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022806:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022809:	8b 1c 85 60 c7 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd38a0]
c0022810:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022814:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022817:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002281b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002281e:	83 c0 20             	add    eax,0x20
c0022821:	0f b6 f0             	movzx  esi,al
c0022824:	b8 00 00 00 00       	mov    eax,0x0
c0022829:	99                   	cdq    
c002282a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002282d:	0f b6 c9             	movzx  ecx,cl
c0022830:	83 ec 04             	sub    esp,0x4
c0022833:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022836:	57                   	push   edi
c0022837:	56                   	push   esi
c0022838:	52                   	push   edx
c0022839:	50                   	push   eax
c002283a:	51                   	push   ecx
c002283b:	53                   	push   ebx
c002283c:	e8 0b fe ff ff       	call   c002264c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022841:	83 c4 20             	add    esp,0x20
c0022844:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022848:	eb 05                	jmp    c002284f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002284a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002284d:	eb 8f                	jmp    c00227de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002284f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022852:	83 f0 01             	xor    eax,0x1
c0022855:	84 c0                	test   al,al
c0022857:	74 10                	je     c0022869 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022859:	83 ec 0c             	sub    esp,0xc
c002285c:	68 47 92 02 c0       	push   0xc0029247
c0022861:	e8 6b 61 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0022866:	83 c4 10             	add    esp,0x10
c0022869:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002286d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022874:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022878:	7f 65                	jg     c00228df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002287a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002287d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022880:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022887:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002288a:	01 ca                	add    edx,ecx
c002288c:	83 c2 54             	add    edx,0x54
c002288f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022893:	85 c0                	test   eax,eax
c0022895:	75 43                	jne    c00228da <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002289a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002289d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00228a4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00228a7:	01 ca                	add    edx,ecx
c00228a9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00228ac:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00228af:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00228b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00228b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00228c0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00228c3:	01 ca                	add    edx,ecx
c00228c5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00228cb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00228ce:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00228d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228d5:	83 e8 20             	sub    eax,0x20
c00228d8:	eb 1a                	jmp    c00228f4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00228da:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00228dd:	eb 95                	jmp    c0022874 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00228df:	83 ec 0c             	sub    esp,0xc
c00228e2:	68 54 92 02 c0       	push   0xc0029254
c00228e7:	e8 e5 60 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00228ec:	83 c4 10             	add    esp,0x10
c00228ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00228f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00228f7:	5b                   	pop    ebx
c00228f8:	5e                   	pop    esi
c00228f9:	5f                   	pop    edi
c00228fa:	5d                   	pop    ebp
c00228fb:	c3                   	ret    

c00228fc <PIC::disable()>:
c00228fc:	55                   	push   ebp
c00228fd:	89 e5                	mov    ebp,esp
c00228ff:	83 ec 10             	sub    esp,0x10
c0022902:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022908:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002290c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002290f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022913:	ee                   	out    dx,al
c0022914:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002291a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002291e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022921:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022925:	ee                   	out    dx,al
c0022926:	90                   	nop
c0022927:	c9                   	leave  
c0022928:	c3                   	ret    
c0022929:	90                   	nop

c002292a <PIC::close(int, int, void*)>:
c002292a:	55                   	push   ebp
c002292b:	89 e5                	mov    ebp,esp
c002292d:	83 ec 08             	sub    esp,0x8
c0022930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022933:	8b 00                	mov    eax,DWORD PTR [eax]
c0022935:	83 c0 3c             	add    eax,0x3c
c0022938:	8b 00                	mov    eax,DWORD PTR [eax]
c002293a:	83 ec 0c             	sub    esp,0xc
c002293d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022940:	ff d0                	call   eax
c0022942:	83 c4 10             	add    esp,0x10
c0022945:	b8 00 00 00 00       	mov    eax,0x0
c002294a:	c9                   	leave  
c002294b:	c3                   	ret    

c002294c <PIC::PIC()>:
c002294c:	83 ec 0c             	sub    esp,0xc
c002294f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022953:	83 ec 08             	sub    esp,0x8
c0022956:	68 00 93 02 c0       	push   0xc0029300
c002295b:	50                   	push   eax
c002295c:	e8 0b 16 ff ff       	call   c0013f6c <InterruptController::InterruptController(char const*)>
c0022961:	83 c4 10             	add    esp,0x10
c0022964:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0022969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296d:	89 10                	mov    DWORD PTR [eax],edx
c002296f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022973:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022979:	0f b6 d0             	movzx  edx,al
c002297c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022980:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022991:	0f b6 d0             	movzx  edx,al
c0022994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022998:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002299d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229a7:	8d 50 01             	lea    edx,[eax+0x1]
c00229aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229b4:	0f b6 d0             	movzx  edx,al
c00229b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229bf:	83 e1 3f             	and    ecx,0x3f
c00229c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229d0:	0f b6 d0             	movzx  edx,al
c00229d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00229de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229e8:	0f b6 d0             	movzx  edx,al
c00229eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ef:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00229f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229fe:	8d 50 01             	lea    edx,[eax+0x1]
c0022a01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a05:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a0b:	0f b6 d0             	movzx  edx,al
c0022a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a12:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a16:	83 e1 3f             	and    ecx,0x3f
c0022a19:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a1d:	90                   	nop
c0022a1e:	83 c4 0c             	add    esp,0xc
c0022a21:	c3                   	ret    

c0022a22 <PIC::ioWait()>:
c0022a22:	eb 00                	jmp    c0022a24 <PIC::ioWait()+0x2>
c0022a24:	eb 00                	jmp    c0022a26 <PIC::ioWait()+0x4>
c0022a26:	90                   	nop
c0022a27:	c3                   	ret    

c0022a28 <PIC::getIRQReg(int)>:
c0022a28:	55                   	push   ebp
c0022a29:	89 e5                	mov    ebp,esp
c0022a2b:	83 ec 10             	sub    esp,0x10
c0022a2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a31:	0f b6 c0             	movzx  eax,al
c0022a34:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a3a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022a3d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a40:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a44:	ee                   	out    dx,al
c0022a45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a48:	0f b6 c0             	movzx  eax,al
c0022a4b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a51:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022a54:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a57:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a5b:	ee                   	out    dx,al
c0022a5c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022a62:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022a66:	89 c2                	mov    edx,eax
c0022a68:	ec                   	in     al,dx
c0022a69:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022a6c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022a6f:	0f b6 c0             	movzx  eax,al
c0022a72:	c1 e0 08             	shl    eax,0x8
c0022a75:	89 c1                	mov    ecx,eax
c0022a77:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022a7d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022a81:	89 c2                	mov    edx,eax
c0022a83:	ec                   	in     al,dx
c0022a84:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022a87:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022a8a:	0f b6 c0             	movzx  eax,al
c0022a8d:	09 c8                	or     eax,ecx
c0022a8f:	c9                   	leave  
c0022a90:	c3                   	ret    
c0022a91:	90                   	nop

c0022a92 <PIC::eoi(unsigned char)>:
c0022a92:	55                   	push   ebp
c0022a93:	89 e5                	mov    ebp,esp
c0022a95:	83 ec 14             	sub    esp,0x14
c0022a98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022a9b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022a9e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022aa2:	75 1e                	jne    c0022ac2 <PIC::eoi(unsigned char)+0x30>
c0022aa4:	6a 0b                	push   0xb
c0022aa6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022aa9:	e8 7a ff ff ff       	call   c0022a28 <PIC::getIRQReg(int)>
c0022aae:	83 c4 08             	add    esp,0x8
c0022ab1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022ab5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022ab9:	25 80 00 00 00       	and    eax,0x80
c0022abe:	85 c0                	test   eax,eax
c0022ac0:	74 5f                	je     c0022b21 <PIC::eoi(unsigned char)+0x8f>
c0022ac2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022ac6:	75 2d                	jne    c0022af5 <PIC::eoi(unsigned char)+0x63>
c0022ac8:	6a 0b                	push   0xb
c0022aca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022acd:	e8 56 ff ff ff       	call   c0022a28 <PIC::getIRQReg(int)>
c0022ad2:	83 c4 08             	add    esp,0x8
c0022ad5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022ad9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022adc:	66 85 c0             	test   ax,ax
c0022adf:	78 14                	js     c0022af5 <PIC::eoi(unsigned char)+0x63>
c0022ae1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022ae7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022aeb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022aee:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022af2:	ee                   	out    dx,al
c0022af3:	eb 2d                	jmp    c0022b22 <PIC::eoi(unsigned char)+0x90>
c0022af5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022af9:	76 12                	jbe    c0022b0d <PIC::eoi(unsigned char)+0x7b>
c0022afb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022b01:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022b05:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022b08:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022b0c:	ee                   	out    dx,al
c0022b0d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022b13:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022b17:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b1a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b1e:	ee                   	out    dx,al
c0022b1f:	eb 01                	jmp    c0022b22 <PIC::eoi(unsigned char)+0x90>
c0022b21:	90                   	nop
c0022b22:	c9                   	leave  
c0022b23:	c3                   	ret    

c0022b24 <PIC::remap()>:
c0022b24:	55                   	push   ebp
c0022b25:	89 e5                	mov    ebp,esp
c0022b27:	83 ec 48             	sub    esp,0x48
c0022b2a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022b31:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022b38:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022b3e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022b41:	89 c2                	mov    edx,eax
c0022b43:	ec                   	in     al,dx
c0022b44:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022b47:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022b4a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022b4d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022b53:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022b56:	89 c2                	mov    edx,eax
c0022b58:	ec                   	in     al,dx
c0022b59:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022b5c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022b5f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022b62:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022b68:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022b6c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022b6f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022b72:	ee                   	out    dx,al
c0022b73:	83 ec 0c             	sub    esp,0xc
c0022b76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b79:	e8 a4 fe ff ff       	call   c0022a22 <PIC::ioWait()>
c0022b7e:	83 c4 10             	add    esp,0x10
c0022b81:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022b87:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022b8b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022b8e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022b91:	ee                   	out    dx,al
c0022b92:	83 ec 0c             	sub    esp,0xc
c0022b95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b98:	e8 85 fe ff ff       	call   c0022a22 <PIC::ioWait()>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022ba3:	0f b6 c0             	movzx  eax,al
c0022ba6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022bac:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022baf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022bb2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022bb5:	ee                   	out    dx,al
c0022bb6:	83 ec 0c             	sub    esp,0xc
c0022bb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bbc:	e8 61 fe ff ff       	call   c0022a22 <PIC::ioWait()>
c0022bc1:	83 c4 10             	add    esp,0x10
c0022bc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022bc7:	0f b6 c0             	movzx  eax,al
c0022bca:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022bd0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022bd3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022bd6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022bd9:	ee                   	out    dx,al
c0022bda:	83 ec 0c             	sub    esp,0xc
c0022bdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022be0:	e8 3d fe ff ff       	call   c0022a22 <PIC::ioWait()>
c0022be5:	83 c4 10             	add    esp,0x10
c0022be8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022bee:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022bf2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022bf5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022bf8:	ee                   	out    dx,al
c0022bf9:	83 ec 0c             	sub    esp,0xc
c0022bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bff:	e8 1e fe ff ff       	call   c0022a22 <PIC::ioWait()>
c0022c04:	83 c4 10             	add    esp,0x10
c0022c07:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022c0d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022c11:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022c14:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022c17:	ee                   	out    dx,al
c0022c18:	83 ec 0c             	sub    esp,0xc
c0022c1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c1e:	e8 ff fd ff ff       	call   c0022a22 <PIC::ioWait()>
c0022c23:	83 c4 10             	add    esp,0x10
c0022c26:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022c2c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022c30:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022c33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022c36:	ee                   	out    dx,al
c0022c37:	83 ec 0c             	sub    esp,0xc
c0022c3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c3d:	e8 e0 fd ff ff       	call   c0022a22 <PIC::ioWait()>
c0022c42:	83 c4 10             	add    esp,0x10
c0022c45:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022c4b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022c4f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022c52:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022c55:	ee                   	out    dx,al
c0022c56:	83 ec 0c             	sub    esp,0xc
c0022c59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c5c:	e8 c1 fd ff ff       	call   c0022a22 <PIC::ioWait()>
c0022c61:	83 c4 10             	add    esp,0x10
c0022c64:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022c68:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022c6e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022c71:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022c74:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022c77:	ee                   	out    dx,al
c0022c78:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022c7c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022c82:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022c85:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022c88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022c8b:	ee                   	out    dx,al
c0022c8c:	90                   	nop
c0022c8d:	c9                   	leave  
c0022c8e:	c3                   	ret    
c0022c8f:	90                   	nop

c0022c90 <PIC::open(int, int, void*)>:
c0022c90:	55                   	push   ebp
c0022c91:	89 e5                	mov    ebp,esp
c0022c93:	83 ec 18             	sub    esp,0x18
c0022c96:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022c9c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022ca0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022ca3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022ca7:	ee                   	out    dx,al
c0022ca8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022cae:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022cb2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022cb5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022cb9:	ee                   	out    dx,al
c0022cba:	83 ec 0c             	sub    esp,0xc
c0022cbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cc0:	e8 5f fe ff ff       	call   c0022b24 <PIC::remap()>
c0022cc5:	83 c4 10             	add    esp,0x10
c0022cc8:	b8 00 00 00 00       	mov    eax,0x0
c0022ccd:	c9                   	leave  
c0022cce:	c3                   	ret    
c0022ccf:	90                   	nop

c0022cd0 <APICTimer::close(int, int, void*)>:
c0022cd0:	b8 00 00 00 00       	mov    eax,0x0
c0022cd5:	c3                   	ret    

c0022cd6 <apicTimerHandler(regs*, void*)>:
c0022cd6:	83 ec 0c             	sub    esp,0xc
c0022cd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cdf:	99                   	cdq    
c0022ce0:	52                   	push   edx
c0022ce1:	50                   	push   eax
c0022ce2:	6a 00                	push   0x0
c0022ce4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022ce9:	e8 7e 07 00 00       	call   c002346c <__udivdi3>
c0022cee:	83 c4 10             	add    esp,0x10
c0022cf1:	83 ec 08             	sub    esp,0x8
c0022cf4:	52                   	push   edx
c0022cf5:	50                   	push   eax
c0022cf6:	e8 62 30 ff ff       	call   c0015d5d <timerHandler(unsigned long long)>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	90                   	nop
c0022cff:	83 c4 0c             	add    esp,0xc
c0022d02:	c3                   	ret    
c0022d03:	90                   	nop

c0022d04 <APICTimer::write(int)>:
c0022d04:	53                   	push   ebx
c0022d05:	83 ec 28             	sub    esp,0x28
c0022d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d10:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d16:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022d1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022d21:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d27:	83 ec 0c             	sub    esp,0xc
c0022d2a:	50                   	push   eax
c0022d2b:	e8 ea f4 ff ff       	call   c002221a <APIC::getBase()>
c0022d30:	83 c4 10             	add    esp,0x10
c0022d33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d37:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c0022d3c:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c0022d42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d4e:	05 e0 03 00 00       	add    eax,0x3e0
c0022d53:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d5d:	05 80 03 00 00       	add    eax,0x380
c0022d62:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022d68:	fb                   	sti    
c0022d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d71:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022d76:	83 d2 00             	adc    edx,0x0
c0022d79:	89 c1                	mov    ecx,eax
c0022d7b:	89 d3                	mov    ebx,edx
c0022d7d:	a1 d0 aa 02 c0       	mov    eax,ds:0xc002aad0
c0022d82:	8b 15 d4 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aad4
c0022d88:	39 c8                	cmp    eax,ecx
c0022d8a:	89 d0                	mov    eax,edx
c0022d8c:	19 d8                	sbb    eax,ebx
c0022d8e:	73 02                	jae    c0022d92 <APICTimer::write(int)+0x8e>
c0022d90:	eb d7                	jmp    c0022d69 <APICTimer::write(int)+0x65>
c0022d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d96:	05 20 03 00 00       	add    eax,0x320
c0022d9b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022da5:	05 90 03 00 00       	add    eax,0x390
c0022daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dac:	f7 d0                	not    eax
c0022dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022db2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022db6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dba:	ba 00 00 00 00       	mov    edx,0x0
c0022dbf:	f7 f3                	div    ebx
c0022dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022dc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022dc9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022dcf:	0d 00 00 02 00       	or     eax,0x20000
c0022dd4:	89 c2                	mov    edx,eax
c0022dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dda:	05 20 03 00 00       	add    eax,0x320
c0022ddf:	89 10                	mov    DWORD PTR [eax],edx
c0022de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022de5:	05 e0 03 00 00       	add    eax,0x3e0
c0022dea:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022df4:	05 80 03 00 00       	add    eax,0x380
c0022df9:	89 c2                	mov    edx,eax
c0022dfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022dff:	89 02                	mov    DWORD PTR [edx],eax
c0022e01:	90                   	nop
c0022e02:	83 c4 28             	add    esp,0x28
c0022e05:	5b                   	pop    ebx
c0022e06:	c3                   	ret    
c0022e07:	90                   	nop

c0022e08 <APICTimer::open(int, int, void*)>:
c0022e08:	57                   	push   edi
c0022e09:	56                   	push   esi
c0022e0a:	53                   	push   ebx
c0022e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e11:	83 c0 24             	add    eax,0x24
c0022e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e16:	83 ec 08             	sub    esp,0x8
c0022e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e21:	ff d0                	call   eax
c0022e23:	83 c4 10             	add    esp,0x10
c0022e26:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0022e2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022e31:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022e37:	83 ec 0c             	sub    esp,0xc
c0022e3a:	50                   	push   eax
c0022e3b:	e8 da f3 ff ff       	call   c002221a <APIC::getBase()>
c0022e40:	83 c4 10             	add    esp,0x10
c0022e43:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e4d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e53:	0f b6 f8             	movzx  edi,al
c0022e56:	89 d0                	mov    eax,edx
c0022e58:	ba 00 00 00 00       	mov    edx,0x0
c0022e5d:	89 c1                	mov    ecx,eax
c0022e5f:	80 e5 ff             	and    ch,0xff
c0022e62:	89 cb                	mov    ebx,ecx
c0022e64:	0f b6 f2             	movzx  esi,dl
c0022e67:	89 d8                	mov    eax,ebx
c0022e69:	89 f2                	mov    edx,esi
c0022e6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e6f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022e72:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022e76:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022e7a:	83 e0 00             	and    eax,0x0
c0022e7d:	09 d0                	or     eax,edx
c0022e7f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e8d:	8d 50 01             	lea    edx,[eax+0x1]
c0022e90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e94:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022e9a:	0f b6 d0             	movzx  edx,al
c0022e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ea1:	83 c2 08             	add    edx,0x8
c0022ea4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022ea8:	0f b6 c9             	movzx  ecx,cl
c0022eab:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022eb1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022ebd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022ec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ecb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022ed1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ed5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022edb:	83 ec 0c             	sub    esp,0xc
c0022ede:	51                   	push   ecx
c0022edf:	6a 01                	push   0x1
c0022ee1:	68 d6 2c 02 c0       	push   0xc0022cd6
c0022ee6:	52                   	push   edx
c0022ee7:	50                   	push   eax
c0022ee8:	e8 c5 06 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022eed:	83 c4 20             	add    esp,0x20
c0022ef0:	89 c2                	mov    edx,eax
c0022ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022efc:	b8 00 00 00 00       	mov    eax,0x0
c0022f01:	5b                   	pop    ebx
c0022f02:	5e                   	pop    esi
c0022f03:	5f                   	pop    edi
c0022f04:	c3                   	ret    
c0022f05:	90                   	nop

c0022f06 <APICTimer::APICTimer()>:
c0022f06:	83 ec 0c             	sub    esp,0xc
c0022f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0d:	83 ec 08             	sub    esp,0x8
c0022f10:	68 6c 93 02 c0       	push   0xc002936c
c0022f15:	50                   	push   eax
c0022f16:	e8 b3 2d ff ff       	call   c0015cce <Timer::Timer(char const*)>
c0022f1b:	83 c4 10             	add    esp,0x10
c0022f1e:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0022f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f27:	89 10                	mov    DWORD PTR [eax],edx
c0022f29:	90                   	nop
c0022f2a:	83 c4 0c             	add    esp,0xc
c0022f2d:	c3                   	ret    

c0022f2e <PIT::write(int)>:
c0022f2e:	83 ec 10             	sub    esp,0x10
c0022f31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022f3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f43:	a3 84 c7 02 c0       	mov    ds:0xc002c784,eax
c0022f48:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022f4d:	99                   	cdq    
c0022f4e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022f52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f56:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022f5d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022f62:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022f66:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022f6b:	ee                   	out    dx,al
c0022f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f70:	0f b6 c0             	movzx  eax,al
c0022f73:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022f7a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022f7e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022f82:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022f87:	ee                   	out    dx,al
c0022f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f8c:	c1 f8 08             	sar    eax,0x8
c0022f8f:	0f b6 c0             	movzx  eax,al
c0022f92:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022f99:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022f9d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022fa1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022fa6:	ee                   	out    dx,al
c0022fa7:	90                   	nop
c0022fa8:	83 c4 10             	add    esp,0x10
c0022fab:	c3                   	ret    

c0022fac <pitHandler(regs*, void*)>:
c0022fac:	83 ec 0c             	sub    esp,0xc
c0022faf:	a1 84 c7 02 c0       	mov    eax,ds:0xc002c784
c0022fb4:	99                   	cdq    
c0022fb5:	52                   	push   edx
c0022fb6:	50                   	push   eax
c0022fb7:	6a 00                	push   0x0
c0022fb9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022fbe:	e8 a9 04 00 00       	call   c002346c <__udivdi3>
c0022fc3:	83 c4 10             	add    esp,0x10
c0022fc6:	83 ec 08             	sub    esp,0x8
c0022fc9:	52                   	push   edx
c0022fca:	50                   	push   eax
c0022fcb:	e8 8d 2d ff ff       	call   c0015d5d <timerHandler(unsigned long long)>
c0022fd0:	83 c4 10             	add    esp,0x10
c0022fd3:	90                   	nop
c0022fd4:	83 c4 0c             	add    esp,0xc
c0022fd7:	c3                   	ret    

c0022fd8 <PIT::open(int, int, void*)>:
c0022fd8:	83 ec 0c             	sub    esp,0xc
c0022fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fe1:	83 c0 24             	add    eax,0x24
c0022fe4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fe6:	83 ec 08             	sub    esp,0x8
c0022fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ff1:	ff d0                	call   eax
c0022ff3:	83 c4 10             	add    esp,0x10
c0022ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffa:	83 ec 0c             	sub    esp,0xc
c0022ffd:	6a 00                	push   0x0
c0022fff:	6a 01                	push   0x1
c0023001:	68 ac 2f 02 c0       	push   0xc0022fac
c0023006:	6a 00                	push   0x0
c0023008:	50                   	push   eax
c0023009:	e8 a4 05 ff ff       	call   c00135b2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002300e:	83 c4 20             	add    esp,0x20
c0023011:	89 c2                	mov    edx,eax
c0023013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023017:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002301d:	b8 00 00 00 00       	mov    eax,0x0
c0023022:	83 c4 0c             	add    esp,0xc
c0023025:	c3                   	ret    

c0023026 <PIT::close(int, int, void*)>:
c0023026:	83 ec 0c             	sub    esp,0xc
c0023029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303b:	6a 01                	push   0x1
c002303d:	68 ac 2f 02 c0       	push   0xc0022fac
c0023042:	6a 00                	push   0x0
c0023044:	50                   	push   eax
c0023045:	e8 a6 05 ff ff       	call   c00135f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002304a:	83 c4 10             	add    esp,0x10
c002304d:	b8 00 00 00 00       	mov    eax,0x0
c0023052:	83 c4 0c             	add    esp,0xc
c0023055:	c3                   	ret    

c0023056 <PIT::PIT()>:
c0023056:	83 ec 0c             	sub    esp,0xc
c0023059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305d:	83 ec 08             	sub    esp,0x8
c0023060:	68 a8 93 02 c0       	push   0xc00293a8
c0023065:	50                   	push   eax
c0023066:	e8 63 2c ff ff       	call   c0015cce <Timer::Timer(char const*)>
c002306b:	83 c4 10             	add    esp,0x10
c002306e:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0023073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023077:	89 10                	mov    DWORD PTR [eax],edx
c0023079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023083:	0f b6 d0             	movzx  edx,al
c0023086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002308a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023095:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002309b:	0f b6 d0             	movzx  edx,al
c002309e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00230a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230b1:	8d 50 01             	lea    edx,[eax+0x1]
c00230b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00230be:	0f b6 d0             	movzx  edx,al
c00230c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230c9:	83 e1 3f             	and    ecx,0x3f
c00230cc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230d0:	90                   	nop
c00230d1:	83 c4 0c             	add    esp,0xc
c00230d4:	c3                   	ret    
c00230d5:	66 90                	xchg   ax,ax
c00230d7:	66 90                	xchg   ax,ax
c00230d9:	66 90                	xchg   ax,ax
c00230db:	66 90                	xchg   ax,ax
c00230dd:	66 90                	xchg   ax,ax
c00230df:	90                   	nop

c00230e0 <avxDetect>:
c00230e0:	b8 00 00 00 00       	mov    eax,0x0
c00230e5:	c3                   	ret    

c00230e6 <avxSave>:
c00230e6:	c3                   	ret    

c00230e7 <avxLoad>:
c00230e7:	c3                   	ret    

c00230e8 <avxInit>:
c00230e8:	c3                   	ret    

c00230e9 <avxClose>:
c00230e9:	c3                   	ret    
c00230ea:	66 90                	xchg   ax,ax
c00230ec:	66 90                	xchg   ax,ax
c00230ee:	66 90                	xchg   ax,ax

c00230f0 <sseDetect>:
c00230f0:	b8 01 00 00 00       	mov    eax,0x1
c00230f5:	0f a2                	cpuid  
c00230f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00230fd:	74 06                	je     c0023105 <sseDetect.noSSE>
c00230ff:	b8 01 00 00 00       	mov    eax,0x1
c0023104:	c3                   	ret    

c0023105 <sseDetect.noSSE>:
c0023105:	b8 00 00 00 00       	mov    eax,0x0
c002310a:	c3                   	ret    

c002310b <sseSave>:
c002310b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023110:	c3                   	ret    

c0023111 <sseLoad>:
c0023111:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023116:	c3                   	ret    

c0023117 <sseInit>:
c0023117:	e8 40 00 00 00       	call   c002315c <x87Init>
c002311c:	0f 20 e0             	mov    eax,cr4
c002311f:	66 0d 00 06          	or     ax,0x600
c0023123:	0f 22 e0             	mov    cr4,eax
c0023126:	c3                   	ret    

c0023127 <sseClose>:
c0023127:	c3                   	ret    
c0023128:	66 90                	xchg   ax,ax
c002312a:	66 90                	xchg   ax,ax
c002312c:	66 90                	xchg   ax,ax
c002312e:	66 90                	xchg   ax,ax

c0023130 <value_37F>:
c0023130:	7f 03                	jg     c0023135 <value_37A+0x1>

c0023132 <value_37E>:
c0023132:	7e 03                	jle    c0023137 <x87Detect+0x1>

c0023134 <value_37A>:
c0023134:	7a 03                	jp     c0023139 <x87Detect+0x3>

c0023136 <x87Detect>:
c0023136:	b8 01 00 00 00       	mov    eax,0x1
c002313b:	0f a2                	cpuid  
c002313d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023143:	74 06                	je     c002314b <x87Detect.nox87>
c0023145:	b8 01 00 00 00       	mov    eax,0x1
c002314a:	c3                   	ret    

c002314b <x87Detect.nox87>:
c002314b:	b8 00 00 00 00       	mov    eax,0x0
c0023150:	c3                   	ret    

c0023151 <x87Save>:
c0023151:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023156:	c3                   	ret    

c0023157 <x87Load>:
c0023157:	dd 64 24 08          	frstor [esp+0x8]
c002315b:	c3                   	ret    

c002315c <x87Init>:
c002315c:	9b db e3             	finit  
c002315f:	0f 20 c0             	mov    eax,cr0
c0023162:	66 25 fb ff          	and    ax,0xfffb
c0023166:	66 0d 22 00          	or     ax,0x22
c002316a:	0f 22 c0             	mov    cr0,eax
c002316d:	0f 06                	clts   
c002316f:	d9 2d 34 31 02 c0    	fldcw  WORD PTR ds:0xc0023134
c0023175:	c3                   	ret    

c0023176 <x87Close>:
c0023176:	c3                   	ret    
c0023177:	90                   	nop

c0023178 <__do_global_ctors_aux>:
c0023178:	a1 d0 5b 02 c0       	mov    eax,ds:0xc0025bd0
c002317d:	83 f8 ff             	cmp    eax,0xffffffff
c0023180:	74 1a                	je     c002319c <__do_global_ctors_aux+0x24>
c0023182:	55                   	push   ebp
c0023183:	89 e5                	mov    ebp,esp
c0023185:	53                   	push   ebx
c0023186:	52                   	push   edx
c0023187:	bb d0 5b 02 c0       	mov    ebx,0xc0025bd0
c002318c:	ff d0                	call   eax
c002318e:	83 eb 04             	sub    ebx,0x4
c0023191:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023193:	83 f8 ff             	cmp    eax,0xffffffff
c0023196:	75 f4                	jne    c002318c <__do_global_ctors_aux+0x14>
c0023198:	58                   	pop    eax
c0023199:	5b                   	pop    ebx
c002319a:	5d                   	pop    ebp
c002319b:	c3                   	ret    
c002319c:	c3                   	ret    
c002319d:	66 90                	xchg   ax,ax
c002319f:	90                   	nop

c00231a0 <__divdi3>:
c00231a0:	55                   	push   ebp
c00231a1:	57                   	push   edi
c00231a2:	56                   	push   esi
c00231a3:	53                   	push   ebx
c00231a4:	83 ec 1c             	sub    esp,0x1c
c00231a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00231ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00231af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00231b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00231b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00231ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00231be:	85 db                	test   ebx,ebx
c00231c0:	0f 88 8e 00 00 00    	js     c0023254 <__divdi3+0xb4>
c00231c6:	89 dd                	mov    ebp,ebx
c00231c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00231d0:	89 d3                	mov    ebx,edx
c00231d2:	85 d2                	test   edx,edx
c00231d4:	79 0d                	jns    c00231e3 <__divdi3+0x43>
c00231d6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00231da:	f7 d8                	neg    eax
c00231dc:	83 d2 00             	adc    edx,0x0
c00231df:	f7 da                	neg    edx
c00231e1:	89 d3                	mov    ebx,edx
c00231e3:	89 c7                	mov    edi,eax
c00231e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00231e8:	85 db                	test   ebx,ebx
c00231ea:	75 48                	jne    c0023234 <__divdi3+0x94>
c00231ec:	39 ef                	cmp    edi,ebp
c00231ee:	76 24                	jbe    c0023214 <__divdi3+0x74>
c00231f0:	89 ea                	mov    edx,ebp
c00231f2:	f7 f7                	div    edi
c00231f4:	89 c1                	mov    ecx,eax
c00231f6:	31 f6                	xor    esi,esi
c00231f8:	89 c8                	mov    eax,ecx
c00231fa:	89 f2                	mov    edx,esi
c00231fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023200:	85 c9                	test   ecx,ecx
c0023202:	74 07                	je     c002320b <__divdi3+0x6b>
c0023204:	f7 d8                	neg    eax
c0023206:	83 d2 00             	adc    edx,0x0
c0023209:	f7 da                	neg    edx
c002320b:	83 c4 1c             	add    esp,0x1c
c002320e:	5b                   	pop    ebx
c002320f:	5e                   	pop    esi
c0023210:	5f                   	pop    edi
c0023211:	5d                   	pop    ebp
c0023212:	c3                   	ret    
c0023213:	90                   	nop
c0023214:	85 ff                	test   edi,edi
c0023216:	75 0b                	jne    c0023223 <__divdi3+0x83>
c0023218:	b8 01 00 00 00       	mov    eax,0x1
c002321d:	31 d2                	xor    edx,edx
c002321f:	f7 f3                	div    ebx
c0023221:	89 c7                	mov    edi,eax
c0023223:	31 d2                	xor    edx,edx
c0023225:	89 e8                	mov    eax,ebp
c0023227:	f7 f7                	div    edi
c0023229:	89 c6                	mov    esi,eax
c002322b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002322e:	f7 f7                	div    edi
c0023230:	89 c1                	mov    ecx,eax
c0023232:	eb c4                	jmp    c00231f8 <__divdi3+0x58>
c0023234:	39 eb                	cmp    ebx,ebp
c0023236:	77 3c                	ja     c0023274 <__divdi3+0xd4>
c0023238:	0f bd f3             	bsr    esi,ebx
c002323b:	83 f6 1f             	xor    esi,0x1f
c002323e:	75 40                	jne    c0023280 <__divdi3+0xe0>
c0023240:	39 eb                	cmp    ebx,ebp
c0023242:	72 09                	jb     c002324d <__divdi3+0xad>
c0023244:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023247:	0f 87 97 00 00 00    	ja     c00232e4 <__divdi3+0x144>
c002324d:	b9 01 00 00 00       	mov    ecx,0x1
c0023252:	eb a4                	jmp    c00231f8 <__divdi3+0x58>
c0023254:	f7 d9                	neg    ecx
c0023256:	83 d3 00             	adc    ebx,0x0
c0023259:	f7 db                	neg    ebx
c002325b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002325e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023262:	89 dd                	mov    ebp,ebx
c0023264:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002326c:	e9 5f ff ff ff       	jmp    c00231d0 <__divdi3+0x30>
c0023271:	8d 76 00             	lea    esi,[esi+0x0]
c0023274:	31 f6                	xor    esi,esi
c0023276:	31 c9                	xor    ecx,ecx
c0023278:	e9 7b ff ff ff       	jmp    c00231f8 <__divdi3+0x58>
c002327d:	8d 76 00             	lea    esi,[esi+0x0]
c0023280:	b8 20 00 00 00       	mov    eax,0x20
c0023285:	29 f0                	sub    eax,esi
c0023287:	89 f1                	mov    ecx,esi
c0023289:	d3 e3                	shl    ebx,cl
c002328b:	89 fa                	mov    edx,edi
c002328d:	88 c1                	mov    cl,al
c002328f:	d3 ea                	shr    edx,cl
c0023291:	09 da                	or     edx,ebx
c0023293:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023297:	89 f1                	mov    ecx,esi
c0023299:	d3 e7                	shl    edi,cl
c002329b:	89 eb                	mov    ebx,ebp
c002329d:	88 c1                	mov    cl,al
c002329f:	d3 eb                	shr    ebx,cl
c00232a1:	89 f1                	mov    ecx,esi
c00232a3:	d3 e5                	shl    ebp,cl
c00232a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00232a8:	88 c1                	mov    cl,al
c00232aa:	d3 ea                	shr    edx,cl
c00232ac:	09 d5                	or     ebp,edx
c00232ae:	89 e8                	mov    eax,ebp
c00232b0:	89 da                	mov    edx,ebx
c00232b2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00232b6:	89 d3                	mov    ebx,edx
c00232b8:	89 c5                	mov    ebp,eax
c00232ba:	f7 e7                	mul    edi
c00232bc:	39 d3                	cmp    ebx,edx
c00232be:	72 18                	jb     c00232d8 <__divdi3+0x138>
c00232c0:	74 0a                	je     c00232cc <__divdi3+0x12c>
c00232c2:	89 e9                	mov    ecx,ebp
c00232c4:	31 f6                	xor    esi,esi
c00232c6:	e9 2d ff ff ff       	jmp    c00231f8 <__divdi3+0x58>
c00232cb:	90                   	nop
c00232cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00232cf:	89 f1                	mov    ecx,esi
c00232d1:	d3 e7                	shl    edi,cl
c00232d3:	39 c7                	cmp    edi,eax
c00232d5:	73 eb                	jae    c00232c2 <__divdi3+0x122>
c00232d7:	90                   	nop
c00232d8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00232db:	31 f6                	xor    esi,esi
c00232dd:	e9 16 ff ff ff       	jmp    c00231f8 <__divdi3+0x58>
c00232e2:	66 90                	xchg   ax,ax
c00232e4:	31 c9                	xor    ecx,ecx
c00232e6:	e9 0d ff ff ff       	jmp    c00231f8 <__divdi3+0x58>
c00232eb:	90                   	nop

c00232ec <__moddi3>:
c00232ec:	55                   	push   ebp
c00232ed:	57                   	push   edi
c00232ee:	56                   	push   esi
c00232ef:	53                   	push   ebx
c00232f0:	83 ec 2c             	sub    esp,0x2c
c00232f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00232f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00232fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00232ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023303:	85 db                	test   ebx,ebx
c0023305:	0f 88 85 00 00 00    	js     c0023390 <__moddi3+0xa4>
c002330b:	89 de                	mov    esi,ebx
c002330d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023315:	89 d7                	mov    edi,edx
c0023317:	85 d2                	test   edx,edx
c0023319:	79 09                	jns    c0023324 <__moddi3+0x38>
c002331b:	f7 d8                	neg    eax
c002331d:	83 d2 00             	adc    edx,0x0
c0023320:	f7 da                	neg    edx
c0023322:	89 d7                	mov    edi,edx
c0023324:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023328:	89 cd                	mov    ebp,ecx
c002332a:	85 ff                	test   edi,edi
c002332c:	75 52                	jne    c0023380 <__moddi3+0x94>
c002332e:	89 c3                	mov    ebx,eax
c0023330:	39 f0                	cmp    eax,esi
c0023332:	76 24                	jbe    c0023358 <__moddi3+0x6c>
c0023334:	89 c8                	mov    eax,ecx
c0023336:	89 f2                	mov    edx,esi
c0023338:	f7 f3                	div    ebx
c002333a:	89 d6                	mov    esi,edx
c002333c:	89 f0                	mov    eax,esi
c002333e:	31 d2                	xor    edx,edx
c0023340:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023344:	85 c9                	test   ecx,ecx
c0023346:	74 07                	je     c002334f <__moddi3+0x63>
c0023348:	f7 d8                	neg    eax
c002334a:	83 d2 00             	adc    edx,0x0
c002334d:	f7 da                	neg    edx
c002334f:	83 c4 2c             	add    esp,0x2c
c0023352:	5b                   	pop    ebx
c0023353:	5e                   	pop    esi
c0023354:	5f                   	pop    edi
c0023355:	5d                   	pop    ebp
c0023356:	c3                   	ret    
c0023357:	90                   	nop
c0023358:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002335c:	85 db                	test   ebx,ebx
c002335e:	75 0d                	jne    c002336d <__moddi3+0x81>
c0023360:	b8 01 00 00 00       	mov    eax,0x1
c0023365:	31 d2                	xor    edx,edx
c0023367:	f7 f7                	div    edi
c0023369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002336d:	89 f0                	mov    eax,esi
c002336f:	31 d2                	xor    edx,edx
c0023371:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023375:	f7 f7                	div    edi
c0023377:	89 e8                	mov    eax,ebp
c0023379:	f7 f7                	div    edi
c002337b:	89 d6                	mov    esi,edx
c002337d:	eb bd                	jmp    c002333c <__moddi3+0x50>
c002337f:	90                   	nop
c0023380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023384:	39 f7                	cmp    edi,esi
c0023386:	76 20                	jbe    c00233a8 <__moddi3+0xbc>
c0023388:	89 c8                	mov    eax,ecx
c002338a:	89 f2                	mov    edx,esi
c002338c:	eb b2                	jmp    c0023340 <__moddi3+0x54>
c002338e:	66 90                	xchg   ax,ax
c0023390:	f7 d9                	neg    ecx
c0023392:	83 d3 00             	adc    ebx,0x0
c0023395:	f7 db                	neg    ebx
c0023397:	89 de                	mov    esi,ebx
c0023399:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00233a1:	e9 6f ff ff ff       	jmp    c0023315 <__moddi3+0x29>
c00233a6:	66 90                	xchg   ax,ax
c00233a8:	0f bd c7             	bsr    eax,edi
c00233ab:	83 f0 1f             	xor    eax,0x1f
c00233ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00233b2:	75 24                	jne    c00233d8 <__moddi3+0xec>
c00233b4:	39 f7                	cmp    edi,esi
c00233b6:	72 06                	jb     c00233be <__moddi3+0xd2>
c00233b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00233bc:	77 0c                	ja     c00233ca <__moddi3+0xde>
c00233be:	89 e9                	mov    ecx,ebp
c00233c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00233c4:	19 fe                	sbb    esi,edi
c00233c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00233ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233ce:	89 f2                	mov    edx,esi
c00233d0:	e9 6b ff ff ff       	jmp    c0023340 <__moddi3+0x54>
c00233d5:	8d 76 00             	lea    esi,[esi+0x0]
c00233d8:	b8 20 00 00 00       	mov    eax,0x20
c00233dd:	89 c2                	mov    edx,eax
c00233df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00233e3:	29 da                	sub    edx,ebx
c00233e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00233e9:	88 d9                	mov    cl,bl
c00233eb:	d3 e7                	shl    edi,cl
c00233ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233f1:	88 d1                	mov    cl,dl
c00233f3:	d3 e8                	shr    eax,cl
c00233f5:	09 c7                	or     edi,eax
c00233f7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00233fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00233ff:	89 d8                	mov    eax,ebx
c0023401:	88 d9                	mov    cl,bl
c0023403:	d3 e7                	shl    edi,cl
c0023405:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023409:	89 f3                	mov    ebx,esi
c002340b:	88 d1                	mov    cl,dl
c002340d:	d3 eb                	shr    ebx,cl
c002340f:	89 c7                	mov    edi,eax
c0023411:	88 c1                	mov    cl,al
c0023413:	d3 e6                	shl    esi,cl
c0023415:	89 e8                	mov    eax,ebp
c0023417:	88 d1                	mov    cl,dl
c0023419:	d3 e8                	shr    eax,cl
c002341b:	09 f0                	or     eax,esi
c002341d:	89 f9                	mov    ecx,edi
c002341f:	d3 e5                	shl    ebp,cl
c0023421:	89 da                	mov    edx,ebx
c0023423:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023427:	89 d3                	mov    ebx,edx
c0023429:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002342d:	89 c6                	mov    esi,eax
c002342f:	89 d1                	mov    ecx,edx
c0023431:	39 d3                	cmp    ebx,edx
c0023433:	72 27                	jb     c002345c <__moddi3+0x170>
c0023435:	74 21                	je     c0023458 <__moddi3+0x16c>
c0023437:	29 f5                	sub    ebp,esi
c0023439:	19 cb                	sbb    ebx,ecx
c002343b:	89 de                	mov    esi,ebx
c002343d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023441:	d3 e6                	shl    esi,cl
c0023443:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023447:	89 f9                	mov    ecx,edi
c0023449:	d3 ed                	shr    ebp,cl
c002344b:	09 ee                	or     esi,ebp
c002344d:	89 f0                	mov    eax,esi
c002344f:	d3 eb                	shr    ebx,cl
c0023451:	89 da                	mov    edx,ebx
c0023453:	e9 e8 fe ff ff       	jmp    c0023340 <__moddi3+0x54>
c0023458:	39 c5                	cmp    ebp,eax
c002345a:	73 db                	jae    c0023437 <__moddi3+0x14b>
c002345c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023460:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023464:	89 d1                	mov    ecx,edx
c0023466:	89 c6                	mov    esi,eax
c0023468:	eb cd                	jmp    c0023437 <__moddi3+0x14b>
c002346a:	66 90                	xchg   ax,ax

c002346c <__udivdi3>:
c002346c:	55                   	push   ebp
c002346d:	57                   	push   edi
c002346e:	56                   	push   esi
c002346f:	53                   	push   ebx
c0023470:	83 ec 1c             	sub    esp,0x1c
c0023473:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023477:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002347b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002347f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023483:	85 d2                	test   edx,edx
c0023485:	75 41                	jne    c00234c8 <__udivdi3+0x5c>
c0023487:	39 f7                	cmp    edi,esi
c0023489:	76 15                	jbe    c00234a0 <__udivdi3+0x34>
c002348b:	89 e8                	mov    eax,ebp
c002348d:	89 f2                	mov    edx,esi
c002348f:	f7 f7                	div    edi
c0023491:	31 db                	xor    ebx,ebx
c0023493:	89 da                	mov    edx,ebx
c0023495:	83 c4 1c             	add    esp,0x1c
c0023498:	5b                   	pop    ebx
c0023499:	5e                   	pop    esi
c002349a:	5f                   	pop    edi
c002349b:	5d                   	pop    ebp
c002349c:	c3                   	ret    
c002349d:	8d 76 00             	lea    esi,[esi+0x0]
c00234a0:	89 f9                	mov    ecx,edi
c00234a2:	85 ff                	test   edi,edi
c00234a4:	75 0b                	jne    c00234b1 <__udivdi3+0x45>
c00234a6:	b8 01 00 00 00       	mov    eax,0x1
c00234ab:	31 d2                	xor    edx,edx
c00234ad:	f7 f7                	div    edi
c00234af:	89 c1                	mov    ecx,eax
c00234b1:	31 d2                	xor    edx,edx
c00234b3:	89 f0                	mov    eax,esi
c00234b5:	f7 f1                	div    ecx
c00234b7:	89 c3                	mov    ebx,eax
c00234b9:	89 e8                	mov    eax,ebp
c00234bb:	f7 f1                	div    ecx
c00234bd:	89 da                	mov    edx,ebx
c00234bf:	83 c4 1c             	add    esp,0x1c
c00234c2:	5b                   	pop    ebx
c00234c3:	5e                   	pop    esi
c00234c4:	5f                   	pop    edi
c00234c5:	5d                   	pop    ebp
c00234c6:	c3                   	ret    
c00234c7:	90                   	nop
c00234c8:	39 f2                	cmp    edx,esi
c00234ca:	77 1c                	ja     c00234e8 <__udivdi3+0x7c>
c00234cc:	0f bd da             	bsr    ebx,edx
c00234cf:	83 f3 1f             	xor    ebx,0x1f
c00234d2:	75 24                	jne    c00234f8 <__udivdi3+0x8c>
c00234d4:	39 f2                	cmp    edx,esi
c00234d6:	72 08                	jb     c00234e0 <__udivdi3+0x74>
c00234d8:	39 ef                	cmp    edi,ebp
c00234da:	0f 87 84 00 00 00    	ja     c0023564 <__udivdi3+0xf8>
c00234e0:	b8 01 00 00 00       	mov    eax,0x1
c00234e5:	eb ac                	jmp    c0023493 <__udivdi3+0x27>
c00234e7:	90                   	nop
c00234e8:	31 db                	xor    ebx,ebx
c00234ea:	31 c0                	xor    eax,eax
c00234ec:	89 da                	mov    edx,ebx
c00234ee:	83 c4 1c             	add    esp,0x1c
c00234f1:	5b                   	pop    ebx
c00234f2:	5e                   	pop    esi
c00234f3:	5f                   	pop    edi
c00234f4:	5d                   	pop    ebp
c00234f5:	c3                   	ret    
c00234f6:	66 90                	xchg   ax,ax
c00234f8:	b8 20 00 00 00       	mov    eax,0x20
c00234fd:	29 d8                	sub    eax,ebx
c00234ff:	88 d9                	mov    cl,bl
c0023501:	d3 e2                	shl    edx,cl
c0023503:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023507:	89 fa                	mov    edx,edi
c0023509:	88 c1                	mov    cl,al
c002350b:	d3 ea                	shr    edx,cl
c002350d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023511:	09 d1                	or     ecx,edx
c0023513:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023517:	88 d9                	mov    cl,bl
c0023519:	d3 e7                	shl    edi,cl
c002351b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002351f:	89 f7                	mov    edi,esi
c0023521:	88 c1                	mov    cl,al
c0023523:	d3 ef                	shr    edi,cl
c0023525:	88 d9                	mov    cl,bl
c0023527:	d3 e6                	shl    esi,cl
c0023529:	89 ea                	mov    edx,ebp
c002352b:	88 c1                	mov    cl,al
c002352d:	d3 ea                	shr    edx,cl
c002352f:	09 d6                	or     esi,edx
c0023531:	89 f0                	mov    eax,esi
c0023533:	89 fa                	mov    edx,edi
c0023535:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023539:	89 d7                	mov    edi,edx
c002353b:	89 c6                	mov    esi,eax
c002353d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023541:	39 d7                	cmp    edi,edx
c0023543:	72 13                	jb     c0023558 <__udivdi3+0xec>
c0023545:	74 09                	je     c0023550 <__udivdi3+0xe4>
c0023547:	89 f0                	mov    eax,esi
c0023549:	31 db                	xor    ebx,ebx
c002354b:	e9 43 ff ff ff       	jmp    c0023493 <__udivdi3+0x27>
c0023550:	88 d9                	mov    cl,bl
c0023552:	d3 e5                	shl    ebp,cl
c0023554:	39 c5                	cmp    ebp,eax
c0023556:	73 ef                	jae    c0023547 <__udivdi3+0xdb>
c0023558:	8d 46 ff             	lea    eax,[esi-0x1]
c002355b:	31 db                	xor    ebx,ebx
c002355d:	e9 31 ff ff ff       	jmp    c0023493 <__udivdi3+0x27>
c0023562:	66 90                	xchg   ax,ax
c0023564:	31 c0                	xor    eax,eax
c0023566:	e9 28 ff ff ff       	jmp    c0023493 <__udivdi3+0x27>
c002356b:	90                   	nop

c002356c <__umoddi3>:
c002356c:	55                   	push   ebp
c002356d:	57                   	push   edi
c002356e:	56                   	push   esi
c002356f:	53                   	push   ebx
c0023570:	83 ec 1c             	sub    esp,0x1c
c0023573:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023577:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002357b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002357f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023583:	89 da                	mov    edx,ebx
c0023585:	85 c0                	test   eax,eax
c0023587:	75 37                	jne    c00235c0 <__umoddi3+0x54>
c0023589:	39 df                	cmp    edi,ebx
c002358b:	76 13                	jbe    c00235a0 <__umoddi3+0x34>
c002358d:	89 f0                	mov    eax,esi
c002358f:	f7 f7                	div    edi
c0023591:	89 d0                	mov    eax,edx
c0023593:	31 d2                	xor    edx,edx
c0023595:	83 c4 1c             	add    esp,0x1c
c0023598:	5b                   	pop    ebx
c0023599:	5e                   	pop    esi
c002359a:	5f                   	pop    edi
c002359b:	5d                   	pop    ebp
c002359c:	c3                   	ret    
c002359d:	8d 76 00             	lea    esi,[esi+0x0]
c00235a0:	89 fd                	mov    ebp,edi
c00235a2:	85 ff                	test   edi,edi
c00235a4:	75 0b                	jne    c00235b1 <__umoddi3+0x45>
c00235a6:	b8 01 00 00 00       	mov    eax,0x1
c00235ab:	31 d2                	xor    edx,edx
c00235ad:	f7 f7                	div    edi
c00235af:	89 c5                	mov    ebp,eax
c00235b1:	89 d8                	mov    eax,ebx
c00235b3:	31 d2                	xor    edx,edx
c00235b5:	f7 f5                	div    ebp
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	f7 f5                	div    ebp
c00235bb:	89 d0                	mov    eax,edx
c00235bd:	eb d4                	jmp    c0023593 <__umoddi3+0x27>
c00235bf:	90                   	nop
c00235c0:	89 f1                	mov    ecx,esi
c00235c2:	39 d8                	cmp    eax,ebx
c00235c4:	76 0a                	jbe    c00235d0 <__umoddi3+0x64>
c00235c6:	89 f0                	mov    eax,esi
c00235c8:	83 c4 1c             	add    esp,0x1c
c00235cb:	5b                   	pop    ebx
c00235cc:	5e                   	pop    esi
c00235cd:	5f                   	pop    edi
c00235ce:	5d                   	pop    ebp
c00235cf:	c3                   	ret    
c00235d0:	0f bd e8             	bsr    ebp,eax
c00235d3:	83 f5 1f             	xor    ebp,0x1f
c00235d6:	75 1c                	jne    c00235f4 <__umoddi3+0x88>
c00235d8:	39 d8                	cmp    eax,ebx
c00235da:	72 04                	jb     c00235e0 <__umoddi3+0x74>
c00235dc:	39 f7                	cmp    edi,esi
c00235de:	77 08                	ja     c00235e8 <__umoddi3+0x7c>
c00235e0:	89 da                	mov    edx,ebx
c00235e2:	29 fe                	sub    esi,edi
c00235e4:	19 c2                	sbb    edx,eax
c00235e6:	89 f1                	mov    ecx,esi
c00235e8:	89 c8                	mov    eax,ecx
c00235ea:	83 c4 1c             	add    esp,0x1c
c00235ed:	5b                   	pop    ebx
c00235ee:	5e                   	pop    esi
c00235ef:	5f                   	pop    edi
c00235f0:	5d                   	pop    ebp
c00235f1:	c3                   	ret    
c00235f2:	66 90                	xchg   ax,ax
c00235f4:	ba 20 00 00 00       	mov    edx,0x20
c00235f9:	29 ea                	sub    edx,ebp
c00235fb:	89 e9                	mov    ecx,ebp
c00235fd:	d3 e0                	shl    eax,cl
c00235ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023603:	89 f8                	mov    eax,edi
c0023605:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023609:	88 d1                	mov    cl,dl
c002360b:	d3 e8                	shr    eax,cl
c002360d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023611:	09 c1                	or     ecx,eax
c0023613:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023617:	89 e9                	mov    ecx,ebp
c0023619:	d3 e7                	shl    edi,cl
c002361b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002361f:	89 d8                	mov    eax,ebx
c0023621:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023625:	88 d1                	mov    cl,dl
c0023627:	d3 e8                	shr    eax,cl
c0023629:	89 c7                	mov    edi,eax
c002362b:	89 e9                	mov    ecx,ebp
c002362d:	d3 e3                	shl    ebx,cl
c002362f:	89 f0                	mov    eax,esi
c0023631:	88 d1                	mov    cl,dl
c0023633:	d3 e8                	shr    eax,cl
c0023635:	09 d8                	or     eax,ebx
c0023637:	89 e9                	mov    ecx,ebp
c0023639:	d3 e6                	shl    esi,cl
c002363b:	89 f3                	mov    ebx,esi
c002363d:	89 fa                	mov    edx,edi
c002363f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023643:	89 d1                	mov    ecx,edx
c0023645:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023649:	89 c6                	mov    esi,eax
c002364b:	89 d7                	mov    edi,edx
c002364d:	39 d1                	cmp    ecx,edx
c002364f:	72 27                	jb     c0023678 <__umoddi3+0x10c>
c0023651:	74 21                	je     c0023674 <__umoddi3+0x108>
c0023653:	89 ca                	mov    edx,ecx
c0023655:	29 f3                	sub    ebx,esi
c0023657:	19 fa                	sbb    edx,edi
c0023659:	89 d0                	mov    eax,edx
c002365b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002365f:	d3 e0                	shl    eax,cl
c0023661:	89 e9                	mov    ecx,ebp
c0023663:	d3 eb                	shr    ebx,cl
c0023665:	09 d8                	or     eax,ebx
c0023667:	d3 ea                	shr    edx,cl
c0023669:	83 c4 1c             	add    esp,0x1c
c002366c:	5b                   	pop    ebx
c002366d:	5e                   	pop    esi
c002366e:	5f                   	pop    edi
c002366f:	5d                   	pop    ebp
c0023670:	c3                   	ret    
c0023671:	8d 76 00             	lea    esi,[esi+0x0]
c0023674:	39 c3                	cmp    ebx,eax
c0023676:	73 db                	jae    c0023653 <__umoddi3+0xe7>
c0023678:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002367c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023680:	89 d7                	mov    edi,edx
c0023682:	89 c6                	mov    esi,eax
c0023684:	eb cd                	jmp    c0023653 <__umoddi3+0xe7>

c0023686 <__addsf3>:
c0023686:	55                   	push   ebp
c0023687:	89 e5                	mov    ebp,esp
c0023689:	57                   	push   edi
c002368a:	56                   	push   esi
c002368b:	53                   	push   ebx
c002368c:	83 ec 08             	sub    esp,0x8
c002368f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023692:	89 fa                	mov    edx,edi
c0023694:	89 f8                	mov    eax,edi
c0023696:	c1 f8 17             	sar    eax,0x17
c0023699:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002369c:	c1 e2 08             	shl    edx,0x8
c002369f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00236a5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00236a8:	89 de                	mov    esi,ebx
c00236aa:	c1 fe 17             	sar    esi,0x17
c00236ad:	c1 e3 08             	shl    ebx,0x8
c00236b0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00236b6:	31 f0                	xor    eax,esi
c00236b8:	0f 88 3b 01 00 00    	js     c00237f9 <__addsf3+0x173>
c00236be:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00236c1:	29 f1                	sub    ecx,esi
c00236c3:	85 c9                	test   ecx,ecx
c00236c5:	7e 54                	jle    c002371b <__addsf3+0x95>
c00236c7:	89 f0                	mov    eax,esi
c00236c9:	84 c0                	test   al,al
c00236cb:	75 10                	jne    c00236dd <__addsf3+0x57>
c00236cd:	85 db                	test   ebx,ebx
c00236cf:	0f 84 aa 02 00 00    	je     c002397f <__addsf3+0x2f9>
c00236d5:	49                   	dec    ecx
c00236d6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236d9:	74 38                	je     c0023713 <__addsf3+0x8d>
c00236db:	eb 13                	jmp    c00236f0 <__addsf3+0x6a>
c00236dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00236e0:	f7 d0                	not    eax
c00236e2:	84 c0                	test   al,al
c00236e4:	0f 84 95 02 00 00    	je     c002397f <__addsf3+0x2f9>
c00236ea:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00236f0:	83 f9 1f             	cmp    ecx,0x1f
c00236f3:	0f 8f 86 02 00 00    	jg     c002397f <__addsf3+0x2f9>
c00236f9:	89 de                	mov    esi,ebx
c00236fb:	d3 ee                	shr    esi,cl
c00236fd:	b8 20 00 00 00       	mov    eax,0x20
c0023702:	29 c8                	sub    eax,ecx
c0023704:	89 c1                	mov    ecx,eax
c0023706:	d3 e3                	shl    ebx,cl
c0023708:	31 c0                	xor    eax,eax
c002370a:	85 db                	test   ebx,ebx
c002370c:	0f 95 c0             	setne  al
c002370f:	09 f0                	or     eax,esi
c0023711:	01 d0                	add    eax,edx
c0023713:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023716:	e9 b6 00 00 00       	jmp    c00237d1 <__addsf3+0x14b>
c002371b:	74 5c                	je     c0023779 <__addsf3+0xf3>
c002371d:	89 f1                	mov    ecx,esi
c002371f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023722:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023725:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023729:	75 14                	jne    c002373f <__addsf3+0xb9>
c002372b:	85 d2                	test   edx,edx
c002372d:	0f 84 4c 02 00 00    	je     c002397f <__addsf3+0x2f9>
c0023733:	49                   	dec    ecx
c0023734:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023737:	0f 84 94 00 00 00    	je     c00237d1 <__addsf3+0x14b>
c002373d:	eb 12                	jmp    c0023751 <__addsf3+0xcb>
c002373f:	89 f0                	mov    eax,esi
c0023741:	f7 d0                	not    eax
c0023743:	84 c0                	test   al,al
c0023745:	0f 84 34 02 00 00    	je     c002397f <__addsf3+0x2f9>
c002374b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023751:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023754:	83 f9 1f             	cmp    ecx,0x1f
c0023757:	0f 8f 22 02 00 00    	jg     c002397f <__addsf3+0x2f9>
c002375d:	89 d7                	mov    edi,edx
c002375f:	d3 ef                	shr    edi,cl
c0023761:	b8 20 00 00 00       	mov    eax,0x20
c0023766:	29 c8                	sub    eax,ecx
c0023768:	89 c1                	mov    ecx,eax
c002376a:	d3 e2                	shl    edx,cl
c002376c:	31 c0                	xor    eax,eax
c002376e:	85 d2                	test   edx,edx
c0023770:	0f 95 c0             	setne  al
c0023773:	09 f8                	or     eax,edi
c0023775:	01 d8                	add    eax,ebx
c0023777:	eb 58                	jmp    c00237d1 <__addsf3+0x14b>
c0023779:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002377c:	8d 70 01             	lea    esi,[eax+0x1]
c002377f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023785:	75 32                	jne    c00237b9 <__addsf3+0x133>
c0023787:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002378b:	75 1f                	jne    c00237ac <__addsf3+0x126>
c002378d:	85 d2                	test   edx,edx
c002378f:	0f 84 e0 01 00 00    	je     c0023975 <__addsf3+0x2ef>
c0023795:	85 db                	test   ebx,ebx
c0023797:	0f 84 e2 01 00 00    	je     c002397f <__addsf3+0x2f9>
c002379d:	89 d0                	mov    eax,edx
c002379f:	01 d8                	add    eax,ebx
c00237a1:	0f 89 a9 01 00 00    	jns    c0023950 <__addsf3+0x2ca>
c00237a7:	e9 9d 01 00 00       	jmp    c0023949 <__addsf3+0x2c3>
c00237ac:	85 d2                	test   edx,edx
c00237ae:	0f 85 cb 01 00 00    	jne    c002397f <__addsf3+0x2f9>
c00237b4:	e9 bc 01 00 00       	jmp    c0023975 <__addsf3+0x2ef>
c00237b9:	31 c0                	xor    eax,eax
c00237bb:	89 f1                	mov    ecx,esi
c00237bd:	f7 d1                	not    ecx
c00237bf:	84 c9                	test   cl,cl
c00237c1:	0f 84 90 01 00 00    	je     c0023957 <__addsf3+0x2d1>
c00237c7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00237ca:	d1 e8                	shr    eax,1
c00237cc:	e9 86 01 00 00       	jmp    c0023957 <__addsf3+0x2d1>
c00237d1:	85 c0                	test   eax,eax
c00237d3:	0f 89 7e 01 00 00    	jns    c0023957 <__addsf3+0x2d1>
c00237d9:	46                   	inc    esi
c00237da:	89 f2                	mov    edx,esi
c00237dc:	f7 d2                	not    edx
c00237de:	84 d2                	test   dl,dl
c00237e0:	0f 84 6f 01 00 00    	je     c0023955 <__addsf3+0x2cf>
c00237e6:	89 c2                	mov    edx,eax
c00237e8:	83 e2 01             	and    edx,0x1
c00237eb:	d1 e8                	shr    eax,1
c00237ed:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00237f2:	09 d0                	or     eax,edx
c00237f4:	e9 5e 01 00 00       	jmp    c0023957 <__addsf3+0x2d1>
c00237f9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00237fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023800:	89 f0                	mov    eax,esi
c0023802:	0f b6 c0             	movzx  eax,al
c0023805:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023808:	29 c1                	sub    ecx,eax
c002380a:	85 c9                	test   ecx,ecx
c002380c:	7e 55                	jle    c0023863 <__addsf3+0x1dd>
c002380e:	85 c0                	test   eax,eax
c0023810:	75 11                	jne    c0023823 <__addsf3+0x19d>
c0023812:	85 db                	test   ebx,ebx
c0023814:	0f 84 65 01 00 00    	je     c002397f <__addsf3+0x2f9>
c002381a:	49                   	dec    ecx
c002381b:	75 19                	jne    c0023836 <__addsf3+0x1b0>
c002381d:	89 d0                	mov    eax,edx
c002381f:	29 d8                	sub    eax,ebx
c0023821:	eb 38                	jmp    c002385b <__addsf3+0x1d5>
c0023823:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023826:	f7 d0                	not    eax
c0023828:	84 c0                	test   al,al
c002382a:	0f 84 4f 01 00 00    	je     c002397f <__addsf3+0x2f9>
c0023830:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023836:	83 f9 1f             	cmp    ecx,0x1f
c0023839:	0f 8f 40 01 00 00    	jg     c002397f <__addsf3+0x2f9>
c002383f:	89 de                	mov    esi,ebx
c0023841:	d3 ee                	shr    esi,cl
c0023843:	b8 20 00 00 00       	mov    eax,0x20
c0023848:	29 c8                	sub    eax,ecx
c002384a:	89 c1                	mov    ecx,eax
c002384c:	d3 e3                	shl    ebx,cl
c002384e:	31 c0                	xor    eax,eax
c0023850:	85 db                	test   ebx,ebx
c0023852:	0f 95 c0             	setne  al
c0023855:	09 f0                	or     eax,esi
c0023857:	29 c2                	sub    edx,eax
c0023859:	89 d0                	mov    eax,edx
c002385b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002385e:	e9 af 00 00 00       	jmp    c0023912 <__addsf3+0x28c>
c0023863:	74 5c                	je     c00238c1 <__addsf3+0x23b>
c0023865:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023868:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002386b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002386f:	75 14                	jne    c0023885 <__addsf3+0x1ff>
c0023871:	85 d2                	test   edx,edx
c0023873:	0f 84 06 01 00 00    	je     c002397f <__addsf3+0x2f9>
c0023879:	48                   	dec    eax
c002387a:	75 1b                	jne    c0023897 <__addsf3+0x211>
c002387c:	89 d8                	mov    eax,ebx
c002387e:	29 d0                	sub    eax,edx
c0023880:	e9 8d 00 00 00       	jmp    c0023912 <__addsf3+0x28c>
c0023885:	89 f1                	mov    ecx,esi
c0023887:	f7 d1                	not    ecx
c0023889:	84 c9                	test   cl,cl
c002388b:	0f 84 ee 00 00 00    	je     c002397f <__addsf3+0x2f9>
c0023891:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023897:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002389a:	83 f8 1f             	cmp    eax,0x1f
c002389d:	0f 8f dc 00 00 00    	jg     c002397f <__addsf3+0x2f9>
c00238a3:	89 d7                	mov    edi,edx
c00238a5:	88 c1                	mov    cl,al
c00238a7:	d3 ef                	shr    edi,cl
c00238a9:	b9 20 00 00 00       	mov    ecx,0x20
c00238ae:	29 c1                	sub    ecx,eax
c00238b0:	d3 e2                	shl    edx,cl
c00238b2:	31 c0                	xor    eax,eax
c00238b4:	85 d2                	test   edx,edx
c00238b6:	0f 95 c0             	setne  al
c00238b9:	09 f8                	or     eax,edi
c00238bb:	29 c3                	sub    ebx,eax
c00238bd:	89 d8                	mov    eax,ebx
c00238bf:	eb 51                	jmp    c0023912 <__addsf3+0x28c>
c00238c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00238c4:	40                   	inc    eax
c00238c5:	a8 fe                	test   al,0xfe
c00238c7:	75 3d                	jne    c0023906 <__addsf3+0x280>
c00238c9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00238cd:	0f 85 a7 00 00 00    	jne    c002397a <__addsf3+0x2f4>
c00238d3:	85 d2                	test   edx,edx
c00238d5:	75 12                	jne    c00238e9 <__addsf3+0x263>
c00238d7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00238da:	85 db                	test   ebx,ebx
c00238dc:	0f 85 9d 00 00 00    	jne    c002397f <__addsf3+0x2f9>
c00238e2:	31 ff                	xor    edi,edi
c00238e4:	e9 96 00 00 00       	jmp    c002397f <__addsf3+0x2f9>
c00238e9:	85 db                	test   ebx,ebx
c00238eb:	0f 84 8e 00 00 00    	je     c002397f <__addsf3+0x2f9>
c00238f1:	89 d0                	mov    eax,edx
c00238f3:	29 d8                	sub    eax,ebx
c00238f5:	79 06                	jns    c00238fd <__addsf3+0x277>
c00238f7:	89 d8                	mov    eax,ebx
c00238f9:	29 d0                	sub    eax,edx
c00238fb:	eb 5a                	jmp    c0023957 <__addsf3+0x2d1>
c00238fd:	bf 00 00 00 00       	mov    edi,0x0
c0023902:	74 7b                	je     c002397f <__addsf3+0x2f9>
c0023904:	eb 4a                	jmp    c0023950 <__addsf3+0x2ca>
c0023906:	89 d0                	mov    eax,edx
c0023908:	29 d8                	sub    eax,ebx
c002390a:	79 12                	jns    c002391e <__addsf3+0x298>
c002390c:	89 d8                	mov    eax,ebx
c002390e:	29 d0                	sub    eax,edx
c0023910:	eb 09                	jmp    c002391b <__addsf3+0x295>
c0023912:	85 c0                	test   eax,eax
c0023914:	79 41                	jns    c0023957 <__addsf3+0x2d1>
c0023916:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002391b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002391e:	31 f6                	xor    esi,esi
c0023920:	85 c0                	test   eax,eax
c0023922:	74 33                	je     c0023957 <__addsf3+0x2d1>
c0023924:	0f bd c8             	bsr    ecx,eax
c0023927:	83 f1 1f             	xor    ecx,0x1f
c002392a:	d3 e0                	shl    eax,cl
c002392c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023930:	39 ca                	cmp    edx,ecx
c0023932:	7f 10                	jg     c0023944 <__addsf3+0x2be>
c0023934:	29 d1                	sub    ecx,edx
c0023936:	41                   	inc    ecx
c0023937:	d3 e8                	shr    eax,cl
c0023939:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002393c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023942:	eb 13                	jmp    c0023957 <__addsf3+0x2d1>
c0023944:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023947:	29 ce                	sub    esi,ecx
c0023949:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002394e:	eb 07                	jmp    c0023957 <__addsf3+0x2d1>
c0023950:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023953:	eb 02                	jmp    c0023957 <__addsf3+0x2d1>
c0023955:	31 c0                	xor    eax,eax
c0023957:	89 c2                	mov    edx,eax
c0023959:	c1 ea 08             	shr    edx,0x8
c002395c:	a8 7f                	test   al,0x7f
c002395e:	0f 95 c1             	setne  cl
c0023961:	09 d1                	or     ecx,edx
c0023963:	83 e1 01             	and    ecx,0x1
c0023966:	c1 e8 07             	shr    eax,0x7
c0023969:	21 c8                	and    eax,ecx
c002396b:	c1 e6 17             	shl    esi,0x17
c002396e:	09 d6                	or     esi,edx
c0023970:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023973:	eb 0a                	jmp    c002397f <__addsf3+0x2f9>
c0023975:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023978:	eb 05                	jmp    c002397f <__addsf3+0x2f9>
c002397a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002397f:	89 f8                	mov    eax,edi
c0023981:	5a                   	pop    edx
c0023982:	59                   	pop    ecx
c0023983:	5b                   	pop    ebx
c0023984:	5e                   	pop    esi
c0023985:	5f                   	pop    edi
c0023986:	5d                   	pop    ebp
c0023987:	c3                   	ret    

c0023988 <__subsf3>:
c0023988:	55                   	push   ebp
c0023989:	89 e5                	mov    ebp,esp
c002398b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002398e:	05 00 00 00 80       	add    eax,0x80000000
c0023993:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023996:	5d                   	pop    ebp
c0023997:	e9 ea fc ff ff       	jmp    c0023686 <__addsf3>

c002399c <__negsf2>:
c002399c:	55                   	push   ebp
c002399d:	89 e5                	mov    ebp,esp
c002399f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239a2:	05 00 00 00 80       	add    eax,0x80000000
c00239a7:	5d                   	pop    ebp
c00239a8:	c3                   	ret    

c00239a9 <__mulsf3>:
c00239a9:	55                   	push   ebp
c00239aa:	89 e5                	mov    ebp,esp
c00239ac:	57                   	push   edi
c00239ad:	56                   	push   esi
c00239ae:	53                   	push   ebx
c00239af:	83 ec 1c             	sub    esp,0x1c
c00239b2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00239b5:	89 f0                	mov    eax,esi
c00239b7:	89 f1                	mov    ecx,esi
c00239b9:	c1 f9 17             	sar    ecx,0x17
c00239bc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00239bf:	c1 e0 08             	shl    eax,0x8
c00239c2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00239c7:	89 c1                	mov    ecx,eax
c00239c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00239cc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00239cf:	89 c7                	mov    edi,eax
c00239d1:	c1 ff 17             	sar    edi,0x17
c00239d4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00239d8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00239db:	89 f8                	mov    eax,edi
c00239dd:	0f b6 c0             	movzx  eax,al
c00239e0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00239e3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00239e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00239ea:	42                   	inc    edx
c00239eb:	80 e2 fe             	and    dl,0xfe
c00239ee:	75 7b                	jne    c0023a6b <__mulsf3+0xc2>
c00239f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00239f4:	74 54                	je     c0023a4a <__mulsf3+0xa1>
c00239f6:	85 c9                	test   ecx,ecx
c00239f8:	0f 85 64 01 00 00    	jne    c0023b62 <__mulsf3+0x1b9>
c00239fe:	8d 57 01             	lea    edx,[edi+0x1]
c0023a01:	80 e2 fe             	and    dl,0xfe
c0023a04:	75 1f                	jne    c0023a25 <__mulsf3+0x7c>
c0023a06:	85 c0                	test   eax,eax
c0023a08:	b8 00 00 00 00       	mov    eax,0x0
c0023a0d:	74 29                	je     c0023a38 <__mulsf3+0x8f>
c0023a0f:	53                   	push   ebx
c0023a10:	53                   	push   ebx
c0023a11:	50                   	push   eax
c0023a12:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a15:	e8 96 05 00 00       	call   c0023fb0 <__nesf2>
c0023a1a:	83 c4 10             	add    esp,0x10
c0023a1d:	85 c0                	test   eax,eax
c0023a1f:	0f 85 3a 01 00 00    	jne    c0023b5f <__mulsf3+0x1b6>
c0023a25:	85 ff                	test   edi,edi
c0023a27:	0f 89 35 01 00 00    	jns    c0023b62 <__mulsf3+0x1b9>
c0023a2d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023a33:	e9 2a 01 00 00       	jmp    c0023b62 <__mulsf3+0x1b9>
c0023a38:	51                   	push   ecx
c0023a39:	51                   	push   ecx
c0023a3a:	50                   	push   eax
c0023a3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a3e:	e8 6d 05 00 00       	call   c0023fb0 <__nesf2>
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	85 c0                	test   eax,eax
c0023a48:	eb 15                	jmp    c0023a5f <__mulsf3+0xb6>
c0023a4a:	85 c9                	test   ecx,ecx
c0023a4c:	74 0b                	je     c0023a59 <__mulsf3+0xb0>
c0023a4e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023a51:	01 c9                	add    ecx,ecx
c0023a53:	78 16                	js     c0023a6b <__mulsf3+0xc2>
c0023a55:	89 d3                	mov    ebx,edx
c0023a57:	eb f5                	jmp    c0023a4e <__mulsf3+0xa5>
c0023a59:	89 f8                	mov    eax,edi
c0023a5b:	f7 d0                	not    eax
c0023a5d:	84 c0                	test   al,al
c0023a5f:	75 c4                	jne    c0023a25 <__mulsf3+0x7c>
c0023a61:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023a66:	e9 f7 00 00 00       	jmp    c0023b62 <__mulsf3+0x1b9>
c0023a6b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023a6e:	c1 e6 08             	shl    esi,0x8
c0023a71:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023a77:	8d 57 01             	lea    edx,[edi+0x1]
c0023a7a:	80 e2 fe             	and    dl,0xfe
c0023a7d:	75 63                	jne    c0023ae2 <__mulsf3+0x139>
c0023a7f:	85 c0                	test   eax,eax
c0023a81:	74 2f                	je     c0023ab2 <__mulsf3+0x109>
c0023a83:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023a87:	0f 89 d2 00 00 00    	jns    c0023b5f <__mulsf3+0x1b6>
c0023a8d:	52                   	push   edx
c0023a8e:	52                   	push   edx
c0023a8f:	6a 00                	push   0x0
c0023a91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a94:	e8 dc 04 00 00       	call   c0023f75 <__eqsf2>
c0023a99:	83 c4 10             	add    esp,0x10
c0023a9c:	85 c0                	test   eax,eax
c0023a9e:	0f 85 bb 00 00 00    	jne    c0023b5f <__mulsf3+0x1b6>
c0023aa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023aa7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023aad:	e9 b0 00 00 00       	jmp    c0023b62 <__mulsf3+0x1b9>
c0023ab2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023ab5:	50                   	push   eax
c0023ab6:	50                   	push   eax
c0023ab7:	6a 00                	push   0x0
c0023ab9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023abc:	e8 b4 04 00 00       	call   c0023f75 <__eqsf2>
c0023ac1:	83 c4 10             	add    esp,0x10
c0023ac4:	85 c0                	test   eax,eax
c0023ac6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ac9:	75 0c                	jne    c0023ad7 <__mulsf3+0x12e>
c0023acb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023acf:	0f 89 8a 00 00 00    	jns    c0023b5f <__mulsf3+0x1b6>
c0023ad5:	eb cd                	jmp    c0023aa4 <__mulsf3+0xfb>
c0023ad7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023ada:	01 f6                	add    esi,esi
c0023adc:	78 04                	js     c0023ae2 <__mulsf3+0x139>
c0023ade:	89 c3                	mov    ebx,eax
c0023ae0:	eb f5                	jmp    c0023ad7 <__mulsf3+0x12e>
c0023ae2:	89 c8                	mov    eax,ecx
c0023ae4:	0d 00 00 00 80       	or     eax,0x80000000
c0023ae9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023aef:	f7 e6                	mul    esi
c0023af1:	85 c0                	test   eax,eax
c0023af3:	0f 95 c0             	setne  al
c0023af6:	0f b6 c0             	movzx  eax,al
c0023af9:	09 c2                	or     edx,eax
c0023afb:	78 03                	js     c0023b00 <__mulsf3+0x157>
c0023afd:	01 d2                	add    edx,edx
c0023aff:	4b                   	dec    ebx
c0023b00:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023b06:	7f 22                	jg     c0023b2a <__mulsf3+0x181>
c0023b08:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023b0e:	85 db                	test   ebx,ebx
c0023b10:	7f 23                	jg     c0023b35 <__mulsf3+0x18c>
c0023b12:	83 fb e9             	cmp    ebx,0xffffffe9
c0023b15:	7c 1a                	jl     c0023b31 <__mulsf3+0x188>
c0023b17:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023b1d:	b9 01 00 00 00       	mov    ecx,0x1
c0023b22:	29 d9                	sub    ecx,ebx
c0023b24:	d3 ea                	shr    edx,cl
c0023b26:	31 db                	xor    ebx,ebx
c0023b28:	eb 0b                	jmp    c0023b35 <__mulsf3+0x18c>
c0023b2a:	bb ff 00 00 00       	mov    ebx,0xff
c0023b2f:	eb 02                	jmp    c0023b33 <__mulsf3+0x18a>
c0023b31:	31 db                	xor    ebx,ebx
c0023b33:	31 d2                	xor    edx,edx
c0023b35:	89 d0                	mov    eax,edx
c0023b37:	c1 e8 08             	shr    eax,0x8
c0023b3a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023b3d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023b43:	09 fb                	or     ebx,edi
c0023b45:	c1 e3 17             	shl    ebx,0x17
c0023b48:	09 c3                	or     ebx,eax
c0023b4a:	f6 c2 7f             	test   dl,0x7f
c0023b4d:	0f 95 c1             	setne  cl
c0023b50:	09 c8                	or     eax,ecx
c0023b52:	83 e0 01             	and    eax,0x1
c0023b55:	c1 ea 07             	shr    edx,0x7
c0023b58:	21 c2                	and    edx,eax
c0023b5a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023b5d:	eb 03                	jmp    c0023b62 <__mulsf3+0x1b9>
c0023b5f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023b62:	89 f0                	mov    eax,esi
c0023b64:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023b67:	5b                   	pop    ebx
c0023b68:	5e                   	pop    esi
c0023b69:	5f                   	pop    edi
c0023b6a:	5d                   	pop    ebp
c0023b6b:	c3                   	ret    

c0023b6c <__divsf3>:
c0023b6c:	55                   	push   ebp
c0023b6d:	89 e5                	mov    ebp,esp
c0023b6f:	57                   	push   edi
c0023b70:	56                   	push   esi
c0023b71:	53                   	push   ebx
c0023b72:	83 ec 1c             	sub    esp,0x1c
c0023b75:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023b78:	89 d8                	mov    eax,ebx
c0023b7a:	89 d9                	mov    ecx,ebx
c0023b7c:	c1 f9 17             	sar    ecx,0x17
c0023b7f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023b82:	c1 e0 08             	shl    eax,0x8
c0023b85:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023b8a:	89 c1                	mov    ecx,eax
c0023b8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b8f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023b92:	89 c7                	mov    edi,eax
c0023b94:	c1 ff 17             	sar    edi,0x17
c0023b97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023b9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023b9e:	89 f8                	mov    eax,edi
c0023ba0:	0f b6 c0             	movzx  eax,al
c0023ba3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023ba6:	29 c6                	sub    esi,eax
c0023ba8:	83 c6 7f             	add    esi,0x7f
c0023bab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023bae:	42                   	inc    edx
c0023baf:	80 e2 fe             	and    dl,0xfe
c0023bb2:	0f 85 9c 00 00 00    	jne    c0023c54 <__divsf3+0xe8>
c0023bb8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023bbc:	74 33                	je     c0023bf1 <__divsf3+0x85>
c0023bbe:	85 c9                	test   ecx,ecx
c0023bc0:	0f 85 c7 01 00 00    	jne    c0023d8d <__divsf3+0x221>
c0023bc6:	8d 57 01             	lea    edx,[edi+0x1]
c0023bc9:	80 e2 fe             	and    dl,0xfe
c0023bcc:	75 2f                	jne    c0023bfd <__divsf3+0x91>
c0023bce:	85 c0                	test   eax,eax
c0023bd0:	74 2b                	je     c0023bfd <__divsf3+0x91>
c0023bd2:	51                   	push   ecx
c0023bd3:	51                   	push   ecx
c0023bd4:	6a 00                	push   0x0
c0023bd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023bd9:	e8 d2 03 00 00       	call   c0023fb0 <__nesf2>
c0023bde:	83 c4 10             	add    esp,0x10
c0023be1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023be4:	85 c0                	test   eax,eax
c0023be6:	0f 85 a1 01 00 00    	jne    c0023d8d <__divsf3+0x221>
c0023bec:	e9 92 01 00 00       	jmp    c0023d83 <__divsf3+0x217>
c0023bf1:	85 c9                	test   ecx,ecx
c0023bf3:	75 1b                	jne    c0023c10 <__divsf3+0xa4>
c0023bf5:	8d 57 01             	lea    edx,[edi+0x1]
c0023bf8:	80 e2 fe             	and    dl,0xfe
c0023bfb:	74 1e                	je     c0023c1b <__divsf3+0xaf>
c0023bfd:	85 ff                	test   edi,edi
c0023bff:	0f 89 88 01 00 00    	jns    c0023d8d <__divsf3+0x221>
c0023c05:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023c0b:	e9 7d 01 00 00       	jmp    c0023d8d <__divsf3+0x221>
c0023c10:	8d 56 ff             	lea    edx,[esi-0x1]
c0023c13:	01 c9                	add    ecx,ecx
c0023c15:	78 3d                	js     c0023c54 <__divsf3+0xe8>
c0023c17:	89 d6                	mov    esi,edx
c0023c19:	eb f5                	jmp    c0023c10 <__divsf3+0xa4>
c0023c1b:	85 c0                	test   eax,eax
c0023c1d:	b8 00 00 00 00       	mov    eax,0x0
c0023c22:	74 18                	je     c0023c3c <__divsf3+0xd0>
c0023c24:	52                   	push   edx
c0023c25:	52                   	push   edx
c0023c26:	50                   	push   eax
c0023c27:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c2a:	e8 81 03 00 00       	call   c0023fb0 <__nesf2>
c0023c2f:	83 c4 10             	add    esp,0x10
c0023c32:	85 c0                	test   eax,eax
c0023c34:	0f 85 50 01 00 00    	jne    c0023d8a <__divsf3+0x21e>
c0023c3a:	eb c1                	jmp    c0023bfd <__divsf3+0x91>
c0023c3c:	56                   	push   esi
c0023c3d:	56                   	push   esi
c0023c3e:	50                   	push   eax
c0023c3f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c42:	e8 69 03 00 00       	call   c0023fb0 <__nesf2>
c0023c47:	83 c4 10             	add    esp,0x10
c0023c4a:	85 c0                	test   eax,eax
c0023c4c:	0f 84 31 01 00 00    	je     c0023d83 <__divsf3+0x217>
c0023c52:	eb a9                	jmp    c0023bfd <__divsf3+0x91>
c0023c54:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023c57:	c1 e3 08             	shl    ebx,0x8
c0023c5a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023c60:	8d 57 01             	lea    edx,[edi+0x1]
c0023c63:	80 e2 fe             	and    dl,0xfe
c0023c66:	75 71                	jne    c0023cd9 <__divsf3+0x16d>
c0023c68:	85 c0                	test   eax,eax
c0023c6a:	ba 00 00 00 00       	mov    edx,0x0
c0023c6f:	74 2f                	je     c0023ca0 <__divsf3+0x134>
c0023c71:	51                   	push   ecx
c0023c72:	51                   	push   ecx
c0023c73:	52                   	push   edx
c0023c74:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c77:	e8 f9 02 00 00       	call   c0023f75 <__eqsf2>
c0023c7c:	83 c4 10             	add    esp,0x10
c0023c7f:	85 c0                	test   eax,eax
c0023c81:	0f 85 03 01 00 00    	jne    c0023d8a <__divsf3+0x21e>
c0023c87:	31 d2                	xor    edx,edx
c0023c89:	89 d3                	mov    ebx,edx
c0023c8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023c8e:	31 f8                	xor    eax,edi
c0023c90:	0f 89 f7 00 00 00    	jns    c0023d8d <__divsf3+0x221>
c0023c96:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023c9b:	e9 ed 00 00 00       	jmp    c0023d8d <__divsf3+0x221>
c0023ca0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023ca3:	50                   	push   eax
c0023ca4:	50                   	push   eax
c0023ca5:	52                   	push   edx
c0023ca6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ca9:	e8 c7 02 00 00       	call   c0023f75 <__eqsf2>
c0023cae:	83 c4 10             	add    esp,0x10
c0023cb1:	85 c0                	test   eax,eax
c0023cb3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023cb6:	75 16                	jne    c0023cce <__divsf3+0x162>
c0023cb8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023cbb:	31 fb                	xor    ebx,edi
c0023cbd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023cc3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023cc9:	e9 bf 00 00 00       	jmp    c0023d8d <__divsf3+0x221>
c0023cce:	8d 46 01             	lea    eax,[esi+0x1]
c0023cd1:	01 db                	add    ebx,ebx
c0023cd3:	78 04                	js     c0023cd9 <__divsf3+0x16d>
c0023cd5:	89 c6                	mov    esi,eax
c0023cd7:	eb f5                	jmp    c0023cce <__divsf3+0x162>
c0023cd9:	89 c8                	mov    eax,ecx
c0023cdb:	0d 00 00 00 80       	or     eax,0x80000000
c0023ce0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023ce6:	31 d2                	xor    edx,edx
c0023ce8:	39 d8                	cmp    eax,ebx
c0023cea:	72 07                	jb     c0023cf3 <__divsf3+0x187>
c0023cec:	29 d8                	sub    eax,ebx
c0023cee:	ba 01 00 00 00       	mov    edx,0x1
c0023cf3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023cfa:	01 d2                	add    edx,edx
c0023cfc:	89 c1                	mov    ecx,eax
c0023cfe:	01 c0                	add    eax,eax
c0023d00:	85 c9                	test   ecx,ecx
c0023d02:	78 04                	js     c0023d08 <__divsf3+0x19c>
c0023d04:	39 c3                	cmp    ebx,eax
c0023d06:	77 05                	ja     c0023d0d <__divsf3+0x1a1>
c0023d08:	29 d8                	sub    eax,ebx
c0023d0a:	83 ca 01             	or     edx,0x1
c0023d0d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023d10:	75 e8                	jne    c0023cfa <__divsf3+0x18e>
c0023d12:	85 c0                	test   eax,eax
c0023d14:	0f 95 c0             	setne  al
c0023d17:	0f b6 c0             	movzx  eax,al
c0023d1a:	c1 e2 06             	shl    edx,0x6
c0023d1d:	09 c2                	or     edx,eax
c0023d1f:	78 03                	js     c0023d24 <__divsf3+0x1b8>
c0023d21:	01 d2                	add    edx,edx
c0023d23:	4e                   	dec    esi
c0023d24:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023d2a:	7f 22                	jg     c0023d4e <__divsf3+0x1e2>
c0023d2c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023d32:	85 f6                	test   esi,esi
c0023d34:	7f 23                	jg     c0023d59 <__divsf3+0x1ed>
c0023d36:	83 fe e9             	cmp    esi,0xffffffe9
c0023d39:	7c 1a                	jl     c0023d55 <__divsf3+0x1e9>
c0023d3b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023d41:	b9 01 00 00 00       	mov    ecx,0x1
c0023d46:	29 f1                	sub    ecx,esi
c0023d48:	d3 ea                	shr    edx,cl
c0023d4a:	31 f6                	xor    esi,esi
c0023d4c:	eb 0b                	jmp    c0023d59 <__divsf3+0x1ed>
c0023d4e:	be ff 00 00 00       	mov    esi,0xff
c0023d53:	eb 02                	jmp    c0023d57 <__divsf3+0x1eb>
c0023d55:	31 f6                	xor    esi,esi
c0023d57:	31 d2                	xor    edx,edx
c0023d59:	89 d0                	mov    eax,edx
c0023d5b:	c1 e8 08             	shr    eax,0x8
c0023d5e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023d61:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023d67:	09 fe                	or     esi,edi
c0023d69:	c1 e6 17             	shl    esi,0x17
c0023d6c:	09 c6                	or     esi,eax
c0023d6e:	f6 c2 7f             	test   dl,0x7f
c0023d71:	0f 95 c1             	setne  cl
c0023d74:	09 c8                	or     eax,ecx
c0023d76:	83 e0 01             	and    eax,0x1
c0023d79:	c1 ea 07             	shr    edx,0x7
c0023d7c:	21 c2                	and    edx,eax
c0023d7e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023d81:	eb 0a                	jmp    c0023d8d <__divsf3+0x221>
c0023d83:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023d88:	eb 03                	jmp    c0023d8d <__divsf3+0x221>
c0023d8a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023d8d:	89 d8                	mov    eax,ebx
c0023d8f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023d92:	5b                   	pop    ebx
c0023d93:	5e                   	pop    esi
c0023d94:	5f                   	pop    edi
c0023d95:	5d                   	pop    ebp
c0023d96:	c3                   	ret    

c0023d97 <__floatsisf>:
c0023d97:	55                   	push   ebp
c0023d98:	89 e5                	mov    ebp,esp
c0023d9a:	53                   	push   ebx
c0023d9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d9e:	85 d2                	test   edx,edx
c0023da0:	7e 2b                	jle    c0023dcd <__floatsisf+0x36>
c0023da2:	0f bd ca             	bsr    ecx,edx
c0023da5:	83 f1 1f             	xor    ecx,0x1f
c0023da8:	d3 e2                	shl    edx,cl
c0023daa:	89 d0                	mov    eax,edx
c0023dac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023db1:	89 c3                	mov    ebx,eax
c0023db3:	c1 eb 08             	shr    ebx,0x8
c0023db6:	80 e2 7f             	and    dl,0x7f
c0023db9:	0f 95 c2             	setne  dl
c0023dbc:	09 da                	or     edx,ebx
c0023dbe:	83 e2 01             	and    edx,0x1
c0023dc1:	c1 e8 07             	shr    eax,0x7
c0023dc4:	21 c2                	and    edx,eax
c0023dc6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023dcb:	eb 32                	jmp    c0023dff <__floatsisf+0x68>
c0023dcd:	b8 00 00 00 00       	mov    eax,0x0
c0023dd2:	74 34                	je     c0023e08 <__floatsisf+0x71>
c0023dd4:	f7 da                	neg    edx
c0023dd6:	0f bd ca             	bsr    ecx,edx
c0023dd9:	83 f1 1f             	xor    ecx,0x1f
c0023ddc:	d3 e2                	shl    edx,cl
c0023dde:	89 d0                	mov    eax,edx
c0023de0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023de5:	89 c3                	mov    ebx,eax
c0023de7:	c1 eb 08             	shr    ebx,0x8
c0023dea:	80 e2 7f             	and    dl,0x7f
c0023ded:	0f 95 c2             	setne  dl
c0023df0:	09 da                	or     edx,ebx
c0023df2:	83 e2 01             	and    edx,0x1
c0023df5:	c1 e8 07             	shr    eax,0x7
c0023df8:	21 c2                	and    edx,eax
c0023dfa:	b8 9e 01 00 00       	mov    eax,0x19e
c0023dff:	29 c8                	sub    eax,ecx
c0023e01:	c1 e0 17             	shl    eax,0x17
c0023e04:	09 d8                	or     eax,ebx
c0023e06:	01 d0                	add    eax,edx
c0023e08:	5b                   	pop    ebx
c0023e09:	5d                   	pop    ebp
c0023e0a:	c3                   	ret    

c0023e0b <__floatunsisf>:
c0023e0b:	55                   	push   ebp
c0023e0c:	89 e5                	mov    ebp,esp
c0023e0e:	53                   	push   ebx
c0023e0f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e12:	31 c0                	xor    eax,eax
c0023e14:	85 d2                	test   edx,edx
c0023e16:	74 32                	je     c0023e4a <__floatunsisf+0x3f>
c0023e18:	0f bd ca             	bsr    ecx,edx
c0023e1b:	83 f1 1f             	xor    ecx,0x1f
c0023e1e:	d3 e2                	shl    edx,cl
c0023e20:	89 d0                	mov    eax,edx
c0023e22:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e27:	89 c3                	mov    ebx,eax
c0023e29:	c1 eb 08             	shr    ebx,0x8
c0023e2c:	80 e2 7f             	and    dl,0x7f
c0023e2f:	0f 95 c2             	setne  dl
c0023e32:	09 da                	or     edx,ebx
c0023e34:	83 e2 01             	and    edx,0x1
c0023e37:	c1 e8 07             	shr    eax,0x7
c0023e3a:	21 c2                	and    edx,eax
c0023e3c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023e41:	29 c8                	sub    eax,ecx
c0023e43:	c1 e0 17             	shl    eax,0x17
c0023e46:	09 d8                	or     eax,ebx
c0023e48:	01 d0                	add    eax,edx
c0023e4a:	5b                   	pop    ebx
c0023e4b:	5d                   	pop    ebp
c0023e4c:	c3                   	ret    

c0023e4d <__fixsfsi>:
c0023e4d:	55                   	push   ebp
c0023e4e:	89 e5                	mov    ebp,esp
c0023e50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e53:	89 d1                	mov    ecx,edx
c0023e55:	c1 e1 08             	shl    ecx,0x8
c0023e58:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023e5e:	c1 fa 17             	sar    edx,0x17
c0023e61:	78 1c                	js     c0023e7f <__fixsfsi+0x32>
c0023e63:	83 ea 7f             	sub    edx,0x7f
c0023e66:	31 c0                	xor    eax,eax
c0023e68:	83 fa 1e             	cmp    edx,0x1e
c0023e6b:	77 40                	ja     c0023ead <__fixsfsi+0x60>
c0023e6d:	89 c8                	mov    eax,ecx
c0023e6f:	0d 00 00 00 80       	or     eax,0x80000000
c0023e74:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023e79:	29 d1                	sub    ecx,edx
c0023e7b:	d3 e8                	shr    eax,cl
c0023e7d:	eb 2e                	jmp    c0023ead <__fixsfsi+0x60>
c0023e7f:	31 c0                	xor    eax,eax
c0023e81:	81 c2 81 00 00 00    	add    edx,0x81
c0023e87:	78 24                	js     c0023ead <__fixsfsi+0x60>
c0023e89:	83 fa 1e             	cmp    edx,0x1e
c0023e8c:	7e 09                	jle    c0023e97 <__fixsfsi+0x4a>
c0023e8e:	83 fa 1f             	cmp    edx,0x1f
c0023e91:	75 18                	jne    c0023eab <__fixsfsi+0x5e>
c0023e93:	85 c9                	test   ecx,ecx
c0023e95:	75 14                	jne    c0023eab <__fixsfsi+0x5e>
c0023e97:	89 c8                	mov    eax,ecx
c0023e99:	0d 00 00 00 80       	or     eax,0x80000000
c0023e9e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023ea3:	29 d1                	sub    ecx,edx
c0023ea5:	d3 e8                	shr    eax,cl
c0023ea7:	f7 d8                	neg    eax
c0023ea9:	eb 02                	jmp    c0023ead <__fixsfsi+0x60>
c0023eab:	31 c0                	xor    eax,eax
c0023ead:	5d                   	pop    ebp
c0023eae:	c3                   	ret    

c0023eaf <__fixunssfsi>:
c0023eaf:	55                   	push   ebp
c0023eb0:	89 e5                	mov    ebp,esp
c0023eb2:	53                   	push   ebx
c0023eb3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023eb6:	89 d3                	mov    ebx,edx
c0023eb8:	c1 fb 17             	sar    ebx,0x17
c0023ebb:	83 eb 7f             	sub    ebx,0x7f
c0023ebe:	31 c0                	xor    eax,eax
c0023ec0:	83 fb 1f             	cmp    ebx,0x1f
c0023ec3:	77 18                	ja     c0023edd <__fixunssfsi+0x2e>
c0023ec5:	89 d0                	mov    eax,edx
c0023ec7:	c1 e0 08             	shl    eax,0x8
c0023eca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023ecf:	0d 00 00 00 80       	or     eax,0x80000000
c0023ed4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023ed9:	29 d9                	sub    ecx,ebx
c0023edb:	d3 e8                	shr    eax,cl
c0023edd:	5b                   	pop    ebx
c0023ede:	5d                   	pop    ebp
c0023edf:	c3                   	ret    

c0023ee0 <__cmpsf2>:
c0023ee0:	55                   	push   ebp
c0023ee1:	89 e5                	mov    ebp,esp
c0023ee3:	57                   	push   edi
c0023ee4:	56                   	push   esi
c0023ee5:	53                   	push   ebx
c0023ee6:	83 ec 24             	sub    esp,0x24
c0023ee9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023eec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023eef:	e8 4f 10 00 00       	call   c0024f43 <__truncdfsf2>
c0023ef4:	5a                   	pop    edx
c0023ef5:	59                   	pop    ecx
c0023ef6:	89 c3                	mov    ebx,eax
c0023ef8:	c1 e8 17             	shr    eax,0x17
c0023efb:	0f b6 f0             	movzx  esi,al
c0023efe:	89 d8                	mov    eax,ebx
c0023f00:	c1 e8 1f             	shr    eax,0x1f
c0023f03:	31 c6                	xor    esi,eax
c0023f05:	c1 e3 08             	shl    ebx,0x8
c0023f08:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023f0b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023f0e:	e8 30 10 00 00       	call   c0024f43 <__truncdfsf2>
c0023f13:	83 c4 10             	add    esp,0x10
c0023f16:	89 c1                	mov    ecx,eax
c0023f18:	c1 e9 17             	shr    ecx,0x17
c0023f1b:	0f b6 c9             	movzx  ecx,cl
c0023f1e:	89 c7                	mov    edi,eax
c0023f20:	c1 ef 1f             	shr    edi,0x1f
c0023f23:	89 ca                	mov    edx,ecx
c0023f25:	31 fa                	xor    edx,edi
c0023f27:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023f2a:	c1 e0 08             	shl    eax,0x8
c0023f2d:	89 c2                	mov    edx,eax
c0023f2f:	89 d8                	mov    eax,ebx
c0023f31:	09 d0                	or     eax,edx
c0023f33:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023f38:	09 f0                	or     eax,esi
c0023f3a:	75 08                	jne    c0023f44 <__cmpsf2+0x64>
c0023f3c:	31 c0                	xor    eax,eax
c0023f3e:	39 f9                	cmp    ecx,edi
c0023f40:	75 0c                	jne    c0023f4e <__cmpsf2+0x6e>
c0023f42:	eb 29                	jmp    c0023f6d <__cmpsf2+0x8d>
c0023f44:	b8 01 00 00 00       	mov    eax,0x1
c0023f49:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023f4c:	7f 1f                	jg     c0023f6d <__cmpsf2+0x8d>
c0023f4e:	83 c8 ff             	or     eax,0xffffffff
c0023f51:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023f54:	7c 17                	jl     c0023f6d <__cmpsf2+0x8d>
c0023f56:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023f5c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023f62:	b8 01 00 00 00       	mov    eax,0x1
c0023f67:	39 d3                	cmp    ebx,edx
c0023f69:	77 02                	ja     c0023f6d <__cmpsf2+0x8d>
c0023f6b:	19 c0                	sbb    eax,eax
c0023f6d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023f70:	5b                   	pop    ebx
c0023f71:	5e                   	pop    esi
c0023f72:	5f                   	pop    edi
c0023f73:	5d                   	pop    ebp
c0023f74:	c3                   	ret    

c0023f75 <__eqsf2>:
c0023f75:	55                   	push   ebp
c0023f76:	89 e5                	mov    ebp,esp
c0023f78:	83 ec 24             	sub    esp,0x24
c0023f7b:	6a 01                	push   0x1
c0023f7d:	83 ec 0c             	sub    esp,0xc
c0023f80:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f83:	e8 df 10 00 00       	call   c0025067 <__extendsfdf2>
c0023f88:	83 c4 10             	add    esp,0x10
c0023f8b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023f8e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023f91:	52                   	push   edx
c0023f92:	50                   	push   eax
c0023f93:	50                   	push   eax
c0023f94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f97:	e8 cb 10 00 00       	call   c0025067 <__extendsfdf2>
c0023f9c:	59                   	pop    ecx
c0023f9d:	59                   	pop    ecx
c0023f9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023fa1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023fa4:	52                   	push   edx
c0023fa5:	50                   	push   eax
c0023fa6:	e8 35 ff ff ff       	call   c0023ee0 <__cmpsf2>
c0023fab:	83 c4 20             	add    esp,0x20
c0023fae:	c9                   	leave  
c0023faf:	c3                   	ret    

c0023fb0 <__nesf2>:
c0023fb0:	eb c3                	jmp    c0023f75 <__eqsf2>

c0023fb2 <__gtsf2>:
c0023fb2:	55                   	push   ebp
c0023fb3:	89 e5                	mov    ebp,esp
c0023fb5:	83 ec 24             	sub    esp,0x24
c0023fb8:	6a ff                	push   0xffffffff
c0023fba:	83 ec 0c             	sub    esp,0xc
c0023fbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023fc0:	e8 a2 10 00 00       	call   c0025067 <__extendsfdf2>
c0023fc5:	83 c4 10             	add    esp,0x10
c0023fc8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023fcb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023fce:	52                   	push   edx
c0023fcf:	50                   	push   eax
c0023fd0:	50                   	push   eax
c0023fd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023fd4:	e8 8e 10 00 00       	call   c0025067 <__extendsfdf2>
c0023fd9:	59                   	pop    ecx
c0023fda:	59                   	pop    ecx
c0023fdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023fde:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023fe1:	52                   	push   edx
c0023fe2:	50                   	push   eax
c0023fe3:	e8 f8 fe ff ff       	call   c0023ee0 <__cmpsf2>
c0023fe8:	83 c4 20             	add    esp,0x20
c0023feb:	c9                   	leave  
c0023fec:	c3                   	ret    

c0023fed <__gesf2>:
c0023fed:	eb c3                	jmp    c0023fb2 <__gtsf2>

c0023fef <__ltsf2>:
c0023fef:	eb 84                	jmp    c0023f75 <__eqsf2>

c0023ff1 <__lesf2>:
c0023ff1:	eb 82                	jmp    c0023f75 <__eqsf2>

c0023ff3 <__adddf3>:
c0023ff3:	55                   	push   ebp
c0023ff4:	89 e5                	mov    ebp,esp
c0023ff6:	57                   	push   edi
c0023ff7:	56                   	push   esi
c0023ff8:	53                   	push   ebx
c0023ff9:	83 ec 24             	sub    esp,0x24
c0023ffc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023fff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024002:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024005:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024008:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002400b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002400e:	89 c8                	mov    eax,ecx
c0024010:	89 ce                	mov    esi,ecx
c0024012:	c1 fe 14             	sar    esi,0x14
c0024015:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024018:	89 fb                	mov    ebx,edi
c002401a:	89 fa                	mov    edx,edi
c002401c:	c1 e2 0b             	shl    edx,0xb
c002401f:	c1 e0 0b             	shl    eax,0xb
c0024022:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024027:	c1 eb 15             	shr    ebx,0x15
c002402a:	09 d8                	or     eax,ebx
c002402c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002402f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024032:	c1 fe 14             	sar    esi,0x14
c0024035:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024038:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002403b:	89 f3                	mov    ebx,esi
c002403d:	c1 e3 0b             	shl    ebx,0xb
c0024040:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024043:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024046:	c1 e3 0b             	shl    ebx,0xb
c0024049:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002404f:	c1 ee 15             	shr    esi,0x15
c0024052:	09 f3                	or     ebx,esi
c0024054:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024057:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002405a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002405d:	0f 88 5f 02 00 00    	js     c00242c2 <__adddf3+0x2cf>
c0024063:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024066:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024069:	85 db                	test   ebx,ebx
c002406b:	0f 8e c7 00 00 00    	jle    c0024138 <__adddf3+0x145>
c0024071:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024078:	75 1a                	jne    c0024094 <__adddf3+0xa1>
c002407a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002407d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024080:	0f 84 b2 05 00 00    	je     c0024638 <__adddf3+0x645>
c0024086:	4b                   	dec    ebx
c0024087:	75 23                	jne    c00240ac <__adddf3+0xb9>
c0024089:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002408c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002408f:	e9 99 00 00 00       	jmp    c002412d <__adddf3+0x13a>
c0024094:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024097:	f7 d6                	not    esi
c0024099:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002409f:	0f 84 93 05 00 00    	je     c0024638 <__adddf3+0x645>
c00240a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00240ac:	83 fb 1f             	cmp    ebx,0x1f
c00240af:	7e 42                	jle    c00240f3 <__adddf3+0x100>
c00240b1:	83 fb 3f             	cmp    ebx,0x3f
c00240b4:	0f 8f 7e 05 00 00    	jg     c0024638 <__adddf3+0x645>
c00240ba:	83 e3 1f             	and    ebx,0x1f
c00240bd:	89 d9                	mov    ecx,ebx
c00240bf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00240c2:	d3 ef                	shr    edi,cl
c00240c4:	31 db                	xor    ebx,ebx
c00240c6:	85 c9                	test   ecx,ecx
c00240c8:	74 15                	je     c00240df <__adddf3+0xec>
c00240ca:	be 20 00 00 00       	mov    esi,0x20
c00240cf:	29 ce                	sub    esi,ecx
c00240d1:	89 f1                	mov    ecx,esi
c00240d3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240d6:	d3 e6                	shl    esi,cl
c00240d8:	31 db                	xor    ebx,ebx
c00240da:	85 f6                	test   esi,esi
c00240dc:	0f 95 c3             	setne  bl
c00240df:	31 c9                	xor    ecx,ecx
c00240e1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00240e5:	0f 95 c1             	setne  cl
c00240e8:	09 cf                	or     edi,ecx
c00240ea:	09 fb                	or     ebx,edi
c00240ec:	01 da                	add    edx,ebx
c00240ee:	83 d0 00             	adc    eax,0x0
c00240f1:	eb 3a                	jmp    c002412d <__adddf3+0x13a>
c00240f3:	bf 20 00 00 00       	mov    edi,0x20
c00240f8:	29 df                	sub    edi,ebx
c00240fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00240fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024100:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024103:	d3 e6                	shl    esi,cl
c0024105:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024108:	88 d9                	mov    cl,bl
c002410a:	d3 ef                	shr    edi,cl
c002410c:	09 fe                	or     esi,edi
c002410e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024111:	88 d9                	mov    cl,bl
c0024113:	d3 ef                	shr    edi,cl
c0024115:	89 fb                	mov    ebx,edi
c0024117:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002411a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002411d:	d3 e7                	shl    edi,cl
c002411f:	85 ff                	test   edi,edi
c0024121:	0f 95 c1             	setne  cl
c0024124:	0f b6 c9             	movzx  ecx,cl
c0024127:	09 ce                	or     esi,ecx
c0024129:	01 f2                	add    edx,esi
c002412b:	11 d8                	adc    eax,ebx
c002412d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024130:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024133:	e9 52 01 00 00       	jmp    c002428a <__adddf3+0x297>
c0024138:	0f 84 d5 00 00 00    	je     c0024213 <__adddf3+0x220>
c002413e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024141:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024144:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024147:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002414a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024151:	75 20                	jne    c0024173 <__adddf3+0x180>
c0024153:	89 d6                	mov    esi,edx
c0024155:	09 c6                	or     esi,eax
c0024157:	0f 84 db 04 00 00    	je     c0024638 <__adddf3+0x645>
c002415d:	4b                   	dec    ebx
c002415e:	75 29                	jne    c0024189 <__adddf3+0x196>
c0024160:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024163:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024166:	01 d1                	add    ecx,edx
c0024168:	11 c6                	adc    esi,eax
c002416a:	89 f0                	mov    eax,esi
c002416c:	89 ca                	mov    edx,ecx
c002416e:	e9 17 01 00 00       	jmp    c002428a <__adddf3+0x297>
c0024173:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024176:	f7 d6                	not    esi
c0024178:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002417e:	0f 84 b4 04 00 00    	je     c0024638 <__adddf3+0x645>
c0024184:	0d 00 00 00 80       	or     eax,0x80000000
c0024189:	83 fb 1f             	cmp    ebx,0x1f
c002418c:	7e 48                	jle    c00241d6 <__adddf3+0x1e3>
c002418e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024191:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024194:	83 fb 3f             	cmp    ebx,0x3f
c0024197:	0f 8f 9b 04 00 00    	jg     c0024638 <__adddf3+0x645>
c002419d:	83 e3 1f             	and    ebx,0x1f
c00241a0:	89 d9                	mov    ecx,ebx
c00241a2:	89 c7                	mov    edi,eax
c00241a4:	d3 ef                	shr    edi,cl
c00241a6:	31 db                	xor    ebx,ebx
c00241a8:	85 c9                	test   ecx,ecx
c00241aa:	74 12                	je     c00241be <__adddf3+0x1cb>
c00241ac:	be 20 00 00 00       	mov    esi,0x20
c00241b1:	29 ce                	sub    esi,ecx
c00241b3:	89 f1                	mov    ecx,esi
c00241b5:	d3 e0                	shl    eax,cl
c00241b7:	31 db                	xor    ebx,ebx
c00241b9:	85 c0                	test   eax,eax
c00241bb:	0f 95 c3             	setne  bl
c00241be:	31 c0                	xor    eax,eax
c00241c0:	85 d2                	test   edx,edx
c00241c2:	0f 95 c0             	setne  al
c00241c5:	09 c7                	or     edi,eax
c00241c7:	09 fb                	or     ebx,edi
c00241c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00241cf:	01 da                	add    edx,ebx
c00241d1:	83 d6 00             	adc    esi,0x0
c00241d4:	eb 39                	jmp    c002420f <__adddf3+0x21c>
c00241d6:	be 20 00 00 00       	mov    esi,0x20
c00241db:	29 de                	sub    esi,ebx
c00241dd:	89 c7                	mov    edi,eax
c00241df:	89 f1                	mov    ecx,esi
c00241e1:	d3 e7                	shl    edi,cl
c00241e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00241e6:	89 d7                	mov    edi,edx
c00241e8:	88 d9                	mov    cl,bl
c00241ea:	d3 ef                	shr    edi,cl
c00241ec:	89 f9                	mov    ecx,edi
c00241ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00241f1:	09 cf                	or     edi,ecx
c00241f3:	88 d9                	mov    cl,bl
c00241f5:	d3 e8                	shr    eax,cl
c00241f7:	89 f1                	mov    ecx,esi
c00241f9:	d3 e2                	shl    edx,cl
c00241fb:	85 d2                	test   edx,edx
c00241fd:	0f 95 c2             	setne  dl
c0024200:	0f b6 d2             	movzx  edx,dl
c0024203:	09 d7                	or     edi,edx
c0024205:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024208:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002420b:	01 fa                	add    edx,edi
c002420d:	11 c6                	adc    esi,eax
c002420f:	89 f0                	mov    eax,esi
c0024211:	eb 77                	jmp    c002428a <__adddf3+0x297>
c0024213:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024216:	46                   	inc    esi
c0024217:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002421a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024220:	75 41                	jne    c0024263 <__adddf3+0x270>
c0024222:	89 d3                	mov    ebx,edx
c0024224:	09 c3                	or     ebx,eax
c0024226:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002422d:	75 27                	jne    c0024256 <__adddf3+0x263>
c002422f:	85 db                	test   ebx,ebx
c0024231:	0f 84 fb 03 00 00    	je     c0024632 <__adddf3+0x63f>
c0024237:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002423a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002423d:	0f 84 f5 03 00 00    	je     c0024638 <__adddf3+0x645>
c0024243:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024246:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024249:	85 c0                	test   eax,eax
c002424b:	0f 89 91 03 00 00    	jns    c00245e2 <__adddf3+0x5ef>
c0024251:	e9 85 03 00 00       	jmp    c00245db <__adddf3+0x5e8>
c0024256:	85 db                	test   ebx,ebx
c0024258:	0f 85 da 03 00 00    	jne    c0024638 <__adddf3+0x645>
c002425e:	e9 cf 03 00 00       	jmp    c0024632 <__adddf3+0x63f>
c0024263:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024266:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024269:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002426c:	f7 d1                	not    ecx
c002426e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024274:	0f 84 70 03 00 00    	je     c00245ea <__adddf3+0x5f7>
c002427a:	d1 ea                	shr    edx,1
c002427c:	89 c1                	mov    ecx,eax
c002427e:	c1 e1 1f             	shl    ecx,0x1f
c0024281:	09 ca                	or     edx,ecx
c0024283:	d1 e8                	shr    eax,1
c0024285:	e9 6f 03 00 00       	jmp    c00245f9 <__adddf3+0x606>
c002428a:	85 c0                	test   eax,eax
c002428c:	0f 89 67 03 00 00    	jns    c00245f9 <__adddf3+0x606>
c0024292:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024295:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024298:	f7 d1                	not    ecx
c002429a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00242a0:	0f 84 44 03 00 00    	je     c00245ea <__adddf3+0x5f7>
c00242a6:	89 d1                	mov    ecx,edx
c00242a8:	d1 e9                	shr    ecx,1
c00242aa:	83 e2 01             	and    edx,0x1
c00242ad:	09 ca                	or     edx,ecx
c00242af:	89 c1                	mov    ecx,eax
c00242b1:	c1 e1 1f             	shl    ecx,0x1f
c00242b4:	09 ca                	or     edx,ecx
c00242b6:	d1 e8                	shr    eax,1
c00242b8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00242bd:	e9 37 03 00 00       	jmp    c00245f9 <__adddf3+0x606>
c00242c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00242c5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242cb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00242ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00242d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00242d7:	29 de                	sub    esi,ebx
c00242d9:	85 f6                	test   esi,esi
c00242db:	0f 8e bd 00 00 00    	jle    c002439e <__adddf3+0x3ab>
c00242e1:	85 db                	test   ebx,ebx
c00242e3:	75 17                	jne    c00242fc <__adddf3+0x309>
c00242e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00242e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00242eb:	0f 84 47 03 00 00    	je     c0024638 <__adddf3+0x645>
c00242f1:	4e                   	dec    esi
c00242f2:	75 20                	jne    c0024314 <__adddf3+0x321>
c00242f4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00242f7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00242fa:	eb 5b                	jmp    c0024357 <__adddf3+0x364>
c00242fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00242ff:	f7 d3                	not    ebx
c0024301:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024307:	0f 84 2b 03 00 00    	je     c0024638 <__adddf3+0x645>
c002430d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024314:	83 fe 1f             	cmp    esi,0x1f
c0024317:	7e 49                	jle    c0024362 <__adddf3+0x36f>
c0024319:	83 fe 3f             	cmp    esi,0x3f
c002431c:	0f 8f 16 03 00 00    	jg     c0024638 <__adddf3+0x645>
c0024322:	83 e6 1f             	and    esi,0x1f
c0024325:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024328:	89 f1                	mov    ecx,esi
c002432a:	d3 ef                	shr    edi,cl
c002432c:	31 db                	xor    ebx,ebx
c002432e:	85 f6                	test   esi,esi
c0024330:	74 13                	je     c0024345 <__adddf3+0x352>
c0024332:	b9 20 00 00 00       	mov    ecx,0x20
c0024337:	29 f1                	sub    ecx,esi
c0024339:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002433c:	d3 e6                	shl    esi,cl
c002433e:	31 db                	xor    ebx,ebx
c0024340:	85 f6                	test   esi,esi
c0024342:	0f 95 c3             	setne  bl
c0024345:	31 c9                	xor    ecx,ecx
c0024347:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002434b:	0f 95 c1             	setne  cl
c002434e:	09 cf                	or     edi,ecx
c0024350:	09 fb                	or     ebx,edi
c0024352:	29 da                	sub    edx,ebx
c0024354:	83 d8 00             	sbb    eax,0x0
c0024357:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002435a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002435d:	e9 aa 01 00 00       	jmp    c002450c <__adddf3+0x519>
c0024362:	bf 20 00 00 00       	mov    edi,0x20
c0024367:	29 f7                	sub    edi,esi
c0024369:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002436c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002436f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024372:	d3 e3                	shl    ebx,cl
c0024374:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024377:	89 f1                	mov    ecx,esi
c0024379:	d3 ef                	shr    edi,cl
c002437b:	09 fb                	or     ebx,edi
c002437d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024380:	89 f1                	mov    ecx,esi
c0024382:	d3 ef                	shr    edi,cl
c0024384:	89 fe                	mov    esi,edi
c0024386:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024389:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002438c:	d3 e7                	shl    edi,cl
c002438e:	85 ff                	test   edi,edi
c0024390:	0f 95 c1             	setne  cl
c0024393:	0f b6 c9             	movzx  ecx,cl
c0024396:	09 cb                	or     ebx,ecx
c0024398:	29 da                	sub    edx,ebx
c002439a:	19 f0                	sbb    eax,esi
c002439c:	eb b9                	jmp    c0024357 <__adddf3+0x364>
c002439e:	0f 84 cd 00 00 00    	je     c0024471 <__adddf3+0x47e>
c00243a4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00243a7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00243aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00243ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00243b1:	75 1b                	jne    c00243ce <__adddf3+0x3db>
c00243b3:	89 d6                	mov    esi,edx
c00243b5:	09 c6                	or     esi,eax
c00243b7:	0f 84 7b 02 00 00    	je     c0024638 <__adddf3+0x645>
c00243bd:	4b                   	dec    ebx
c00243be:	75 24                	jne    c00243e4 <__adddf3+0x3f1>
c00243c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00243c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00243c6:	29 d1                	sub    ecx,edx
c00243c8:	19 c6                	sbb    esi,eax
c00243ca:	89 ca                	mov    edx,ecx
c00243cc:	eb 61                	jmp    c002442f <__adddf3+0x43c>
c00243ce:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00243d1:	f7 d6                	not    esi
c00243d3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00243d9:	0f 84 59 02 00 00    	je     c0024638 <__adddf3+0x645>
c00243df:	0d 00 00 00 80       	or     eax,0x80000000
c00243e4:	83 fb 1f             	cmp    ebx,0x1f
c00243e7:	7e 4d                	jle    c0024436 <__adddf3+0x443>
c00243e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00243ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00243ef:	83 fb 3f             	cmp    ebx,0x3f
c00243f2:	0f 8f 40 02 00 00    	jg     c0024638 <__adddf3+0x645>
c00243f8:	83 e3 1f             	and    ebx,0x1f
c00243fb:	89 d9                	mov    ecx,ebx
c00243fd:	89 c7                	mov    edi,eax
c00243ff:	d3 ef                	shr    edi,cl
c0024401:	31 db                	xor    ebx,ebx
c0024403:	85 c9                	test   ecx,ecx
c0024405:	74 12                	je     c0024419 <__adddf3+0x426>
c0024407:	be 20 00 00 00       	mov    esi,0x20
c002440c:	29 ce                	sub    esi,ecx
c002440e:	89 f1                	mov    ecx,esi
c0024410:	d3 e0                	shl    eax,cl
c0024412:	31 db                	xor    ebx,ebx
c0024414:	85 c0                	test   eax,eax
c0024416:	0f 95 c3             	setne  bl
c0024419:	31 c0                	xor    eax,eax
c002441b:	85 d2                	test   edx,edx
c002441d:	0f 95 c0             	setne  al
c0024420:	09 c7                	or     edi,eax
c0024422:	09 fb                	or     ebx,edi
c0024424:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024427:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002442a:	29 da                	sub    edx,ebx
c002442c:	83 de 00             	sbb    esi,0x0
c002442f:	89 f0                	mov    eax,esi
c0024431:	e9 d6 00 00 00       	jmp    c002450c <__adddf3+0x519>
c0024436:	be 20 00 00 00       	mov    esi,0x20
c002443b:	29 de                	sub    esi,ebx
c002443d:	89 c7                	mov    edi,eax
c002443f:	89 f1                	mov    ecx,esi
c0024441:	d3 e7                	shl    edi,cl
c0024443:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024446:	89 d7                	mov    edi,edx
c0024448:	88 d9                	mov    cl,bl
c002444a:	d3 ef                	shr    edi,cl
c002444c:	89 f9                	mov    ecx,edi
c002444e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024451:	09 cf                	or     edi,ecx
c0024453:	88 d9                	mov    cl,bl
c0024455:	d3 e8                	shr    eax,cl
c0024457:	89 f1                	mov    ecx,esi
c0024459:	d3 e2                	shl    edx,cl
c002445b:	85 d2                	test   edx,edx
c002445d:	0f 95 c2             	setne  dl
c0024460:	0f b6 d2             	movzx  edx,dl
c0024463:	09 d7                	or     edi,edx
c0024465:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024468:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002446b:	29 fa                	sub    edx,edi
c002446d:	19 c6                	sbb    esi,eax
c002446f:	eb be                	jmp    c002442f <__adddf3+0x43c>
c0024471:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024474:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024477:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002447d:	75 6a                	jne    c00244e9 <__adddf3+0x4f6>
c002447f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024483:	75 58                	jne    c00244dd <__adddf3+0x4ea>
c0024485:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024488:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002448b:	89 d6                	mov    esi,edx
c002448d:	09 c6                	or     esi,eax
c002448f:	75 17                	jne    c00244a8 <__adddf3+0x4b5>
c0024491:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024494:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024497:	85 db                	test   ebx,ebx
c0024499:	0f 85 99 01 00 00    	jne    c0024638 <__adddf3+0x645>
c002449f:	31 ff                	xor    edi,edi
c00244a1:	31 c9                	xor    ecx,ecx
c00244a3:	e9 90 01 00 00       	jmp    c0024638 <__adddf3+0x645>
c00244a8:	85 db                	test   ebx,ebx
c00244aa:	0f 84 88 01 00 00    	je     c0024638 <__adddf3+0x645>
c00244b0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00244b3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00244b6:	85 c0                	test   eax,eax
c00244b8:	79 10                	jns    c00244ca <__adddf3+0x4d7>
c00244ba:	31 c9                	xor    ecx,ecx
c00244bc:	f7 da                	neg    edx
c00244be:	0f 95 c1             	setne  cl
c00244c1:	01 c8                	add    eax,ecx
c00244c3:	f7 d8                	neg    eax
c00244c5:	e9 2f 01 00 00       	jmp    c00245f9 <__adddf3+0x606>
c00244ca:	31 ff                	xor    edi,edi
c00244cc:	31 c9                	xor    ecx,ecx
c00244ce:	89 c3                	mov    ebx,eax
c00244d0:	09 d3                	or     ebx,edx
c00244d2:	0f 84 60 01 00 00    	je     c0024638 <__adddf3+0x645>
c00244d8:	e9 05 01 00 00       	jmp    c00245e2 <__adddf3+0x5ef>
c00244dd:	31 ff                	xor    edi,edi
c00244df:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00244e4:	e9 4f 01 00 00       	jmp    c0024638 <__adddf3+0x645>
c00244e9:	89 c1                	mov    ecx,eax
c00244eb:	89 d0                	mov    eax,edx
c00244ed:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00244f0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00244f3:	89 ca                	mov    edx,ecx
c00244f5:	85 c9                	test   ecx,ecx
c00244f7:	79 2c                	jns    c0024525 <__adddf3+0x532>
c00244f9:	31 c9                	xor    ecx,ecx
c00244fb:	f7 d8                	neg    eax
c00244fd:	0f 95 c1             	setne  cl
c0024500:	01 ca                	add    edx,ecx
c0024502:	f7 da                	neg    edx
c0024504:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024507:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002450a:	eb 19                	jmp    c0024525 <__adddf3+0x532>
c002450c:	85 c0                	test   eax,eax
c002450e:	0f 89 e5 00 00 00    	jns    c00245f9 <__adddf3+0x606>
c0024514:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024519:	89 c1                	mov    ecx,eax
c002451b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002451e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024521:	89 d0                	mov    eax,edx
c0024523:	89 ca                	mov    edx,ecx
c0024525:	85 d2                	test   edx,edx
c0024527:	74 59                	je     c0024582 <__adddf3+0x58f>
c0024529:	0f bd da             	bsr    ebx,edx
c002452c:	83 f3 1f             	xor    ebx,0x1f
c002452f:	88 d9                	mov    cl,bl
c0024531:	d3 e2                	shl    edx,cl
c0024533:	bf 20 00 00 00       	mov    edi,0x20
c0024538:	89 f9                	mov    ecx,edi
c002453a:	29 d9                	sub    ecx,ebx
c002453c:	89 c6                	mov    esi,eax
c002453e:	d3 ee                	shr    esi,cl
c0024540:	09 d6                	or     esi,edx
c0024542:	88 d9                	mov    cl,bl
c0024544:	d3 e0                	shl    eax,cl
c0024546:	89 c2                	mov    edx,eax
c0024548:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002454b:	25 ff 07 00 00       	and    eax,0x7ff
c0024550:	39 d8                	cmp    eax,ebx
c0024552:	7f 22                	jg     c0024576 <__adddf3+0x583>
c0024554:	29 c3                	sub    ebx,eax
c0024556:	43                   	inc    ebx
c0024557:	88 d9                	mov    cl,bl
c0024559:	d3 ea                	shr    edx,cl
c002455b:	29 df                	sub    edi,ebx
c002455d:	89 f9                	mov    ecx,edi
c002455f:	89 f0                	mov    eax,esi
c0024561:	d3 e0                	shl    eax,cl
c0024563:	09 c2                	or     edx,eax
c0024565:	89 f0                	mov    eax,esi
c0024567:	88 d9                	mov    cl,bl
c0024569:	d3 e8                	shr    eax,cl
c002456b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002456e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024574:	eb 6f                	jmp    c00245e5 <__adddf3+0x5f2>
c0024576:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024579:	29 d8                	sub    eax,ebx
c002457b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002457e:	89 f0                	mov    eax,esi
c0024580:	eb 59                	jmp    c00245db <__adddf3+0x5e8>
c0024582:	85 c0                	test   eax,eax
c0024584:	74 6a                	je     c00245f0 <__adddf3+0x5fd>
c0024586:	0f bd c8             	bsr    ecx,eax
c0024589:	83 f1 1f             	xor    ecx,0x1f
c002458c:	d3 e0                	shl    eax,cl
c002458e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024591:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024597:	83 c1 20             	add    ecx,0x20
c002459a:	39 cb                	cmp    ebx,ecx
c002459c:	7f 35                	jg     c00245d3 <__adddf3+0x5e0>
c002459e:	29 d9                	sub    ecx,ebx
c00245a0:	8d 71 01             	lea    esi,[ecx+0x1]
c00245a3:	83 fe 1f             	cmp    esi,0x1f
c00245a6:	7e 09                	jle    c00245b1 <__adddf3+0x5be>
c00245a8:	83 e9 1f             	sub    ecx,0x1f
c00245ab:	d3 e8                	shr    eax,cl
c00245ad:	89 c3                	mov    ebx,eax
c00245af:	eb 11                	jmp    c00245c2 <__adddf3+0x5cf>
c00245b1:	b9 20 00 00 00       	mov    ecx,0x20
c00245b6:	29 f1                	sub    ecx,esi
c00245b8:	89 c3                	mov    ebx,eax
c00245ba:	d3 e3                	shl    ebx,cl
c00245bc:	89 f1                	mov    ecx,esi
c00245be:	d3 e8                	shr    eax,cl
c00245c0:	89 c2                	mov    edx,eax
c00245c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245c5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00245ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245cd:	89 d0                	mov    eax,edx
c00245cf:	89 da                	mov    edx,ebx
c00245d1:	eb 26                	jmp    c00245f9 <__adddf3+0x606>
c00245d3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245d6:	29 cf                	sub    edi,ecx
c00245d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00245db:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00245e0:	eb 17                	jmp    c00245f9 <__adddf3+0x606>
c00245e2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245e5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00245e8:	eb 0f                	jmp    c00245f9 <__adddf3+0x606>
c00245ea:	31 d2                	xor    edx,edx
c00245ec:	31 c0                	xor    eax,eax
c00245ee:	eb 09                	jmp    c00245f9 <__adddf3+0x606>
c00245f0:	89 c2                	mov    edx,eax
c00245f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00245f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00245fc:	c1 e1 14             	shl    ecx,0x14
c00245ff:	89 c3                	mov    ebx,eax
c0024601:	c1 eb 0b             	shr    ebx,0xb
c0024604:	09 d9                	or     ecx,ebx
c0024606:	89 d3                	mov    ebx,edx
c0024608:	c1 eb 0b             	shr    ebx,0xb
c002460b:	c1 e0 15             	shl    eax,0x15
c002460e:	09 d8                	or     eax,ebx
c0024610:	89 c7                	mov    edi,eax
c0024612:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024618:	0f 95 c0             	setne  al
c002461b:	89 c6                	mov    esi,eax
c002461d:	09 f3                	or     ebx,esi
c002461f:	83 e3 01             	and    ebx,0x1
c0024622:	c1 ea 0a             	shr    edx,0xa
c0024625:	21 da                	and    edx,ebx
c0024627:	89 f8                	mov    eax,edi
c0024629:	01 d0                	add    eax,edx
c002462b:	83 d1 00             	adc    ecx,0x0
c002462e:	89 c7                	mov    edi,eax
c0024630:	eb 06                	jmp    c0024638 <__adddf3+0x645>
c0024632:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024635:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024638:	89 f8                	mov    eax,edi
c002463a:	89 ca                	mov    edx,ecx
c002463c:	83 c4 24             	add    esp,0x24
c002463f:	5b                   	pop    ebx
c0024640:	5e                   	pop    esi
c0024641:	5f                   	pop    edi
c0024642:	5d                   	pop    ebp
c0024643:	c3                   	ret    

c0024644 <__subdf3>:
c0024644:	55                   	push   ebp
c0024645:	89 e5                	mov    ebp,esp
c0024647:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002464a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002464d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024653:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024656:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024659:	5d                   	pop    ebp
c002465a:	e9 94 f9 ff ff       	jmp    c0023ff3 <__adddf3>

c002465f <__negdf2>:
c002465f:	55                   	push   ebp
c0024660:	89 e5                	mov    ebp,esp
c0024662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024665:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024668:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002466e:	5d                   	pop    ebp
c002466f:	c3                   	ret    

c0024670 <__muldf3>:
c0024670:	55                   	push   ebp
c0024671:	89 e5                	mov    ebp,esp
c0024673:	57                   	push   edi
c0024674:	56                   	push   esi
c0024675:	53                   	push   ebx
c0024676:	83 ec 24             	sub    esp,0x24
c0024679:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002467c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002467f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024682:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024685:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024688:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002468b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002468e:	89 c8                	mov    eax,ecx
c0024690:	c1 f8 14             	sar    eax,0x14
c0024693:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024696:	89 f8                	mov    eax,edi
c0024698:	89 fb                	mov    ebx,edi
c002469a:	c1 e3 0b             	shl    ebx,0xb
c002469d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00246a0:	c1 e1 0b             	shl    ecx,0xb
c00246a3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00246a9:	c1 e8 15             	shr    eax,0x15
c00246ac:	09 c1                	or     ecx,eax
c00246ae:	89 d6                	mov    esi,edx
c00246b0:	89 d0                	mov    eax,edx
c00246b2:	c1 f8 14             	sar    eax,0x14
c00246b5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246b8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00246bb:	89 c3                	mov    ebx,eax
c00246bd:	c1 e3 0b             	shl    ebx,0xb
c00246c0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00246c3:	c1 e6 0b             	shl    esi,0xb
c00246c6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00246cc:	c1 e8 15             	shr    eax,0x15
c00246cf:	09 c6                	or     esi,eax
c00246d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00246d4:	25 ff 07 00 00       	and    eax,0x7ff
c00246d9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00246dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00246df:	25 ff 07 00 00       	and    eax,0x7ff
c00246e4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00246e7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00246ea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00246ed:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00246f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00246f7:	40                   	inc    eax
c00246f8:	a9 fe 07 00 00       	test   eax,0x7fe
c00246fd:	0f 85 8d 00 00 00    	jne    c0024790 <__muldf3+0x120>
c0024703:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024706:	09 c8                	or     eax,ecx
c0024708:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002470c:	74 44                	je     c0024752 <__muldf3+0xe2>
c002470e:	85 c0                	test   eax,eax
c0024710:	0f 85 31 02 00 00    	jne    c0024947 <__muldf3+0x2d7>
c0024716:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024719:	40                   	inc    eax
c002471a:	a9 fe 07 00 00       	test   eax,0x7fe
c002471f:	75 13                	jne    c0024734 <__muldf3+0xc4>
c0024721:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024724:	09 f1                	or     ecx,esi
c0024726:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002472a:	74 22                	je     c002474e <__muldf3+0xde>
c002472c:	85 c9                	test   ecx,ecx
c002472e:	0f 85 0d 02 00 00    	jne    c0024941 <__muldf3+0x2d1>
c0024734:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024738:	0f 89 09 02 00 00    	jns    c0024947 <__muldf3+0x2d7>
c002473e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024741:	05 00 00 00 80       	add    eax,0x80000000
c0024746:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024749:	e9 f9 01 00 00       	jmp    c0024947 <__muldf3+0x2d7>
c002474e:	85 c9                	test   ecx,ecx
c0024750:	eb 2e                	jmp    c0024780 <__muldf3+0x110>
c0024752:	85 c0                	test   eax,eax
c0024754:	74 20                	je     c0024776 <__muldf3+0x106>
c0024756:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024759:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002475c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002475f:	c1 ef 1f             	shr    edi,0x1f
c0024762:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024765:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024768:	8d 43 ff             	lea    eax,[ebx-0x1]
c002476b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002476e:	09 f9                	or     ecx,edi
c0024770:	78 1e                	js     c0024790 <__muldf3+0x120>
c0024772:	89 c3                	mov    ebx,eax
c0024774:	eb e0                	jmp    c0024756 <__muldf3+0xe6>
c0024776:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024779:	f7 d0                	not    eax
c002477b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024780:	75 b2                	jne    c0024734 <__muldf3+0xc4>
c0024782:	31 ff                	xor    edi,edi
c0024784:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002478b:	e9 b7 01 00 00       	jmp    c0024947 <__muldf3+0x2d7>
c0024790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024793:	40                   	inc    eax
c0024794:	a9 fe 07 00 00       	test   eax,0x7fe
c0024799:	75 57                	jne    c00247f2 <__muldf3+0x182>
c002479b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002479e:	09 f0                	or     eax,esi
c00247a0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00247a4:	74 23                	je     c00247c9 <__muldf3+0x159>
c00247a6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00247aa:	0f 89 91 01 00 00    	jns    c0024941 <__muldf3+0x2d1>
c00247b0:	85 c0                	test   eax,eax
c00247b2:	0f 85 89 01 00 00    	jne    c0024941 <__muldf3+0x2d1>
c00247b8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00247bb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00247c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247c4:	e9 7e 01 00 00       	jmp    c0024947 <__muldf3+0x2d7>
c00247c9:	85 c0                	test   eax,eax
c00247cb:	75 0c                	jne    c00247d9 <__muldf3+0x169>
c00247cd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00247d1:	0f 89 6a 01 00 00    	jns    c0024941 <__muldf3+0x2d1>
c00247d7:	eb df                	jmp    c00247b8 <__muldf3+0x148>
c00247d9:	01 f6                	add    esi,esi
c00247db:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00247de:	c1 ea 1f             	shr    edx,0x1f
c00247e1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00247e4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00247e7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00247ea:	09 d6                	or     esi,edx
c00247ec:	78 04                	js     c00247f2 <__muldf3+0x182>
c00247ee:	89 c3                	mov    ebx,eax
c00247f0:	eb e7                	jmp    c00247d9 <__muldf3+0x169>
c00247f2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00247f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00247fe:	89 c8                	mov    eax,ecx
c0024800:	f7 e6                	mul    esi
c0024802:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024805:	89 c7                	mov    edi,eax
c0024807:	89 c8                	mov    eax,ecx
c0024809:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002480c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002480f:	89 c1                	mov    ecx,eax
c0024811:	89 f0                	mov    eax,esi
c0024813:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024816:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024819:	89 c6                	mov    esi,eax
c002481b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002481e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024821:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024824:	31 c0                	xor    eax,eax
c0024826:	01 f1                	add    ecx,esi
c0024828:	0f 92 c0             	setb   al
c002482b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002482e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024831:	83 d6 00             	adc    esi,0x0
c0024834:	01 c7                	add    edi,eax
c0024836:	83 d6 00             	adc    esi,0x0
c0024839:	01 ca                	add    edx,ecx
c002483b:	0f 92 c1             	setb   cl
c002483e:	0f b6 c9             	movzx  ecx,cl
c0024841:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024844:	83 d6 00             	adc    esi,0x0
c0024847:	01 cf                	add    edi,ecx
c0024849:	83 d6 00             	adc    esi,0x0
c002484c:	31 c9                	xor    ecx,ecx
c002484e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024851:	0f 95 c1             	setne  cl
c0024854:	09 cf                	or     edi,ecx
c0024856:	85 f6                	test   esi,esi
c0024858:	78 0c                	js     c0024866 <__muldf3+0x1f6>
c002485a:	01 f6                	add    esi,esi
c002485c:	89 f8                	mov    eax,edi
c002485e:	c1 e8 1f             	shr    eax,0x1f
c0024861:	09 c6                	or     esi,eax
c0024863:	01 ff                	add    edi,edi
c0024865:	4b                   	dec    ebx
c0024866:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002486c:	0f 8f 85 00 00 00    	jg     c00248f7 <__muldf3+0x287>
c0024872:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024878:	85 db                	test   ebx,ebx
c002487a:	0f 8f 84 00 00 00    	jg     c0024904 <__muldf3+0x294>
c0024880:	83 fb cc             	cmp    ebx,0xffffffcc
c0024883:	7c 79                	jl     c00248fe <__muldf3+0x28e>
c0024885:	ba 01 00 00 00       	mov    edx,0x1
c002488a:	29 da                	sub    edx,ebx
c002488c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024892:	83 fa 1f             	cmp    edx,0x1f
c0024895:	7e 30                	jle    c00248c7 <__muldf3+0x257>
c0024897:	83 fa 20             	cmp    edx,0x20
c002489a:	75 0b                	jne    c00248a7 <__muldf3+0x237>
c002489c:	31 c0                	xor    eax,eax
c002489e:	85 ff                	test   edi,edi
c00248a0:	0f 95 c0             	setne  al
c00248a3:	89 c7                	mov    edi,eax
c00248a5:	eb 1a                	jmp    c00248c1 <__muldf3+0x251>
c00248a7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00248aa:	89 f0                	mov    eax,esi
c00248ac:	d3 e0                	shl    eax,cl
c00248ae:	09 f8                	or     eax,edi
c00248b0:	0f 95 c0             	setne  al
c00248b3:	0f b6 c0             	movzx  eax,al
c00248b6:	89 c7                	mov    edi,eax
c00248b8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00248bd:	29 d9                	sub    ecx,ebx
c00248bf:	d3 ee                	shr    esi,cl
c00248c1:	09 f7                	or     edi,esi
c00248c3:	31 db                	xor    ebx,ebx
c00248c5:	eb 3b                	jmp    c0024902 <__muldf3+0x292>
c00248c7:	83 c3 1f             	add    ebx,0x1f
c00248ca:	89 f0                	mov    eax,esi
c00248cc:	88 d9                	mov    cl,bl
c00248ce:	d3 e0                	shl    eax,cl
c00248d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00248d3:	89 f8                	mov    eax,edi
c00248d5:	88 d1                	mov    cl,dl
c00248d7:	d3 e8                	shr    eax,cl
c00248d9:	89 c1                	mov    ecx,eax
c00248db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00248de:	09 c8                	or     eax,ecx
c00248e0:	88 d9                	mov    cl,bl
c00248e2:	d3 e7                	shl    edi,cl
c00248e4:	31 db                	xor    ebx,ebx
c00248e6:	85 ff                	test   edi,edi
c00248e8:	0f 95 c3             	setne  bl
c00248eb:	89 df                	mov    edi,ebx
c00248ed:	09 c7                	or     edi,eax
c00248ef:	88 d1                	mov    cl,dl
c00248f1:	d3 ee                	shr    esi,cl
c00248f3:	31 db                	xor    ebx,ebx
c00248f5:	eb 0d                	jmp    c0024904 <__muldf3+0x294>
c00248f7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00248fc:	eb 02                	jmp    c0024900 <__muldf3+0x290>
c00248fe:	31 db                	xor    ebx,ebx
c0024900:	31 ff                	xor    edi,edi
c0024902:	31 f6                	xor    esi,esi
c0024904:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024907:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002490a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002490f:	09 c3                	or     ebx,eax
c0024911:	c1 e3 14             	shl    ebx,0x14
c0024914:	89 f0                	mov    eax,esi
c0024916:	c1 e8 0b             	shr    eax,0xb
c0024919:	09 c3                	or     ebx,eax
c002491b:	89 f8                	mov    eax,edi
c002491d:	c1 e8 0b             	shr    eax,0xb
c0024920:	c1 e6 15             	shl    esi,0x15
c0024923:	09 c6                	or     esi,eax
c0024925:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002492b:	0f 95 c1             	setne  cl
c002492e:	09 c8                	or     eax,ecx
c0024930:	83 e0 01             	and    eax,0x1
c0024933:	c1 ef 0a             	shr    edi,0xa
c0024936:	21 c7                	and    edi,eax
c0024938:	01 f7                	add    edi,esi
c002493a:	83 d3 00             	adc    ebx,0x0
c002493d:	89 da                	mov    edx,ebx
c002493f:	eb 03                	jmp    c0024944 <__muldf3+0x2d4>
c0024941:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024944:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024947:	89 f8                	mov    eax,edi
c0024949:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002494c:	83 c4 24             	add    esp,0x24
c002494f:	5b                   	pop    ebx
c0024950:	5e                   	pop    esi
c0024951:	5f                   	pop    edi
c0024952:	5d                   	pop    ebp
c0024953:	c3                   	ret    

c0024954 <__divdf3>:
c0024954:	55                   	push   ebp
c0024955:	89 e5                	mov    ebp,esp
c0024957:	57                   	push   edi
c0024958:	56                   	push   esi
c0024959:	53                   	push   ebx
c002495a:	83 ec 2c             	sub    esp,0x2c
c002495d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024960:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024963:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024966:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024969:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002496c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002496f:	89 ce                	mov    esi,ecx
c0024971:	89 c8                	mov    eax,ecx
c0024973:	c1 f8 14             	sar    eax,0x14
c0024976:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024979:	89 f8                	mov    eax,edi
c002497b:	89 fb                	mov    ebx,edi
c002497d:	c1 e3 0b             	shl    ebx,0xb
c0024980:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024983:	c1 e6 0b             	shl    esi,0xb
c0024986:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002498c:	c1 e8 15             	shr    eax,0x15
c002498f:	09 c6                	or     esi,eax
c0024991:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024994:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024997:	89 c2                	mov    edx,eax
c0024999:	c1 fa 14             	sar    edx,0x14
c002499c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002499f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00249a2:	89 de                	mov    esi,ebx
c00249a4:	c1 e6 0b             	shl    esi,0xb
c00249a7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00249aa:	c1 e0 0b             	shl    eax,0xb
c00249ad:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00249b2:	c1 eb 15             	shr    ebx,0x15
c00249b5:	09 d8                	or     eax,ebx
c00249b7:	89 c2                	mov    edx,eax
c00249b9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249bc:	25 ff 07 00 00       	and    eax,0x7ff
c00249c1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00249c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00249c7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00249cd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00249d0:	29 d8                	sub    eax,ebx
c00249d2:	05 ff 03 00 00       	add    eax,0x3ff
c00249d7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00249da:	46                   	inc    esi
c00249db:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00249e1:	0f 85 a5 00 00 00    	jne    c0024a8c <__divdf3+0x138>
c00249e7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00249ea:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00249ed:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00249f1:	74 2a                	je     c0024a1d <__divdf3+0xc9>
c00249f3:	85 f6                	test   esi,esi
c00249f5:	0f 85 cc 02 00 00    	jne    c0024cc7 <__divdf3+0x373>
c00249fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00249fe:	40                   	inc    eax
c00249ff:	a9 fe 07 00 00       	test   eax,0x7fe
c0024a04:	75 26                	jne    c0024a2c <__divdf3+0xd8>
c0024a06:	85 db                	test   ebx,ebx
c0024a08:	74 22                	je     c0024a2c <__divdf3+0xd8>
c0024a0a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024a0d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024a13:	09 d0                	or     eax,edx
c0024a15:	0f 85 ac 02 00 00    	jne    c0024cc7 <__divdf3+0x373>
c0024a1b:	eb 63                	jmp    c0024a80 <__divdf3+0x12c>
c0024a1d:	85 f6                	test   esi,esi
c0024a1f:	75 22                	jne    c0024a43 <__divdf3+0xef>
c0024a21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a24:	40                   	inc    eax
c0024a25:	a9 fe 07 00 00       	test   eax,0x7fe
c0024a2a:	74 36                	je     c0024a62 <__divdf3+0x10e>
c0024a2c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024a30:	0f 89 91 02 00 00    	jns    c0024cc7 <__divdf3+0x373>
c0024a36:	89 f8                	mov    eax,edi
c0024a38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024a3e:	e9 80 02 00 00       	jmp    c0024cc3 <__divdf3+0x36f>
c0024a43:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024a46:	01 f6                	add    esi,esi
c0024a48:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024a4b:	c1 ef 1f             	shr    edi,0x1f
c0024a4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024a51:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024a54:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a57:	09 f7                	or     edi,esi
c0024a59:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024a5c:	78 2e                	js     c0024a8c <__divdf3+0x138>
c0024a5e:	89 c8                	mov    eax,ecx
c0024a60:	eb e1                	jmp    c0024a43 <__divdf3+0xef>
c0024a62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024a65:	09 d0                	or     eax,edx
c0024a67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024a6b:	74 0f                	je     c0024a7c <__divdf3+0x128>
c0024a6d:	85 c0                	test   eax,eax
c0024a6f:	74 bb                	je     c0024a2c <__divdf3+0xd8>
c0024a71:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024a74:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a77:	e9 4b 02 00 00       	jmp    c0024cc7 <__divdf3+0x373>
c0024a7c:	85 c0                	test   eax,eax
c0024a7e:	75 ac                	jne    c0024a2c <__divdf3+0xd8>
c0024a80:	31 ff                	xor    edi,edi
c0024a82:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024a87:	e9 3b 02 00 00       	jmp    c0024cc7 <__divdf3+0x373>
c0024a8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024a8f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024a92:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024a98:	75 6b                	jne    c0024b05 <__divdf3+0x1b1>
c0024a9a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a9d:	09 d6                	or     esi,edx
c0024a9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024aa3:	74 28                	je     c0024acd <__divdf3+0x179>
c0024aa5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024aa8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024aab:	85 f6                	test   esi,esi
c0024aad:	0f 85 14 02 00 00    	jne    c0024cc7 <__divdf3+0x373>
c0024ab3:	31 ff                	xor    edi,edi
c0024ab5:	31 c9                	xor    ecx,ecx
c0024ab7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024aba:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024abd:	0f 89 04 02 00 00    	jns    c0024cc7 <__divdf3+0x373>
c0024ac3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024ac8:	e9 fa 01 00 00       	jmp    c0024cc7 <__divdf3+0x373>
c0024acd:	85 f6                	test   esi,esi
c0024acf:	75 1b                	jne    c0024aec <__divdf3+0x198>
c0024ad1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ad4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024ad7:	25 00 00 00 80       	and    eax,0x80000000
c0024adc:	31 c9                	xor    ecx,ecx
c0024ade:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024ae3:	89 cf                	mov    edi,ecx
c0024ae5:	89 c1                	mov    ecx,eax
c0024ae7:	e9 db 01 00 00       	jmp    c0024cc7 <__divdf3+0x373>
c0024aec:	01 d2                	add    edx,edx
c0024aee:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024af1:	c1 eb 1f             	shr    ebx,0x1f
c0024af4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024af7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024afa:	8d 48 01             	lea    ecx,[eax+0x1]
c0024afd:	09 da                	or     edx,ebx
c0024aff:	78 04                	js     c0024b05 <__divdf3+0x1b1>
c0024b01:	89 c8                	mov    eax,ecx
c0024b03:	eb e7                	jmp    c0024aec <__divdf3+0x198>
c0024b05:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024b08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024b0e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b14:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024b17:	39 d6                	cmp    esi,edx
c0024b19:	77 0d                	ja     c0024b28 <__divdf3+0x1d4>
c0024b1b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b1e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024b21:	72 1b                	jb     c0024b3e <__divdf3+0x1ea>
c0024b23:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024b26:	75 16                	jne    c0024b3e <__divdf3+0x1ea>
c0024b28:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b2b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024b2e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024b31:	83 de 00             	sbb    esi,0x0
c0024b34:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024b37:	ba 01 00 00 00       	mov    edx,0x1
c0024b3c:	eb 02                	jmp    c0024b40 <__divdf3+0x1ec>
c0024b3e:	31 d2                	xor    edx,edx
c0024b40:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024b47:	31 ff                	xor    edi,edi
c0024b49:	01 ff                	add    edi,edi
c0024b4b:	89 d1                	mov    ecx,edx
c0024b4d:	c1 e9 1f             	shr    ecx,0x1f
c0024b50:	09 cf                	or     edi,ecx
c0024b52:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024b55:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024b58:	89 da                	mov    edx,ebx
c0024b5a:	89 f3                	mov    ebx,esi
c0024b5c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024b5f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b62:	c1 e9 1f             	shr    ecx,0x1f
c0024b65:	09 ce                	or     esi,ecx
c0024b67:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024b6a:	01 c9                	add    ecx,ecx
c0024b6c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024b6f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024b72:	85 db                	test   ebx,ebx
c0024b74:	78 29                	js     c0024b9f <__divdf3+0x24b>
c0024b76:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024b79:	72 07                	jb     c0024b82 <__divdf3+0x22e>
c0024b7b:	75 3c                	jne    c0024bb9 <__divdf3+0x265>
c0024b7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024b80:	77 37                	ja     c0024bb9 <__divdf3+0x265>
c0024b82:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b85:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024b88:	31 d2                	xor    edx,edx
c0024b8a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024b8d:	0f 97 c2             	seta   dl
c0024b90:	29 d6                	sub    esi,edx
c0024b92:	89 d9                	mov    ecx,ebx
c0024b94:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024b97:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024b9a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b9d:	eb 17                	jmp    c0024bb6 <__divdf3+0x262>
c0024b9f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024ba2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024ba5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024ba8:	0f 97 c1             	seta   cl
c0024bab:	0f b6 c9             	movzx  ecx,cl
c0024bae:	29 ce                	sub    esi,ecx
c0024bb0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024bb3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024bb6:	83 ca 01             	or     edx,0x1
c0024bb9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024bbc:	75 8b                	jne    c0024b49 <__divdf3+0x1f5>
c0024bbe:	c1 e7 09             	shl    edi,0x9
c0024bc1:	89 d1                	mov    ecx,edx
c0024bc3:	c1 e9 17             	shr    ecx,0x17
c0024bc6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024bc9:	09 f3                	or     ebx,esi
c0024bcb:	0f 95 c3             	setne  bl
c0024bce:	0f b6 db             	movzx  ebx,bl
c0024bd1:	c1 e2 09             	shl    edx,0x9
c0024bd4:	09 d3                	or     ebx,edx
c0024bd6:	89 ca                	mov    edx,ecx
c0024bd8:	09 fa                	or     edx,edi
c0024bda:	78 0c                	js     c0024be8 <__divdf3+0x294>
c0024bdc:	01 d2                	add    edx,edx
c0024bde:	89 d9                	mov    ecx,ebx
c0024be0:	c1 e9 1f             	shr    ecx,0x1f
c0024be3:	09 ca                	or     edx,ecx
c0024be5:	01 db                	add    ebx,ebx
c0024be7:	48                   	dec    eax
c0024be8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024bed:	0f 8f 83 00 00 00    	jg     c0024c76 <__divdf3+0x322>
c0024bf3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024bf9:	85 c0                	test   eax,eax
c0024bfb:	0f 8f 82 00 00 00    	jg     c0024c83 <__divdf3+0x32f>
c0024c01:	83 f8 cc             	cmp    eax,0xffffffcc
c0024c04:	7c 77                	jl     c0024c7d <__divdf3+0x329>
c0024c06:	be 01 00 00 00       	mov    esi,0x1
c0024c0b:	29 c6                	sub    esi,eax
c0024c0d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024c13:	83 fe 1f             	cmp    esi,0x1f
c0024c16:	7e 2f                	jle    c0024c47 <__divdf3+0x2f3>
c0024c18:	83 fe 20             	cmp    esi,0x20
c0024c1b:	75 0a                	jne    c0024c27 <__divdf3+0x2d3>
c0024c1d:	85 db                	test   ebx,ebx
c0024c1f:	0f 95 c3             	setne  bl
c0024c22:	0f b6 db             	movzx  ebx,bl
c0024c25:	eb 1a                	jmp    c0024c41 <__divdf3+0x2ed>
c0024c27:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024c2a:	89 d7                	mov    edi,edx
c0024c2c:	d3 e7                	shl    edi,cl
c0024c2e:	89 f9                	mov    ecx,edi
c0024c30:	09 d9                	or     ecx,ebx
c0024c32:	0f 95 c3             	setne  bl
c0024c35:	0f b6 db             	movzx  ebx,bl
c0024c38:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024c3d:	29 c1                	sub    ecx,eax
c0024c3f:	d3 ea                	shr    edx,cl
c0024c41:	09 d3                	or     ebx,edx
c0024c43:	31 c0                	xor    eax,eax
c0024c45:	eb 3a                	jmp    c0024c81 <__divdf3+0x32d>
c0024c47:	83 c0 1f             	add    eax,0x1f
c0024c4a:	89 d7                	mov    edi,edx
c0024c4c:	88 c1                	mov    cl,al
c0024c4e:	d3 e7                	shl    edi,cl
c0024c50:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024c53:	89 df                	mov    edi,ebx
c0024c55:	89 f1                	mov    ecx,esi
c0024c57:	d3 ef                	shr    edi,cl
c0024c59:	89 f9                	mov    ecx,edi
c0024c5b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024c5e:	09 cf                	or     edi,ecx
c0024c60:	88 c1                	mov    cl,al
c0024c62:	d3 e3                	shl    ebx,cl
c0024c64:	85 db                	test   ebx,ebx
c0024c66:	0f 95 c3             	setne  bl
c0024c69:	0f b6 db             	movzx  ebx,bl
c0024c6c:	09 fb                	or     ebx,edi
c0024c6e:	89 f1                	mov    ecx,esi
c0024c70:	d3 ea                	shr    edx,cl
c0024c72:	31 c0                	xor    eax,eax
c0024c74:	eb 0d                	jmp    c0024c83 <__divdf3+0x32f>
c0024c76:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024c7b:	eb 02                	jmp    c0024c7f <__divdf3+0x32b>
c0024c7d:	31 c0                	xor    eax,eax
c0024c7f:	31 db                	xor    ebx,ebx
c0024c81:	31 d2                	xor    edx,edx
c0024c83:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024c86:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024c89:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024c8f:	09 c8                	or     eax,ecx
c0024c91:	c1 e0 14             	shl    eax,0x14
c0024c94:	89 d1                	mov    ecx,edx
c0024c96:	c1 e9 0b             	shr    ecx,0xb
c0024c99:	09 c8                	or     eax,ecx
c0024c9b:	89 c6                	mov    esi,eax
c0024c9d:	89 d9                	mov    ecx,ebx
c0024c9f:	c1 e9 0b             	shr    ecx,0xb
c0024ca2:	c1 e2 15             	shl    edx,0x15
c0024ca5:	09 ca                	or     edx,ecx
c0024ca7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024cad:	0f 95 c0             	setne  al
c0024cb0:	09 c1                	or     ecx,eax
c0024cb2:	83 e1 01             	and    ecx,0x1
c0024cb5:	c1 eb 0a             	shr    ebx,0xa
c0024cb8:	21 cb                	and    ebx,ecx
c0024cba:	01 d3                	add    ebx,edx
c0024cbc:	89 d8                	mov    eax,ebx
c0024cbe:	83 d6 00             	adc    esi,0x0
c0024cc1:	89 f2                	mov    edx,esi
c0024cc3:	89 c7                	mov    edi,eax
c0024cc5:	89 d1                	mov    ecx,edx
c0024cc7:	89 f8                	mov    eax,edi
c0024cc9:	89 ca                	mov    edx,ecx
c0024ccb:	83 c4 2c             	add    esp,0x2c
c0024cce:	5b                   	pop    ebx
c0024ccf:	5e                   	pop    esi
c0024cd0:	5f                   	pop    edi
c0024cd1:	5d                   	pop    ebp
c0024cd2:	c3                   	ret    

c0024cd3 <__floatsidf>:
c0024cd3:	55                   	push   ebp
c0024cd4:	89 e5                	mov    ebp,esp
c0024cd6:	56                   	push   esi
c0024cd7:	53                   	push   ebx
c0024cd8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024cdb:	85 db                	test   ebx,ebx
c0024cdd:	7e 15                	jle    c0024cf4 <__floatsidf+0x21>
c0024cdf:	0f bd cb             	bsr    ecx,ebx
c0024ce2:	83 f1 1f             	xor    ecx,0x1f
c0024ce5:	d3 e3                	shl    ebx,cl
c0024ce7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024ced:	b8 1e 04 00 00       	mov    eax,0x41e
c0024cf2:	eb 21                	jmp    c0024d15 <__floatsidf+0x42>
c0024cf4:	b8 00 00 00 00       	mov    eax,0x0
c0024cf9:	ba 00 00 00 00       	mov    edx,0x0
c0024cfe:	74 2a                	je     c0024d2a <__floatsidf+0x57>
c0024d00:	f7 db                	neg    ebx
c0024d02:	0f bd cb             	bsr    ecx,ebx
c0024d05:	83 f1 1f             	xor    ecx,0x1f
c0024d08:	d3 e3                	shl    ebx,cl
c0024d0a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d10:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024d15:	29 c8                	sub    eax,ecx
c0024d17:	c1 e0 14             	shl    eax,0x14
c0024d1a:	89 c1                	mov    ecx,eax
c0024d1c:	89 de                	mov    esi,ebx
c0024d1e:	c1 ee 0b             	shr    esi,0xb
c0024d21:	09 f1                	or     ecx,esi
c0024d23:	89 ca                	mov    edx,ecx
c0024d25:	c1 e3 15             	shl    ebx,0x15
c0024d28:	89 d8                	mov    eax,ebx
c0024d2a:	5b                   	pop    ebx
c0024d2b:	5e                   	pop    esi
c0024d2c:	5d                   	pop    ebp
c0024d2d:	c3                   	ret    

c0024d2e <__floatunsidf>:
c0024d2e:	55                   	push   ebp
c0024d2f:	89 e5                	mov    ebp,esp
c0024d31:	56                   	push   esi
c0024d32:	53                   	push   ebx
c0024d33:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d36:	85 db                	test   ebx,ebx
c0024d38:	74 2a                	je     c0024d64 <__floatunsidf+0x36>
c0024d3a:	0f bd cb             	bsr    ecx,ebx
c0024d3d:	83 f1 1f             	xor    ecx,0x1f
c0024d40:	d3 e3                	shl    ebx,cl
c0024d42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d48:	b8 1e 04 00 00       	mov    eax,0x41e
c0024d4d:	29 c8                	sub    eax,ecx
c0024d4f:	c1 e0 14             	shl    eax,0x14
c0024d52:	89 c1                	mov    ecx,eax
c0024d54:	89 de                	mov    esi,ebx
c0024d56:	c1 ee 0b             	shr    esi,0xb
c0024d59:	09 f1                	or     ecx,esi
c0024d5b:	89 ca                	mov    edx,ecx
c0024d5d:	c1 e3 15             	shl    ebx,0x15
c0024d60:	89 d8                	mov    eax,ebx
c0024d62:	eb 04                	jmp    c0024d68 <__floatunsidf+0x3a>
c0024d64:	31 c0                	xor    eax,eax
c0024d66:	31 d2                	xor    edx,edx
c0024d68:	5b                   	pop    ebx
c0024d69:	5e                   	pop    esi
c0024d6a:	5d                   	pop    ebp
c0024d6b:	c3                   	ret    

c0024d6c <__fixdfsi>:
c0024d6c:	55                   	push   ebp
c0024d6d:	89 e5                	mov    ebp,esp
c0024d6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024d72:	89 d1                	mov    ecx,edx
c0024d74:	c1 e1 0b             	shl    ecx,0xb
c0024d77:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d80:	c1 e8 15             	shr    eax,0x15
c0024d83:	09 c1                	or     ecx,eax
c0024d85:	c1 fa 14             	sar    edx,0x14
c0024d88:	78 1f                	js     c0024da9 <__fixdfsi+0x3d>
c0024d8a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024d90:	31 c0                	xor    eax,eax
c0024d92:	83 fa 1e             	cmp    edx,0x1e
c0024d95:	77 40                	ja     c0024dd7 <__fixdfsi+0x6b>
c0024d97:	89 c8                	mov    eax,ecx
c0024d99:	0d 00 00 00 80       	or     eax,0x80000000
c0024d9e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024da3:	29 d1                	sub    ecx,edx
c0024da5:	d3 e8                	shr    eax,cl
c0024da7:	eb 2e                	jmp    c0024dd7 <__fixdfsi+0x6b>
c0024da9:	31 c0                	xor    eax,eax
c0024dab:	81 c2 01 04 00 00    	add    edx,0x401
c0024db1:	78 24                	js     c0024dd7 <__fixdfsi+0x6b>
c0024db3:	83 fa 1e             	cmp    edx,0x1e
c0024db6:	7e 09                	jle    c0024dc1 <__fixdfsi+0x55>
c0024db8:	83 fa 1f             	cmp    edx,0x1f
c0024dbb:	75 18                	jne    c0024dd5 <__fixdfsi+0x69>
c0024dbd:	85 c9                	test   ecx,ecx
c0024dbf:	75 14                	jne    c0024dd5 <__fixdfsi+0x69>
c0024dc1:	89 c8                	mov    eax,ecx
c0024dc3:	0d 00 00 00 80       	or     eax,0x80000000
c0024dc8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024dcd:	29 d1                	sub    ecx,edx
c0024dcf:	d3 e8                	shr    eax,cl
c0024dd1:	f7 d8                	neg    eax
c0024dd3:	eb 02                	jmp    c0024dd7 <__fixdfsi+0x6b>
c0024dd5:	31 c0                	xor    eax,eax
c0024dd7:	5d                   	pop    ebp
c0024dd8:	c3                   	ret    

c0024dd9 <__fixunsdfsi>:
c0024dd9:	55                   	push   ebp
c0024dda:	89 e5                	mov    ebp,esp
c0024ddc:	53                   	push   ebx
c0024ddd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024de0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024de3:	89 d3                	mov    ebx,edx
c0024de5:	c1 fb 14             	sar    ebx,0x14
c0024de8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024dee:	31 c0                	xor    eax,eax
c0024df0:	83 fb 1f             	cmp    ebx,0x1f
c0024df3:	77 1d                	ja     c0024e12 <__fixunsdfsi+0x39>
c0024df5:	89 d0                	mov    eax,edx
c0024df7:	c1 e0 0b             	shl    eax,0xb
c0024dfa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024dff:	c1 e9 15             	shr    ecx,0x15
c0024e02:	09 c8                	or     eax,ecx
c0024e04:	0d 00 00 00 80       	or     eax,0x80000000
c0024e09:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e0e:	29 d9                	sub    ecx,ebx
c0024e10:	d3 e8                	shr    eax,cl
c0024e12:	5b                   	pop    ebx
c0024e13:	5d                   	pop    ebp
c0024e14:	c3                   	ret    

c0024e15 <__cmpdf2>:
c0024e15:	55                   	push   ebp
c0024e16:	89 e5                	mov    ebp,esp
c0024e18:	57                   	push   edi
c0024e19:	56                   	push   esi
c0024e1a:	53                   	push   ebx
c0024e1b:	83 ec 0c             	sub    esp,0xc
c0024e1e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024e21:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024e24:	89 ca                	mov    edx,ecx
c0024e26:	c1 ea 14             	shr    edx,0x14
c0024e29:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024e2f:	89 cb                	mov    ebx,ecx
c0024e31:	c1 fb 1f             	sar    ebx,0x1f
c0024e34:	31 da                	xor    edx,ebx
c0024e36:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e39:	89 df                	mov    edi,ebx
c0024e3b:	c1 e7 0b             	shl    edi,0xb
c0024e3e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024e41:	c1 e1 0b             	shl    ecx,0xb
c0024e44:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024e4a:	c1 eb 15             	shr    ebx,0x15
c0024e4d:	09 d9                	or     ecx,ebx
c0024e4f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024e52:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024e55:	89 ce                	mov    esi,ecx
c0024e57:	c1 ee 14             	shr    esi,0x14
c0024e5a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024e60:	89 cb                	mov    ebx,ecx
c0024e62:	c1 fb 1f             	sar    ebx,0x1f
c0024e65:	31 de                	xor    esi,ebx
c0024e67:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024e6a:	89 df                	mov    edi,ebx
c0024e6c:	c1 e7 0b             	shl    edi,0xb
c0024e6f:	c1 e1 0b             	shl    ecx,0xb
c0024e72:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024e78:	c1 eb 15             	shr    ebx,0x15
c0024e7b:	09 d9                	or     ecx,ebx
c0024e7d:	89 d3                	mov    ebx,edx
c0024e7f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024e85:	43                   	inc    ebx
c0024e86:	83 fb 01             	cmp    ebx,0x1
c0024e89:	77 08                	ja     c0024e93 <__cmpdf2+0x7e>
c0024e8b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024e8e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024e91:	75 68                	jne    c0024efb <__cmpdf2+0xe6>
c0024e93:	89 f3                	mov    ebx,esi
c0024e95:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024e9b:	43                   	inc    ebx
c0024e9c:	83 fb 01             	cmp    ebx,0x1
c0024e9f:	77 06                	ja     c0024ea7 <__cmpdf2+0x92>
c0024ea1:	89 fb                	mov    ebx,edi
c0024ea3:	09 cb                	or     ebx,ecx
c0024ea5:	75 54                	jne    c0024efb <__cmpdf2+0xe6>
c0024ea7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024eaa:	09 f8                	or     eax,edi
c0024eac:	09 c8                	or     eax,ecx
c0024eae:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024eb1:	75 12                	jne    c0024ec5 <__cmpdf2+0xb0>
c0024eb3:	8d 42 01             	lea    eax,[edx+0x1]
c0024eb6:	83 f8 01             	cmp    eax,0x1
c0024eb9:	77 0a                	ja     c0024ec5 <__cmpdf2+0xb0>
c0024ebb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024ebe:	31 c0                	xor    eax,eax
c0024ec0:	83 fb 01             	cmp    ebx,0x1
c0024ec3:	76 36                	jbe    c0024efb <__cmpdf2+0xe6>
c0024ec5:	b8 01 00 00 00       	mov    eax,0x1
c0024eca:	39 f2                	cmp    edx,esi
c0024ecc:	7f 2d                	jg     c0024efb <__cmpdf2+0xe6>
c0024ece:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024ed3:	7c 26                	jl     c0024efb <__cmpdf2+0xe6>
c0024ed5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024ed8:	77 07                	ja     c0024ee1 <__cmpdf2+0xcc>
c0024eda:	72 16                	jb     c0024ef2 <__cmpdf2+0xdd>
c0024edc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024edf:	76 0a                	jbe    c0024eeb <__cmpdf2+0xd6>
c0024ee1:	89 d0                	mov    eax,edx
c0024ee3:	c1 f8 1f             	sar    eax,0x1f
c0024ee6:	83 c8 01             	or     eax,0x1
c0024ee9:	eb 10                	jmp    c0024efb <__cmpdf2+0xe6>
c0024eeb:	b8 00 00 00 00       	mov    eax,0x0
c0024ef0:	73 09                	jae    c0024efb <__cmpdf2+0xe6>
c0024ef2:	89 d0                	mov    eax,edx
c0024ef4:	c1 f8 1f             	sar    eax,0x1f
c0024ef7:	83 e0 02             	and    eax,0x2
c0024efa:	48                   	dec    eax
c0024efb:	83 c4 0c             	add    esp,0xc
c0024efe:	5b                   	pop    ebx
c0024eff:	5e                   	pop    esi
c0024f00:	5f                   	pop    edi
c0024f01:	5d                   	pop    ebp
c0024f02:	c3                   	ret    

c0024f03 <__eqdf2>:
c0024f03:	55                   	push   ebp
c0024f04:	89 e5                	mov    ebp,esp
c0024f06:	50                   	push   eax
c0024f07:	6a 01                	push   0x1
c0024f09:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024f0c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024f0f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f15:	e8 fb fe ff ff       	call   c0024e15 <__cmpdf2>
c0024f1a:	83 c4 18             	add    esp,0x18
c0024f1d:	c9                   	leave  
c0024f1e:	c3                   	ret    

c0024f1f <__nedf2>:
c0024f1f:	eb e2                	jmp    c0024f03 <__eqdf2>

c0024f21 <__gtdf2>:
c0024f21:	55                   	push   ebp
c0024f22:	89 e5                	mov    ebp,esp
c0024f24:	50                   	push   eax
c0024f25:	6a ff                	push   0xffffffff
c0024f27:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024f2a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024f2d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f33:	e8 dd fe ff ff       	call   c0024e15 <__cmpdf2>
c0024f38:	83 c4 18             	add    esp,0x18
c0024f3b:	c9                   	leave  
c0024f3c:	c3                   	ret    

c0024f3d <__gedf2>:
c0024f3d:	eb e2                	jmp    c0024f21 <__gtdf2>

c0024f3f <__ltdf2>:
c0024f3f:	eb c2                	jmp    c0024f03 <__eqdf2>

c0024f41 <__ledf2>:
c0024f41:	eb c0                	jmp    c0024f03 <__eqdf2>

c0024f43 <__truncdfsf2>:
c0024f43:	55                   	push   ebp
c0024f44:	89 e5                	mov    ebp,esp
c0024f46:	57                   	push   edi
c0024f47:	56                   	push   esi
c0024f48:	53                   	push   ebx
c0024f49:	83 ec 0c             	sub    esp,0xc
c0024f4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024f4f:	89 d1                	mov    ecx,edx
c0024f51:	c1 f9 14             	sar    ecx,0x14
c0024f54:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024f57:	89 df                	mov    edi,ebx
c0024f59:	c1 e7 0b             	shl    edi,0xb
c0024f5c:	89 d0                	mov    eax,edx
c0024f5e:	c1 e0 0b             	shl    eax,0xb
c0024f61:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024f66:	c1 eb 15             	shr    ebx,0x15
c0024f69:	09 d8                	or     eax,ebx
c0024f6b:	89 cb                	mov    ebx,ecx
c0024f6d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024f73:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024f79:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024f7f:	0f 86 9e 00 00 00    	jbe    c0025023 <__truncdfsf2+0xe0>
c0024f85:	85 db                	test   ebx,ebx
c0024f87:	75 0a                	jne    c0024f93 <__truncdfsf2+0x50>
c0024f89:	c1 fa 17             	sar    edx,0x17
c0024f8c:	30 d2                	xor    dl,dl
c0024f8e:	e9 84 00 00 00       	jmp    c0025017 <__truncdfsf2+0xd4>
c0024f93:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024f99:	83 fe 83             	cmp    esi,0xffffff83
c0024f9c:	7d 4b                	jge    c0024fe9 <__truncdfsf2+0xa6>
c0024f9e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024fa3:	29 f1                	sub    ecx,esi
c0024fa5:	83 f9 1f             	cmp    ecx,0x1f
c0024fa8:	7f 6b                	jg     c0025015 <__truncdfsf2+0xd2>
c0024faa:	0d 00 00 00 80       	or     eax,0x80000000
c0024faf:	89 c3                	mov    ebx,eax
c0024fb1:	d3 eb                	shr    ebx,cl
c0024fb3:	be 01 00 00 00       	mov    esi,0x1
c0024fb8:	d3 e6                	shl    esi,cl
c0024fba:	4e                   	dec    esi
c0024fbb:	21 f0                	and    eax,esi
c0024fbd:	09 f8                	or     eax,edi
c0024fbf:	0f 95 c0             	setne  al
c0024fc2:	0f b6 c0             	movzx  eax,al
c0024fc5:	09 c3                	or     ebx,eax
c0024fc7:	89 d9                	mov    ecx,ebx
c0024fc9:	c1 e9 08             	shr    ecx,0x8
c0024fcc:	f6 c3 7f             	test   bl,0x7f
c0024fcf:	0f 95 c0             	setne  al
c0024fd2:	09 c8                	or     eax,ecx
c0024fd4:	83 e0 01             	and    eax,0x1
c0024fd7:	c1 eb 07             	shr    ebx,0x7
c0024fda:	21 c3                	and    ebx,eax
c0024fdc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024fe2:	09 d1                	or     ecx,edx
c0024fe4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024fe7:	eb 76                	jmp    c002505f <__truncdfsf2+0x11c>
c0024fe9:	83 c6 80             	add    esi,0xffffff80
c0024fec:	7e 1d                	jle    c002500b <__truncdfsf2+0xc8>
c0024fee:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024ff4:	75 0b                	jne    c0025001 <__truncdfsf2+0xbe>
c0024ff6:	09 f8                	or     eax,edi
c0024ff8:	74 09                	je     c0025003 <__truncdfsf2+0xc0>
c0024ffa:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024fff:	eb 02                	jmp    c0025003 <__truncdfsf2+0xc0>
c0025001:	31 c0                	xor    eax,eax
c0025003:	c1 fa 17             	sar    edx,0x17
c0025006:	80 ca ff             	or     dl,0xff
c0025009:	eb 0e                	jmp    c0025019 <__truncdfsf2+0xd6>
c002500b:	c1 fa 1f             	sar    edx,0x1f
c002500e:	c1 e2 08             	shl    edx,0x8
c0025011:	09 ca                	or     edx,ecx
c0025013:	eb 04                	jmp    c0025019 <__truncdfsf2+0xd6>
c0025015:	31 d2                	xor    edx,edx
c0025017:	31 c0                	xor    eax,eax
c0025019:	c1 e2 17             	shl    edx,0x17
c002501c:	c1 e8 08             	shr    eax,0x8
c002501f:	09 d0                	or     eax,edx
c0025021:	eb 3c                	jmp    c002505f <__truncdfsf2+0x11c>
c0025023:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025029:	89 ca                	mov    edx,ecx
c002502b:	c1 fa 0b             	sar    edx,0xb
c002502e:	c1 e2 08             	shl    edx,0x8
c0025031:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025034:	31 db                	xor    ebx,ebx
c0025036:	85 ff                	test   edi,edi
c0025038:	0f 95 c3             	setne  bl
c002503b:	09 d8                	or     eax,ebx
c002503d:	89 c3                	mov    ebx,eax
c002503f:	c1 eb 08             	shr    ebx,0x8
c0025042:	a8 7f                	test   al,0x7f
c0025044:	0f 95 c2             	setne  dl
c0025047:	89 d6                	mov    esi,edx
c0025049:	09 de                	or     esi,ebx
c002504b:	83 e6 01             	and    esi,0x1
c002504e:	c1 e8 07             	shr    eax,0x7
c0025051:	21 f0                	and    eax,esi
c0025053:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025056:	09 ca                	or     edx,ecx
c0025058:	c1 e2 17             	shl    edx,0x17
c002505b:	09 da                	or     edx,ebx
c002505d:	01 d0                	add    eax,edx
c002505f:	83 c4 0c             	add    esp,0xc
c0025062:	5b                   	pop    ebx
c0025063:	5e                   	pop    esi
c0025064:	5f                   	pop    edi
c0025065:	5d                   	pop    ebp
c0025066:	c3                   	ret    

c0025067 <__extendsfdf2>:
c0025067:	55                   	push   ebp
c0025068:	89 e5                	mov    ebp,esp
c002506a:	57                   	push   edi
c002506b:	56                   	push   esi
c002506c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002506f:	89 d1                	mov    ecx,edx
c0025071:	c1 f9 17             	sar    ecx,0x17
c0025074:	c1 e2 08             	shl    edx,0x8
c0025077:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002507d:	89 c8                	mov    eax,ecx
c002507f:	80 e4 f8             	and    ah,0xf8
c0025082:	8d 71 01             	lea    esi,[ecx+0x1]
c0025085:	81 e6 fe 00 00 00    	and    esi,0xfe
c002508b:	75 27                	jne    c00250b4 <__extendsfdf2+0x4d>
c002508d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025093:	75 18                	jne    c00250ad <__extendsfdf2+0x46>
c0025095:	85 d2                	test   edx,edx
c0025097:	74 20                	je     c00250b9 <__extendsfdf2+0x52>
c0025099:	41                   	inc    ecx
c002509a:	01 d2                	add    edx,edx
c002509c:	79 fb                	jns    c0025099 <__extendsfdf2+0x32>
c002509e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00250a4:	29 c8                	sub    eax,ecx
c00250a6:	05 81 03 00 00       	add    eax,0x381
c00250ab:	eb 0c                	jmp    c00250b9 <__extendsfdf2+0x52>
c00250ad:	05 00 07 00 00       	add    eax,0x700
c00250b2:	eb 05                	jmp    c00250b9 <__extendsfdf2+0x52>
c00250b4:	05 80 03 00 00       	add    eax,0x380
c00250b9:	c1 e0 14             	shl    eax,0x14
c00250bc:	89 c1                	mov    ecx,eax
c00250be:	89 d0                	mov    eax,edx
c00250c0:	c1 e8 0b             	shr    eax,0xb
c00250c3:	09 c1                	or     ecx,eax
c00250c5:	c1 e2 15             	shl    edx,0x15
c00250c8:	89 d0                	mov    eax,edx
c00250ca:	89 ca                	mov    edx,ecx
c00250cc:	5e                   	pop    esi
c00250cd:	5f                   	pop    edi
c00250ce:	5d                   	pop    ebp
c00250cf:	c3                   	ret    

c00250d0 <fabs>:
c00250d0:	83 ec 0c             	sub    esp,0xc
c00250d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00250da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00250e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00250e7:	dd 04 24             	fld    QWORD PTR [esp]
c00250ea:	83 c4 0c             	add    esp,0xc
c00250ed:	c3                   	ret    
c00250ee:	66 90                	xchg   ax,ax

c00250f0 <lrint>:
c00250f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00250f4:	83 ec 04             	sub    esp,0x4
c00250f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00250fa:	58                   	pop    eax
c00250fb:	c3                   	ret    

c00250fc <lrintf>:
c00250fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025100:	83 ec 04             	sub    esp,0x4
c0025103:	db 1c 24             	fistp  DWORD PTR [esp]
c0025106:	58                   	pop    eax
c0025107:	c3                   	ret    

Disassembly of section .init:

c0025108 <_init>:
c0025108:	55                   	push   ebp
c0025109:	89 e5                	mov    ebp,esp
c002510b:	e8 08 b0 fd ff       	call   c0000118 <frame_dummy>
c0025110:	e8 63 e0 ff ff       	call   c0023178 <__do_global_ctors_aux>
c0025115:	5d                   	pop    ebp
c0025116:	c3                   	ret    

Disassembly of section .fini:

c0025117 <_fini>:
c0025117:	55                   	push   ebp
c0025118:	89 e5                	mov    ebp,esp
c002511a:	e8 89 af fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002511f:	5d                   	pop    ebp
c0025120:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025122 <Computer::~Computer()>:
c0025122:	83 ec 0c             	sub    esp,0xc
c0025125:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c002512a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512e:	89 10                	mov    DWORD PTR [eax],edx
c0025130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	50                   	push   eax
c0025138:	e8 c3 e3 fe ff       	call   c0013500 <Device::~Device()>
c002513d:	83 c4 10             	add    esp,0x10
c0025140:	90                   	nop
c0025141:	83 c4 0c             	add    esp,0xc
c0025144:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025146 <Computer::~Computer()>:
c0025146:	83 ec 0c             	sub    esp,0xc
c0025149:	83 ec 0c             	sub    esp,0xc
c002514c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025150:	e8 cd ff ff ff       	call   c0025122 <Computer::~Computer()>
c0025155:	83 c4 10             	add    esp,0x10
c0025158:	83 ec 08             	sub    esp,0x8
c002515b:	68 ec 01 00 00       	push   0x1ec
c0025160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025164:	e8 0a d0 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025169:	83 c4 10             	add    esp,0x10
c002516c:	83 c4 0c             	add    esp,0xc
c002516f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025170 <idleCommon()>:
c0025170:	83 ec 0c             	sub    esp,0xc
c0025173:	e8 a2 67 ff ff       	call   c001b91a <lockScheduler()>
c0025178:	e8 d9 6a ff ff       	call   c001bc56 <schedule()>
c002517d:	83 c4 0c             	add    esp,0xc
c0025180:	e9 97 67 ff ff       	jmp    c001b91c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025186 <LinkedList<UnixFile>::~LinkedList()>:
c0025186:	90                   	nop
c0025187:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025188 <LinkedList<UnixFile>::LinkedList()>:
c0025188:	83 ec 0c             	sub    esp,0xc
c002518b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002518f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025199:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00251a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00251ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00251b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00251c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00251cb:	83 ec 0c             	sub    esp,0xc
c00251ce:	68 86 6d 02 c0       	push   0xc0026d86
c00251d3:	e8 7b d0 fe ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00251d8:	83 c4 10             	add    esp,0x10
c00251db:	90                   	nop
c00251dc:	83 c4 0c             	add    esp,0xc
c00251df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00251e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00251e0:	83 ec 0c             	sub    esp,0xc
c00251e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00251e8:	75 10                	jne    c00251fa <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00251ea:	83 ec 0c             	sub    esp,0xc
c00251ed:	68 a0 6d 02 c0       	push   0xc0026da0
c00251f2:	e8 da 37 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00251f7:	83 c4 10             	add    esp,0x10
c00251fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0025200:	85 c0                	test   eax,eax
c0025202:	74 34                	je     c0025238 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002520b:	85 c0                	test   eax,eax
c002520d:	74 29                	je     c0025238 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002520f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025213:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025216:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002521a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002521d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025221:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025225:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002522f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025236:	eb 65                	jmp    c002529d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002523c:	8b 00                	mov    eax,DWORD PTR [eax]
c002523e:	85 c0                	test   eax,eax
c0025240:	75 4b                	jne    c002528d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025249:	85 c0                	test   eax,eax
c002524b:	75 40                	jne    c002528d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002524d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025251:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025255:	89 10                	mov    DWORD PTR [eax],edx
c0025257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002525b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002525f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025269:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025274:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025277:	85 c0                	test   eax,eax
c0025279:	74 22                	je     c002529d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002527b:	83 ec 0c             	sub    esp,0xc
c002527e:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025283:	e8 49 37 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0025288:	83 c4 10             	add    esp,0x10
c002528b:	eb 10                	jmp    c002529d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025295:	e8 37 37 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c002529a:	83 c4 10             	add    esp,0x10
c002529d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00252a4:	8d 50 01             	lea    edx,[eax+0x1]
c00252a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00252ae:	90                   	nop
c00252af:	83 c4 0c             	add    esp,0xc
c00252b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00252b4 <LinkedList<UnixFile>::getFirstElement()>:
c00252b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00252b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00252ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00252bc <LinkedList<UnixFile>::removeFirst()>:
c00252bc:	83 ec 0c             	sub    esp,0xc
c00252bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00252c5:	85 c0                	test   eax,eax
c00252c7:	75 12                	jne    c00252db <LinkedList<UnixFile>::removeFirst()+0x1f>
c00252c9:	83 ec 0c             	sub    esp,0xc
c00252cc:	68 d8 6d 02 c0       	push   0xc0026dd8
c00252d1:	e8 fb 36 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00252d6:	83 c4 10             	add    esp,0x10
c00252d9:	eb 7e                	jmp    c0025359 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00252db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00252e5:	85 c0                	test   eax,eax
c00252e7:	74 10                	je     c00252f9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00252e9:	83 ec 0c             	sub    esp,0xc
c00252ec:	68 23 6e 02 c0       	push   0xc0026e23
c00252f1:	e8 db 36 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00252f6:	83 c4 10             	add    esp,0x10
c00252f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00252ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025302:	85 c0                	test   eax,eax
c0025304:	75 33                	jne    c0025339 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025314:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002531b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002531f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025322:	83 f8 01             	cmp    eax,0x1
c0025325:	74 21                	je     c0025348 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025327:	83 ec 0c             	sub    esp,0xc
c002532a:	68 fc 6d 02 c0       	push   0xc0026dfc
c002532f:	e8 9d 36 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0025334:	83 c4 10             	add    esp,0x10
c0025337:	eb 0f                	jmp    c0025348 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002533d:	8b 00                	mov    eax,DWORD PTR [eax]
c002533f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025346:	89 10                	mov    DWORD PTR [eax],edx
c0025348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002534f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025356:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025359:	83 c4 0c             	add    esp,0xc
c002535c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002535e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002535e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025362:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025365:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025366 <DriverlessDevice::~DriverlessDevice()>:
c0025366:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c002536b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002536f:	89 10                	mov    DWORD PTR [eax],edx
c0025371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025375:	50                   	push   eax
c0025376:	e8 85 e1 fe ff       	call   c0013500 <Device::~Device()>
c002537b:	83 c4 04             	add    esp,0x4
c002537e:	90                   	nop
c002537f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025380 <DriverlessDevice::~DriverlessDevice()>:
c0025380:	83 ec 0c             	sub    esp,0xc
c0025383:	83 ec 0c             	sub    esp,0xc
c0025386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002538a:	e8 d7 ff ff ff       	call   c0025366 <DriverlessDevice::~DriverlessDevice()>
c002538f:	83 c4 10             	add    esp,0x10
c0025392:	83 ec 08             	sub    esp,0x8
c0025395:	68 58 01 00 00       	push   0x158
c002539a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002539e:	e8 d0 cd fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00253a3:	83 c4 10             	add    esp,0x10
c00253a6:	83 c4 0c             	add    esp,0xc
c00253a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00253aa <LinkedList<Device>::addElement(Device*)>:
c00253aa:	83 ec 0c             	sub    esp,0xc
c00253ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00253b2:	75 10                	jne    c00253c4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00253b4:	83 ec 0c             	sub    esp,0xc
c00253b7:	68 a0 6d 02 c0       	push   0xc0026da0
c00253bc:	e8 10 36 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00253c1:	83 c4 10             	add    esp,0x10
c00253c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00253ca:	85 c0                	test   eax,eax
c00253cc:	74 3a                	je     c0025408 <LinkedList<Device>::addElement(Device*)+0x5e>
c00253ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253d5:	85 c0                	test   eax,eax
c00253d7:	74 2f                	je     c0025408 <LinkedList<Device>::addElement(Device*)+0x5e>
c00253d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00253e4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00253ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00253f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00253f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253fc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025406:	eb 68                	jmp    c0025470 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540c:	8b 00                	mov    eax,DWORD PTR [eax]
c002540e:	85 c0                	test   eax,eax
c0025410:	75 4e                	jne    c0025460 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025419:	85 c0                	test   eax,eax
c002541b:	75 43                	jne    c0025460 <LinkedList<Device>::addElement(Device*)+0xb6>
c002541d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025421:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025425:	89 10                	mov    DWORD PTR [eax],edx
c0025427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002542f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025439:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025447:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002544a:	85 c0                	test   eax,eax
c002544c:	74 22                	je     c0025470 <LinkedList<Device>::addElement(Device*)+0xc6>
c002544e:	83 ec 0c             	sub    esp,0xc
c0025451:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025456:	e8 76 35 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c002545b:	83 c4 10             	add    esp,0x10
c002545e:	eb 10                	jmp    c0025470 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025460:	83 ec 0c             	sub    esp,0xc
c0025463:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025468:	e8 64 35 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c002546d:	83 c4 10             	add    esp,0x10
c0025470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025474:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025477:	8d 50 01             	lea    edx,[eax+0x1]
c002547a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025481:	90                   	nop
c0025482:	83 c4 0c             	add    esp,0xc
c0025485:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025486 <LinkedList<Device>::LinkedList()>:
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002548d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025497:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002549e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00254a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00254be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 86 6d 02 c0       	push   0xc0026d86
c00254d1:	e8 7d cd fe ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	90                   	nop
c00254da:	83 c4 0c             	add    esp,0xc
c00254dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00254de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00254de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00254e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00254e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00254e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00254ec:	85 c0                	test   eax,eax
c00254ee:	75 0e                	jne    c00254fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254f7:	85 c0                	test   eax,eax
c00254f9:	75 03                	jne    c00254fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254fb:	b0 01                	mov    al,0x1
c00254fd:	c3                   	ret    
c00254fe:	b0 00                	mov    al,0x0
c0025500:	90                   	nop
c0025501:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025502 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025502:	83 ec 0c             	sub    esp,0xc
c0025505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025509:	8b 00                	mov    eax,DWORD PTR [eax]
c002550b:	85 c0                	test   eax,eax
c002550d:	75 15                	jne    c0025524 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002550f:	83 ec 0c             	sub    esp,0xc
c0025512:	68 d8 6d 02 c0       	push   0xc0026dd8
c0025517:	e8 b5 34 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c002551c:	83 c4 10             	add    esp,0x10
c002551f:	e9 88 00 00 00       	jmp    c00255ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002552b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002552e:	85 c0                	test   eax,eax
c0025530:	0f 95 c0             	setne  al
c0025533:	84 c0                	test   al,al
c0025535:	74 10                	je     c0025547 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025537:	83 ec 0c             	sub    esp,0xc
c002553a:	68 23 6e 02 c0       	push   0xc0026e23
c002553f:	e8 8d 34 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0025544:	83 c4 10             	add    esp,0x10
c0025547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554b:	8b 00                	mov    eax,DWORD PTR [eax]
c002554d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025550:	85 c0                	test   eax,eax
c0025552:	0f 94 c0             	sete   al
c0025555:	84 c0                	test   al,al
c0025557:	74 33                	je     c002558c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0025559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002556e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025572:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025575:	83 f8 01             	cmp    eax,0x1
c0025578:	74 21                	je     c002559b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002557a:	83 ec 0c             	sub    esp,0xc
c002557d:	68 fc 6d 02 c0       	push   0xc0026dfc
c0025582:	e8 4a 34 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0025587:	83 c4 10             	add    esp,0x10
c002558a:	eb 0f                	jmp    c002559b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002558c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025590:	8b 00                	mov    eax,DWORD PTR [eax]
c0025592:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025599:	89 10                	mov    DWORD PTR [eax],edx
c002559b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255a2:	8d 50 ff             	lea    edx,[eax-0x1]
c00255a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00255ac:	83 c4 0c             	add    esp,0xc
c00255af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00255b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00255b8:	75 10                	jne    c00255ca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	68 a0 6d 02 c0       	push   0xc0026da0
c00255c2:	e8 0a 34 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c00255c7:	83 c4 10             	add    esp,0x10
c00255ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00255d0:	85 c0                	test   eax,eax
c00255d2:	74 34                	je     c0025608 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00255d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255db:	85 c0                	test   eax,eax
c00255dd:	74 29                	je     c0025608 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00255df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255ea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00255ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025606:	eb 65                	jmp    c002566d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0025608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560c:	8b 00                	mov    eax,DWORD PTR [eax]
c002560e:	85 c0                	test   eax,eax
c0025610:	75 4b                	jne    c002565d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025619:	85 c0                	test   eax,eax
c002561b:	75 40                	jne    c002565d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002561d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025621:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025625:	89 10                	mov    DWORD PTR [eax],edx
c0025627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002562f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025636:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025639:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025647:	85 c0                	test   eax,eax
c0025649:	74 22                	je     c002566d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002564b:	83 ec 0c             	sub    esp,0xc
c002564e:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025653:	e8 79 33 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c0025658:	83 c4 10             	add    esp,0x10
c002565b:	eb 10                	jmp    c002566d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002565d:	83 ec 0c             	sub    esp,0xc
c0025660:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025665:	e8 67 33 ff ff       	call   c00189d1 <Krnl::panic(char const*)>
c002566a:	83 c4 10             	add    esp,0x10
c002566d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025671:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025674:	8d 50 01             	lea    edx,[eax+0x1]
c0025677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002567b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002567e:	90                   	nop
c002567f:	83 c4 0c             	add    esp,0xc
c0025682:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025684 <ACPI::~ACPI()>:
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	ba 70 7c 02 c0       	mov    edx,0xc0027c70
c002568c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025690:	89 10                	mov    DWORD PTR [eax],edx
c0025692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025696:	83 ec 0c             	sub    esp,0xc
c0025699:	50                   	push   eax
c002569a:	e8 61 de fe ff       	call   c0013500 <Device::~Device()>
c002569f:	83 c4 10             	add    esp,0x10
c00256a2:	90                   	nop
c00256a3:	83 c4 0c             	add    esp,0xc
c00256a6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00256a8 <ACPI::~ACPI()>:
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	83 ec 0c             	sub    esp,0xc
c00256ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256b2:	e8 cd ff ff ff       	call   c0025684 <ACPI::~ACPI()>
c00256b7:	83 c4 10             	add    esp,0x10
c00256ba:	83 ec 08             	sub    esp,0x8
c00256bd:	68 68 22 00 00       	push   0x2268
c00256c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256c6:	e8 a8 ca fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	83 c4 0c             	add    esp,0xc
c00256d1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00256d2 <CPU::~CPU()>:
c00256d2:	83 ec 0c             	sub    esp,0xc
c00256d5:	ba 60 80 02 c0       	mov    edx,0xc0028060
c00256da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256de:	89 10                	mov    DWORD PTR [eax],edx
c00256e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e4:	83 ec 0c             	sub    esp,0xc
c00256e7:	50                   	push   eax
c00256e8:	e8 13 de fe ff       	call   c0013500 <Device::~Device()>
c00256ed:	83 c4 10             	add    esp,0x10
c00256f0:	90                   	nop
c00256f1:	83 c4 0c             	add    esp,0xc
c00256f4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00256f6 <CPU::~CPU()>:
c00256f6:	83 ec 0c             	sub    esp,0xc
c00256f9:	83 ec 0c             	sub    esp,0xc
c00256fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025700:	e8 cd ff ff ff       	call   c00256d2 <CPU::~CPU()>
c0025705:	83 c4 10             	add    esp,0x10
c0025708:	83 ec 08             	sub    esp,0x8
c002570b:	68 98 11 00 00       	push   0x1198
c0025710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025714:	e8 5a ca fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025719:	83 c4 10             	add    esp,0x10
c002571c:	83 c4 0c             	add    esp,0xc
c002571f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025720 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025720:	90                   	nop
c0025721:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025722 <ThreadControlBlock::ThreadControlBlock()>:
c0025722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025726:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002572d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025731:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002573c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025747:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002574e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025752:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002575a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002575e:	90                   	nop
c002575f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025760:	83 ec 0c             	sub    esp,0xc
c0025763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025767:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002576d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025771:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025787:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002578d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025791:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00257a3:	83 ec 0c             	sub    esp,0xc
c00257a6:	68 86 6d 02 c0       	push   0xc0026d86
c00257ab:	e8 a3 ca fe ff       	call   c0012253 <Dbg::kprintf(char const*, ...)>
c00257b0:	83 c4 10             	add    esp,0x10
c00257b3:	90                   	nop
c00257b4:	83 c4 0c             	add    esp,0xc
c00257b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00257b8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00257b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00257bf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00257c0 <Vm::_FPUState::_FPUState()>:
c00257c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257c4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00257cb:	90                   	nop
c00257cc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00257ce <PCI::~PCI()>:
c00257ce:	83 ec 0c             	sub    esp,0xc
c00257d1:	ba 68 8d 02 c0       	mov    edx,0xc0028d68
c00257d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257da:	89 10                	mov    DWORD PTR [eax],edx
c00257dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e0:	83 ec 0c             	sub    esp,0xc
c00257e3:	50                   	push   eax
c00257e4:	e8 27 d7 fe ff       	call   c0012f10 <Bus::~Bus()>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	90                   	nop
c00257ed:	83 c4 0c             	add    esp,0xc
c00257f0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257f2 <PCI::~PCI()>:
c00257f2:	83 ec 0c             	sub    esp,0xc
c00257f5:	83 ec 0c             	sub    esp,0xc
c00257f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257fc:	e8 cd ff ff ff       	call   c00257ce <PCI::~PCI()>
c0025801:	83 c4 10             	add    esp,0x10
c0025804:	83 ec 08             	sub    esp,0x8
c0025807:	68 58 01 00 00       	push   0x158
c002580c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025810:	e8 5e c9 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025815:	83 c4 10             	add    esp,0x10
c0025818:	83 c4 0c             	add    esp,0xc
c002581b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002581c <IDE::~IDE()>:
c002581c:	83 ec 0c             	sub    esp,0xc
c002581f:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c0025824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025828:	89 10                	mov    DWORD PTR [eax],edx
c002582a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002582e:	83 ec 0c             	sub    esp,0xc
c0025831:	50                   	push   eax
c0025832:	e8 af e1 fe ff       	call   c00139e6 <HardDiskController::~HardDiskController()>
c0025837:	83 c4 10             	add    esp,0x10
c002583a:	90                   	nop
c002583b:	83 c4 0c             	add    esp,0xc
c002583e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025840 <IDE::~IDE()>:
c0025840:	83 ec 0c             	sub    esp,0xc
c0025843:	83 ec 0c             	sub    esp,0xc
c0025846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002584a:	e8 cd ff ff ff       	call   c002581c <IDE::~IDE()>
c002584f:	83 c4 10             	add    esp,0x10
c0025852:	83 ec 08             	sub    esp,0x8
c0025855:	68 70 02 00 00       	push   0x270
c002585a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002585e:	e8 10 c9 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025863:	83 c4 10             	add    esp,0x10
c0025866:	83 c4 0c             	add    esp,0xc
c0025869:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002586a <ATA::~ATA()>:
c002586a:	83 ec 0c             	sub    esp,0xc
c002586d:	ba 1c 90 02 c0       	mov    edx,0xc002901c
c0025872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025876:	89 10                	mov    DWORD PTR [eax],edx
c0025878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002587c:	83 ec 0c             	sub    esp,0xc
c002587f:	50                   	push   eax
c0025880:	e8 3f e2 fe ff       	call   c0013ac4 <PhysicalDisk::~PhysicalDisk()>
c0025885:	83 c4 10             	add    esp,0x10
c0025888:	90                   	nop
c0025889:	83 c4 0c             	add    esp,0xc
c002588c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002588e <ATA::~ATA()>:
c002588e:	83 ec 0c             	sub    esp,0xc
c0025891:	83 ec 0c             	sub    esp,0xc
c0025894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025898:	e8 cd ff ff ff       	call   c002586a <ATA::~ATA()>
c002589d:	83 c4 10             	add    esp,0x10
c00258a0:	83 ec 08             	sub    esp,0x8
c00258a3:	68 7c 01 00 00       	push   0x17c
c00258a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ac:	e8 c2 c8 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00258b1:	83 c4 10             	add    esp,0x10
c00258b4:	83 c4 0c             	add    esp,0xc
c00258b7:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00258b8 <ATAPI::~ATAPI()>:
c00258b8:	83 ec 0c             	sub    esp,0xc
c00258bb:	ba 88 90 02 c0       	mov    edx,0xc0029088
c00258c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c4:	89 10                	mov    DWORD PTR [eax],edx
c00258c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ca:	83 ec 0c             	sub    esp,0xc
c00258cd:	50                   	push   eax
c00258ce:	e8 f1 e1 fe ff       	call   c0013ac4 <PhysicalDisk::~PhysicalDisk()>
c00258d3:	83 c4 10             	add    esp,0x10
c00258d6:	90                   	nop
c00258d7:	83 c4 0c             	add    esp,0xc
c00258da:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258dc <ATAPI::~ATAPI()>:
c00258dc:	83 ec 0c             	sub    esp,0xc
c00258df:	83 ec 0c             	sub    esp,0xc
c00258e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258e6:	e8 cd ff ff ff       	call   c00258b8 <ATAPI::~ATAPI()>
c00258eb:	83 c4 10             	add    esp,0x10
c00258ee:	83 ec 08             	sub    esp,0x8
c00258f1:	68 80 01 00 00       	push   0x180
c00258f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258fa:	e8 74 c8 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00258ff:	83 c4 10             	add    esp,0x10
c0025902:	83 c4 0c             	add    esp,0xc
c0025905:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025906 <AVX::~AVX()>:
c0025906:	83 ec 0c             	sub    esp,0xc
c0025909:	ba c4 90 02 c0       	mov    edx,0xc00290c4
c002590e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025912:	89 10                	mov    DWORD PTR [eax],edx
c0025914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025918:	83 ec 0c             	sub    esp,0xc
c002591b:	50                   	push   eax
c002591c:	e8 27 e2 fe ff       	call   c0013b48 <FPU::~FPU()>
c0025921:	83 c4 10             	add    esp,0x10
c0025924:	90                   	nop
c0025925:	83 c4 0c             	add    esp,0xc
c0025928:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002592a <AVX::~AVX()>:
c002592a:	83 ec 0c             	sub    esp,0xc
c002592d:	83 ec 0c             	sub    esp,0xc
c0025930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025934:	e8 cd ff ff ff       	call   c0025906 <AVX::~AVX()>
c0025939:	83 c4 10             	add    esp,0x10
c002593c:	83 ec 08             	sub    esp,0x8
c002593f:	68 58 01 00 00       	push   0x158
c0025944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025948:	e8 26 c8 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c002594d:	83 c4 10             	add    esp,0x10
c0025950:	83 c4 0c             	add    esp,0xc
c0025953:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025954 <MMX::~MMX()>:
c0025954:	83 ec 0c             	sub    esp,0xc
c0025957:	ba 04 91 02 c0       	mov    edx,0xc0029104
c002595c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025960:	89 10                	mov    DWORD PTR [eax],edx
c0025962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025966:	83 ec 0c             	sub    esp,0xc
c0025969:	50                   	push   eax
c002596a:	e8 d9 e1 fe ff       	call   c0013b48 <FPU::~FPU()>
c002596f:	83 c4 10             	add    esp,0x10
c0025972:	90                   	nop
c0025973:	83 c4 0c             	add    esp,0xc
c0025976:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025978 <MMX::~MMX()>:
c0025978:	83 ec 0c             	sub    esp,0xc
c002597b:	83 ec 0c             	sub    esp,0xc
c002597e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025982:	e8 cd ff ff ff       	call   c0025954 <MMX::~MMX()>
c0025987:	83 c4 10             	add    esp,0x10
c002598a:	83 ec 08             	sub    esp,0x8
c002598d:	68 58 01 00 00       	push   0x158
c0025992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025996:	e8 d8 c7 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c002599b:	83 c4 10             	add    esp,0x10
c002599e:	83 c4 0c             	add    esp,0xc
c00259a1:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00259a2 <SSE::~SSE()>:
c00259a2:	83 ec 0c             	sub    esp,0xc
c00259a5:	ba 44 91 02 c0       	mov    edx,0xc0029144
c00259aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ae:	89 10                	mov    DWORD PTR [eax],edx
c00259b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259b4:	83 ec 0c             	sub    esp,0xc
c00259b7:	50                   	push   eax
c00259b8:	e8 8b e1 fe ff       	call   c0013b48 <FPU::~FPU()>
c00259bd:	83 c4 10             	add    esp,0x10
c00259c0:	90                   	nop
c00259c1:	83 c4 0c             	add    esp,0xc
c00259c4:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00259c6 <SSE::~SSE()>:
c00259c6:	83 ec 0c             	sub    esp,0xc
c00259c9:	83 ec 0c             	sub    esp,0xc
c00259cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259d0:	e8 cd ff ff ff       	call   c00259a2 <SSE::~SSE()>
c00259d5:	83 c4 10             	add    esp,0x10
c00259d8:	83 ec 08             	sub    esp,0x8
c00259db:	68 58 01 00 00       	push   0x158
c00259e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e4:	e8 8a c7 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c00259e9:	83 c4 10             	add    esp,0x10
c00259ec:	83 c4 0c             	add    esp,0xc
c00259ef:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259f0 <x87::~x87()>:
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	ba 84 91 02 c0       	mov    edx,0xc0029184
c00259f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259fc:	89 10                	mov    DWORD PTR [eax],edx
c00259fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a02:	83 ec 0c             	sub    esp,0xc
c0025a05:	50                   	push   eax
c0025a06:	e8 3d e1 fe ff       	call   c0013b48 <FPU::~FPU()>
c0025a0b:	83 c4 10             	add    esp,0x10
c0025a0e:	90                   	nop
c0025a0f:	83 c4 0c             	add    esp,0xc
c0025a12:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025a14 <x87::~x87()>:
c0025a14:	83 ec 0c             	sub    esp,0xc
c0025a17:	83 ec 0c             	sub    esp,0xc
c0025a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a1e:	e8 cd ff ff ff       	call   c00259f0 <x87::~x87()>
c0025a23:	83 c4 10             	add    esp,0x10
c0025a26:	83 ec 08             	sub    esp,0x8
c0025a29:	68 58 01 00 00       	push   0x158
c0025a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a32:	e8 3c c7 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025a37:	83 c4 10             	add    esp,0x10
c0025a3a:	83 c4 0c             	add    esp,0xc
c0025a3d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a3e <IOAPIC::~IOAPIC()>:
c0025a3e:	83 ec 0c             	sub    esp,0xc
c0025a41:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c0025a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a4a:	89 10                	mov    DWORD PTR [eax],edx
c0025a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a50:	83 ec 0c             	sub    esp,0xc
c0025a53:	50                   	push   eax
c0025a54:	e8 a7 da fe ff       	call   c0013500 <Device::~Device()>
c0025a59:	83 c4 10             	add    esp,0x10
c0025a5c:	90                   	nop
c0025a5d:	83 c4 0c             	add    esp,0xc
c0025a60:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a62 <IOAPIC::~IOAPIC()>:
c0025a62:	83 ec 0c             	sub    esp,0xc
c0025a65:	83 ec 0c             	sub    esp,0xc
c0025a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a6c:	e8 cd ff ff ff       	call   c0025a3e <IOAPIC::~IOAPIC()>
c0025a71:	83 c4 10             	add    esp,0x10
c0025a74:	83 ec 08             	sub    esp,0x8
c0025a77:	68 68 01 00 00       	push   0x168
c0025a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a80:	e8 ee c6 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025a85:	83 c4 10             	add    esp,0x10
c0025a88:	83 c4 0c             	add    esp,0xc
c0025a8b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a8c <APIC::~APIC()>:
c0025a8c:	83 ec 0c             	sub    esp,0xc
c0025a8f:	ba 94 92 02 c0       	mov    edx,0xc0029294
c0025a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a98:	89 10                	mov    DWORD PTR [eax],edx
c0025a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9e:	83 ec 0c             	sub    esp,0xc
c0025aa1:	50                   	push   eax
c0025aa2:	e8 6b e5 fe ff       	call   c0014012 <InterruptController::~InterruptController()>
c0025aa7:	83 c4 10             	add    esp,0x10
c0025aaa:	90                   	nop
c0025aab:	83 c4 0c             	add    esp,0xc
c0025aae:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025ab0 <APIC::~APIC()>:
c0025ab0:	83 ec 0c             	sub    esp,0xc
c0025ab3:	83 ec 0c             	sub    esp,0xc
c0025ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aba:	e8 cd ff ff ff       	call   c0025a8c <APIC::~APIC()>
c0025abf:	83 c4 10             	add    esp,0x10
c0025ac2:	83 ec 08             	sub    esp,0x8
c0025ac5:	68 58 21 00 00       	push   0x2158
c0025aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ace:	e8 a0 c6 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025ad3:	83 c4 10             	add    esp,0x10
c0025ad6:	83 c4 0c             	add    esp,0xc
c0025ad9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025ada <PIC::~PIC()>:
c0025ada:	83 ec 0c             	sub    esp,0xc
c0025add:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0025ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae6:	89 10                	mov    DWORD PTR [eax],edx
c0025ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aec:	83 ec 0c             	sub    esp,0xc
c0025aef:	50                   	push   eax
c0025af0:	e8 1d e5 fe ff       	call   c0014012 <InterruptController::~InterruptController()>
c0025af5:	83 c4 10             	add    esp,0x10
c0025af8:	90                   	nop
c0025af9:	83 c4 0c             	add    esp,0xc
c0025afc:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025afe <PIC::~PIC()>:
c0025afe:	83 ec 0c             	sub    esp,0xc
c0025b01:	83 ec 0c             	sub    esp,0xc
c0025b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b08:	e8 cd ff ff ff       	call   c0025ada <PIC::~PIC()>
c0025b0d:	83 c4 10             	add    esp,0x10
c0025b10:	83 ec 08             	sub    esp,0x8
c0025b13:	68 58 21 00 00       	push   0x2158
c0025b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1c:	e8 52 c6 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025b21:	83 c4 10             	add    esp,0x10
c0025b24:	83 c4 0c             	add    esp,0xc
c0025b27:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025b28 <APICTimer::~APICTimer()>:
c0025b28:	83 ec 0c             	sub    esp,0xc
c0025b2b:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0025b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b34:	89 10                	mov    DWORD PTR [eax],edx
c0025b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3a:	83 ec 0c             	sub    esp,0xc
c0025b3d:	50                   	push   eax
c0025b3e:	e8 c1 01 ff ff       	call   c0015d04 <Timer::~Timer()>
c0025b43:	83 c4 10             	add    esp,0x10
c0025b46:	90                   	nop
c0025b47:	83 c4 0c             	add    esp,0xc
c0025b4a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b4c <APICTimer::~APICTimer()>:
c0025b4c:	83 ec 0c             	sub    esp,0xc
c0025b4f:	83 ec 0c             	sub    esp,0xc
c0025b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b56:	e8 cd ff ff ff       	call   c0025b28 <APICTimer::~APICTimer()>
c0025b5b:	83 c4 10             	add    esp,0x10
c0025b5e:	83 ec 08             	sub    esp,0x8
c0025b61:	68 60 01 00 00       	push   0x160
c0025b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b6a:	e8 04 c6 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025b6f:	83 c4 10             	add    esp,0x10
c0025b72:	83 c4 0c             	add    esp,0xc
c0025b75:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b76 <PIT::~PIT()>:
c0025b76:	83 ec 0c             	sub    esp,0xc
c0025b79:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0025b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b82:	89 10                	mov    DWORD PTR [eax],edx
c0025b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b88:	83 ec 0c             	sub    esp,0xc
c0025b8b:	50                   	push   eax
c0025b8c:	e8 73 01 ff ff       	call   c0015d04 <Timer::~Timer()>
c0025b91:	83 c4 10             	add    esp,0x10
c0025b94:	90                   	nop
c0025b95:	83 c4 0c             	add    esp,0xc
c0025b98:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b9a <PIT::~PIT()>:
c0025b9a:	83 ec 0c             	sub    esp,0xc
c0025b9d:	83 ec 0c             	sub    esp,0xc
c0025ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ba4:	e8 cd ff ff ff       	call   c0025b76 <PIT::~PIT()>
c0025ba9:	83 c4 10             	add    esp,0x10
c0025bac:	83 ec 08             	sub    esp,0x8
c0025baf:	68 5c 01 00 00       	push   0x15c
c0025bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bb8:	e8 b6 c5 fe ff       	call   c0012173 <operator delete(void*, unsigned long)>
c0025bbd:	83 c4 10             	add    esp,0x10
c0025bc0:	83 c4 0c             	add    esp,0xc
c0025bc3:	c3                   	ret    
